using System;
using System.Threading;
using Oxide.Core;
using Oxide.Core.Logging;
using UnityEngine;

public sealed class UnityLogger : Logger
{
	private readonly Thread mainThread = Thread.CurrentThread;

	public UnityLogger()
		: base(true)
	{
	}

	protected override void ProcessMessage(LogMessage message)
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Invalid comparison between Unknown and I4
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Invalid comparison between Unknown and I4
		if (Thread.CurrentThread != mainThread)
		{
			Interface.Oxide.NextTick((Action)delegate
			{
				//IL_0007: Unknown result type (might be due to invalid IL or missing references)
				((Logger)this).ProcessMessage(message);
			});
			return;
		}
		LogType type = message.Type;
		if ((int)type != 1)
		{
			if ((int)type == 3)
			{
				Debug.LogWarning((object)message.ConsoleMessage);
			}
			else
			{
				Debug.Log((object)message.ConsoleMessage);
			}
		}
		else
		{
			Debug.LogError((object)message.ConsoleMessage);
		}
	}
}
