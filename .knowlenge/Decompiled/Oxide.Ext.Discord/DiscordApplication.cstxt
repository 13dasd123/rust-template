using System;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Helpers;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Types;
using Oxide.Plugins;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class DiscordApplication : IDebugLoggable
{
	[JsonProperty("id")]
	public Snowflake Id { get; set; }

	[JsonProperty("name")]
	public string Name { get; set; }

	[JsonProperty("icon")]
	public string Icon { get; set; }

	[JsonProperty("description")]
	public string Description { get; set; }

	[JsonProperty("rpc_origins")]
	public List<string> RpcOrigins { get; set; }

	[JsonProperty("bot_public")]
	public bool BotPublic { get; set; }

	[JsonProperty("bot_require_code_grant")]
	public bool BotRequireCodeGrant { get; set; }

	[JsonProperty("bot")]
	public DiscordUser Bot { get; set; }

	[JsonProperty("terms_of_service_url")]
	public string TermsOfServiceUrl { get; set; }

	[JsonProperty("privacy_policy_url")]
	public string PrivacyPolicyUrl { get; set; }

	[JsonProperty("owner")]
	public DiscordUser Owner { get; set; }

	[JsonProperty("verify_key")]
	public string Verify { get; set; }

	[JsonProperty("team")]
	public DiscordTeam Team { get; set; }

	[JsonProperty("guild_id")]
	public Snowflake? GuildId { get; set; }

	[JsonProperty("guild")]
	public DiscordGuild Guild { get; set; }

	[JsonProperty("primary_sku_id")]
	public string PrimarySkuId { get; set; }

	[JsonProperty("slug")]
	public string Slug { get; set; }

	[JsonProperty("cover_image")]
	public string CoverImage { get; set; }

	[JsonProperty("flags")]
	public ApplicationFlags? Flags { get; set; }

	[JsonProperty("approximate_guild_count")]
	public int? ApproximateGuildCount { get; set; }

	[JsonProperty("redirect_uris")]
	public List<string> RedirectUris { get; set; }

	[JsonProperty("interactions_endpoint_url")]
	public string InteractionsEndpointUrl { get; set; }

	[JsonProperty("role_connections_verification_url")]
	public string RoleConnectionsVerificationUrl { get; set; }

	[JsonProperty("tags")]
	public List<string> Tags { get; set; }

	[JsonProperty("install_params")]
	public InstallParams InstallParams { get; set; }

	[JsonProperty("integration_types_config")]
	public Hash<ApplicationIntegrationType, ApplicationIntegrationTypeConfiguration> IntegrationTypesConfig { get; set; }

	[JsonProperty("custom_install_url")]
	public string CustomInstallUrl { get; set; }

	public string GetApplicationIconUrl => DiscordCdn.GetApplicationIconUrl(Id, Icon);

	public string GetApplicationCoverUrl => DiscordCdn.GetApplicationIconUrl(Id, CoverImage);

	public bool HasApplicationFlag(ApplicationFlags flag)
	{
		return Flags.HasValue && (Flags.Value & flag) == flag;
	}

	public bool HasAnyApplicationFlags(ApplicationFlags flag)
	{
		return Flags.HasValue && (Flags.Value & flag) != 0;
	}

	public static IPromise<DiscordApplication> Get(DiscordClient client)
	{
		return client.Bot.Rest.Get<DiscordApplication>(client, "applications/@me", null);
	}

	public IPromise<DiscordApplication> Edit(DiscordClient client, ApplicationUpdate update)
	{
		return client.Bot.Rest.Patch<DiscordApplication>(client, "applications/@me", update, null);
	}

	public IPromise<List<DiscordApplicationCommand>> GetGlobalCommands(DiscordClient client, bool withLocalizations = false)
	{
		return client.Bot.Rest.Get<List<DiscordApplicationCommand>>(client, $"applications/{Id}/commands?with_localizations={withLocalizations}", null);
	}

	public IPromise<DiscordApplicationCommand> GetGlobalCommand(DiscordClient client, Snowflake commandId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(commandId);
		return client.Bot.Rest.Get<DiscordApplicationCommand>(client, $"applications/{Id}/commands/{commandId}", null);
	}

	public IPromise<DiscordApplicationCommand> CreateGlobalCommand(DiscordClient client, CommandCreate create)
	{
		if (create == null)
		{
			throw new ArgumentNullException("create");
		}
		return client.Bot.Rest.Post<DiscordApplicationCommand>(client, $"applications/{Id}/commands", create, null);
	}

	public IPromise<List<DiscordApplicationCommand>> BulkOverwriteGlobalCommands(DiscordClient client, List<CommandBulkOverwrite> commands)
	{
		if (commands == null)
		{
			throw new ArgumentNullException("commands");
		}
		return client.Bot.Rest.Put<List<DiscordApplicationCommand>>(client, $"applications/{Id}/commands", commands, null);
	}

	public IPromise<List<DiscordApplicationCommand>> GetGuildCommands(DiscordClient client, Snowflake guildId, bool withLocalizations = false)
	{
		InvalidSnowflakeException.ThrowIfInvalid(guildId);
		return client.Bot.Rest.Get<List<DiscordApplicationCommand>>(client, $"applications/{Id}/guilds/{guildId}/commands?with_localizations={withLocalizations}", null);
	}

	public IPromise<DiscordApplicationCommand> GetGuildCommand(DiscordClient client, Snowflake guildId, Snowflake commandId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(guildId);
		InvalidSnowflakeException.ThrowIfInvalid(commandId);
		return client.Bot.Rest.Get<DiscordApplicationCommand>(client, $"applications/{Id}/guilds/{guildId}/commands/{commandId}", null);
	}

	public IPromise<DiscordApplicationCommand> CreateGuildCommand(DiscordClient client, Snowflake guildId, CommandCreate create)
	{
		if (create == null)
		{
			throw new ArgumentNullException("create");
		}
		InvalidSnowflakeException.ThrowIfInvalid(guildId);
		return client.Bot.Rest.Post<DiscordApplicationCommand>(client, $"applications/{Id}/guilds/{guildId}/commands", create, null);
	}

	public IPromise<List<GuildCommandPermissions>> GetGuildCommandPermissions(DiscordClient client, Snowflake guildId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(guildId);
		return client.Bot.Rest.Get<List<GuildCommandPermissions>>(client, $"applications/{Id}/guilds/{guildId}/commands/permissions", null);
	}

	public IPromise<List<DiscordApplicationCommand>> GetAllCommands(DiscordClient client, bool withLocalizations = false)
	{
		List<IPromise<List<DiscordApplicationCommand>>> list = new List<IPromise<List<DiscordApplicationCommand>>> { GetGlobalCommands(client, withLocalizations) };
		list.AddRange(client.Bot.Servers.Keys.Select((Snowflake id) => GetGuildCommands(client, id, withLocalizations)));
		return Promise<List<DiscordApplicationCommand>>.All(list).Then((IEnumerable<List<DiscordApplicationCommand>> commands) => commands.SelectMany((List<DiscordApplicationCommand> c) => c).ToList());
	}

	public IPromise<List<ApplicationRoleConnectionMetadata>> GetRoleConnectionMetadata(DiscordClient client)
	{
		return client.Bot.Rest.Get<List<ApplicationRoleConnectionMetadata>>(client, $"applications/{Id}/role-connections/metadata", null);
	}

	public IPromise<List<ApplicationRoleConnectionMetadata>> EditRoleConnectionMetadata(DiscordClient client, List<ApplicationRoleConnectionMetadata> records)
	{
		DiscordApplicationException.ThrowIfInvalidApplicationRoleConnectionMetadataLength(records);
		return client.Bot.Rest.Put<List<ApplicationRoleConnectionMetadata>>(client, $"applications/{Id}/role-connections/metadata", records, null);
	}

	public IPromise<ApplicationEmojis> GetApplicationEmojis(DiscordClient client)
	{
		return client.Bot.Rest.Get<ApplicationEmojis>(client, $"applications/{Id}/emojis", null);
	}

	public IPromise<DiscordEmoji> GetApplicationEmoji(DiscordClient client, Snowflake emojiId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(emojiId);
		return client.Bot.Rest.Get<DiscordEmoji>(client, $"applications/{Id}/emojis/{emojiId}", null);
	}

	public IPromise<DiscordEmoji> CreateApplicationEmoji(DiscordClient client, ApplicationEmojiCreate create)
	{
		return client.Bot.Rest.Post<DiscordEmoji>(client, $"applications/{Id}/emojis", create, null);
	}

	public IPromise<DiscordEmoji> UpdateApplicationEmoji(DiscordClient client, Snowflake emojiId, ApplicationEmojiUpdate update)
	{
		InvalidSnowflakeException.ThrowIfInvalid(emojiId);
		return client.Bot.Rest.Patch<DiscordEmoji>(client, $"applications/{Id}/emojis/{emojiId}", update, null);
	}

	public IPromise DeleteApplicationEmoji(DiscordClient client, Snowflake emojiId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(emojiId);
		return client.Bot.Rest.Delete(client, $"applications/{Id}/emojis/{emojiId}", null);
	}

	public void LogDebug(DebugLogger logger)
	{
		logger.AppendField("ID", Id);
		logger.AppendField("Name", Name);
		logger.AppendFieldEnum("Flags", Flags.GetValueOrDefault());
	}
}
