using System;
using System.Collections.Generic;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Builders;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Libraries;
using Oxide.Plugins;

public class ApplicationCommandBuilder
{
	internal readonly CommandCreate Command;

	private CommandOptionType? _chosenType;

	private readonly ServerLocale _defaultLanguage;

	public readonly string CommandName;

	public ApplicationCommandBuilder(string name, string description, ApplicationCommandType type)
		: this(name, description, type, ServerLocale.Default)
	{
	}

	public ApplicationCommandBuilder(string name, string description, ApplicationCommandType type, ServerLocale defaultLanguage)
	{
		if (!defaultLanguage.IsValid)
		{
			ServerLocaleNotFoundException.ThrowNotFound(defaultLanguage);
		}
		InvalidApplicationCommandException.ThrowIfInvalidName(name, allowNullOrEmpty: false);
		InvalidApplicationCommandException.ThrowIfInvalidDescription(description, type);
		Command = new CommandCreate(name, description, type, new List<CommandOption>());
		_defaultLanguage = defaultLanguage;
		AddNameLocalization(Command.Name, _defaultLanguage);
		AddDescriptionLocalization(Command.Description, _defaultLanguage);
		CommandName = name;
	}

	public ApplicationCommandBuilder AddDefaultPermissions(PermissionFlags permissions)
	{
		Command.DefaultMemberPermissions = permissions;
		return this;
	}

	public ApplicationCommandBuilder AllowInDirectMessages(bool allow)
	{
		Command.DmPermission = allow;
		return this;
	}

	[Obsolete("AddNameLocalizations(Plugin plugin, string langKey) has been deprecated and will be removed in the future. Please use AddNameLocalization(string name, string lang) instead")]
	public ApplicationCommandBuilder AddNameLocalizations(Plugin plugin, string langKey)
	{
		Command.NameLocalizations = BaseDiscordLibrary<DiscordLocales>.Instance.GetDiscordLocalizations(plugin, langKey);
		return this;
	}

	public ApplicationCommandBuilder AddNameLocalization(string name, ServerLocale serverLocale)
	{
		if (Command.NameLocalizations == null)
		{
			Command.NameLocalizations = new Hash<string, string>();
		}
		DiscordLocale discordLocale = serverLocale.GetDiscordLocale();
		if (discordLocale.IsValid)
		{
			Command.NameLocalizations[discordLocale.Id] = name;
		}
		return this;
	}

	[Obsolete("AddDescriptionLocalizations(Plugin plugin, string langKey) has been deprecated and will be removed in the future. Please use AddDescriptionLocalization(string name, string lang) instead")]
	public ApplicationCommandBuilder AddDescriptionLocalizations(Plugin plugin, string langKey)
	{
		Command.DescriptionLocalizations = BaseDiscordLibrary<DiscordLocales>.Instance.GetDiscordLocalizations(plugin, langKey);
		return this;
	}

	public ApplicationCommandBuilder AddDescriptionLocalization(string description, ServerLocale serverLocale)
	{
		if (Command.DescriptionLocalizations == null)
		{
			Command.DescriptionLocalizations = new Hash<string, string>();
		}
		DiscordLocale discordLocale = serverLocale.GetDiscordLocale();
		if (discordLocale.IsValid)
		{
			Command.DescriptionLocalizations[discordLocale.Id] = description;
		}
		return this;
	}

	public ApplicationCommandBuilder AddSubCommandGroup(string name, string description, Action<ApplicationCommandGroupBuilder> builder)
	{
		InvalidCommandOptionException.ThrowIfInvalidName(name, allowNullOrEmpty: false);
		InvalidCommandOptionException.ThrowIfInvalidDescription(description, allowNullOrEmpty: false);
		ApplicationCommandBuilderException.ThrowIfMixingSubCommandGroups(_chosenType);
		ApplicationCommandBuilderException.ThrowIfAddingSubCommandToMessageOrUser(this);
		_chosenType = CommandOptionType.SubCommandGroup;
		ApplicationCommandGroupBuilder obj = new ApplicationCommandGroupBuilder(Command.Options, name, description, _defaultLanguage, CommandName);
		builder?.Invoke(obj);
		return this;
	}

	public ApplicationCommandBuilder AddSubCommand(string name, string description, Action<ApplicationSubCommandBuilder> builder = null)
	{
		InvalidCommandOptionException.ThrowIfInvalidName(name, allowNullOrEmpty: false);
		InvalidCommandOptionException.ThrowIfInvalidDescription(description, allowNullOrEmpty: false);
		ApplicationCommandBuilderException.ThrowIfMixingSubCommandGroups(_chosenType);
		ApplicationCommandBuilderException.ThrowIfAddingSubCommandToMessageOrUser(this);
		_chosenType = CommandOptionType.SubCommand;
		ApplicationSubCommandBuilder obj = new ApplicationSubCommandBuilder(Command.Options, name, description, _defaultLanguage, CommandName, null);
		builder?.Invoke(obj);
		return this;
	}

	public ApplicationCommandBuilder AddOption(CommandOptionType type, string name, string description, Action<ApplicationCommandOptionBuilder> builder = null)
	{
		ApplicationCommandBuilderException.ThrowIfMixingCommandOptions(_chosenType);
		ApplicationCommandOptionBuilder obj = new ApplicationCommandOptionBuilder(Command.Options, type, name, description, _defaultLanguage, CommandName, null, null);
		builder?.Invoke(obj);
		return this;
	}

	public CommandCreate Build()
	{
		return Command;
	}

	public DiscordCommandLocalization BuildCommandLocalization(string lang = "en")
	{
		return new DiscordCommandLocalization(Command, ServerLocale.Parse(lang));
	}
}
