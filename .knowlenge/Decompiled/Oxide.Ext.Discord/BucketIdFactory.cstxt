using System;
using Oxide.Core.Libraries;
using Oxide.Ext.Discord.Cache;
using Oxide.Ext.Discord.Rest;
using Oxide.Ext.Discord.Types;

internal static class BucketIdFactory
{
	private const string SplitChar = "/";

	private const char QueryStringChar = '?';

	private const string IdReplacement = "id";

	private const string ReactionsRoute = "reactions";

	internal static BucketId GenerateId(RequestMethod method, string route)
	{
		int num = route.LastIndexOf('?');
		if (num == -1)
		{
			num = route.Length;
		}
		StringTokenizer stringTokenizer = new StringTokenizer(route, "/", num);
		stringTokenizer.MoveNext();
		ReadOnlySpan<char> readOnlySpan = stringTokenizer.Current;
		ValueStringBuilder valueStringBuilder = default(ValueStringBuilder);
		valueStringBuilder.Append(Singleton<EnumCache<RequestMethod>>.Instance.ToString(method));
		valueStringBuilder.Append(':');
		valueStringBuilder.Append(readOnlySpan);
		ReadOnlySpan<char> other = "reactions".AsSpan();
		while (stringTokenizer.MoveNext())
		{
			valueStringBuilder.Append('/');
			ReadOnlySpan<char> current = GetCurrent(stringTokenizer.Index, readOnlySpan, stringTokenizer.Current);
			valueStringBuilder.Append(current);
			if (MemoryExtensions.Equals(current, other, StringComparison.OrdinalIgnoreCase))
			{
				break;
			}
			readOnlySpan = current;
		}
		return new BucketId(valueStringBuilder.ToString());
	}

	private static ReadOnlySpan<char> GetCurrent(int index, ReadOnlySpan<char> previous, ReadOnlySpan<char> token)
	{
		return (char.IsNumber(token[0]) && !IsMajorId(index, previous)) ? "id".AsSpan() : token;
	}

	private static bool IsMajorId(int index, ReadOnlySpan<char> previous)
	{
		return index == 1 && (MemoryExtensions.Equals(previous, "guilds".AsSpan(), StringComparison.OrdinalIgnoreCase) || MemoryExtensions.Equals(previous, "channels".AsSpan(), StringComparison.OrdinalIgnoreCase) || MemoryExtensions.Equals(previous, "webhooks".AsSpan(), StringComparison.OrdinalIgnoreCase));
	}
}
