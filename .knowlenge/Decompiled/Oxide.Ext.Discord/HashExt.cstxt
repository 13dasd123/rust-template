using System;
using System.Collections.Generic;
using Oxide.Ext.Discord.Libraries;
using Oxide.Plugins;

public static class HashExt
{
	public static void RemoveAll<TKey, TValue>(this IDictionary<TKey, TValue> hash, Func<KeyValuePair<TKey, TValue>, bool> predicate)
	{
		if (hash == null)
		{
			throw new ArgumentNullException("hash");
		}
		List<TKey> list = DiscordPool.Internal.GetList<TKey>();
		foreach (KeyValuePair<TKey, TValue> item in hash)
		{
			if (predicate(item))
			{
				list.Add(item.Key);
			}
		}
		foreach (TKey item2 in list)
		{
			hash.Remove(item2);
		}
		DiscordPool.Internal.FreeList(list);
	}

	public static void RemoveAll<TKey, TValue>(this IDictionary<TKey, TValue> hash, Func<TValue, bool> predicate, Action<TValue> onRemove = null)
	{
		if (hash == null)
		{
			throw new ArgumentNullException("hash");
		}
		List<TKey> list = DiscordPool.Internal.GetList<TKey>();
		foreach (KeyValuePair<TKey, TValue> item in hash)
		{
			if (predicate(item.Value))
			{
				list.Add(item.Key);
				onRemove?.Invoke(item.Value);
			}
		}
		foreach (TKey item2 in list)
		{
			hash.Remove(item2);
		}
		DiscordPool.Internal.FreeList(list);
	}

	internal static Hash<TKey, TValue> Clone<TKey, TValue>(this Hash<TKey, TValue> hash)
	{
		Hash<TKey, TValue> hash2 = new Hash<TKey, TValue>();
		CopyTo(hash, hash2);
		return hash2;
	}

	internal static void CopyTo<TKey, TValue>(this IDictionary<TKey, TValue> hash, Hash<TKey, TValue> target)
	{
		foreach (KeyValuePair<TKey, TValue> item in hash)
		{
			target[item.Key] = item.Value;
		}
	}
}
