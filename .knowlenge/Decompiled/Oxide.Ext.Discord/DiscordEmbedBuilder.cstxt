using System;
using System.Collections.Generic;
using System.Globalization;
using Oxide.Ext.Discord.Builders;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;

public class DiscordEmbedBuilder
{
	private readonly DiscordEmbed _embed;

	public DiscordEmbedBuilder()
		: this(new DiscordEmbed())
	{
	}

	public DiscordEmbedBuilder(DiscordEmbed embed)
	{
		_embed = embed;
	}

	public DiscordEmbedBuilder AddTitle(string title)
	{
		InvalidEmbedException.ThrowIfInvalidTitle(title);
		_embed.Title = title;
		return this;
	}

	public DiscordEmbedBuilder AddDescription(string description)
	{
		InvalidEmbedException.ThrowIfInvalidDescription(description);
		_embed.Description = description;
		return this;
	}

	public DiscordEmbedBuilder AddUrl(string url)
	{
		_embed.Url = url;
		return this;
	}

	public DiscordEmbedBuilder AddAuthor(string name, string url = null, string iconUrl = null, string proxyIconUrl = null)
	{
		InvalidEmbedException.ThrowIfInvalidAuthorName(name);
		_embed.Author = new EmbedAuthor(name, url, iconUrl, proxyIconUrl);
		return this;
	}

	public DiscordEmbedBuilder AddFooter(string text, string iconUrl = null, string proxyIconUrl = null)
	{
		InvalidEmbedException.ThrowIfInvalidFooterText(text);
		_embed.Footer = new EmbedFooter(text, iconUrl, proxyIconUrl);
		return this;
	}

	public DiscordEmbedBuilder AddColor(DiscordColor color)
	{
		_embed.Color = color;
		return this;
	}

	public DiscordEmbedBuilder AddColor(uint color)
	{
		_embed.Color = new DiscordColor(color);
		return this;
	}

	public DiscordEmbedBuilder AddColor(string color)
	{
		_embed.Color = new DiscordColor(uint.Parse(color.TrimStart('#'), NumberStyles.AllowHexSpecifier));
		return this;
	}

	public DiscordEmbedBuilder AddColor(byte red, byte green, byte blue)
	{
		_embed.Color = new DiscordColor(red, green, blue);
		return this;
	}

	public DiscordEmbedBuilder AddColor(int red, int green, int blue)
	{
		_embed.Color = new DiscordColor(red, green, blue);
		return this;
	}

	public DiscordEmbedBuilder AddColor(float red, float green, float blue)
	{
		_embed.Color = new DiscordColor(red, green, blue);
		return this;
	}

	public DiscordEmbedBuilder AddColor(double red, double green, double blue)
	{
		_embed.Color = new DiscordColor(red, green, blue);
		return this;
	}

	public DiscordEmbedBuilder AddNowTimestamp()
	{
		_embed.Timestamp = DateTime.UtcNow;
		return this;
	}

	public DiscordEmbedBuilder AddTimestamp(DateTime timestamp)
	{
		_embed.Timestamp = timestamp;
		return this;
	}

	public DiscordEmbedBuilder AddBlankField(bool inline)
	{
		return AddField(null, null, inline);
	}

	public DiscordEmbedBuilder AddField(string name, string value, bool inline)
	{
		DiscordEmbed embed = _embed;
		if (embed.Fields == null)
		{
			List<EmbedField> list2 = (embed.Fields = new List<EmbedField>());
		}
		InvalidEmbedException.ThrowIfInvalidFieldCount(_embed.Fields.Count);
		InvalidEmbedException.ThrowIfInvalidFieldName(name);
		InvalidEmbedException.ThrowIfInvalidFieldValue(value);
		_embed.Fields.Add(new EmbedField(name, value, inline));
		return this;
	}

	public DiscordEmbedBuilder AddImage(string url, int? width = null, int? height = null, string proxyUrl = null)
	{
		InvalidEmbedException.ThrowIfInvalidUrl(url);
		_embed.Image = new EmbedImage(url, width, height, proxyUrl);
		return this;
	}

	public DiscordEmbedBuilder AddThumbnail(string url, int? width = null, int? height = null, string proxyUrl = null)
	{
		InvalidEmbedException.ThrowIfInvalidUrl(url);
		_embed.Thumbnail = new EmbedThumbnail(url, width, height, proxyUrl);
		return this;
	}

	public DiscordEmbedBuilder AddVideo(string url, int? width = null, int? height = null, string proxyUrl = null)
	{
		InvalidEmbedException.ThrowIfInvalidUrl(url);
		_embed.Video = new EmbedVideo(url, width, height, proxyUrl);
		return this;
	}

	public DiscordEmbedBuilder AddProvider(string name, string url)
	{
		_embed.Provider = new EmbedProvider(name, url);
		return this;
	}

	public DiscordEmbed Build()
	{
		return _embed;
	}

	public List<DiscordEmbed> BuildList()
	{
		return new List<DiscordEmbed> { _embed };
	}
}
