using System;
using System.Buffers;
using System.Collections.Generic;
using System.Globalization;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;
using Oxide.Ext.Discord.Cache;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Types;

public class DebugLogger
{
	private readonly StringBuilder _logger = DiscordPool.Internal.GetStringBuilder();

	private const char IndentCharacter = '\t';

	private int _indent;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void IncrementIndent()
	{
		_indent++;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void DecrementIndent()
	{
		_indent = Math.Max(_indent - 1, 0);
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public void AppendIndent()
	{
		_logger.Append('\t', _indent);
	}

	public void AppendFieldPrefix(string name)
	{
		AppendIndent();
		_logger.Append(name);
		_logger.Append(": ");
	}

	public void AppendField(string name, string value)
	{
		AppendField(name, value.AsSpan());
	}

	public void AppendField(string name, ReadOnlySpan<char> value)
	{
		AppendFieldPrefix(name);
		_logger.Append(value);
		_logger.AppendLine();
	}

	public void AppendField(string name, int value)
	{
		char[] array = System.Buffers.ArrayPool<char>.Shared.Rent(20);
		Span<char> destination = array.AsSpan();
		if (value.TryFormat(destination, out var charsWritten))
		{
			AppendField(name, destination.Slice(0, charsWritten));
		}
		else
		{
			AppendField(name, value.ToString());
		}
		System.Buffers.ArrayPool<char>.Shared.Return(array);
	}

	public void AppendField(string name, double value)
	{
		char[] array = System.Buffers.ArrayPool<char>.Shared.Rent(64);
		Span<char> destination = array.AsSpan();
		if (value.TryFormat(destination, out var charsWritten))
		{
			AppendField(name, destination.Slice(0, charsWritten));
		}
		else
		{
			AppendField(name, value.ToString(CultureInfo.InvariantCulture));
		}
		System.Buffers.ArrayPool<char>.Shared.Return(array);
	}

	public void AppendField(string name, float value)
	{
		char[] array = System.Buffers.ArrayPool<char>.Shared.Rent(64);
		Span<char> destination = array.AsSpan();
		if (value.TryFormat(destination, out var charsWritten))
		{
			AppendField(name, destination.Slice(0, charsWritten));
		}
		else
		{
			AppendField(name, value.ToString(CultureInfo.InvariantCulture));
		}
		System.Buffers.ArrayPool<char>.Shared.Return(array);
	}

	public void AppendField(string name, ulong value)
	{
		char[] array = System.Buffers.ArrayPool<char>.Shared.Rent(32);
		Span<char> destination = array.AsSpan();
		if (value.TryFormat(destination, out var charsWritten))
		{
			AppendField(name, destination.Slice(0, charsWritten));
		}
		else
		{
			AppendField(name, value.ToString());
		}
		System.Buffers.ArrayPool<char>.Shared.Return(array);
	}

	public void AppendField(string name, long value)
	{
		char[] array = System.Buffers.ArrayPool<char>.Shared.Rent(32);
		Span<char> destination = array.AsSpan();
		if (value.TryFormat(destination, out var charsWritten))
		{
			AppendField(name, destination.Slice(0, charsWritten));
		}
		else
		{
			AppendField(name, value.ToString());
		}
		System.Buffers.ArrayPool<char>.Shared.Return(array);
	}

	public void AppendField(string name, bool value)
	{
		AppendFieldPrefix(name);
		_logger.AppendLine(value ? "Yes" : "No");
	}

	public void AppendField(string name, Snowflake value)
	{
		char[] array = System.Buffers.ArrayPool<char>.Shared.Rent(64);
		Span<char> destination = array.AsSpan();
		if (value.TryFormat(destination, out var charsWritten))
		{
			AppendField(name, destination.Slice(0, charsWritten));
		}
		else
		{
			AppendField(name, value.ToString());
		}
		System.Buffers.ArrayPool<char>.Shared.Return(array);
	}

	public void AppendField(string name, Snowflake? value)
	{
		if (value.HasValue)
		{
			AppendField(name, value.Value);
		}
		else
		{
			AppendField(name, "Invalid ID");
		}
	}

	public void AppendFieldEnum<T>(string name, T value) where T : struct, IComparable, IFormattable, IConvertible
	{
		AppendField(name, Singleton<EnumCache<T>>.Instance.ToString(value));
	}

	public void AppendFieldOutOf(string name, int amount, int total)
	{
		AppendFieldPrefix(name);
		_logger.Append(Singleton<StringCache<int>>.Instance.ToString(amount));
		_logger.Append('/');
		_logger.AppendLine(Singleton<StringCache<int>>.Instance.ToString(total));
	}

	public void AppendMethod(string name, MethodInfo info)
	{
		AppendFieldPrefix(name);
		_logger.Append(info.DeclaringType?.Name ?? "Unknown Type");
		_logger.Append('.');
		_logger.AppendLine(info.Name);
	}

	public void AppendField(string name, string value1, string value2)
	{
		AppendFieldPrefix(name);
		_logger.Append(value1);
		_logger.Append(' ');
		_logger.AppendLine(value2);
	}

	public void AppendField(string name, TimeSpan time)
	{
		AppendFieldPrefix(name);
		bool hasTime = AppendTimeSlice(time.TotalDays, time.Hours, " Days", hasTime: false);
		hasTime = AppendTimeSlice(time.TotalHours, time.Hours, " Hours", hasTime);
		hasTime = AppendTimeSlice(time.TotalMinutes, time.Minutes, " Hours", hasTime);
		if (!AppendTimeSlice(time.TotalSeconds, time.Seconds, " Seconds", hasTime) && !AppendTimeSlice(time.TotalMilliseconds, time.Milliseconds, " Milliseconds", hasTime: false))
		{
			_logger.Append("0 Seconds");
		}
	}

	private bool AppendTimeSlice(double total, int time, string suffix, bool hasTime)
	{
		if (total < 1.0)
		{
			return false;
		}
		if (hasTime)
		{
			_logger.Append(' ');
		}
		_logger.Append(Singleton<StringCache<int>>.Instance.ToString(time));
		_logger.Append(suffix);
		return true;
	}

	public void AppendNullField(string name)
	{
		AppendFieldPrefix(name);
		_logger.AppendLine("IS NULL");
	}

	public void AppendLine()
	{
		_logger.AppendLine();
	}

	public void AppendLine(char character, int amount)
	{
		AppendIndent();
		_logger.Append(character, amount);
		_logger.AppendLine();
	}

	public void AppendLine(string value)
	{
		AppendIndent();
		_logger.AppendLine(value);
	}

	public void AppendChannelPath(string name, DiscordGuild guild, DiscordChannel channel, DiscordChannel parent = null)
	{
		AppendFieldPrefix(name);
		_logger.Append(guild?.Name ?? "Unknown Guild");
		_logger.Append(" (");
		_logger.Append(guild?.Id.ToString());
		_logger.Append(")/");
		if (parent != null)
		{
			_logger.Append(parent.Name ?? "Unknown Channel");
			_logger.Append(" (");
			_logger.Append(parent.Id.ToString());
			_logger.Append(")/");
		}
		_logger.Append(channel?.Name ?? "Unknown Channel");
		_logger.Append(" (");
		_logger.Append(channel?.Id.ToString());
		_logger.AppendLine(")");
	}

	public void AppendObject(string name, IDebugLoggable obj)
	{
		if (obj == null)
		{
			AppendNullField(name);
			return;
		}
		StartObject(name);
		obj.LogDebug(this);
		EndObject();
	}

	public void AppendList(string name, IEnumerable<string> items)
	{
		List<string> list = items.ToPooledList(DiscordPool.Internal);
		AppendList(name, list);
		DiscordPool.Internal.FreeList(list);
	}

	public void AppendList(string name, List<string> items)
	{
		if (items.Count == 0)
		{
			AppendField(name, "[]");
			return;
		}
		StartArray(name);
		for (int i = 0; i < items.Count; i++)
		{
			AppendLine(items[i]);
		}
		EndArray();
	}

	public void AppendList<T>(string name, IEnumerable<T> items) where T : IDebugLoggable
	{
		List<T> list = items.ToPooledList(DiscordPool.Internal);
		AppendList(name, list);
		DiscordPool.Internal.FreeList(list);
	}

	public void AppendList<T>(string name, List<T> items) where T : IDebugLoggable
	{
		if (items.Count == 0)
		{
			AppendField(name, "[]");
			return;
		}
		StartArray(name);
		for (int i = 0; i < items.Count; i++)
		{
			AppendObject(string.Empty, items[i]);
		}
		EndArray();
	}

	public void StartArray(string name)
	{
		if (!string.IsNullOrEmpty(name))
		{
			AppendFieldPrefix(name);
			_logger.AppendLine();
		}
		AppendIndent();
		_logger.AppendLine("[");
		IncrementIndent();
	}

	public void EndArray()
	{
		DecrementIndent();
		AppendIndent();
		_logger.Append("]");
		_logger.AppendLine();
	}

	public void StartObject(string name)
	{
		if (!string.IsNullOrEmpty(name))
		{
			AppendFieldPrefix(name);
			_logger.AppendLine();
		}
		AppendIndent();
		_logger.AppendLine("{");
		IncrementIndent();
	}

	public void EndObject()
	{
		DecrementIndent();
		AppendIndent();
		_logger.Append("}");
		_logger.AppendLine();
	}

	public override string ToString()
	{
		return DiscordPool.Internal.ToStringAndFree(_logger);
	}
}
