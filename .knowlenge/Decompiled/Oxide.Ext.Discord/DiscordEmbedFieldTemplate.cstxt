using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Callbacks;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Types;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class DiscordEmbedFieldTemplate : IBulkTemplate<EmbedField>
{
	[JsonProperty("Field Title")]
	public string Name { get; set; } = string.Empty;

	[JsonProperty("Field Value")]
	public string Value { get; set; } = string.Empty;

	[JsonProperty("Keep Field On Same Row")]
	public bool Inline { get; set; } = true;

	[JsonProperty("Hide Field If Value Empty")]
	public bool HideIfEmpty { get; set; } = false;

	[JsonConstructor]
	public DiscordEmbedFieldTemplate()
	{
	}

	public DiscordEmbedFieldTemplate(string name, string value, bool inline = true)
	{
		Name = name;
		Value = value;
		Inline = inline;
	}

	public EmbedField ToEntity(PlaceholderData data = null, EmbedField field = null)
	{
		DiscordPlaceholders instance = BaseDiscordLibrary<DiscordPlaceholders>.Instance;
		data?.IncrementDepth();
		if (field == null)
		{
			field = new EmbedField();
		}
		string text = instance.ProcessPlaceholders(Value, data);
		if (string.IsNullOrEmpty(text) || text == "\u200b")
		{
			if (HideIfEmpty)
			{
				return null;
			}
			Value = "\u200b";
		}
		field.Name = instance.ProcessPlaceholders(Name, data);
		field.Value = text;
		field.Inline = Inline;
		data?.DecrementDepth();
		data?.AutoDispose();
		return field;
	}

	public IPromise<List<EmbedField>> ToEntityBulk(List<PlaceholderData> data)
	{
		IPendingPromise<List<EmbedField>> pendingPromise = Promise<List<EmbedField>>.Create();
		BulkToEntityCallback<DiscordEmbedFieldTemplate, EmbedField>.Start(this, data, pendingPromise);
		return pendingPromise;
	}
}
