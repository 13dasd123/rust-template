using Newtonsoft.Json;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Helpers;
using Oxide.Ext.Discord.Interfaces;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class DiscordSticker : ISnowflakeEntity
{
	[JsonProperty("id")]
	public Snowflake Id { get; set; }

	[JsonProperty("pack_id")]
	public Snowflake? PackId { get; set; }

	[JsonProperty("name")]
	public string Name { get; set; }

	[JsonProperty("description")]
	public string Description { get; set; }

	[JsonProperty("tags")]
	public string Tags { get; set; }

	[JsonProperty("type")]
	public StickerType Type { get; set; }

	[JsonProperty("format_type")]
	public StickerFormatType FormatType { get; set; }

	[JsonProperty("available")]
	public bool? Available { get; set; }

	[JsonProperty("guild_id")]
	public Snowflake? GuildId { get; set; }

	[JsonProperty("user")]
	public DiscordUser User { get; set; }

	[JsonProperty("sort_value")]
	public int? SortValue { get; set; }

	public string StickerUrl => DiscordCdn.GetSticker(this);

	public static IPromise<DiscordSticker> Get(DiscordClient client, Snowflake stickerId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(stickerId);
		return client.Bot.Rest.Get<DiscordSticker>(client, $"stickers/{stickerId}", null);
	}

	public IPromise<DiscordSticker> ModifyGuildSticker(DiscordClient client)
	{
		InvalidGuildStickerException.ThrowIfNotGuildType(Type, "This endpoint can only be used for guild stickers");
		return client.Bot.Rest.Patch<DiscordSticker>(client, $"guilds/{GuildId}/stickers/{Id}", this, null);
	}

	public IPromise DeleteGuildSticker(DiscordClient client)
	{
		InvalidGuildStickerException.ThrowIfNotGuildType(Type, "This endpoint can only be used for guild stickers");
		return client.Bot.Rest.Delete(client, $"guilds/{GuildId}/stickers/{Id}", null);
	}

	internal void Update(DiscordSticker sticker)
	{
		if (sticker.Name != null)
		{
			Name = sticker.Name;
		}
		if (sticker.Description != null)
		{
			Description = sticker.Description;
		}
		if (sticker.Tags != null)
		{
			Tags = sticker.Tags;
		}
	}
}
