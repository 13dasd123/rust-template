using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Callbacks;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Types;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class DiscordEmbedTemplate : IBulkTemplate<DiscordEmbed>
{
	[JsonProperty("Show Embed")]
	public bool Enabled { get; set; } = true;

	[JsonProperty("Embed Title")]
	public string Title { get; set; } = string.Empty;

	[JsonProperty("Embed Title URL")]
	public string Url { get; set; } = string.Empty;

	[JsonProperty("Embed Description")]
	public string Description { get; set; } = string.Empty;

	[JsonProperty("Embed Hex Color")]
	public string Color { get; set; } = DiscordColor.Default.ToHex();

	[JsonProperty("Embed Image URL")]
	public string ImageUrl { get; set; } = string.Empty;

	[JsonProperty("Embed Thumbnail URL")]
	public string ThumbnailUrl { get; set; } = string.Empty;

	[JsonProperty("Embed Video Url")]
	public string VideoUrl { get; set; } = string.Empty;

	[JsonProperty("Show Embed TimeStamp")]
	public bool TimeStamp { get; set; } = false;

	[JsonProperty("Embed Fields")]
	public List<DiscordEmbedFieldTemplate> Fields { get; set; } = new List<DiscordEmbedFieldTemplate>();

	[JsonProperty("Embed Footer")]
	public EmbedFooterTemplate Footer { get; set; } = new EmbedFooterTemplate();

	[JsonConstructor]
	public DiscordEmbedTemplate()
	{
	}

	public DiscordEmbedTemplate(string title, string description, string titleUrl = "")
	{
		Title = title;
		Description = description;
		Url = titleUrl;
	}

	public DiscordEmbed ToEntity(PlaceholderData data = null, DiscordEmbed embed = null)
	{
		if (embed == null)
		{
			embed = new DiscordEmbed();
		}
		data?.IncrementDepth();
		DiscordPlaceholders instance = BaseDiscordLibrary<DiscordPlaceholders>.Instance;
		embed.Title = instance.ProcessPlaceholders(Title, data);
		embed.Url = instance.ProcessPlaceholders(Url, data);
		embed.Description = instance.ProcessPlaceholders(Description, data);
		embed.Color = ((!string.IsNullOrEmpty(Color)) ? new DiscordColor?(new DiscordColor(instance.ProcessPlaceholders(Color, data))) : ((DiscordColor?)null));
		embed.Timestamp = (TimeStamp ? new DateTime?(DateTime.UtcNow) : ((DateTime?)null));
		if (!string.IsNullOrEmpty(ImageUrl))
		{
			embed.Image = new EmbedImage
			{
				Url = instance.ProcessPlaceholders(ImageUrl, data)
			};
		}
		if (!string.IsNullOrEmpty(ThumbnailUrl))
		{
			embed.Thumbnail = new EmbedThumbnail
			{
				Url = instance.ProcessPlaceholders(ThumbnailUrl, data)
			};
		}
		if (!string.IsNullOrEmpty(VideoUrl))
		{
			embed.Video = new EmbedVideo
			{
				Url = instance.ProcessPlaceholders(ThumbnailUrl, data)
			};
		}
		if (Fields != null && Fields.Count != 0)
		{
			InvalidEmbedException.ThrowIfInvalidFieldCount(Fields.Count);
			embed.Fields = new List<EmbedField>();
			for (int i = 0; i < Fields.Count; i++)
			{
				EmbedField embedField = Fields[i].ToEntity(data);
				if (embedField != null)
				{
					embed.Fields.Add(embedField);
				}
			}
		}
		if (Footer != null && Footer.Enabled)
		{
			embed.Footer = Footer.ToFooter(data);
		}
		data?.DecrementDepth();
		data?.AutoDispose();
		return embed;
	}

	public IPromise<List<DiscordEmbed>> ToEntityBulk(List<PlaceholderData> data = null)
	{
		IPendingPromise<List<DiscordEmbed>> pendingPromise = Promise<List<DiscordEmbed>>.Create();
		BulkToEntityCallback<DiscordEmbedTemplate, DiscordEmbed>.Start(this, data, pendingPromise);
		return pendingPromise;
	}
}
