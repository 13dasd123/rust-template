using System;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Cache;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Json;
using Oxide.Ext.Discord.Types;

[JsonConverter(typeof(SnowflakeConverter))]
public readonly struct Snowflake : IComparable<Snowflake>, IEquatable<Snowflake>, IComparable<ulong>, IEquatable<ulong>, IDiscordKey
{
	public static readonly DateTimeOffset DiscordEpoch = new DateTimeOffset(2015, 1, 1, 0, 0, 0, TimeSpan.Zero);

	public readonly ulong Id;

	public Snowflake(ulong id)
	{
		Id = id;
	}

	public Snowflake(string id)
		: this(ulong.Parse(id))
	{
	}

	public Snowflake(ReadOnlySpan<char> span)
		: this(ulong.Parse(span))
	{
	}

	public Snowflake(DateTimeOffset offset, ulong increment = 0uL)
	{
		Id = ((ulong)(DiscordEpoch - offset).TotalMilliseconds << 22) + increment;
	}

	public DateTimeOffset GetCreationDate()
	{
		return DiscordEpoch + TimeSpan.FromMilliseconds(Id >> 22);
	}

	public bool IsValid()
	{
		return Id != 0;
	}

	public static bool TryParse(string value, out Snowflake snowflake)
	{
		if (ulong.TryParse(value, out var result))
		{
			snowflake = new Snowflake(result);
			return true;
		}
		snowflake = default(Snowflake);
		return false;
	}

	public static bool TryParse(ReadOnlySpan<char> value, out Snowflake snowflake)
	{
		if (ulong.TryParse(value, out var result))
		{
			snowflake = new Snowflake(result);
			return true;
		}
		snowflake = default(Snowflake);
		return false;
	}

	public bool TryFormat(Span<char> destination, out int charsWritten, ReadOnlySpan<char> format = default(ReadOnlySpan<char>), IFormatProvider provider = null)
	{
		return Id.TryFormat(destination, out charsWritten, format, provider);
	}

	public bool Equals(Snowflake other)
	{
		return Id == other.Id;
	}

	public override bool Equals(object obj)
	{
		if (obj is Snowflake other)
		{
			return Equals(other);
		}
		if (obj is ulong other2)
		{
			return Equals(other2);
		}
		return false;
	}

	public bool Equals(ulong other)
	{
		return Id == other;
	}

	public override int GetHashCode()
	{
		return Id.GetHashCode();
	}

	public override string ToString()
	{
		return Singleton<StringCache<ulong>>.Instance.ToString(Id);
	}

	public int CompareTo(Snowflake num)
	{
		return Id.CompareTo(num.Id);
	}

	public int CompareTo(ulong other)
	{
		return Id.CompareTo(other);
	}

	public static bool operator ==(Snowflake left, Snowflake right)
	{
		return left.Id == right.Id;
	}

	public static bool operator !=(Snowflake left, Snowflake right)
	{
		return !(left == right);
	}

	public static bool operator <(Snowflake left, Snowflake right)
	{
		return left.CompareTo(right) < 0;
	}

	public static bool operator >(Snowflake left, Snowflake right)
	{
		return left.CompareTo(right) > 0;
	}

	public static bool operator <=(Snowflake left, Snowflake right)
	{
		return left.CompareTo(right) <= 0;
	}

	public static bool operator >=(Snowflake left, Snowflake right)
	{
		return left.CompareTo(right) >= 0;
	}

	public static implicit operator ulong(Snowflake snowflake)
	{
		return snowflake.Id;
	}

	public static explicit operator Snowflake(ulong id)
	{
		return new Snowflake(id);
	}

	public static implicit operator string(Snowflake snowflake)
	{
		return snowflake.Id.ToString();
	}

	public static explicit operator Snowflake(string id)
	{
		Snowflake snowflake;
		return TryParse(id, out snowflake) ? snowflake : default(Snowflake);
	}
}
