using System;
using System.Collections.Generic;
using System.Threading;
using Oxide.Ext.Discord;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Types;

internal sealed class DiscordFileLoggerFactory : Singleton<DiscordFileLoggerFactory>
{
	private readonly Thread _writerThread;

	private readonly List<DiscordFileLogger> _loggers = new List<DiscordFileLogger>();

	private readonly AutoResetEvent _reset = new AutoResetEvent(initialState: false);

	private bool _exit;

	private DiscordFileLoggerFactory()
	{
		_writerThread = new Thread(WriteLogThread)
		{
			IsBackground = true,
			Name = "DiscordFileLogger"
		};
		_writerThread.Start();
	}

	public DiscordFileLogger CreateLogger(string pluginName, string dateTimeFormat)
	{
		DiscordFileLogger discordFileLogger = new DiscordFileLogger(pluginName, dateTimeFormat, _reset);
		_loggers.Add(discordFileLogger);
		return discordFileLogger;
	}

	private void WriteLogThread()
	{
		try
		{
			while (!_exit)
			{
				_reset.WaitOne();
				for (int i = 0; i < _loggers.Count; i++)
				{
					_loggers[i].WriteLog();
				}
			}
		}
		catch (ThreadAbortException)
		{
		}
		catch (Exception exception)
		{
			DiscordExtension.GlobalLogger.Exception("An exception occured writing log file.", exception);
			WriteLogThread();
		}
	}

	internal void OnServerShutdown()
	{
		_exit = true;
		_reset.Set();
		_writerThread.Join(TimeSpan.FromSeconds(5.0));
	}

	internal void RemoveLogger(DiscordFileLogger logger)
	{
		_loggers.Remove(logger);
	}
}
