using System;
using System.Reflection;
using Oxide.Ext.Discord;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Types;

internal static class MethodInfoExt
{
	public static Action CreateDelegate(this MethodInfo methodInfo, object target)
	{
		try
		{
			return (Action)Delegate.CreateDelegate(typeof(Action), target, methodInfo);
		}
		catch (Exception ex)
		{
			HandleException(ex, methodInfo, target);
			return null;
		}
	}

	public static Action<T1> CreateDelegate<T1>(this MethodInfo methodInfo, object target)
	{
		try
		{
			return (Action<T1>)Delegate.CreateDelegate(typeof(Action<T1>), target, methodInfo);
		}
		catch (Exception ex)
		{
			HandleException(ex, methodInfo, target);
			return null;
		}
	}

	public static Action<T1, T2> CreateDelegate<T1, T2>(this MethodInfo methodInfo, object target)
	{
		try
		{
			return (Action<T1, T2>)Delegate.CreateDelegate(typeof(Action<T1, T2>), target, methodInfo);
		}
		catch (Exception ex)
		{
			HandleException(ex, methodInfo, target, typeof(T1), typeof(T2));
			return null;
		}
	}

	private static void HandleException(Exception ex, MethodInfo methodInfo, object target, params Type[] types)
	{
		string arg = BuildExpected(methodInfo, types);
		string arg2 = BuildActual(methodInfo);
		DiscordExtension.GlobalLogger.Exception("Failed to create delegate for Plugin: {0} Method: {1} Expected: {2} Actual: {3}", target.GetType().GetRealTypeName(), methodInfo.Name, arg, arg2, ex);
	}

	private static string BuildExpected(MethodInfo methodInfo, params Type[] types)
	{
		ValueStringBuilder valueStringBuilder = default(ValueStringBuilder);
		valueStringBuilder.Append("void ");
		valueStringBuilder.Append(methodInfo.Name);
		valueStringBuilder.Append('(');
		for (int i = 0; i < types.Length; i++)
		{
			Type type = types[i];
			if (i != 0)
			{
				valueStringBuilder.Append(", ");
			}
			valueStringBuilder.Append(type.Name);
			valueStringBuilder.Append(" t");
			valueStringBuilder.Append(i);
		}
		valueStringBuilder.Append(')');
		return valueStringBuilder.ToString();
	}

	private static string BuildActual(MethodInfo info)
	{
		ValueStringBuilder valueStringBuilder = default(ValueStringBuilder);
		valueStringBuilder.Append(info.ReturnType.Name);
		valueStringBuilder.Append(' ');
		valueStringBuilder.Append(info.Name);
		valueStringBuilder.Append('(');
		ParameterInfo[] parameters = info.GetParameters();
		for (int i = 0; i < parameters.Length; i++)
		{
			ParameterInfo parameterInfo = parameters[i];
			if (i != 0)
			{
				valueStringBuilder.Append(", ");
			}
			valueStringBuilder.Append(parameterInfo.ParameterType.Name);
			valueStringBuilder.Append(' ');
			valueStringBuilder.Append(parameterInfo.Name);
		}
		valueStringBuilder.Append(')');
		return valueStringBuilder.ToString();
	}
}
