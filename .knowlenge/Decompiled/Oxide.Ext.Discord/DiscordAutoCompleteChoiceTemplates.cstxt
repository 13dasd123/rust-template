using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.IO;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Callbacks;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Plugins;
using Oxide.Ext.Discord.Types;
using Oxide.Plugins;

public class DiscordAutoCompleteChoiceTemplates : BaseTemplateLibrary<DiscordAutoCompleteChoiceTemplate>
{
	private struct LocalizedTemplate
	{
		public readonly DiscordLocale Locale;

		public readonly DiscordAutoCompleteChoiceTemplate Template;

		public LocalizedTemplate(DiscordLocale locale, DiscordAutoCompleteChoiceTemplate template)
		{
			Locale = locale;
			Template = template;
		}
	}

	private readonly ConcurrentDictionary<TemplateId, DiscordAutoCompleteChoiceTemplate> _globalCache = new ConcurrentDictionary<TemplateId, DiscordAutoCompleteChoiceTemplate>();

	private readonly ConcurrentDictionary<TemplateId, List<LocalizedTemplate>> _localizedCache = new ConcurrentDictionary<TemplateId, List<LocalizedTemplate>>();

	public DiscordAutoCompleteChoiceTemplates(ILogger logger)
		: base(TemplateType.AutoCompleteChoice, logger)
	{
	}

	public IPromise<DiscordAutoCompleteChoiceTemplate> RegisterGlobalTemplate(Plugin plugin, TemplateKey templateName, DiscordAutoCompleteChoiceTemplate template, TemplateVersion version, TemplateVersion minVersion)
	{
		if (plugin == null)
		{
			throw new ArgumentNullException("plugin");
		}
		if (!templateName.IsValid)
		{
			throw new ArgumentNullException("templateName");
		}
		TemplateId id = TemplateId.CreateGlobal(plugin, templateName);
		return RegisterTemplate(id, template, version, minVersion);
	}

	public IPromise<DiscordAutoCompleteChoiceTemplate> RegisterLocalizedTemplate(Plugin plugin, TemplateKey templateName, DiscordAutoCompleteChoiceTemplate template, TemplateVersion version, TemplateVersion minVersion, string language = "en")
	{
		if (plugin == null)
		{
			throw new ArgumentNullException("plugin");
		}
		if (!templateName.IsValid)
		{
			throw new ArgumentNullException("templateName");
		}
		if (string.IsNullOrEmpty(language))
		{
			throw new ArgumentNullException("language");
		}
		TemplateId id = TemplateId.CreateLocalized(plugin, templateName, ServerLocale.Parse(language));
		return RegisterTemplate(id, template, version, minVersion);
	}

	private IPromise<DiscordAutoCompleteChoiceTemplate> RegisterTemplate(TemplateId id, DiscordAutoCompleteChoiceTemplate template, TemplateVersion version, TemplateVersion minVersion)
	{
		if (template == null)
		{
			throw new ArgumentNullException("template");
		}
		IPendingPromise<DiscordAutoCompleteChoiceTemplate> pendingPromise = Promise<DiscordAutoCompleteChoiceTemplate>.Create();
		RegisterTemplateCallback<DiscordAutoCompleteChoiceTemplate>.Start(this, id, template, version, minVersion, pendingPromise);
		return pendingPromise;
	}

	public DiscordAutoCompleteChoiceTemplate GetGlobalTemplate(Plugin plugin, TemplateKey templateName)
	{
		TemplateId templateId = TemplateId.CreateGlobal(plugin, templateName);
		if (_globalCache.TryGetValue(templateId, out var value))
		{
			return value;
		}
		DiscordTemplate<DiscordAutoCompleteChoiceTemplate> discordTemplate = LoadTemplate(templateId);
		if (discordTemplate == null)
		{
			Logger.Error("Plugin {0} is using the {1} Template API but message template name '{2}' is not registered", templateId.GetPluginName(), GetType().GetRealTypeName(), templateId.TemplateName);
			return new DiscordAutoCompleteChoiceTemplate();
		}
		SetCache(templateId, discordTemplate.Template);
		return discordTemplate.Template;
	}

	public CommandOptionChoice ApplyGlobal(Plugin plugin, TemplateKey templateName, CommandOptionChoice choice = null, PlaceholderData placeholders = null)
	{
		if (plugin == null)
		{
			throw new ArgumentNullException("plugin");
		}
		if (!templateName.IsValid)
		{
			throw new ArgumentNullException("templateName");
		}
		if (choice == null)
		{
			choice = new CommandOptionChoice();
		}
		TemplateId id = TemplateId.CreateGlobal(plugin, templateName);
		ApplyGlobal(id, choice, placeholders);
		return choice;
	}

	private void ApplyGlobal(TemplateId id, CommandOptionChoice choice, PlaceholderData placeholders)
	{
		LoadTemplate(id)?.Template.ApplyName(choice, placeholders);
	}

	public CommandOptionChoice ApplyLocalized(Plugin plugin, TemplateKey templateName, CommandOptionChoice choice = null, PlaceholderData placeholders = null, string language = "en")
	{
		if (plugin == null)
		{
			throw new ArgumentNullException("plugin");
		}
		if (!templateName.IsValid)
		{
			throw new ArgumentNullException("templateName");
		}
		if (choice == null)
		{
			choice = new CommandOptionChoice();
		}
		ServerLocale language2 = ServerLocale.Parse(language);
		TemplateId id = TemplateId.CreateLocalized(plugin, templateName, language2);
		ApplyLocalizations(id, choice, placeholders);
		return choice;
	}

	public CommandOptionChoice ApplyLocalized(Plugin plugin, TemplateKey templateName, DiscordInteraction interaction, CommandOptionChoice choice = null, PlaceholderData placeholders = null)
	{
		if (plugin == null)
		{
			throw new ArgumentNullException("plugin");
		}
		if (!templateName.IsValid)
		{
			throw new ArgumentNullException("templateName");
		}
		if (choice == null)
		{
			choice = new CommandOptionChoice();
		}
		TemplateId id = TemplateId.CreateInteraction(plugin, templateName, interaction);
		ApplyLocalizations(id, choice, placeholders);
		return choice;
	}

	private void ApplyLocalizations(TemplateId id, CommandOptionChoice choice, PlaceholderData data)
	{
		if (choice.NameLocalizations == null)
		{
			Hash<string, string> hash2 = (choice.NameLocalizations = new Hash<string, string>());
		}
		data?.IncrementDepth();
		ApplyGlobal(id, choice, data);
		List<LocalizedTemplate> localizedTemplates = GetLocalizedTemplates(id);
		for (int i = 0; i < localizedTemplates.Count; i++)
		{
			LocalizedTemplate localizedTemplate = localizedTemplates[i];
			localizedTemplate.Template.ApplyLocalization(localizedTemplate.Locale, choice, data);
		}
		data?.DecrementDepth();
		data?.AutoDispose();
	}

	private List<LocalizedTemplate> GetLocalizedTemplates(TemplateId id)
	{
		if (_localizedCache.TryGetValue(id, out var value))
		{
			return value;
		}
		value = new List<LocalizedTemplate>();
		foreach (string item in Directory.EnumerateDirectories(GetTemplateFolder(id.PluginId)))
		{
			ServerLocale language = ServerLocale.Parse(Path.GetFileName(item));
			DiscordLocale discordLocale = language.GetDiscordLocale();
			if (discordLocale.IsValid)
			{
				DiscordAutoCompleteChoiceTemplate discordAutoCompleteChoiceTemplate = LoadTemplate(id.WithLanguage(language))?.Template;
				if (discordAutoCompleteChoiceTemplate != null)
				{
					value.Add(new LocalizedTemplate(discordLocale, discordAutoCompleteChoiceTemplate));
				}
			}
		}
		_localizedCache[id] = value;
		return value;
	}

	private void SetCache(TemplateId id, DiscordAutoCompleteChoiceTemplate template)
	{
		if (id.IsGlobal)
		{
			_globalCache[id] = template;
		}
	}

	internal override void OnTemplateRegistered(TemplateId id, DiscordAutoCompleteChoiceTemplate template)
	{
		if (id.IsGlobal)
		{
			_globalCache[id] = template;
		}
	}

	protected override void OnPluginUnloaded(Plugin plugin)
	{
		base.OnPluginUnloaded(plugin);
		PluginId pluginId = plugin.Id();
		_globalCache.RemoveAll((TemplateId t) => t.PluginId == pluginId);
		_localizedCache.RemoveAll((TemplateId t) => t.PluginId == pluginId);
	}
}
