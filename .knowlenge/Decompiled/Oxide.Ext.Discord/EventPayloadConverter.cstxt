using System;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.WebSockets;

public class EventPayloadConverter : JsonConverter
{
	private const string EventCode = "op";

	private const string Sequence = "s";

	private const string DiscordCode = "t";

	private const string Data = "d";

	public override bool CanWrite => false;

	public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
	{
		throw new NotSupportedException();
	}

	public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
	{
		JObject jObject = JObject.Load(reader);
		EventPayload eventPayload = DiscordPool.Internal.Get<EventPayload>();
		eventPayload.OpCode = jObject["op"].ToObject<GatewayEventCode>(serializer);
		eventPayload.Sequence = jObject["s"]?.ToObject<int?>(serializer);
		switch (eventPayload.OpCode)
		{
		case GatewayEventCode.Dispatch:
			eventPayload.DispatchCode = jObject["t"].ToObject<DiscordDispatchCode>(serializer);
			eventPayload.JsonData = jObject["d"];
			break;
		case GatewayEventCode.InvalidSession:
			eventPayload.ShouldResume = jObject["d"]?.ToObject<bool?>(serializer) == true;
			break;
		case GatewayEventCode.Hello:
			eventPayload.JsonData = jObject["d"];
			break;
		}
		return eventPayload;
	}

	public override bool CanConvert(Type objectType)
	{
		return typeof(EventPayload) == objectType;
	}
}
