using System;
using System.Collections.Generic;
using System.Linq;
using Oxide.Core.Libraries.Covalence;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Builders;
using Oxide.Ext.Discord.Cache;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Types;

public class InteractionAutoCompleteBuilder
{
	private readonly InteractionAutoCompleteMessage _message;

	public int Count => _message.Choices.Count;

	public InteractionAutoCompleteBuilder(DiscordInteraction interaction, InteractionAutoCompleteMessage message = null)
	{
		InteractionResponseBuilderException.ThrowIfInteractionIsNotAutoComplete(interaction.Type);
		_message = message ?? new InteractionAutoCompleteMessage();
		InteractionAutoCompleteMessage message2 = _message;
		if (message2.Choices == null)
		{
			List<CommandOptionChoice> list2 = (message2.Choices = new List<CommandOptionChoice>());
		}
	}

	public InteractionAutoCompleteBuilder AddChoice(string name, object value)
	{
		InvalidAutoCompleteChoiceException.ThrowIfInvalidName(name);
		InvalidAutoCompleteChoiceException.ThrowIfInvalidValue(value);
		return AddChoice(new CommandOptionChoice(name, value));
	}

	public InteractionAutoCompleteBuilder AddChoice(string name, object value, Plugin plugin, string langKey)
	{
		InvalidAutoCompleteChoiceException.ThrowIfInvalidName(name);
		InvalidAutoCompleteChoiceException.ThrowIfInvalidValue(value);
		return AddChoice(new CommandOptionChoice(name, value, BaseDiscordLibrary<DiscordLocales>.Instance.GetDiscordLocalizations(plugin, langKey)));
	}

	public InteractionAutoCompleteBuilder AddChoice(CommandOptionChoice choice)
	{
		if (choice == null)
		{
			throw new ArgumentNullException("choice");
		}
		InvalidCommandOptionChoiceException.ThrowIfMaxChoices(_message.Choices.Count + 1);
		_message.Choices.Add(choice);
		return this;
	}

	public InteractionAutoCompleteBuilder AddChoices(ICollection<CommandOptionChoice> choices)
	{
		if (choices == null)
		{
			throw new ArgumentNullException("choices");
		}
		InvalidCommandOptionChoiceException.ThrowIfMaxChoices(_message.Choices.Count + choices.Count);
		_message.Choices.AddRange(choices);
		return this;
	}

	public bool CanAddChoice()
	{
		return Count < 25;
	}

	public InteractionAutoCompleteMessage Build()
	{
		return _message;
	}

	public void AddGroups(string filter = null, StringComparison comparison = StringComparison.OrdinalIgnoreCase, AutoCompleteSearchMode search = AutoCompleteSearchMode.StartsWith)
	{
		AddList(Singleton<OxideLibrary>.Instance.Permission.GetGroups(), filter, comparison, search);
	}

	public void AddPermissions(string filter = null, StringComparison comparison = StringComparison.OrdinalIgnoreCase, AutoCompleteSearchMode search = AutoCompleteSearchMode.StartsWith)
	{
		AddList(Singleton<OxideLibrary>.Instance.Permission.GetPermissions(), filter, comparison, search);
	}

	public void AddGroupsWithPermission(string permission, string filter = null, StringComparison comparison = StringComparison.OrdinalIgnoreCase, AutoCompleteSearchMode search = AutoCompleteSearchMode.StartsWith)
	{
		AddList(Singleton<OxideLibrary>.Instance.Permission.GetPermissionGroups(permission), filter, comparison, search);
	}

	public void AddGroupsWithoutPermission(string permission, string filter = null, StringComparison comparison = StringComparison.OrdinalIgnoreCase, AutoCompleteSearchMode search = AutoCompleteSearchMode.StartsWith)
	{
		string[] permissionGroups = Singleton<OxideLibrary>.Instance.Permission.GetPermissionGroups(permission);
		AddList(Singleton<OxideLibrary>.Instance.Permission.GetGroups().Except(permissionGroups), filter, comparison, search);
	}

	public void AddPermissionsInGroup(string group, string filter = null, StringComparison comparison = StringComparison.OrdinalIgnoreCase, AutoCompleteSearchMode search = AutoCompleteSearchMode.StartsWith)
	{
		AddList(Singleton<OxideLibrary>.Instance.Permission.GetGroupPermissions(group), filter, comparison, search);
	}

	public void AddPermissionsNotInGroup(string group, string filter = null, StringComparison comparison = StringComparison.OrdinalIgnoreCase, AutoCompleteSearchMode search = AutoCompleteSearchMode.StartsWith)
	{
		string[] permissions = Singleton<OxideLibrary>.Instance.Permission.GetPermissions();
		AddList(permissions.Except(Singleton<OxideLibrary>.Instance.Permission.GetGroupPermissions(group)), filter, comparison, search);
	}

	public void AddGroupsWithPlayer(string playerId, string filter = null, StringComparison comparison = StringComparison.OrdinalIgnoreCase, AutoCompleteSearchMode search = AutoCompleteSearchMode.StartsWith)
	{
		AddList(Singleton<OxideLibrary>.Instance.Permission.GetUserGroups(playerId), filter, comparison, search);
	}

	public void AddGroupsWithoutPlayer(string playerId, string filter = null, StringComparison comparison = StringComparison.OrdinalIgnoreCase, AutoCompleteSearchMode search = AutoCompleteSearchMode.StartsWith)
	{
		string[] groups = Singleton<OxideLibrary>.Instance.Permission.GetGroups();
		AddList(groups.Except(Singleton<OxideLibrary>.Instance.Permission.GetUserGroups(playerId)), filter, comparison, search);
	}

	public void AddPermissionsPlayerIn(string playerId, string filter = null, StringComparison comparison = StringComparison.OrdinalIgnoreCase, AutoCompleteSearchMode search = AutoCompleteSearchMode.StartsWith)
	{
		AddList(Singleton<OxideLibrary>.Instance.Permission.GetUserPermissions(playerId), filter, comparison, search);
	}

	public void AddPermissionsPlayerNotIn(string playerId, string filter = null, StringComparison comparison = StringComparison.OrdinalIgnoreCase, AutoCompleteSearchMode search = AutoCompleteSearchMode.StartsWith)
	{
		string[] permissions = Singleton<OxideLibrary>.Instance.Permission.GetPermissions();
		AddList(permissions.Except(Singleton<OxideLibrary>.Instance.Permission.GetUserPermissions(playerId)), filter, comparison, search);
	}

	public void AddOnlinePlayers(string filter = null, PlayerNameFormatter formatter = null)
	{
		AddPlayerList(Singleton<ServerPlayerCache>.Instance.GetOnlinePlayers(filter), formatter ?? PlayerNameFormatter.Default, null);
	}

	public void AddOfflinePlayers(string filter = null, PlayerNameFormatter formatter = null)
	{
		AddPlayerList(from p in Singleton<ServerPlayerCache>.Instance.GetAllPlayers(filter)
			where !p.IsConnected
			select p, formatter ?? PlayerNameFormatter.Default, null);
	}

	public void AddAllOnlineFirstPlayers(string filter = null, PlayerNameFormatter formatter = null)
	{
		HashSet<string> hashSet = DiscordPool.Internal.GetHashSet<string>();
		AddPlayerList(Singleton<ServerPlayerCache>.Instance.GetOnlinePlayers(filter), formatter ?? PlayerNameFormatter.Default, hashSet);
		AddPlayerList(Singleton<ServerPlayerCache>.Instance.GetAllPlayers(filter), formatter ?? PlayerNameFormatter.Default, hashSet);
		DiscordPool.Internal.FreeHashSet(hashSet);
	}

	public void AddAllPlayers(string filter = null, PlayerNameFormatter formatter = null)
	{
		AddPlayerList(Singleton<ServerPlayerCache>.Instance.GetAllPlayers(filter), formatter ?? PlayerNameFormatter.Default, null);
	}

	public void AddPlayerList(string filter, IEnumerable<IPlayer> list, PlayerNameFormatter formatter, HashSet<string> addedList = null, AutoCompleteSearchMode search = AutoCompleteSearchMode.Contains)
	{
		if (!CanAddChoice())
		{
			return;
		}
		foreach (IPlayer item in list)
		{
			if ((IsMatch(item.Name, filter, StringComparison.OrdinalIgnoreCase, search) || !(item.Id != filter)) && !AddPlayer(item, formatter, addedList))
			{
				break;
			}
		}
	}

	public void AddByPlayerId(string playerId, PlayerNameFormatter formatter = null)
	{
		IPlayer playerById = Singleton<ServerPlayerCache>.Instance.GetPlayerById(playerId);
		if (playerById != null)
		{
			AddPlayer(playerById, formatter ?? PlayerNameFormatter.Default, null);
		}
	}

	public void AddLoadablePlugins(string filter = null, StringComparison comparison = StringComparison.OrdinalIgnoreCase, AutoCompleteSearchMode search = AutoCompleteSearchMode.StartsWith)
	{
		AddList(Singleton<DiscordPluginCache>.Instance.GetLoadablePlugins(), filter, comparison, search);
	}

	public void AddAllPlugins(string filter = null, StringComparison comparison = StringComparison.OrdinalIgnoreCase, AutoCompleteSearchMode search = AutoCompleteSearchMode.StartsWith)
	{
		AddList(Singleton<DiscordPluginCache>.Instance.GetAllPlugins(), filter, comparison, search);
	}

	public void AddLoadedPlugins(string filter = null, StringComparison comparison = StringComparison.OrdinalIgnoreCase, AutoCompleteSearchMode search = AutoCompleteSearchMode.StartsWith)
	{
		AddList(Singleton<DiscordPluginCache>.Instance.GetLoadedPlugins(), filter, comparison, search);
	}

	private void AddList(IEnumerable<string> list, string filter, StringComparison comparison, AutoCompleteSearchMode search)
	{
		if (!CanAddChoice())
		{
			return;
		}
		List<CommandOptionChoice> choices = _message.Choices;
		foreach (string item in list)
		{
			if (IsMatch(item, filter, comparison, search))
			{
				choices.Add(new CommandOptionChoice(item, item));
				if (!CanAddChoice())
				{
					break;
				}
			}
		}
	}

	public void AddPlayerList(IEnumerable<IPlayer> list, PlayerNameFormatter formatter, HashSet<string> addedList)
	{
		if (!CanAddChoice())
		{
			return;
		}
		foreach (IPlayer item in list)
		{
			if (!AddPlayer(item, formatter, addedList))
			{
				break;
			}
		}
	}

	private bool AddPlayer(IPlayer player, PlayerNameFormatter formatter, HashSet<string> addedList)
	{
		if (!CanAddChoice())
		{
			return false;
		}
		string name = formatter.Format(player);
		if (addedList == null || addedList.Add(player.Id))
		{
			_message.Choices.Add(new CommandOptionChoice(name, player.Id));
			if (!CanAddChoice())
			{
				return false;
			}
		}
		return true;
	}

	private static bool IsMatch(string value, string filter, StringComparison comparison, AutoCompleteSearchMode search)
	{
		if (string.IsNullOrEmpty(filter))
		{
			return true;
		}
		if (1 == 0)
		{
		}
		bool result = search switch
		{
			AutoCompleteSearchMode.StartsWith => value.StartsWith(filter, comparison), 
			AutoCompleteSearchMode.Contains => value.IndexOf(filter, comparison) != -1, 
			AutoCompleteSearchMode.EndsWith => value.EndsWith(filter, comparison), 
			_ => throw new ArgumentOutOfRangeException("search", search, null), 
		};
		if (1 == 0)
		{
		}
		return result;
	}
}
