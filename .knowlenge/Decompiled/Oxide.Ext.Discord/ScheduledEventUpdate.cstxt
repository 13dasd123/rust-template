using System;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Interfaces;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class ScheduledEventUpdate : IDiscordValidation
{
	[JsonProperty("channel_id")]
	public Snowflake? ChannelId { get; set; }

	[JsonProperty("entity_metadata")]
	public ScheduledEventEntityMetadata EntityMetadata { get; set; }

	[JsonProperty("name")]
	public string Name { get; set; }

	[JsonProperty("privacy_level")]
	public ScheduledEventPrivacyLevel? PrivacyLevel { get; set; }

	[JsonProperty("scheduled_start_time")]
	public DateTime? ScheduledStartTime { get; set; }

	[JsonProperty("scheduled_end_time ")]
	public DateTime? ScheduledEndTime { get; set; }

	[JsonProperty("description")]
	public string Description { get; set; }

	[JsonProperty("entity_type")]
	public ScheduledEventEntityType? EntityType { get; set; }

	[JsonProperty("status")]
	public ScheduledEventStatus? Status { get; set; }

	public void Validate()
	{
		InvalidGuildScheduledEventException.ThrowIfInvalidName(Name, allowNullOrEmpty: true);
		InvalidGuildScheduledEventException.ThrowIfInvalidDescription(Description);
		EntityMetadata?.Validate();
	}
}
