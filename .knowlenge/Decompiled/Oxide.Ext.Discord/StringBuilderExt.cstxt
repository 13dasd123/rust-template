using System;
using System.Runtime.CompilerServices;
using System.Text;

public static class StringBuilderExt
{
	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static void Replace(this StringBuilder builder, ReadOnlySpan<char> value, int index, int length)
	{
		builder.Remove(index, length);
		builder.Insert(index, value);
	}

	public static StringBuilder Trim(this StringBuilder sb)
	{
		if (sb == null || sb.Length == 0)
		{
			return sb;
		}
		if (char.IsWhiteSpace(sb[0]))
		{
			int i;
			for (i = 1; i < sb.Length && char.IsWhiteSpace(sb[i]); i++)
			{
			}
			sb.Remove(0, i + 1);
			if (sb.Length == 0)
			{
				return sb;
			}
		}
		if (char.IsWhiteSpace(sb[sb.Length - 1]))
		{
			int num = sb.Length - 2;
			while (num >= 0 && char.IsWhiteSpace(sb[num]))
			{
				num--;
			}
			sb.Length = num + 1;
		}
		return sb;
	}
}
