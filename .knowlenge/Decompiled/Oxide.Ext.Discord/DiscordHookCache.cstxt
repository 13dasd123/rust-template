using System.Collections.Generic;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Cache;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Connections;
using Oxide.Ext.Discord.Constants;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Types;
using Oxide.Plugins;

internal class DiscordHookCache
{
	private readonly Hash<string, List<Plugin>> _hookCache = new Hash<string, List<Plugin>>();

	private readonly ILogger _logger;

	internal DiscordHookCache(ILogger logger)
	{
		_logger = logger;
	}

	internal void AddPlugin(DiscordClient client, List<string> hooks)
	{
		for (int i = 0; i < hooks.Count; i++)
		{
			string hook = hooks[i];
			AddPluginHook(client, hook);
		}
	}

	private void AddPluginHook(DiscordClient client, string hook)
	{
		BotConnection connection = client.Connection;
		GatewayIntents gatewayIntents = DiscordExtHooks.HookGatewayIntent[hook];
		if (gatewayIntents != 0 && !connection.HasAnyIntent(gatewayIntents))
		{
			_logger.Warning("{0} is trying to add hook {1} which requires one of the following GatewayIntents \"{2}\", but only specified \"{3}\" intents This hook will not work correctly until it is corrected. Please contact the plugin author {4} with this message.", client.PluginName, hook, Singleton<EnumCache<GatewayIntents>>.Instance.ToString(gatewayIntents), Singleton<EnumCache<GatewayIntents>>.Instance.ToString(connection.Intents), client.Plugin?.Author);
		}
		List<Plugin> list = _hookCache[hook];
		if (list == null)
		{
			list = new List<Plugin>();
			_hookCache[hook] = list;
		}
		if (!list.Contains(client.Plugin))
		{
			list.Add(client.Plugin);
		}
	}

	internal void RemovePlugin(Plugin plugin)
	{
		List<string> list = DiscordPool.Internal.GetList<string>();
		foreach (KeyValuePair<string, List<Plugin>> item in _hookCache)
		{
			if (item.Value.Remove(plugin) && item.Value.Count == 0)
			{
				list.Add(item.Key);
			}
		}
		for (int i = 0; i < list.Count; i++)
		{
			_hookCache.Remove(list[i]);
		}
		DiscordPool.Internal.FreeList(list);
	}

	internal bool TryGetHook(string hook, out List<Plugin> plugins)
	{
		return _hookCache.TryGetValue(hook, out plugins);
	}
}
