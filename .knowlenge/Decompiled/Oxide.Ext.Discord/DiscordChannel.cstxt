using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Ext.Discord;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Data;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Helpers;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Json;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Types;
using Oxide.Plugins;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class DiscordChannel : ISnowflakeEntity, IDebugLoggable
{
	private Hash<Snowflake, ThreadMember> _threadMembers;

	[JsonProperty("id")]
	public Snowflake Id { get; set; }

	[JsonProperty("type")]
	public ChannelType Type { get; set; }

	[JsonProperty("guild_id")]
	public Snowflake? GuildId { get; set; }

	[JsonProperty("position")]
	public int? Position { get; set; }

	[JsonConverter(typeof(HashListConverter<Overwrite>))]
	[JsonProperty("permission_overwrites")]
	public Hash<Snowflake, Overwrite> PermissionOverwrites { get; set; }

	[JsonProperty("name")]
	public string Name { get; set; }

	[JsonProperty("topic")]
	public string Topic { get; set; }

	[JsonProperty("nsfw")]
	public bool? Nsfw { get; set; }

	[JsonProperty("last_message_id")]
	public Snowflake? LastMessageId { get; set; }

	[JsonProperty("bitrate")]
	public int? Bitrate { get; set; }

	[JsonProperty("user_limit")]
	public int? UserLimit { get; set; }

	[JsonProperty("rate_limit_per_user")]
	public int? RateLimitPerUser { get; set; }

	[JsonConverter(typeof(HashListConverter<DiscordUser>))]
	[JsonProperty("recipients")]
	public Hash<Snowflake, DiscordUser> Recipients { get; set; }

	[JsonProperty("icon")]
	public string Icon { get; set; }

	[JsonProperty("owner_id")]
	public Snowflake? OwnerId { get; set; }

	[JsonProperty("application_id")]
	public Snowflake? ApplicationId { get; set; }

	[JsonProperty("managed")]
	public bool? Managed { get; set; }

	[JsonProperty("parent_id")]
	public Snowflake? ParentId { get; set; }

	[JsonProperty("last_pin_timestamp")]
	public DateTime? LastPinTimestamp { get; set; }

	[JsonProperty("rtc_region")]
	public string RtcRegion { get; set; }

	[JsonProperty("video_quality_mode")]
	public VideoQualityMode? VideoQualityMode { get; set; }

	[JsonProperty("message_count")]
	public int? MessageCount { get; set; }

	[JsonProperty("member_count")]
	public int? MemberCount { get; set; }

	[JsonProperty("thread_metadata")]
	public ThreadMetadata ThreadMetadata { get; set; }

	[JsonProperty("member")]
	public ThreadMember Member { get; set; }

	[JsonProperty("default_auto_archive_duration")]
	public int? DefaultAutoArchiveDuration { get; set; }

	[JsonProperty("permissions")]
	public string Permissions { get; set; }

	[JsonProperty("flags")]
	public ChannelFlags? Flags { get; set; }

	[JsonProperty("total_message_sent")]
	public int? TotalMessageSent { get; set; }

	[JsonProperty("available_tags")]
	public List<ForumTag> AvailableTags { get; set; }

	[JsonProperty("applied_tags")]
	public List<Snowflake> AppliedTags { get; set; }

	[JsonProperty("default_reaction_emoji")]
	public DefaultReaction DefaultReactionEmoji { get; set; }

	[JsonProperty("default_thread_rate_limit_per_user")]
	public int? DefaultThreadRateLimitPerUser { get; set; }

	[JsonProperty("default_sort_order")]
	public SortOrderType? DefaultSortOrder { get; set; }

	[JsonProperty("default_forum_layout")]
	public ForumLayoutTypes? DefaultForumLayout { get; set; }

	public Hash<Snowflake, ThreadMember> ThreadMembers
	{
		get
		{
			if (_threadMembers != null)
			{
				return _threadMembers;
			}
			InvalidChannelException.ThrowIfNotThread(this, "Cannot get ThreadMembers for a non thread channel");
			return _threadMembers = new Hash<Snowflake, ThreadMember>();
		}
	}

	internal UserData UserData { get; set; }

	public string Mention => DiscordFormatting.MentionChannel(Id);

	public string IconUrl => (!string.IsNullOrEmpty(Icon)) ? DiscordCdn.GetChannelIcon(Id, Icon) : null;

	public bool IsGuildChannel()
	{
		return Type == ChannelType.GuildCategory || Type == ChannelType.GuildDirectory || Type == ChannelType.GuildForum || Type == ChannelType.GuildNews || Type == ChannelType.GuildText || Type == ChannelType.GuildVoice || Type == ChannelType.GuildNewsThread || Type == ChannelType.GuildPrivateThread || Type == ChannelType.GuildPublicThread || Type == ChannelType.GuildStageVoice;
	}

	public bool IsDmChannel()
	{
		return Type == ChannelType.Dm || Type == ChannelType.GroupDm;
	}

	public bool IsThreadChannel()
	{
		return Type == ChannelType.GuildNewsThread || Type == ChannelType.GuildPrivateThread || Type == ChannelType.GuildPublicThread;
	}

	public static IPromise<DiscordChannel> Create(DiscordClient client, Snowflake guildId, ChannelCreate channel)
	{
		InvalidSnowflakeException.ThrowIfInvalid(guildId);
		return client.Bot.Rest.Post<DiscordChannel>(client, $"guilds/{guildId}/channels", channel, null);
	}

	public static IPromise<DiscordChannel> Get(DiscordClient client, Snowflake channelId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(channelId);
		return client.Bot.Rest.Get<DiscordChannel>(client, $"channels/{channelId}", null);
	}

	public IPromise<DiscordChannel> EditGroupDmChannel(DiscordClient client, GroupDmChannelUpdate update)
	{
		if (update == null)
		{
			throw new ArgumentNullException("update");
		}
		return client.Bot.Rest.Patch<DiscordChannel>(client, $"channels/{Id}", update, null);
	}

	public IPromise<DiscordChannel> EditGuildChannel(DiscordClient client, GuildChannelUpdate update)
	{
		if (update == null)
		{
			throw new ArgumentNullException("update");
		}
		return client.Bot.Rest.Patch<DiscordChannel>(client, $"channels/{Id}", update, null);
	}

	public IPromise<DiscordChannel> EditThreadChannel(DiscordClient client, ThreadChannelUpdate update)
	{
		if (update == null)
		{
			throw new ArgumentNullException("update");
		}
		return client.Bot.Rest.Patch<DiscordChannel>(client, $"channels/{Id}", update, null);
	}

	public IPromise<DiscordChannel> Delete(DiscordClient client)
	{
		return client.Bot.Rest.Delete<DiscordChannel>(client, $"channels/{Id}", null);
	}

	public IPromise<List<DiscordMessage>> GetMessages(DiscordClient client, ChannelMessagesRequest request = null)
	{
		return client.Bot.Rest.Get<List<DiscordMessage>>(client, $"channels/{Id}/messages{request?.ToQueryString()}", null);
	}

	public IPromise<DiscordMessage> GetMessage(DiscordClient client, Snowflake messageId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(messageId);
		return client.Bot.Rest.Get<DiscordMessage>(client, $"channels/{Id}/messages/{messageId}", null);
	}

	public IPromise<DiscordMessage> CreateMessage(DiscordClient client, MessageCreate message)
	{
		if (message == null)
		{
			throw new ArgumentNullException("message");
		}
		DateTime? dateTime = UserData?.GetBlockedUntil();
		if (!dateTime.HasValue)
		{
			IPromise<DiscordMessage> promise = client.Bot.Rest.Post<DiscordMessage>(client, $"channels/{Id}/messages", message, null);
			if (UserData != null)
			{
				promise.Catch(delegate(ResponseError ex)
				{
					UserData.ProcessError(client, ex);
				});
			}
			return promise;
		}
		DiscordUser user = UserData.GetUser();
		client.Logger.Debug("Blocking CreateMessage. User {0} ({1}) is DM blocked until {2}.", user.FullUserName, user.Id, dateTime.Value);
		return Promise<DiscordMessage>.Rejected(new BlockedUserException(user, dateTime.Value));
	}

	public IPromise<DiscordMessage> CreateMessage(DiscordClient client, string message)
	{
		MessageCreate message2 = new MessageCreate
		{
			Content = message
		};
		return CreateMessage(client, message2);
	}

	public IPromise<DiscordMessage> CreateMessage(DiscordClient client, DiscordEmbed embed)
	{
		MessageCreate message = new MessageCreate
		{
			Embeds = new List<DiscordEmbed> { embed }
		};
		return CreateMessage(client, message);
	}

	public IPromise<DiscordMessage> CreateMessage(DiscordClient client, List<DiscordEmbed> embeds)
	{
		MessageCreate message = new MessageCreate
		{
			Embeds = embeds
		};
		return CreateMessage(client, message);
	}

	public IPromise<DiscordMessage> CreateGlobalTemplateMessage(DiscordClient client, TemplateKey templateName, MessageCreate message = null, PlaceholderData placeholders = null)
	{
		MessageCreate message2 = DiscordExtension.DiscordMessageTemplates.GetGlobalTemplate(client.Plugin, templateName).ToMessage(placeholders, message);
		return CreateMessage(client, message2);
	}

	public IPromise<DiscordMessage> CreateTemplateMessage(DiscordClient client, TemplateKey templateName, string language = "en", MessageCreate message = null, PlaceholderData placeholders = null)
	{
		MessageCreate message2 = DiscordExtension.DiscordMessageTemplates.GetLocalizedTemplate(client.Plugin, templateName, language).ToMessage(placeholders, message);
		return CreateMessage(client, message2);
	}

	public IPromise BulkDeleteMessages(DiscordClient client, ICollection<Snowflake> messageIds)
	{
		if (messageIds.Count < 2)
		{
			throw new ArgumentOutOfRangeException("messageIds", "Cannot delete less than 2 messages");
		}
		if (messageIds.Count > 100)
		{
			throw new ArgumentOutOfRangeException("messageIds", "Cannot delete more than 100 messages");
		}
		Dictionary<string, ICollection<Snowflake>> data = new Dictionary<string, ICollection<Snowflake>> { ["messages"] = messageIds };
		return client.Bot.Rest.Post(client, $"channels/{Id}/messages/bulk-delete", data, null);
	}

	public IPromise EditPermissions(DiscordClient client, Overwrite overwrite)
	{
		if (overwrite == null)
		{
			throw new ArgumentNullException("overwrite");
		}
		InvalidSnowflakeException.ThrowIfInvalid(overwrite.Id);
		return client.Bot.Rest.Put(client, $"channels/{Id}/permissions/{overwrite.Id}", overwrite, null);
	}

	public IPromise DeletePermission(DiscordClient client, Overwrite overwrite)
	{
		return DeletePermission(client, overwrite.Id);
	}

	public IPromise DeletePermission(DiscordClient client, Snowflake overwriteId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(overwriteId);
		return client.Bot.Rest.Delete(client, $"channels/{Id}/permissions/{overwriteId}", null);
	}

	public IPromise<List<DiscordInvite>> GetInvites(DiscordClient client)
	{
		InvalidChannelException.ThrowIfNotGuildChannel(this, "You can only get channel invites for guild channels");
		return client.Bot.Rest.Get<List<DiscordInvite>>(client, $"channels/{Id}/invites", null);
	}

	public IPromise<DiscordInvite> CreateInvite(DiscordClient client, ChannelInvite invite)
	{
		if (invite == null)
		{
			throw new ArgumentNullException("invite");
		}
		return client.Bot.Rest.Post<DiscordInvite>(client, $"channels/{Id}/invites", invite, null);
	}

	public IPromise<FollowedChannel> FollowNewsChannel(DiscordClient client, Snowflake webhookChannelId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(webhookChannelId);
		return client.Bot.Rest.Post<FollowedChannel>(client, $"channels/{Id}/followers?webhook_channel_id={webhookChannelId}", null, null);
	}

	public IPromise TriggerTypingIndicator(DiscordClient client)
	{
		return client.Bot.Rest.Post(client, $"channels/{Id}/typing", null, null);
	}

	public IPromise<List<DiscordMessage>> GetPinnedMessages(DiscordClient client)
	{
		return client.Bot.Rest.Get<List<DiscordMessage>>(client, $"channels/{Id}/pins", null);
	}

	public IPromise GroupDmAddRecipient(DiscordClient client, DiscordUser user, string accessToken)
	{
		return GroupDmAddRecipient(client, user.Id, accessToken, user.Username);
	}

	public IPromise GroupDmAddRecipient(DiscordClient client, Snowflake userId, string accessToken, string nick)
	{
		InvalidSnowflakeException.ThrowIfInvalid(userId);
		Dictionary<string, string> data = new Dictionary<string, string>
		{
			["access_token"] = accessToken,
			["nick"] = nick
		};
		return client.Bot.Rest.Put(client, $"channels/{Id}/recipients/{userId}", data, null);
	}

	public IPromise GroupDmRemoveRecipient(DiscordClient client, Snowflake userId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(userId);
		return client.Bot.Rest.Delete(client, $"channels/{Id}/recipients/{userId}", null);
	}

	public IPromise<DiscordChannel> StartThreadFromMessage(DiscordClient client, Snowflake messageId, ThreadCreateFromMessage create)
	{
		InvalidSnowflakeException.ThrowIfInvalid(messageId);
		return client.Bot.Rest.Post<DiscordChannel>(client, $"channels/{Id}/messages/{messageId}/threads", create, null);
	}

	public IPromise<DiscordChannel> StartThreadWithoutMessage(DiscordClient client, ThreadCreate create)
	{
		if (create == null)
		{
			throw new ArgumentNullException("create");
		}
		return client.Bot.Rest.Post<DiscordChannel>(client, $"channels/{Id}/threads", create, null);
	}

	public IPromise<DiscordChannel> StartThreadInForumChannel(DiscordClient client, ThreadForumCreate create)
	{
		if (create == null)
		{
			throw new ArgumentNullException("create");
		}
		return client.Bot.Rest.Post<DiscordChannel>(client, $"channels/{Id}/threads", create, null);
	}

	public IPromise JoinThread(DiscordClient client)
	{
		return client.Bot.Rest.Put(client, $"channels/{Id}/thread-members/@me", null, null);
	}

	public IPromise AddThreadMember(DiscordClient client, Snowflake userId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(userId);
		return client.Bot.Rest.Put(client, $"channels/{Id}/thread-members/{userId}", null, null);
	}

	public IPromise LeaveThread(DiscordClient client)
	{
		return client.Bot.Rest.Delete(client, $"channels/{Id}/thread-members/@me", null);
	}

	public IPromise RemoveThreadMember(DiscordClient client, Snowflake userId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(userId);
		return client.Bot.Rest.Delete(client, $"channels/{Id}/thread-members/{userId}", null);
	}

	public IPromise<ThreadMember> GetThreadMember(DiscordClient client, Snowflake userId, GetThreadMember request = null)
	{
		InvalidSnowflakeException.ThrowIfInvalid(userId);
		return client.Bot.Rest.Get<ThreadMember>(client, $"channels/{Id}/thread-members/{userId}{request?.ToQueryString()}", null);
	}

	public IPromise<List<ThreadMember>> ListThreadMembers(DiscordClient client, ListThreadMembers request = null)
	{
		return client.Bot.Rest.Get<List<ThreadMember>>(client, $"channels/{Id}/thread-members{request?.ToQueryString()}", null);
	}

	public IPromise<ThreadList> ListPublicArchivedThreads(DiscordClient client, ThreadArchivedLookup request = null)
	{
		return client.Bot.Rest.Get<ThreadList>(client, $"channels/{Id}/threads/archived/public{request?.ToQueryString()}", null);
	}

	public IPromise<ThreadList> ListPrivateArchivedThreads(DiscordClient client, ThreadArchivedLookup request = null)
	{
		return client.Bot.Rest.Get<ThreadList>(client, $"channels/{Id}/threads/archived/public{request?.ToQueryString()}", null);
	}

	public IPromise<ThreadList> ListJoinedPrivateArchivedThreads(DiscordClient client, ThreadArchivedLookup lookup = null)
	{
		return client.Bot.Rest.Get<ThreadList>(client, $"channels/{Id}/users/@me/threads/archived/private{lookup?.ToQueryString()}", null);
	}

	public IPromise<StageInstance> GetStageInstance(DiscordClient client)
	{
		return client.Bot.Rest.Get<StageInstance>(client, $"stage-instances/{Id}", null);
	}

	internal DiscordChannel Update(DiscordChannel channel)
	{
		DiscordChannel result = (DiscordChannel)MemberwiseClone();
		Type = channel.Type;
		if (channel.Position.HasValue)
		{
			Position = channel.Position;
		}
		if (channel.PermissionOverwrites != null)
		{
			PermissionOverwrites = channel.PermissionOverwrites;
		}
		if (channel.Name != null)
		{
			Name = channel.Name;
		}
		if (channel.Topic != null)
		{
			Topic = channel.Topic;
		}
		if (channel.Nsfw.HasValue)
		{
			Nsfw = channel.Nsfw;
		}
		if (channel.Bitrate.HasValue)
		{
			Bitrate = channel.Bitrate;
		}
		if (channel.UserLimit.HasValue)
		{
			UserLimit = channel.UserLimit;
		}
		if (channel.RateLimitPerUser.HasValue)
		{
			RateLimitPerUser = channel.RateLimitPerUser;
		}
		if (channel.Icon != null)
		{
			Icon = channel.Icon;
		}
		if (channel.OwnerId.HasValue)
		{
			OwnerId = channel.OwnerId;
		}
		if (channel.ApplicationId.HasValue)
		{
			ApplicationId = channel.ApplicationId;
		}
		if (channel.LastPinTimestamp.HasValue)
		{
			LastPinTimestamp = channel.LastPinTimestamp;
		}
		if (channel.VideoQualityMode.HasValue)
		{
			VideoQualityMode = channel.VideoQualityMode;
		}
		if (channel.MessageCount.HasValue)
		{
			MessageCount = channel.MessageCount;
		}
		if (channel.MemberCount.HasValue)
		{
			MemberCount = channel.MemberCount;
		}
		if (channel.ThreadMetadata != null)
		{
			ThreadMetadata = channel.ThreadMetadata;
		}
		if (channel.Member != null)
		{
			Member = channel.Member;
		}
		if (channel.DefaultAutoArchiveDuration.HasValue)
		{
			DefaultAutoArchiveDuration = channel.DefaultAutoArchiveDuration;
		}
		if (channel.Permissions != null)
		{
			Permissions = channel.Permissions;
		}
		ParentId = channel.ParentId;
		if (channel.Flags.HasValue)
		{
			Flags = Flags;
		}
		return result;
	}

	public void LogDebug(DebugLogger logger)
	{
		logger.AppendField("ID", Id);
		logger.AppendField("Name", Name);
		logger.AppendFieldEnum("Type", Type);
	}
}
