using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Libraries;
using Oxide.Plugins;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class CommandLocalization
{
	[JsonProperty("Command Name")]
	public string Name { get; set; }

	[JsonProperty("Command Description")]
	public string Description { get; set; }

	[JsonProperty("Command Options", NullValueHandling = NullValueHandling.Ignore)]
	public Hash<string, CommandLocalization> Options { get; set; }

	[JsonProperty("Argument Localization", NullValueHandling = NullValueHandling.Ignore)]
	public Hash<string, ArgumentLocalization> Arguments { get; set; }

	[JsonConstructor]
	private CommandLocalization()
	{
	}

	private CommandLocalization(string name, string description)
	{
		Name = name;
		Description = description;
	}

	public CommandLocalization(CommandCreate create, DiscordLocale locale)
		: this(create.NameLocalizations[locale.Id], create.DescriptionLocalizations[locale.Id])
	{
		if (create.Options != null)
		{
			for (int i = 0; i < create.Options.Count; i++)
			{
				ProcessOption(create.Options[i], locale);
			}
		}
	}

	public CommandLocalization(CommandOption opt, DiscordLocale locale)
		: this(opt.NameLocalizations[locale.Id], opt.DescriptionLocalizations[locale.Id])
	{
		if (opt.Options != null)
		{
			for (int i = 0; i < opt.Options.Count; i++)
			{
				ProcessOption(opt.Options[i], locale);
			}
		}
	}

	private void ProcessOption(CommandOption option, DiscordLocale locale)
	{
		if (option.Type == CommandOptionType.SubCommand || option.Type == CommandOptionType.SubCommandGroup)
		{
			if (Options == null)
			{
				Options = new Hash<string, CommandLocalization>();
			}
			Options[option.Name] = new CommandLocalization(option, locale);
		}
		else
		{
			if (Arguments == null)
			{
				Hash<string, ArgumentLocalization> hash2 = (Arguments = new Hash<string, ArgumentLocalization>());
			}
			Arguments[option.Name] = new ArgumentLocalization(option, locale);
		}
	}

	public void ApplyCommandLocalization(CommandCreate create, DiscordLocale locale)
	{
		CommandCreate commandCreate = create;
		if (commandCreate.NameLocalizations == null)
		{
			Hash<string, string> hash2 = (commandCreate.NameLocalizations = new Hash<string, string>());
		}
		commandCreate = create;
		if (commandCreate.DescriptionLocalizations == null)
		{
			Hash<string, string> hash2 = (commandCreate.DescriptionLocalizations = new Hash<string, string>());
		}
		create.NameLocalizations[locale.Id] = Name;
		create.DescriptionLocalizations[locale.Id] = Description;
		List<CommandOption> options = create.Options;
		if (options == null)
		{
			return;
		}
		if (Options != null)
		{
			for (int i = 0; i < options.Count; i++)
			{
				CommandOption commandOption = options[i];
				Options[commandOption.Name]?.ApplyOptionLocalization(commandOption, locale);
			}
		}
		if (Arguments != null)
		{
			for (int j = 0; j < options.Count; j++)
			{
				CommandOption commandOption2 = options[j];
				Arguments[commandOption2.Name]?.ApplyArgumentLocalization(commandOption2, locale);
			}
		}
	}

	private void ApplyOptionLocalization(CommandOption opt, DiscordLocale locale)
	{
		CommandOption commandOption = opt;
		if (commandOption.NameLocalizations == null)
		{
			Hash<string, string> hash2 = (commandOption.NameLocalizations = new Hash<string, string>());
		}
		commandOption = opt;
		if (commandOption.DescriptionLocalizations == null)
		{
			Hash<string, string> hash2 = (commandOption.DescriptionLocalizations = new Hash<string, string>());
		}
		CommandOptionType type = opt.Type;
		if (type == CommandOptionType.SubCommand || type == CommandOptionType.SubCommandGroup)
		{
			opt.NameLocalizations[locale.Id] = Name;
			opt.DescriptionLocalizations[locale.Id] = Description;
			if (Options != null)
			{
				for (int i = 0; i < opt.Options.Count; i++)
				{
					CommandOption commandOption2 = opt.Options[i];
					Options[commandOption2.Name]?.ApplyOptionLocalization(commandOption2, locale);
				}
			}
		}
		else
		{
			Arguments?[opt.Name]?.ApplyArgumentLocalization(opt, locale);
		}
	}
}
