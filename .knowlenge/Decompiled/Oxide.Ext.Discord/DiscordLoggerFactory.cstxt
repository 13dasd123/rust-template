using System;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Configuration;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Types;
using Oxide.Plugins;

public sealed class DiscordLoggerFactory : Singleton<DiscordLoggerFactory>
{
	private readonly Hash<string, DiscordLogHandler> _handlers = new Hash<string, DiscordLogHandler>();

	private DiscordLoggerFactory()
	{
	}

	public DiscordLogger CreateLogger(Plugin plugin, DiscordLogLevel logLevel, IDiscordLoggingConfig config)
	{
		if (plugin == null)
		{
			throw new ArgumentNullException("plugin");
		}
		return GetLoggerInternal(plugin.Name, logLevel, config, isExtension: false);
	}

	internal DiscordLogLevel GetLogLevel()
	{
		return ((int)DiscordConfig.Instance.Logging.ConsoleLogLevel <= (int)DiscordConfig.Instance.Logging.FileLogLevel) ? DiscordConfig.Instance.Logging.ConsoleLogLevel : DiscordConfig.Instance.Logging.FileLogLevel;
	}

	internal DiscordLogLevel GetLogLevel(DiscordLogLevel level)
	{
		DiscordLogLevel logLevel = GetLogLevel();
		return ((int)level < (int)logLevel) ? level : logLevel;
	}

	internal DiscordLogger CreateExtensionLogger()
	{
		return CreateExtensionLogger(GetLogLevel());
	}

	internal DiscordLogger CreateExtensionLogger(DiscordLogLevel logLevel)
	{
		return GetLoggerInternal("DiscordExtension", GetLogLevel(logLevel), DiscordConfig.Instance.Logging, isExtension: true);
	}

	private DiscordLogger GetLoggerInternal(string pluginName, DiscordLogLevel logLevel, IDiscordLoggingConfig config, bool isExtension)
	{
		DiscordLogHandler discordLogHandler = _handlers[pluginName];
		if (discordLogHandler == null)
		{
			discordLogHandler = new DiscordLogHandler(pluginName, config, isExtension);
			_handlers[pluginName] = discordLogHandler;
		}
		return new DiscordLogger(logLevel, config, discordLogHandler);
	}

	internal void OnPluginUnloaded(Plugin plugin)
	{
		string name = plugin.Name;
		_handlers[name]?.Shutdown();
		_handlers.Remove(name);
	}

	internal void OnServerShutdown()
	{
		foreach (DiscordLogHandler value in _handlers.Values)
		{
			value.Shutdown();
		}
		_handlers.Clear();
		Singleton<DiscordFileLoggerFactory>.Instance.OnServerShutdown();
	}
}
