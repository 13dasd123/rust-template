using System;
using System.Collections.Generic;
using System.IO;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Callbacks;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Types;
using Oxide.Plugins;

public class DiscordCommandLocalizations : BaseTemplateLibrary<DiscordCommandLocalization>
{
	internal DiscordCommandLocalizations(ILogger logger)
		: base(TemplateType.Command, logger)
	{
	}

	public IPromise<DiscordCommandLocalization> RegisterCommandLocalizationAsync(Plugin plugin, TemplateKey templateName, DiscordCommandLocalization localization, TemplateVersion version, TemplateVersion minVersion, string language = "en")
	{
		if (plugin == null)
		{
			throw new ArgumentNullException("plugin");
		}
		if (!templateName.IsValid)
		{
			throw new ArgumentNullException("plugin");
		}
		if (localization == null)
		{
			throw new ArgumentNullException("localization");
		}
		IPendingPromise<DiscordCommandLocalization> pendingPromise = Promise<DiscordCommandLocalization>.Create();
		TemplateId id = TemplateId.CreateLocalized(plugin, templateName, ServerLocale.Parse(language));
		RegisterTemplateCallback<DiscordCommandLocalization>.Start(this, id, localization, version, minVersion, pendingPromise);
		return pendingPromise;
	}

	public IPromise BulkRegisterCommandLocalizationsAsync(Plugin plugin, TemplateKey templateName, List<BulkTemplateRegistration<DiscordCommandLocalization>> commands, TemplateVersion minVersion)
	{
		if (plugin == null)
		{
			throw new ArgumentNullException("plugin");
		}
		if (!templateName.IsValid)
		{
			throw new ArgumentNullException("plugin");
		}
		if (commands == null)
		{
			throw new ArgumentNullException("commands");
		}
		IPendingPromise pendingPromise = Promise.Create();
		TemplateId id = TemplateId.CreateGlobal(plugin, templateName);
		BulkRegisterTemplateCallback<DiscordCommandLocalization>.Start(this, id, commands, minVersion, pendingPromise);
		return pendingPromise;
	}

	public IPromise ApplyCommandLocalizationsAsync(Plugin plugin, CommandCreate create, TemplateKey templateName)
	{
		if (plugin == null)
		{
			throw new ArgumentNullException("plugin");
		}
		if (!templateName.IsValid)
		{
			throw new ArgumentNullException("plugin");
		}
		IPendingPromise pendingPromise = Promise.Create();
		TemplateId id = TemplateId.CreateGlobal(plugin, templateName);
		ApplyCommandLocalizationsCallback.Start(id, create, pendingPromise);
		return pendingPromise;
	}

	internal void HandleApplyCommandLocalizationsAsync(TemplateId id, CommandCreate create, IPendingPromise promise)
	{
		PrepareCommandLocalizations(create);
		foreach (string item in Directory.EnumerateDirectories(GetTemplateFolder(id.PluginId)))
		{
			ServerLocale locale = ServerLocale.Parse(Path.GetFileName(item));
			HandleLoadAndApplyCommandLocalizationsAsync(id, create, locale);
		}
		promise.Resolve();
	}

	private void PrepareCommandLocalizations(CommandCreate create)
	{
		CommandCreate commandCreate = create;
		if (commandCreate.NameLocalizations == null)
		{
			Hash<string, string> hash2 = (commandCreate.NameLocalizations = new Hash<string, string>());
		}
		commandCreate = create;
		if (commandCreate.DescriptionLocalizations == null)
		{
			Hash<string, string> hash2 = (commandCreate.DescriptionLocalizations = new Hash<string, string>());
		}
		if (create.Options != null)
		{
			for (int i = 0; i < create.Options.Count; i++)
			{
				PrepareOptionLocalizations(create.Options[i]);
			}
		}
	}

	private void PrepareOptionLocalizations(CommandOption opt)
	{
		CommandOption commandOption = opt;
		if (commandOption.NameLocalizations == null)
		{
			Hash<string, string> hash2 = (commandOption.NameLocalizations = new Hash<string, string>());
		}
		commandOption = opt;
		if (commandOption.DescriptionLocalizations == null)
		{
			Hash<string, string> hash2 = (commandOption.DescriptionLocalizations = new Hash<string, string>());
		}
		if (opt.Options != null)
		{
			for (int i = 0; i < opt.Options.Count; i++)
			{
				PrepareOptionLocalizations(opt.Options[i]);
			}
		}
		if (opt.Choices == null)
		{
			return;
		}
		for (int j = 0; j < opt.Choices.Count; j++)
		{
			CommandOptionChoice commandOptionChoice = opt.Choices[j];
			if (commandOptionChoice.NameLocalizations == null)
			{
				commandOptionChoice.NameLocalizations = new Hash<string, string>();
			}
		}
	}

	private void HandleLoadAndApplyCommandLocalizationsAsync(TemplateId id, CommandCreate create, ServerLocale locale)
	{
		DiscordLocale discordLocale = locale.GetDiscordLocale();
		if (discordLocale.IsValid)
		{
			LoadTemplate(id.WithLanguage(locale))?.Template.ApplyCommandLocalization(create, discordLocale);
		}
	}
}
