using System;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Plugins;
using Oxide.Ext.Discord.Types;

public static class TimeSpanPlaceholders
{
	internal static readonly PlaceholderDataKey TimeSpanKey = new PlaceholderDataKey("timespan");

	public static int Days(TimeSpan time)
	{
		return time.Days;
	}

	public static string Formatted(PlaceholderState state, TimeSpan time)
	{
		DiscordInteraction discordInteraction = state.Data.Get<DiscordInteraction>();
		if (time < TimeSpan.Zero)
		{
			return discordInteraction?.GetLangMessage(DiscordExtensionCore.Instance, "TimeSpan.Infinity") ?? BaseDiscordLibrary<DiscordLocales>.Instance.GetLangMessage(DiscordExtensionCore.Instance, null, "TimeSpan.Infinity");
		}
		ValueStringBuilder sb = default(ValueStringBuilder);
		AppendTime(discordInteraction, sb, time.TotalDays, time.Days, "TimeSpan.Day", "TimeSpan.Days");
		AppendTime(discordInteraction, sb, time.TotalHours, time.Hours, "TimeSpan.Hour", "TimeSpan.Hours");
		AppendTime(discordInteraction, sb, time.TotalMinutes, time.Minutes, "TimeSpan.Minute", "TimeSpan.Minutes");
		AppendTime(discordInteraction, sb, time.TotalSeconds, time.Seconds, "TimeSpan.Second", "TimeSpan.Seconds");
		return sb.ToString();
	}

	private static void AppendTime(DiscordInteraction interaction, ValueStringBuilder sb, double total, int value, string singular, string plural)
	{
		if (total >= 1.0)
		{
			if (sb.Length != 0)
			{
				sb.Append(' ');
			}
			string langKey = ((value == 1) ? singular : plural);
			sb.Append(value.ToString());
			sb.Append(' ');
			sb.Append(interaction?.GetLangMessage(DiscordExtensionCore.Instance, langKey) ?? BaseDiscordLibrary<DiscordLocales>.Instance.GetLangMessage(DiscordExtensionCore.Instance, null, langKey));
		}
	}

	public static int Hours(TimeSpan time)
	{
		return time.Hours;
	}

	public static int Minutes(TimeSpan time)
	{
		return time.Minutes;
	}

	public static int Seconds(TimeSpan time)
	{
		return time.Seconds;
	}

	public static int Milliseconds(TimeSpan time)
	{
		return time.Milliseconds;
	}

	public static double TotalDays(TimeSpan time)
	{
		return time.TotalDays;
	}

	public static double TotalHours(TimeSpan time)
	{
		return time.TotalHours;
	}

	public static double TotalMinutes(TimeSpan time)
	{
		return time.TotalMinutes;
	}

	public static double TotalSeconds(TimeSpan time)
	{
		return time.TotalSeconds;
	}

	public static double TotalMilliseconds(TimeSpan time)
	{
		return time.TotalMilliseconds;
	}

	internal static void RegisterPlaceholders()
	{
		RegisterPlaceholders(DiscordExtensionCore.Instance, DefaultKeys.Timespan, TimeSpanKey);
	}

	public static void RegisterPlaceholders(Plugin plugin, TimespanKeys keys, PlaceholderDataKey dataKey)
	{
		DiscordPlaceholders instance = BaseDiscordLibrary<DiscordPlaceholders>.Instance;
		instance.RegisterPlaceholder<TimeSpan>(plugin, keys.Time, dataKey);
		instance.RegisterPlaceholder<TimeSpan, string>(plugin, keys.Formatted, dataKey, Formatted);
		instance.RegisterPlaceholder<TimeSpan, int>(plugin, keys.Days, dataKey, Days);
		instance.RegisterPlaceholder<TimeSpan, int>(plugin, keys.Hours, dataKey, Hours);
		instance.RegisterPlaceholder<TimeSpan, int>(plugin, keys.Minutes, dataKey, Minutes);
		instance.RegisterPlaceholder<TimeSpan, int>(plugin, keys.Seconds, dataKey, Seconds);
		instance.RegisterPlaceholder<TimeSpan, int>(plugin, keys.Milliseconds, dataKey, Milliseconds);
		instance.RegisterPlaceholder<TimeSpan, double>(plugin, keys.TotalDays, dataKey, TotalDays);
		instance.RegisterPlaceholder<TimeSpan, double>(plugin, keys.TotalHours, dataKey, TotalHours);
		instance.RegisterPlaceholder<TimeSpan, double>(plugin, keys.TotalMinutes, dataKey, TotalMinutes);
		instance.RegisterPlaceholder<TimeSpan, double>(plugin, keys.TotalSeconds, dataKey, TotalSeconds);
		instance.RegisterPlaceholder<TimeSpan, double>(plugin, keys.TotalMilliseconds, dataKey, TotalMilliseconds);
	}
}
