using Oxide.Ext.Discord.Builders;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Interfaces;

public class ScheduledEventUsersLookup : IDiscordQueryString, IDiscordValidation
{
	public int? Limit { get; set; }

	public bool? WithMember { get; set; }

	public Snowflake? Before { get; set; }

	public Snowflake? After { get; set; }

	public string ToQueryString()
	{
		Validate();
		QueryStringBuilder queryStringBuilder = default(QueryStringBuilder);
		if (Limit.HasValue)
		{
			queryStringBuilder.Add("limit", Limit.Value.ToString());
		}
		if (WithMember.HasValue)
		{
			queryStringBuilder.Add("with_member", WithMember.Value.ToString());
		}
		if (Before.HasValue)
		{
			queryStringBuilder.Add("before", Before.Value.ToString());
		}
		if (After.HasValue)
		{
			queryStringBuilder.Add("after", After.Value.ToString());
		}
		return queryStringBuilder.ToString();
	}

	public void Validate()
	{
		InvalidGuildScheduledEventLookupException.ThrowIfInvalidLimit(Limit);
	}
}
