using System;
using System.Collections.Generic;
using Oxide.Core.Libraries;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Attributes;
using Oxide.Ext.Discord.Cache;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Plugins;
using Oxide.Ext.Discord.Types;
using Oxide.Plugins;

[Obsolete("DiscordCommand is deprecated and will be removed in a future update. Please upgrade to DiscordAppCommand")]
public class DiscordCommand : BaseDiscordLibrary<DiscordCommand>, IDebugLoggable
{
	public readonly char[] CommandPrefixes;

	private readonly Hash<string, DirectMessageCommand> _directMessageCommands = new Hash<string, DirectMessageCommand>();

	private readonly Hash<string, GuildCommand> _guildCommands = new Hash<string, GuildCommand>();

	private readonly ILogger _logger;

	internal DiscordCommand(char[] prefixes, ILogger logger)
	{
		CommandPrefixes = prefixes;
		_logger = logger;
	}

	[LibraryFunction("HasCommands")]
	public bool HasCommands()
	{
		return HasDirectMessageCommands() || HasGuildCommands();
	}

	[LibraryFunction("HasDirectMessageCommands")]
	public bool HasDirectMessageCommands()
	{
		return _directMessageCommands.Count != 0;
	}

	[LibraryFunction("HasGuildCommands")]
	public bool HasGuildCommands()
	{
		return _guildCommands.Count != 0;
	}

	[LibraryFunction("AddDirectMessageLocalizedCommand")]
	public void AddDirectMessageLocalizedCommand(string langKey, Plugin plugin, string callback)
	{
		if (string.IsNullOrEmpty(langKey))
		{
			throw new ArgumentNullException("langKey");
		}
		if (plugin == null)
		{
			throw new ArgumentNullException("plugin");
		}
		if (string.IsNullOrEmpty(callback))
		{
			throw new ArgumentNullException("callback");
		}
		string[] languages = Singleton<OxideLibrary>.Instance.Lang.GetLanguages(plugin);
		foreach (string lang in languages)
		{
			Dictionary<string, string> messages = Singleton<OxideLibrary>.Instance.Lang.GetMessages(lang, plugin);
			if (messages.TryGetValue(langKey, out var value) && !string.IsNullOrEmpty(value))
			{
				AddDirectMessageCommand(value, plugin, callback);
			}
		}
	}

	public void AddDirectMessageCommand(string command, Plugin plugin, string callback)
	{
		if (string.IsNullOrEmpty(command))
		{
			throw new ArgumentNullException("command");
		}
		if (plugin == null)
		{
			throw new ArgumentNullException("plugin");
		}
		if (string.IsNullOrEmpty(callback))
		{
			throw new ArgumentNullException("callback");
		}
		string text = command.ToLowerInvariant();
		if (_directMessageCommands.TryGetValue(text, out var value))
		{
			string arg = value.Plugin?.FullName() ?? "an unknown plugin";
			string arg2 = plugin.FullName() ?? "An unknown plugin";
			_logger.Warning("{0} has replaced the '{1}' discord direct message command previously registered by {2}", arg2, text, arg);
		}
		_logger.Debug("Adding Direct Command For: {0} Command: {1} Callback: {2}", plugin.FullName(), command, callback);
		value = new DirectMessageCommand(plugin, text, callback);
		_directMessageCommands[text] = value;
	}

	[LibraryFunction("AddGuildLocalizedCommand")]
	public void AddGuildLocalizedCommand(string langKey, Plugin plugin, List<Snowflake> allowedChannels, string callback)
	{
		if (string.IsNullOrEmpty(langKey))
		{
			throw new ArgumentNullException("langKey");
		}
		if (plugin == null)
		{
			throw new ArgumentNullException("plugin");
		}
		if (string.IsNullOrEmpty(callback))
		{
			throw new ArgumentNullException("callback");
		}
		string[] languages = Singleton<OxideLibrary>.Instance.Lang.GetLanguages(plugin);
		foreach (string lang in languages)
		{
			Dictionary<string, string> messages = Singleton<OxideLibrary>.Instance.Lang.GetMessages(lang, plugin);
			if (messages.TryGetValue(langKey, out var value) && !string.IsNullOrEmpty(value))
			{
				AddGuildCommand(value, plugin, allowedChannels, callback);
			}
		}
	}

	public void AddGuildCommand(string command, Plugin plugin, List<Snowflake> allowedChannels, string callback)
	{
		if (string.IsNullOrEmpty(command))
		{
			throw new ArgumentNullException("command");
		}
		if (plugin == null)
		{
			throw new ArgumentNullException("plugin");
		}
		if (string.IsNullOrEmpty(callback))
		{
			throw new ArgumentNullException("callback");
		}
		string text = command.ToLowerInvariant();
		if (_guildCommands.TryGetValue(text, out var value))
		{
			string arg = value.Plugin?.FullName() ?? "an unknown plugin";
			string arg2 = plugin.FullName();
			_logger.Warning("{0} has replaced the '{1}' discord guild command previously registered by {2}", arg2, text, arg);
		}
		_logger.Debug("Adding Guild Command For: {0} Command: {1} Callback: {2}", plugin.FullName(), command, callback);
		value = new GuildCommand(plugin, text, callback, allowedChannels);
		_guildCommands[text] = value;
	}

	[LibraryFunction("RemoveDiscordCommand")]
	public void RemoveDiscordCommand(string command, Plugin plugin)
	{
		DirectMessageCommand directMessageCommand = _directMessageCommands[command];
		if (directMessageCommand != null && (directMessageCommand.Plugin == null || !directMessageCommand.Plugin.IsLoaded || directMessageCommand.Plugin == plugin))
		{
			RemoveDmCommand(directMessageCommand);
		}
		GuildCommand guildCommand = _guildCommands[command];
		if (guildCommand != null && (guildCommand.Plugin == null || !guildCommand.Plugin.IsLoaded || guildCommand.Plugin == plugin))
		{
			RemoveGuildCommand(guildCommand);
		}
	}

	private void RemoveDmCommand(DirectMessageCommand command)
	{
		DirectMessageCommand directMessageCommand = _directMessageCommands[command.Name];
		directMessageCommand.OnRemoved();
		_directMessageCommands.Remove(command.Name);
	}

	private void RemoveGuildCommand(GuildCommand command)
	{
		GuildCommand guildCommand = _guildCommands[command.Name];
		guildCommand.OnRemoved();
		_guildCommands.Remove(command.Name);
	}

	internal bool HandleDirectMessageCommand(BotClient client, DiscordMessage message, DiscordChannel channel, string name, string[] args)
	{
		DirectMessageCommand directMessageCommand = _directMessageCommands[name];
		if (directMessageCommand == null || !directMessageCommand.CanRun(client) || !directMessageCommand.CanHandle(message, channel))
		{
			return false;
		}
		if (!directMessageCommand.Plugin.IsLoaded)
		{
			_directMessageCommands.Remove(name);
			return false;
		}
		if (!client.IsPluginRegistered(directMessageCommand.Plugin))
		{
			return false;
		}
		directMessageCommand.HandleCommand(message, name, args);
		return true;
	}

	internal bool HandleGuildCommand(BotClient client, DiscordMessage message, DiscordChannel channel, string name, string[] args)
	{
		GuildCommand guildCommand = _guildCommands[name];
		_logger.Debug("Processing Command: {0}", name);
		if (guildCommand == null)
		{
			_logger.Debug("Can't handle: command is null");
			return false;
		}
		if (!guildCommand.Plugin.IsLoaded)
		{
			_logger.Debug("Can't handle command plugin not loaded");
			_guildCommands.Remove(name);
			return false;
		}
		if (!guildCommand.CanRun(client))
		{
			_logger.Debug("Can't handle: command can't run for client");
			return false;
		}
		if (!guildCommand.CanHandle(message, channel))
		{
			_logger.Debug("Can't handle: command can't handle message / channel");
			return false;
		}
		if (!client.IsPluginRegistered(guildCommand.Plugin))
		{
			_logger.Debug("Can't handle command plugin not registered");
			return false;
		}
		guildCommand.HandleCommand(message, name, args);
		_logger.Debug("Handling command");
		return true;
	}

	internal IEnumerable<BaseCommand> GetCommands()
	{
		foreach (GuildCommand value in _guildCommands.Values)
		{
			yield return value;
		}
		foreach (DirectMessageCommand value2 in _directMessageCommands.Values)
		{
			yield return value2;
		}
	}

	protected override void OnClientBotConnect(DiscordClient client)
	{
		Plugin plugin = client.Plugin;
		foreach (PluginHookResult<DirectMessageCommandAttribute> item in client.PluginSetup.GetCallbacksWithAttribute<DirectMessageCommandAttribute>())
		{
			if (item.IsValid)
			{
				DirectMessageCommandAttribute attribute = item.Attribute;
				if (attribute.IsLocalized)
				{
					AddDirectMessageLocalizedCommand(attribute.Name, plugin, item.Name);
					_logger.Debug("Adding Localized Direct Message Command {0} Method: {1}", attribute.Name, item.Name);
				}
				else
				{
					AddDirectMessageCommand(attribute.Name, plugin, item.Name);
					_logger.Debug("Adding Direct Message Command {0} Method: {1}", attribute.Name, item.Name);
				}
			}
		}
		foreach (PluginHookResult<GuildCommandAttribute> item2 in client.PluginSetup.GetCallbacksWithAttribute<GuildCommandAttribute>())
		{
			if (item2.IsValid)
			{
				GuildCommandAttribute attribute2 = item2.Attribute;
				if (attribute2.IsLocalized)
				{
					AddGuildLocalizedCommand(attribute2.Name, plugin, null, item2.Name);
					_logger.Debug("Adding Localized Direct Message Command {0} Method: {1}", attribute2.Name, item2.Name);
				}
				else
				{
					AddGuildCommand(attribute2.Name, plugin, null, item2.Name);
					_logger.Debug("Adding Direct Message Command {0} Method: {1}", attribute2.Name, item2.Name);
				}
			}
		}
	}

	protected override void OnPluginUnloaded(Plugin sender)
	{
		List<DirectMessageCommand> list = DiscordPool.Internal.GetList<DirectMessageCommand>();
		List<GuildCommand> list2 = DiscordPool.Internal.GetList<GuildCommand>();
		foreach (DirectMessageCommand value in _directMessageCommands.Values)
		{
			if (value.Plugin.Id() == sender.Id())
			{
				list.Add(value);
			}
		}
		foreach (GuildCommand value2 in _guildCommands.Values)
		{
			if (value2.Plugin.Id() == sender.Id())
			{
				list2.Add(value2);
			}
		}
		for (int i = 0; i < list.Count; i++)
		{
			DirectMessageCommand command = list[i];
			RemoveDmCommand(command);
		}
		for (int j = 0; j < list2.Count; j++)
		{
			GuildCommand command2 = list2[j];
			RemoveGuildCommand(command2);
		}
		DiscordPool.Internal.FreeList(list);
		DiscordPool.Internal.FreeList(list2);
	}

	public void LogDebug(DebugLogger logger)
	{
		logger.AppendList("Commands", GetCommands());
	}
}
