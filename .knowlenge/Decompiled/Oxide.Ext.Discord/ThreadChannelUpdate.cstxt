using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Interfaces;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class ThreadChannelUpdate : IDiscordValidation
{
	[JsonProperty("name")]
	public string Name { get; set; }

	[JsonProperty("archived")]
	public bool Archived { get; set; }

	[JsonProperty("auto_archive_duration")]
	public int AutoArchiveDuration { get; set; }

	[JsonProperty("locked")]
	public bool Locked { get; set; }

	[JsonProperty("invitable")]
	public bool Invitable { get; set; }

	[JsonProperty("rate_limit_per_user")]
	public int? RateLimitPerUser { get; set; }

	[JsonProperty("flags")]
	public ChannelFlags? Flags { get; set; }

	[JsonProperty("applied_tags")]
	public List<Snowflake> AppliedTags { get; set; }

	public void Validate()
	{
		InvalidChannelException.ThrowIfInvalidName(Name, allowNullOrEmpty: true);
		InvalidChannelException.ThrowIfInvalidRateLimitPerUser(RateLimitPerUser);
		InvalidThreadException.ThrowIfInvalidAutoArchiveDuration(AutoArchiveDuration);
	}
}
