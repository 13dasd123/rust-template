using System;
using Oxide.Ext.Discord.Cache;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Types;

internal readonly struct AppCommandId : IEquatable<AppCommandId>
{
	public readonly InteractionType Type;

	public readonly string Command;

	public readonly string Group;

	public readonly string SubCommand;

	public readonly string Argument;

	public AppCommandId(InteractionType type, string command, string group = null, string subCommand = null, string argument = null)
	{
		if (string.IsNullOrEmpty(command))
		{
			throw new ArgumentNullException("command");
		}
		Type = type;
		Command = command;
		Group = group;
		SubCommand = subCommand;
		Argument = argument;
	}

	public override string ToString()
	{
		ValueStringBuilder valueStringBuilder = default(ValueStringBuilder);
		valueStringBuilder.Append(Singleton<EnumCache<InteractionType>>.Instance.ToString(Type));
		valueStringBuilder.Append(':');
		valueStringBuilder.Append(Command);
		if (!string.IsNullOrEmpty(Group))
		{
			valueStringBuilder.Append('/');
			valueStringBuilder.Append(Group);
		}
		if (!string.IsNullOrEmpty(SubCommand))
		{
			valueStringBuilder.Append('/');
			valueStringBuilder.Append(SubCommand);
		}
		if (!string.IsNullOrEmpty(Argument))
		{
			valueStringBuilder.Append('#');
			valueStringBuilder.Append(Argument);
		}
		return valueStringBuilder.ToString();
	}

	public bool Equals(AppCommandId other)
	{
		return Type == other.Type && Command == other.Command && Group == other.Group && SubCommand == other.SubCommand && Argument == other.Argument;
	}

	public override bool Equals(object obj)
	{
		return obj is AppCommandId other && Equals(other);
	}

	public override int GetHashCode()
	{
		return HashCode.Combine((int)Type, Command, Group, SubCommand, Argument);
	}
}
