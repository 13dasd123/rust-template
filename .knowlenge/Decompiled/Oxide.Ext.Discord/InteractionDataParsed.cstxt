using System.Collections.Generic;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Libraries;

public class InteractionDataParsed
{
	public readonly DiscordInteraction Interaction;

	public readonly InteractionData Data;

	public readonly ApplicationCommandType? Type;

	public readonly string Command;

	public readonly string TriggeredComponentId;

	public readonly List<string> SelectMenuValues;

	public readonly ServerLocale UserOxideLocale;

	public readonly ServerLocale GuildOxideLocale;

	public string CommandGroup { get; private set; } = string.Empty;

	public string SubCommand { get; private set; } = string.Empty;

	public InteractionDataArgs Args { get; private set; }

	public bool InGuild => Interaction.GuildId.HasValue;

	public InteractionDataParsed(DiscordInteraction interaction)
	{
		Interaction = interaction;
		Data = interaction.Data;
		UserOxideLocale = BaseDiscordLibrary<DiscordLocales>.Instance.GetServerLanguage(interaction.Locale);
		if (interaction.GuildLocale.HasValue && interaction.GuildLocale.Value.IsValid)
		{
			GuildOxideLocale = BaseDiscordLibrary<DiscordLocales>.Instance.GetServerLanguage(interaction.GuildLocale.Value);
		}
		if (Data.ComponentType.HasValue)
		{
			TriggeredComponentId = Data.CustomId;
			if (Data.ComponentType == MessageComponentType.StringSelect)
			{
				SelectMenuValues = Data.Values;
			}
			return;
		}
		Type = Data.Type;
		Command = Data.Name;
		if (Type != ApplicationCommandType.Message && Type != ApplicationCommandType.User)
		{
			ParseCommand(Data.Options);
		}
	}

	private void ParseCommand(List<InteractionDataOption> options)
	{
		if (options != null && options.Count != 0)
		{
			InteractionDataOption interactionDataOption = options[0];
			switch (interactionDataOption.Type)
			{
			case CommandOptionType.SubCommandGroup:
				CommandGroup = interactionDataOption.Name;
				ParseCommand(interactionDataOption.Options);
				break;
			case CommandOptionType.SubCommand:
				SubCommand = interactionDataOption.Name;
				ParseCommand(interactionDataOption.Options);
				break;
			default:
				Args = new InteractionDataArgs(Interaction, options);
				break;
			}
		}
	}
}
