using System;
using System.Collections.Generic;
using Oxide.Ext.Discord.Builders;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Libraries;

public abstract class BaseChannelMessageBuilder<TMessage, TBuilder> : BaseMessageBuilder<TMessage, TBuilder> where TMessage : MessageCreate where TBuilder : BaseChannelMessageBuilder<TMessage, TBuilder>
{
	protected BaseChannelMessageBuilder(TMessage message)
		: base(message)
	{
	}

	public TBuilder AddSticker(Snowflake stickerId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(stickerId);
		TMessage message = Message;
		if (message.StickerIds == null)
		{
			List<Snowflake> list2 = (message.StickerIds = new List<Snowflake>());
		}
		InvalidMessageException.ThrowIfMaxStickers(Message.StickerIds.Count + 1);
		Message.StickerIds.Add(stickerId);
		return Builder;
	}

	public TBuilder AddSticker(DiscordSticker sticker)
	{
		if (sticker == null)
		{
			throw new ArgumentNullException("sticker");
		}
		return AddSticker(sticker.Id);
	}

	public TBuilder AddStickers(ICollection<Snowflake> stickerIds)
	{
		if (stickerIds == null)
		{
			throw new ArgumentNullException("stickerIds");
		}
		InvalidSnowflakeException.ThrowIfInvalid(stickerIds);
		TMessage message = Message;
		if (message.StickerIds == null)
		{
			List<Snowflake> list2 = (message.StickerIds = new List<Snowflake>());
		}
		InvalidMessageException.ThrowIfMaxStickers(Message.StickerIds.Count + stickerIds.Count);
		Message.StickerIds.AddRange(stickerIds);
		return Builder;
	}

	public TBuilder AddStickers(ICollection<DiscordSticker> stickerIds)
	{
		if (stickerIds == null)
		{
			throw new ArgumentNullException("stickerIds");
		}
		List<Snowflake> list = DiscordPool.Internal.GetList<Snowflake>();
		foreach (DiscordSticker stickerId in stickerIds)
		{
			list.Add(stickerId.Id);
		}
		AddStickers(list);
		DiscordPool.Internal.FreeList(list);
		return Builder;
	}

	public TBuilder AddMessageReference(MessageReference reference)
	{
		Message.MessageReference = reference ?? throw new ArgumentNullException("reference");
		return Builder;
	}

	public TBuilder AddReply(DiscordMessage message, bool failIfNotExists = true)
	{
		if (message == null)
		{
			throw new ArgumentNullException("message");
		}
		return AddReply(message.Id, message.GuildId, failIfNotExists);
	}

	public TBuilder AddReply(Snowflake messageId, Snowflake? guildId = null, bool failIfNotExists = true)
	{
		MessageReference messageReference = Message.MessageReference ?? new MessageReference();
		messageReference.MessageId = messageId;
		messageReference.GuildId = guildId;
		messageReference.FailIfNotExists = failIfNotExists;
		Message.MessageReference = messageReference;
		return Builder;
	}

	public TBuilder SuppressNotifications(DiscordSticker sticker)
	{
		TMessage message = Message;
		message.Flags |= MessageFlags.SuppressNotifications;
		return Builder;
	}
}
