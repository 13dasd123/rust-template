using System.Collections.Generic;
using Oxide.Core.Libraries.Covalence;
using Oxide.Ext.Discord;
using Oxide.Ext.Discord.Cache;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Plugins;
using Oxide.Ext.Discord.Types;

public static class PlayerExt
{
	public static IPromise<DiscordMessage> SendDiscordMessage(this IPlayer player, DiscordClient client, string message)
	{
		MessageCreate message2 = new MessageCreate
		{
			Content = message
		};
		return SendDiscordMessage(player, client, message2);
	}

	public static IPromise<DiscordMessage> SendDiscordMessage(this IPlayer player, DiscordClient client, DiscordEmbed embed)
	{
		MessageCreate message = new MessageCreate
		{
			Embeds = new List<DiscordEmbed> { embed }
		};
		return SendDiscordMessage(player, client, message);
	}

	public static IPromise<DiscordMessage> SendDiscordMessage(this IPlayer player, DiscordClient client, List<DiscordEmbed> embeds)
	{
		MessageCreate message = new MessageCreate
		{
			Embeds = embeds
		};
		return SendDiscordMessage(player, client, message);
	}

	public static IPromise<DiscordMessage> SendDiscordMessage(this IPlayer player, DiscordClient client, MessageCreate message)
	{
		return SendMessage(client, GetDiscordUserId(player), message);
	}

	public static IPromise<DiscordMessage> SendDiscordGlobalTemplateMessage(this IPlayer player, DiscordClient client, TemplateKey templateName, MessageCreate message = null, PlaceholderData placeholders = null)
	{
		MessageCreate message2 = DiscordExtension.DiscordMessageTemplates.GetPlayerTemplate(client.Plugin, templateName, player).ToMessage(placeholders, message);
		return SendMessage(client, GetDiscordUserId(player), message2);
	}

	public static IPromise<DiscordMessage> SendDiscordTemplateMessage(this IPlayer player, DiscordClient client, TemplateKey templateName, MessageCreate message = null, PlaceholderData placeholders = null)
	{
		MessageCreate message2 = DiscordExtension.DiscordMessageTemplates.GetPlayerTemplate(client.Plugin, templateName, player).ToMessage(placeholders, message);
		return SendMessage(client, GetDiscordUserId(player), message2);
	}

	private static IPromise<DiscordMessage> SendMessage(DiscordClient client, Snowflake? id, MessageCreate message)
	{
		if (!client.IsConnected())
		{
			return Promise<DiscordMessage>.Rejected(DiscordClientException.NotConnected());
		}
		if (!id.HasValue)
		{
			return Promise<DiscordMessage>.Rejected(InvalidSnowflakeException.InvalidException("id"));
		}
		DiscordChannel discordChannel = client.Bot.DirectMessagesByUserId[id.Value];
		if (discordChannel != null)
		{
			return discordChannel.CreateMessage(client, message);
		}
		DiscordUser orCreate = Singleton<EntityCache<DiscordUser>>.Instance.GetOrCreate(id.Value);
		return orCreate.SendDirectMessage(client, message);
	}

	public static bool IsLinked(this IPlayer player)
	{
		return player != null && BaseDiscordLibrary<DiscordLink>.Instance.IsLinked(player.Id);
	}

	public static Snowflake GetDiscordUserId(this IPlayer player)
	{
		return (player != null) ? BaseDiscordLibrary<DiscordLink>.Instance.GetDiscordId(player) : default(Snowflake);
	}

	public static DiscordUser GetDiscordUser(this IPlayer player)
	{
		return (player != null) ? BaseDiscordLibrary<DiscordLink>.Instance.GetDiscordUser(player) : null;
	}

	public static GuildMember GetGuildMember(this IPlayer player, DiscordGuild guild)
	{
		return (player != null) ? BaseDiscordLibrary<DiscordLink>.Instance.GetLinkedMember(player, guild) : null;
	}

	public static PlayerId PlayerId(this IPlayer player)
	{
		return (player != null) ? new PlayerId(player.Id) : default(PlayerId);
	}

	public static bool IsDummyPlayer(this IPlayer player)
	{
		return player is DiscordDummyPlayer;
	}

	public static IPlayer CreateDummyPlayer(string id, string name, string ip)
	{
		return new DiscordDummyPlayer(id, name, ip);
	}
}
