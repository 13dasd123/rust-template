using System;
using System.Net.Http.Headers;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Rest;
using Oxide.Ext.Discord.Types;

public class RateLimitResponse : BasePoolable
{
	public BucketId BucketId;

	public bool IsGlobalRateLimit;

	public DateTimeOffset ResetAt;

	public int Limit;

	public int Remaining;

	public string Scope;

	public string Message;

	public int? Code;

	public void Init(HttpResponseHeaders headers, DiscordHttpStatusCode code, string content)
	{
		IsGlobalRateLimit = headers.GetBool("X-RateLimit-Global");
		Scope = headers.Get("X-RateLimit-Scope");
		if (IsGlobalRateLimit)
		{
			ResetAt = DateTimeOffset.UtcNow + TimeSpan.FromSeconds(headers.GetDouble("Retry-After"));
			return;
		}
		BucketId = headers.GetBucketId("X-RateLimit-Bucket");
		if (BucketId.IsValid)
		{
			Limit = headers.GetInt("X-RateLimit-Limit");
			Remaining = headers.GetInt("X-RateLimit-Remaining");
			ResetAt = DateTimeOffset.UtcNow + TimeSpan.FromSeconds(headers.GetDouble("X-RateLimit-Reset-After"));
			if (code == DiscordHttpStatusCode.TooManyRequests && !string.IsNullOrEmpty(content) && content[0] == '{')
			{
				RateLimitContent rateLimitContent = DiscordPool.Internal.Get<RateLimitContent>();
				JsonConvert.PopulateObject(content, rateLimitContent);
				Message = rateLimitContent.Message;
				Code = rateLimitContent.Code;
				DiscordPool.Internal.Free(rateLimitContent);
			}
		}
	}

	protected override void EnterPool()
	{
		BucketId = default(BucketId);
		IsGlobalRateLimit = false;
		ResetAt = default(DateTimeOffset);
		Limit = 0;
		Remaining = 0;
		Scope = null;
		Message = null;
		Code = null;
	}
}
