using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using Oxide.Core.Libraries.Covalence;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Callbacks;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Plugins;
using Oxide.Ext.Discord.Types;

public abstract class BaseMessageTemplateLibrary<TTemplate> : BaseTemplateLibrary<TTemplate> where TTemplate : class, new()
{
	private readonly ConcurrentDictionary<TemplateId, TTemplate> _templateCache = new ConcurrentDictionary<TemplateId, TTemplate>();

	internal BaseMessageTemplateLibrary(TemplateType type, ILogger logger)
		: base(type, logger)
	{
	}

	public IPromise<TTemplate> RegisterGlobalTemplateAsync(Plugin plugin, TemplateKey templateName, TTemplate template, TemplateVersion version, TemplateVersion minVersion)
	{
		if (plugin == null)
		{
			throw new ArgumentNullException("plugin");
		}
		if (!templateName.IsValid)
		{
			throw new ArgumentNullException("templateName");
		}
		if (template == null)
		{
			throw new ArgumentNullException("template");
		}
		IPendingPromise<TTemplate> pendingPromise = Promise<TTemplate>.Create();
		TemplateId id = TemplateId.CreateGlobal(plugin, templateName);
		RegisterTemplateCallback<TTemplate>.Start(this, id, template, version, minVersion, pendingPromise);
		return pendingPromise;
	}

	public IPromise<TTemplate> RegisterLocalizedTemplateAsync(Plugin plugin, TemplateKey templateName, TTemplate template, TemplateVersion version, TemplateVersion minVersion, string language = "en")
	{
		if (plugin == null)
		{
			throw new ArgumentNullException("plugin");
		}
		if (!templateName.IsValid)
		{
			throw new ArgumentNullException("templateName");
		}
		if (template == null)
		{
			throw new ArgumentNullException("template");
		}
		IPendingPromise<TTemplate> pendingPromise = Promise<TTemplate>.Create();
		TemplateId id = TemplateId.CreateLocalized(plugin, templateName, ServerLocale.Parse(language));
		RegisterTemplateCallback<TTemplate>.Start(this, id, template, version, minVersion, pendingPromise);
		return pendingPromise;
	}

	public TTemplate GetGlobalTemplate(Plugin plugin, TemplateKey templateName)
	{
		return HandleGetLocalizedTemplate(TemplateId.CreateGlobal(plugin, templateName), null);
	}

	public TTemplate GetPlayerTemplate(Plugin plugin, TemplateKey templateName, IPlayer player)
	{
		return GetPlayerTemplate(plugin, templateName, player?.Id);
	}

	public TTemplate GetPlayerTemplate(Plugin plugin, TemplateKey templateName, string playerId)
	{
		return HandleGetLocalizedTemplate(TemplateId.CreatePlayer(plugin, templateName, playerId), null);
	}

	public TTemplate GetLocalizedTemplate(Plugin plugin, TemplateKey templateName, string language = "en")
	{
		return HandleGetLocalizedTemplate(TemplateId.CreateLocalized(plugin, templateName, ServerLocale.Parse(language)), null);
	}

	public TTemplate GetLocalizedTemplate(Plugin plugin, TemplateKey templateName, DiscordInteraction interaction)
	{
		return HandleGetLocalizedTemplate(TemplateId.CreateInteraction(plugin, templateName, interaction), interaction);
	}

	private TTemplate HandleGetLocalizedTemplate(TemplateId id, DiscordInteraction interaction)
	{
		TTemplate val = LoadFromCache(id);
		if (val != null)
		{
			return val;
		}
		DiscordTemplate<TTemplate> discordTemplate;
		if (interaction == null)
		{
			discordTemplate = (id.IsGlobal ? LoadTemplate(id) : (LoadTemplate(id) ?? LoadTemplate(id, BaseDiscordLibrary<DiscordLocales>.Instance.ServerLanguage) ?? LoadTemplate(id, ServerLocale.Default)));
		}
		else
		{
			IPlayer player = interaction.User.Player;
			discordTemplate = LoadTemplate(id) ?? ((player != null) ? LoadTemplate(id, BaseDiscordLibrary<DiscordLocales>.Instance.GetPlayerLanguage(player)) : null) ?? (interaction.GuildLocale.HasValue ? LoadTemplate(id, interaction.GuildLocale.Value.GetServerLocale()) : null) ?? LoadTemplate(id, BaseDiscordLibrary<DiscordLocales>.Instance.ServerLanguage) ?? LoadTemplate(id, ServerLocale.Default);
		}
		if (discordTemplate == null)
		{
			Logger.Error("Plugin {0} is using the {1} Template API but message template name '{2}/{3}' is not registered", id.GetPluginName(), GetType().GetRealTypeName(), id.GetLanguageName(), id.TemplateName);
			return new TTemplate();
		}
		SetCache(id, discordTemplate.Template);
		return discordTemplate.Template;
	}

	private TTemplate LoadFromCache(TemplateId id)
	{
		return _templateCache.GetValueOrDefault(id);
	}

	private void SetCache(TemplateId id, TTemplate template)
	{
		_templateCache[id] = template;
	}

	internal override void OnTemplateRegistered(TemplateId id, TTemplate template)
	{
		SetCache(id, template);
	}

	protected override void OnPluginUnloaded(Plugin plugin)
	{
		base.OnPluginUnloaded(plugin);
		PluginId pluginId = plugin.Id();
		_templateCache.RemoveAll((TemplateId t) => t.PluginId == pluginId);
	}
}
