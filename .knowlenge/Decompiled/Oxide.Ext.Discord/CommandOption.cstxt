using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Entities;
using Oxide.Plugins;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class CommandOption
{
	[JsonProperty("type")]
	public CommandOptionType Type { get; set; }

	[JsonProperty("name")]
	public string Name { get; set; }

	[JsonProperty("name_localizations")]
	public Hash<string, string> NameLocalizations { get; set; }

	[JsonProperty("description")]
	public string Description { get; set; }

	[JsonProperty("description_localizations")]
	public Hash<string, string> DescriptionLocalizations { get; set; }

	[JsonProperty("required")]
	public bool? Required { get; set; }

	[JsonProperty("choices")]
	public List<CommandOptionChoice> Choices { get; set; }

	[JsonProperty("options")]
	public List<CommandOption> Options { get; set; }

	[JsonProperty("channel_types")]
	public List<ChannelType> ChannelTypes { get; set; }

	[JsonProperty("min_value")]
	public double? MinValue { get; set; }

	[JsonProperty("max_value")]
	public double? MaxValue { get; set; }

	[JsonProperty("min_length")]
	public int? MinLength { get; set; }

	[JsonProperty("max_length")]
	public int? MaxLength { get; set; }

	[JsonProperty("autocomplete")]
	public bool? Autocomplete { get; set; }

	[JsonConstructor]
	public CommandOption()
	{
	}

	public CommandOption(string name, string description, CommandOptionType type, List<CommandOption> options = null)
	{
		Name = name;
		Description = description;
		Type = type;
		Options = options;
		NameLocalizations = new Hash<string, string>();
		DescriptionLocalizations = new Hash<string, string>();
	}
}
