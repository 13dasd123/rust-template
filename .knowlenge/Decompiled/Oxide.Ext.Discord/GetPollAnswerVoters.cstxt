using Newtonsoft.Json;
using Oxide.Ext.Discord.Builders;
using Oxide.Ext.Discord.Cache;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Types;

public class GetPollAnswerVoters : IDiscordQueryString
{
	[JsonProperty("type")]
	public ReactionType Type { get; set; } = ReactionType.Normal;

	[JsonProperty("after")]
	public Snowflake? After { get; set; }

	[JsonProperty("limit")]
	public int? Limit { get; set; }

	public string ToQueryString()
	{
		QueryStringBuilder queryStringBuilder = default(QueryStringBuilder);
		if (Type != 0)
		{
			queryStringBuilder.Add("type", Singleton<StringCache<byte>>.Instance.ToString((byte)Type));
		}
		if (After.HasValue)
		{
			queryStringBuilder.Add("after", After.Value.ToString());
		}
		if (Limit.HasValue)
		{
			queryStringBuilder.Add("limit", Limit.Value.ToString());
		}
		return queryStringBuilder.ToString();
	}
}
