using System;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Helpers;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Plugins;

public static class TimestampPlaceholders
{
	internal static readonly PlaceholderDataKey TimestampKey = new PlaceholderDataKey("Timestamp");

	public static string Timestamp(long timestamp)
	{
		return DiscordFormatting.UnixTimestamp(timestamp);
	}

	public static string ShortTime(long timestamp)
	{
		return DiscordFormatting.UnixTimestamp(timestamp, TimestampStyles.ShortTime);
	}

	public static string Longtime(long timestamp)
	{
		return DiscordFormatting.UnixTimestamp(timestamp, TimestampStyles.LongTime);
	}

	public static string ShortDate(long timestamp)
	{
		return DiscordFormatting.UnixTimestamp(timestamp, TimestampStyles.ShortDate);
	}

	public static string LongDate(long timestamp)
	{
		return DiscordFormatting.UnixTimestamp(timestamp, TimestampStyles.LongDate);
	}

	public static string ShortDateTime(long timestamp)
	{
		return DiscordFormatting.UnixTimestamp(timestamp);
	}

	public static string LongDateTime(long timestamp)
	{
		return DiscordFormatting.UnixTimestamp(timestamp, TimestampStyles.LongDateTime);
	}

	public static string RelativeTime(long timestamp)
	{
		return DiscordFormatting.UnixTimestamp(timestamp, TimestampStyles.RelativeTime);
	}

	internal static void RegisterPlaceholders()
	{
		RegisterPlaceholders(DiscordExtensionCore.Instance, DefaultKeys.Timestamp, TimestampKey);
		RegisterPlaceholders(DiscordExtensionCore.Instance, DefaultKeys.TimestampNow);
	}

	public static void RegisterPlaceholders(Plugin plugin, TimestampKeys keys, PlaceholderDataKey dataKey)
	{
		DiscordPlaceholders instance = BaseDiscordLibrary<DiscordPlaceholders>.Instance;
		instance.RegisterPlaceholder<long, string>(plugin, keys.Time, dataKey, Timestamp);
		instance.RegisterPlaceholder<long, string>(plugin, keys.ShortTime, dataKey, ShortTime);
		instance.RegisterPlaceholder<long, string>(plugin, keys.LongTime, dataKey, Longtime);
		instance.RegisterPlaceholder<long, string>(plugin, keys.ShortDate, dataKey, ShortDate);
		instance.RegisterPlaceholder<long, string>(plugin, keys.LongDate, dataKey, LongDate);
		instance.RegisterPlaceholder<long, string>(plugin, keys.ShortDateTime, dataKey, ShortDateTime);
		instance.RegisterPlaceholder<long, string>(plugin, keys.LongDateTime, dataKey, LongDateTime);
		instance.RegisterPlaceholder<long, string>(plugin, keys.RelativeTime, dataKey, RelativeTime);
	}

	private static void RegisterPlaceholders(Plugin plugin, TimestampKeys keys)
	{
		DiscordPlaceholders instance = BaseDiscordLibrary<DiscordPlaceholders>.Instance;
		instance.RegisterPlaceholder(plugin, keys.Time, () => DiscordFormatting.UnixTimestamp(DateTimeOffset.UtcNow));
		instance.RegisterPlaceholder(plugin, keys.ShortTime, () => DiscordFormatting.UnixTimestamp(DateTimeOffset.UtcNow, TimestampStyles.ShortTime));
		instance.RegisterPlaceholder(plugin, keys.LongTime, () => DiscordFormatting.UnixTimestamp(DateTimeOffset.UtcNow, TimestampStyles.LongTime));
		instance.RegisterPlaceholder(plugin, keys.ShortDate, () => DiscordFormatting.UnixTimestamp(DateTimeOffset.UtcNow, TimestampStyles.ShortDate));
		instance.RegisterPlaceholder(plugin, keys.LongDate, () => DiscordFormatting.UnixTimestamp(DateTimeOffset.UtcNow, TimestampStyles.LongDate));
		instance.RegisterPlaceholder(plugin, keys.ShortDateTime, () => DiscordFormatting.UnixTimestamp(DateTimeOffset.UtcNow));
		instance.RegisterPlaceholder(plugin, keys.LongDateTime, () => DiscordFormatting.UnixTimestamp(DateTimeOffset.UtcNow, TimestampStyles.LongDateTime));
		instance.RegisterPlaceholder(plugin, keys.RelativeTime, () => DiscordFormatting.UnixTimestamp(DateTimeOffset.UtcNow, TimestampStyles.RelativeTime));
	}
}
