using System;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Libraries;

internal class TemplateVersionConverter : JsonConverter
{
	private const string Token = ".";

	public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
	{
		writer.WriteValue(value.ToString());
	}

	public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
	{
		string text = reader.Value.ToString();
		ReadOnlySpan<char> remaining = text;
		if (!remaining.TryParseNextString(".", out remaining, out var parsed) || !ushort.TryParse(parsed, out var result))
		{
			throw new JsonSerializationException(text + " is not a valid major template version for. Major: " + parsed.ToString() + " Path: " + reader.Path + ".");
		}
		if (!remaining.TryParseNextString(".", out remaining, out var parsed2) || !ushort.TryParse(parsed2, out var result2))
		{
			throw new JsonSerializationException(text + " is not a valid minor template version for. Minor: " + parsed2.ToString() + " Path: " + reader.Path + ".");
		}
		if (!remaining.TryParseNextString(".", out remaining, out var parsed3) || !ushort.TryParse(parsed3, out var result3))
		{
			throw new JsonSerializationException(text + " is not a valid revision template version for. Revision: " + parsed3.ToString() + " Path: " + reader.Path + ".");
		}
		return new TemplateVersion(result, result2, result3);
	}

	public override bool CanConvert(Type objectType)
	{
		return typeof(TemplateVersion) == objectType;
	}
}
