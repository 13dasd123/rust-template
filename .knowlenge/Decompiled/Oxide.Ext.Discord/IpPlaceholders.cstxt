using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Configuration;
using Oxide.Ext.Discord.Data;
using Oxide.Ext.Discord.Data.Ip;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Plugins;
using Oxide.Plugins;

public static class IpPlaceholders
{
	private static readonly Hash<string, string> FlagCache = new Hash<string, string>();

	public static string CountryName(string ip)
	{
		return BaseDataFile<DiscordIpData>.Instance.GetCountryName(ip);
	}

	public static string CountryCode(string ip)
	{
		return BaseDataFile<DiscordIpData>.Instance.GetCountryCode(ip);
	}

	public static string CountryEmoji(string ip)
	{
		string text = CountryCode(ip) ?? string.Empty;
		if (FlagCache.TryGetValue(text, out var value))
		{
			return value;
		}
		value = ((!string.IsNullOrEmpty(text)) ? (":flag_" + text + ":") : DiscordConfig.Instance.Ip.UnknownCountryEmoji);
		FlagCache[text] = value;
		return value;
	}

	internal static void RegisterPlaceholders()
	{
		RegisterPlaceholders(DiscordExtensionCore.Instance, DefaultKeys.Ip, new PlaceholderDataKey("ip"));
	}

	public static void RegisterPlaceholders(Plugin plugin, IpKeys keys, PlaceholderDataKey dataKey)
	{
		DiscordPlaceholders instance = BaseDiscordLibrary<DiscordPlaceholders>.Instance;
		instance.RegisterPlaceholder<string>(plugin, keys.Ip, dataKey);
		instance.RegisterPlaceholder<string, string>(plugin, keys.CountryName, dataKey, CountryName);
		instance.RegisterPlaceholder<string, string>(plugin, keys.CountryCode, dataKey, CountryCode);
		instance.RegisterPlaceholder<string, string>(plugin, keys.CountryEmoji, dataKey, CountryEmoji);
	}
}
