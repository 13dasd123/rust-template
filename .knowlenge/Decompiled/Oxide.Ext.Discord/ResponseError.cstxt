using System;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Oxide.Core.Libraries;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Configuration;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Rest;

public class ResponseError : BaseDiscordException
{
	public readonly Snowflake RequestId;

	public readonly RequestMethod RequestMethod;

	public readonly string Url;

	public readonly object RequestData;

	public readonly DateTimeOffset ErrorDate;

	private DiscordLogLevel _logLevel;

	private readonly DiscordClient _client;

	private readonly Bucket _bucket;

	private bool _showErrorMessage = true;

	public Exception Exception { get; private set; }

	public string ContentType { get; private set; }

	public string StringContents { get; private set; }

	public DiscordHttpStatusCode HttpStatusCode { get; private set; }

	public ResponseErrorMessage DiscordError { get; private set; }

	public string ResponseMessage { get; private set; }

	public string RateLimitMessage { get; private set; }

	public int? RateLimitCode { get; private set; }

	internal RequestErrorType ErrorType { get; private set; }

	internal ResponseError(BaseRequest request, RequestErrorType type, DiscordLogLevel log)
	{
		RequestId = request.Id;
		_client = request.Client;
		_bucket = request.Bucket;
		Url = request.Route;
		RequestMethod = request.Method;
		RequestData = request.Data;
		ErrorDate = DateTimeOffset.UtcNow;
		ErrorType = type;
		_logLevel = log;
	}

	internal async ValueTask<ResponseError> WithRequest(HttpRequestMessage request)
	{
		if (request.Content != null)
		{
			ContentType = request.Content.Headers.ContentType.ToString();
			StringContents = await request.Content.ReadAsStringAsync().ConfigureAwait(continueOnCapturedContext: false);
		}
		else
		{
			ContentType = "No Content";
			StringContents = "No Content";
		}
		return this;
	}

	internal ResponseError WithException(Exception ex)
	{
		Exception = ex;
		return this;
	}

	public void SuppressErrorMessage()
	{
		_showErrorMessage = false;
	}

	internal void SetResponse(DiscordHttpStatusCode code, string content)
	{
		HttpStatusCode = code;
		if (content.Length == 0)
		{
			return;
		}
		ResponseMessage = content;
		if (!string.IsNullOrEmpty(ResponseMessage) && ResponseMessage[0] == '{')
		{
			DiscordError = JsonConvert.DeserializeObject<ResponseErrorMessage>(content, _client.JsonSettings);
			if (DiscordError != null)
			{
				ErrorType = RequestErrorType.ApiError;
				_logLevel = DiscordLogLevel.Error;
			}
		}
	}

	internal void SetRateLimitResponse(string message, int? code)
	{
		RateLimitMessage = message;
		RateLimitCode = code;
	}

	internal void LogError()
	{
		if (!_client.Logger.IsLogging(_logLevel) || (DiscordError != null && DiscordConfig.Instance.Logging.HideDiscordErrorCodes.Contains(DiscordError.Code)))
		{
			return;
		}
		switch (ErrorType)
		{
		case RequestErrorType.Internal:
			_client.Logger.Error("Rest Request Exception (Internal Error) Plugin: {0} ID: {1} Request URL: [{2}] {3}", _client.PluginName, RequestId, RequestMethod, Url);
			break;
		case RequestErrorType.RateLimit:
			_client.Logger.Warning("Rest Request Exception (Rate Limit) Plugin: {0} ID: {1} Request URL: [{2}] {3} Content-Type: {4} Remaining: {5} Limit: {6} Reset At: {7} Current Time: {8} Code: {9} Message: {10}", _client.PluginName, RequestId, RequestMethod, Url, ContentType, _bucket.Remaining, _bucket.Limit, _bucket.ResetAt, ErrorDate, RateLimitCode, RateLimitMessage);
			break;
		case RequestErrorType.ApiError:
			if (_showErrorMessage)
			{
				_client.Logger.Error("Rest Request Exception (Discord API Error). Plugin: {0} ID: {1} Request URL: [{2}] {3} Content-Type: {4} Http Response Code: {5} Discord Error Code: {6} Discord Error: {7}\nDiscord Errors: {8}Request Body:\n{9}", _client.PluginName, RequestId, RequestMethod, Url, ContentType, HttpStatusCode, DiscordError.Code, DiscordError.Message, DiscordError.Errors, StringContents ?? "No Contents");
			}
			break;
		case RequestErrorType.GenericWeb:
			_client.Logger.Error("Rest Request Exception (Web Error). Plugin: {0} ID: {1} Request URL: [{2}] {3} Content-Type: {4} Http Response Code: {5} Message: {6}", _client.PluginName, RequestId, RequestMethod, Url, ContentType, HttpStatusCode, ResponseMessage);
			break;
		case RequestErrorType.Serialization:
			_client.Logger.Exception("Rest Request Exception (JSON Serialization). Plugin: {0} ID: {1} Method: {2} URL: {3} Data Type: {4}", _client.PluginName, RequestId, RequestMethod, Url, RequestData?.GetType().GetRealTypeName() ?? "None", Exception);
			break;
		case RequestErrorType.Generic:
			_client.Logger.Exception("Rest Request Exception (Generic Error). Plugin: {0} ID: {1} Method: {2} URL: {3} Data Type: {4}", _client.PluginName, RequestId, RequestMethod, Url, RequestData?.GetType().GetRealTypeName() ?? "None", Exception);
			break;
		}
	}
}
