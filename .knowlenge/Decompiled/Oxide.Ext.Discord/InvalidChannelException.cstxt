using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;

public class InvalidChannelException : BaseDiscordException
{
	private InvalidChannelException(string message)
		: base(message)
	{
	}

	internal static void ThrowIfInvalidName(string name, bool allowNullOrEmpty)
	{
		if (!allowNullOrEmpty && string.IsNullOrEmpty(name))
		{
			throw new InvalidChannelException("DiscordChannel.Name cannot be less than 1 character");
		}
		if (name.Length > 100)
		{
			throw new InvalidChannelException(string.Format("{0}.{1} cannot be more than {2} characters", "DiscordChannel", "Name", 100));
		}
	}

	internal static void ThrowIfInvalidTopic(string topic, ChannelType type, bool allowNullOrEmpty)
	{
		if (string.IsNullOrEmpty(topic))
		{
			if (!allowNullOrEmpty)
			{
				throw new InvalidChannelException("DiscordChannel.Topic cannot be less than 1 character");
			}
		}
		else if (type == ChannelType.GuildForum || type == ChannelType.GuildMedia)
		{
			if (topic.Length > 4096)
			{
				throw new InvalidChannelException(string.Format("{0}.{1} cannot be more than {2} characters for Guild Forum or Guild Media Channels", "DiscordChannel", "Topic", 4096));
			}
		}
		else if (topic.Length > 1024)
		{
			throw new InvalidChannelException(string.Format("{0}.{1} cannot be more than {2} characters", "DiscordChannel", "Topic", 1024));
		}
	}

	internal static void ThrowIfInvalidRateLimitPerUser(int? rateLimitPerUser)
	{
		int? num = rateLimitPerUser;
		if (num.HasValue)
		{
			int valueOrDefault = num.GetValueOrDefault();
			if (valueOrDefault < 0)
			{
				throw new InvalidChannelException(string.Format("{0}.{1} cannot be less than {2}", "DiscordChannel", "RateLimitPerUser", 0));
			}
			if (valueOrDefault > 21600)
			{
				throw new InvalidChannelException(string.Format("{0}.{1} cannot be more than {2}", "DiscordChannel", "RateLimitPerUser", 21600));
			}
		}
	}

	internal static void ThrowIfInvalidBitRate(int? bitRate)
	{
		int? num = bitRate;
		if (num.HasValue)
		{
			int valueOrDefault = num.GetValueOrDefault();
			if (valueOrDefault < 8000)
			{
				throw new InvalidChannelException(string.Format("{0}.{1} cannot be less than {2}", "DiscordChannel", "Bitrate", 8000));
			}
			if (valueOrDefault > 128000)
			{
				throw new InvalidChannelException(string.Format("{0}.{1} cannot be more than {2}", "DiscordChannel", "Bitrate", 128000));
			}
		}
	}

	internal static void ThrowIfInvalidUserLimit(int? userLimit)
	{
		int? num = userLimit;
		if (num.HasValue)
		{
			int valueOrDefault = num.GetValueOrDefault();
			if (valueOrDefault < 0)
			{
				throw new InvalidChannelException(string.Format("{0}.{1} cannot be less than {2}", "DiscordChannel", "UserLimit", 0));
			}
			if (valueOrDefault > 99)
			{
				throw new InvalidChannelException(string.Format("{0}.{1} cannot be more than {2}", "DiscordChannel", "UserLimit", 99));
			}
		}
	}

	internal static void ThrowIfInvalidParentId(Snowflake? parentId)
	{
		if (parentId.HasValue && !parentId.Value.IsValid())
		{
			throw new InvalidChannelException("DiscordChannel.ParentId is not a valid snowflake");
		}
	}

	internal static void ThrowIfNotThread(DiscordChannel channel, string message)
	{
		if (channel == null || !channel.IsThreadChannel())
		{
			throw new InvalidChannelException(message);
		}
	}

	internal static void ThrowIfNotGuildChannel(DiscordChannel channel, string message)
	{
		if (channel == null || !channel.IsDmChannel())
		{
			throw new InvalidChannelException(message);
		}
	}

	internal static void ThrowIfChannelToSelf(Snowflake userId, DiscordClient client)
	{
		if (userId == client.Bot.BotUser.Id)
		{
			throw new InvalidChannelException("Tried to create a direct message channel to yourself which is not allowed.");
		}
	}
}
