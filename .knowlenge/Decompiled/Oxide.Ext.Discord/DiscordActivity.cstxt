using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Helpers;
using Oxide.Ext.Discord.Json;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class DiscordActivity
{
	[JsonProperty("name")]
	public string Name { get; set; }

	[JsonProperty("type")]
	public ActivityType Type { get; set; }

	[JsonProperty("url")]
	public string Url { get; set; }

	[JsonConverter(typeof(UnixDateTimeConverter))]
	[JsonProperty("created_at")]
	public DateTimeOffset CreatedAt { get; set; }

	[JsonProperty("timestamps")]
	public ActivityTimestamps Timestamps { get; set; }

	[JsonProperty("application_id")]
	public Snowflake? ApplicationId { get; set; }

	[JsonProperty("details")]
	public string Details { get; set; }

	[JsonProperty("state")]
	public string State { get; set; }

	[JsonProperty("emoji")]
	public DiscordEmoji Emoji { get; set; }

	[JsonProperty("party")]
	public ActivityParty Party { get; set; }

	[JsonProperty("assets")]
	public ActivityAssets Assets { get; set; }

	[JsonProperty("secrets")]
	public ActivitySecrets Secrets { get; set; }

	[JsonProperty("instance")]
	public bool? Instance { get; set; }

	[JsonProperty("flags")]
	public ActivityFlags? Flags { get; set; }

	[JsonProperty("buttons")]
	public List<ActivityButton> Buttons { get; set; }

	public string GetLargeImageUrl => ApplicationId.HasValue ? DiscordCdn.GetApplicationAssetUrl(ApplicationId.Value, Assets.LargeImage) : null;

	public string GetSmallImageUrl => ApplicationId.HasValue ? DiscordCdn.GetApplicationAssetUrl(ApplicationId.Value, Assets.SmallImage) : null;
}
