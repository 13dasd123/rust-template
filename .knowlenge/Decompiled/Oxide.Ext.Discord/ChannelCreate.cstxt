using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Interfaces;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class ChannelCreate : IDiscordValidation
{
	[JsonProperty("name")]
	public string Name { get; set; }

	[JsonProperty("type")]
	public ChannelType Type { get; set; }

	[JsonProperty("topic")]
	public string Topic { get; set; }

	[JsonProperty("bitrate")]
	public int? Bitrate { get; set; }

	[JsonProperty("user_limit")]
	public int? UserLimit { get; set; }

	[JsonProperty("rate_limit_per_user")]
	public int? RateLimitPerUser { get; set; }

	[JsonProperty("position")]
	public int? Position { get; set; }

	[JsonProperty("permission_overwrites")]
	public List<Overwrite> PermissionOverwrites { get; set; }

	[JsonProperty("parent_id")]
	public Snowflake? ParentId { get; set; }

	[JsonProperty("nsfw")]
	public bool? Nsfw { get; set; }

	[JsonProperty("default_auto_archive_duration")]
	public int DefaultAutoArchiveDuration { get; set; }

	[JsonProperty("default_reaction_emoji")]
	public DefaultReaction DefaultReactionEmoji { get; set; }

	[JsonProperty("available_tags")]
	public List<ForumTag> AvailableTags { get; set; }

	[JsonProperty("default_sort_order")]
	public SortOrderType? DefaultSortOrder { get; set; }

	[JsonProperty("default_forum_layout")]
	public ForumLayoutTypes? DefaultForumLayout { get; set; }

	[JsonProperty("default_thread_rate_limit_per_user")]
	public int? DefaultThreadRateLimitPerUser { get; set; }

	public void Validate()
	{
		InvalidChannelException.ThrowIfInvalidName(Name, allowNullOrEmpty: false);
		InvalidChannelException.ThrowIfInvalidTopic(Topic, Type, allowNullOrEmpty: true);
		InvalidChannelException.ThrowIfInvalidUserLimit(UserLimit);
		InvalidChannelException.ThrowIfInvalidRateLimitPerUser(RateLimitPerUser);
		InvalidChannelException.ThrowIfInvalidBitRate(Bitrate);
		InvalidChannelException.ThrowIfInvalidParentId(ParentId);
	}
}
