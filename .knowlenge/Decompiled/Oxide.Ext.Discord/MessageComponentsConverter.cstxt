using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Oxide.Ext.Discord.Entities;

public class MessageComponentsConverter : JsonConverter
{
	public override bool CanWrite => false;

	public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
	{
		throw new NotSupportedException();
	}

	public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
	{
		JArray jArray = JArray.Load(reader);
		List<BaseComponent> list = existingValue as List<BaseComponent>;
		if (list == null)
		{
			list = new List<BaseComponent>();
		}
		foreach (JToken item in jArray)
		{
			switch ((MessageComponentType)Enum.Parse(typeof(MessageComponentType), item["type"].ToString()))
			{
			case MessageComponentType.Button:
				list.Add(item.ToObject<ButtonComponent>(serializer));
				break;
			case MessageComponentType.StringSelect:
				list.Add(item.ToObject<StringSelectComponent>(serializer));
				break;
			case MessageComponentType.UserSelect:
				list.Add(item.ToObject<UserSelectComponent>(serializer));
				break;
			case MessageComponentType.RoleSelect:
				list.Add(item.ToObject<RoleSelectComponent>(serializer));
				break;
			case MessageComponentType.MentionableSelect:
				list.Add(item.ToObject<MentionableSelectComponent>(serializer));
				break;
			case MessageComponentType.ChannelSelect:
				list.Add(item.ToObject<ChannelSelectComponent>(serializer));
				break;
			case MessageComponentType.InputText:
				list.Add(item.ToObject<InputTextComponent>(serializer));
				break;
			}
		}
		return list;
	}

	public override bool CanConvert(Type objectType)
	{
		return objectType == typeof(List<BaseComponent>);
	}
}
