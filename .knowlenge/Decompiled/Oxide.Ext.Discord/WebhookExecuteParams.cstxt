using System;
using Oxide.Ext.Discord.Builders;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Interfaces;

public class WebhookExecuteParams : IDiscordQueryString
{
	internal static readonly WebhookExecuteParams Default = new WebhookExecuteParams();

	internal static readonly WebhookExecuteParams DefaultWait = new WebhookExecuteParams
	{
		Wait = true
	};

	public WebhookSendType SendType { get; set; } = WebhookSendType.Discord;

	public bool Wait { get; internal set; }

	public Snowflake? ThreadId { get; set; }

	public string ToQueryString()
	{
		QueryStringBuilder queryStringBuilder = default(QueryStringBuilder);
		if (Wait)
		{
			queryStringBuilder.Add("wait", "true");
		}
		if (ThreadId.HasValue)
		{
			queryStringBuilder.Add("thread_id", ThreadId.Value.ToString());
		}
		return queryStringBuilder.ToString();
	}

	public string GetWebhookFormat()
	{
		WebhookSendType sendType = SendType;
		if (1 == 0)
		{
		}
		string result = sendType switch
		{
			WebhookSendType.Discord => string.Empty, 
			WebhookSendType.Slack => "/slack", 
			WebhookSendType.Github => "/github", 
			_ => throw new ArgumentOutOfRangeException("SendType", SendType, null), 
		};
		if (1 == 0)
		{
		}
		return result;
	}
}
