using System;
using Oxide.Ext.Discord;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Types;

internal sealed class ArrayPool<TPooled> : Singleton<ArrayPool<TPooled>>
{
	private class ArrayPoolInternal
	{
		private const int MaxArrays = 64;

		private ushort _index;

		private readonly TPooled[][] _pool = new TPooled[64][];

		private readonly object _lock = new object();

		private readonly int _arraySize;

		public ArrayPoolInternal(int arraySize)
		{
			_arraySize = arraySize;
		}

		public TPooled[] Get()
		{
			TPooled[] array = null;
			lock (_lock)
			{
				if (_index < _pool.Length)
				{
					array = _pool[_index];
					_pool[_index] = null;
					_index++;
				}
				else
				{
					DiscordExtension.GlobalLogger.Warning("Pool {0} is leaking entities!!! {1}/{2}", GetType(), _index, _pool.Length);
				}
			}
			return array ?? new TPooled[_arraySize];
		}

		public void Free(ref TPooled[] item)
		{
			if (item == null)
			{
				return;
			}
			for (int i = 0; i < item.Length; i++)
			{
				item[i] = default(TPooled);
			}
			lock (_lock)
			{
				if (_index != 0)
				{
					_pool[--_index] = item;
				}
			}
			item = null;
		}
	}

	private const int MaxArraySize = 64;

	private readonly ArrayPoolInternal[] _pool = new ArrayPoolInternal[65];

	private ArrayPool()
	{
	}

	public TPooled[] Get(int size)
	{
		if (size < 0)
		{
			throw new ArgumentOutOfRangeException("size", "Cannot be less than 0");
		}
		if (size == 0)
		{
			return Array.Empty<TPooled>();
		}
		if (size > 64)
		{
			throw new ArgumentOutOfRangeException("size", $"Cannot be greater than {64}");
		}
		ArrayPoolInternal arrayPoolInternal = _pool[size];
		if (arrayPoolInternal == null)
		{
			arrayPoolInternal = new ArrayPoolInternal(size);
			_pool[size] = arrayPoolInternal;
		}
		return arrayPoolInternal.Get();
	}

	public void Free(ref TPooled[] array)
	{
		int num = array.Length;
		if (num != 0)
		{
			if (num > 64)
			{
				throw new ArgumentOutOfRangeException("array", $"Array length cannot be greater than {64}");
			}
			_pool[num]?.Free(ref array);
		}
	}
}
