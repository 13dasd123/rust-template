using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Rest;
using Oxide.Ext.Discord.Types;

public abstract class BaseClient
{
	internal readonly ILogger Logger;

	protected readonly List<DiscordClient> _clients = new List<DiscordClient>();

	public readonly IReadOnlyList<DiscordClient> Clients;

	public RestHandler Rest { get; protected set; }

	public bool Initialized { get; protected set; }

	protected BaseClient()
	{
		Logger = Singleton<DiscordLoggerFactory>.Instance.CreateExtensionLogger();
		Clients = new ReadOnlyCollection<DiscordClient>(_clients);
		Initialized = true;
	}

	internal abstract void HandleConnect();

	internal abstract void HandleShutdown();

	internal virtual void HandleAlreadyConnected(DiscordClient client)
	{
	}

	public string GetClientPluginList()
	{
		ValueStringBuilder valueStringBuilder = default(ValueStringBuilder);
		for (int i = 0; i < _clients.Count; i++)
		{
			DiscordClient discordClient = _clients[i];
			if (i != 0)
			{
				valueStringBuilder.Append(",");
			}
			valueStringBuilder.Append('[');
			valueStringBuilder.Append(discordClient.PluginName);
			valueStringBuilder.Append(']');
		}
		return valueStringBuilder.ToString();
	}

	public virtual void AddClient(DiscordClient client)
	{
		_clients.Add(client);
		Logger.Debug("BaseClient.AddClient Add client for plugin {0}", client.Plugin.Title);
		if (_clients.Count == 1)
		{
			Logger.Debug("BaseClient.AddClient Clients.Count == 1 connecting");
			HandleConnect();
		}
		else
		{
			HandleAlreadyConnected(client);
		}
	}

	public virtual bool RemoveClient(DiscordClient client)
	{
		Logger.Debug("BaseClient.RemoveClient Removing Client {0}", client.PluginName);
		_clients.Remove(client);
		Rest.OnClientClosed(client);
		if (_clients.Count == 0)
		{
			HandleShutdown();
			return true;
		}
		return false;
	}

	internal void UpdateLogLevel(DiscordLogLevel level)
	{
		Logger.UpdateLogLevel(level);
		Logger.Debug("BaseClient.UpdateLogLevel Updating log level from: {0} to: {1}", Logger.LogLevel, level);
	}

	internal void ShutdownRest()
	{
		try
		{
			Rest?.Shutdown();
		}
		catch (Exception exception)
		{
			Logger.Exception("WebhookClient.ShutdownRest An error occured shutting down the bot rest client.", exception);
		}
		finally
		{
			Rest = null;
		}
	}
}
