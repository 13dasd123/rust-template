using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Helpers;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Json;
using Oxide.Plugins;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class DiscordGuild : ISnowflakeEntity
{
	[JsonProperty("id")]
	public Snowflake Id { get; set; }

	[JsonProperty("name")]
	public string Name { get; set; }

	[JsonProperty("icon")]
	public string Icon { get; set; }

	[JsonProperty("icon_Hash")]
	public string IconHash { get; set; }

	[JsonProperty("splash")]
	public string Splash { get; set; }

	[JsonProperty("discovery_splash")]
	public string DiscoverySplash { get; set; }

	[JsonProperty("owner")]
	public bool? Owner { get; set; }

	[JsonProperty("owner_id")]
	public Snowflake OwnerId { get; set; }

	[JsonProperty("permissions")]
	public string Permissions { get; set; }

	[JsonProperty("afk_channel_id")]
	public Snowflake? AfkChannelId { get; set; }

	[JsonProperty("afk_timeout")]
	public int? AfkTimeout { get; set; }

	[JsonProperty("widget_enabled")]
	public bool? WidgetEnabled { get; set; }

	[JsonProperty("widget_channel_id")]
	public Snowflake? WidgetChannelId { get; set; }

	[JsonProperty("verification_level")]
	public GuildVerificationLevel? VerificationLevel { get; set; }

	[JsonProperty("default_message_notifications")]
	public DefaultNotificationLevel? DefaultMessageNotifications { get; set; }

	[JsonProperty("explicit_content_filter")]
	public ExplicitContentFilterLevel? ExplicitContentFilter { get; set; }

	[JsonConverter(typeof(HashListConverter<DiscordRole>))]
	[JsonProperty("roles")]
	public Hash<Snowflake, DiscordRole> Roles { get; set; }

	[JsonConverter(typeof(HashListConverter<DiscordEmoji>))]
	[JsonProperty("emojis")]
	public Hash<Snowflake, DiscordEmoji> Emojis { get; set; }

	[JsonProperty("features")]
	public List<GuildFeatures> Features { get; set; }

	[JsonProperty("mfa_level")]
	public GuildMfaLevel? MfaLevel { get; set; }

	[JsonProperty("application_id")]
	public Snowflake? ApplicationId { get; set; }

	[JsonProperty("system_channel_id")]
	public Snowflake? SystemChannelId { get; set; }

	[JsonProperty("system_channel_flags")]
	public SystemChannelFlags SystemChannelFlags { get; set; }

	[JsonProperty("rules_channel_id")]
	public Snowflake? RulesChannelId { get; set; }

	[JsonProperty("joined_at")]
	public DateTime? JoinedAt { get; set; }

	[JsonProperty("large")]
	public bool? Large { get; set; }

	[JsonProperty("unavailable")]
	public bool? Unavailable { get; set; }

	[JsonProperty("member_count")]
	public int? MemberCount { get; set; }

	[JsonConverter(typeof(HashListConverter<VoiceState>))]
	[JsonProperty("voice_states")]
	public Hash<Snowflake, VoiceState> VoiceStates { get; set; }

	[JsonConverter(typeof(HashListConverter<GuildMember>))]
	[JsonProperty("members")]
	public Hash<Snowflake, GuildMember> Members { get; set; }

	[JsonConverter(typeof(HashListConverter<DiscordChannel>))]
	[JsonProperty("channels")]
	public Hash<Snowflake, DiscordChannel> Channels { get; set; }

	[JsonConverter(typeof(HashListConverter<DiscordChannel>))]
	[JsonProperty("threads")]
	public Hash<Snowflake, DiscordChannel> Threads { get; set; }

	[JsonProperty("presences")]
	public List<PresenceUpdatedEvent> Presences { get; set; }

	[JsonProperty("max_presences")]
	public int? MaxPresences { get; set; }

	[JsonProperty("max_members")]
	public int? MaxMembers { get; set; }

	[JsonProperty("vanity_url_code")]
	public string VanityUrlCode { get; set; }

	[JsonProperty("description")]
	public string Description { get; set; }

	[JsonProperty("banner")]
	public string Banner { get; set; }

	[JsonProperty("premium_tier")]
	public GuildPremiumTier? PremiumTier { get; set; }

	[JsonProperty("premium_subscription_count")]
	public int? PremiumSubscriptionCount { get; set; }

	[JsonProperty("preferred_locale")]
	public string PreferredLocale { get; set; }

	[JsonProperty("public_updates_channel_id")]
	public Snowflake? PublicUpdatesChannelId { get; set; }

	[JsonProperty("max_stage_video_channel_users")]
	public int? MaxStageVideoChannelUsers { get; set; }

	[JsonProperty("max_video_channel_users")]
	public int? MaxVideoChannelUsers { get; set; }

	[JsonProperty("approximate_member_count")]
	public int? ApproximateMemberCount { get; set; }

	[JsonProperty("approximate_presence_count")]
	public int? ApproximatePresenceCount { get; set; }

	[JsonProperty("welcome_screen")]
	public GuildWelcomeScreen WelcomeScreen { get; set; }

	[JsonProperty("nsfw_level")]
	public GuildNsfwLevel NsfwLevel { get; set; }

	[JsonConverter(typeof(HashListConverter<StageInstance>))]
	[JsonProperty("stage_instances")]
	public Hash<Snowflake, StageInstance> StageInstances { get; set; }

	[JsonConverter(typeof(HashListConverter<DiscordSticker>))]
	[JsonProperty("stickers")]
	public Hash<Snowflake, DiscordSticker> Stickers { get; set; }

	[JsonConverter(typeof(HashListConverter<GuildScheduledEvent>))]
	[JsonProperty("guild_scheduled_events")]
	public Hash<Snowflake, GuildScheduledEvent> ScheduledEvents { get; set; }

	[JsonProperty("premium_progress_bar_enabled")]
	public bool PremiumProgressBarEnabled { get; set; }

	[JsonProperty("safety_alerts_channel_id")]
	public Snowflake? SafetyAlertsChannelId { get; set; }

	public bool HasLoadedAllMembers { get; internal set; }

	public Hash<Snowflake, GuildMember> LeftMembers { get; } = new Hash<Snowflake, GuildMember>();

	public bool IsAvailable => Unavailable.HasValue && !Unavailable.Value;

	public string IconUrl => DiscordCdn.GetGuildIconUrl(Id, Icon);

	public string SplashUrl => DiscordCdn.GetGuildSplashUrl(Id, Splash);

	public string DiscoverySplashUrl => DiscordCdn.GetGuildDiscoverySplashUrl(Id, DiscoverySplash);

	public string BannerUrl => DiscordCdn.GetGuildBannerUrl(Id, Banner);

	public DiscordRole EveryoneRole => Roles[Id];

	public DiscordChannel GetChannel(string name)
	{
		if (string.IsNullOrEmpty(name))
		{
			throw new ArgumentNullException("name");
		}
		foreach (DiscordChannel value in Channels.Values)
		{
			if (value.Name.Equals(name, StringComparison.OrdinalIgnoreCase))
			{
				return value;
			}
		}
		return null;
	}

	public DiscordChannel GetChannel(Snowflake id)
	{
		return Channels[id] ?? Threads[id];
	}

	public DiscordChannel GetParentChannel(DiscordChannel channel)
	{
		if (!channel.ParentId.HasValue || !channel.ParentId.Value.IsValid())
		{
			return null;
		}
		return Channels[channel.ParentId.Value];
	}

	public DiscordRole GetRole(string name)
	{
		if (string.IsNullOrEmpty(name))
		{
			throw new ArgumentNullException("name");
		}
		foreach (DiscordRole value in Roles.Values)
		{
			if (value.Name.Equals(name, StringComparison.OrdinalIgnoreCase))
			{
				return value;
			}
		}
		return null;
	}

	public DiscordRole GetBoosterRole()
	{
		foreach (DiscordRole value in Roles.Values)
		{
			if (value.IsBoosterRole())
			{
				return value;
			}
		}
		return null;
	}

	public GuildMember GetMember(string userName)
	{
		if (string.IsNullOrEmpty(userName))
		{
			throw new ArgumentNullException("userName");
		}
		foreach (GuildMember value in Members.Values)
		{
			if (value.User.Username.Equals(userName, StringComparison.OrdinalIgnoreCase))
			{
				return value;
			}
		}
		return null;
	}

	public GuildMember GetMember(Snowflake userId, bool includeLeft = false)
	{
		return Members[userId] ?? (includeLeft ? LeftMembers[userId] : null);
	}

	public DiscordEmoji GetEmoji(string name)
	{
		if (string.IsNullOrEmpty(name))
		{
			throw new ArgumentNullException("name");
		}
		foreach (DiscordEmoji value in Emojis.Values)
		{
			if (value.Name.Equals(name, StringComparison.OrdinalIgnoreCase))
			{
				return value;
			}
		}
		return null;
	}

	public PermissionFlags GetUserPermissions(Snowflake userId)
	{
		GuildMember guildMember = Members[userId];
		if (guildMember == null)
		{
			return PermissionFlags.None;
		}
		PermissionFlags permissionFlags = EveryoneRole.Permissions;
		for (int i = 0; i < guildMember.Roles.Count; i++)
		{
			DiscordRole discordRole = Roles[guildMember.Roles[i]];
			if (discordRole != null)
			{
				permissionFlags |= discordRole.Permissions;
			}
		}
		if ((permissionFlags & PermissionFlags.Administrator) == PermissionFlags.Administrator)
		{
			return PermissionFlags.All;
		}
		return permissionFlags;
	}

	public static IPromise<DiscordGuild> Create(DiscordClient client, GuildCreate create)
	{
		if (create == null)
		{
			throw new ArgumentNullException("create");
		}
		return client.Bot.Rest.Post<DiscordGuild>(client, "guilds", create, null);
	}

	public static IPromise<DiscordGuild> Get(DiscordClient client, Snowflake guildId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(guildId);
		return client.Bot.Rest.Get<DiscordGuild>(client, $"guilds/{guildId}", null);
	}

	public static IPromise<GuildPreview> GetGuildPreview(DiscordClient client, Snowflake guildId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(guildId);
		return client.Bot.Rest.Get<GuildPreview>(client, $"guilds/{guildId}/preview", null);
	}

	public IPromise<DiscordGuild> Edit(DiscordClient client, GuildUpdate update)
	{
		return client.Bot.Rest.Patch<DiscordGuild>(client, $"guilds/{Id}", update, null);
	}

	public IPromise Delete(DiscordClient client)
	{
		return client.Bot.Rest.Delete(client, $"guilds/{Id}", null);
	}

	public IPromise<List<DiscordChannel>> GetChannels(DiscordClient client)
	{
		return client.Bot.Rest.Get<List<DiscordChannel>>(client, $"guilds/{Id}/channels", null);
	}

	public IPromise<DiscordChannel> CreateChannel(DiscordClient client, ChannelCreate channel)
	{
		return client.Bot.Rest.Post<DiscordChannel>(client, $"guilds/{Id}/channels", channel, null);
	}

	public IPromise<List<GuildChannelPosition>> EditChannelPositions(DiscordClient client, List<GuildChannelPosition> positions)
	{
		return client.Bot.Rest.Patch<List<GuildChannelPosition>>(client, $"guilds/{Id}/channels", positions, null);
	}

	public IPromise<ThreadList> ListActiveThreads(DiscordClient client)
	{
		return client.Bot.Rest.Get<ThreadList>(client, $"guilds/{Id}/threads/active", null);
	}

	public IPromise<GuildMember> GetMember(DiscordClient client, Snowflake userId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(userId);
		return client.Bot.Rest.Get<GuildMember>(client, $"guilds/{Id}/members/{userId}", null).Then(delegate(GuildMember member)
		{
			Members.TryAdd(member.Id, member);
		});
	}

	public IPromise<List<GuildMember>> ListMembers(DiscordClient client, GuildListMembers list = null)
	{
		return client.Bot.Rest.Get<List<GuildMember>>(client, $"guilds/{Id}/members{list?.ToQueryString()}", null);
	}

	public IPromise<List<GuildMember>> SearchMembers(DiscordClient client, GuildSearchMembers search)
	{
		if (search == null)
		{
			throw new ArgumentNullException("search");
		}
		return client.Bot.Rest.Get<List<GuildMember>>(client, $"guilds/{Id}/members/search{search.ToQueryString()}", null);
	}

	public IPromise<GuildMember> AddMember(DiscordClient client, Snowflake userId, GuildMemberAdd member)
	{
		InvalidSnowflakeException.ThrowIfInvalid(userId);
		return client.Bot.Rest.Put<GuildMember>(client, $"guilds/{Id}/members/{userId}", member, null);
	}

	public IPromise<GuildMember> EditMember(DiscordClient client, Snowflake userId, GuildMemberUpdate update)
	{
		if (update == null)
		{
			throw new ArgumentNullException("update");
		}
		InvalidSnowflakeException.ThrowIfInvalid(userId);
		return client.Bot.Rest.Patch<GuildMember>(client, $"guilds/{Id}/members/{userId}", update, null);
	}

	public IPromise<GuildMember> EditMemberNick(DiscordClient client, Snowflake userId, string nick)
	{
		GuildMemberUpdate update = new GuildMemberUpdate
		{
			Nick = nick
		};
		return EditMember(client, userId, update);
	}

	public IPromise<GuildMember> EditCurrentMember(DiscordClient client, string nick)
	{
		InvalidGuildMemberException.ThrowIfInvalidNickname(nick);
		Dictionary<string, object> data = new Dictionary<string, object> { ["nick"] = nick };
		return client.Bot.Rest.Patch<GuildMember>(client, $"guilds/{Id}/members/@me", data, null);
	}

	public IPromise AddMemberRole(DiscordClient client, DiscordUser user, DiscordRole role)
	{
		return AddMemberRole(client, user.Id, role.Id);
	}

	public IPromise AddMemberRole(DiscordClient client, Snowflake userId, Snowflake roleId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(userId);
		InvalidSnowflakeException.ThrowIfInvalid(roleId);
		return client.Bot.Rest.Put(client, $"guilds/{Id}/members/{userId}/roles/{roleId}", null, null);
	}

	public IPromise RemoveMemberRole(DiscordClient client, DiscordUser user, DiscordRole role)
	{
		return RemoveMemberRole(client, user.Id, role.Id);
	}

	public IPromise RemoveMemberRole(DiscordClient client, Snowflake userId, Snowflake roleId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(userId);
		InvalidSnowflakeException.ThrowIfInvalid(roleId);
		return client.Bot.Rest.Delete(client, $"guilds/{Id}/members/{userId}/roles/{roleId}", null);
	}

	public IPromise RemoveMember(DiscordClient client, GuildMember member)
	{
		return RemoveMember(client, member.User.Id);
	}

	public IPromise RemoveMember(DiscordClient client, Snowflake userId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(userId);
		return client.Bot.Rest.Delete(client, $"guilds/{Id}/members/{userId}", null);
	}

	public IPromise<List<GuildBan>> GetBans(DiscordClient client, GuildBansRequest request = null)
	{
		return client.Bot.Rest.Get<List<GuildBan>>(client, $"guilds/{Id}/bans{request?.ToQueryString()}", null);
	}

	public IPromise<GuildBan> GetBan(DiscordClient client, Snowflake userId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(userId);
		return client.Bot.Rest.Get<GuildBan>(client, $"guilds/{Id}/bans/{userId}", null);
	}

	public IPromise CreateBan(DiscordClient client, GuildMember member, GuildBanCreate ban)
	{
		return CreateBan(client, member.User.Id, ban);
	}

	public IPromise CreateBan(DiscordClient client, Snowflake userId, GuildBanCreate ban)
	{
		if (ban == null)
		{
			throw new ArgumentNullException("ban");
		}
		InvalidSnowflakeException.ThrowIfInvalid(userId);
		return client.Bot.Rest.Put(client, $"guilds/{Id}/bans/{userId}", ban, null);
	}

	public IPromise RemoveBan(DiscordClient client, Snowflake userId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(userId);
		return client.Bot.Rest.Delete(client, $"guilds/{Id}/bans/{userId}", null);
	}

	public IPromise<List<DiscordRole>> GetRoles(DiscordClient client)
	{
		return client.Bot.Rest.Get<List<DiscordRole>>(client, $"guilds/{Id}/roles", null);
	}

	public IPromise<DiscordRole> CreateRole(DiscordClient client, DiscordRole role)
	{
		if (role == null)
		{
			throw new ArgumentNullException("role");
		}
		return client.Bot.Rest.Post<DiscordRole>(client, $"guilds/{Id}/roles", role, null);
	}

	public IPromise<List<DiscordRole>> EditRolePositions(DiscordClient client, List<GuildRolePosition> positions)
	{
		if (positions == null)
		{
			throw new ArgumentNullException("positions");
		}
		return client.Bot.Rest.Patch<List<DiscordRole>>(client, $"guilds/{Id}/roles", positions, null);
	}

	public IPromise<DiscordRole> EditRole(DiscordClient client, DiscordRole role)
	{
		return EditRole(client, role.Id, role);
	}

	public IPromise<DiscordRole> EditRole(DiscordClient client, Snowflake roleId, DiscordRole role)
	{
		if (role == null)
		{
			throw new ArgumentNullException("role");
		}
		InvalidSnowflakeException.ThrowIfInvalid(roleId);
		return client.Bot.Rest.Patch<DiscordRole>(client, $"guilds/{Id}/roles/{roleId}", role, null);
	}

	public IPromise EditMfaLevel(DiscordClient client, GuildUpdateMfaLevel level)
	{
		return client.Bot.Rest.Post(client, $"guilds/{Id}/mfa/", level, null);
	}

	public IPromise DeleteRole(DiscordClient client, DiscordRole role)
	{
		return DeleteRole(client, role.Id);
	}

	public IPromise DeleteRole(DiscordClient client, Snowflake roleId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(roleId);
		return client.Bot.Rest.Delete(client, $"guilds/{Id}/roles/{roleId}", null);
	}

	public IPromise<GuildPruneResult> GetPruneCount(DiscordClient client, GuildPruneGet prune)
	{
		if (prune == null)
		{
			throw new ArgumentNullException("prune");
		}
		return client.Bot.Rest.Get<GuildPruneResult>(client, $"guilds/{Id}/prune?{prune.ToQueryString()}", null);
	}

	public IPromise<GuildPruneResult> BeginPrune(DiscordClient client, GuildPruneBegin prune)
	{
		if (prune == null)
		{
			throw new ArgumentNullException("prune");
		}
		return client.Bot.Rest.Post<GuildPruneResult>(client, $"guilds/{Id}/prune?{prune.ToQueryString()}", null, null);
	}

	public IPromise<List<VoiceRegion>> GetVoiceRegions(DiscordClient client)
	{
		return client.Bot.Rest.Get<List<VoiceRegion>>(client, $"guilds/{Id}/regions", null);
	}

	public IPromise<List<InviteMetadata>> GetInvites(DiscordClient client)
	{
		return client.Bot.Rest.Get<List<InviteMetadata>>(client, $"guilds/{Id}/invites", null);
	}

	public IPromise<List<Integration>> GetIntegrations(DiscordClient client)
	{
		return client.Bot.Rest.Get<List<Integration>>(client, $"guilds/{Id}/integrations", null);
	}

	public IPromise DeleteIntegration(DiscordClient client, Integration integration)
	{
		return DeleteIntegration(client, integration.Id);
	}

	public IPromise DeleteIntegration(DiscordClient client, Snowflake integrationId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(integrationId);
		return client.Bot.Rest.Delete(client, $"guilds/{Id}/integrations/{integrationId}", null);
	}

	public IPromise<GuildWidgetSettings> GetWidgetSettings(DiscordClient client)
	{
		return client.Bot.Rest.Get<GuildWidgetSettings>(client, $"guilds/{Id}/widget", null);
	}

	public IPromise<GuildWidget> EditWidget(DiscordClient client, GuildWidget widget)
	{
		if (widget == null)
		{
			throw new ArgumentNullException("widget");
		}
		return client.Bot.Rest.Patch<GuildWidget>(client, $"guilds/{Id}/widget", widget, null);
	}

	public IPromise<GuildWidget> GetWidget(DiscordClient client)
	{
		return client.Bot.Rest.Get<GuildWidget>(client, $"guilds/{Id}/widget.json", null);
	}

	public IPromise<GuildWelcomeScreen> GetWelcomeScreen(DiscordClient client)
	{
		return client.Bot.Rest.Get<GuildWelcomeScreen>(client, $"guilds/{Id}/welcome-screen", null);
	}

	public IPromise<GuildWelcomeScreen> EditWelcomeScreen(DiscordClient client, WelcomeScreenUpdate update)
	{
		if (update == null)
		{
			throw new ArgumentNullException("update");
		}
		return client.Bot.Rest.Patch<GuildWelcomeScreen>(client, $"guilds/{Id}/welcome-screen", update, null);
	}

	public IPromise<InviteMetadata> GetVanityUrl(DiscordClient client)
	{
		return client.Bot.Rest.Get<InviteMetadata>(client, $"guilds/{Id}/vanity-url", null);
	}

	public IPromise<List<DiscordEmoji>> ListEmojis(DiscordClient client)
	{
		return client.Bot.Rest.Get<List<DiscordEmoji>>(client, $"guilds/{Id}/emojis", null);
	}

	public IPromise<DiscordEmoji> GetEmoji(DiscordClient client, Snowflake emojiId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(emojiId);
		return client.Bot.Rest.Get<DiscordEmoji>(client, $"guilds/{Id}/emojis/{emojiId}", null);
	}

	public IPromise<DiscordEmoji> CreateEmoji(DiscordClient client, EmojiCreate emoji)
	{
		if (emoji == null)
		{
			throw new ArgumentNullException("emoji");
		}
		return client.Bot.Rest.Post<DiscordEmoji>(client, $"guilds/{Id}/emojis", emoji, null);
	}

	public IPromise<DiscordEmoji> EditEmoji(DiscordClient client, Snowflake emojiId, EmojiUpdate emoji)
	{
		if (emoji == null)
		{
			throw new ArgumentNullException("emoji");
		}
		InvalidSnowflakeException.ThrowIfInvalid(emojiId);
		return client.Bot.Rest.Patch<DiscordEmoji>(client, $"guilds/{Id}/emojis/{emojiId}", emoji, null);
	}

	public IPromise DeleteEmoji(DiscordClient client, Snowflake emojiId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(emojiId);
		return client.Bot.Rest.Delete(client, $"guilds/{Id}/emojis/{emojiId}", null);
	}

	public IPromise EditCurrentUserVoiceState(DiscordClient client, GuildCurrentUserVoiceStateUpdate update)
	{
		if (update == null)
		{
			throw new ArgumentNullException("update");
		}
		return client.Bot.Rest.Patch(client, $"guilds/{Id}/voice-states/@me", update, null);
	}

	public IPromise EditUserVoiceState(DiscordClient client, Snowflake userId, GuildUserVoiceStateUpdate update)
	{
		if (update == null)
		{
			throw new ArgumentNullException("update");
		}
		InvalidSnowflakeException.ThrowIfInvalid(userId);
		return client.Bot.Rest.Patch(client, $"guilds/{Id}/voice-states/{userId}", update, null);
	}

	public IPromise<List<DiscordSticker>> ListStickers(DiscordClient client)
	{
		return client.Bot.Rest.Get<List<DiscordSticker>>(client, $"guilds/{Id}/stickers", null);
	}

	public IPromise<DiscordSticker> GetSticker(DiscordClient client, Snowflake stickerId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(stickerId);
		return client.Bot.Rest.Get<DiscordSticker>(client, $"guilds/{Id}/stickers/{stickerId}", null);
	}

	public IPromise<DiscordSticker> CreateSticker(DiscordClient client, GuildStickerCreate sticker)
	{
		if (sticker == null)
		{
			throw new ArgumentNullException("sticker");
		}
		return client.Bot.Rest.Post<DiscordSticker>(client, $"guilds/{Id}/stickers", sticker, null);
	}

	public IPromise<DiscordSticker> EditSticker(DiscordClient client, DiscordSticker sticker)
	{
		if (sticker == null)
		{
			throw new ArgumentNullException("sticker");
		}
		return client.Bot.Rest.Patch<DiscordSticker>(client, $"guilds/{Id}/stickers/{sticker.Id}", sticker, null);
	}

	public IPromise DeleteSticker(DiscordClient client, Snowflake stickerId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(stickerId);
		return client.Bot.Rest.Delete(client, $"guilds/{Id}/stickers/{stickerId}", null);
	}

	public IPromise<List<AutoModRule>> ListAutoModRules(DiscordClient client)
	{
		return AutoModRule.GetAll(client, Id);
	}

	public IPromise<AutoModRule> GetAutoModRule(DiscordClient client, Snowflake ruleId)
	{
		return AutoModRule.Get(client, Id, ruleId);
	}

	public IPromise<AutoModRule> CreateAutoModRule(DiscordClient client, AutoModRuleCreate create)
	{
		return AutoModRule.Create(client, Id, create);
	}

	public IPromise<GuildOnboarding> GetOnboarding(DiscordClient client)
	{
		return client.Bot.Rest.Get<GuildOnboarding>(client, $"guilds/{Id}/onboarding", null);
	}

	public IPromise<GuildOnboarding> EditOnboarding(DiscordClient client, GuildOnboardingUpdate update)
	{
		return client.Bot.Rest.Put<GuildOnboarding>(client, $"guilds/{Id}/onboarding", update, null);
	}

	internal DiscordGuild Edit(DiscordGuild updatedGuild)
	{
		DiscordGuild result = (DiscordGuild)MemberwiseClone();
		if (updatedGuild.Name != null)
		{
			Name = updatedGuild.Name;
		}
		if (updatedGuild.Icon != null)
		{
			Icon = updatedGuild.Icon;
		}
		if (updatedGuild.IconHash != null)
		{
			IconHash = updatedGuild.IconHash;
		}
		if (updatedGuild.Splash != null)
		{
			Splash = updatedGuild.Splash;
		}
		if (updatedGuild.DiscoverySplash != null)
		{
			DiscoverySplash = updatedGuild.DiscoverySplash;
		}
		if (updatedGuild.OwnerId.IsValid())
		{
			OwnerId = updatedGuild.OwnerId;
		}
		if (updatedGuild.AfkChannelId.HasValue)
		{
			AfkChannelId = updatedGuild.AfkChannelId;
		}
		if (updatedGuild.AfkTimeout.HasValue)
		{
			AfkTimeout = updatedGuild.AfkTimeout;
		}
		if (updatedGuild.WidgetEnabled.HasValue)
		{
			WidgetEnabled = updatedGuild.WidgetEnabled;
		}
		if (updatedGuild.WidgetChannelId.HasValue)
		{
			WidgetChannelId = updatedGuild.WidgetChannelId;
		}
		VerificationLevel = updatedGuild.VerificationLevel;
		DefaultMessageNotifications = updatedGuild.DefaultMessageNotifications;
		ExplicitContentFilter = updatedGuild.ExplicitContentFilter;
		if (updatedGuild.Roles != null)
		{
			Roles = updatedGuild.Roles;
		}
		if (updatedGuild.Emojis != null)
		{
			Emojis = updatedGuild.Emojis;
		}
		if (updatedGuild.Features != null)
		{
			Features = updatedGuild.Features;
		}
		if (updatedGuild.MfaLevel.HasValue)
		{
			MfaLevel = updatedGuild.MfaLevel;
		}
		if (updatedGuild.ApplicationId.HasValue)
		{
			ApplicationId = updatedGuild.ApplicationId;
		}
		if (updatedGuild.SystemChannelId.HasValue)
		{
			SystemChannelId = updatedGuild.SystemChannelId;
		}
		SystemChannelFlags = updatedGuild.SystemChannelFlags;
		if (RulesChannelId.HasValue)
		{
			RulesChannelId = updatedGuild.RulesChannelId;
		}
		if (updatedGuild.JoinedAt.HasValue)
		{
			JoinedAt = updatedGuild.JoinedAt;
		}
		if (updatedGuild.Large.HasValue)
		{
			Large = updatedGuild.Large;
		}
		if (updatedGuild.Unavailable.HasValue && (!Unavailable.HasValue || Unavailable.Value))
		{
			Unavailable = updatedGuild.Unavailable;
		}
		if (updatedGuild.MemberCount.HasValue)
		{
			MemberCount = updatedGuild.MemberCount;
		}
		if (updatedGuild.VoiceStates != null)
		{
			VoiceStates = updatedGuild.VoiceStates;
		}
		if (updatedGuild.Members != null)
		{
			Members = updatedGuild.Members;
		}
		if (updatedGuild.Channels != null)
		{
			Channels = updatedGuild.Channels;
		}
		if (updatedGuild.Threads != null)
		{
			Threads = updatedGuild.Threads;
		}
		if (updatedGuild.Presences != null)
		{
			Presences = updatedGuild.Presences;
		}
		if (updatedGuild.MaxPresences.HasValue)
		{
			MaxPresences = updatedGuild.MaxPresences;
		}
		if (updatedGuild.MaxMembers.HasValue)
		{
			MaxMembers = updatedGuild.MaxMembers;
		}
		if (updatedGuild.VanityUrlCode != null)
		{
			VanityUrlCode = updatedGuild.VanityUrlCode;
		}
		if (updatedGuild.Description != null)
		{
			Description = updatedGuild.Description;
		}
		if (updatedGuild.Banner != null)
		{
			Banner = updatedGuild.Banner;
		}
		if (updatedGuild.PremiumTier.HasValue)
		{
			PremiumTier = updatedGuild.PremiumTier;
		}
		if (updatedGuild.PremiumSubscriptionCount.HasValue)
		{
			PremiumSubscriptionCount = updatedGuild.PremiumSubscriptionCount;
		}
		if (updatedGuild.PreferredLocale != null)
		{
			PreferredLocale = updatedGuild.PreferredLocale;
		}
		if (updatedGuild.PublicUpdatesChannelId.HasValue)
		{
			PublicUpdatesChannelId = updatedGuild.PublicUpdatesChannelId;
		}
		if (updatedGuild.MaxVideoChannelUsers.HasValue)
		{
			MaxVideoChannelUsers = updatedGuild.MaxVideoChannelUsers;
		}
		if (updatedGuild.ApproximateMemberCount.HasValue)
		{
			ApproximateMemberCount = updatedGuild.ApproximateMemberCount;
		}
		if (updatedGuild.ApproximatePresenceCount.HasValue)
		{
			ApproximatePresenceCount = updatedGuild.ApproximatePresenceCount;
		}
		if (updatedGuild.WelcomeScreen != null)
		{
			WelcomeScreen = updatedGuild.WelcomeScreen;
		}
		NsfwLevel = updatedGuild.NsfwLevel;
		if (updatedGuild.StageInstances != null)
		{
			StageInstances = updatedGuild.StageInstances;
		}
		if (updatedGuild.Stickers != null)
		{
			Stickers = updatedGuild.Stickers;
		}
		if (updatedGuild.ScheduledEvents != null)
		{
			ScheduledEvents = updatedGuild.ScheduledEvents;
		}
		PremiumProgressBarEnabled = updatedGuild.PremiumProgressBarEnabled;
		if (updatedGuild.SafetyAlertsChannelId.HasValue)
		{
			SafetyAlertsChannelId = updatedGuild.SafetyAlertsChannelId;
		}
		return result;
	}
}
