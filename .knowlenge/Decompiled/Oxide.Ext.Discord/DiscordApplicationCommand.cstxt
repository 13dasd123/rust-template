using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Cache;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Helpers;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Types;
using Oxide.Plugins;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class DiscordApplicationCommand
{
	[JsonProperty("default_member_permissions")]
	private string _defaultMemberPermissions;

	[JsonProperty("id")]
	public Snowflake Id { get; set; }

	[JsonProperty("type")]
	public ApplicationCommandType? Type { get; set; }

	[JsonProperty("application_id")]
	public Snowflake ApplicationId { get; set; }

	[JsonProperty("guild_id")]
	public Snowflake? GuildId { get; set; }

	[JsonProperty("name")]
	public string Name { get; set; }

	[JsonProperty("name_localizations")]
	public Hash<string, string> NameLocalizations { get; set; }

	[JsonProperty("description")]
	public string Description { get; set; }

	[JsonProperty("description_localizations")]
	public Hash<string, string> DescriptionLocalizations { get; set; }

	[JsonProperty("options")]
	public List<CommandOption> Options { get; set; }

	public PermissionFlags DefaultMemberPermissions
	{
		get
		{
			return (PermissionFlags)((!string.IsNullOrEmpty(_defaultMemberPermissions)) ? ulong.Parse(_defaultMemberPermissions) : 0);
		}
		set
		{
			_defaultMemberPermissions = Singleton<StringCache<ulong>>.Instance.ToString((ulong)value);
		}
	}

	[JsonProperty("dm_permission")]
	public bool? DmPermission { get; set; }

	[JsonProperty("nsfw")]
	public bool? Nsfw { get; set; }

	[JsonProperty("integration_types")]
	public List<ApplicationIntegrationType> IntegrationTypes { get; set; }

	[JsonProperty("contexts")]
	public List<InteractionContextTypes> Contexts { get; set; }

	[JsonProperty("version")]
	public Snowflake Version { get; set; }

	public string Mention => DiscordFormatting.MentionApplicationCommand(Id, Name);

	public string MentionCustom(string command)
	{
		return DiscordFormatting.MentionApplicationCommandCustom(Id, command);
	}

	public IPromise<DiscordApplicationCommand> Edit(DiscordClient client, CommandUpdate update)
	{
		if (update == null)
		{
			throw new ArgumentNullException("update");
		}
		if (GuildId.HasValue)
		{
			return client.Bot.Rest.Patch<DiscordApplicationCommand>(client, $"applications/{ApplicationId}/guilds/{GuildId}/commands/{Id}", update, null);
		}
		return client.Bot.Rest.Patch<DiscordApplicationCommand>(client, $"applications/{ApplicationId}/commands/{Id}", update, null);
	}

	public IPromise Delete(DiscordClient client)
	{
		if (GuildId.HasValue)
		{
			return client.Bot.Rest.Delete(client, $"applications/{ApplicationId}/guilds/{GuildId}/commands/{Id}", null);
		}
		return client.Bot.Rest.Delete(client, $"applications/{ApplicationId}/commands/{Id}", null);
	}

	public IPromise<GuildCommandPermissions> GetPermissions(DiscordClient client, Snowflake guildId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(guildId);
		IPendingPromise<GuildCommandPermissions> promise = Promise<GuildCommandPermissions>.Create();
		client.Bot.Rest.Get<GuildCommandPermissions>(client, $"applications/{ApplicationId}/guilds/{guildId}/commands/{Id}/permissions", null).Then(delegate(GuildCommandPermissions perms)
		{
			promise.Resolve(perms);
		}).Catch(delegate(ResponseError ex)
		{
			ResponseErrorMessage discordError = ex.DiscordError;
			if (discordError == null || discordError.Code != 10066)
			{
				promise.Reject(ex);
			}
			else
			{
				ex.SuppressErrorMessage();
				client.Bot.Rest.Get<GuildCommandPermissions>(client, $"applications/{ApplicationId}/guilds/{guildId}/commands/{ApplicationId}/permissions", null).Then(delegate(GuildCommandPermissions perms)
				{
					promise.Resolve(perms);
				}).Catch(delegate(ResponseError ex1)
				{
					promise.Reject(ex1);
				});
			}
		});
		return promise;
	}

	public IPromise EditPermissions(DiscordClient client, Snowflake guildId, CommandUpdatePermissions permissions)
	{
		InvalidSnowflakeException.ThrowIfInvalid(guildId);
		return client.Bot.Rest.Put(client, $"applications/{ApplicationId}/guilds/{guildId}/commands/{Id}/permissions", permissions, null);
	}
}
