using System;
using System.Collections.Generic;
using System.Linq;
using Oxide.Core.Libraries.Covalence;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Cache;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Plugins;
using Oxide.Ext.Discord.Types;
using Oxide.Plugins;

public class DiscordLocales : BaseDiscordLibrary<DiscordLocales>
{
	public const string DefaultServerLanguage = "en";

	private readonly Hash<PluginLocale, Hash<string, string>> _pluginLangCache = new Hash<PluginLocale, Hash<string, string>>();

	private readonly ILogger _logger;

	private readonly BidirectionalDictionary<ServerLocale, DiscordLocale> _locales = new BidirectionalDictionary<ServerLocale, DiscordLocale>
	{
		[ServerLocale.Create("en")] = DiscordLocale.Create("en-US"),
		[ServerLocale.Create("bg")] = DiscordLocale.Create("bg"),
		[ServerLocale.Create("zh")] = DiscordLocale.Create("zh-CN"),
		[ServerLocale.Create("hr")] = DiscordLocale.Create("hr"),
		[ServerLocale.Create("cs")] = DiscordLocale.Create("cs"),
		[ServerLocale.Create("da")] = DiscordLocale.Create("da"),
		[ServerLocale.Create("id")] = DiscordLocale.Create("id-Id"),
		[ServerLocale.Create("nl")] = DiscordLocale.Create("nl"),
		[ServerLocale.Create("fi")] = DiscordLocale.Create("fi"),
		[ServerLocale.Create("fr")] = DiscordLocale.Create("fr"),
		[ServerLocale.Create("de")] = DiscordLocale.Create("de"),
		[ServerLocale.Create("el")] = DiscordLocale.Create("el"),
		[ServerLocale.Create("hi")] = DiscordLocale.Create("hi"),
		[ServerLocale.Create("hu")] = DiscordLocale.Create("hu"),
		[ServerLocale.Create("it")] = DiscordLocale.Create("it"),
		[ServerLocale.Create("ja")] = DiscordLocale.Create("ja"),
		[ServerLocale.Create("ko")] = DiscordLocale.Create("ko"),
		[ServerLocale.Create("lt")] = DiscordLocale.Create("lt"),
		[ServerLocale.Create("no")] = DiscordLocale.Create("no"),
		[ServerLocale.Create("pl")] = DiscordLocale.Create("pl"),
		[ServerLocale.Create("pt")] = DiscordLocale.Create("pt-BR"),
		[ServerLocale.Create("ro")] = DiscordLocale.Create("ro"),
		[ServerLocale.Create("ru")] = DiscordLocale.Create("ru"),
		[ServerLocale.Create("es")] = DiscordLocale.Create("es-ES"),
		[ServerLocale.Create("sv")] = DiscordLocale.Create("sv-SE"),
		[ServerLocale.Create("th")] = DiscordLocale.Create("th"),
		[ServerLocale.Create("tr")] = DiscordLocale.Create("tr"),
		[ServerLocale.Create("uk")] = DiscordLocale.Create("uk"),
		[ServerLocale.Create("vi")] = DiscordLocale.Create("vi")
	};

	public ServerLocale ServerLanguage => ServerLocale.Create(Singleton<OxideLibrary>.Instance.Lang.GetServerLanguage());

	internal DiscordLocales(ILogger logger)
	{
		_logger = logger;
		AddOxideLocale(ServerLocale.Create("pt-BR"), DiscordLocale.Create("pt-BR"));
		AddOxideLocale(ServerLocale.Create("es-ES"), DiscordLocale.Create("es-ES"));
		AddOxideLocale(ServerLocale.Create("zh-CN"), DiscordLocale.Create("zh-CN"));
		AddDiscordLocale(DiscordLocale.Create("en-GB"), ServerLocale.Create("en"));
		AddDiscordLocale(DiscordLocale.Create("zh-TW"), ServerLocale.Create("zh"));
		AddDiscordLocale(DiscordLocale.Create("es-419"), ServerLocale.Create("es"));
	}

	public void AddOxideLocale(ServerLocale serverLang, DiscordLocale discordLang)
	{
		_locales.AddKey(serverLang, discordLang);
	}

	public void AddDiscordLocale(DiscordLocale discordLang, ServerLocale serverLang)
	{
		_locales.AddValue(discordLang, serverLang);
	}

	public bool Contains(ServerLocale locale)
	{
		return _locales.ContainsKey(locale);
	}

	public bool Contains(DiscordLocale locale)
	{
		return _locales.ContainsKey(locale);
	}

	public ServerLocale GetServerLanguage(DiscordLocale discordLocale)
	{
		ServerLocale value;
		return _locales.TryGetValue(discordLocale, out value) ? value : default(ServerLocale);
	}

	public DiscordLocale GetDiscordLocale(ServerLocale serverLocale)
	{
		DiscordLocale value;
		return _locales.TryGetValue(serverLocale, out value) ? value : default(DiscordLocale);
	}

	public ServerLocale GetPlayerLanguage(IPlayer player)
	{
		return GetPlayerLanguage(player?.Id);
	}

	public ServerLocale GetPlayerLanguage(string playerId)
	{
		return ServerLocale.Parse(Singleton<OxideLibrary>.Instance.Lang.GetLanguage(playerId));
	}

	public Hash<string, string> GetDiscordLocalizations(Plugin plugin, string langKey)
	{
		if (plugin == null)
		{
			throw new ArgumentNullException("plugin");
		}
		if (langKey == null)
		{
			throw new ArgumentNullException("langKey");
		}
		Hash<string, string> hash = new Hash<string, string>();
		string[] languages = Singleton<OxideLibrary>.Instance.Lang.GetLanguages(plugin);
		for (int i = 0; i < languages.Length; i++)
		{
			ServerLocale serverLocale = ServerLocale.Parse(languages[i]);
			DiscordLocale discordLocale = serverLocale.GetDiscordLocale();
			if (!discordLocale.IsValid)
			{
				_logger.Warning("Discord Extension failed to find discord locale for oxide language '{0}' for '{1}'. Please give this message to the Discord Extension Authors", serverLocale, plugin.FullName());
				continue;
			}
			Hash<string, string> languageMessages = GetLanguageMessages(plugin, serverLocale);
			if (languageMessages.TryGetValue(langKey, out var value))
			{
				hash[discordLocale.Id] = value;
			}
		}
		return hash;
	}

	public string GetDiscordInteractionLangMessage(Plugin plugin, DiscordInteraction interaction, string langKey)
	{
		if (plugin == null)
		{
			throw new ArgumentNullException("plugin");
		}
		if (interaction == null)
		{
			throw new ArgumentNullException("interaction");
		}
		if (langKey == null)
		{
			throw new ArgumentNullException("langKey");
		}
		IPlayer player = interaction.User.Player;
		string text = GetLanguageMessages(plugin, interaction.Locale.GetServerLocale())?[langKey] ?? ((player == null) ? null : GetLanguageMessages(plugin, GetPlayerLanguage(player))?[langKey]) ?? ((!interaction.GuildLocale.HasValue) ? null : GetLanguageMessages(plugin, interaction.GuildLocale.Value.GetServerLocale())?[langKey]) ?? GetLanguageMessages(plugin, ServerLanguage)?[langKey] ?? GetLanguageMessages(plugin, ServerLocale.Default)?[langKey];
		return (!string.IsNullOrEmpty(text)) ? text : langKey;
	}

	internal string GetLangMessage(Plugin plugin, IPlayer player, string langKey)
	{
		if (plugin == null)
		{
			throw new ArgumentNullException("plugin");
		}
		if (langKey == null)
		{
			throw new ArgumentNullException("langKey");
		}
		string text = ((player == null) ? null : GetLanguageMessages(plugin, GetPlayerLanguage(player))?[langKey]) ?? GetLanguageMessages(plugin, ServerLanguage)?[langKey] ?? GetLanguageMessages(plugin, ServerLocale.Default)?[langKey];
		return (!string.IsNullOrEmpty(text)) ? text : langKey;
	}

	public string GetDiscordInteractionLangMessage(Plugin plugin, DiscordInteraction interaction, string langKey, params object[] args)
	{
		string discordInteractionLangMessage = GetDiscordInteractionLangMessage(plugin, interaction, langKey);
		if (string.IsNullOrEmpty(discordInteractionLangMessage))
		{
			return langKey;
		}
		try
		{
			return string.Format(discordInteractionLangMessage, args);
		}
		catch (Exception exception)
		{
			_logger.Exception("Plugin {0} Lang Key '{1}'\nMessage:{2}\nArgs:{3}", plugin, langKey, discordInteractionLangMessage, string.Join(", ", args.Select((object a) => a.ToString()).ToArray()), exception);
			return discordInteractionLangMessage;
		}
	}

	private Hash<string, string> GetLanguageMessages(Plugin plugin, ServerLocale language)
	{
		if (!language.IsValid)
		{
			return null;
		}
		PluginLocale key = new PluginLocale(plugin, language);
		Hash<string, string> hash = _pluginLangCache[key];
		if (hash == null)
		{
			hash = new Hash<string, string>();
			_pluginLangCache[key] = hash;
			Dictionary<string, string> messages = Singleton<OxideLibrary>.Instance.Lang.GetMessages(language.Id, plugin);
			if (messages != null)
			{
				foreach (KeyValuePair<string, string> item in messages)
				{
					hash[item.Key] = item.Value;
				}
			}
		}
		return hash;
	}

	protected override void OnPluginUnloaded(Plugin plugin)
	{
		PluginId pluginId = plugin.Id();
		_pluginLangCache.RemoveAll((KeyValuePair<PluginLocale, Hash<string, string>> p) => pluginId == p.Key.PluginId);
	}
}
