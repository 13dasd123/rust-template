using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Plugins;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class CommandCreate : IDiscordValidation
{
	[JsonProperty("name")]
	public string Name { get; set; }

	[JsonProperty("name_localizations")]
	public Hash<string, string> NameLocalizations { get; set; }

	[JsonProperty("description")]
	public string Description { get; set; }

	[JsonProperty("description_localizations")]
	public Hash<string, string> DescriptionLocalizations { get; set; }

	[JsonProperty("options")]
	public List<CommandOption> Options { get; set; }

	[JsonProperty("default_member_permissions")]
	public PermissionFlags DefaultMemberPermissions { get; set; }

	[Obsolete("Deprecated (use Contexts instead)")]
	[JsonProperty("dm_permission")]
	public bool? DmPermission { get; set; }

	[JsonProperty("integration_types")]
	public List<ApplicationIntegrationType> IntegrationTypes { get; set; }

	[JsonProperty("contexts")]
	public List<InteractionContextTypes> Contexts { get; set; }

	[JsonProperty("type")]
	public ApplicationCommandType Type { get; set; }

	[JsonProperty("nsfw")]
	public bool? Nsfw { get; set; }

	public CommandCreate()
	{
	}

	public CommandCreate(string name, string description, ApplicationCommandType type = ApplicationCommandType.ChatInput, List<CommandOption> options = null)
	{
		Name = name;
		Description = description;
		Type = type;
		Options = options;
		NameLocalizations = new Hash<string, string>();
		DescriptionLocalizations = new Hash<string, string>();
	}

	public void Validate()
	{
		InvalidApplicationCommandException.ThrowIfInvalidName(Name, allowNullOrEmpty: false);
		InvalidApplicationCommandException.ThrowIfInvalidDescription(Description, Type);
	}
}
