using System;
using System.Net.Http;
using Newtonsoft.Json;
using Oxide.Core.Libraries;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Rest;
using Oxide.Ext.Discord.Types;

public class Request<T> : BaseRequest
{
	private IPendingPromise<T> _promise;

	public static Request<T> CreateRequest(DiscordPluginPool pluginPool, DiscordClient client, HttpClient httpClient, RequestMethod method, string route, object data, IPendingPromise<T> promise, RequestOptions options)
	{
		Request<T> request = pluginPool.Get<Request<T>>();
		request.Init(client, httpClient, method, route, data, options);
		request._promise = promise;
		return request;
	}

	protected override void OnRequestSuccess(RequestResponse response)
	{
		try
		{
			T value = JsonConvert.DeserializeObject<T>(response.Content, Client.JsonSettings);
			_promise.Resolve(value);
		}
		catch (Exception exception)
		{
			Logger.Exception("An error occured deserializing JSON response. Method: {0} Route: {1}\nResponse:\n{2}", Method, Route, response.Content, exception);
		}
	}

	protected override void OnRequestError(RequestResponse response)
	{
		_promise.Finally(response.Error.LogError);
		_promise.Reject(response.Error);
	}

	internal override void Abort()
	{
		if (Status != RequestStatus.Cancelled)
		{
			_promise.Reject(new RequestCancelledException());
			base.Abort();
		}
	}

	protected override void EnterPool()
	{
		base.EnterPool();
		_promise = null;
	}
}
