using System.Collections.Generic;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;

public class AutoModTriggerMetadataException : BaseDiscordException
{
	private AutoModTriggerMetadataException(string message)
		: base(message)
	{
	}

	internal static void ThrowIfKeywordFilterInvalid(List<string> filter)
	{
		if (filter == null)
		{
			return;
		}
		if (filter.Count > 1000)
		{
			throw new AutoModTriggerMetadataException(string.Format("{0}.{1} cannot have more than {2} keywords", "AutoModTriggerMetadata", "KeywordFilter", 1000));
		}
		for (int i = 0; i < filter.Count; i++)
		{
			string text = filter[i];
			if (text.Length > 60)
			{
				throw new AutoModTriggerMetadataException(string.Format("{0}.{1} keyword {2} cannot have more than {3} characters", "AutoModTriggerMetadata", "KeywordFilter", text, 60));
			}
		}
	}

	internal static void ThrowIfRegexPatternsInvalid(List<string> patterns)
	{
		if (patterns == null)
		{
			return;
		}
		if (patterns.Count > 10)
		{
			throw new AutoModTriggerMetadataException(string.Format("{0}.{1} cannot have more than {2} patterns", "AutoModTriggerMetadata", "RegexPatterns", 10));
		}
		for (int i = 0; i < patterns.Count; i++)
		{
			string text = patterns[i];
			if (text.Length > 260)
			{
				throw new AutoModTriggerMetadataException(string.Format("{0}.{1} regex {2} cannot have more than {3} characters", "AutoModTriggerMetadata", "KeywordFilter", text, 260));
			}
		}
	}

	internal static void ThrowIfAllowListInvalid(List<string> allowList, AutoModTriggerType type)
	{
		if (allowList != null)
		{
			switch (type)
			{
			case AutoModTriggerType.Keyword:
				ThrowIfAllowListKeywordInvalid(allowList);
				break;
			case AutoModTriggerType.KeywordPreset:
				ThrowIfAllowListKeywordPresetInvalid(allowList);
				break;
			}
		}
	}

	private static void ThrowIfAllowListKeywordInvalid(List<string> allowList)
	{
		if (allowList.Count > 100)
		{
			throw new AutoModTriggerMetadataException(string.Format("{0}.{1} cannot have more than {2} allowed strings", "AutoModTriggerMetadata", "AllowList", 100));
		}
		for (int i = 0; i < allowList.Count; i++)
		{
			string text = allowList[i];
			if (text.Length > 60)
			{
				throw new AutoModTriggerMetadataException(string.Format("{0}.{1} strings {2} cannot have more than {3} characters", "AutoModTriggerMetadata", "AllowList", text, 60));
			}
		}
	}

	private static void ThrowIfAllowListKeywordPresetInvalid(List<string> allowList)
	{
		if (allowList.Count > 1000)
		{
			throw new AutoModTriggerMetadataException(string.Format("{0}.{1} cannot have more than {2} allowed strings", "AutoModTriggerMetadata", "AllowList", 1000));
		}
		for (int i = 0; i < allowList.Count; i++)
		{
			string text = allowList[i];
			if (text.Length > 60)
			{
				throw new AutoModTriggerMetadataException(string.Format("{0}.{1} strings {2} cannot have more than {3} characters", "AutoModTriggerMetadata", "AllowList", text, 60));
			}
		}
	}

	internal static void ThrowIfInvalidMentionTotalLimit(int limit)
	{
		if (limit > 50)
		{
			throw new AutoModTriggerMetadataException(string.Format("{0}.{1} cannot be more than {2}", "AutoModTriggerMetadata", "AllowList", 50));
		}
	}
}
