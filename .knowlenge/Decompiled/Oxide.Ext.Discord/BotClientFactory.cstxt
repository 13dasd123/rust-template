using System;
using System.Collections.Generic;
using Oxide.Ext.Discord;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Connections;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Factory;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Types;
using Oxide.Plugins;

internal sealed class BotClientFactory : Singleton<BotClientFactory>
{
	private readonly Hash<string, BotClient> _activeBots = new Hash<string, BotClient>();

	private readonly Hash<Snowflake, BotClient> _applicationBots = new Hash<Snowflake, BotClient>();

	public IEnumerable<BotClient> Clients => _activeBots.Values;

	private BotClientFactory()
	{
	}

	public BotClient InitializeBotClient(DiscordClient client, BotConnection connection)
	{
		try
		{
			BotClient botClient = _activeBots[connection.ApiToken];
			if (botClient == null)
			{
				DiscordExtension.GlobalLogger.Debug("BotClientFactory.InitializeBotClient Creating new BotClient");
				botClient = new BotClient(connection);
				_activeBots[connection.ApiToken] = botClient;
				_applicationBots[connection.ApplicationId] = botClient;
			}
			DiscordExtension.GlobalLogger.Debug("BotClientFactory.InitializeBotClient Adding {0} client to bot {1}", client.PluginName, botClient.BotUser?.FullUserName);
			return botClient;
		}
		catch (Exception exception)
		{
			DiscordExtension.GlobalLogger.Exception("BotClientFactory.InitializeBotClient An error occured adding {0} client", client.PluginName, exception);
			return null;
		}
	}

	internal BotClient GetByApplicationId(Snowflake appId)
	{
		return _applicationBots[appId];
	}

	public void RemoveBot(BotClient bot)
	{
		_activeBots.Remove(bot.Connection.ApiToken);
	}

	public void ResetAllWebSockets()
	{
		foreach (BotClient value in _activeBots.Values)
		{
			value.ResetWebSocket();
		}
	}

	public void ReconnectAllWebSockets()
	{
		foreach (BotClient value in _activeBots.Values)
		{
			value.WebSocket.Disconnect(reconnect: true, resume: true, requested: true);
		}
	}

	public void ResetAllRestApis()
	{
		foreach (BotClient value in _activeBots.Values)
		{
			value.ResetRestApi();
		}
	}

	public void UpdateLogLevel()
	{
		foreach (BotClient value in _activeBots.Values)
		{
			value.UpdateLogLevel(Singleton<DiscordLoggerFactory>.Instance.GetLogLevel());
		}
	}
}
