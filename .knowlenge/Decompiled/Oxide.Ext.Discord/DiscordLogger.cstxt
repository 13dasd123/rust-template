using System;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Logging;

public class DiscordLogger : ILogger
{
	private readonly IDiscordLoggingConfig _config;

	private readonly DiscordLogHandler _handler;

	public DiscordLogLevel LogLevel { get; private set; }

	internal DiscordLogger(DiscordLogLevel logLevel, IDiscordLoggingConfig config, DiscordLogHandler handler)
	{
		LogLevel = logLevel;
		_config = config;
		_handler = handler;
	}

	public void Log(DiscordLogLevel level, string log, object[] args, Exception exception = null)
	{
		DiscordLoggerException.ThrowIfShutdown(_handler);
		if (IsConsoleLogging(level))
		{
			_handler.LogConsole(level, log, args, exception);
		}
		if (IsFileLogging(level))
		{
			_handler.LogFile(level, log, args, exception);
		}
	}

	public void UpdateLogLevel(DiscordLogLevel level)
	{
		LogLevel = level;
	}

	public bool IsLogging(DiscordLogLevel level)
	{
		return (int)level >= (int)LogLevel && ((int)level >= (int)_config.ConsoleLogLevel || (int)level >= (int)_config.FileLogLevel);
	}

	public bool IsConsoleLogging(DiscordLogLevel level)
	{
		return (int)level >= (int)LogLevel && (int)level >= (int)_config.ConsoleLogLevel;
	}

	public bool IsFileLogging(DiscordLogLevel level)
	{
		return (int)level >= (int)LogLevel && (int)level >= (int)_config.FileLogLevel;
	}

	public void Shutdown()
	{
		_handler.Shutdown();
	}
}
