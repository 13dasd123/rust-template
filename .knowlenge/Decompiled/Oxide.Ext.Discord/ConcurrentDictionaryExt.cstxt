using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using Oxide.Ext.Discord.Libraries;

internal static class ConcurrentDictionaryExt
{
	internal static void RemoveAll<TKey, TValue>(this ConcurrentDictionary<TKey, TValue> dic, Func<TKey, bool> predicate)
	{
		if (dic == null)
		{
			throw new ArgumentNullException("dic");
		}
		List<TKey> list = DiscordPool.Internal.GetList<TKey>();
		foreach (KeyValuePair<TKey, TValue> item in dic)
		{
			if (predicate(item.Key))
			{
				list.Add(item.Key);
			}
		}
		for (int i = 0; i < list.Count; i++)
		{
			TKey key = list[i];
			dic.TryRemove(key, out var _);
		}
		DiscordPool.Internal.FreeList(list);
	}

	internal static void RemoveAll<TKey, TValue>(this ConcurrentDictionary<TKey, TValue> dic, Func<TValue, bool> predicate, Action<TValue> onRemove = null)
	{
		if (dic == null)
		{
			throw new ArgumentNullException("dic");
		}
		List<TKey> list = DiscordPool.Internal.GetList<TKey>();
		foreach (KeyValuePair<TKey, TValue> item in dic)
		{
			if (predicate(item.Value))
			{
				list.Add(item.Key);
				onRemove?.Invoke(item.Value);
			}
		}
		for (int i = 0; i < list.Count; i++)
		{
			TKey key = list[i];
			dic.TryRemove(key, out var _);
		}
		DiscordPool.Internal.FreeList(list);
	}
}
