using System.Collections.Generic;
using Oxide.Ext.Discord.Builders;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;

public class SelectMenuComponentBuilder
{
	private readonly BaseSelectMenuComponent _menu;

	private readonly MessageComponentBuilder _builder;

	internal SelectMenuComponentBuilder(BaseSelectMenuComponent menu, MessageComponentBuilder builder)
	{
		_menu = menu;
		_builder = builder;
	}

	public SelectMenuComponentBuilder AddOption(string label, string value, string description, bool @default = false, DiscordEmoji emoji = null)
	{
		InvalidSelectMenuComponentException.ThrowIfTypeCantAddOptions(_menu.Type);
		InvalidSelectMenuComponentException.ThrowIfInvalidSelectMenuOptionLabel(label);
		InvalidSelectMenuComponentException.ThrowIfInvalidSelectMenuOptionValue(value);
		InvalidSelectMenuComponentException.ThrowIfInvalidSelectMenuOptionDescription(description);
		StringSelectComponent stringSelectComponent = (StringSelectComponent)_menu;
		InvalidSelectMenuComponentException.ThrowIfInvalidSelectMenuOptionCount(stringSelectComponent.Options.Count);
		stringSelectComponent.Options.Add(new SelectMenuOption
		{
			Label = label,
			Value = value,
			Description = description,
			Default = @default,
			Emoji = emoji
		});
		return this;
	}

	public SelectMenuComponentBuilder AddChannelType(ChannelType type)
	{
		InvalidSelectMenuComponentException.ThrowIfTypeCantAddChannelTypes(_menu.Type);
		ChannelSelectComponent channelSelectComponent = (ChannelSelectComponent)_menu;
		channelSelectComponent.ChannelTypes.Add(type);
		return this;
	}

	public SelectMenuComponentBuilder AddDefaultValue(Snowflake id)
	{
		InvalidSelectMenuComponentException.ThrowIfCantAddDefaultValue(_menu.Type);
		BaseSelectMenuComponent menu = _menu;
		if (menu.DefaultValues == null)
		{
			List<SelectMenuDefaultValue> list2 = (menu.DefaultValues = new List<SelectMenuDefaultValue>());
		}
		switch (_menu.Type)
		{
		case MessageComponentType.UserSelect:
			_menu.DefaultValues.Add(new SelectMenuDefaultValue(id, SelectMenuDefaultValueType.User));
			break;
		case MessageComponentType.RoleSelect:
			_menu.DefaultValues.Add(new SelectMenuDefaultValue(id, SelectMenuDefaultValueType.Role));
			break;
		case MessageComponentType.ChannelSelect:
			_menu.DefaultValues.Add(new SelectMenuDefaultValue(id, SelectMenuDefaultValueType.Channel));
			break;
		}
		return this;
	}

	public MessageComponentBuilder Build()
	{
		return _builder;
	}
}
