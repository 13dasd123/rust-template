using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Entities;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class InteractionData
{
	[JsonProperty("id")]
	public Snowflake Id { get; set; }

	[JsonProperty("name")]
	public string Name { get; set; }

	[JsonProperty("type")]
	public ApplicationCommandType? Type { get; set; }

	[JsonProperty("resolved")]
	public InteractionDataResolved Resolved { get; set; }

	[JsonProperty("options")]
	public List<InteractionDataOption> Options { get; set; }

	[JsonProperty("guild_id")]
	public Snowflake? GuildId { get; set; }

	[JsonProperty("custom_id")]
	public string CustomId { get; set; }

	[JsonProperty("component_type")]
	public MessageComponentType? ComponentType { get; set; }

	[JsonProperty("values")]
	public List<string> Values { get; set; }

	[JsonProperty("target_id")]
	public Snowflake? TargetId { get; set; }

	[JsonProperty("components")]
	public List<ActionRowComponent> Components { get; set; }

	public T GetComponent<T>(string customId) where T : BaseInteractableComponent
	{
		foreach (ActionRowComponent component in Components)
		{
			foreach (BaseComponent component2 in component.Components)
			{
				if (component2 is T val && val.CustomId == customId)
				{
					return val;
				}
			}
		}
		return null;
	}
}
