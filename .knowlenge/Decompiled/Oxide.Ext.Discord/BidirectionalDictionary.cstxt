using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using Oxide.Ext.Discord.Types;

internal class BidirectionalDictionary<TKey, TValue>
{
	private readonly Dictionary<TKey, TValue> _keyToValue = new Dictionary<TKey, TValue>();

	private readonly Dictionary<TValue, TKey> _valueToKey = new Dictionary<TValue, TKey>();

	public int Count => Math.Min(_keyToValue.Count, _valueToKey.Count);

	public TValue this[TKey key]
	{
		get
		{
			return _keyToValue[key];
		}
		set
		{
			_keyToValue[key] = value;
			_valueToKey[value] = key;
		}
	}

	public TKey this[TValue key]
	{
		get
		{
			return _valueToKey[key];
		}
		set
		{
			_valueToKey[key] = value;
			_keyToValue[value] = key;
		}
	}

	public bool ContainsKey(TKey key)
	{
		return _keyToValue.ContainsKey(key);
	}

	public bool ContainsKey(TValue key)
	{
		return _valueToKey.ContainsKey(key);
	}

	public bool TryGetValue(TKey key, out TValue value)
	{
		return _keyToValue.TryGetValue(key, out value);
	}

	public bool TryGetValue(TValue key, out TKey value)
	{
		return _valueToKey.TryGetValue(key, out value);
	}

	public void Add(TKey key, TValue value)
	{
		_valueToKey.Add(value, key);
		_keyToValue.Add(key, value);
	}

	public void Add(TValue key, TKey value)
	{
		_keyToValue.Add(value, key);
		_valueToKey.Add(key, value);
	}

	public void AddKey(TKey key, TValue value)
	{
		_keyToValue[key] = value;
	}

	public void AddValue(TValue key, TKey value)
	{
		_valueToKey[key] = value;
	}

	public bool Remove(TKey key)
	{
		if (!_keyToValue.Remove(key, out var value))
		{
			return false;
		}
		_valueToKey.Remove(value, out var _);
		return true;
	}

	public bool Remove(TValue key)
	{
		if (!_valueToKey.Remove(key, out var value))
		{
			return false;
		}
		_keyToValue.Remove(value, out var _);
		return true;
	}

	public void Clear()
	{
		_keyToValue.Clear();
		_valueToKey.Clear();
	}

	public ReadOnlyDictionary<TKey, TValue> AsReadOnlyKeyToValue()
	{
		return new ReadOnlyDictionary<TKey, TValue>(_keyToValue);
	}

	public ReadOnlyDictionary<TValue, TKey> AsReadOnlyValueToKey()
	{
		return new ReadOnlyDictionary<TValue, TKey>(_valueToKey);
	}

	public ICollection<TKey> AsKeyCollection()
	{
		return _keyToValue.Keys;
	}

	public ICollection<TValue> AsValueCollection()
	{
		return _valueToKey.Keys;
	}

	public override string ToString()
	{
		ValueStringBuilder valueStringBuilder = default(ValueStringBuilder);
		valueStringBuilder.AppendLine("BidirectionalDictionary");
		valueStringBuilder.AppendLine("{");
		valueStringBuilder.AppendLine("\tKeyToValue:");
		valueStringBuilder.AppendLine("\t{");
		foreach (TKey key in _keyToValue.Keys)
		{
			valueStringBuilder.AppendLine($"\t\t{key}: {_keyToValue[key]}");
		}
		valueStringBuilder.AppendLine("\t}");
		valueStringBuilder.AppendLine("\valueToKey:");
		valueStringBuilder.AppendLine("\t{");
		foreach (TValue key2 in _valueToKey.Keys)
		{
			valueStringBuilder.AppendLine($"\t\t{key2}: {_valueToKey[key2]}");
		}
		valueStringBuilder.AppendLine("\t}");
		valueStringBuilder.AppendLine("}");
		return valueStringBuilder.ToString();
	}
}
