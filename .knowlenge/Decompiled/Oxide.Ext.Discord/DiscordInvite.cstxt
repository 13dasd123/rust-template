using System;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Interfaces;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class DiscordInvite
{
	[JsonProperty("type")]
	public InviteType Type { get; set; }

	[JsonProperty("code")]
	public string Code { get; set; }

	[JsonProperty("guild")]
	public DiscordGuild Guild { get; set; }

	[JsonProperty("channel")]
	public DiscordChannel Channel { get; set; }

	[JsonProperty("inviter")]
	public DiscordUser Inviter { get; set; }

	[JsonProperty("target_user")]
	public DiscordUser TargetUser { get; set; }

	[JsonProperty("target_user_type")]
	public TargetUserType? UserTargetType { get; set; }

	[JsonProperty("approximate_presence_count")]
	public int? ApproximatePresenceCount { get; set; }

	[JsonProperty("approximate_member_count")]
	public int? ApproximateMemberCount { get; set; }

	[JsonProperty("expires_at")]
	public DateTime? ExpiresAt { get; set; }

	[Obsolete("This field is considered deprecated by discord and may be removed in a future update.")]
	[JsonProperty("stage_instance")]
	public InviteStageInstance StageInstance { get; set; }

	[JsonProperty("guild_scheduled_event")]
	public InviteStageInstance GuildScheduledEvent { get; set; }

	public static IPromise<DiscordInvite> Get(DiscordClient client, string inviteCode, InviteLookup lookup = null)
	{
		return client.Bot.Rest.Get<DiscordInvite>(client, "invites/" + inviteCode + lookup?.ToQueryString(), null);
	}

	public IPromise<DiscordInvite> Delete(DiscordClient client)
	{
		return client.Bot.Rest.Delete<DiscordInvite>(client, "invites/" + Code, null);
	}
}
