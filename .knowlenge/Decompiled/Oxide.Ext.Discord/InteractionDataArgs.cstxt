using System.Collections.Generic;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Plugins;

public class InteractionDataArgs
{
	private readonly Hash<string, InteractionDataOption> _args = new Hash<string, InteractionDataOption>();

	private readonly DiscordInteraction _interaction;

	internal InteractionDataArgs(DiscordInteraction interaction, List<InteractionDataOption> options)
	{
		_interaction = interaction;
		for (int i = 0; i < options.Count; i++)
		{
			InteractionDataOption interactionDataOption = options[i];
			_args[interactionDataOption.Name] = interactionDataOption;
		}
	}

	public bool HasArg(string name)
	{
		return _args.ContainsKey(name);
	}

	public string GetString(string name, string @default = "")
	{
		return GetArg(name, CommandOptionType.String)?.GetString() ?? @default;
	}

	public int GetInt(string name, int @default = 0)
	{
		return GetArg(name, CommandOptionType.Integer)?.GetInt() ?? @default;
	}

	public bool GetBool(string name, bool @default = false)
	{
		return GetArg(name, CommandOptionType.Boolean)?.GetBool() ?? @default;
	}

	public DiscordUser GetUser(string name)
	{
		InteractionDataOption arg = GetArg(name, CommandOptionType.User);
		return (arg != null) ? _interaction.Data.Resolved.Users[arg.GetSnowflake()] : null;
	}

	public DiscordChannel GetChannel(string name)
	{
		InteractionDataOption arg = GetArg(name, CommandOptionType.Channel);
		return (arg != null) ? _interaction.Data.Resolved.Channels[arg.GetSnowflake()] : null;
	}

	public DiscordRole GetRole(string name)
	{
		InteractionDataOption arg = GetArg(name, CommandOptionType.Role);
		return (arg != null) ? _interaction.Data.Resolved.Roles[arg.GetSnowflake()] : null;
	}

	public double GetNumber(string name, double @default = 0.0)
	{
		return GetArg(name, CommandOptionType.Number)?.GetNumber() ?? @default;
	}

	public float GetFloat(string name, float @default = 0f)
	{
		return ((float?)GetArg(name, CommandOptionType.Number)?.GetNumber()) ?? @default;
	}

	private InteractionDataOption GetArg(string name, CommandOptionType requested)
	{
		InteractionDataOption interactionDataOption = _args[name];
		if (interactionDataOption == null)
		{
			return null;
		}
		InteractionArgException.ThrowIfInvalidArgType(name, interactionDataOption.Type, requested);
		return interactionDataOption;
	}
}
