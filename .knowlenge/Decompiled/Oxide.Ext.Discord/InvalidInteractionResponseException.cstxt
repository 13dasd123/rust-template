using System;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;

public class InvalidInteractionResponseException : BaseDiscordException
{
	private static readonly TimeSpan MaxInitialResponseDuration = TimeSpan.FromSeconds(3.0);

	private static readonly TimeSpan MaxTokenLife = TimeSpan.FromMinutes(15.0);

	private InvalidInteractionResponseException(string message)
		: base(message)
	{
	}

	internal static void ThrowIfAlreadyResponded(bool responded)
	{
		if (responded)
		{
			throw new InvalidInteractionResponseException("This interaction has already been responded too and can't be responded to again. Please use DiscordInteraction.CreateFollowUpMessage to create a follow up message");
		}
	}

	internal static void ThrowIfNotResponded(bool responded)
	{
		if (!responded)
		{
			throw new InvalidInteractionResponseException("You cannot use this endpoint because DiscordInteraction.CreateResponse hasn't been called yet");
		}
	}

	internal static void ThrowIfInitialResponseTimeElapsed(DateTime createdDate)
	{
		if (DateTime.UtcNow - createdDate > MaxInitialResponseDuration)
		{
			throw new InvalidInteractionResponseException($"This interaction has expired as it took longer than {MaxInitialResponseDuration.TotalSeconds:0} seconds to respond to the interaction. The interaction took: {(DateTime.UtcNow - createdDate).TotalSeconds:0.0000} seconds to respond.");
		}
	}

	internal static void ThrowIfMaxResponseTimeElapsed(DateTime createdDate)
	{
		if (DateTime.UtcNow - createdDate > MaxTokenLife)
		{
			throw new InvalidInteractionResponseException($"This interaction has expired as it has been longer than {MaxTokenLife.TotalMinutes:0} minutes");
		}
	}

	internal static void ThrowIfInvalidResponseType(InteractionType type, InteractionResponseType responseType)
	{
		switch (type)
		{
		case InteractionType.Ping:
			if (responseType == InteractionResponseType.Pong)
			{
				break;
			}
			throw new InvalidInteractionResponseException("You can only response to InteractionType.Ping with InteractionResponseType.Pong");
		case InteractionType.ApplicationCommand:
			if (responseType == InteractionResponseType.ChannelMessageWithSource || responseType == InteractionResponseType.DeferredChannelMessageWithSource || responseType == InteractionResponseType.Modal)
			{
				break;
			}
			throw new InvalidInteractionResponseException("You can only response to InteractionType.ApplicationCommand with InteractionResponseType.ChannelMessageWithSource, InteractionResponseType.DeferredChannelMessageWithSource, or InteractionResponseType.Modal");
		case InteractionType.MessageComponent:
			if (responseType == InteractionResponseType.ChannelMessageWithSource || responseType == InteractionResponseType.DeferredChannelMessageWithSource || responseType == InteractionResponseType.UpdateMessage || responseType == InteractionResponseType.DeferredUpdateMessage || responseType == InteractionResponseType.Modal)
			{
				break;
			}
			throw new InvalidInteractionResponseException("You can only response to InteractionType.MessageComponent with InteractionResponseType.ChannelMessageWithSource, InteractionResponseType.DeferredChannelMessageWithSource, InteractionResponseType.UpdateMessage, InteractionResponseType.DeferredUpdateMessage, or InteractionResponseType.Modal");
		case InteractionType.ApplicationCommandAutoComplete:
			if (responseType == InteractionResponseType.ApplicationCommandAutocompleteResult)
			{
				break;
			}
			throw new InvalidInteractionResponseException("You can only response to InteractionType.ApplicationCommandAutoComplete with InteractionResponseType.ApplicationCommandAutocompleteResult");
		case InteractionType.ModalSubmit:
			if (responseType != InteractionResponseType.Modal && responseType != InteractionResponseType.Pong)
			{
				break;
			}
			throw new InvalidInteractionResponseException("You can only response to InteractionType.ModalSubmit with InteractionResponseType.ChannelMessageWithSource, InteractionResponseType.DeferredChannelMessageWithSource, InteractionResponseType.UpdateMessage, or InteractionResponseType.DeferredUpdateMessage");
		}
	}
}
