using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Oxide.Ext.Discord.Cache;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Types;

public sealed class EnumCache<T> : Singleton<EnumCache<T>> where T : struct, IComparable, IFormattable, IConvertible
{
	public readonly ReadOnlyCollection<T> Values;

	private readonly T[] _values;

	private readonly Dictionary<T, string> _cachedStrings = new Dictionary<T, string>();

	private readonly Dictionary<T, string> _loweredStrings = new Dictionary<T, string>();

	private readonly Dictionary<T, string> _numberString = new Dictionary<T, string>();

	private readonly Type _type;

	private readonly bool _isFlagsEnum;

	private readonly TypeCode _typeCode;

	private EnumCache()
	{
		_type = typeof(T);
		_isFlagsEnum = _type.HasAttribute<FlagsAttribute>(inherit: false);
		_values = Enum.GetValues(_type).Cast<T>().ToArray();
		_typeCode = Convert.GetTypeCode(_values[0]);
		for (int i = 0; i < _values.Length; i++)
		{
			T key = _values[i];
			string text = key.ToString();
			_cachedStrings[key] = text;
			_loweredStrings[key] = text.ToLower();
		}
		Values = new ReadOnlyCollection<T>(_values);
	}

	public string ToString(T value)
	{
		if (_cachedStrings.TryGetValue(value, out var value2))
		{
			return value2;
		}
		value2 = (_isFlagsEnum ? CreateFlagsString(value) : value.ToString());
		_cachedStrings[value] = value2;
		return value2;
	}

	public string ToLower(T value)
	{
		if (!_loweredStrings.TryGetValue(value, out var value2))
		{
			value2 = ToString(value).ToLower();
			_loweredStrings[value] = value2;
		}
		return value2;
	}

	public string ToNumber(T value)
	{
		if (!_numberString.TryGetValue(value, out var value2))
		{
			value2 = value.ToType(Enum.GetUnderlyingType(_type), null).ToString();
			_numberString[value] = value2;
		}
		return value2;
	}

	public T Next(T value)
	{
		int num = Array.IndexOf(_values, value) + 1;
		return (_values.Length == num) ? _values[0] : _values[num];
	}

	public T Previous(T value)
	{
		int num = Array.IndexOf(_values, value) + 1;
		return (num == 0) ? _values[_values.Length] : _values[num];
	}

	private int GetTypeSize()
	{
		TypeCode typeCode = _typeCode;
		if (1 == 0)
		{
		}
		int result;
		switch (typeCode)
		{
		case TypeCode.SByte:
		case TypeCode.Byte:
			result = 8;
			break;
		case TypeCode.Int16:
		case TypeCode.UInt16:
			result = 16;
			break;
		case TypeCode.Int32:
		case TypeCode.UInt32:
			result = 32;
			break;
		case TypeCode.Int64:
		case TypeCode.UInt64:
			result = 64;
			break;
		default:
			throw new ArgumentOutOfRangeException();
		}
		if (1 == 0)
		{
		}
		return result;
	}

	private string CreateFlagsString(T value)
	{
		ValueStringBuilder valueStringBuilder = default(ValueStringBuilder);
		bool flag = true;
		int typeSize = GetTypeSize();
		for (int i = 0; i < typeSize; i++)
		{
			ulong num = (ulong)(1L << i);
			if ((value.ToUInt64(null) & num) != 0)
			{
				if (!flag)
				{
					valueStringBuilder.Append(", ");
				}
				flag = false;
				object value2 = Convert.ChangeType(num, _typeCode);
				if (Enum.IsDefined(_type, value2))
				{
					valueStringBuilder.Append(Enum.GetName(_type, value2));
					continue;
				}
				valueStringBuilder.Append("Unknown Value (1 << ");
				valueStringBuilder.Append(i);
				valueStringBuilder.Append(')');
			}
		}
		return valueStringBuilder.ToString();
	}
}
