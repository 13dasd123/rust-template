using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Attributes;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Connections;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Plugins;

public class DiscordAppCommand : BaseDiscordLibrary<DiscordAppCommand>, IDebugLoggable
{
	private readonly ConcurrentDictionary<Snowflake, AppCommandHandler> _handlers = new ConcurrentDictionary<Snowflake, AppCommandHandler>();

	private readonly Func<Snowflake, AppCommandHandler> _create;

	private readonly ILogger _logger;

	internal DiscordAppCommand(ILogger logger)
	{
		_logger = logger;
		_create = (Snowflake _) => new AppCommandHandler(_logger);
	}

	private AppCommandHandler GetCommandHandler(Snowflake applicationId)
	{
		return _handlers.GetValueOrDefault(applicationId);
	}

	private AppCommandHandler GetOrAddCommandHandler(Snowflake applicationId)
	{
		return _handlers.GetOrAdd(applicationId, _create);
	}

	public void AddApplicationCommand(Plugin plugin, Snowflake applicationId, Action<DiscordInteraction, InteractionDataParsed> callback, string command, string group = null, string subCommand = null)
	{
		if (plugin == null)
		{
			throw new ArgumentNullException("plugin");
		}
		InvalidSnowflakeException.ThrowIfInvalid(applicationId);
		if (string.IsNullOrEmpty(command))
		{
			throw new ArgumentNullException("command");
		}
		if (callback == null)
		{
			throw new ArgumentNullException("callback");
		}
		AppCommandHandler orAddCommandHandler = GetOrAddCommandHandler(applicationId);
		AppCommandId appCommandId = new AppCommandId(InteractionType.ApplicationCommand, command, group, subCommand);
		BaseAppCommand commandById = orAddCommandHandler.GetCommandById(appCommandId);
		if (commandById != null && !commandById.IsForPlugin(plugin.Id()))
		{
			_logger.Warning("{0} has replaced the '{1}' ({2}) discord application command previously registered by {3}", plugin.PluginName(), command, InteractionType.ApplicationCommand, commandById.PluginName);
		}
		orAddCommandHandler.AddAppCommand(new AppCommand(plugin, applicationId, appCommandId, callback, _logger));
		_logger.Debug("Adding App Command For: {0} Command: {1} Callback: {2}", plugin.PluginName(), appCommandId, callback.Method.Name);
	}

	public void AddAutoCompleteCommand(Plugin plugin, Snowflake applicationId, Action<DiscordInteraction, InteractionDataOption> callback, string command, string argument, string group = null, string subCommand = null)
	{
		if (plugin == null)
		{
			throw new ArgumentNullException("plugin");
		}
		InvalidSnowflakeException.ThrowIfInvalid(applicationId);
		if (callback == null)
		{
			throw new ArgumentNullException("callback");
		}
		if (string.IsNullOrEmpty(command))
		{
			throw new ArgumentNullException("command");
		}
		if (string.IsNullOrEmpty(argument))
		{
			throw new ArgumentNullException("argument");
		}
		AppCommandHandler orAddCommandHandler = GetOrAddCommandHandler(applicationId);
		AppCommandId appCommandId = new AppCommandId(InteractionType.ApplicationCommandAutoComplete, command, group, subCommand, argument);
		BaseAppCommand commandById = orAddCommandHandler.GetCommandById(appCommandId);
		if (commandById != null && !commandById.IsForPlugin(plugin.Id()))
		{
			_logger.Warning("{0} has replaced the '{1}' ({2}) discord auto complete command previously registered by {3}", plugin.PluginName(), command, InteractionType.ApplicationCommandAutoComplete, commandById.PluginName);
		}
		orAddCommandHandler.AddAppCommand(new AutoCompleteCommand(plugin, applicationId, appCommandId, callback, _logger));
		_logger.Debug("Adding Auto Complete Command For: {0} Command: {1} Callback: {2}", plugin.PluginName(), appCommandId, callback.Method.Name);
	}

	public void AddMessageComponentCommand(Plugin plugin, Snowflake applicationId, string customId, Action<DiscordInteraction> callback)
	{
		if (plugin == null)
		{
			throw new ArgumentNullException("plugin");
		}
		InvalidSnowflakeException.ThrowIfInvalid(applicationId);
		if (string.IsNullOrEmpty(customId))
		{
			throw new ArgumentNullException("customId");
		}
		if (callback == null)
		{
			throw new ArgumentNullException("callback");
		}
		AppCommandHandler orAddCommandHandler = GetOrAddCommandHandler(applicationId);
		AppCommandId appCommandId = new AppCommandId(InteractionType.MessageComponent, customId);
		BaseAppCommand commandById = orAddCommandHandler.GetCommandById(appCommandId);
		if (commandById != null && !commandById.IsForPlugin(plugin.Id()))
		{
			_logger.Warning("{0} has replaced the '{1}' ({2}) discord message component command previously registered by {3}", plugin.PluginName(), customId, InteractionType.MessageComponent, commandById.PluginName);
		}
		orAddCommandHandler.AddAppCommand(new ComponentCommand(plugin, applicationId, appCommandId, callback, _logger));
		_logger.Debug("Adding Message Component Command For: {0} CustomId: {1} Callback: {2}", plugin.PluginName(), customId, callback.Method.Name);
	}

	public void AddModalSubmitCommand(Plugin plugin, Snowflake applicationId, string customId, Action<DiscordInteraction> callback)
	{
		if (plugin == null)
		{
			throw new ArgumentNullException("plugin");
		}
		InvalidSnowflakeException.ThrowIfInvalid(applicationId);
		if (string.IsNullOrEmpty(customId))
		{
			throw new ArgumentNullException("customId");
		}
		if (callback == null)
		{
			throw new ArgumentNullException("callback");
		}
		AppCommandHandler orAddCommandHandler = GetOrAddCommandHandler(applicationId);
		AppCommandId appCommandId = new AppCommandId(InteractionType.ModalSubmit, customId);
		BaseAppCommand commandById = orAddCommandHandler.GetCommandById(appCommandId);
		if (commandById != null && !commandById.IsForPlugin(plugin.Id()))
		{
			_logger.Warning("{0} has replaced the '{1}' ({2}) discord modal submit command previously registered by {3}", plugin.PluginName(), customId, InteractionType.ModalSubmit, commandById.PluginName);
		}
		orAddCommandHandler.AddAppCommand(new ComponentCommand(plugin, applicationId, appCommandId, callback, _logger));
		_logger.Debug("Adding Modal Submit Command For: {0} CustomId: {1} Callback: {2}", plugin.PluginName(), customId, callback.Method.Name);
	}

	public void RemoveApplicationCommand(Plugin plugin, DiscordApplication app, InteractionType type, string command, string group, string subCommand)
	{
		if (string.IsNullOrEmpty(command))
		{
			throw new ArgumentNullException("command");
		}
		BaseAppCommand commandById = GetCommandHandler(app.Id).GetCommandById(new AppCommandId(type, command, group, subCommand));
		if (commandById != null && commandById.IsForPlugin(plugin.Id()))
		{
			RemoveApplicationCommandInternal(commandById);
		}
	}

	private void RemoveApplicationCommandInternal(BaseAppCommand appCommand)
	{
		AppCommandHandler commandHandler = GetCommandHandler(appCommand.AppId);
		if (commandHandler != null && commandHandler.RemoveAppCommand(appCommand) && commandHandler.IsEmpty)
		{
			_handlers.TryRemove(appCommand.AppId, out var _);
		}
	}

	internal void RegisterApplicationCommands(Plugin plugin, PluginSetup setup, BotConnection connection)
	{
		_logger.Debug("Registering application commands for {0}", setup.PluginName);
		Snowflake applicationId = connection.ApplicationId;
		foreach (PluginHookResult<BaseApplicationCommandAttribute> item in setup.GetCallbacksWithAttribute<BaseApplicationCommandAttribute>())
		{
			BaseApplicationCommandAttribute attribute = item.Attribute;
			BaseApplicationCommandAttribute baseApplicationCommandAttribute = attribute;
			if (!(baseApplicationCommandAttribute is DiscordAutoCompleteCommandAttribute discordAutoCompleteCommandAttribute))
			{
				if (!(baseApplicationCommandAttribute is DiscordApplicationCommandAttribute discordApplicationCommandAttribute))
				{
					if (!(baseApplicationCommandAttribute is DiscordMessageComponentCommandAttribute discordMessageComponentCommandAttribute))
					{
						if (baseApplicationCommandAttribute is DiscordModalSubmitAttribute discordModalSubmitAttribute)
						{
							Action<DiscordInteraction> action = item.Method.CreateDelegate<DiscordInteraction>(plugin);
							if (action != null)
							{
								AddModalSubmitCommand(plugin, applicationId, discordModalSubmitAttribute.CustomId, action);
							}
						}
					}
					else
					{
						Action<DiscordInteraction> action2 = item.Method.CreateDelegate<DiscordInteraction>(plugin);
						if (action2 != null)
						{
							AddMessageComponentCommand(plugin, applicationId, discordMessageComponentCommandAttribute.CustomId, action2);
						}
					}
				}
				else
				{
					Action<DiscordInteraction, InteractionDataParsed> action3 = item.Method.CreateDelegate<DiscordInteraction, InteractionDataParsed>(plugin);
					if (action3 != null)
					{
						AddApplicationCommand(plugin, applicationId, action3, discordApplicationCommandAttribute.Command, discordApplicationCommandAttribute.Group, discordApplicationCommandAttribute.SubCommand);
					}
				}
			}
			else
			{
				Action<DiscordInteraction, InteractionDataOption> action4 = item.Method.CreateDelegate<DiscordInteraction, InteractionDataOption>(plugin);
				if (action4 != null)
				{
					AddAutoCompleteCommand(plugin, applicationId, action4, discordAutoCompleteCommandAttribute.Command, discordAutoCompleteCommandAttribute.ArgumentName, discordAutoCompleteCommandAttribute.Group, discordAutoCompleteCommandAttribute.SubCommand);
				}
			}
		}
	}

	protected override void OnClientBotConnect(DiscordClient client)
	{
		RegisterApplicationCommands(client.Plugin, client.PluginSetup, client.Connection);
	}

	protected override void OnPluginUnloaded(Plugin plugin)
	{
		List<BaseAppCommand> list = DiscordPool.Internal.GetList<BaseAppCommand>();
		foreach (KeyValuePair<Snowflake, AppCommandHandler> handler in _handlers)
		{
			list.AddRange(handler.Value.GetCommandsForPlugin(plugin));
		}
		for (int i = 0; i < list.Count; i++)
		{
			BaseAppCommand appCommand = list[i];
			RemoveApplicationCommandInternal(appCommand);
		}
		DiscordPool.Internal.FreeList(list);
	}

	internal bool HandleInteraction(DiscordInteraction interaction)
	{
		BaseAppCommand baseAppCommand = GetCommandHandler(interaction.ApplicationId)?.GetCommandById(interaction.GetCommandId());
		if (baseAppCommand == null)
		{
			return false;
		}
		baseAppCommand.HandleCommand(interaction);
		return true;
	}

	public void LogDebug(DebugLogger logger)
	{
		logger.StartArray("Application Commands");
		foreach (KeyValuePair<Snowflake, AppCommandHandler> handler in _handlers)
		{
			logger.AppendField("Application ID", handler.Key);
			logger.AppendList("Application Commands", handler.Value.GetCommands());
		}
		logger.EndArray();
	}
}
