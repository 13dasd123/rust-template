using System;
using System.IO;
using Oxide.Core;
using Oxide.Ext.Discord;
using Oxide.Ext.Discord.Data;
using Oxide.Ext.Discord.Data.Ip;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Types;
using ProtoBuf;

internal sealed class DataHandler : Singleton<DataHandler>
{
	internal static readonly string RootPath = Path.Combine(Interface.Oxide.DataDirectory, "DiscordExtension");

	private DataHandler()
	{
	}

	public void LoadAll()
	{
		if (!Directory.Exists(RootPath))
		{
			Directory.CreateDirectory(RootPath);
		}
		Load<DiscordUserData>(new DataFileInfo("discord.users.data", 2));
		Load<DiscordIpData>(new DataFileInfo("discord.ip.data", 1));
	}

	public void OnServerSave()
	{
		SaveAll(force: false);
	}

	public void Shutdown()
	{
		SaveAll(force: true);
	}

	private void SaveAll(bool force)
	{
		Save(BaseDataFile<DiscordUserData>.Instance, force);
		Save(BaseDataFile<DiscordIpData>.Instance, force);
	}

	public void Load<TData>(DataFileInfo info) where TData : BaseDataFile<TData>, new()
	{
		int num = 0;
		while (true)
		{
			try
			{
				if (num >= info.NumBackups)
				{
					break;
				}
				string pathForIndex = info.GetPathForIndex(num);
				if (!File.Exists(pathForIndex))
				{
					continue;
				}
				using (FileStream source = File.OpenRead(pathForIndex))
				{
					TData val = Serializer.Deserialize<TData>(source);
					if (val != null)
					{
						BaseDataFile<TData>.Instance = val;
						val.OnDataLoaded(info);
						return;
					}
				}
				continue;
			}
			catch (Exception exception)
			{
				DiscordExtension.GlobalLogger.Exception("An error occured loading the {0} Data File of type {1}", info.FilePath, typeof(TData).FullName, exception);
				continue;
			}
			finally
			{
				num++;
			}
		}
		TData val2 = new TData();
		val2.OnDataLoaded(info);
		BaseDataFile<TData>.Instance = val2;
	}

	public void Save<TData>(TData data, bool force) where TData : BaseDataFile<TData>, new()
	{
		if (!data.DataUpdated && !force)
		{
			return;
		}
		DataFileInfo fileInfo = data.FileInfo;
		try
		{
			int numBackups = fileInfo.NumBackups;
			string pathForIndex = fileInfo.GetPathForIndex(numBackups);
			if (File.Exists(pathForIndex))
			{
				File.Delete(pathForIndex);
			}
			for (int num = numBackups - 1; num >= 0; num--)
			{
				pathForIndex = fileInfo.GetPathForIndex(num);
				if (File.Exists(pathForIndex))
				{
					File.Move(pathForIndex, fileInfo.GetPathForIndex(num + 1));
				}
			}
			pathForIndex = fileInfo.GetPathForIndex(0);
			FileMode mode = (File.Exists(pathForIndex) ? FileMode.Truncate : FileMode.Create);
			using (FileStream destination = File.Open(pathForIndex, mode))
			{
				Serializer.Serialize((Stream)destination, BaseDataFile<TData>.Instance);
			}
			data.OnDataSaved();
		}
		catch (Exception exception)
		{
			DiscordExtension.GlobalLogger.Exception("An error occured saving the data file. {0}", typeof(TData).GetRealTypeName(), exception);
		}
	}
}
