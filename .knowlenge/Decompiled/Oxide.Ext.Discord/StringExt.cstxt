using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Libraries;

internal static class StringExt
{
	public static bool ParseBool(this string input, out bool value)
	{
		if (bool.TryParse(input, out value))
		{
			return true;
		}
		if (char.IsNumber(input[0]))
		{
			value = input[0] != '0';
			return true;
		}
		return false;
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static string TrimIfLargerThan(this string str, int maxCharacters)
	{
		return (str.Length <= maxCharacters) ? str : str.Substring(0, maxCharacters);
	}

	public static void ParseCommand(this string argStr, out string command, out string[] args)
	{
		List<string> list = DiscordPool.Internal.GetList<string>();
		StringBuilder stringBuilder = DiscordPool.Internal.GetStringBuilder();
		bool flag = false;
		foreach (char c in argStr)
		{
			if (c == '"')
			{
				if (flag)
				{
					string text = stringBuilder.Trim().ToString();
					if (!string.IsNullOrEmpty(text))
					{
						list.Add(text);
					}
					stringBuilder.Clear();
					flag = false;
				}
				else
				{
					flag = true;
				}
			}
			else if (char.IsWhiteSpace(c) && !flag)
			{
				string text2 = stringBuilder.Trim().ToString();
				if (!string.IsNullOrEmpty(text2))
				{
					list.Add(text2);
				}
				stringBuilder.Clear();
			}
			else
			{
				stringBuilder.Append(c);
			}
		}
		if (stringBuilder.Length > 0)
		{
			string text3 = stringBuilder.Trim().ToString();
			if (!string.IsNullOrEmpty(text3))
			{
				list.Add(text3);
			}
		}
		if (list.Count == 0)
		{
			command = null;
			args = null;
			return;
		}
		command = list[0].ToLower();
		list.RemoveAt(0);
		args = list.ToArray();
		DiscordPool.Internal.FreeStringBuilder(stringBuilder);
		DiscordPool.Internal.FreeList(list);
	}
}
