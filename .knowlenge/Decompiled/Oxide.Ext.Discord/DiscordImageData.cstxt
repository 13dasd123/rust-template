using System;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Cache;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Json;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Types;

[JsonConverter(typeof(DiscordImageDataConverter))]
public readonly struct DiscordImageData
{
	public readonly DiscordImageFormat Type;

	public readonly byte[] Image;

	private static readonly Regex ImageDataRegex = new Regex("^data:image\\/(jpeg|png|gif){1};base64,([A-Za-z\\d+\\/]+)$", RegexOptions.Compiled);

	private static readonly byte[] Gif = Encoding.UTF8.GetBytes("GIF");

	private static readonly byte[] Png = new byte[4] { 137, 80, 78, 71 };

	private static readonly byte[] Jpeg = new byte[4] { 255, 216, 255, 224 };

	private static readonly byte[] Jpeg2 = new byte[4] { 255, 216, 255, 225 };

	private const double KiloBytes = 1024.0;

	private const double MegaBytes = 1048576.0;

	private const double Gigabytes = 1073741824.0;

	public DiscordImageData(byte[] image)
	{
		InvalidImageDataException.ThrowIfInvalidImageBytes(image);
		Type = GetType(image);
		Image = image;
	}

	public DiscordImageData(Stream stream)
	{
		MemoryStream memoryStream = DiscordPool.Internal.GetMemoryStream();
		stream.CopyToPooled(memoryStream);
		byte[] image = memoryStream.ToArray();
		Type = GetType(image);
		Image = image;
		DiscordPool.Internal.FreeMemoryStream(memoryStream);
	}

	public DiscordImageData(string image)
	{
		Match match = ImageDataRegex.Match(image);
		InvalidImageDataException.ThrowIfInvalidBase64String(match, image);
		Type = (DiscordImageFormat)Enum.Parse(typeof(DiscordImageFormat), match.Groups[0].Value, ignoreCase: true);
		Image = Convert.FromBase64String(match.Groups[1].Value);
	}

	public string GetBase64Image()
	{
		ValueStringBuilder valueStringBuilder = default(ValueStringBuilder);
		valueStringBuilder.Append("data:image/");
		valueStringBuilder.Append(Singleton<EnumCache<DiscordImageFormat>>.Instance.ToLower(Type));
		valueStringBuilder.Append(";base64,");
		valueStringBuilder.Append(Convert.ToBase64String(Image));
		return valueStringBuilder.ToString();
	}

	public double GetImageSize(DiscordImageSize size)
	{
		if (1 == 0)
		{
		}
		double result = size switch
		{
			DiscordImageSize.Bytes => Image.Length, 
			DiscordImageSize.KiloBytes => (double)Image.Length / 1024.0, 
			DiscordImageSize.MegaBytes => (double)Image.Length / 1048576.0, 
			DiscordImageSize.GigaBytes => (double)Image.Length / 1073741824.0, 
			_ => throw new ArgumentOutOfRangeException("size", size, null), 
		};
		if (1 == 0)
		{
		}
		return result;
	}

	public bool IsValid()
	{
		return Image != null && Image.Length != 0;
	}

	private static DiscordImageFormat GetType(byte[] image)
	{
		byte b = image[0];
		if (b == Gif[0] && StartsWith(Gif, image))
		{
			return DiscordImageFormat.Gif;
		}
		if (b == Png[0] && StartsWith(Png, image))
		{
			return DiscordImageFormat.Png;
		}
		if ((b == Jpeg[0] && StartsWith(Jpeg, image)) || StartsWith(Jpeg2, image))
		{
			return DiscordImageFormat.Jpg;
		}
		throw new InvalidImageDataException("Image does not appear to be a support image of type GIF, PNG, or JPEG");
	}

	private static bool StartsWith(byte[] type, byte[] image)
	{
		for (int i = 1; i < type.Length; i++)
		{
			if (type[i] != image[i])
			{
				return false;
			}
		}
		return true;
	}
}
