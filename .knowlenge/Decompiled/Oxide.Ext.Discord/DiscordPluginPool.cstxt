using System.Collections.Generic;
using System.IO;
using System.Text;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Plugins;
using Oxide.Ext.Discord.Types;
using Oxide.Plugins;

public class DiscordPluginPool : IDebugLoggable
{
	private readonly List<IPool> _pools = new List<IPool>();

	private PoolSettings _settings;

	internal readonly PluginId PluginId;

	internal readonly string PluginName;

	private static readonly PoolSettings DefaultSettings = new PoolSettings();

	internal PoolSettings Settings => _settings ?? DefaultSettings;

	public DiscordPluginPool(Plugin plugin)
	{
		PluginId = plugin.Id();
		PluginName = plugin.FullName();
	}

	public void SetSettings(PoolSettings settings)
	{
		_settings = settings;
	}

	internal void AddPool(IPool pool)
	{
		_pools.Add(pool);
	}

	public T Get<T>() where T : BasePoolable, new()
	{
		return (T)BasePool<BasePoolable, ObjectPool<T>>.ForPlugin(this).Get();
	}

	internal void Free<T>(T value) where T : BasePoolable, new()
	{
		BasePool<BasePoolable, ObjectPool<T>>.ForPlugin(this).Free(value);
	}

	public List<T> GetList<T>()
	{
		return BasePool<List<T>, ListPool<T>>.ForPlugin(this).Get();
	}

	public void FreeList<T>(List<T> list)
	{
		BasePool<List<T>, ListPool<T>>.ForPlugin(this).Free(list);
	}

	public Hash<TKey, TValue> GetHash<TKey, TValue>()
	{
		return BasePool<Hash<TKey, TValue>, HashPool<TKey, TValue>>.ForPlugin(this).Get();
	}

	public void FreeHash<TKey, TValue>(Hash<TKey, TValue> hash)
	{
		BasePool<Hash<TKey, TValue>, HashPool<TKey, TValue>>.ForPlugin(this).Free(hash);
	}

	public HashSet<T> GetHashSet<T>()
	{
		return BasePool<HashSet<T>, HashSetPool<T>>.ForPlugin(this).Get();
	}

	public void FreeHashSet<T>(HashSet<T> list)
	{
		BasePool<HashSet<T>, HashSetPool<T>>.ForPlugin(this).Free(list);
	}

	public StringBuilder GetStringBuilder()
	{
		return BasePool<StringBuilder, StringBuilderPool>.ForPlugin(this).Get();
	}

	public StringBuilder GetStringBuilder(string initial)
	{
		StringBuilder stringBuilder = BasePool<StringBuilder, StringBuilderPool>.ForPlugin(this).Get();
		stringBuilder.Append(initial);
		return stringBuilder;
	}

	public void FreeStringBuilder(StringBuilder sb)
	{
		BasePool<StringBuilder, StringBuilderPool>.ForPlugin(this).Free(sb);
	}

	public string ToStringAndFree(StringBuilder sb)
	{
		string result = sb?.ToString();
		FreeStringBuilder(sb);
		return result;
	}

	public MemoryStream GetMemoryStream()
	{
		return BasePool<MemoryStream, MemoryStreamPool>.ForPlugin(this).Get();
	}

	public void FreeMemoryStream(MemoryStream stream)
	{
		BasePool<MemoryStream, MemoryStreamPool>.ForPlugin(this).Free(stream);
	}

	internal PlaceholderData GetPlaceholderData()
	{
		return (PlaceholderData)BasePool<BasePoolable, PlaceholderDataPool>.ForPlugin(this).Get();
	}

	internal void FreePlaceholderData(PlaceholderData data)
	{
		BasePool<BasePoolable, PlaceholderDataPool>.ForPlugin(this).Free(data);
	}

	internal Boxed<T> GetBoxed<T>(T value)
	{
		Boxed<T> boxed = BasePool<Boxed<T>, BoxedPool<T>>.ForPlugin(this).Get();
		boxed.Value = value;
		return boxed;
	}

	internal void FreeBoxed<T>(Boxed<T> boxed)
	{
		BasePool<Boxed<T>, BoxedPool<T>>.ForPlugin(this).Free(boxed);
	}

	internal void OnPluginUnloaded()
	{
		for (int i = 0; i < _pools.Count; i++)
		{
			IPool pool = _pools[i];
			pool.OnPluginUnloaded(this);
		}
	}

	internal void Clear()
	{
		for (int i = 0; i < _pools.Count; i++)
		{
			IPool pool = _pools[i];
			pool.ClearPoolEntities();
		}
	}

	internal void Wipe()
	{
		for (int i = 0; i < _pools.Count; i++)
		{
			IPool pool = _pools[i];
			pool.RemoveAllPools();
		}
	}

	public void LogDebug(DebugLogger logger)
	{
		logger.StartArray(PluginId.PluginName());
		foreach (IPool pool in _pools)
		{
			pool.LogDebug(logger);
		}
		logger.EndArray();
	}
}
