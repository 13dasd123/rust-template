using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Oxide.Ext.Discord;
using Oxide.Ext.Discord.Callbacks;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Logging;

internal class BulkToEntityCallback<TTemplate, TEntity> : BaseAsyncCallback where TTemplate : class, IBulkTemplate<TEntity> where TEntity : class
{
	private TTemplate _template;

	private List<PlaceholderData> _placeholders;

	private IPendingPromise<List<TEntity>> _promise;

	public static void Start(TTemplate template, List<PlaceholderData> data, IPendingPromise<List<TEntity>> promise)
	{
		BulkToEntityCallback<TTemplate, TEntity> bulkToEntityCallback = DiscordPool.Internal.Get<BulkToEntityCallback<TTemplate, TEntity>>();
		bulkToEntityCallback.Init(template, data, promise);
		bulkToEntityCallback.Run();
	}

	private void Init(TTemplate template, List<PlaceholderData> data, IPendingPromise<List<TEntity>> promise)
	{
		_template = template;
		_placeholders = data;
		_promise = promise;
	}

	protected override ValueTask HandleCallback()
	{
		try
		{
			List<TEntity> list = new List<TEntity>(_placeholders.Count);
			for (int i = 0; i < _placeholders.Count; i++)
			{
				TEntity val = _template.ToEntity(_placeholders[i]);
				if (val != null)
				{
					list.Add(val);
				}
			}
			_promise.Resolve(list);
		}
		catch (Exception ex)
		{
			DiscordExtension.GlobalLogger.Exception("BulkToEntityCallback.HandleCallback An error occured processing placeholders.", ex);
			_promise.Reject(ex);
		}
		return default(ValueTask);
	}

	protected override string GetExceptionMessage()
	{
		return $"Template: {_template.GetType().GetRealTypeName()} Placeholders: {_placeholders?.Count} Promise: {_promise?.Id}";
	}

	protected override void EnterPool()
	{
		_template = null;
		_placeholders = null;
		_promise = null;
	}
}
