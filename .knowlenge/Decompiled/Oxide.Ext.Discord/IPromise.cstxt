using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Interfaces;

public interface IPromise<TPromised>
{
	Snowflake Id { get; }

	IPromise Catch(Action<Exception> onRejected);

	IPromise Catch<TException>(Action<TException> onRejected) where TException : Exception;

	IPromise<TPromised> Catch(Func<Exception, TPromised> onRejected);

	IPromise<TConvert> Then<TConvert>(Func<TPromised, IPromise<TConvert>> onResolved);

	IPromise<TPromised> Then(Action<TPromised> onResolved);

	IPromise<TConvert> Then<TConvert>(Func<TPromised, IPromise<TConvert>> onResolved, Func<Exception, IPromise<TConvert>> onRejected);

	IPromise<TPromised> Then(IPromise<TPromised> promise);

	IPromise Then(Func<TPromised, IPromise> onResolved, Action<Exception> onRejected);

	IPromise<TPromised> Then(Action<TPromised> onResolved, Action<Exception> onRejected);

	IPromise<TConvert> Then<TConvert>(Func<TPromised, TConvert> transform);

	IPromise<IEnumerable<TConvert>> ThenAll<TConvert>(Func<TPromised, IEnumerable<IPromise<TConvert>>> chain);

	IPromise ThenAll(Func<TPromised, IEnumerable<IPromise>> chain);

	IPromise<TPromised> Finally(Action onComplete);

	IPromise ContinueWith(Func<IPromise> onResolved);

	IPromise<TConvert> ContinueWith<TConvert>(Func<IPromise<TConvert>> onComplete);

	ValueTask<TPromised> AsTask();

	ValueTaskAwaiter<TPromised> GetAwaiter();
}
