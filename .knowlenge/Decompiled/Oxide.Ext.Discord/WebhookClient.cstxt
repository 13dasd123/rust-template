using System;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Connections;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Factory;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Rest;
using Oxide.Ext.Discord.Types;

public class WebhookClient : BaseClient, IDebugLoggable
{
	internal readonly WebhookConnection Connection;

	public DiscordWebhook Webhook { get; private set; }

	public WebhookClient(WebhookConnection connection)
	{
		Connection = connection;
		base.Rest = RestHandler.Global;
		Webhook = new DiscordWebhook
		{
			Id = connection.WebhookId,
			Token = connection.WebhookToken,
			Client = this
		};
		base.Initialized = true;
	}

	internal override void HandleConnect()
	{
		DiscordWebhook.GetWebhookWithToken(_clients[0], this, Connection.WebhookId, Connection.WebhookToken).Then(delegate(DiscordWebhook webhook)
		{
			Webhook = webhook;
			Webhook.Client = this;
		}).Catch(delegate(Exception ex)
		{
			Logger.Exception("An error occured connecting the webhook", ex);
		});
	}

	public override void AddClient(DiscordClient client)
	{
		if (!_clients.Contains(client))
		{
			base.AddClient(client);
		}
	}

	internal override void HandleShutdown()
	{
		Logger.Debug("WebhookClient.HandleShutdown Shutting down the webhook");
		Singleton<WebhookClientFactory>.Instance.RemoveWebhook(this);
		base.Rest = null;
		base.Initialized = false;
	}

	public void LogDebug(DebugLogger logger)
	{
		logger.AppendField("Webhook ID", Connection.WebhookId);
		logger.AppendField("Initialized", base.Initialized);
		logger.AppendFieldEnum("Log Level", Logger.LogLevel);
		logger.AppendField("Plugins", GetClientPluginList());
	}
}
