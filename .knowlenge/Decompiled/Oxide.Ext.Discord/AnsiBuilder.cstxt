using System.Text;
using Oxide.Ext.Discord.Builders.Ansi;
using Oxide.Ext.Discord.Cache;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Types;

public class AnsiBuilder
{
	private readonly StringBuilder _sb;

	public AnsiBuilder()
	{
		_sb = DiscordPool.Internal.GetStringBuilder();
		_sb.AppendLine("```ansi");
	}

	public void Append(string text, TextColor color = TextColor.Default, BackgroundColor background = BackgroundColor.Default, FontStyle style = FontStyle.Default)
	{
		_sb.Append("\u001b[");
		ProcessStyles(style);
		if (background != 0)
		{
			_sb.Append(Singleton<EnumCache<BackgroundColor>>.Instance.ToString(background));
			if (color != 0)
			{
				_sb.Append(';');
			}
		}
		if (color != 0)
		{
			_sb.Append(Singleton<EnumCache<TextColor>>.Instance.ToString(color));
		}
		_sb.Append('m');
		_sb.Append(text);
		Reset();
	}

	public void AppendLine(string text, TextColor color = TextColor.Default, BackgroundColor background = BackgroundColor.Default, FontStyle style = FontStyle.Default)
	{
		Append(text, color, background, style);
		_sb.AppendLine();
	}

	public void AppendLine()
	{
		_sb.AppendLine();
	}

	private void ProcessStyles(FontStyle style)
	{
		if (style == FontStyle.Default)
		{
			_sb.Append("0;");
			return;
		}
		if (HasFlag(style, FontStyle.Bold))
		{
			_sb.Append("1;");
		}
		if (HasFlag(style, FontStyle.Underline))
		{
			_sb.Append("4;");
		}
	}

	private void Reset()
	{
		_sb.Append("\u001b[0;0m");
	}

	private bool HasFlag(FontStyle style, FontStyle flag)
	{
		return (style & flag) == flag;
	}

	public string Build()
	{
		_sb.AppendLine();
		_sb.Append("```");
		return DiscordPool.Internal.ToStringAndFree(_sb);
	}
}
