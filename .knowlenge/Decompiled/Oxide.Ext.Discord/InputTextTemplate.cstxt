using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Libraries;

public class InputTextTemplate : BaseComponentTemplate
{
	[JsonProperty("Input Text ID")]
	public string CustomId { get; set; } = string.Empty;

	[JsonConverter(typeof(StringEnumConverter))]
	[JsonProperty("Input Text Style")]
	public InputTextStyles Style { get; set; } = InputTextStyles.Short;

	[JsonProperty("Input Text Label")]
	public string Label { get; set; } = string.Empty;

	[JsonProperty("Input Text Min Length")]
	public int MinLength { get; set; }

	[JsonProperty("Input Text Max Length")]
	public int MaxLength { get; set; } = 4000;

	[JsonProperty("Input Text Placeholder")]
	public string Placeholder { get; set; } = string.Empty;

	[JsonProperty("Input Text Value")]
	public string Value { get; set; } = string.Empty;

	[JsonProperty("Input Text Required")]
	public bool Required { get; set; }

	[JsonConstructor]
	public InputTextTemplate()
		: base(MessageComponentType.InputText)
	{
	}

	public InputTextTemplate(string label, string customId, string value = "", InputTextStyles style = InputTextStyles.Short, bool required = false, string placeholder = "", int minLength = 0, int maxLength = 4000)
		: this()
	{
		Label = label;
		CustomId = customId;
		Value = value;
		Style = style;
		Required = required;
		Placeholder = placeholder;
		MinLength = minLength;
		MaxLength = maxLength;
	}

	public override BaseComponent ToComponent(PlaceholderData data)
	{
		DiscordPlaceholders instance = BaseDiscordLibrary<DiscordPlaceholders>.Instance;
		data?.IncrementDepth();
		InputTextComponent result = new InputTextComponent
		{
			Label = instance.ProcessPlaceholders(Label, data),
			Placeholder = instance.ProcessPlaceholders(Placeholder, data),
			Value = instance.ProcessPlaceholders(Value, data),
			Required = Required,
			Style = Style,
			MinLength = MinLength,
			MaxLength = MaxLength,
			CustomId = CustomId
		};
		data?.DecrementDepth();
		data?.AutoDispose();
		return result;
	}
}
