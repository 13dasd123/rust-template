using System;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Plugins;
using Oxide.Ext.Discord.Types;
using Oxide.Plugins;

internal static class PluginExt
{
	private static readonly Hash<PluginId, string> FullNameCache = new Hash<PluginId, string>();

	private static readonly BidirectionalDictionary<PluginId, Plugin> PluginIds = new BidirectionalDictionary<PluginId, Plugin>();

	internal static PluginId Id(this Plugin plugin)
	{
		if (PluginIds.TryGetValue(plugin, out var value))
		{
			return value;
		}
		value = new PluginId(plugin);
		PluginIds[plugin] = value;
		return value;
	}

	internal static PluginId Id(this IPluginBase plugin)
	{
		return Id((Plugin)plugin);
	}

	internal static string PluginName(this Plugin plugin)
	{
		return plugin?.Name ?? throw new ArgumentNullException("plugin");
	}

	internal static string PluginName(this PluginId pluginId)
	{
		if (pluginId.IsValid && PluginIds.TryGetValue(pluginId, out var value))
		{
			return value.Name;
		}
		return $"Invalid Plugin ID: {pluginId.Id}";
	}

	internal static string FullName(this Plugin plugin)
	{
		if (plugin == null)
		{
			throw new ArgumentNullException("plugin");
		}
		PluginId key = Id(plugin);
		string text = FullNameCache[key];
		if (text == null)
		{
			text = CreatePluginFullName(plugin);
			FullNameCache[key] = text;
		}
		return text;
	}

	internal static string FullName(this PluginId pluginId)
	{
		if (pluginId.IsValid && PluginIds.TryGetValue(pluginId, out var value))
		{
			return FullName(value);
		}
		return $"Invalid Plugin ID: {pluginId.Id}";
	}

	internal static string GetFullName(PluginId pluginId)
	{
		if (pluginId.IsValid && PluginIds.TryGetValue(pluginId, out var value))
		{
			return FullName(value);
		}
		return $"Invalid Plugin ID: {pluginId.Id}";
	}

	internal static void OnPluginLoaded(Plugin plugin)
	{
		FullNameCache[Id(plugin)] = CreatePluginFullName(plugin);
	}

	internal static void OnPluginUnloaded(Plugin plugin)
	{
		FullNameCache.Remove(Id(plugin));
	}

	private static string CreatePluginFullName(Plugin plugin)
	{
		return $"{plugin.Name} by {plugin.Author} v{plugin.Version}";
	}
}
