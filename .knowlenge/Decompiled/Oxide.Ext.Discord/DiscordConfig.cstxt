using System;
using System.Collections.Generic;
using System.IO;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Configuration;
using Oxide.Ext.Discord.Configuration;
using Oxide.Ext.Discord.Logging;

internal class DiscordConfig : ConfigFile
{
	internal static DiscordConfig Instance;

	[JsonProperty("Commands")]
	public DiscordCommandsConfig Commands { get; set; }

	[JsonProperty("Rest")]
	public DiscordRestConfig Rest { get; set; }

	[JsonProperty("Logging")]
	public DiscordLoggingConfig Logging { get; set; }

	[JsonProperty("Users")]
	public DiscordUsersConfig Users { get; set; }

	[JsonProperty("Search")]
	public DiscordSearchConfig Search { get; set; }

	[JsonProperty("Validation")]
	public DiscordValidationConfig Validation { get; set; }

	[JsonProperty("Bot")]
	public DiscordBotConfig Bot { get; set; }

	[JsonProperty("Ip")]
	public DiscordIpConfig Ip { get; set; }

	public DiscordConfig(string filename)
		: base(filename)
	{
		if (Instance != null)
		{
			throw new Exception("Duplicate DiscordConfig Instances");
		}
		Instance = this;
		ApplyDefaults();
	}

	public static void LoadConfig()
	{
		string text = Path.Combine(Interface.Oxide.InstanceDirectory, "discord.config.json");
		DiscordConfig discordConfig = (File.Exists(text) ? ConfigFile.Load<DiscordConfig>(text) : new DiscordConfig(text));
		discordConfig.Save();
	}

	public override void Load(string filename = null)
	{
		try
		{
			base.Load(filename);
			ApplyDefaults();
		}
		catch (Exception ex)
		{
			Interface.Oxide.LogException($"[Discord Extension] Failed to load config file. Using default config. {ex}", ex);
			ApplyDefaults();
		}
	}

	private void ApplyDefaults()
	{
		Commands = new DiscordCommandsConfig
		{
			CommandPrefixes = (Commands?.CommandPrefixes ?? new char[2] { '/', '!' })
		};
		Rest = new DiscordRestConfig
		{
			ApiErrorRetries = (Rest?.ApiErrorRetries ?? 3),
			ApiRateLimitRetries = (Rest?.ApiRateLimitRetries ?? 6)
		};
		Logging = new DiscordLoggingConfig
		{
			HideDiscordErrorCodes = (Logging?.HideDiscordErrorCodes ?? new HashSet<int>()),
			ConsoleLogLevel = (Logging?.ConsoleLogLevel ?? DiscordLogLevel.Info),
			FileLogLevel = (Logging?.FileLogLevel ?? DiscordLogLevel.Off),
			FileDateTimeFormat = "HH:mm:ss.ff"
		};
		Users = new DiscordUsersConfig
		{
			DmBlockedDuration = (Users?.DmBlockedDuration ?? 24f)
		};
		Search = new DiscordSearchConfig
		{
			EnablePlayerNameSearchTrie = true
		};
		Validation = new DiscordValidationConfig
		{
			EnableValidation = (Validation?.EnableValidation ?? true)
		};
		Bot = new DiscordBotConfig
		{
			AutomaticallyApplyGatewayIntents = (Bot?.AutomaticallyApplyGatewayIntents ?? true)
		};
		Ip = new DiscordIpConfig
		{
			StoreIpDuration = (Ip?.StoreIpDuration ?? 30f),
			UnknownCountryEmoji = (Ip?.UnknownCountryEmoji ?? ":signal_strength:")
		};
	}
}
