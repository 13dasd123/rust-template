using Newtonsoft.Json;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;

public class InvalidMessageException : BaseDiscordException
{
	private InvalidMessageException(string message)
		: base(message)
	{
	}

	private InvalidMessageException(string message, BaseMessageCreate create)
		: base(message + "\nBody:" + JsonConvert.SerializeObject(create, Formatting.Indented))
	{
	}

	internal static void ThrowIfMissingRequiredField(BaseMessageCreate create)
	{
		if (string.IsNullOrEmpty(create.Content) && (create.Embeds == null || create.Embeds.Count == 0) && (create.FileAttachments == null || create.FileAttachments.Count == 0) && (create.StickerIds == null || create.StickerIds.Count == 0) && (create.Components == null || create.Components.Count == 0 || create.Components[0].Components.Count == 0) && create.Poll == null)
		{
			throw new InvalidMessageException("Discord Messages require either Content, An Embed, A Sticker, A Message Component, A File, or a Poll", create);
		}
	}

	internal static void ThrowIfInvalidContent(string content)
	{
		if (content != null && content.Length > 2000)
		{
			throw new InvalidMessageException("Content cannot be more than 2000 characters");
		}
	}

	internal static void ThrowIfMaxStickers(int? count)
	{
		if (count > 3)
		{
			throw new InvalidMessageException("Cannot have more than 3 stickers");
		}
	}

	internal static void ThrowIfInvalidFlags(MessageFlags? flags, MessageFlags allowedFlags, string message)
	{
		if (flags.HasValue && (flags & ~allowedFlags) != 0)
		{
			throw new InvalidMessageException(message);
		}
	}

	internal static void ThrowIfInvalidAttachmentDescription(string description)
	{
		if (!string.IsNullOrEmpty(description) && description.Length > 1024)
		{
			throw new InvalidMessageException("Message attachment description cannot be more than 1024 characters");
		}
	}

	internal static void ThrowIfCantBeDeleted(DiscordMessage message)
	{
		MessageType? type = message.Type;
		MessageType? messageType = type;
		if (messageType.HasValue)
		{
			MessageType valueOrDefault = messageType.GetValueOrDefault();
			if (valueOrDefault - 1 <= MessageType.ChannelNameChange || valueOrDefault - 14 <= MessageType.Call || valueOrDefault == MessageType.ThreadStarterMessage)
			{
				throw new InvalidMessageException($"This message cannot be deleted because it is of type {message.Type}");
			}
		}
	}
}
