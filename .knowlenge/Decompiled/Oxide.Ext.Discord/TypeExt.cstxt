using System;
using System.Reflection;
using Oxide.Ext.Discord.Types;

internal static class TypeExt
{
	public static bool IsNullable(this Type objectType)
	{
		return objectType.IsGenericType && objectType.GetGenericTypeDefinition() == typeof(Nullable<>);
	}

	public static Type GetNullableType(this Type objectType)
	{
		return Nullable.GetUnderlyingType(objectType);
	}

	public static bool IsValueType(this Type source)
	{
		return source.IsValueType;
	}

	public static object GetDefault(this Type type)
	{
		return type.IsValueType ? Activator.CreateInstance(type) : null;
	}

	internal static T GetAttribute<T>(this Type type, bool inherit) where T : Attribute
	{
		return type.GetCustomAttribute(typeof(T), inherit) as T;
	}

	internal static bool HasAttribute<T>(this Type type, bool inherit) where T : Attribute
	{
		return GetAttribute<T>(type, inherit) != null;
	}

	public static string GetRealTypeName(this Type t)
	{
		if (!t.IsGenericType)
		{
			return t.Name;
		}
		ValueStringBuilder valueStringBuilder = default(ValueStringBuilder);
		valueStringBuilder.Append(t.Name.AsSpan().Slice(0, t.Name.IndexOf('`')));
		valueStringBuilder.Append('<');
		Type[] genericArguments = t.GetGenericArguments();
		for (int i = 0; i < genericArguments.Length; i++)
		{
			Type t2 = genericArguments[i];
			if (i != 0)
			{
				valueStringBuilder.Append(',');
			}
			valueStringBuilder.Append(GetRealTypeName(t2));
		}
		valueStringBuilder.Append('>');
		return valueStringBuilder.ToString();
	}
}
