using System.IO;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Constants;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Json;
using Oxide.Ext.Discord.Types;

public class DiscordJsonWriter : BasePoolable
{
	public readonly MemoryStream Stream;

	private readonly StreamWriter _streamWriter;

	private readonly JsonTextWriter _writer;

	private StreamReader _reader;

	public DiscordJsonWriter()
	{
		Stream = new MemoryStream();
		_streamWriter = new StreamWriter(Stream, Singleton<DiscordEncoding>.Instance.Encoding, 2048, leaveOpen: true);
		_writer = new JsonTextWriter(_streamWriter);
		_writer.Formatting = Formatting.None;
	}

	public static DiscordJsonWriter Get(DiscordPluginPool pluginPool)
	{
		return pluginPool.Get<DiscordJsonWriter>();
	}

	public static void WriteAndCopy(DiscordPluginPool pluginPool, JsonSerializer serializer, object payload, Stream output)
	{
		DiscordJsonWriter discordJsonWriter = Get(pluginPool);
		discordJsonWriter.Write(serializer, payload);
		discordJsonWriter.Stream.CopyToPooled(output);
		discordJsonWriter.Dispose();
	}

	public void Write(JsonSerializer serializer, object payload)
	{
		ClearStream();
		serializer.Serialize(_writer, payload);
		_writer.Flush();
		_streamWriter.Flush();
	}

	internal string ReadAsString()
	{
		if (_reader == null)
		{
			_reader = new StreamReader(Stream, Singleton<DiscordEncoding>.Instance.Encoding, detectEncodingFromByteOrderMarks: false, 2048, leaveOpen: true);
		}
		ResetStream();
		return _reader.ReadToEnd();
	}

	private void ResetStream()
	{
		Flush();
		Stream.Position = 0L;
	}

	private void ClearStream()
	{
		Flush();
		Stream.SetLength(0L);
	}

	private void Flush()
	{
		_writer.Flush();
		_streamWriter.Flush();
		_reader?.DiscardBufferedData();
	}

	protected override void EnterPool()
	{
		ClearStream();
	}
}
