using System;
using System.Collections.Generic;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Builders;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Libraries;

public class ApplicationCommandGroupBuilder
{
	private readonly CommandOption _option;

	private readonly ServerLocale _defaultLanguage;

	public readonly string CommandName;

	public readonly string GroupName;

	internal ApplicationCommandGroupBuilder(List<CommandOption> options, string name, string description, ServerLocale defaultLanguage, string commandName)
	{
		_defaultLanguage = defaultLanguage;
		_option = new CommandOption(name, description, CommandOptionType.SubCommandGroup, new List<CommandOption>());
		options.Add(_option);
		AddNameLocalization(name, _defaultLanguage);
		AddDescriptionLocalization(description, _defaultLanguage);
		CommandName = commandName;
		GroupName = name;
	}

	[Obsolete("AddNameLocalizations(Plugin plugin, string langKey) has been deprecated and will be removed in the future. Please use AddNameLocalization(string name, string lang) instead.")]
	public ApplicationCommandGroupBuilder AddNameLocalizations(Plugin plugin, string langKey)
	{
		_option.NameLocalizations = BaseDiscordLibrary<DiscordLocales>.Instance.GetDiscordLocalizations(plugin, langKey);
		return this;
	}

	public ApplicationCommandGroupBuilder AddNameLocalization(string name, ServerLocale serverLocale)
	{
		DiscordLocale discordLocale = serverLocale.GetDiscordLocale();
		if (discordLocale.IsValid)
		{
			_option.NameLocalizations[discordLocale.Id] = name;
		}
		return this;
	}

	[Obsolete("AddDescriptionLocalizations(Plugin plugin, string langKey) has been deprecated and will be removed in the future. Please use AddDescriptionLocalization(string name, string lang) instead.")]
	public ApplicationCommandGroupBuilder AddDescriptionLocalizations(Plugin plugin, string langKey)
	{
		_option.DescriptionLocalizations = BaseDiscordLibrary<DiscordLocales>.Instance.GetDiscordLocalizations(plugin, langKey);
		return this;
	}

	private ApplicationCommandGroupBuilder AddDescriptionLocalization(string description, ServerLocale serverLocale)
	{
		DiscordLocale discordLocale = serverLocale.GetDiscordLocale();
		if (discordLocale.IsValid)
		{
			_option.DescriptionLocalizations[discordLocale.Id] = description;
		}
		return this;
	}

	public ApplicationCommandGroupBuilder AddSubCommand(string name, string description, Action<ApplicationSubCommandBuilder> builder = null)
	{
		ApplicationSubCommandBuilder obj = new ApplicationSubCommandBuilder(_option.Options, name, description, _defaultLanguage, CommandName, GroupName);
		builder?.Invoke(obj);
		return this;
	}
}
