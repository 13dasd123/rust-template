using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord;
using Oxide.Ext.Discord.Builders;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Libraries;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class DiscordWebhook
{
	[JsonProperty("id")]
	public Snowflake Id { get; set; }

	[JsonProperty("type")]
	public WebhookType Type { get; set; }

	[JsonProperty("guild_id")]
	public Snowflake? GuildId { get; set; }

	[JsonProperty("channel_id")]
	public Snowflake? ChannelId { get; set; }

	[JsonProperty("user")]
	public DiscordUser User { get; set; }

	[JsonProperty("name")]
	public string Name { get; set; }

	[JsonProperty("avatar")]
	public string Avatar { get; set; }

	[JsonProperty("token")]
	public string Token { get; set; }

	[JsonProperty("application_id")]
	public Snowflake ApplicationId { get; set; }

	[JsonProperty("source_guild")]
	public DiscordGuild SourceGuild { get; set; }

	[JsonProperty("source_channel")]
	public Snowflake SourceChannel { get; set; }

	public WebhookClient Client { get; internal set; }

	private BaseClient GetClient(DiscordClient client)
	{
		return (BaseClient)(((object)Client) ?? ((object)client.Bot));
	}

	public static IPromise<DiscordWebhook> CreateWebhook(DiscordClient client, Snowflake channelId, WebhookCreate create)
	{
		InvalidSnowflakeException.ThrowIfInvalid(channelId);
		return client.Bot.Rest.Post<DiscordWebhook>(client, $"channels/{channelId}/webhooks", create, null);
	}

	public static IPromise<List<DiscordWebhook>> GetChannelWebhooks(DiscordClient client, Snowflake channelId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(channelId);
		return client.Bot.Rest.Get<List<DiscordWebhook>>(client, $"channels/{channelId}/webhooks", null);
	}

	public static IPromise<List<DiscordWebhook>> GetGuildWebhooks(DiscordClient client, Snowflake guildId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(guildId);
		return client.Bot.Rest.Get<List<DiscordWebhook>>(client, $"guilds/{guildId}/webhooks", null);
	}

	public static IPromise<DiscordWebhook> GetWebhook(DiscordClient client, Snowflake webhookId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(webhookId);
		return client.Bot.Rest.Get<DiscordWebhook>(client, $"webhooks/{webhookId}", null);
	}

	public static IPromise<DiscordWebhook> GetWebhookWithToken(DiscordClient client, Snowflake webhookId, string webhookToken)
	{
		InvalidSnowflakeException.ThrowIfInvalid(webhookId);
		return client.Bot.Rest.Get<DiscordWebhook>(client, $"webhooks/{webhookId}/{webhookToken}", null);
	}

	internal static IPromise<DiscordWebhook> GetWebhookWithToken(DiscordClient client, WebhookClient webhookClient, Snowflake webhookId, string webhookToken)
	{
		InvalidSnowflakeException.ThrowIfInvalid(webhookId);
		return webhookClient.Rest.Get<DiscordWebhook>(client, $"webhooks/{webhookId}/{webhookToken}", null);
	}

	public static IPromise<DiscordWebhook> GetWebhookWithUrl(DiscordClient client, string webhookUrl)
	{
		string[] array = webhookUrl.Split(new char[1] { '/' }, StringSplitOptions.RemoveEmptyEntries);
		string text = array[^2];
		string text2 = array[^1];
		return client.Bot.Rest.Get<DiscordWebhook>(client, "webhooks/" + text + "/" + text2, null);
	}

	public IPromise<DiscordWebhook> EditWebhook(DiscordClient client, WebhookEdit edit)
	{
		return client.Bot.Rest.Patch<DiscordWebhook>(client, $"webhooks/{Id}", edit, null);
	}

	public IPromise<DiscordWebhook> ModifyWebhookWithToken(DiscordClient client, WebhookEdit edit)
	{
		return GetClient(client).Rest.Patch<DiscordWebhook>(client, $"webhooks/{Id}/{Token}", edit, null);
	}

	public IPromise DeleteWebhook(DiscordClient client)
	{
		return client.Bot.Rest.Delete(client, $"webhooks/{Id}", null);
	}

	public IPromise DeleteWebhookWithToken(DiscordClient client)
	{
		return GetClient(client).Rest.Delete(client, $"webhooks/{Id}/{Token}", null);
	}

	public IPromise ExecuteWebhook(DiscordClient client, WebhookCreateMessage message, WebhookExecuteParams executeParams = null)
	{
		if (executeParams == null)
		{
			executeParams = WebhookExecuteParams.Default;
		}
		return GetClient(client).Rest.Post(client, $"webhooks/{Id}/{Token}{executeParams.GetWebhookFormat()}{executeParams.ToQueryString()}", message, null);
	}

	public IPromise ExecuteWebhook(DiscordClient client, WebhookMessageBuilder builder, WebhookExecuteParams executeParams = null)
	{
		return ExecuteWebhook(client, builder.Build(), executeParams);
	}

	public IPromise<DiscordMessage> ExecuteWebhookWithMessage(DiscordClient client, WebhookCreateMessage message, WebhookExecuteParams executeParams = null)
	{
		if (executeParams == null)
		{
			executeParams = WebhookExecuteParams.DefaultWait;
		}
		return GetClient(client).Rest.Post<DiscordMessage>(client, $"webhooks/{Id}/{Token}{executeParams.GetWebhookFormat()}{executeParams.ToQueryString()}", message, null);
	}

	public IPromise<DiscordMessage> ExecuteWebhookWithMessage(DiscordClient client, WebhookMessageBuilder builder, WebhookExecuteParams executeParams = null)
	{
		return ExecuteWebhookWithMessage(client, builder.Build(), executeParams);
	}

	public IPromise<DiscordMessage> ExecuteWebhookGlobalTemplate(DiscordClient client, TemplateKey templateName, WebhookCreateMessage message = null, PlaceholderData placeholders = null, WebhookExecuteParams executeParams = null)
	{
		WebhookCreateMessage message2 = DiscordExtension.DiscordMessageTemplates.GetGlobalTemplate(client.Plugin, templateName).ToMessage(placeholders, message);
		return ExecuteWebhookWithMessage(client, message2, executeParams);
	}

	public IPromise<DiscordMessage> ExecuteWebhookTemplate(DiscordClient client, TemplateKey templateName, string language = "en", WebhookCreateMessage message = null, PlaceholderData placeholders = null, WebhookExecuteParams executeParams = null)
	{
		WebhookCreateMessage message2 = DiscordExtension.DiscordMessageTemplates.GetLocalizedTemplate(client.Plugin, templateName, language).ToMessage(placeholders, message);
		return ExecuteWebhookWithMessage(client, message2, executeParams);
	}

	public IPromise<DiscordMessage> GetWebhookMessage(DiscordClient client, Snowflake messageId, WebhookMessageParams messageParams = null)
	{
		InvalidSnowflakeException.ThrowIfInvalid(messageId);
		return GetClient(client).Rest.Get<DiscordMessage>(client, $"webhooks/{Id}/{Token}/messages/{messageId}{messageParams?.ToQueryString()}", null);
	}

	public IPromise<DiscordMessage> EditWebhookMessage(DiscordClient client, Snowflake messageId, WebhookEditMessage message, WebhookMessageParams messageParams = null)
	{
		return GetClient(client).Rest.Patch<DiscordMessage>(client, $"webhooks/{Id}/{Token}/messages/{messageId}{messageParams?.ToQueryString()}", message, null);
	}

	public IPromise<DiscordMessage> EditWebhookMessageGlobalTemplate(DiscordClient client, Snowflake messageId, Plugin plugin, TemplateKey templateName, WebhookEditMessage message = null, PlaceholderData placeholders = null, WebhookMessageParams messageParams = null)
	{
		WebhookEditMessage message2 = DiscordExtension.DiscordMessageTemplates.GetGlobalTemplate(plugin, templateName).ToMessage(placeholders, message);
		return EditWebhookMessage(client, messageId, message2, messageParams);
	}

	public IPromise<DiscordMessage> EditWebhookMessageTemplate(DiscordClient client, Snowflake messageId, Plugin plugin, TemplateKey templateName, string language = "en", WebhookEditMessage message = null, PlaceholderData placeholders = null, WebhookMessageParams messageParams = null)
	{
		WebhookEditMessage message2 = DiscordExtension.DiscordMessageTemplates.GetLocalizedTemplate(plugin, templateName, language).ToMessage(placeholders, message);
		return EditWebhookMessage(client, messageId, message2, messageParams);
	}

	public IPromise DeleteWebhookMessage(DiscordClient client, Snowflake messageId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(messageId);
		return GetClient(client).Rest.Delete(client, $"webhooks/{Id}/{Token}/messages/{messageId}", null);
	}
}
