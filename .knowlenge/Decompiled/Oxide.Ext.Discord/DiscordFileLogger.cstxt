using System;
using System.Collections.Concurrent;
using System.IO;
using System.Text;
using System.Threading;
using Oxide.Core;
using Oxide.Ext.Discord.Cache;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Types;

internal class DiscordFileLogger : IOutputLogger
{
	private readonly ConcurrentQueue<string> _messages = new ConcurrentQueue<string>();

	private readonly string _logFileName;

	private readonly string _dateTimeFormat;

	private readonly AutoResetEvent _reset;

	private static readonly ThreadLocal<StringBuilder> Builder = new ThreadLocal<StringBuilder>(() => new StringBuilder());

	internal DiscordFileLogger(string pluginName, string dateTimeFormat, AutoResetEvent reset)
	{
		_dateTimeFormat = dateTimeFormat;
		_reset = reset;
		string text = Path.Combine(Interface.Oxide.LogDirectory, pluginName);
		if (!Directory.Exists(text))
		{
			Directory.CreateDirectory(text);
		}
		_logFileName = Path.Combine(text, $"{pluginName}-{DateTime.Now:yyyy-MM-dd_HH-mm-ss}.txt");
	}

	public void AddMessage(DiscordLogLevel level, string log, object[] args, Exception ex)
	{
		StringBuilder value = Builder.Value;
		value.Clear();
		Span<char> destination = stackalloc char[_dateTimeFormat.Length];
		DateTime.Now.TryFormat(destination, out var charsWritten, _dateTimeFormat);
		value.Append(destination.Slice(0, charsWritten));
		value.Append(" [");
		value.Append(Singleton<EnumCache<DiscordLogLevel>>.Instance.ToString(level));
		value.Append("]: ");
		if (args.Length != 0)
		{
			value.AppendFormat(log, args);
		}
		else
		{
			value.Append(log);
		}
		_messages.Enqueue(value.ToString());
		if (ex != null)
		{
			_messages.Enqueue(ex.ToString());
		}
		_reset.Set();
	}

	internal void WriteLog()
	{
		if (_messages.IsEmpty)
		{
			return;
		}
		using StreamWriter streamWriter = File.AppendText(_logFileName);
		string result;
		while (_messages.TryDequeue(out result))
		{
			streamWriter.WriteLine(result);
		}
	}

	public void OnShutdown()
	{
		WriteLog();
		Singleton<DiscordFileLoggerFactory>.Instance.RemoveLogger(this);
	}
}
