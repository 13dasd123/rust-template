using Newtonsoft.Json;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Libraries;
using Oxide.Plugins;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class ArgumentLocalization
{
	[JsonProperty("Argument Name")]
	public string Name { get; set; }

	[JsonProperty("Argument Description")]
	public string Description { get; set; }

	[JsonProperty("Argument Choices", NullValueHandling = NullValueHandling.Ignore)]
	public Hash<string, ChoicesLocalization> Choices { get; set; }

	[JsonConstructor]
	private ArgumentLocalization()
	{
	}

	public ArgumentLocalization(CommandOption option, DiscordLocale locale)
	{
		Name = option.NameLocalizations[locale.Id];
		Description = option.DescriptionLocalizations[locale.Id];
		if (option.Choices != null)
		{
			Choices = new Hash<string, ChoicesLocalization>();
			for (int i = 0; i < option.Choices.Count; i++)
			{
				CommandOptionChoice commandOptionChoice = option.Choices[i];
				Choices[commandOptionChoice.Name] = new ChoicesLocalization(commandOptionChoice.Name);
			}
		}
	}

	public void ApplyArgumentLocalization(CommandOption option, DiscordLocale locale)
	{
		option.NameLocalizations[locale.Id] = Name;
		option.DescriptionLocalizations[locale.Id] = Description;
		if (option.Choices != null)
		{
			for (int i = 0; i < option.Choices.Count; i++)
			{
				CommandOptionChoice commandOptionChoice = option.Choices[i];
				Choices?[commandOptionChoice.Name]?.ApplyChoiceLocalization(commandOptionChoice, locale);
			}
		}
	}
}
