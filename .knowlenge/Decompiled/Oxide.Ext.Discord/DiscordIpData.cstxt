using System.Collections.Generic;
using Oxide.Ext.Discord.Data;
using Oxide.Ext.Discord.Data.Ip;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Services.IpApi;
using ProtoBuf;

[ProtoContract]
internal sealed class DiscordIpData : BaseDataFile<DiscordIpData>
{
	[ProtoMember(1)]
	private readonly Dictionary<string, IpData> _ips = new Dictionary<string, IpData>();

	public bool HasData(string ip)
	{
		return _ips.ContainsKey(ip);
	}

	public void AddData(string ip, IpResult result)
	{
		_ips[ip] = new IpData(result);
		OnDataChanged();
	}

	public string GetCountryName(string ip)
	{
		IpData value;
		return _ips.TryGetValue(ip, out value) ? value.CountryName : "Unknown";
	}

	public string GetCountryCode(string ip)
	{
		IpData value;
		return _ips.TryGetValue(ip, out value) ? value.CountryCode : string.Empty;
	}

	internal override void OnDataLoaded(DataFileInfo info)
	{
		base.OnDataLoaded(info);
		int count = _ips.Count;
		_ips.RemoveAll((IpData ip) => ip.IsExpired);
		if (count != _ips.Count)
		{
			OnDataChanged();
		}
	}
}
