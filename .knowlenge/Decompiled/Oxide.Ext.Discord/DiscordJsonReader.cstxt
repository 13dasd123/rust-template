using System;
using System.IO;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Ext.Discord.Constants;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Json;
using Oxide.Ext.Discord.Types;

public class DiscordJsonReader : BasePoolable
{
	internal readonly MemoryStream Stream;

	private readonly StreamReader _reader;

	public DiscordJsonReader()
	{
		Stream = new MemoryStream();
		_reader = new StreamReader(Stream, Singleton<DiscordEncoding>.Instance.Encoding);
	}

	public static DiscordJsonReader Create(DiscordPluginPool pluginPool)
	{
		return pluginPool.Get<DiscordJsonReader>();
	}

	public static DiscordJsonReader CreateFromStream(DiscordPluginPool pluginPool, Stream stream)
	{
		DiscordJsonReader discordJsonReader = Create(pluginPool);
		discordJsonReader.CopyFrom(stream);
		return discordJsonReader;
	}

	public static T DeserializeFrom<T>(JsonSerializer serializer, Stream stream)
	{
		DiscordJsonReader discordJsonReader = new DiscordJsonReader();
		discordJsonReader.CopyFrom(stream);
		T result = discordJsonReader.Deserialize<T>(serializer);
		discordJsonReader.Dispose();
		return result;
	}

	public void CopyFrom(Stream stream)
	{
		ClearStream();
		stream.CopyToPooled(Stream);
	}

	public string ReadAsString()
	{
		ResetStream();
		return _reader.ReadToEnd();
	}

	public T Deserialize<T>(JsonSerializer serializer)
	{
		ResetStream();
		try
		{
			using JsonTextReader jsonTextReader = new JsonTextReader(_reader);
			jsonTextReader.CloseInput = false;
			return serializer.Deserialize<T>(jsonTextReader);
		}
		catch (Exception ex)
		{
			Interface.Oxide.LogException($"Failed to Deserialize. Pos: {Stream.Position} Length: {Stream.Length}", ex);
			ResetStream();
			Interface.Oxide.LogDebug("A:" + ReadAsString());
			Interface.Oxide.LogDebug("B:" + Singleton<DiscordEncoding>.Instance.Encoding.GetString(Stream.ToArray(), 0, (int)Stream.Length));
			throw;
		}
	}

	private void ResetStream()
	{
		Stream.Position = 0L;
		_reader.DiscardBufferedData();
	}

	private void ClearStream()
	{
		_reader.DiscardBufferedData();
		Stream.SetLength(0L);
	}

	protected override void EnterPool()
	{
		ClearStream();
	}
}
