using Newtonsoft.Json;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Helpers;
using Oxide.Ext.Discord.Interfaces;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class DiscordRole : ISnowflakeEntity, IDiscordValidation
{
	[JsonProperty("id")]
	public Snowflake Id { get; set; }

	[JsonProperty("name")]
	public string Name { get; set; }

	[JsonProperty("color")]
	public DiscordColor Color { get; set; }

	[JsonProperty("hoist")]
	public bool? Hoist { get; set; }

	[JsonProperty("icon")]
	public string Icon { get; set; }

	[JsonProperty("unicode_emoji")]
	public string UnicodeEmoji { get; set; }

	[JsonProperty("position")]
	public int Position { get; set; }

	[JsonProperty("permissions")]
	public PermissionFlags Permissions { get; set; }

	[JsonProperty("managed")]
	public bool Managed { get; set; }

	[JsonProperty("mentionable")]
	public bool Mentionable { get; set; }

	[JsonProperty("tags")]
	public RoleTags Tags { get; set; }

	[JsonProperty("flags")]
	public RoleFlags Flags { get; set; }

	public string Mention => DiscordFormatting.MentionRole(Id);

	public string RoleIcon => (!string.IsNullOrEmpty(Icon)) ? DiscordCdn.GetRoleIcon(Id) : string.Empty;

	public bool HasPermission(PermissionFlags perm)
	{
		return (Permissions & perm) == perm;
	}

	public bool IsBoosterRole()
	{
		return Managed && Tags != null && !Tags.BotId.HasValue;
	}

	internal DiscordRole UpdateRole(DiscordRole role)
	{
		DiscordRole result = (DiscordRole)MemberwiseClone();
		if (role.Name != null)
		{
			Name = role.Name;
		}
		Color = role.Color;
		Hoist = role.Hoist;
		Position = role.Position;
		Permissions = role.Permissions;
		Managed = role.Managed;
		Mentionable = role.Mentionable;
		Flags = role.Flags;
		if (role.Tags != null)
		{
			Tags = role.Tags;
		}
		return result;
	}

	public void Validate()
	{
		InvalidGuildRoleException.ThrowIfInvalidRoleName(Name);
	}
}
