using System;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Plugins;
using Oxide.Ext.Discord.Types;
using Oxide.Plugins;

public class DiscordPool : BaseDiscordLibrary<DiscordPool>, IDebugLoggable
{
	private readonly Hash<PluginId, DiscordPluginPool> _pluginPools = new Hash<PluginId, DiscordPluginPool>();

	internal static DiscordPluginPool Internal;

	private readonly ILogger _logger;

	internal DiscordPool(ILogger logger)
	{
		_logger = logger;
	}

	public DiscordPluginPool GetOrCreate(Plugin plugin)
	{
		if (plugin == null)
		{
			throw new ArgumentNullException("plugin");
		}
		return CreatePoolInternal(plugin);
	}

	internal void CreateInternal(Plugin plugin)
	{
		Internal = CreatePoolInternal(plugin);
		Internal.SetSettings(PoolSettings.CreateInternal());
	}

	private DiscordPluginPool CreatePoolInternal(Plugin plugin)
	{
		PluginId key = plugin.Id();
		DiscordPluginPool discordPluginPool = _pluginPools[key];
		if (discordPluginPool == null)
		{
			discordPluginPool = new DiscordPluginPool(plugin);
			_pluginPools[key] = discordPluginPool;
		}
		return discordPluginPool;
	}

	protected override void OnPluginLoaded(DiscordClient client)
	{
		if (client.Plugin is IDiscordPool discordPool)
		{
			discordPool.Pool = GetOrCreate(client.Plugin);
		}
	}

	protected override void OnPluginUnloaded(Plugin plugin)
	{
		PluginId key = plugin.Id();
		DiscordPluginPool discordPluginPool = _pluginPools[key];
		if (discordPluginPool != null)
		{
			discordPluginPool.OnPluginUnloaded();
			_pluginPools.Remove(key);
		}
	}

	internal void Clear()
	{
		foreach (DiscordPluginPool value in _pluginPools.Values)
		{
			value.Clear();
		}
	}

	internal void Wipe()
	{
		foreach (DiscordPluginPool value in _pluginPools.Values)
		{
			value.Wipe();
		}
	}

	public void LogDebug(DebugLogger logger)
	{
		logger.AppendObject("Internal", Internal);
		foreach (DiscordPluginPool value in _pluginPools.Values)
		{
			if (value != Internal)
			{
				logger.AppendObject(value.PluginName, value);
			}
		}
	}
}
