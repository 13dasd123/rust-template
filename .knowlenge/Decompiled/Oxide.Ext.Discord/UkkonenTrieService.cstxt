using System.Collections.Generic;
using Oxide.Core.Libraries.Covalence;
using Oxide.Ext.Discord.Cache;
using Oxide.Ext.Discord.Services;
using Oxide.Ext.Discord.Types;

internal class UkkonenTrieService : IPlayerSearchService
{
	private readonly UkkonenTrie<IPlayer> _online = new UkkonenTrie<IPlayer>(PlayerEquals);

	private readonly UkkonenTrie<IPlayer> _all = new UkkonenTrie<IPlayer>(PlayerEquals);

	internal UkkonenTrieService()
	{
		foreach (IPlayer item in Singleton<OxideLibrary>.Instance.Covalence.Players.All)
		{
			_all.Add(item.Name, item);
		}
		foreach (IPlayer item2 in Singleton<OxideLibrary>.Instance.Covalence.Players.Connected)
		{
			_all.Add(item2.Name, item2);
		}
	}

	public IEnumerable<IPlayer> GetOnlinePlayers(string name)
	{
		return _online.Search(name);
	}

	public IEnumerable<IPlayer> GetAllPlayers(string name)
	{
		return _all.Search(name);
	}

	public void OnUserConnected(IPlayer player)
	{
		_all.Remove(player.Name, player);
		_online.Remove(player.Name, player);
		_all.Add(player.Name, player);
		_online.Add(player.Name, player);
	}

	public void OnUserDisconnected(IPlayer player)
	{
		_online.Remove(player.Name, player);
	}

	public void OnUserNameUpdated(IPlayer player, string oldName, string newName)
	{
		_all.Remove(oldName, player);
		_all.Add(newName, player);
	}

	private static bool PlayerEquals(IPlayer left, IPlayer right)
	{
		return left.Id == right.Id;
	}
}
