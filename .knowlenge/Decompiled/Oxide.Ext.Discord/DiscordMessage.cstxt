using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord;
using Oxide.Ext.Discord.Builders;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Data;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Json;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Types;
using Oxide.Plugins;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class DiscordMessage : IFileAttachments
{
	[JsonProperty("id")]
	public Snowflake Id { get; set; }

	[JsonProperty("channel_id")]
	public Snowflake ChannelId { get; set; }

	[JsonProperty("guild_id")]
	public Snowflake? GuildId { get; set; }

	[JsonProperty("author")]
	public DiscordUser Author { get; set; }

	[JsonProperty("member")]
	public GuildMember Member { get; set; }

	[JsonProperty("content")]
	public string Content { get; set; }

	[JsonProperty("timestamp")]
	public DateTime Timestamp { get; set; }

	[JsonProperty("edited_timestamp")]
	public DateTime? EditedTimestamp { get; set; }

	[JsonProperty("tts")]
	public bool Tts { get; set; }

	[JsonProperty("mention_everyone")]
	public bool MentionEveryone { get; set; }

	[JsonConverter(typeof(HashListConverter<DiscordUser>))]
	[JsonProperty("mentions")]
	public Hash<Snowflake, DiscordUser> Mentions { get; set; }

	[JsonProperty("mention_roles")]
	public List<Snowflake> MentionRoles { get; set; }

	[JsonConverter(typeof(HashListConverter<ChannelMention>))]
	[JsonProperty("mention_channels")]
	public Hash<Snowflake, ChannelMention> MentionsChannels { get; set; }

	[JsonConverter(typeof(HashListConverter<MessageAttachment>))]
	[JsonProperty("attachments")]
	public Hash<Snowflake, MessageAttachment> Attachments { get; set; }

	[JsonProperty("embeds")]
	public List<DiscordEmbed> Embeds { get; set; }

	[JsonProperty("reactions")]
	public List<MessageReaction> Reactions { get; set; }

	[JsonProperty("nonce")]
	public string Nonce { get; set; }

	[JsonProperty("pinned")]
	public bool Pinned { get; set; }

	[JsonProperty("webhook_id")]
	public Snowflake? WebhookId { get; set; }

	[JsonProperty("type")]
	public MessageType? Type { get; set; }

	[JsonProperty("activity")]
	public MessageActivity Activity { get; set; }

	[JsonProperty("application")]
	public DiscordApplication Application { get; set; }

	[JsonProperty("application_id")]
	public Snowflake? ApplicationId { get; set; }

	[JsonProperty("message_reference")]
	public MessageReference MessageReference { get; set; }

	[JsonProperty("message_snapshots")]
	public List<MessageSnapshot> MessageSnapshots { get; set; }

	[JsonProperty("flags")]
	public MessageFlags Flags { get; set; }

	[JsonProperty("referenced_message")]
	public DiscordMessage ReferencedMessage { get; internal set; }

	[JsonProperty("interaction_metadata")]
	public MessageInteraction InteractionMetadata { get; set; }

	[Obsolete("Deprecated in favor of InteractionMetadata")]
	[JsonProperty("interaction")]
	public MessageInteraction Interaction { get; set; }

	[JsonProperty("thread")]
	public DiscordChannel Thread { get; set; }

	[JsonProperty("components")]
	public List<ActionRowComponent> Components { get; set; }

	[JsonConverter(typeof(HashListConverter<DiscordSticker>))]
	[JsonProperty("sticker_items")]
	public Hash<Snowflake, DiscordSticker> StickerItems { get; set; }

	[JsonProperty("position")]
	public int? Position { get; set; }

	[JsonProperty("role_subscription_data")]
	public RoleSubscription RoleSubscriptionData { get; set; }

	[JsonProperty("poll")]
	public DiscordPoll Poll { get; set; }

	[JsonProperty("call")]
	public MessageCall Call { get; set; }

	public List<MessageFileAttachment> FileAttachments { get; set; }

	public static IPromise<DiscordMessage> Create(DiscordClient client, Snowflake channelId, MessageCreate message)
	{
		InvalidSnowflakeException.ThrowIfInvalid(channelId);
		UserData userData = client.Bot.DirectMessagesByChannelId[channelId]?.UserData;
		DateTime? dateTime = userData?.GetBlockedUntil();
		if (dateTime.HasValue && dateTime.Value > DateTime.UtcNow)
		{
			DiscordUser user = userData.GetUser();
			client.Logger.Debug("Blocking CreateMessage. User {0} ({1}) is DM blocked until {2}.", user.FullUserName, user.Id, userData.GetBlockedUntil());
			return Promise<DiscordMessage>.Rejected(new BlockedUserException(userData.GetUser(), dateTime.Value));
		}
		IPromise<DiscordMessage> promise = client.Bot.Rest.Post<DiscordMessage>(client, $"channels/{channelId}/messages", message, null);
		if (userData != null)
		{
			promise.Catch(delegate(ResponseError ex)
			{
				userData.ProcessError(client, ex);
			});
		}
		return promise;
	}

	public static IPromise<DiscordMessage> Create(DiscordClient client, Snowflake channelId, DiscordMessageBuilder builder)
	{
		return Create(client, channelId, builder.Build());
	}

	public static IPromise<DiscordMessage> Create(DiscordClient client, Snowflake channelId, string message)
	{
		InvalidSnowflakeException.ThrowIfInvalid(channelId);
		MessageCreate message2 = new MessageCreate
		{
			Content = message
		};
		return Create(client, channelId, message2);
	}

	public static IPromise<DiscordMessage> Create(DiscordClient client, Snowflake channelId, DiscordEmbed embed)
	{
		InvalidSnowflakeException.ThrowIfInvalid(channelId);
		MessageCreate message = new MessageCreate
		{
			Embeds = new List<DiscordEmbed> { embed }
		};
		return Create(client, channelId, message);
	}

	public static IPromise<DiscordMessage> Create(DiscordClient client, Snowflake channelId, List<DiscordEmbed> embeds)
	{
		InvalidSnowflakeException.ThrowIfInvalid(channelId);
		MessageCreate message = new MessageCreate
		{
			Embeds = embeds
		};
		return Create(client, channelId, message);
	}

	public static IPromise<DiscordMessage> CreateGlobalTemplateMessage(DiscordClient client, Snowflake channelId, Plugin plugin, TemplateKey templateName, MessageCreate message = null, PlaceholderData placeholders = null)
	{
		MessageCreate message2 = DiscordExtension.DiscordMessageTemplates.GetGlobalTemplate(plugin, templateName).ToMessage(placeholders, message);
		return Create(client, channelId, message2);
	}

	public static IPromise<DiscordMessage> CreateTemplateMessage(DiscordClient client, Snowflake channelId, Plugin plugin, TemplateKey templateName, string language = "en", MessageCreate message = null, PlaceholderData placeholders = null)
	{
		MessageCreate message2 = DiscordExtension.DiscordMessageTemplates.GetLocalizedTemplate(plugin, templateName, language).ToMessage(placeholders, message);
		return Create(client, channelId, message2);
	}

	public static IPromise<DiscordMessage> GetMessage(DiscordClient client, Snowflake channelId, Snowflake messageId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(channelId);
		InvalidSnowflakeException.ThrowIfInvalid(messageId);
		return client.Bot.Rest.Get<DiscordMessage>(client, $"channels/{channelId}/messages/{messageId}", null);
	}

	public IPromise<DiscordMessage> Reply(DiscordClient client, MessageCreate message)
	{
		if (message == null)
		{
			throw new ArgumentNullException("message");
		}
		if (message.MessageReference == null)
		{
			message.MessageReference = new MessageReference
			{
				MessageId = Id,
				GuildId = GuildId
			};
		}
		return Create(client, ChannelId, message);
	}

	public IPromise<DiscordMessage> Reply(DiscordClient client, DiscordMessageBuilder builder)
	{
		return Reply(client, builder.Build());
	}

	public IPromise<DiscordMessage> Reply(DiscordClient client, string message)
	{
		MessageCreate message2 = new MessageCreate
		{
			Content = message
		};
		return Reply(client, message2);
	}

	public IPromise<DiscordMessage> Reply(DiscordClient client, DiscordEmbed embed)
	{
		return Reply(client, new List<DiscordEmbed> { embed });
	}

	public IPromise<DiscordMessage> Reply(DiscordClient client, List<DiscordEmbed> embeds)
	{
		MessageCreate message = new MessageCreate
		{
			Embeds = embeds
		};
		return Reply(client, message);
	}

	public IPromise<DiscordMessage> ReplyWithGlobalTemplate(DiscordClient client, TemplateKey templateName, MessageCreate message = null, PlaceholderData placeholders = null)
	{
		MessageCreate message2 = DiscordExtension.DiscordMessageTemplates.GetGlobalTemplate(client.Plugin, templateName).ToMessage(placeholders, message);
		return Reply(client, message2);
	}

	public IPromise<DiscordMessage> ReplyWithTemplate(DiscordClient client, TemplateKey templateName, string language = "en", MessageCreate message = null, PlaceholderData placeholders = null)
	{
		MessageCreate message2 = DiscordExtension.DiscordMessageTemplates.GetLocalizedTemplate(client.Plugin, templateName, language).ToMessage(placeholders, message);
		return Reply(client, message2);
	}

	public IPromise<DiscordMessage> CrossPostMessage(DiscordClient client, Snowflake messageId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(Id);
		InvalidSnowflakeException.ThrowIfInvalid(messageId);
		return client.Bot.Rest.Post<DiscordMessage>(client, $"channels/{Id}/messages/{messageId}/crosspost", null, null);
	}

	public IPromise<DiscordMessage> CrossPostMessage(DiscordClient client, DiscordMessage message)
	{
		if (message == null)
		{
			throw new ArgumentNullException("message");
		}
		return CrossPostMessage(client, message.Id);
	}

	public IPromise CreateReaction(DiscordClient client, DiscordEmoji emoji)
	{
		if (emoji == null)
		{
			throw new ArgumentNullException("emoji");
		}
		return CreateReaction(client, emoji.ToDataString());
	}

	public IPromise CreateReaction(DiscordClient client, string emoji)
	{
		InvalidSnowflakeException.ThrowIfInvalid(Id);
		InvalidSnowflakeException.ThrowIfInvalid(ChannelId);
		InvalidEmojiException.ThrowIfInvalidEmojiString(emoji);
		return client.Bot.Rest.Put(client, $"channels/{ChannelId}/messages/{Id}/reactions/{emoji}/@me", null, null);
	}

	public IPromise DeleteOwnReaction(DiscordClient client, DiscordEmoji emoji)
	{
		if (emoji == null)
		{
			throw new ArgumentNullException("emoji");
		}
		return DeleteOwnReaction(client, emoji.ToDataString());
	}

	public IPromise DeleteOwnReaction(DiscordClient client, string emoji)
	{
		InvalidSnowflakeException.ThrowIfInvalid(Id);
		InvalidSnowflakeException.ThrowIfInvalid(ChannelId);
		InvalidEmojiException.ThrowIfInvalidEmojiString(emoji);
		return client.Bot.Rest.Delete(client, $"channels/{ChannelId}/messages/{Id}/reactions/{emoji}/@me", null);
	}

	public IPromise DeleteUserReaction(DiscordClient client, DiscordEmoji emoji, Snowflake userId)
	{
		return DeleteUserReaction(client, emoji.ToDataString(), userId);
	}

	public IPromise DeleteUserReaction(DiscordClient client, string emoji, Snowflake userId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(Id);
		InvalidSnowflakeException.ThrowIfInvalid(ChannelId);
		InvalidSnowflakeException.ThrowIfInvalid(userId);
		InvalidEmojiException.ThrowIfInvalidEmojiString(emoji);
		return client.Bot.Rest.Delete(client, $"channels/{ChannelId}/messages/{Id}/reactions/{emoji}/{userId}", null);
	}

	public IPromise<List<DiscordUser>> GetReactions(DiscordClient client, DiscordEmoji emoji)
	{
		if (emoji == null)
		{
			throw new ArgumentNullException("emoji");
		}
		return GetReactions(client, emoji.ToDataString());
	}

	public IPromise<List<DiscordUser>> GetReactions(DiscordClient client, string emoji)
	{
		InvalidEmojiException.ThrowIfInvalidEmojiString(emoji);
		return client.Bot.Rest.Get<List<DiscordUser>>(client, $"channels/{ChannelId}/messages/{Id}/reactions/{emoji}", null);
	}

	public IPromise DeleteAllReactions(DiscordClient client)
	{
		InvalidSnowflakeException.ThrowIfInvalid(Id);
		InvalidSnowflakeException.ThrowIfInvalid(ChannelId);
		return client.Bot.Rest.Delete(client, $"channels/{ChannelId}/messages/{Id}/reactions", null);
	}

	public IPromise DeleteAllReactionsForEmoji(DiscordClient client, DiscordEmoji emoji)
	{
		if (emoji == null)
		{
			throw new ArgumentNullException("emoji");
		}
		return DeleteAllReactionsForEmoji(client, emoji.ToDataString());
	}

	public IPromise DeleteAllReactionsForEmoji(DiscordClient client, string emoji)
	{
		InvalidEmojiException.ThrowIfInvalidEmojiString(emoji);
		return client.Bot.Rest.Delete(client, $"channels/{ChannelId}/messages/{Id}/reactions/{emoji}", null);
	}

	public IPromise<DiscordMessage> Edit(DiscordClient client, MessageUpdate update)
	{
		InvalidSnowflakeException.ThrowIfInvalid(Id);
		InvalidSnowflakeException.ThrowIfInvalid(ChannelId);
		return client.Bot.Rest.Patch<DiscordMessage>(client, $"channels/{ChannelId}/messages/{Id}", update, null);
	}

	public IPromise<DiscordMessage> EditGlobalTemplateMessage(DiscordClient client, TemplateKey templateName, PlaceholderData placeholders = null, MessageUpdate update = null)
	{
		MessageUpdate update2 = DiscordExtension.DiscordMessageTemplates.GetGlobalTemplate(client.Plugin, templateName).ToMessage(placeholders, update);
		return Edit(client, update2);
	}

	public IPromise<DiscordMessage> EditTemplateMessage(DiscordClient client, TemplateKey templateName, string language = "en", PlaceholderData placeholders = null, MessageUpdate update = null)
	{
		MessageUpdate update2 = DiscordExtension.DiscordMessageTemplates.GetLocalizedTemplate(client.Plugin, templateName, language).ToMessage(placeholders, update);
		return Edit(client, update2);
	}

	public IPromise Delete(DiscordClient client)
	{
		InvalidSnowflakeException.ThrowIfInvalid(Id);
		InvalidSnowflakeException.ThrowIfInvalid(ChannelId);
		InvalidMessageException.ThrowIfCantBeDeleted(this);
		return client.Bot.Rest.Delete(client, $"channels/{ChannelId}/messages/{Id}", null);
	}

	public IPromise Pin(DiscordClient client)
	{
		InvalidSnowflakeException.ThrowIfInvalid(Id);
		InvalidSnowflakeException.ThrowIfInvalid(ChannelId);
		return client.Bot.Rest.Put(client, $"channels/{ChannelId}/pins/{Id}", null, null);
	}

	public IPromise Unpin(DiscordClient client)
	{
		return client.Bot.Rest.Delete(client, $"channels/{ChannelId}/pins/{Id}", null);
	}

	public IPromise<DiscordChannel> StartThread(DiscordClient client, ThreadCreateFromMessage create)
	{
		if (create == null)
		{
			throw new ArgumentNullException("create");
		}
		return client.Bot.Rest.Post<DiscordChannel>(client, $"channels/{ChannelId}/messages/{Id}/threads", create, null);
	}

	public IPromise<GetPollAnswerResponse> GetPollVoters(DiscordClient client, PollAnswers answer, GetPollAnswerVoters filter = null)
	{
		return client.Bot.Rest.Get<GetPollAnswerResponse>(client, $"channels/{ChannelId}/polls/{Id}/answers/{answer.AnswerId}{filter?.ToQueryString()}", null);
	}

	public IPromise<DiscordMessage> EndPoll(DiscordClient client)
	{
		return client.Bot.Rest.Post<DiscordMessage>(client, $"channels/{ChannelId}/polls/{Id}/expire", null, null);
	}
}
