using System;
using System.Text;
using System.Threading;
using Oxide.Core;
using Oxide.Ext.Discord.Cache;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Types;

internal class DiscordConsoleLogger : IOutputLogger
{
	private readonly string _pluginName;

	private static readonly ThreadLocal<StringBuilder> Builder = new ThreadLocal<StringBuilder>(() => new StringBuilder());

	public DiscordConsoleLogger(string pluginName)
	{
		_pluginName = "[" + pluginName + "] ";
	}

	public void AddMessage(DiscordLogLevel level, string log, object[] args, Exception ex)
	{
		StringBuilder value = Builder.Value;
		value.Clear();
		value.Append(_pluginName);
		value.Append('[');
		value.Append(Singleton<EnumCache<DiscordLogLevel>>.Instance.ToString(level));
		value.Append("]: ");
		if (args.Length != 0)
		{
			value.AppendFormat(log, args);
		}
		else
		{
			value.Append(log);
		}
		string text = value.ToString();
		switch (level)
		{
		case DiscordLogLevel.Debug:
		case DiscordLogLevel.Warning:
			Interface.Oxide.LogWarning(text);
			break;
		case DiscordLogLevel.Error:
			Interface.Oxide.LogError(text);
			break;
		case DiscordLogLevel.Exception:
			Interface.Oxide.LogException(text, ex);
			break;
		default:
			Interface.Oxide.LogInfo(text);
			break;
		}
	}

	public void OnShutdown()
	{
	}
}
