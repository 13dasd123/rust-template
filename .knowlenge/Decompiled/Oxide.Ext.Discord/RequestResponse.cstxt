using System.Net.Http;
using System.Threading.Tasks;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Rest;
using Oxide.Ext.Discord.Types;

public class RequestResponse : BasePoolable
{
	internal RequestCompletedStatus Status;

	internal RateLimitResponse RateLimit;

	internal ResponseError Error;

	internal DiscordHttpStatusCode Code;

	internal string Content;

	private async ValueTask Init(HttpResponseMessage response, RequestCompletedStatus status, ResponseError error = null)
	{
		Status = status;
		Error = error;
		if (response != null)
		{
			Code = (DiscordHttpStatusCode)response.StatusCode;
			Content = await response.Content.ReadAsStringAsync().ConfigureAwait(continueOnCapturedContext: false);
			RateLimit = DiscordPool.Internal.Get<RateLimitResponse>();
			RateLimit.Init(response.Headers, Code, Content);
			error?.SetResponse(Code, Content);
			error?.SetRateLimitResponse(RateLimit.Message, RateLimit.Code);
		}
	}

	public static async ValueTask<RequestResponse> CreateSuccessResponse(HttpResponseMessage httpResponse)
	{
		RequestResponse response = DiscordPool.Internal.Get<RequestResponse>();
		await response.Init(httpResponse, RequestCompletedStatus.Success).ConfigureAwait(continueOnCapturedContext: false);
		return response;
	}

	public static async ValueTask<RequestResponse> CreateExceptionResponse(ResponseError error, HttpResponseMessage httpResponse, RequestCompletedStatus status)
	{
		RequestResponse response = DiscordPool.Internal.Get<RequestResponse>();
		await response.Init(httpResponse, status, error).ConfigureAwait(continueOnCapturedContext: false);
		return response;
	}

	public static async ValueTask<RequestResponse> CreateCancelledResponse()
	{
		RequestResponse response = DiscordPool.Internal.Get<RequestResponse>();
		await response.Init(null, RequestCompletedStatus.Cancelled).ConfigureAwait(continueOnCapturedContext: false);
		return response;
	}

	protected override void EnterPool()
	{
		RateLimit?.Dispose();
		Status = RequestCompletedStatus.Success;
		RateLimit = null;
		Error = null;
		Code = (DiscordHttpStatusCode)0;
		Content = null;
	}
}
