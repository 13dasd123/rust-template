using System.Collections.Generic;
using Oxide.Ext.Discord.Builders;
using Oxide.Ext.Discord.Cache;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Types;

public class GetEntitlements : IDiscordQueryString, IDiscordValidation
{
	public Snowflake? UserId { get; set; }

	public List<Snowflake> SkuIds { get; set; }

	public Snowflake? Before { get; set; }

	public Snowflake? After { get; set; }

	public int? Limit { get; set; }

	public Snowflake? GuildId { get; set; }

	public bool? ExcludeEnded { get; set; }

	public string ToQueryString()
	{
		Validate();
		QueryStringBuilder queryStringBuilder = default(QueryStringBuilder);
		if (UserId.HasValue)
		{
			queryStringBuilder.Add("user_id", UserId.Value);
		}
		if (SkuIds != null)
		{
			queryStringBuilder.AddList("sku_ids", SkuIds, ",");
		}
		if (Before.HasValue)
		{
			queryStringBuilder.Add("before", Before.Value);
		}
		if (After.HasValue)
		{
			queryStringBuilder.Add("after", After.Value);
		}
		if (Limit.HasValue)
		{
			queryStringBuilder.Add("limit", Limit.Value.ToString());
		}
		if (GuildId.HasValue)
		{
			queryStringBuilder.Add("guild_id", GuildId.Value.ToString());
		}
		if (ExcludeEnded.HasValue)
		{
			queryStringBuilder.Add("exclude_ended", Singleton<StringCache<bool>>.Instance.ToString(ExcludeEnded.Value));
		}
		return queryStringBuilder.ToString();
	}

	public void Validate()
	{
		InvalidGetEntitlementException.ThrowIfInvalidLimit(Limit);
	}
}
