using System;
using System.Collections.Generic;
using Oxide.Core;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Factory;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Types;

public class BasePromise : BasePoolable, IRejectable
{
	protected Exception Exception;

	private bool _isDisposing;

	protected readonly List<RejectHandler> Rejects = new List<RejectHandler>();

	internal readonly Action<Exception> OnReject;

	private readonly Action _onRejectInternal;

	private readonly Action _dispose;

	public Snowflake Id { get; private set; }

	public PromiseState State { get; protected set; } = PromiseState.Pending;

	protected BasePromise()
	{
		OnReject = Reject;
		_onRejectInternal = InvokeRejectHandlersInternal;
		_dispose = Dispose;
	}

	public virtual void Reject(Exception ex)
	{
		PromiseException.ThrowIfDisposed(this);
		PromiseException.ThrowIfNotPending(State);
		Exception = ex;
		State = PromiseState.Rejected;
		InvokeRejectHandlers(ex);
	}

	private void InvokeRejectHandlers(Exception ex)
	{
		Exception = ex;
		if (ThreadEx.IsMain)
		{
			InvokeRejectHandlersInternal();
		}
		else
		{
			Interface.Oxide.NextTick(_onRejectInternal);
		}
	}

	private void InvokeRejectHandlersInternal()
	{
		for (int i = 0; i < Rejects.Count; i++)
		{
			Rejects[i].Reject(Exception);
		}
		ClearHandlers();
		DelayedDispose();
	}

	protected virtual void ClearHandlers()
	{
		Rejects.Clear();
	}

	protected void DelayedDispose()
	{
		if (!_isDisposing)
		{
			_isDisposing = true;
			Interface.Oxide.NextTick(_dispose);
		}
	}

	protected override void LeavePool()
	{
		Id = Singleton<SnowflakeIdFactory>.Instance.Generate();
		base.LeavePool();
	}

	protected override void EnterPool()
	{
		Id = default(Snowflake);
		State = PromiseState.Pending;
		Exception = null;
		Rejects.Clear();
		_isDisposing = false;
		base.EnterPool();
	}
}
