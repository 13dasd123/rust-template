using System;
using System.Collections.Generic;
using Oxide.Ext.Discord;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Connections;
using Oxide.Ext.Discord.Factory;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Types;
using Oxide.Plugins;

internal sealed class WebhookClientFactory : Singleton<WebhookClientFactory>
{
	private readonly Hash<string, WebhookClient> _activeWebhooks = new Hash<string, WebhookClient>();

	public IEnumerable<WebhookClient> Clients => _activeWebhooks.Values;

	private WebhookClientFactory()
	{
	}

	public WebhookClient InitializeWebhookClient(DiscordClient client, WebhookConnection connection)
	{
		try
		{
			WebhookClient webhookClient = _activeWebhooks[connection.WebhookToken];
			if (webhookClient == null)
			{
				DiscordExtension.GlobalLogger.Debug("WebhookClientFactory.InitializeWebhookClient Creating new $WebhookClient");
				webhookClient = new WebhookClient(connection);
				_activeWebhooks[connection.WebhookToken] = webhookClient;
			}
			DiscordExtension.GlobalLogger.Debug("WebhookClientFactory.InitializeWebhookClient Adding {0} client to webhook {1}", client.PluginName, connection.WebhookId);
			return webhookClient;
		}
		catch (Exception exception)
		{
			DiscordExtension.GlobalLogger.Exception("WebhookClientFactory.InitializeWebhookClient An error occured adding {0} client", client.PluginName, exception);
			return null;
		}
	}

	public void RemoveWebhook(WebhookClient client)
	{
		_activeWebhooks.Remove(client.Connection.WebhookToken);
	}

	public void UpdateLogLevel()
	{
		foreach (WebhookClient value in _activeWebhooks.Values)
		{
			value.UpdateLogLevel(Singleton<DiscordLoggerFactory>.Instance.GetLogLevel());
		}
	}
}
