using System;
using Newtonsoft.Json;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Connections;
using Oxide.Ext.Discord.Data;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Factory;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Plugins;
using Oxide.Ext.Discord.Rest;
using Oxide.Ext.Discord.Types;
using Oxide.Ext.Discord.WebSockets;
using Oxide.Plugins;

public class BotClient : BaseClient, IDebugLoggable
{
	public readonly Hash<Snowflake, DiscordGuild> Servers = new Hash<Snowflake, DiscordGuild>();

	public readonly Hash<Snowflake, DiscordChannel> DirectMessagesByChannelId = new Hash<Snowflake, DiscordChannel>();

	public readonly Hash<Snowflake, DiscordChannel> DirectMessagesByUserId = new Hash<Snowflake, DiscordChannel>();

	internal readonly BotConnection Connection;

	internal DiscordWebSocket WebSocket;

	internal readonly DiscordHook Hooks;

	internal readonly JsonSerializerSettings JsonSettings;

	internal readonly JsonSerializer JsonSerializer;

	private GatewayReadyEvent _readyData;

	public DiscordApplication Application { get; private set; }

	public DiscordUser BotUser { get; private set; }

	public bool IsFullyLoaded { get; private set; }

	public bool IsReady => _readyData != null;

	public BotClient(BotConnection connection)
	{
		Connection = new BotConnection(connection);
		base.Rest = new RestHandler(this, Logger);
		WebSocket = new DiscordWebSocket(this, Logger);
		Hooks = new DiscordHook(Logger);
		JsonSettings = new JsonSerializerSettings
		{
			NullValueHandling = NullValueHandling.Ignore,
			Formatting = Formatting.None
		};
		JsonSerializer = JsonSerializer.Create(JsonSettings);
		base.Initialized = true;
	}

	internal override void HandleConnect()
	{
		if (base.Initialized)
		{
			Logger.Debug("BotClient.HandleConnect Connecting to websocket");
			WebSocket.Connect();
		}
	}

	public void DisconnectWebsocket(bool reconnect = false, bool resume = false)
	{
		if (base.Initialized)
		{
			WebSocket.Disconnect(reconnect, resume);
		}
	}

	internal void ResetWebSocket()
	{
		try
		{
			WebSocket?.Shutdown();
		}
		finally
		{
			WebSocket = new DiscordWebSocket(this, Logger);
			WebSocket.Connect();
		}
	}

	internal void ResetRestApi()
	{
		try
		{
			base.Rest?.Shutdown();
		}
		finally
		{
			base.Rest = new RestHandler(this, Logger);
		}
	}

	internal override void HandleShutdown()
	{
		Logger.Debug("BotClient.HandleShutdown Shutting down the bot");
		Singleton<BotClientFactory>.Instance.RemoveBot(this);
		try
		{
			WebSocket?.Shutdown();
		}
		catch (Exception exception)
		{
			Logger.Exception("BotClient.HandleShutdown An error occured shutting down the bot websocket.", exception);
		}
		finally
		{
			WebSocket = null;
		}
		ShutdownRest();
		_readyData = null;
		base.Initialized = false;
	}

	public override void AddClient(DiscordClient client)
	{
		TokenMismatchException.ThrowIfMismatchedToken(client, Connection);
		if (_clients.Contains(client))
		{
			throw new Exception("This client is already in the list of clients");
		}
		base.AddClient(client);
		Hooks.AddPlugin(client);
	}

	internal override void HandleAlreadyConnected(DiscordClient client)
	{
		GatewayIntents gatewayIntents = Connection.Intents | client.Connection.Intents;
		if (gatewayIntents != Connection.Intents)
		{
			Connection.Intents = gatewayIntents;
			if (WebSocket.Intents != Connection.Intents && WebSocket.IsConnected())
			{
				Logger.Debug("New intents have been requested for the a connected bot. Reconnecting with updated intents.");
				DisconnectWebsocket(reconnect: true);
			}
		}
		if (_readyData == null)
		{
			return;
		}
		_readyData.Guilds = Servers;
		DiscordHook.CallPluginHook(client.Plugin, "OnDiscordGatewayReady", _readyData);
		foreach (DiscordGuild value in Servers.Values)
		{
			if (value.IsAvailable)
			{
				DiscordHook.CallPluginHook(client.Plugin, "OnDiscordGuildCreated", value);
			}
			if (value.HasLoadedAllMembers)
			{
				DiscordHook.CallPluginHook(client.Plugin, "OnDiscordGuildMembersLoaded", value);
			}
		}
		if (IsFullyLoaded)
		{
			DiscordHook.CallPluginHook(client.Plugin, "OnDiscordBotFullyLoaded");
		}
	}

	public override bool RemoveClient(DiscordClient client)
	{
		if (base.RemoveClient(client))
		{
			return true;
		}
		Hooks.RemovePlugin(client.Plugin);
		GatewayIntents gatewayIntents = GatewayIntents.None;
		for (int i = 0; i < _clients.Count; i++)
		{
			DiscordClient discordClient = _clients[i];
			gatewayIntents |= discordClient.Connection.Intents;
		}
		Connection.Intents = gatewayIntents;
		return false;
	}

	internal void OnClientReady(GatewayReadyEvent ready)
	{
		Application = ready.Application;
		BotUser = ready.User;
		bool flag = _readyData == null;
		if (flag)
		{
			Hooks.CallHook("OnDiscordGatewayReady", ready);
			if (BaseDataFile<DiscordUserData>.Instance.TryGetBotData(ready.User.Id, out var data))
			{
				foreach (UserData value in data.Users.Values)
				{
					DiscordChannel discordChannel = value.CreateDmChannel();
					DirectMessagesByChannelId[discordChannel.Id] = discordChannel;
					DirectMessagesByUserId[value.UserId] = discordChannel;
					discordChannel.UserData = value;
					value.ClearBlockIfExpired();
				}
			}
		}
		else
		{
			Hooks.CallHook("OnDiscordGatewayReconnected");
		}
		_readyData = ready;
		_readyData.Guilds = Servers;
		if (flag)
		{
			DiscordExtensionCore.Instance.ApplyApplicationCommands(this);
		}
		if (Connection.Intents != WebSocket.Intents)
		{
			DisconnectWebsocket(reconnect: true);
		}
	}

	internal void OnBotFullyLoaded()
	{
		if (!IsFullyLoaded)
		{
			IsFullyLoaded = true;
			Hooks.CallHook("OnDiscordBotFullyLoaded");
		}
	}

	internal DiscordClient GetFirstClient()
	{
		return (_clients.Count != 0) ? _clients[0] : null;
	}

	public void SendWebSocketCommand(DiscordClient client, GatewayCommandCode opCode, object data)
	{
		if (base.Initialized)
		{
			WebSocket.Send(client, opCode, data);
		}
	}

	public DiscordGuild GetGuild(Snowflake? guildId)
	{
		if (guildId.HasValue && guildId.Value.IsValid())
		{
			return Servers[guildId.Value];
		}
		return null;
	}

	public DiscordChannel GetChannel(Snowflake channelId, Snowflake? guildId)
	{
		if (guildId.HasValue)
		{
			DiscordGuild guild = GetGuild(guildId);
			if (guild != null)
			{
				return guild.Channels?[channelId] ?? guild.Threads?[channelId];
			}
			return null;
		}
		return DirectMessagesByChannelId[channelId];
	}

	public void AddGuild(DiscordGuild guild)
	{
		Servers[guild.Id] = guild;
	}

	public void AddGuildOrUpdate(DiscordGuild guild)
	{
		DiscordGuild discordGuild = Servers[guild.Id];
		if (discordGuild != null)
		{
			Logger.Verbose("BotClient.AddGuildOrUpdate Updating Existing Guild {0}", guild.Id);
			discordGuild.Edit(guild);
		}
		else
		{
			Logger.Verbose("BotClient.AddGuildOrUpdate Adding new Guild {0}", guild.Id);
			Servers[guild.Id] = guild;
		}
	}

	internal void RemoveGuild(Snowflake guildId)
	{
		Servers.Remove(guildId);
	}

	public void AddDirectChannel(DiscordChannel channel)
	{
		if (channel.Type != ChannelType.Dm)
		{
			Logger.Warning("BotClient.AddDirectChannel Tried to add a non DM channel");
			return;
		}
		Logger.Verbose("BotClient.AddDirectChannel Adding New Channel {0}", channel.Id);
		DirectMessagesByChannelId[channel.Id] = channel;
		BotData botData = BaseDataFile<DiscordUserData>.Instance.GetBotData(BotUser.Id);
		foreach (DiscordUser value in channel.Recipients.Values)
		{
			if (!value.Bot.HasValue || !value.Bot.Value)
			{
				DirectMessagesByUserId[value.Id] = channel;
				UserData userData2 = (channel.UserData = botData.GetUserData(value.Id));
				if (userData2.DmChannelId != channel.Id)
				{
					userData2.DmChannelId = channel.Id;
					BaseDataFile<DiscordUserData>.Instance.OnDataChanged();
				}
			}
		}
	}

	public void RemoveDirectMessageChannel(Snowflake id)
	{
		DiscordChannel discordChannel = DirectMessagesByChannelId[id];
		if (discordChannel != null)
		{
			DirectMessagesByChannelId.Remove(id);
			DirectMessagesByUserId.RemoveAll((DiscordChannel c) => c.Id == id);
		}
	}

	internal bool IsPluginRegistered(Plugin plugin)
	{
		for (int i = 0; i < _clients.Count; i++)
		{
			DiscordClient discordClient = _clients[i];
			if (discordClient.Plugin == plugin)
			{
				return true;
			}
		}
		return false;
	}

	public void LogDebug(DebugLogger logger)
	{
		logger.AppendField("Client", Connection.HiddenToken);
		logger.AppendField("Initialized", base.Initialized);
		logger.AppendFieldEnum("Log Level", Logger.LogLevel);
		logger.AppendFieldEnum("Intents", Connection.Intents);
		logger.AppendField("Plugins", GetClientPluginList());
		logger.AppendObject("Bot", BotUser);
		logger.AppendObject("Application", Application);
		logger.AppendObject("Websocket", WebSocket);
		logger.AppendObject("REST API", base.Rest);
	}
}
