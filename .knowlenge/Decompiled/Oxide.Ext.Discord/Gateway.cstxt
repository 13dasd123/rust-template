using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Constants;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Logging;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
internal class Gateway
{
	internal static readonly List<int> Shard = new List<int> { 0, 1 };

	internal static readonly ConnectionProperties Properties = new ConnectionProperties();

	[JsonProperty("url")]
	public string Url { get; set; }

	public static string WebsocketUrl { get; private set; }

	public static DateTime LastUpdate { get; private set; }

	private static IPromise<Gateway> GetGateway(BotClient client)
	{
		return client.Rest.Get<Gateway>(client.GetFirstClient(), "gateway", null);
	}

	public static IPromise<Gateway> UpdateGatewayUrl(BotClient client)
	{
		return GetGateway(client).Then(delegate(Gateway gateway)
		{
			WebsocketUrl = gateway.Url + "/?" + DiscordEndpoints.Websocket.WebsocketArgs;
			LastUpdate = DateTime.UtcNow;
			client.Logger.Debug("Gateway.UpdateGatewayUrl Updated Gateway Url: {0}", WebsocketUrl);
		});
	}
}
