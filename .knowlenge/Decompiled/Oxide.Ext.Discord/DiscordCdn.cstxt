using System;
using Oxide.Ext.Discord.Cache;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Types;

public static class DiscordCdn
{
	public const string CdnUrl = "https://cdn.discordapp.com";

	public static string GetCustomEmojiUrl(Snowflake emojiId, DiscordImageFormat format)
	{
		if (1 == 0)
		{
		}
		if (format - 1 <= DiscordImageFormat.WebP)
		{
			string result = "https://cdn.discordapp.com/emojis/" + emojiId.ToString() + "." + GetExtension(format);
			if (1 == 0)
			{
			}
			return result;
		}
		throw new ArgumentException("ImageFormat is not valid for Custom Emoji. Valid types are (Auto, Png, Jpeg, WebP, Gif)", "format");
	}

	public static string GetGuildIconUrl(Snowflake guildId, string guildIcon, DiscordImageFormat format = DiscordImageFormat.Auto)
	{
		if (1 == 0)
		{
		}
		if (format <= DiscordImageFormat.Gif)
		{
			string result = "https://cdn.discordapp.com/icons/" + guildId.ToString() + "/" + guildIcon + "." + GetExtension(format, guildIcon);
			if (1 == 0)
			{
			}
			return result;
		}
		throw new ArgumentException("ImageFormat is not valid for Guild Icon. Valid types are (Auto, Png, Jpeg, WebP, Gif)", "format");
	}

	public static string GetGuildSplashUrl(Snowflake guildId, string guildSplash, DiscordImageFormat format = DiscordImageFormat.Auto)
	{
		if (1 == 0)
		{
		}
		if (format - 1 <= DiscordImageFormat.Png)
		{
			string result = "https://cdn.discordapp.com/splashes/" + guildId.ToString() + "/" + guildSplash + "." + GetExtension(format);
			if (1 == 0)
			{
			}
			return result;
		}
		throw new ArgumentException("ImageFormat is not valid for Guild Splash. Valid types are (Png, Jpeg, WebP)", "format");
	}

	public static string GetGuildDiscoverySplashUrl(Snowflake guildId, string guildDiscoverySplash, DiscordImageFormat format = DiscordImageFormat.Auto)
	{
		if (1 == 0)
		{
		}
		if (format <= DiscordImageFormat.WebP)
		{
			string result = "https://cdn.discordapp.com/discovery-splashes/" + guildId.ToString() + "/" + guildDiscoverySplash + "." + GetExtension(format, guildDiscoverySplash);
			if (1 == 0)
			{
			}
			return result;
		}
		throw new ArgumentException("ImageFormat is not valid for Guild Discovery Splash. Valid types are (Auto, Png, Jpeg, WebP)", "format");
	}

	public static string GetGuildBannerUrl(Snowflake guildId, string guildBanner, DiscordImageFormat format = DiscordImageFormat.Auto)
	{
		if (1 == 0)
		{
		}
		if (format <= DiscordImageFormat.Gif)
		{
			string result = "https://cdn.discordapp.com/banners/" + guildId.ToString() + "/" + guildBanner + "." + GetExtension(format, guildBanner);
			if (1 == 0)
			{
			}
			return result;
		}
		throw new ArgumentException("ImageFormat is not valid for Guild Banner. Valid types are (Auto, Png, Jpeg, WebP, GIF)", "format");
	}

	public static string GetUserBanner(Snowflake userId, string userBanner, DiscordImageFormat format = DiscordImageFormat.Auto)
	{
		if (1 == 0)
		{
		}
		if (format <= DiscordImageFormat.Gif)
		{
			string result = "https://cdn.discordapp.com/banners/" + userId.ToString() + "/" + userBanner + "." + GetExtension(format, userBanner);
			if (1 == 0)
			{
			}
			return result;
		}
		throw new ArgumentException("ImageFormat is not valid for User Banner. Valid types are (Auto, Png, Jpeg, WebP, GIF)", "format");
	}

	public static string GetUserDefaultAvatarUrl(string userDiscriminator)
	{
		return "https://cdn.discordapp.com/embed/avatars/" + uint.Parse(userDiscriminator) % 5 + ".png";
	}

	public static string GetUserAvatarUrl(Snowflake userId, string userAvatar, DiscordImageFormat format = DiscordImageFormat.Auto)
	{
		if (1 == 0)
		{
		}
		if (format <= DiscordImageFormat.Gif)
		{
			string result = "https://cdn.discordapp.com/avatars/" + userId.ToString() + "/" + userAvatar + "." + GetExtension(format, userAvatar);
			if (1 == 0)
			{
			}
			return result;
		}
		throw new ArgumentException("ImageFormat is not valid for User Avatar. Valid types are (Auto, Png, Jpeg, WebP, Gif)", "format");
	}

	public static string GetGuildMemberAvatar(Snowflake guildId, Snowflake userId, string memberAvatar, DiscordImageFormat format = DiscordImageFormat.Auto)
	{
		if (1 == 0)
		{
		}
		if (format <= DiscordImageFormat.Gif)
		{
			string result = "https://cdn.discordapp.com/guilds/" + guildId.ToString() + "/users/" + userId.ToString() + "/avatars/" + memberAvatar + "." + GetExtension(format, memberAvatar);
			if (1 == 0)
			{
			}
			return result;
		}
		throw new ArgumentException("ImageFormat is not valid for Guild Member Avatar. Valid types are (Auto, Png, Jpeg, WebP, Gif)", "format");
	}

	public static string GetUserAvatarDecoration(AvatarDecorationData data, DiscordImageFormat format = DiscordImageFormat.Auto)
	{
		if (data == null)
		{
			throw new ArgumentNullException("data");
		}
		if (1 == 0)
		{
		}
		if (format == DiscordImageFormat.Auto || format == DiscordImageFormat.Png)
		{
			string result = "https://cdn.discordapp.com/avatar-decoration-presets/" + data.Asset + "." + GetExtension(format, data.Asset);
			if (1 == 0)
			{
			}
			return result;
		}
		throw new ArgumentException("ImageFormat is not valid for User Avatar Decoration. Valid types are (Auto, Png)", "format");
	}

	public static string GetApplicationIconUrl(Snowflake applicationId, string icon, DiscordImageFormat format = DiscordImageFormat.Auto)
	{
		if (1 == 0)
		{
		}
		if (format <= DiscordImageFormat.WebP)
		{
			string result = "https://cdn.discordapp.com/app-icons/" + applicationId.ToString() + "/" + icon + "." + GetExtension(format, icon);
			if (1 == 0)
			{
			}
			return result;
		}
		throw new ArgumentException("ImageFormat is not valid for Application Icon. Valid types are (Auto, Png, Jpeg, WebP)", "format");
	}

	public static string GetApplicationCoverUrl(Snowflake applicationId, string coverImage, DiscordImageFormat format = DiscordImageFormat.Auto)
	{
		if (1 == 0)
		{
		}
		if (format <= DiscordImageFormat.WebP)
		{
			string result = "https://cdn.discordapp.com/app-icons/" + applicationId.ToString() + "/" + coverImage + "." + GetExtension(format, coverImage);
			if (1 == 0)
			{
			}
			return result;
		}
		throw new ArgumentException("ImageFormat is not valid for Application Cover. Valid types are (Auto, Png, Jpeg, WebP)", "format");
	}

	public static string GetApplicationAssetUrl(Snowflake applicationId, string assetId, DiscordImageFormat format = DiscordImageFormat.Auto)
	{
		if (1 == 0)
		{
		}
		if (format <= DiscordImageFormat.WebP)
		{
			string result = "https://cdn.discordapp.com/app-assets/" + applicationId.ToString() + "/" + assetId + "." + GetExtension(format, assetId);
			if (1 == 0)
			{
			}
			return result;
		}
		throw new ArgumentException("ImageFormat is not valid for Application Asset. Valid types are (Auto, Png, Jpeg, WebP)", "format");
	}

	public static string GetAchievementIconUrl(Snowflake applicationId, Snowflake achievementId, string iconHash)
	{
		return "https://cdn.discordapp.com/app-assets/" + applicationId.ToString() + "/achievements/" + achievementId.ToString() + "/icons/" + iconHash + ".png";
	}

	public static string GetStorePageAssetUrl(Snowflake applicationId, ulong assetId, DiscordImageFormat format = DiscordImageFormat.Auto)
	{
		if (1 == 0)
		{
		}
		if (format <= DiscordImageFormat.WebP)
		{
			string result = "https://cdn.discordapp.com/app-assets/" + applicationId.ToString() + "/store/" + Singleton<StringCache<ulong>>.Instance.ToString(assetId) + "." + GetExtension(format);
			if (1 == 0)
			{
			}
			return result;
		}
		throw new ArgumentException("ImageFormat is not valid for Store Page Asset Url. Valid types are (Auto, Png, Jpeg, WebP)", "format");
	}

	public static string GetTeamIconUrl(Snowflake teamId, string teamIcon, DiscordImageFormat format = DiscordImageFormat.Auto)
	{
		if (1 == 0)
		{
		}
		if (format <= DiscordImageFormat.WebP)
		{
			string result = "https://cdn.discordapp.com/team-icons/" + teamId.ToString() + "/" + teamIcon + "." + GetExtension(format, teamIcon);
			if (1 == 0)
			{
			}
			return result;
		}
		throw new ArgumentException("ImageFormat is not valid for Team Icon. Valid types are (Auto, Png, Jpeg, WebP)", "format");
	}

	public static string GetStickerPackBanner(Snowflake applicationId, Snowflake bannerAssetId, DiscordImageFormat format = DiscordImageFormat.Auto)
	{
		if (1 == 0)
		{
		}
		if (format <= DiscordImageFormat.WebP)
		{
			string result = "https://cdn.discordapp.com/app-assets/" + applicationId.ToString() + "/store/" + bannerAssetId.ToString() + "." + GetExtension(format);
			if (1 == 0)
			{
			}
			return result;
		}
		throw new ArgumentException("ImageFormat is not valid for Sticker Pack Banner. Valid types are (Auto, Png, Jpeg, WebP)", "format");
	}

	public static string GetSticker(DiscordSticker sticker)
	{
		if (sticker == null)
		{
			throw new ArgumentNullException("sticker");
		}
		StickerFormatType formatType = sticker.FormatType;
		if (1 == 0)
		{
		}
		string result;
		switch (formatType)
		{
		case StickerFormatType.Png:
		case StickerFormatType.Apng:
			result = "https://cdn.discordapp.com/stickers/" + sticker.Id.ToString() + "." + GetExtension(DiscordImageFormat.Png);
			break;
		case StickerFormatType.Lottie:
			result = "https://cdn.discordapp.com/stickers/" + sticker.Id.ToString() + "." + GetExtension(DiscordImageFormat.Lottie);
			break;
		case StickerFormatType.Gif:
			result = "https://cdn.discordapp.com/stickers/" + sticker.Id.ToString() + "." + GetExtension(DiscordImageFormat.Gif);
			break;
		default:
			throw new ArgumentException("Sticker does not container a valid format type", "FormatType");
		}
		if (1 == 0)
		{
		}
		return result;
	}

	public static string GetRoleIcon(Snowflake roleId, DiscordImageFormat format = DiscordImageFormat.Auto)
	{
		if (1 == 0)
		{
		}
		if (format <= DiscordImageFormat.WebP)
		{
			string result = "https://cdn.discordapp.com/role-icons/" + roleId.ToString() + "." + GetExtension(format);
			if (1 == 0)
			{
			}
			return result;
		}
		throw new ArgumentException("ImageFormat is not valid for Role Icon. Valid types are (Auto, Png, Jpeg, WebP)", "format");
	}

	public static string GetGuildScheduledEventCover(Snowflake scheduledEventId, DiscordImageFormat format = DiscordImageFormat.Auto)
	{
		if (1 == 0)
		{
		}
		if (format <= DiscordImageFormat.WebP)
		{
			string result = "https://cdn.discordapp.com/guild-events/" + scheduledEventId.ToString() + "/scheduled_event_cover_image." + GetExtension(format);
			if (1 == 0)
			{
			}
			return result;
		}
		throw new ArgumentException("ImageFormat is not valid for Guild Scheduled Event Cover. Valid types are (Auto, Png, Jpeg, WebP)", "format");
	}

	public static string GetGuildMemberBanner(Snowflake guildId, Snowflake userId, DiscordImageFormat format = DiscordImageFormat.Auto)
	{
		if (1 == 0)
		{
		}
		if (format <= DiscordImageFormat.Gif)
		{
			string result = "https://cdn.discordapp.com/guilds/" + guildId.ToString() + "/users/" + userId.ToString() + "/banners/member_banner." + GetExtension(format);
			if (1 == 0)
			{
			}
			return result;
		}
		throw new ArgumentException("ImageFormat is not valid for Guild Member Banner. Valid types are (Auto, Png, Jpeg, WebP, Gif)", "format");
	}

	public static string GetChannelIcon(Snowflake channelId, string icon)
	{
		return "https://cdn.discordapp.com/channel-icons/" + channelId.ToString() + "/" + icon + ".png";
	}

	public static string GetExtension(DiscordImageFormat format, string image)
	{
		if (format == DiscordImageFormat.Auto)
		{
			format = (image.StartsWith("a_") ? DiscordImageFormat.Gif : DiscordImageFormat.Png);
		}
		return GetExtension(format);
	}

	private static string GetExtension(DiscordImageFormat format)
	{
		if (1 == 0)
		{
		}
		string result;
		switch (format)
		{
		case DiscordImageFormat.Jpg:
			result = "jpeg";
			break;
		case DiscordImageFormat.Auto:
		case DiscordImageFormat.Png:
			result = "png";
			break;
		case DiscordImageFormat.WebP:
			result = "webp";
			break;
		case DiscordImageFormat.Gif:
			result = "gif";
			break;
		case DiscordImageFormat.Lottie:
			result = "json";
			break;
		default:
			throw new ArgumentOutOfRangeException("format", format.ToString(), "Format is not a valid ImageFormat");
		}
		if (1 == 0)
		{
		}
		return result;
	}
}
