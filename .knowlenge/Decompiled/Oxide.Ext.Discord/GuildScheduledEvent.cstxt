using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Interfaces;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class GuildScheduledEvent : ISnowflakeEntity
{
	[JsonProperty("id")]
	public Snowflake Id { get; set; }

	[JsonProperty("guild_id")]
	public Snowflake GuildId { get; set; }

	[JsonProperty("channel_id")]
	public Snowflake? ChannelId { get; set; }

	[JsonProperty("creator_id")]
	public Snowflake? CreatorId { get; set; }

	[JsonProperty("name")]
	public string Name { get; set; }

	[JsonProperty("description")]
	public string Description { get; set; }

	[JsonProperty("scheduled_start_time")]
	public DateTime ScheduledStartTime { get; set; }

	[JsonProperty("scheduled_end_time ")]
	public DateTime? ScheduledEndTime { get; set; }

	[JsonProperty("privacy_level")]
	public ScheduledEventPrivacyLevel PrivacyLevel { get; set; }

	[JsonProperty("status")]
	public ScheduledEventStatus Status { get; set; }

	[JsonProperty("entity_type")]
	public ScheduledEventEntityType EntityType { get; set; }

	[JsonProperty("entity_id")]
	public Snowflake? EntityId { get; set; }

	[JsonProperty("entity_metadata")]
	public ScheduledEventEntityMetadata EntityMetadata { get; set; }

	[JsonProperty("creator")]
	public DiscordUser Creator { get; set; }

	[JsonProperty("user_count")]
	public int? UserCount { get; set; }

	public static IPromise<List<GuildScheduledEvent>> GetGuildEvents(DiscordClient client, Snowflake guildId, ScheduledEventLookup lookup = null)
	{
		InvalidSnowflakeException.ThrowIfInvalid(guildId);
		return client.Bot.Rest.Get<List<GuildScheduledEvent>>(client, $"guilds/{guildId}/scheduled-events{lookup?.ToQueryString()}", null);
	}

	public static IPromise<GuildScheduledEvent> Create(DiscordClient client, Snowflake guildId, ScheduledEventCreate create)
	{
		InvalidSnowflakeException.ThrowIfInvalid(guildId);
		return client.Bot.Rest.Post<GuildScheduledEvent>(client, $"guilds/{guildId}/scheduled-events", create, null);
	}

	public static IPromise<GuildScheduledEvent> Get(DiscordClient client, Snowflake guildId, Snowflake eventId, ScheduledEventLookup lookup = null)
	{
		InvalidSnowflakeException.ThrowIfInvalid(guildId);
		InvalidSnowflakeException.ThrowIfInvalid(eventId);
		return client.Bot.Rest.Get<GuildScheduledEvent>(client, $"guilds/{guildId}/scheduled-events/{eventId}{lookup?.ToQueryString()}", null);
	}

	public IPromise<GuildScheduledEvent> Edit(DiscordClient client, Snowflake guildId, Snowflake eventId, ScheduledEventUpdate update)
	{
		InvalidSnowflakeException.ThrowIfInvalid(guildId);
		InvalidSnowflakeException.ThrowIfInvalid(eventId);
		return client.Bot.Rest.Patch<GuildScheduledEvent>(client, $"guilds/{guildId}/scheduled-events/{eventId}", update, null);
	}

	public IPromise Delete(DiscordClient client, Snowflake guildId, Snowflake eventId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(guildId);
		InvalidSnowflakeException.ThrowIfInvalid(eventId);
		return client.Bot.Rest.Delete(client, $"guilds/{guildId}/scheduled-events/{eventId}", null);
	}

	public static IPromise<List<ScheduledEventUser>> GetUsers(DiscordClient client, Snowflake guildId, Snowflake eventId, ScheduledEventUsersLookup lookup = null)
	{
		InvalidSnowflakeException.ThrowIfInvalid(guildId);
		InvalidSnowflakeException.ThrowIfInvalid(eventId);
		return client.Bot.Rest.Get<List<ScheduledEventUser>>(client, $"guilds/{guildId}/scheduled-events/{eventId}{lookup?.ToQueryString()}", null);
	}

	internal void Update(GuildScheduledEvent scheduledEvent)
	{
		if (scheduledEvent.ChannelId.HasValue)
		{
			ChannelId = scheduledEvent.ChannelId;
		}
		if (scheduledEvent.EntityMetadata != null)
		{
			if (EntityMetadata == null)
			{
				EntityMetadata = scheduledEvent.EntityMetadata;
			}
			else
			{
				EntityMetadata.Update(scheduledEvent.EntityMetadata);
			}
		}
		if (scheduledEvent.Name != null)
		{
			Name = scheduledEvent.Name;
		}
		if (scheduledEvent.Description != null)
		{
			Description = scheduledEvent.Description;
		}
		PrivacyLevel = scheduledEvent.PrivacyLevel;
		EntityType = scheduledEvent.EntityType;
		Status = scheduledEvent.Status;
		ScheduledStartTime = scheduledEvent.ScheduledStartTime;
		ScheduledEndTime = scheduledEvent.ScheduledEndTime;
	}
}
