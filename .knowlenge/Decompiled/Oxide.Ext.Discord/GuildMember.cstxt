using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Json;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class GuildMember : ISnowflakeEntity
{
	public Snowflake Id => User?.Id ?? default(Snowflake);

	[JsonProperty("user")]
	public DiscordUser User { get; set; }

	[JsonProperty("nick")]
	public string Nickname { get; set; }

	[JsonProperty("avatar")]
	public string Avatar { get; set; }

	[JsonProperty("roles")]
	public List<Snowflake> Roles { get; set; }

	[JsonProperty("joined_at")]
	public DateTime? JoinedAt { get; set; }

	[JsonProperty("premium_since")]
	public DateTime? PremiumSince { get; set; }

	[JsonConverter(typeof(PermissionFlagsStringConverter))]
	[JsonProperty("permissions")]
	public PermissionFlags? Permissions { get; set; }

	[JsonProperty("deaf")]
	public bool Deaf { get; set; }

	[JsonProperty("mute")]
	public bool Mute { get; set; }

	[JsonProperty("flags")]
	public GuildMemberFlags Flags { get; set; }

	[JsonProperty("pending")]
	public bool? Pending { get; set; }

	[JsonProperty("communication_disabled_until")]
	public DateTime? CommunicationDisabledUntil { get; set; }

	[JsonProperty("avatar_decoration_data")]
	public AvatarDecorationData AvatarDecoration { get; set; }

	public DateTime? NickNameLastUpdated { get; internal set; }

	public bool HasLeftGuild { get; internal set; }

	public string DisplayName => (!string.IsNullOrEmpty(Nickname)) ? Nickname : User?.DisplayName;

	public bool IsBot => User.Bot.HasValue && User.Bot.Value;

	public bool HasRole(DiscordRole role)
	{
		if (role == null)
		{
			throw new ArgumentNullException("role");
		}
		return HasRole(role.Id);
	}

	public bool HasRole(Snowflake roleId)
	{
		return Roles.Contains(roleId);
	}
}
