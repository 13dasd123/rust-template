using System;
using System.Collections.Generic;
using Oxide.Ext.Discord.Builders;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;

public abstract class BaseMessageBuilder<TMessage, TBuilder> where TMessage : BaseMessageCreate where TBuilder : BaseMessageBuilder<TMessage, TBuilder>
{
	protected readonly TMessage Message;

	protected readonly TBuilder Builder;

	protected BaseMessageBuilder(TMessage message)
	{
		Builder = (TBuilder)this;
		Message = message;
	}

	public virtual TBuilder AddContent(string content)
	{
		InvalidMessageException.ThrowIfInvalidContent(content);
		Message.Content = content;
		return Builder;
	}

	public virtual TBuilder AsTts(bool enabled = true)
	{
		Message.Tts = enabled;
		return Builder;
	}

	public virtual TBuilder AddEmbed(DiscordEmbed embed)
	{
		if (embed == null)
		{
			throw new ArgumentNullException("embed");
		}
		TMessage message = Message;
		if (message.Embeds == null)
		{
			List<DiscordEmbed> list2 = (message.Embeds = new List<DiscordEmbed>());
		}
		InvalidEmbedException.ThrowIfEmbedLimit(Message.Embeds.Count + 1);
		Message.Embeds.Add(embed);
		return Builder;
	}

	public virtual TBuilder AddEmbed(DiscordEmbedBuilder builder)
	{
		if (builder == null)
		{
			throw new ArgumentNullException("builder");
		}
		return AddEmbed(builder.Build());
	}

	public virtual TBuilder AddEmbeds(ICollection<DiscordEmbed> embeds)
	{
		if (embeds == null)
		{
			throw new ArgumentNullException("embeds");
		}
		TMessage message = Message;
		if (message.Embeds == null)
		{
			List<DiscordEmbed> list2 = (message.Embeds = new List<DiscordEmbed>());
		}
		InvalidEmbedException.ThrowIfEmbedLimit(Message.Embeds.Count + embeds.Count);
		Message.Embeds.AddRange(embeds);
		return Builder;
	}

	public virtual TBuilder AddAllowedMentions(AllowedMentions mentions)
	{
		if (mentions == null)
		{
			throw new ArgumentNullException("mentions");
		}
		Message.AllowedMentions = mentions;
		return Builder;
	}

	public virtual TBuilder SuppressEmbeds()
	{
		TMessage message = Message;
		message.Flags |= MessageFlags.SuppressEmbeds;
		return Builder;
	}

	public virtual TBuilder AddActionRow(ActionRowComponent component)
	{
		if (component == null)
		{
			throw new ArgumentNullException("component");
		}
		TMessage message = Message;
		if (message.Components == null)
		{
			List<ActionRowComponent> list2 = (message.Components = new List<ActionRowComponent>());
		}
		InvalidMessageComponentException.ThrowIfInvalidMaxActionRows(Message.Components.Count + 1);
		Message.Components.Add(component);
		return Builder;
	}

	public virtual TBuilder AddComponents(ICollection<ActionRowComponent> components)
	{
		if (components == null)
		{
			throw new ArgumentNullException("components");
		}
		TMessage message = Message;
		if (message.Components == null)
		{
			List<ActionRowComponent> list2 = (message.Components = new List<ActionRowComponent>());
		}
		InvalidMessageComponentException.ThrowIfInvalidMaxActionRows(Message.Components.Count + components.Count);
		Message.Components.AddRange(components);
		return Builder;
	}

	public virtual TBuilder AddComponents(MessageComponentBuilder builder)
	{
		if (builder == null)
		{
			throw new ArgumentNullException("builder");
		}
		return AddComponents(builder.Build());
	}

	public virtual TBuilder AddAttachment(string filename, byte[] data, string contentType, string description = null, string title = null)
	{
		Message.AddAttachment(filename, data, contentType, description, title);
		return Builder;
	}

	public TMessage Build()
	{
		return Message;
	}
}
