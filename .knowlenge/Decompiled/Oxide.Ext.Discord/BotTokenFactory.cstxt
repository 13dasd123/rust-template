using System;
using System.Text;
using System.Text.RegularExpressions;
using Oxide.Ext.Discord;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Connections;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Factory;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Types;
using Oxide.Plugins;

internal class BotTokenFactory : Singleton<BotTokenFactory>
{
	private readonly Regex _tokenValidator = new Regex("^[\\w-]+\\.[\\w-]+\\.[\\w-]+$", RegexOptions.Compiled);

	private readonly char[] _splitArgs = new char[1] { '.' };

	private readonly Hash<string, BotTokenData> _tokens = new Hash<string, BotTokenData>();

	private BotTokenFactory()
	{
	}

	internal BotTokenData CreateFromClient(DiscordClient client)
	{
		string apiToken = client.Connection.ApiToken;
		BotTokenData botTokenData = _tokens[apiToken];
		if (botTokenData == null)
		{
			botTokenData = ParseToken(apiToken, client.PluginName);
			_tokens[apiToken] = botTokenData;
		}
		if (!_tokenValidator.IsMatch(apiToken))
		{
			DiscordExtension.GlobalLogger.Warning("API Token does not appear to be a valid discord bot token: {0} for plugin {1}. Please confirm you are using the correct bot token. If the token is correct and this message is showing please let the Discord Extension Developers know.", botTokenData.HiddenToken, client.PluginName);
		}
		return botTokenData;
	}

	private static string GenerateHiddenToken(string token)
	{
		ValueStringBuilder valueStringBuilder = default(ValueStringBuilder);
		int num = token.LastIndexOf('.') + 1;
		valueStringBuilder.Append(token.AsSpan().Slice(0, num));
		valueStringBuilder.Append('#', token.Length - num);
		return valueStringBuilder.ToString();
	}

	private BotTokenData ParseToken(string token, string pluginName)
	{
		string text = GenerateHiddenToken(token);
		string[] array = token.Split(_splitArgs);
		if (array.Length != 3)
		{
			DiscordExtension.GlobalLogger.Error("Failed to parse token {0} for plugin {1}", text, pluginName);
			return new BotTokenData(text, default(Snowflake));
		}
		if (!TryParseApplicationId(array[0], out var id))
		{
			DiscordExtension.GlobalLogger.Error("Failed to parse application ID from bot token. Bot token is invalid. Token: {0}", text);
		}
		return new BotTokenData(text, id);
	}

	private bool TryParseApplicationId(string base64AppId, out Snowflake id)
	{
		try
		{
			string @string = Encoding.UTF8.GetString(ConvertFromBase64(base64AppId));
			id = new Snowflake(@string);
			return true;
		}
		catch (Exception exception)
		{
			DiscordExtension.GlobalLogger.Exception("An error occured parsing Token Application ID: {0}", base64AppId, exception);
			id = default(Snowflake);
			return false;
		}
	}

	private byte[] ConvertFromBase64(string base64)
	{
		if (base64.Length % 4 != 0)
		{
			base64 += new string('=', 4 - base64.Length % 4);
		}
		return Convert.FromBase64String(base64);
	}
}
