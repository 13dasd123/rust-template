using System;
using System.Collections.Generic;
using System.Reflection;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Attributes;
using Oxide.Ext.Discord.Constants;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Plugins;

public class PluginSetup
{
	internal readonly string PluginName;

	internal readonly List<string> PluginHooks = new List<string>();

	private readonly List<PluginCallback> _callbacks = new List<PluginCallback>();

	public PluginSetup(Plugin plugin, ILogger logger)
	{
		if (plugin == null)
		{
			throw new ArgumentNullException("plugin");
		}
		PluginName = plugin.Name;
		MemberInfo[] members = plugin.GetType().GetMembers(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
		foreach (MemberInfo memberInfo in members)
		{
			Attribute[] customAttributes = Attribute.GetCustomAttributes(memberInfo);
			MemberInfo memberInfo2 = memberInfo;
			MemberInfo memberInfo3 = memberInfo2;
			if (memberInfo3 is MethodInfo hook)
			{
				ProcessMethod(plugin, hook, customAttributes, logger);
			}
		}
	}

	private void ProcessMethod(Plugin plugin, MethodInfo hook, Attribute[] attributes, ILogger logger)
	{
		if (ParseHook(hook, attributes, out var name))
		{
			if (DiscordExtHooks.IsDiscordHook(name) && !DiscordExtHooks.IsGlobalHook(name))
			{
				PluginHooks.Add(name);
				logger.Verbose("Adding Plugin Hook: {0}.{1}", plugin.Name, name);
			}
			if (IsCallbackMethod(attributes))
			{
				logger.Verbose("Adding Callback Hook: {0}.{1}", plugin.Name, name);
				_callbacks.Add(new PluginCallback(name, hook, attributes));
			}
		}
	}

	private bool ParseHook(MethodInfo info, Attribute[] attributes, out string name)
	{
		name = ((!info.IsPublic) ? info.Name : null);
		HookMethodAttribute attribute = GetAttribute<HookMethodAttribute>(attributes);
		if (attribute != null)
		{
			name = attribute.Name;
		}
		return name != null;
	}

	private T GetAttribute<T>(Attribute[] attributes) where T : Attribute
	{
		foreach (Attribute attribute in attributes)
		{
			if (attribute is T result)
			{
				return result;
			}
		}
		return null;
	}

	private bool IsCallbackMethod(Attribute[] attributes)
	{
		foreach (Attribute attribute in attributes)
		{
			Attribute attribute2 = attribute;
			Attribute attribute3 = attribute2;
			if (attribute3 is BaseApplicationCommandAttribute || attribute3 is BaseCommandAttribute)
			{
				return true;
			}
		}
		return false;
	}

	internal IEnumerable<PluginHookResult<T>> GetCallbacksWithAttribute<T>() where T : BaseDiscordAttribute
	{
		for (int index = 0; index < _callbacks.Count; index++)
		{
			PluginCallback callback = _callbacks[index];
			using IEnumerator<T> enumerator = callback.GetAttributes<T>().GetEnumerator();
			while (enumerator.MoveNext())
			{
				yield return new PluginHookResult<T>(attribute: enumerator.Current, callback: callback);
			}
		}
	}
}
