using System;
using System.Linq;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord;
using Oxide.Ext.Discord.Cache;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Factory;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Plugins;
using Oxide.Ext.Discord.Types;
using Oxide.Plugins;

public sealed class DiscordClientFactory : Singleton<DiscordClientFactory>
{
	private readonly Hash<PluginId, DiscordClient> _clients = new Hash<PluginId, DiscordClient>();

	private DiscordClientFactory()
	{
	}

	public DiscordClient CreateClient(Plugin plugin)
	{
		if (plugin == null)
		{
			throw new ArgumentNullException("plugin");
		}
		OnPluginUnloaded(plugin);
		if (!(plugin is IDiscordPlugin discordPlugin))
		{
			return null;
		}
		DiscordClient discordClient = _clients[plugin.Id()];
		if (discordClient == null)
		{
			DiscordExtension.GlobalLogger.Debug("DiscordClient.CreateClient Creating DiscordClient for plugin {0}", plugin.FullName());
			discordClient = new DiscordClient(plugin);
			_clients[plugin.Id()] = discordClient;
		}
		discordPlugin.Client = discordClient;
		DiscordHook.CallPluginHook(discordClient.Plugin, "OnDiscordClientCreated");
		return discordClient;
	}

	public DiscordClient GetClient(Plugin plugin)
	{
		if (plugin == null)
		{
			throw new ArgumentNullException("plugin");
		}
		return GetClient(plugin.Id());
	}

	private DiscordClient GetClient(PluginId pluginId)
	{
		return _clients[pluginId];
	}

	public DiscordClient GetClient(string pluginName)
	{
		if (pluginName == null)
		{
			throw new ArgumentNullException("pluginName");
		}
		return GetClient(new PluginId(pluginName));
	}

	internal void OnPluginLoaded(Plugin plugin)
	{
		if (!plugin.IsCorePlugin)
		{
			CreateClient(plugin);
			Singleton<DiscordPluginCache>.Instance.OnPluginLoaded(plugin);
		}
	}

	internal void OnPluginUnloaded(Plugin plugin)
	{
		if (!plugin.IsCorePlugin && !DiscordExtension.IsShuttingDown)
		{
			DiscordClient discordClient = _clients[plugin.Id()];
			if (discordClient != null)
			{
				discordClient.CloseClient();
				BaseDiscordLibrary.ProcessPluginUnloaded(plugin);
			}
			PluginExt.OnPluginUnloaded(plugin);
			Singleton<DiscordPluginCache>.Instance.OnPluginUnloaded(plugin);
		}
	}

	internal void RemoveClient(DiscordClient client)
	{
		_clients.Remove(client.PluginId);
	}

	internal void OnShutdown()
	{
		foreach (DiscordClient item in _clients.Values.ToList())
		{
			item.CloseClient();
		}
	}

	internal void UpdateLogLevel()
	{
		foreach (DiscordClient value in _clients.Values)
		{
			value.UpdateLogLevel();
		}
	}
}
