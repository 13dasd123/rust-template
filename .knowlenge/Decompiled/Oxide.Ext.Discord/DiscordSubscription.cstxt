using System;
using System.Linq;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Callbacks;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Plugins;

public class DiscordSubscription : IDebugLoggable
{
	private readonly Snowflake _channelId;

	private readonly PluginId _pluginId;

	private readonly DiscordClient _client;

	private readonly Action<DiscordMessage> _callback;

	private Plugin _plugin;

	public DiscordSubscription(DiscordClient client, Snowflake channelId, Action<DiscordMessage> callback)
	{
		_client = client;
		_plugin = client.Plugin;
		_channelId = channelId;
		_pluginId = _plugin.Id();
		_callback = callback;
	}

	public bool CanRun(BotClient client)
	{
		return client != null && _client.Bot == client;
	}

	public bool IsForPlugin(Plugin plugin)
	{
		return plugin != null && plugin.Id() == _pluginId;
	}

	public bool IsForChannel(Snowflake channelId)
	{
		return _channelId == channelId;
	}

	public void Invoke(DiscordMessage message)
	{
		SubscriptionCallback.Start(_plugin, message, _callback);
	}

	public void LogDebug(DebugLogger logger)
	{
		logger.AppendField("Plugin", _plugin.FullName());
		logger.AppendMethod("Method", _callback.Method);
		DiscordGuild discordGuild = _client?.Bot.Servers.Values.FirstOrDefault((DiscordGuild g) => g.Channels.ContainsKey(_channelId));
		if (discordGuild == null)
		{
			logger.AppendField("Guild", "Unknown Guild");
			return;
		}
		DiscordChannel discordChannel = discordGuild.Channels[_channelId];
		if (discordChannel == null)
		{
			logger.AppendField("Channel", "Unknown Channel");
			return;
		}
		DiscordChannel parent = null;
		if (discordChannel.ParentId.HasValue)
		{
			parent = discordGuild.Channels[discordChannel.ParentId.Value];
		}
		logger.AppendChannelPath("Path", discordGuild, discordChannel, parent);
		logger.AppendObject("Channel", discordChannel);
	}

	internal void OnRemoved()
	{
		_plugin = null;
	}
}
