using System;
using Oxide.Core.Libraries.Covalence;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Builders;
using Oxide.Ext.Discord.Cache;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Plugins;
using Oxide.Ext.Discord.Types;

public static class PlayerPlaceholders
{
	internal static readonly PlaceholderDataKey TargetPlayerKey = new PlaceholderDataKey("TargetPlayer");

	public static string Id(IPlayer player)
	{
		return player.Id;
	}

	public static string Name(PlaceholderState state, IPlayer player)
	{
		string format = state.Format;
		if (string.IsNullOrEmpty(format) || !Enum.TryParse<PlayerDisplayNameMode>(format, ignoreCase: true, out var result))
		{
			return player.Name;
		}
		if (1 == 0)
		{
		}
		string result2 = result switch
		{
			PlayerDisplayNameMode.Clan => PlayerNameFormatter.ClanName.Format(player), 
			PlayerDisplayNameMode.PlayerId => PlayerNameFormatter.PlayerId.Format(player), 
			PlayerDisplayNameMode.All => PlayerNameFormatter.All.Format(player), 
			_ => PlayerNameFormatter.Default.Format(player), 
		};
		if (1 == 0)
		{
		}
		return result2;
	}

	public static bool Connected(IPlayer player)
	{
		return player.IsConnected;
	}

	public static float Health(IPlayer player)
	{
		return (player.Object != null) ? player.Health : 0f;
	}

	public static float MaxHealth(IPlayer player)
	{
		return (player.Object != null) ? player.MaxHealth : 0f;
	}

	public static GenericPosition Position(IPlayer player)
	{
		return (player.Object != null) ? player.Position() : new GenericPosition();
	}

	public static int Ping(IPlayer player)
	{
		return player.Ping;
	}

	public static string[] Permissions(IPlayer player)
	{
		return Singleton<OxideLibrary>.Instance.Permission.GetUserPermissions(player.Id);
	}

	public static string[] Groups(IPlayer player)
	{
		return Singleton<OxideLibrary>.Instance.Permission.GetUserGroups(player.Id);
	}

	public static string Address(IPlayer player)
	{
		return player.Address;
	}

	public static string CountryName(IPlayer player)
	{
		return IpPlaceholders.CountryName(player.Address);
	}

	public static string CountryCode(IPlayer player)
	{
		return IpPlaceholders.CountryCode(player.Address);
	}

	public static string CountryEmoji(IPlayer player)
	{
		return IpPlaceholders.CountryEmoji(player.Address);
	}

	public static string ClanTag(IPlayer player)
	{
		return DiscordExtensionCore.Instance.GetClanTag(player);
	}

	public static string SteamProfileUrl(IPlayer player)
	{
		return "https://steamcommunity.com/profiles/" + player.Id;
	}

	public static string SteamAvatarUrl(IPlayer player)
	{
		return DiscordExtensionCore.Instance.GetPlayerAvatarUrl(player.Id);
	}

	public static string BattleMetricsSteamIdUrl(IPlayer player)
	{
		return "https://www.battlemetrics.com/rcon/players?filter[search]=" + player.Id;
	}

	public static string BattleMetricsNameUrl(IPlayer player)
	{
		return "https://www.battlemetrics.com/rcon/players?filter[search]=" + player.Name;
	}

	public static string ServerArmorUrl(IPlayer player)
	{
		return "https://io.serverarmour.com/profile/" + player.Id;
	}

	public static bool IsLinked(PlaceholderState state, IPlayer player)
	{
		return player.IsLinked();
	}

	internal static void RegisterPlaceholders()
	{
		RegisterPlaceholders(DiscordExtensionCore.Instance, DefaultKeys.Player, new PlaceholderDataKey("IPlayer"));
		RegisterPlaceholders(DiscordExtensionCore.Instance, DefaultKeys.PlayerTarget, TargetPlayerKey);
	}

	public static void RegisterPlaceholders(Plugin plugin, PlayerKeys keys, PlaceholderDataKey dataKey)
	{
		DiscordPlaceholders instance = BaseDiscordLibrary<DiscordPlaceholders>.Instance;
		instance.RegisterPlaceholder<IPlayer, string>(plugin, keys.Id, dataKey, Id);
		instance.RegisterPlaceholder<IPlayer, string>(plugin, keys.Name, dataKey, Name);
		instance.RegisterPlaceholder<IPlayer, bool>(plugin, keys.Connected, dataKey, Connected);
		instance.RegisterPlaceholder<IPlayer, string[]>(plugin, keys.Permissions, dataKey, Permissions);
		instance.RegisterPlaceholder<IPlayer, string[]>(plugin, keys.Groups, dataKey, Groups);
		instance.RegisterPlaceholder<IPlayer, float>(plugin, keys.Health, dataKey, Health);
		instance.RegisterPlaceholder<IPlayer, float>(plugin, keys.MaxHealth, dataKey, MaxHealth);
		instance.RegisterPlaceholder<IPlayer, GenericPosition>(plugin, keys.Position, dataKey, Position);
		instance.RegisterPlaceholder<IPlayer, int>(plugin, keys.Ping, dataKey, Ping);
		instance.RegisterPlaceholder<IPlayer, string>(plugin, keys.Address, dataKey, CountryName);
		instance.RegisterPlaceholder<IPlayer, string>(plugin, keys.Country, dataKey, CountryCode);
		instance.RegisterPlaceholder<IPlayer, string>(plugin, keys.CountryEmoji, dataKey, CountryEmoji);
		instance.RegisterPlaceholder<IPlayer, string>(plugin, keys.ClanTag, dataKey, ClanTag);
		instance.RegisterPlaceholder<IPlayer, string>(plugin, keys.SteamProfile, dataKey, SteamProfileUrl);
		instance.RegisterPlaceholder<IPlayer, string>(plugin, keys.SteamAvatar, dataKey, SteamAvatarUrl);
		instance.RegisterPlaceholder<IPlayer, string>(plugin, keys.BattleMetricsPlayerId, dataKey, BattleMetricsSteamIdUrl);
		instance.RegisterPlaceholder<IPlayer, string>(plugin, keys.BattleMetricsName, dataKey, BattleMetricsNameUrl);
		instance.RegisterPlaceholder<IPlayer, string>(plugin, keys.ServerArmorProfile, dataKey, ServerArmorUrl);
		instance.RegisterPlaceholder<IPlayer, bool>(plugin, keys.IsLinked, dataKey, IsLinked);
	}
}
