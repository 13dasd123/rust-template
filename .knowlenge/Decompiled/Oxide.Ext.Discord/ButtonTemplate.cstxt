using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Libraries;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class ButtonTemplate : BaseComponentTemplate
{
	[JsonProperty("Button Label")]
	public string Label { get; set; } = "Button Label";

	[JsonProperty("Button Emoji")]
	public EmojiTemplate Emoji { get; set; } = new EmojiTemplate();

	[JsonConverter(typeof(StringEnumConverter))]
	[JsonProperty("Button Style")]
	public ButtonStyle Style { get; set; } = ButtonStyle.Primary;

	[JsonProperty("Button Command")]
	public string Command { get; set; } = "My Command";

	[JsonProperty("Keep Button On Same Row")]
	public bool Inline { get; set; } = true;

	[JsonProperty("Button Enabled")]
	public bool Enabled { get; set; } = true;

	[JsonConstructor]
	public ButtonTemplate()
		: base(MessageComponentType.Button)
	{
	}

	public ButtonTemplate(string label, ButtonStyle style, string command, bool enabled = true, bool inline = true)
		: this(label, style, command, null, enabled, inline)
	{
	}

	public ButtonTemplate(string label, ButtonStyle style, string command, string emoji, bool enabled = true, bool inline = true)
		: this()
	{
		Label = label;
		Style = style;
		Command = command;
		Emoji = new EmojiTemplate
		{
			Emoji = emoji
		};
		Enabled = enabled;
		Inline = inline;
	}

	public override BaseComponent ToComponent(PlaceholderData data)
	{
		DiscordPlaceholders instance = BaseDiscordLibrary<DiscordPlaceholders>.Instance;
		string text = instance.ProcessPlaceholders(Command, data);
		if (string.IsNullOrEmpty(text))
		{
			return null;
		}
		data?.IncrementDepth();
		ButtonComponent buttonComponent = new ButtonComponent
		{
			Label = instance.ProcessPlaceholders(Label, data),
			Style = Style,
			Disabled = !Enabled,
			Emoji = Emoji?.ToEmoji()
		};
		if (Style == ButtonStyle.Link)
		{
			buttonComponent.Url = text;
		}
		else
		{
			buttonComponent.CustomId = text;
		}
		data?.DecrementDepth();
		data?.AutoDispose();
		return buttonComponent;
	}
}
