using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Json;
using Oxide.Ext.Discord.Libraries;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class DiscordModalTemplate
{
	[JsonProperty("Modal Title")]
	public string Title { get; set; }

	[JsonProperty("Modal ID")]
	public string CustomId { get; set; }

	[JsonConverter(typeof(TemplateComponentsConverter))]
	[JsonProperty("Modal Components")]
	public List<BaseComponentTemplate> Components { get; set; } = new List<BaseComponentTemplate>();

	[JsonConstructor]
	public DiscordModalTemplate()
	{
	}

	public DiscordModalTemplate(string title, string customId)
	{
		Title = title;
		CustomId = customId;
	}

	public InteractionModalMessage ToModal(PlaceholderData data = null, InteractionModalMessage modal = null)
	{
		if (modal == null)
		{
			modal = new InteractionModalMessage();
		}
		data?.IncrementDepth();
		DiscordPlaceholders instance = BaseDiscordLibrary<DiscordPlaceholders>.Instance;
		modal.Title = instance.ProcessPlaceholders(Title, data);
		modal.CustomId = instance.ProcessPlaceholders(CustomId, data);
		modal.Components = new List<ActionRowComponent>();
		for (int i = 0; i < Components.Count; i++)
		{
			BaseComponentTemplate baseComponentTemplate = Components[i];
			if (baseComponentTemplate is InputTextTemplate { Visible: not false } inputTextTemplate)
			{
				InvalidMessageComponentException.ThrowIfInvalidMaxActionRows(modal.Components.Count);
				modal.Components.Add(new ActionRowComponent
				{
					Components = { inputTextTemplate.ToComponent(data) }
				});
			}
		}
		data?.DecrementDepth();
		data?.AutoDispose();
		return modal;
	}
}
