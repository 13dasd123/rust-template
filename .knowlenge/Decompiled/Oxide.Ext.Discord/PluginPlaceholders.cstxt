using System;
using Oxide.Core.Libraries.Covalence;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Cache;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Plugins;
using Oxide.Ext.Discord.Types;

public static class PluginPlaceholders
{
	public static string Name(Plugin plugin)
	{
		return plugin.Name;
	}

	public static string Title(Plugin plugin)
	{
		return plugin.Title;
	}

	public static string Author(Plugin plugin)
	{
		return plugin.Author;
	}

	public static string Version(Plugin plugin)
	{
		return plugin.Version.ToString();
	}

	public static string Description(Plugin plugin)
	{
		return plugin.Description;
	}

	public static string FullName(Plugin plugin)
	{
		return plugin.FullName();
	}

	public static TimeSpan HookTime(Plugin plugin)
	{
		return TimeSpan.FromSeconds(plugin.TotalHookTime);
	}

	public static string LangMessage(PlaceholderState state, Plugin plugin)
	{
		return Singleton<OxideLibrary>.Instance.Lang.GetMessage(state.Format, plugin, state.Data.Get<IPlayer>()?.Id);
	}

	internal static void RegisterPlaceholders()
	{
		RegisterPlaceholders(DiscordExtensionCore.Instance, DefaultKeys.Plugin, new PlaceholderDataKey("Plugin"));
	}

	public static void RegisterPlaceholders(Plugin plugin, PluginKeys keys, PlaceholderDataKey dataKey)
	{
		DiscordPlaceholders instance = BaseDiscordLibrary<DiscordPlaceholders>.Instance;
		instance.RegisterPlaceholder<Plugin, string>(plugin, keys.Name, dataKey, Name);
		instance.RegisterPlaceholder<Plugin, string>(plugin, keys.Title, dataKey, Title);
		instance.RegisterPlaceholder<Plugin, string>(plugin, keys.Author, dataKey, Author);
		instance.RegisterPlaceholder<Plugin, string>(plugin, keys.Version, dataKey, Version);
		instance.RegisterPlaceholder<Plugin, string>(plugin, keys.Description, dataKey, Description);
		instance.RegisterPlaceholder<Plugin, string>(plugin, keys.Fullname, dataKey, FullName);
		instance.RegisterPlaceholder<Plugin, TimeSpan>(plugin, keys.HookTime, dataKey, HookTime);
		instance.RegisterPlaceholder<Plugin, string>(plugin, keys.Lang, dataKey, LangMessage);
	}
}
