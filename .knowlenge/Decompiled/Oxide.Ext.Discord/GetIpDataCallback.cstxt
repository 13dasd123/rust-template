using System.Threading.Tasks;
using Oxide.Ext.Discord.Callbacks;
using Oxide.Ext.Discord.Callbacks.Data;
using Oxide.Ext.Discord.Data;
using Oxide.Ext.Discord.Data.Ip;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Services.IpApi;
using Oxide.Ext.Discord.Types;

internal class GetIpDataCallback : BaseAsyncCallback
{
	private string _ip;

	public static void Start(string ip)
	{
		GetIpDataCallback getIpDataCallback = DiscordPool.Internal.Get<GetIpDataCallback>();
		getIpDataCallback.Init(ip);
		getIpDataCallback.Run();
	}

	private void Init(string ip)
	{
		_ip = ip;
	}

	protected override async ValueTask HandleCallback()
	{
		IpResult result = await Singleton<IpApiService>.Instance.GetCountryCode(_ip).ConfigureAwait(continueOnCapturedContext: false);
		if (result != null)
		{
			BaseDataFile<DiscordIpData>.Instance.AddData(_ip, result);
		}
	}

	protected override string GetExceptionMessage()
	{
		return "IP: " + _ip;
	}
}
