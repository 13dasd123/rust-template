using System;
using System.Collections.Generic;
using System.Reflection;
using Oxide.Core;
using Oxide.Core.Extensions;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Cache;
using Oxide.Ext.Discord.Configuration;
using Oxide.Ext.Discord.Data;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Factory;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Plugins;
using Oxide.Ext.Discord.Types;

public class DiscordExtension : Extension
{
	internal const string TestVersion = "";

	internal const string Authors = "PsychoTea & DylanSMR & Tricky & Kirollos & MJSU";

	internal static VersionNumber ExtensionVersion;

	internal static ILogger GlobalLogger;

	internal static DiscordMessageTemplates DiscordMessageTemplates;

	internal static DiscordEmbedTemplates DiscordEmbedTemplates;

	internal static DiscordEmbedFieldTemplates DiscordEmbedFieldTemplates;

	internal static DiscordModalTemplates DiscordModalTemplates;

	internal static DiscordButtonTemplates DiscordButtonTemplates;

	internal static DiscordInputTextTemplates DiscordInputTextTemplates;

	internal static DiscordSelectMenuTemplates DiscordSelectMenuTemplates;

	internal static DiscordCommandLocalizations DiscordCommandLocalizations;

	internal static bool IsShuttingDown;

	internal static string FullExtensionVersion { get; private set; }

	public override string Name => "Discord";

	public override string Author => "PsychoTea & DylanSMR & Tricky & Kirollos & MJSU";

	public override VersionNumber Version => ExtensionVersion;

	public DiscordExtension(ExtensionManager manager)
		: base(manager)
	{
		AssemblyName name = Assembly.GetExecutingAssembly().GetName();
		ExtensionVersion = new VersionNumber(name.Version.Major, name.Version.Minor, name.Version.Build);
		FullExtensionVersion = string.Format("{0}{1}", ExtensionVersion, "");
	}

	public override void OnModLoad()
	{
		DiscordConfig.LoadConfig();
		GlobalLogger = Singleton<DiscordLoggerFactory>.Instance.CreateExtensionLogger(string.IsNullOrEmpty("") ? DiscordLogLevel.Warning : DiscordLogLevel.Verbose);
		GlobalLogger.Info("Using Discord Extension Version: {0}", FullExtensionVersion);
		ThreadEx.Initialize();
		AppDomain.CurrentDomain.UnhandledException += delegate(object sender, UnhandledExceptionEventArgs exception)
		{
			GlobalLogger.Exception("An unhandled exception was thrown!", exception?.ExceptionObject as Exception);
		};
		base.Manager.RegisterLibrary("DiscordPool", new DiscordPool(GlobalLogger));
		base.Manager.RegisterLibrary("DiscordAppCommand", new DiscordAppCommand(GlobalLogger));
		base.Manager.RegisterLibrary("DiscordLink", new DiscordLink(GlobalLogger));
		base.Manager.RegisterLibrary("DiscordCommand", new DiscordCommand(DiscordConfig.Instance.Commands.CommandPrefixes, GlobalLogger));
		base.Manager.RegisterLibrary("DiscordSubscriptions", new DiscordSubscriptions(GlobalLogger));
		base.Manager.RegisterLibrary("DiscordLocales", new DiscordLocales(GlobalLogger));
		base.Manager.RegisterLibrary("DiscordPlaceholders", new DiscordPlaceholders(GlobalLogger));
		DiscordMessageTemplates = new DiscordMessageTemplates(GlobalLogger);
		DiscordEmbedTemplates = new DiscordEmbedTemplates(GlobalLogger);
		DiscordEmbedFieldTemplates = new DiscordEmbedFieldTemplates(GlobalLogger);
		DiscordModalTemplates = new DiscordModalTemplates(GlobalLogger);
		DiscordCommandLocalizations = new DiscordCommandLocalizations(GlobalLogger);
		DiscordButtonTemplates = new DiscordButtonTemplates(GlobalLogger);
		DiscordInputTextTemplates = new DiscordInputTextTemplates(GlobalLogger);
		DiscordSelectMenuTemplates = new DiscordSelectMenuTemplates(GlobalLogger);
		base.Manager.RegisterLibrary("DiscordMessageTemplates", DiscordMessageTemplates);
		base.Manager.RegisterLibrary("DiscordEmbedTemplates", DiscordEmbedTemplates);
		base.Manager.RegisterLibrary("DiscordEmbedFieldTemplates", DiscordEmbedFieldTemplates);
		base.Manager.RegisterLibrary("DiscordModalTemplates", DiscordModalTemplates);
		base.Manager.RegisterLibrary("DiscordCommandLocalizations", DiscordCommandLocalizations);
		base.Manager.RegisterLibrary("DiscordButtonTemplates", DiscordButtonTemplates);
		base.Manager.RegisterLibrary("DiscordInputTextTemplates", DiscordInputTextTemplates);
		base.Manager.RegisterLibrary("DiscordSelectMenuTemplates", DiscordSelectMenuTemplates);
		Singleton<EmojiCache>.Instance.Build();
		base.Manager.RegisterPluginLoader(new DiscordExtPluginLoader());
		Interface.Oxide.Config.Compiler.PreprocessorDirectives.AddRange(GetPreProcessorDirectives());
		Interface.Oxide.RootPluginManager.OnPluginAdded += Singleton<DiscordClientFactory>.Instance.OnPluginLoaded;
		Interface.Oxide.RootPluginManager.OnPluginRemoved += delegate(Plugin plugin)
		{
			Singleton<DiscordClientFactory>.Instance.OnPluginUnloaded(plugin);
			Singleton<DiscordLoggerFactory>.Instance.OnPluginUnloaded(plugin);
		};
	}

	public override void OnShutdown()
	{
		Singleton<DiscordClientFactory>.Instance.OnShutdown();
		GlobalLogger.Debug("Disconnected all clients - server shutdown.");
		Singleton<DataHandler>.Instance.Shutdown();
		Singleton<DiscordLoggerFactory>.Instance.OnServerShutdown();
	}

	private IEnumerable<string> GetPreProcessorDirectives()
	{
		yield return "DiscordExt";
		yield return "DiscordExt3_0";
	}
}
