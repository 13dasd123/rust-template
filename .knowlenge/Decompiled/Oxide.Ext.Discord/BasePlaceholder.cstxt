using System;
using System.Text;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Plugins;

internal abstract class BasePlaceholder<TResult> : IPlaceholder
{
	private readonly PluginId _pluginId;

	private readonly Action<StringBuilder, PlaceholderState, TResult> _apply;

	public string PluginName { get; }

	public bool IsExtensionPlaceholder { get; }

	protected BasePlaceholder(Plugin plugin)
	{
		_pluginId = plugin.Id();
		PluginName = plugin.FullName();
		IsExtensionPlaceholder = plugin is DiscordExtensionCore;
		_apply = PlaceholderFormatting.CreatePlaceholderCallback<TResult>();
	}

	public void Invoke(StringBuilder sb, PlaceholderState state)
	{
		TResult arg = InvokeInternal(state);
		_apply(sb, state, arg);
	}

	public abstract TResult InvokeInternal(PlaceholderState state);

	public bool IsForPlugin(Plugin plugin)
	{
		return !IsExtensionPlaceholder && plugin.Id() == _pluginId;
	}

	public Type GetReturnType()
	{
		return typeof(TResult);
	}
}
