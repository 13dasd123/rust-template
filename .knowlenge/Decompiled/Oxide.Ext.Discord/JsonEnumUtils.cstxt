using System;
using System.Collections.Concurrent;
using Oxide.Ext.Discord.Json;
using Oxide.Plugins;

internal static class JsonEnumUtils
{
	private static readonly ConcurrentDictionary<Type, EnumData> EnumData = new ConcurrentDictionary<Type, EnumData>();

	internal static object GetDefault(Type enumType)
	{
		return GetEnumData(enumType).Default;
	}

	internal static string ToEnumName(Type enumType, string enumText)
	{
		EnumData enumData = GetEnumData(enumType);
		if (enumText.IndexOf(",", StringComparison.Ordinal) == -1)
		{
			return enumData.NameToProperty[enumText];
		}
		return ParseEnumNameList(enumText, enumData.NameToProperty);
	}

	internal static string FromEnumName(Type enumType, string enumText)
	{
		EnumData enumData = GetEnumData(enumType);
		if (enumText.IndexOf(",", StringComparison.Ordinal) == -1)
		{
			return enumData.PropertyToName[enumText];
		}
		return ParseEnumNameList(enumText, enumData.PropertyToName);
	}

	private static string ParseEnumNameList(string enumText, Hash<string, string> lookup)
	{
		string[] array = enumText.Split(',');
		for (int i = 0; i < array.Length; i++)
		{
			array[i] = lookup[array[i].Trim()];
		}
		return string.Join(", ", array);
	}

	private static EnumData GetEnumData(Type type)
	{
		if (!EnumData.TryGetValue(type, out var value))
		{
			value = new EnumData(type);
			EnumData[type] = value;
		}
		return value;
	}
}
