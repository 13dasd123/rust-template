using System;
using System.Collections.Generic;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Builders;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Libraries;
using Oxide.Plugins;

public class ApplicationCommandOptionBuilder
{
	private readonly CommandOption _option;

	public readonly string CommandName;

	public readonly string GroupName;

	public readonly string SubCommandName;

	public readonly string OptionName;

	internal ApplicationCommandOptionBuilder(List<CommandOption> parent, CommandOptionType type, string name, string description, ServerLocale defaultLanguage, string commandName, string groupName, string subCommandName)
	{
		InvalidCommandOptionException.ThrowIfInvalidName(name, allowNullOrEmpty: false);
		InvalidCommandOptionException.ThrowIfInvalidDescription(description, allowNullOrEmpty: false);
		InvalidCommandOptionException.ThrowIfInvalidType(type);
		_option = new CommandOption(name, description, type);
		parent.Add(_option);
		AddNameLocalization(name, defaultLanguage);
		AddDescriptionLocalization(description, defaultLanguage);
		CommandName = commandName;
		GroupName = groupName;
		SubCommandName = subCommandName;
		OptionName = name;
	}

	[Obsolete("AddNameLocalizations(Plugin plugin, string langKey) has been deprecated and will be removed in the future. Please use AddNameLocalization(string name, string lang) instead.")]
	public ApplicationCommandOptionBuilder AddNameLocalizations(Plugin plugin, string langKey)
	{
		_option.NameLocalizations = BaseDiscordLibrary<DiscordLocales>.Instance.GetDiscordLocalizations(plugin, langKey);
		return this;
	}

	public ApplicationCommandOptionBuilder AddNameLocalization(string name, ServerLocale serverLocale)
	{
		DiscordLocale discordLocale = serverLocale.GetDiscordLocale();
		if (discordLocale.IsValid)
		{
			_option.NameLocalizations[discordLocale.Id] = name;
		}
		return this;
	}

	[Obsolete("AddDescriptionLocalizations(Plugin plugin, string langKey) has been deprecated and will be removed in the future. Please use AddDescriptionLocalization(string name, string lang) instead.")]
	public ApplicationCommandOptionBuilder AddDescriptionLocalizations(Plugin plugin, string langKey)
	{
		_option.DescriptionLocalizations = BaseDiscordLibrary<DiscordLocales>.Instance.GetDiscordLocalizations(plugin, langKey);
		return this;
	}

	public ApplicationCommandOptionBuilder AddDescriptionLocalization(string description, ServerLocale serverLocale)
	{
		DiscordLocale discordLocale = serverLocale.GetDiscordLocale();
		if (discordLocale.IsValid)
		{
			_option.DescriptionLocalizations[discordLocale.Id] = description;
		}
		return this;
	}

	public ApplicationCommandOptionBuilder Required(bool required = true)
	{
		_option.Required = required;
		return this;
	}

	public ApplicationCommandOptionBuilder AutoComplete(bool autoComplete = true)
	{
		_option.Autocomplete = autoComplete;
		return this;
	}

	public ApplicationCommandOptionBuilder MinValue(int minValue)
	{
		InvalidCommandOptionException.ThrowIfInvalidMinIntegerType(_option.Type);
		_option.MinValue = minValue;
		return this;
	}

	public ApplicationCommandOptionBuilder MinValue(double minValue)
	{
		InvalidCommandOptionException.ThrowIfInvalidMinNumberType(_option.Type);
		_option.MinValue = minValue;
		return this;
	}

	public ApplicationCommandOptionBuilder MaxValue(int maxValue)
	{
		InvalidCommandOptionException.ThrowIfInvalidMaxIntegerType(_option.Type);
		_option.MaxValue = maxValue;
		return this;
	}

	public ApplicationCommandOptionBuilder MaxValue(double maxValue)
	{
		InvalidCommandOptionException.ThrowIfInvalidMaxNumberType(_option.Type);
		_option.MaxValue = maxValue;
		return this;
	}

	public ApplicationCommandOptionBuilder MinLength(int minLength)
	{
		InvalidCommandOptionException.ThrowIfInvalidMinLengthType(_option.Type);
		InvalidCommandOptionException.ThrowIfInvalidMinLength(minLength);
		_option.MinLength = minLength;
		return this;
	}

	public ApplicationCommandOptionBuilder MaxLength(int maxLength)
	{
		InvalidCommandOptionException.ThrowIfInvalidMaxLengthType(_option.Type);
		InvalidCommandOptionException.ThrowIfInvalidMaxLength(maxLength);
		_option.MaxLength = maxLength;
		return this;
	}

	public ApplicationCommandOptionBuilder ChannelTypes(List<ChannelType> types)
	{
		InvalidCommandOptionException.ThrowIfInvalidChannelType(_option.Type);
		_option.ChannelTypes = types;
		return this;
	}

	public ApplicationCommandOptionBuilder AddChoice(string name, string value, Hash<string, string> nameLocalizations = null)
	{
		InvalidCommandOptionChoiceException.ThrowIfInvalidType(_option.Type, CommandOptionType.String);
		InvalidCommandOptionChoiceException.ThrowIfInvalidStringValue(name);
		return AddChoiceInternal(name, value, nameLocalizations);
	}

	public ApplicationCommandOptionBuilder AddChoice(string name, int value, Hash<string, string> nameLocalizations = null)
	{
		InvalidCommandOptionChoiceException.ThrowIfInvalidType(_option.Type, CommandOptionType.Integer);
		return AddChoiceInternal(name, value, nameLocalizations);
	}

	public ApplicationCommandOptionBuilder AddChoice(string name, double value, Hash<string, string> nameLocalizations = null)
	{
		InvalidCommandOptionChoiceException.ThrowIfInvalidType(_option.Type, CommandOptionType.Number);
		return AddChoiceInternal(name, value, nameLocalizations);
	}

	private ApplicationCommandOptionBuilder AddChoiceInternal(string name, object value, Hash<string, string> nameLocalizations)
	{
		InvalidCommandOptionChoiceException.ThrowIfInvalidName(name, allowNullOrEmpty: false);
		CommandOption option = _option;
		if (option.Choices == null)
		{
			List<CommandOptionChoice> list2 = (option.Choices = new List<CommandOptionChoice>());
		}
		InvalidCommandOptionChoiceException.ThrowIfMaxChoices(_option.Choices.Count);
		_option.Choices.Add(new CommandOptionChoice(name, value, nameLocalizations));
		return this;
	}
}
