using System;
using Newtonsoft.Json;
using Oxide.Ext.Discord;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Logging;

public class SnowflakeConverter : JsonConverter
{
	public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
	{
		switch (reader.TokenType)
		{
		case JsonToken.Integer:
			return new Snowflake(ulong.Parse(reader.Value.ToString()));
		case JsonToken.String:
		{
			string value = reader.Value.ToString();
			if (string.IsNullOrEmpty(value))
			{
				return default(Snowflake);
			}
			if (Snowflake.TryParse(value, out var snowflake))
			{
				return snowflake;
			}
			throw new JsonException($"Snowflake string JSON token failed to parse to snowflake: '{reader.Value}' Path: {reader.Path}");
		}
		case JsonToken.Null:
			if (Nullable.GetUnderlyingType(objectType) != null)
			{
				return null;
			}
			DiscordExtension.GlobalLogger.Warning("Snowflake tried to parse null to non nullable field: {0}. Please give this message to the discord extension authors.", reader.Path);
			return default(Snowflake);
		default:
			throw new JsonException($"Token type {reader.TokenType} does not match snowflake valid types of string or integer. Path: {reader.Path}");
		}
	}

	public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
	{
		Snowflake snowflake = (Snowflake)value;
		if (!snowflake.IsValid())
		{
			writer.WriteValue(string.Empty);
		}
		else
		{
			writer.WriteValue(snowflake.ToString());
		}
	}

	public override bool CanConvert(Type objectType)
	{
		return objectType == typeof(Snowflake);
	}
}
