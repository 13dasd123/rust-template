using System;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Plugins;

internal readonly struct TemplateId : IEquatable<TemplateId>
{
	internal readonly PluginId PluginId;

	public readonly TemplateKey TemplateName;

	public readonly ServerLocale Language;

	public bool IsGlobal => !Language.IsValid;

	private TemplateId(Plugin plugin, TemplateKey templateName, ServerLocale language)
	{
		if (plugin == null)
		{
			throw new ArgumentNullException("plugin");
		}
		this = new TemplateId(plugin.Id(), templateName, language);
	}

	private TemplateId(PluginId pluginName, TemplateKey templateName, ServerLocale language)
	{
		PluginId = pluginName;
		TemplateName = templateName;
		Language = language;
	}

	public static TemplateId CreateGlobal(Plugin plugin, TemplateKey templateName)
	{
		return new TemplateId(plugin, templateName, default(ServerLocale));
	}

	public static TemplateId CreateLocalized(Plugin plugin, TemplateKey templateName, ServerLocale language)
	{
		return new TemplateId(plugin, templateName, language);
	}

	public static TemplateId CreateInteraction(Plugin plugin, TemplateKey templateName, DiscordInteraction interaction)
	{
		return new TemplateId(plugin, templateName, interaction.Locale.GetServerLocale());
	}

	public static TemplateId CreatePlayer(Plugin plugin, TemplateKey templateName, string playerId)
	{
		return new TemplateId(plugin, templateName, BaseDiscordLibrary<DiscordLocales>.Instance.GetPlayerLanguage(playerId));
	}

	public string GetPluginName()
	{
		return PluginExt.GetFullName(PluginId);
	}

	public TemplateId WithLanguage(ServerLocale language)
	{
		return new TemplateId(PluginId, TemplateName, language);
	}

	public string GetLanguageName()
	{
		return IsGlobal ? "Global" : Language.Id;
	}

	public override string ToString()
	{
		return $"Plugin: {PluginId} Template: {TemplateName} Language: {GetLanguageName()}";
	}

	public bool Equals(TemplateId other)
	{
		return PluginId.Equals(other.PluginId) && TemplateName.Equals(other.TemplateName) && Language.Equals(other.Language);
	}

	public override bool Equals(object obj)
	{
		return obj is TemplateId other && Equals(other);
	}

	public override int GetHashCode()
	{
		return HashCode.Combine(PluginId, TemplateName, Language);
	}
}
