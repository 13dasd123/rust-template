using System;
using System.Reflection;
using Oxide.Ext.Discord.Types;

public abstract class Singleton<T> where T : Singleton<T>
{
	public static readonly T Instance;

	private const string ErrorMessage = "must have only one constructor that is parameterless and private.";

	static Singleton()
	{
		ConstructorInfo[] constructors = typeof(T).GetConstructors(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
		if (constructors.Length != 1)
		{
			throw new Exception(string.Format("{0} {1}", typeof(T), "must have only one constructor that is parameterless and private."));
		}
		ConstructorInfo constructorInfo = constructors[0];
		if (constructorInfo.IsPublic)
		{
			throw new Exception(string.Format("{0} {1}", typeof(T), "must have only one constructor that is parameterless and private."));
		}
		try
		{
			Instance = (T)constructorInfo.Invoke(null);
		}
		catch
		{
			throw new Exception(string.Format("{0} {1}", typeof(T), "must have only one constructor that is parameterless and private."));
		}
	}
}
