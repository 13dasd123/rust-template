using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using Oxide.Core.Libraries.Covalence;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Libraries;

internal static class PlaceholderFormatting
{
	private static readonly Regex GenericPositionRegex = new Regex("([xyz])(?::?([\\d\\.]*))", RegexOptions.IgnoreCase | RegexOptions.Compiled);

	private static readonly ThreadLocal<char[]> Buffer = new ThreadLocal<char[]>(() => new char[128]);

	private static void Replace(StringBuilder builder, PlaceholderState state, ReadOnlySpan<char> value)
	{
		builder.Replace(value, state.Index, state.Length);
	}

	private static void Replace(StringBuilder builder, PlaceholderState state, IReadOnlyList<string> values)
	{
		builder.Remove(state.Index, state.Length);
		if (values == null || values.Count == 0)
		{
			return;
		}
		string value = ((!string.IsNullOrEmpty(state.Format)) ? state.Format : ", ");
		for (int i = 0; i < values.Count; i++)
		{
			if (i != 0)
			{
				builder.Append(value);
			}
			builder.Append(values[i]);
		}
	}

	private static void Replace(StringBuilder builder, PlaceholderState state, IReadOnlyList<object> values)
	{
		builder.Remove(state.Index, state.Length);
		if (values == null || values.Count == 0)
		{
			return;
		}
		string value = ((!string.IsNullOrEmpty(state.Format)) ? state.Format : ", ");
		for (int i = 0; i < values.Count; i++)
		{
			if (i != 0)
			{
				builder.Append(value);
			}
			builder.Append(values[i]);
		}
	}

	private static void Replace(StringBuilder builder, PlaceholderState state, bool value)
	{
		if (string.IsNullOrEmpty(state.Format))
		{
			Replace(builder, state, value ? "true" : "false");
			return;
		}
		int num = state.Format.IndexOf(',');
		if (num == -1)
		{
			Replace(builder, state, value ? "true" : "false");
			return;
		}
		ReadOnlySpan<char> value2 = state.Format;
		value2 = ((!value) ? value2.Slice(num + 1, value2.Length - num - 1) : value2.Slice(0, num));
		Replace(builder, state, value2);
	}

	private static void Replace(StringBuilder builder, PlaceholderState state, Snowflake value)
	{
		Replace(builder, state, value.Id);
	}

	private static void Replace(StringBuilder builder, PlaceholderState state, byte value)
	{
		Span<char> destination = Buffer.Value.AsSpan();
		if (value.TryFormat(destination, out var charsWritten, state.Format))
		{
			Replace(builder, state, destination.Slice(0, charsWritten));
		}
		else
		{
			Replace(builder, state, (IFormattable)value);
		}
	}

	private static void Replace(StringBuilder builder, PlaceholderState state, sbyte value)
	{
		Span<char> destination = Buffer.Value.AsSpan();
		if (value.TryFormat(destination, out var charsWritten, state.Format))
		{
			Replace(builder, state, destination.Slice(0, charsWritten));
		}
		else
		{
			Replace(builder, state, (IFormattable)value);
		}
	}

	private static void Replace(StringBuilder builder, PlaceholderState state, short value)
	{
		Span<char> destination = Buffer.Value.AsSpan();
		if (value.TryFormat(destination, out var charsWritten, state.Format))
		{
			Replace(builder, state, destination.Slice(0, charsWritten));
		}
		else
		{
			Replace(builder, state, (IFormattable)value);
		}
	}

	private static void Replace(StringBuilder builder, PlaceholderState state, ushort value)
	{
		Span<char> destination = Buffer.Value.AsSpan();
		if (value.TryFormat(destination, out var charsWritten, state.Format))
		{
			Replace(builder, state, destination.Slice(0, charsWritten));
		}
		else
		{
			Replace(builder, state, (IFormattable)value);
		}
	}

	private static void Replace(StringBuilder builder, PlaceholderState state, int value)
	{
		Span<char> destination = Buffer.Value.AsSpan();
		if (value.TryFormat(destination, out var charsWritten, state.Format))
		{
			Replace(builder, state, destination.Slice(0, charsWritten));
		}
		else
		{
			Replace(builder, state, (IFormattable)value);
		}
	}

	private static void Replace(StringBuilder builder, PlaceholderState state, uint value)
	{
		Span<char> destination = Buffer.Value.AsSpan();
		if (value.TryFormat(destination, out var charsWritten, state.Format))
		{
			Replace(builder, state, destination.Slice(0, charsWritten));
		}
		else
		{
			Replace(builder, state, (IFormattable)value);
		}
	}

	private static void Replace(StringBuilder builder, PlaceholderState state, long value)
	{
		Span<char> destination = Buffer.Value.AsSpan();
		if (value.TryFormat(destination, out var charsWritten, state.Format))
		{
			Replace(builder, state, destination.Slice(0, charsWritten));
		}
		else
		{
			Replace(builder, state, (IFormattable)value);
		}
	}

	private static void Replace(StringBuilder builder, PlaceholderState state, ulong value)
	{
		Span<char> destination = Buffer.Value.AsSpan();
		if (value.TryFormat(destination, out var charsWritten, state.Format))
		{
			Replace(builder, state, destination.Slice(0, charsWritten));
		}
		else
		{
			Replace(builder, state, (IFormattable)value);
		}
	}

	private static void Replace(StringBuilder builder, PlaceholderState state, float value)
	{
		Span<char> destination = Buffer.Value.AsSpan();
		if (value.TryFormat(destination, out var charsWritten, state.Format))
		{
			Replace(builder, state, destination.Slice(0, charsWritten));
		}
		else
		{
			Replace(builder, state, (IFormattable)value);
		}
	}

	private static void Replace(StringBuilder builder, PlaceholderState state, double value)
	{
		Span<char> destination = Buffer.Value.AsSpan();
		if (value.TryFormat(destination, out var charsWritten, state.Format))
		{
			Replace(builder, state, destination.Slice(0, charsWritten));
		}
		else
		{
			Replace(builder, state, (IFormattable)value);
		}
	}

	private static void Replace(StringBuilder builder, PlaceholderState state, decimal value)
	{
		Span<char> destination = Buffer.Value.AsSpan();
		if (value.TryFormat(destination, out var charsWritten, state.Format))
		{
			Replace(builder, state, destination.Slice(0, charsWritten));
		}
		else
		{
			Replace(builder, state, (IFormattable)value);
		}
	}

	private static void Replace(StringBuilder builder, PlaceholderState state, DateTime value)
	{
		Span<char> destination = Buffer.Value.AsSpan();
		if (value.TryFormat(destination, out var charsWritten, state.Format))
		{
			Replace(builder, state, destination.Slice(0, charsWritten));
		}
		else
		{
			Replace(builder, state, (IFormattable)value);
		}
	}

	private static void Replace(StringBuilder builder, PlaceholderState state, DateTimeOffset value)
	{
		Span<char> destination = Buffer.Value.AsSpan();
		if (value.TryFormat(destination, out var charsWritten, state.Format))
		{
			Replace(builder, state, destination.Slice(0, charsWritten));
		}
		else
		{
			Replace(builder, state, (IFormattable)value);
		}
	}

	private static void Replace(StringBuilder builder, PlaceholderState state, TimeSpan value)
	{
		Span<char> destination = Buffer.Value.AsSpan();
		if (value.TryFormat(destination, out var charsWritten, state.Format))
		{
			Replace(builder, state, destination.Slice(0, charsWritten));
		}
		else
		{
			Replace(builder, state, (IFormattable)value);
		}
	}

	private static void Replace(StringBuilder builder, PlaceholderState state, IFormattable value)
	{
		if (string.IsNullOrEmpty(state.Format))
		{
			Replace(builder, state, value.ToString(null, CultureInfo.CurrentCulture));
		}
		else
		{
			Replace(builder, state, value.ToString(state.Format, CultureInfo.CurrentCulture));
		}
	}

	private static void Replace(StringBuilder builder, PlaceholderState placeholderState, GenericPosition position)
	{
		if (string.IsNullOrEmpty(placeholderState.Format))
		{
			Replace(builder, placeholderState, $"{position.X} {position.Y} {position.Z}".AsSpan());
			return;
		}
		StringBuilder stringBuilder = DiscordPool.Internal.GetStringBuilder();
		PlaceholderState placeholderState2 = PlaceholderState.Create(placeholderState.Data);
		stringBuilder.Append(placeholderState.Format);
		MatchCollection matchCollection = GenericPositionRegex.Matches(placeholderState.Format);
		for (int num = matchCollection.Count - 1; num >= 0; num--)
		{
			Match match = matchCollection[num];
			placeholderState2.UpdateState(match);
			switch (match.Groups[1].Value)
			{
			case "x":
				Replace(stringBuilder, placeholderState2, position.X);
				break;
			case "y":
				Replace(stringBuilder, placeholderState2, position.Y);
				break;
			case "z":
				Replace(stringBuilder, placeholderState2, position.Z);
				break;
			}
		}
		Replace(builder, placeholderState, stringBuilder.ToString());
		DiscordPool.Internal.FreeStringBuilder(stringBuilder);
		placeholderState2.Dispose();
	}

	public static Action<StringBuilder, PlaceholderState, TResult> CreatePlaceholderCallback<TResult>()
	{
		Type typeFromHandle = typeof(TResult);
		if (typeFromHandle == typeof(string))
		{
			return delegate(StringBuilder builder, PlaceholderState state, TResult value)
			{
				Replace(builder, state, value as string);
			};
		}
		if (typeFromHandle == typeof(bool))
		{
			return delegate(StringBuilder builder, PlaceholderState state, TResult value)
			{
				Replace(builder, state, value.Cast<TResult, bool>());
			};
		}
		if (typeFromHandle == typeof(byte))
		{
			return delegate(StringBuilder builder, PlaceholderState state, TResult value)
			{
				Replace(builder, state, value.Cast<TResult, byte>());
			};
		}
		if (typeFromHandle == typeof(sbyte))
		{
			return delegate(StringBuilder builder, PlaceholderState state, TResult value)
			{
				Replace(builder, state, value.Cast<TResult, sbyte>());
			};
		}
		if (typeFromHandle == typeof(short))
		{
			return delegate(StringBuilder builder, PlaceholderState state, TResult value)
			{
				Replace(builder, state, value.Cast<TResult, short>());
			};
		}
		if (typeFromHandle == typeof(ushort))
		{
			return delegate(StringBuilder builder, PlaceholderState state, TResult value)
			{
				Replace(builder, state, value.Cast<TResult, ushort>());
			};
		}
		if (typeFromHandle == typeof(int))
		{
			return delegate(StringBuilder builder, PlaceholderState state, TResult value)
			{
				Replace(builder, state, value.Cast<TResult, int>());
			};
		}
		if (typeFromHandle == typeof(uint))
		{
			return delegate(StringBuilder builder, PlaceholderState state, TResult value)
			{
				Replace(builder, state, value.Cast<TResult, uint>());
			};
		}
		if (typeFromHandle == typeof(long))
		{
			return delegate(StringBuilder builder, PlaceholderState state, TResult value)
			{
				Replace(builder, state, value.Cast<TResult, long>());
			};
		}
		if (typeFromHandle == typeof(ulong))
		{
			return delegate(StringBuilder builder, PlaceholderState state, TResult value)
			{
				Replace(builder, state, value.Cast<TResult, ulong>());
			};
		}
		if (typeFromHandle == typeof(float))
		{
			return delegate(StringBuilder builder, PlaceholderState state, TResult value)
			{
				Replace(builder, state, value.Cast<TResult, float>());
			};
		}
		if (typeFromHandle == typeof(double))
		{
			return delegate(StringBuilder builder, PlaceholderState state, TResult value)
			{
				Replace(builder, state, value.Cast<TResult, double>());
			};
		}
		if (typeFromHandle == typeof(decimal))
		{
			return delegate(StringBuilder builder, PlaceholderState state, TResult value)
			{
				Replace(builder, state, value.Cast<TResult, decimal>());
			};
		}
		if (typeFromHandle == typeof(DateTime))
		{
			return delegate(StringBuilder builder, PlaceholderState state, TResult value)
			{
				Replace(builder, state, value.Cast<TResult, DateTime>());
			};
		}
		if (typeFromHandle == typeof(DateTimeOffset))
		{
			return delegate(StringBuilder builder, PlaceholderState state, TResult value)
			{
				Replace(builder, state, value.Cast<TResult, DateTimeOffset>());
			};
		}
		if (typeFromHandle == typeof(TimeSpan))
		{
			return delegate(StringBuilder builder, PlaceholderState state, TResult value)
			{
				Replace(builder, state, value.Cast<TResult, TimeSpan>());
			};
		}
		if (typeFromHandle == typeof(Snowflake))
		{
			return delegate(StringBuilder builder, PlaceholderState state, TResult value)
			{
				Replace(builder, state, value.Cast<TResult, Snowflake>());
			};
		}
		if (typeFromHandle == typeof(TemplateKey))
		{
			return delegate(StringBuilder builder, PlaceholderState state, TResult value)
			{
				Replace(builder, state, value.Cast<TResult, TemplateKey>().Name);
			};
		}
		if (typeFromHandle == typeof(GenericPosition))
		{
			return delegate(StringBuilder builder, PlaceholderState state, TResult value)
			{
				Replace(builder, state, value.Cast<TResult, GenericPosition>());
			};
		}
		if (typeof(IFormattable).IsAssignableFrom(typeFromHandle))
		{
			return delegate(StringBuilder builder, PlaceholderState state, TResult value)
			{
				Replace(builder, state, value as IFormattable);
			};
		}
		if (typeof(IReadOnlyList<string>).IsAssignableFrom(typeFromHandle))
		{
			return delegate(StringBuilder builder, PlaceholderState state, TResult value)
			{
				Replace(builder, state, value as IReadOnlyList<string>);
			};
		}
		if (typeof(IReadOnlyList<object>).IsAssignableFrom(typeFromHandle))
		{
			return delegate(StringBuilder builder, PlaceholderState state, TResult value)
			{
				Replace(builder, state, value as IReadOnlyList<object>);
			};
		}
		return delegate(StringBuilder builder, PlaceholderState state, TResult value)
		{
			Replace(builder, state, value.ToString());
		};
	}
}
