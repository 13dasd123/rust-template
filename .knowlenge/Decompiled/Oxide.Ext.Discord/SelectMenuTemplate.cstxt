using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Libraries;

public class SelectMenuTemplate : BaseComponentTemplate
{
	[JsonProperty("Select Menu ID")]
	public string CustomId { get; set; } = string.Empty;

	[JsonProperty("Select Menu Placeholder Text")]
	public string Placeholder { get; set; }

	[JsonProperty("Select Menu Options")]
	public List<SelectMenuOptionTemplate> Options { get; set; }

	[JsonProperty("Select Menu Channel Types")]
	public List<ChannelType> ChannelTypes { get; set; } = new List<ChannelType>();

	[JsonProperty("Select Menu Min Selected Values")]
	public int MinValues { get; set; } = 1;

	[JsonProperty("Select Menu Max Selected Values")]
	public int MaxValues { get; set; } = 1;

	[JsonProperty("Select Menu Enabled")]
	public bool Enabled { get; set; } = true;

	[JsonConstructor]
	public SelectMenuTemplate()
	{
	}

	public SelectMenuTemplate(MessageComponentType type)
		: base(type)
	{
		InvalidSelectMenuComponentException.ThrowIfInvalidComponentType(type);
	}

	public override BaseComponent ToComponent(PlaceholderData data)
	{
		data?.IncrementDepth();
		BaseSelectMenuComponent baseSelectMenuComponent;
		switch (base.Type)
		{
		case MessageComponentType.StringSelect:
		{
			StringSelectComponent stringSelectComponent = new StringSelectComponent();
			baseSelectMenuComponent = stringSelectComponent;
			if (Options != null)
			{
				for (int i = 0; i < Options.Count; i++)
				{
					stringSelectComponent.Options.Add(Options[i].ToOption(data));
				}
			}
			break;
		}
		case MessageComponentType.UserSelect:
			baseSelectMenuComponent = new UserSelectComponent();
			break;
		case MessageComponentType.RoleSelect:
			baseSelectMenuComponent = new RoleSelectComponent();
			break;
		case MessageComponentType.MentionableSelect:
			baseSelectMenuComponent = new MentionableSelectComponent();
			break;
		case MessageComponentType.ChannelSelect:
		{
			ChannelSelectComponent channelSelectComponent = new ChannelSelectComponent();
			baseSelectMenuComponent = channelSelectComponent;
			List<ChannelType> channelTypes = (ChannelTypes = ((ChannelTypes != null && ChannelTypes.Count != 0) ? ChannelTypes : null));
			channelSelectComponent.ChannelTypes = channelTypes;
			break;
		}
		default:
			throw new ArgumentOutOfRangeException();
		}
		DiscordPlaceholders instance = BaseDiscordLibrary<DiscordPlaceholders>.Instance;
		baseSelectMenuComponent.CustomId = instance.ProcessPlaceholders(CustomId, data);
		baseSelectMenuComponent.Placeholder = instance.ProcessPlaceholders(Placeholder, data);
		baseSelectMenuComponent.MinValues = MinValues;
		baseSelectMenuComponent.MaxValues = MaxValues;
		baseSelectMenuComponent.Disabled = !Enabled;
		data?.DecrementDepth();
		data?.AutoDispose();
		return baseSelectMenuComponent;
	}

	private bool ShouldSerializeOptions()
	{
		return base.Type == MessageComponentType.StringSelect;
	}

	private bool ShouldSerializeChannelTypes()
	{
		return base.Type == MessageComponentType.ChannelSelect;
	}
}
