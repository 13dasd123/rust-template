using System;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Json;

public class DiscordEnumConverter : JsonConverter
{
	public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
	{
		if (value == null)
		{
			writer.WriteNull();
			return;
		}
		Enum @enum = (Enum)value;
		string text = @enum.ToString("G");
		if (char.IsNumber(text[0]) || text[0] == '-')
		{
			writer.WriteValue(value);
			return;
		}
		string value2 = JsonEnumUtils.ToEnumName(@enum.GetType(), text);
		if (!string.IsNullOrEmpty(value2))
		{
			writer.WriteValue(value2);
		}
	}

	public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
	{
		if (reader.TokenType == JsonToken.Null)
		{
			if (!objectType.IsNullable())
			{
				throw new JsonException($"Cannot convert null value to {objectType}. Path: {reader.Path}");
			}
			return null;
		}
		string text = reader.Value.ToString();
		if (reader.TokenType == JsonToken.Integer)
		{
			return Enum.IsDefined(objectType, text) ? Enum.Parse(objectType, text) : JsonEnumUtils.GetDefault(objectType);
		}
		if (reader.TokenType == JsonToken.String)
		{
			string value = JsonEnumUtils.FromEnumName(objectType, text) ?? text;
			return Enum.IsDefined(objectType, value) ? Enum.Parse(objectType, value) : JsonEnumUtils.GetDefault(objectType);
		}
		throw new JsonException($"Unexpected token {reader.TokenType} when parsing enum. Path: {reader.Path}");
	}

	public override bool CanConvert(Type objectType)
	{
		return objectType != null && ((objectType.IsNullable() ? Nullable.GetUnderlyingType(objectType) : objectType)?.IsEnum ?? false);
	}
}
