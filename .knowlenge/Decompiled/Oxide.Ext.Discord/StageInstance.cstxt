using System;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Interfaces;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class StageInstance : ISnowflakeEntity
{
	[JsonProperty("id")]
	public Snowflake Id { get; set; }

	[JsonProperty("guild_id")]
	public Snowflake GuildId { get; set; }

	[JsonProperty("channel_id")]
	public Snowflake ChannelId { get; set; }

	[JsonProperty("topic")]
	public string Topic { get; set; }

	[JsonProperty("privacy_level")]
	public PrivacyLevel PrivacyLevel { get; set; }

	[Obsolete("Deprecated by discord")]
	[JsonProperty("discoverable_disabled")]
	public bool DiscoverableDisabled { get; set; }

	[JsonProperty("guild_scheduled_event_id")]
	public Snowflake? GuildScheduledEventId { get; set; }

	public static IPromise<StageInstance> Create(DiscordClient client, StageInstanceCreate create)
	{
		if (create == null)
		{
			throw new ArgumentNullException("create");
		}
		InvalidSnowflakeException.ThrowIfInvalid(create.ChannelId);
		return client.Bot.Rest.Post<StageInstance>(client, "stage-instances", create, null);
	}

	public static IPromise<StageInstance> Get(DiscordClient client, Snowflake channelId)
	{
		InvalidSnowflakeException.ThrowIfInvalid(channelId);
		return client.Bot.Rest.Get<StageInstance>(client, $"stage-instances/{channelId}", null);
	}

	public IPromise<StageInstance> Edit(DiscordClient client, StageInstanceUpdate update)
	{
		if (update == null)
		{
			throw new ArgumentNullException("update");
		}
		return client.Bot.Rest.Patch<StageInstance>(client, $"stage-instances/{ChannelId}", update, null);
	}

	public IPromise Delete(DiscordClient client)
	{
		return client.Bot.Rest.Delete(client, $"stage-instances/{ChannelId}", null);
	}

	internal StageInstance Edit(StageInstance stage)
	{
		StageInstance result = (StageInstance)MemberwiseClone();
		if (stage.Topic != null)
		{
			Topic = stage.Topic;
		}
		PrivacyLevel = stage.PrivacyLevel;
		return result;
	}
}
