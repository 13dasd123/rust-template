using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;

public class InvalidSelectMenuComponentException : BaseDiscordException
{
	private InvalidSelectMenuComponentException(string message)
		: base(message)
	{
	}

	internal static void ThrowIfInvalidSelectMenuPlaceholder(string placeholder)
	{
		if (!string.IsNullOrEmpty(placeholder) && placeholder.Length > 150)
		{
			throw new InvalidSelectMenuComponentException($"Select Menu Placeholder cannot be more than {150} characters");
		}
	}

	internal static void ThrowIfInvalidSelectMenuMinValues(int? minValues)
	{
		if (minValues.HasValue)
		{
			if (minValues < 0)
			{
				throw new InvalidSelectMenuComponentException($"Select Menu Min Values cannot be less than {0}");
			}
			if (minValues > 25)
			{
				throw new InvalidSelectMenuComponentException($"Select Menu Min Values cannot be more than {25}");
			}
		}
	}

	internal static void ThrowIfInvalidSelectMenuMaxValues(int? maxValues)
	{
		if (maxValues > 25)
		{
			throw new InvalidSelectMenuComponentException($"Select Menu Max Values cannot be more than {25}");
		}
	}

	internal static void ThrowIfInvalidSelectMenuValueRange(int? minValues, int? maxValues)
	{
		if ((minValues.HasValue || maxValues.HasValue) && maxValues < minValues)
		{
			throw new InvalidSelectMenuComponentException($"Select Menu Max Values {maxValues} cannot be less min values {minValues}");
		}
	}

	internal static void ThrowIfInvalidSelectMenuOptionLabel(string label)
	{
		if (string.IsNullOrEmpty(label))
		{
			throw new InvalidSelectMenuComponentException("Select Menu Option Label cannot be less than 1 character");
		}
		if (label.Length > 100)
		{
			throw new InvalidSelectMenuComponentException($"Select Menu Option Label cannot be more than {100} characters");
		}
	}

	internal static void ThrowIfInvalidSelectMenuOptionValue(string value)
	{
		if (string.IsNullOrEmpty(value))
		{
			throw new InvalidSelectMenuComponentException("Select Menu Option Value cannot be less than 1 character");
		}
		if (value.Length > 100)
		{
			throw new InvalidSelectMenuComponentException($"Select Menu Option Value cannot be more than {100} characters");
		}
	}

	internal static void ThrowIfInvalidSelectMenuOptionDescription(string description)
	{
		if (!string.IsNullOrEmpty(description) && description.Length > 100)
		{
			throw new InvalidSelectMenuComponentException($"Select Menu Option Description cannot be more than {100} characters");
		}
	}

	internal static void ThrowIfInvalidSelectMenuOptionCount(int count)
	{
		if (count > 25)
		{
			throw new InvalidSelectMenuComponentException($"Select Menu Option Count cannot be more than {25}");
		}
	}

	internal static void ThrowIfInvalidComponentType(MessageComponentType type)
	{
		MessageComponentType messageComponentType = type;
		MessageComponentType messageComponentType2 = messageComponentType;
		if (messageComponentType2 - 1 > MessageComponentType.StringSelect)
		{
			return;
		}
		throw new InvalidSelectMenuComponentException($"'{type}' is not a valid type for a SelectMenu.");
	}

	internal static void ThrowIfTypeCantAddOptions(MessageComponentType type)
	{
		if (type != MessageComponentType.StringSelect)
		{
			throw new InvalidSelectMenuComponentException(string.Format("Select Menu Type '{0}' is not allowed to add Options. Options can only be added on {1}{2}", type, "MessageComponentType", MessageComponentType.StringSelect));
		}
	}

	internal static void ThrowIfTypeCantAddChannelTypes(MessageComponentType type)
	{
		if (type != MessageComponentType.ChannelSelect)
		{
			throw new InvalidSelectMenuComponentException(string.Format("Select Menu Type '{0}' is not allowed to add Channel Types. Channel Types can only be added on {1}{2}", type, "MessageComponentType", MessageComponentType.ChannelSelect));
		}
	}

	internal static void ThrowIfCantAddDefaultValue(MessageComponentType type)
	{
		if (type != MessageComponentType.ChannelSelect && type != MessageComponentType.RoleSelect && type != MessageComponentType.UserSelect)
		{
			throw new InvalidSelectMenuComponentException(string.Format("Select Menu Default Value can only be used on {0}{1} or {2}{3} or {4}{5}", "MessageComponentType", MessageComponentType.ChannelSelect, "MessageComponentType", MessageComponentType.RoleSelect, "MessageComponentType", MessageComponentType.UserSelect));
		}
	}
}
