using System;
using Newtonsoft.Json;
using Oxide.Ext.Discord;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Logging;

public class DiscordImageDataConverter : JsonConverter
{
	public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
	{
		writer.WriteValue(((DiscordImageData)value).GetBase64Image());
	}

	public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
	{
		switch (reader.TokenType)
		{
		case JsonToken.Null:
			if (Nullable.GetUnderlyingType(objectType) != null)
			{
				return null;
			}
			DiscordExtension.GlobalLogger.Warning("DiscordImageData tried to parse null to non nullable field: {0}. Please give this message to the discord extension authors.", reader.Path);
			return default(DiscordImageData);
		case JsonToken.String:
		{
			string image = reader.Value.ToString();
			return new DiscordImageData(image);
		}
		default:
			throw new JsonException($"Token type {reader.TokenType} does not match DiscordImageData valid types of string or null. Path: {reader.Path}");
		}
	}

	public override bool CanConvert(Type objectType)
	{
		return objectType == typeof(DiscordImageData);
	}
}
