using System;
using System.Threading;
using System.Timers;
using Oxide.Ext.Discord.Interfaces;

public abstract class BaseRateLimit
{
	protected int NumRequests;

	protected DateTimeOffset LastReset;

	protected readonly int MaxRequests;

	protected readonly long ResetInterval;

	protected readonly ILogger Logger;

	private System.Timers.Timer _timer;

	public bool HasReachedRateLimit => NumRequests >= MaxRequests;

	protected BaseRateLimit(int maxRequests, long interval, ILogger logger)
	{
		MaxRequests = maxRequests;
		ResetInterval = interval;
		Logger = logger;
		_timer = new System.Timers.Timer(interval);
		_timer.Elapsed += ResetRateLimit;
		_timer.Start();
		LastReset = DateTimeOffset.UtcNow;
	}

	private void ResetRateLimit(object sender, ElapsedEventArgs e)
	{
		OnRateLimitReset();
		LastReset = DateTimeOffset.UtcNow;
		Interlocked.Exchange(ref NumRequests, 0);
	}

	public virtual DateTimeOffset NextReset()
	{
		return LastReset + TimeSpan.FromMilliseconds(ResetInterval);
	}

	protected void FiredRequestInternal()
	{
		Interlocked.Add(ref NumRequests, 1);
	}

	protected abstract void OnRateLimitReset();

	public void Shutdown()
	{
		if (_timer != null)
		{
			_timer.Stop();
			_timer.Dispose();
			_timer = null;
		}
	}
}
