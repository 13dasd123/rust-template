using System.Collections.Concurrent;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Plugins;
using Oxide.Ext.Discord.Types;

public class WebsocketRateLimit : BaseRateLimit
{
	private readonly ConcurrentDictionary<PluginId, int> _pluginRequests = new ConcurrentDictionary<PluginId, int>();

	internal const int MaxRequestPerPlugin = 60;

	internal const long RateLimitInterval = 60000L;

	public WebsocketRateLimit(ILogger logger)
		: base(110, 60000L, logger)
	{
	}

	public void FiredRequest(WebSocketCommand command)
	{
		_pluginRequests.TryGetValue(command.Client.PluginId, out var value);
		_pluginRequests[command.Client.PluginId] = value + 1;
		Logger.Debug("WebsocketRateLimit.FiredRequest For {0} Num Requests {1}", command.Client.PluginId, value + 1);
		FiredRequestInternal();
	}

	public bool CanFireRequest(WebSocketCommand command)
	{
		int value;
		return !_pluginRequests.TryGetValue(command.Client.PluginId, out value) || value < 60;
	}

	protected override void OnRateLimitReset()
	{
		_pluginRequests.Clear();
		if (NumRequests > 0)
		{
			Logger.Debug("RestRateLimit.OnRateLimitReset Num Requests: {0} Reached Rate Limit: {1}", NumRequests, base.HasReachedRateLimit);
		}
	}
}
