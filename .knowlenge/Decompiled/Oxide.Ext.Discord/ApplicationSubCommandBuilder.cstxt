using System;
using System.Collections.Generic;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Builders;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Libraries;

public class ApplicationSubCommandBuilder
{
	private readonly CommandOption _subCommand;

	private readonly ServerLocale _defaultLanguage;

	public readonly string CommandName;

	public readonly string GroupName;

	public readonly string SubCommandName;

	internal ApplicationSubCommandBuilder(List<CommandOption> options, string name, string description, ServerLocale defaultLanguage, string commandName, string groupName)
	{
		_subCommand = new CommandOption(name, description, CommandOptionType.SubCommand, new List<CommandOption>());
		options.Add(_subCommand);
		_defaultLanguage = defaultLanguage;
		AddNameLocalization(name, _defaultLanguage);
		AddDescriptionLocalization(description, _defaultLanguage);
		CommandName = commandName;
		GroupName = groupName;
		SubCommandName = name;
	}

	[Obsolete("AddNameLocalizations(Plugin plugin, string langKey) has been deprecated and will be removed in the future. Please use AddNameLocalization(string name, string lang) instead.")]
	public ApplicationSubCommandBuilder AddNameLocalizations(Plugin plugin, string langKey)
	{
		_subCommand.NameLocalizations = BaseDiscordLibrary<DiscordLocales>.Instance.GetDiscordLocalizations(plugin, langKey);
		return this;
	}

	public ApplicationSubCommandBuilder AddNameLocalization(string name, ServerLocale serverLocale)
	{
		DiscordLocale discordLocale = serverLocale.GetDiscordLocale();
		if (discordLocale.IsValid)
		{
			_subCommand.NameLocalizations[discordLocale.Id] = name;
		}
		return this;
	}

	[Obsolete("AddDescriptionLocalizations(Plugin plugin, string langKey) has been deprecated and will be removed in the future. Please use AddDescriptionLocalization(string name, string lang) instead.")]
	public ApplicationSubCommandBuilder AddDescriptionLocalizations(Plugin plugin, string langKey)
	{
		_subCommand.DescriptionLocalizations = BaseDiscordLibrary<DiscordLocales>.Instance.GetDiscordLocalizations(plugin, langKey);
		return this;
	}

	public ApplicationSubCommandBuilder AddDescriptionLocalization(string description, ServerLocale serverLocale)
	{
		DiscordLocale discordLocale = serverLocale.GetDiscordLocale();
		if (discordLocale.IsValid)
		{
			_subCommand.DescriptionLocalizations[discordLocale.Id] = description;
		}
		return this;
	}

	public ApplicationSubCommandBuilder AddOption(CommandOptionType type, string name, string description, Action<ApplicationCommandOptionBuilder> builder = null)
	{
		ApplicationCommandBuilderException.ThrowIfInvalidCommandOptionType(type);
		ApplicationCommandOptionBuilder obj = new ApplicationCommandOptionBuilder(_subCommand.Options, type, name, description, _defaultLanguage, CommandName, GroupName, SubCommandName);
		builder?.Invoke(obj);
		return this;
	}
}
