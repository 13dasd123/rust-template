using System;
using System.Collections.Generic;
using Oxide.Ext.Discord.Builders;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;

public class MessageComponentBuilder
{
	private readonly List<ActionRowComponent> _components = new List<ActionRowComponent>();

	private ActionRowComponent _current;

	public MessageComponentBuilder()
	{
		_current = new ActionRowComponent();
		_components.Add(_current);
	}

	public MessageComponentBuilder AddActionButton(ButtonStyle style, string label, string customId, bool disabled = false, bool addToNewRow = false, DiscordEmoji emoji = null)
	{
		InvalidMessageComponentException.ThrowIfInvalidButtonLabel(label);
		MessageComponentBuilderException.ThrowIfInvalidActionButtonStyle(style);
		InvalidMessageComponentException.ThrowIfInvalidCustomId(customId);
		UpdateActionRow<ButtonComponent>(addToNewRow);
		_current.Components.Add(new ButtonComponent
		{
			Style = style,
			Label = label,
			CustomId = customId,
			Disabled = disabled,
			Emoji = emoji
		});
		return this;
	}

	public MessageComponentBuilder AddDummyButton(string label, bool disabled = true)
	{
		return AddActionButton(ButtonStyle.Secondary, label, $"DUMMY_{_components.Count * 5 + _current.Components.Count}", disabled);
	}

	public MessageComponentBuilder AddLinkButton(string label, string url, bool disabled = false, bool addToNewRow = false, DiscordEmoji emoji = null)
	{
		InvalidMessageComponentException.ThrowIfInvalidButtonUrl(url);
		UpdateActionRow<ButtonComponent>(addToNewRow);
		_current.Components.Add(new ButtonComponent
		{
			Style = ButtonStyle.Link,
			Label = label,
			Url = url,
			Disabled = disabled,
			Emoji = emoji
		});
		return this;
	}

	public SelectMenuComponentBuilder AddSelectMenu(MessageComponentType type, string customId, string placeholder, int minValues = 1, int maxValues = 1, bool disabled = false)
	{
		InvalidMessageComponentException.ThrowIfInvalidCustomId(customId);
		InvalidSelectMenuComponentException.ThrowIfInvalidSelectMenuPlaceholder(placeholder);
		InvalidSelectMenuComponentException.ThrowIfInvalidSelectMenuMinValues(minValues);
		InvalidSelectMenuComponentException.ThrowIfInvalidSelectMenuMaxValues(maxValues);
		InvalidSelectMenuComponentException.ThrowIfInvalidSelectMenuValueRange(minValues, maxValues);
		UpdateActionRow<BaseSelectMenuComponent>(forceRow: false);
		if (1 == 0)
		{
		}
		BaseSelectMenuComponent baseSelectMenuComponent = type switch
		{
			MessageComponentType.StringSelect => new StringSelectComponent(), 
			MessageComponentType.UserSelect => new UserSelectComponent(), 
			MessageComponentType.RoleSelect => new RoleSelectComponent(), 
			MessageComponentType.MentionableSelect => new MentionableSelectComponent(), 
			MessageComponentType.ChannelSelect => new ChannelSelectComponent(), 
			_ => throw new ArgumentOutOfRangeException("type", type, null), 
		};
		if (1 == 0)
		{
		}
		BaseSelectMenuComponent baseSelectMenuComponent2 = baseSelectMenuComponent;
		baseSelectMenuComponent2.CustomId = customId;
		baseSelectMenuComponent2.Placeholder = placeholder;
		baseSelectMenuComponent2.MinValues = minValues;
		baseSelectMenuComponent2.MaxValues = maxValues;
		baseSelectMenuComponent2.Disabled = disabled;
		_current.Components.Add(baseSelectMenuComponent2);
		return new SelectMenuComponentBuilder(baseSelectMenuComponent2, this);
	}

	public MessageComponentBuilder AddInputText(string customId, string label, InputTextStyles style, string value = null, bool? required = null, string placeholder = null, int? minLength = null, int? maxLength = null)
	{
		InvalidMessageComponentException.ThrowIfInvalidCustomId(customId);
		InvalidMessageComponentException.ThrowIfInvalidTextInputLabel(label);
		InvalidMessageComponentException.ThrowIfInvalidTextInputValue(value);
		InvalidMessageComponentException.ThrowIfInvalidTextInputLength(minLength, maxLength);
		UpdateActionRow<InputTextComponent>(forceRow: false);
		InputTextComponent item = new InputTextComponent
		{
			CustomId = customId,
			Label = label,
			Style = style,
			Value = value,
			Required = required,
			Placeholder = placeholder,
			MinLength = minLength,
			MaxLength = maxLength
		};
		_current.Components.Add(item);
		return this;
	}

	private void UpdateActionRow<T>(bool forceRow) where T : BaseComponent
	{
		if (_current.Components.Count != 0 && (forceRow || !(typeof(T) == typeof(ButtonComponent)) || _current.Components.Count >= 5))
		{
			_current = new ActionRowComponent();
			_components.Add(_current);
			InvalidMessageComponentException.ThrowIfInvalidMaxActionRows(_components.Count);
		}
	}

	public List<ActionRowComponent> Build()
	{
		return _components;
	}
}
