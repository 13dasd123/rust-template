using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Interfaces;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class MessageUpdate : IFileAttachments, IDiscordValidation, IDiscordMessageTemplate
{
	[JsonProperty("content")]
	public string Content { get; set; }

	[JsonProperty("embeds")]
	public List<DiscordEmbed> Embeds { get; set; }

	[JsonProperty("flags")]
	public MessageFlags? Flags { get; set; }

	[JsonProperty("allowed_mentions")]
	public AllowedMentions AllowedMentions { get; set; }

	[JsonProperty("components")]
	public List<ActionRowComponent> Components { get; set; }

	[JsonProperty("attachments")]
	public List<MessageAttachment> Attachments { get; set; }

	public List<MessageFileAttachment> FileAttachments { get; set; }

	public MessageUpdate()
	{
	}

	public MessageUpdate(DiscordMessage message)
	{
		Attachments = message.Attachments?.Values.ToList();
	}

	public void AddAttachment(string filename, byte[] data, string contentType, string description = null)
	{
		InvalidFileNameException.ThrowIfInvalid(filename);
		InvalidMessageException.ThrowIfInvalidAttachmentDescription(description);
		if (FileAttachments == null)
		{
			FileAttachments = new List<MessageFileAttachment>();
		}
		if (Attachments == null)
		{
			Attachments = new List<MessageAttachment>();
		}
		FileAttachments.Add(new MessageFileAttachment(filename, data, contentType));
		Attachments.Add(new MessageAttachment
		{
			Id = new Snowflake((ulong)FileAttachments.Count),
			Filename = filename,
			Description = description
		});
	}

	public void Validate()
	{
		InvalidMessageException.ThrowIfInvalidContent(Content);
		InvalidMessageException.ThrowIfInvalidFlags(Flags, MessageFlags.SuppressEmbeds, "Invalid Message Flags Used for Channel Message. Only supported flags are MessageFlags.SuppressEmbeds");
	}
}
