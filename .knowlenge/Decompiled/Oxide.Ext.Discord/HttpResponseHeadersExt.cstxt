using System.Collections.Generic;
using System.Linq;
using System.Net.Http.Headers;
using Oxide.Ext.Discord.Rest;

internal static class HttpResponseHeadersExt
{
	internal static string Get(this HttpResponseHeaders headers, string key)
	{
		IEnumerable<string> values;
		return headers.TryGetValues(key, out values) ? values.FirstOrDefault() : null;
	}

	internal static bool GetBool(this HttpResponseHeaders headers, string key)
	{
		string value = Get(headers, key);
		if (string.IsNullOrEmpty(value) || !bool.TryParse(value, out var result))
		{
			return false;
		}
		return result;
	}

	internal static int GetInt(this HttpResponseHeaders headers, string key)
	{
		string text = Get(headers, key);
		if (string.IsNullOrEmpty(text) || !int.TryParse(text, out var result))
		{
			return 0;
		}
		return result;
	}

	internal static bool TryGetInt(this HttpResponseHeaders headers, string key, out int value)
	{
		string text = Get(headers, key);
		if (string.IsNullOrEmpty(text) || !int.TryParse(text, out value))
		{
			value = 0;
			return false;
		}
		return true;
	}

	internal static double GetDouble(this HttpResponseHeaders headers, string key)
	{
		string text = Get(headers, key);
		if (string.IsNullOrEmpty(text) || !double.TryParse(text, out var result))
		{
			return 0.0;
		}
		return result;
	}

	internal static BucketId GetBucketId(this HttpResponseHeaders headers, string key)
	{
		string text = Get(headers, key);
		return (!string.IsNullOrEmpty(text)) ? new BucketId(text) : default(BucketId);
	}
}
