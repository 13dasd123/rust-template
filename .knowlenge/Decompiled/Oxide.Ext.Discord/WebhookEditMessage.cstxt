using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Interfaces;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class WebhookEditMessage : IFileAttachments, IDiscordValidation, IDiscordMessageTemplate
{
	[JsonProperty("content")]
	public string Content { get; set; }

	[JsonProperty("embeds")]
	public List<DiscordEmbed> Embeds { get; set; }

	[JsonProperty("allowed_mentions")]
	public AllowedMentions AllowedMentions { get; set; }

	[JsonProperty("components")]
	public List<ActionRowComponent> Components { get; set; }

	[JsonProperty("attachments")]
	public List<MessageAttachment> Attachments { get; set; }

	public List<MessageFileAttachment> FileAttachments { get; set; }

	public WebhookEditMessage AddEmbed(DiscordEmbed embed)
	{
		if (Embeds == null)
		{
			Embeds = new List<DiscordEmbed>();
		}
		if (Embeds.Count >= 10)
		{
			throw new IndexOutOfRangeException("Only 10 embed are allowed per message");
		}
		Embeds.Add(embed);
		return this;
	}

	public void AddAttachment(string filename, byte[] data, string contentType, string description = null, string title = null)
	{
		InvalidFileNameException.ThrowIfInvalid(filename);
		InvalidMessageException.ThrowIfInvalidAttachmentDescription(description);
		if (FileAttachments == null)
		{
			FileAttachments = new List<MessageFileAttachment>();
		}
		if (Attachments == null)
		{
			Attachments = new List<MessageAttachment>();
		}
		FileAttachments.Add(new MessageFileAttachment(filename, data, contentType));
		Attachments.Add(new MessageAttachment
		{
			Id = new Snowflake((ulong)FileAttachments.Count),
			Filename = filename,
			Description = description,
			Title = title
		});
	}

	public void Validate()
	{
		InvalidMessageException.ThrowIfInvalidContent(Content);
	}
}
