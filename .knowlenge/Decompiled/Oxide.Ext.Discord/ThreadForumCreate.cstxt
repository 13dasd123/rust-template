using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Interfaces;

public class ThreadForumCreate : IFileAttachments
{
	[JsonProperty("name")]
	public string Name { get; set; }

	[JsonProperty("auto_archive_duration")]
	public int? AutoArchiveDuration { get; set; }

	[JsonProperty("rate_limit_per_user")]
	public int? RateLimitPerUser { get; set; }

	[JsonProperty("message")]
	public MessageCreate Message { get; set; }

	[JsonProperty("applied_tags")]
	public List<Snowflake> AppliedTags { get; set; }

	public List<MessageFileAttachment> FileAttachments { get; set; }

	[JsonProperty("attachments")]
	public List<MessageAttachment> Attachments { get; set; }

	public void AddAttachment(string filename, byte[] data, string contentType, string description = null, string title = null)
	{
		InvalidFileNameException.ThrowIfInvalid(filename);
		InvalidMessageException.ThrowIfInvalidAttachmentDescription(description);
		if (FileAttachments == null)
		{
			FileAttachments = new List<MessageFileAttachment>();
		}
		if (Attachments == null)
		{
			Attachments = new List<MessageAttachment>();
		}
		FileAttachments.Add(new MessageFileAttachment(filename, data, contentType));
		Attachments.Add(new MessageAttachment
		{
			Id = new Snowflake((ulong)FileAttachments.Count),
			Filename = filename,
			Description = description,
			Title = title
		});
	}

	public void Validate()
	{
		InvalidChannelException.ThrowIfInvalidName(Name, allowNullOrEmpty: false);
		InvalidChannelException.ThrowIfInvalidRateLimitPerUser(RateLimitPerUser);
		InvalidThreadException.ThrowIfInvalidAutoArchiveDuration(AutoArchiveDuration);
		InvalidThreadException.ThrowIfInvalidForumCreateMessage(Message);
		Message.Validate();
	}
}
