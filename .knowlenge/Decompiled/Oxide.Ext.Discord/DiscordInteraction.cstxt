using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord;
using Oxide.Ext.Discord.Builders;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Json;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Rest;
using Oxide.Plugins;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class DiscordInteraction
{
	[JsonProperty("user")]
	private DiscordUser _user;

	private InteractionDataParsed _parsed;

	private InteractionDataOption _focused;

	public readonly DateTime CreatedDate = DateTime.UtcNow;

	private bool _hasResponded;

	[JsonProperty("id")]
	public Snowflake Id { get; set; }

	[JsonProperty("application_id")]
	public Snowflake ApplicationId { get; set; }

	[JsonProperty("type")]
	public InteractionType Type { get; set; }

	[JsonProperty("data")]
	public InteractionData Data { get; set; }

	[JsonProperty("guild")]
	public DiscordGuild Guild { get; set; }

	[JsonProperty("guild_id")]
	public Snowflake? GuildId { get; set; }

	[JsonProperty("channel")]
	public DiscordChannel Channel { get; set; }

	[JsonProperty("channel_id")]
	public Snowflake? ChannelId { get; set; }

	[JsonProperty("member")]
	public GuildMember Member { get; set; }

	public DiscordUser User => _user ?? Member?.User;

	[JsonProperty("token")]
	public string Token { get; set; }

	[JsonProperty("version")]
	public int Version { get; set; }

	[JsonProperty("message")]
	public DiscordMessage Message { get; set; }

	[JsonConverter(typeof(PermissionFlagsStringConverter))]
	[JsonProperty("app_permissions")]
	public PermissionFlags? AppPermissions { get; set; }

	[JsonProperty("locale")]
	public DiscordLocale Locale { get; set; }

	[JsonProperty("guild_locale")]
	public DiscordLocale? GuildLocale { get; set; }

	[JsonProperty("entitlements")]
	public List<DiscordEntitlement> Entitlements { get; set; }

	[JsonProperty("authorizing_integration_owners")]
	public Hash<ApplicationIntegrationType, Snowflake> AuthorizingIntegrationOwners { get; set; }

	[JsonProperty("contexts")]
	public List<InteractionContextTypes> Contexts { get; set; }

	public InteractionDataParsed Parsed => _parsed ?? (_parsed = new InteractionDataParsed(this));

	public InteractionDataOption Focused => _focused ?? (_focused = GetFocusedOption());

	public string GetLangMessage(Plugin plugin, string langKey)
	{
		return BaseDiscordLibrary<DiscordLocales>.Instance.GetDiscordInteractionLangMessage(plugin, this, langKey);
	}

	public string GetLangMessage(Plugin plugin, string langKey, params object[] args)
	{
		return BaseDiscordLibrary<DiscordLocales>.Instance.GetDiscordInteractionLangMessage(plugin, this, langKey, args);
	}

	private InteractionDataOption GetFocusedOption()
	{
		if (Type != InteractionType.ApplicationCommandAutoComplete)
		{
			return null;
		}
		List<InteractionDataOption> options = Data.Options;
		if (options == null)
		{
			return null;
		}
		int num = 0;
		while (num < options.Count)
		{
			InteractionDataOption interactionDataOption = options[num];
			if (interactionDataOption.Type == CommandOptionType.SubCommand || interactionDataOption.Type == CommandOptionType.SubCommandGroup)
			{
				options = interactionDataOption.Options;
				num = 0;
				continue;
			}
			if (interactionDataOption.Focused.HasValue && interactionDataOption.Focused.Value)
			{
				return interactionDataOption;
			}
			num++;
		}
		return null;
	}

	internal AppCommandId GetCommandId()
	{
		string name = Data.Name;
		string group = null;
		string subCommand = null;
		string argument = null;
		InteractionType type = Type;
		InteractionType interactionType = type;
		if (interactionType == InteractionType.MessageComponent || interactionType == InteractionType.ModalSubmit)
		{
			return new AppCommandId(Type, Data.CustomId);
		}
		List<InteractionDataOption> options = Data.Options;
		if (options != null)
		{
			int num = 0;
			while (num < options.Count)
			{
				InteractionDataOption interactionDataOption = options[num];
				switch (interactionDataOption.Type)
				{
				case CommandOptionType.SubCommandGroup:
					group = interactionDataOption.Name;
					options = interactionDataOption.Options;
					num = 0;
					continue;
				case CommandOptionType.SubCommand:
					subCommand = interactionDataOption.Name;
					options = interactionDataOption.Options;
					num = 0;
					continue;
				}
				if (interactionDataOption.Focused.HasValue && interactionDataOption.Focused.Value)
				{
					argument = interactionDataOption.Name;
				}
				num++;
			}
		}
		return new AppCommandId(Type, name, group, subCommand, argument);
	}

	public InteractionResponseBuilder GetResponseBuilder()
	{
		InvalidInteractionResponseException.ThrowIfAlreadyResponded(_hasResponded);
		return new InteractionResponseBuilder(this);
	}

	public InteractionFollowupBuilder GetFollowupBuilder()
	{
		InvalidInteractionResponseException.ThrowIfNotResponded(_hasResponded);
		return new InteractionFollowupBuilder(this);
	}

	public InteractionAutoCompleteBuilder GetAutoCompleteBuilder()
	{
		InvalidInteractionResponseException.ThrowIfAlreadyResponded(_hasResponded);
		return new InteractionAutoCompleteBuilder(this);
	}

	public InteractionModalBuilder GetModalBuilder()
	{
		InvalidInteractionResponseException.ThrowIfAlreadyResponded(_hasResponded);
		return new InteractionModalBuilder(this);
	}

	public IPromise CreateResponse(DiscordClient client, BaseInteractionResponse response)
	{
		if (response == null)
		{
			throw new ArgumentNullException("response");
		}
		InvalidInteractionResponseException.ThrowIfAlreadyResponded(_hasResponded);
		InvalidInteractionResponseException.ThrowIfInitialResponseTimeElapsed(CreatedDate);
		InvalidInteractionResponseException.ThrowIfInvalidResponseType(Type, response.Type);
		_hasResponded = true;
		return client.Bot.Rest.Post(client, $"interactions/{Id}/{Token}/callback", response, RequestOptions.SkipRateLimit());
	}

	public IPromise CreateResponse(DiscordClient client, InteractionResponseType type, InteractionCallbackData response = null)
	{
		InteractionResponse response2 = new InteractionResponse(type, response);
		return CreateResponse(client, response2);
	}

	public IPromise CreateTemplateResponse(DiscordClient client, InteractionResponseType type, TemplateKey templateName, InteractionCallbackData message = null, PlaceholderData placeholders = null)
	{
		if (!templateName.IsValid)
		{
			throw new ArgumentNullException("templateName");
		}
		InteractionCallbackData response = DiscordExtension.DiscordMessageTemplates.GetLocalizedTemplate(client.Plugin, templateName, this).ToMessage(placeholders, message);
		return CreateResponse(client, type, response);
	}

	public IPromise CreateModalResponse(DiscordClient client, TemplateKey templateName, InteractionModalMessage message = null, PlaceholderData placeholders = null)
	{
		if (!templateName.IsValid)
		{
			throw new ArgumentNullException("templateName");
		}
		InteractionModalMessage message2 = DiscordExtension.DiscordModalTemplates.GetLocalizedTemplate(client.Plugin, templateName, this).ToModal(placeholders, message);
		return CreateResponse(client, message2);
	}

	public IPromise CreateResponse(DiscordClient client, InteractionResponseType type, InteractionResponseBuilder builder)
	{
		InteractionResponse response = new InteractionResponse(type, builder.Build());
		return CreateResponse(client, response);
	}

	public IPromise CreateResponse(DiscordClient client, InteractionAutoCompleteMessage message)
	{
		InteractionAutoCompleteResponse response = new InteractionAutoCompleteResponse(message);
		return CreateResponse(client, response);
	}

	public IPromise CreateResponse(DiscordClient client, InteractionAutoCompleteBuilder builder)
	{
		return CreateResponse(client, builder.Build());
	}

	public IPromise CreateResponse(DiscordClient client, InteractionModalMessage message)
	{
		InteractionModalResponse response = new InteractionModalResponse(message);
		return CreateResponse(client, response);
	}

	public IPromise CreateResponse(DiscordClient client, InteractionModalBuilder builder)
	{
		return CreateResponse(client, builder.Build());
	}

	public IPromise DefferResponse(DiscordClient client)
	{
		InteractionResponseType type = ((Type == InteractionType.ApplicationCommand) ? InteractionResponseType.DeferredChannelMessageWithSource : InteractionResponseType.DeferredUpdateMessage);
		return CreateResponse(client, type);
	}

	public IPromise<DiscordMessage> GetOriginalResponse(DiscordClient client)
	{
		InvalidInteractionResponseException.ThrowIfNotResponded(_hasResponded);
		InvalidInteractionResponseException.ThrowIfMaxResponseTimeElapsed(CreatedDate);
		return client.Bot.Rest.Get<DiscordMessage>(client, $"webhooks/{ApplicationId}/{Token}/messages/@original", RequestOptions.SkipRateLimit());
	}

	public IPromise<DiscordMessage> EditOriginalResponse(DiscordClient client, MessageUpdate message)
	{
		InvalidInteractionResponseException.ThrowIfNotResponded(_hasResponded);
		InvalidInteractionResponseException.ThrowIfMaxResponseTimeElapsed(CreatedDate);
		return client.Bot.Rest.Patch<DiscordMessage>(client, $"webhooks/{ApplicationId}/{Token}/messages/@original", message, RequestOptions.SkipRateLimit());
	}

	public IPromise<DiscordMessage> EditTemplateOriginalResponse(DiscordClient client, TemplateKey templateName, MessageUpdate message = null, PlaceholderData placeholders = null)
	{
		if (!templateName.IsValid)
		{
			throw new ArgumentNullException("templateName");
		}
		MessageUpdate message2 = DiscordExtension.DiscordMessageTemplates.GetLocalizedTemplate(client.Plugin, templateName, this).ToMessage(placeholders, message);
		return EditOriginalResponse(client, message2);
	}

	public IPromise DeleteOriginalResponse(DiscordClient client)
	{
		InvalidInteractionResponseException.ThrowIfNotResponded(_hasResponded);
		InvalidInteractionResponseException.ThrowIfMaxResponseTimeElapsed(CreatedDate);
		return client.Bot.Rest.Delete(client, $"webhooks/{ApplicationId}/{Token}/messages/@original", RequestOptions.SkipRateLimit());
	}

	public IPromise<DiscordMessage> CreateFollowUpMessage(DiscordClient client, CommandFollowupCreate message)
	{
		InvalidInteractionResponseException.ThrowIfNotResponded(_hasResponded);
		InvalidInteractionResponseException.ThrowIfMaxResponseTimeElapsed(CreatedDate);
		return client.Bot.Rest.Post<DiscordMessage>(client, $"webhooks/{ApplicationId}/{Token}", message, RequestOptions.SkipRateLimit());
	}

	public IPromise<DiscordMessage> CreateFollowUpMessage(DiscordClient client, InteractionFollowupBuilder builder)
	{
		return CreateFollowUpMessage(client, builder.Build());
	}

	public IPromise<DiscordMessage> CreateFollowUpTemplateResponse(DiscordClient client, TemplateKey templateName, CommandFollowupCreate message = null, PlaceholderData placeholders = null)
	{
		if (!templateName.IsValid)
		{
			throw new ArgumentNullException("templateName");
		}
		CommandFollowupCreate message2 = DiscordExtension.DiscordMessageTemplates.GetLocalizedTemplate(client.Plugin, templateName, this).ToMessage(placeholders, message);
		return CreateFollowUpMessage(client, message2);
	}

	public IPromise<DiscordMessage> GetFollowUpMessage(DiscordClient client, Snowflake messageId, CommandFollowupUpdate edit)
	{
		InvalidInteractionResponseException.ThrowIfNotResponded(_hasResponded);
		InvalidInteractionResponseException.ThrowIfMaxResponseTimeElapsed(CreatedDate);
		InvalidSnowflakeException.ThrowIfInvalid(messageId);
		return client.Bot.Rest.Patch<DiscordMessage>(client, $"webhooks/{ApplicationId}/{Token}/messages/{messageId}", edit, RequestOptions.SkipRateLimit());
	}

	public IPromise<DiscordMessage> EditFollowUpMessage(DiscordClient client, Snowflake messageId, CommandFollowupUpdate edit)
	{
		InvalidInteractionResponseException.ThrowIfNotResponded(_hasResponded);
		InvalidInteractionResponseException.ThrowIfMaxResponseTimeElapsed(CreatedDate);
		InvalidSnowflakeException.ThrowIfInvalid(messageId);
		return client.Bot.Rest.Patch<DiscordMessage>(client, $"webhooks/{ApplicationId}/{Token}/messages/{messageId}", edit, RequestOptions.SkipRateLimit());
	}

	public IPromise DeleteFollowUpMessage(DiscordClient client, Snowflake messageId)
	{
		InvalidInteractionResponseException.ThrowIfNotResponded(_hasResponded);
		InvalidInteractionResponseException.ThrowIfMaxResponseTimeElapsed(CreatedDate);
		InvalidSnowflakeException.ThrowIfInvalid(messageId);
		return client.Bot.Rest.Delete(client, $"webhooks/{ApplicationId}/{Token}/messages/{messageId}", RequestOptions.SkipRateLimit());
	}
}
