using System;
using System.Collections.Generic;
using System.Linq;
using Oxide.Core.Libraries.Covalence;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Types;
using Oxide.Plugins;

public class PlaceholderData : BasePoolable
{
	private readonly Hash<PlaceholderDataKey, object> _data = new Hash<PlaceholderDataKey, object>();

	private readonly List<IBoxed> _boxed = new List<IBoxed>();

	private int _processDepth;

	private bool AutoPool { get; set; } = true;

	internal PlaceholderData()
	{
	}

	internal void AddServer(IServer server)
	{
		Add(new PlaceholderDataKey("IServer"), server);
	}

	public PlaceholderData AddCommand(DiscordApplicationCommand command)
	{
		return Add(new PlaceholderDataKey("DiscordApplicationCommand"), command);
	}

	public PlaceholderData AddGuild(DiscordClient client, Snowflake? guildId)
	{
		return AddGuild(client.Bot?.GetGuild(guildId));
	}

	public PlaceholderData AddGuild(DiscordGuild guild)
	{
		return Add(new PlaceholderDataKey("DiscordGuild"), guild);
	}

	public PlaceholderData RemoveGuild()
	{
		return Remove(new PlaceholderDataKey("DiscordGuild"));
	}

	public PlaceholderData AddMessage(DiscordMessage message)
	{
		if (message != null)
		{
			AddGuildMember(message.Member);
			AddUser(message.Author);
			Add(new PlaceholderDataKey("DiscordMessage"), message);
		}
		return this;
	}

	public PlaceholderData RemoveMessage()
	{
		return Remove(new PlaceholderDataKey("DiscordMessage"));
	}

	public PlaceholderData AddGuildMember(DiscordClient client, Snowflake guildId, Snowflake memberId)
	{
		return AddGuildMember(client.Bot?.GetGuild(guildId).Members[memberId]);
	}

	public PlaceholderData AddGuildMember(GuildMember member)
	{
		if (member != null)
		{
			AddUser(member.User);
			Add(new PlaceholderDataKey("GuildMember"), member);
		}
		return this;
	}

	public PlaceholderData RemoveGuildMember()
	{
		return Remove(new PlaceholderDataKey("GuildMember"));
	}

	public PlaceholderData AddUser(DiscordUser user)
	{
		if (user != null)
		{
			AddPlayer(user.Player);
			Add(new PlaceholderDataKey("DiscordUser"), user);
		}
		return this;
	}

	internal PlaceholderData AddBotUser(DiscordUser user)
	{
		if (user != null)
		{
			Add(UserPlaceholders.BotUserKey, user);
		}
		return this;
	}

	public PlaceholderData AddUserTarget(DiscordUser user)
	{
		if (user != null)
		{
			AddTarget(user.Player);
			Add(UserPlaceholders.TargetUserKey, user);
		}
		return this;
	}

	public PlaceholderData RemoveUser()
	{
		return Remove(new PlaceholderDataKey("DiscordUser"));
	}

	public PlaceholderData AddRole(DiscordClient client, Snowflake guildId, Snowflake roleId)
	{
		return AddRole(client.Bot?.GetGuild(guildId)?.Roles[roleId]);
	}

	public PlaceholderData AddRole(DiscordRole role)
	{
		return Add(new PlaceholderDataKey("DiscordRole"), role);
	}

	public PlaceholderData RemoveRole()
	{
		return Remove(new PlaceholderDataKey("DiscordRole"));
	}

	public PlaceholderData AddChannel(DiscordClient client, Snowflake channelId, Snowflake? guildId = null)
	{
		return AddChannel(client.Bot?.GetChannel(channelId, guildId));
	}

	public PlaceholderData AddChannel(DiscordChannel channel)
	{
		return Add(new PlaceholderDataKey("DiscordChannel"), channel);
	}

	public PlaceholderData RemoveChannel()
	{
		return Remove(new PlaceholderDataKey("DiscordChannel"));
	}

	public PlaceholderData AddInteraction(DiscordInteraction interaction)
	{
		if (interaction != null)
		{
			AddMessage(interaction.Message);
			AddGuildMember(interaction.Member);
			AddUser(interaction.User);
			AddChannel(interaction.Channel);
			Add(new PlaceholderDataKey("DiscordInteraction"), interaction);
		}
		return this;
	}

	public PlaceholderData AddPlayer(IPlayer player)
	{
		return Add(new PlaceholderDataKey("IPlayer"), player);
	}

	public PlaceholderData RemovePlayer()
	{
		return Remove(new PlaceholderDataKey("IPlayer"));
	}

	public PlaceholderData AddTarget(IPlayer player)
	{
		return Add(PlayerPlaceholders.TargetPlayerKey, player);
	}

	public PlaceholderData AddPlugin(Plugin plugin)
	{
		return Add(new PlaceholderDataKey("Plugin"), plugin);
	}

	public PlaceholderData AddTimestamp(DateTimeOffset timestamp)
	{
		return AddTimestamp(timestamp.ToUnixTimeSeconds());
	}

	public PlaceholderData AddTimestamp(long timestamp)
	{
		return Add(TimestampPlaceholders.TimestampKey, timestamp);
	}

	public PlaceholderData AddTimeSpan(TimeSpan timespan)
	{
		return Add(TimeSpanPlaceholders.TimeSpanKey, timespan);
	}

	public PlaceholderData AddSnowflake(Snowflake id)
	{
		return Add(new PlaceholderDataKey("Snowflake"), id);
	}

	public PlaceholderData AddRequestError(ResponseError error)
	{
		return Add(new PlaceholderDataKey("ResponseError"), error);
	}

	public PlaceholderData AddIp(string ip)
	{
		return Add(new PlaceholderDataKey("ip"), ip);
	}

	public PlaceholderData Add<T>(PlaceholderDataKey name, T obj)
	{
		InvalidPlaceholderDataException.ThrowIfInvalid(name);
		if (typeof(T).IsValueType())
		{
			AddBoxed(name, DiscordPool.Internal.GetBoxed(obj));
			return this;
		}
		object obj2 = obj;
		if (obj2 != null)
		{
			_data[name] = obj2;
		}
		return this;
	}

	private void AddBoxed(PlaceholderDataKey name, IBoxed boxed)
	{
		_data[name] = boxed;
		_boxed.Add(boxed);
	}

	public PlaceholderData Remove(PlaceholderDataKey name)
	{
		if (_data.Remove(name, out var value) && value is IBoxed boxed)
		{
			boxed.Dispose();
		}
		return this;
	}

	public T Get<T>()
	{
		return Get<T>(new PlaceholderDataKey(typeof(T).Name));
	}

	public T Get<T>(PlaceholderDataKey name)
	{
		InvalidPlaceholderDataException.ThrowIfInvalid(name);
		if (_data.TryGetValue(name, out var value))
		{
			if (value is T result)
			{
				return result;
			}
			if (value is Boxed<T> { Value: var value2 })
			{
				return value2;
			}
			DiscordExtension.GlobalLogger.Warning("PlaceholderData.Get Failed to Convert Type: {0} to Type: {1}", value.GetType().GetRealTypeName(), typeof(T));
		}
		return default(T);
	}

	public string GetKeys()
	{
		return string.Join(", ", _data.Keys.Select((PlaceholderDataKey k) => k.Key));
	}

	public void ManualPool()
	{
		AutoPool = false;
	}

	internal void IncrementDepth()
	{
		_processDepth++;
	}

	internal void DecrementDepth()
	{
		_processDepth--;
	}

	public PlaceholderData Clone()
	{
		PlaceholderData placeholderData = base.PluginPool.GetPlaceholderData();
		foreach (KeyValuePair<PlaceholderDataKey, object> datum in _data)
		{
			if (datum.Value is IBoxed boxed)
			{
				placeholderData.AddBoxed(datum.Key, boxed.Copy());
			}
			else
			{
				placeholderData.Add(datum.Key, datum.Value);
			}
		}
		return placeholderData;
	}

	protected override void EnterPool()
	{
		for (int i = 0; i < _boxed.Count; i++)
		{
			_boxed[i].Dispose();
		}
		AutoPool = true;
		_data.Clear();
		_boxed.Clear();
	}

	internal void AutoDispose()
	{
		if (AutoPool && _processDepth == 0)
		{
			Dispose();
		}
	}
}
