using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using Oxide.Core.Libraries.Covalence;
using Oxide.Ext.Discord.Cache;
using Oxide.Ext.Discord.Configuration;
using Oxide.Ext.Discord.Plugins;
using Oxide.Ext.Discord.Services;
using Oxide.Ext.Discord.Types;

public sealed class ServerPlayerCache : Singleton<ServerPlayerCache>
{
	private readonly ConcurrentDictionary<string, IPlayer> _dummyPlayerCache = new ConcurrentDictionary<string, IPlayer>();

	private readonly Func<string, IPlayer> _valueFactory = (string id) => new DiscordDummyPlayer(id);

	private IPlayerSearchService _search;

	private static readonly IPlayerManager Players = Singleton<OxideLibrary>.Instance.Covalence.Players;

	private ServerPlayerCache()
	{
	}

	public IPlayer GetPlayerById(string id)
	{
		return Players.FindPlayerById(id) ?? _dummyPlayerCache.GetOrAdd(id, _valueFactory);
	}

	public IEnumerable<IPlayer> GetOnlinePlayers(string name)
	{
		return _search.GetOnlinePlayers(name);
	}

	public IEnumerable<IPlayer> GetAllPlayers(string name)
	{
		return _search.GetAllPlayers(name);
	}

	internal void SetSearchService()
	{
		if (DiscordConfig.Instance.Search.EnablePlayerNameSearchTrie)
		{
			_search = new UkkonenTrieService();
		}
		else
		{
			_search = new CovalenceSearchService();
		}
	}

	internal void OnUserConnected(IPlayer player)
	{
		_search.OnUserConnected(player);
	}

	internal void OnUserDisconnected(IPlayer player)
	{
		_search.OnUserDisconnected(player);
	}

	internal void OnUserNameUpdated(IPlayer player, string oldName, string newName)
	{
		_search.OnUserNameUpdated(player, oldName, newName);
	}
}
