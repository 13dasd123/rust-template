using System;
using Oxide.Ext.Discord.Cache;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Helpers;
using Oxide.Ext.Discord.Types;

public static class DiscordFormatting
{
	public static string MentionUser(Snowflake userId)
	{
		return "<@" + userId.ToString() + ">";
	}

	public static string MentionChannel(Snowflake channelId)
	{
		return "<#" + channelId.ToString() + ">";
	}

	public static string MentionRole(Snowflake roleId)
	{
		return "<@&" + roleId.ToString() + ">";
	}

	public static string MentionApplicationCommand(Snowflake commandId, string name, string subCommand = null, string group = null)
	{
		InvalidSnowflakeException.ThrowIfInvalid(commandId);
		if (string.IsNullOrEmpty(name))
		{
			throw new ArgumentNullException("name");
		}
		if (!string.IsNullOrEmpty(subCommand))
		{
			if (!string.IsNullOrEmpty(group))
			{
				return $"</{name} {group} {subCommand}:{commandId}>";
			}
			return $"</{name} {subCommand}:{commandId}>";
		}
		return $"</{name}:{commandId}>";
	}

	public static string MentionApplicationCommandCustom(Snowflake commandId, string command)
	{
		return $"</{command}:{commandId}>";
	}

	public static string EmojiMessageString(DiscordEmoji emoji)
	{
		if (!emoji.EmojiId.HasValue)
		{
			return emoji.Name;
		}
		return CustomEmojiMessageString(emoji.Id, emoji.Name, emoji.Animated == true);
	}

	public static string CustomEmojiMessageString(Snowflake id, string name, bool animated)
	{
		return "<" + CustomEmojiDataString(id, name, animated) + ">";
	}

	public static string CustomEmojiDataString(Snowflake id, string name, bool animated)
	{
		return (animated ? "a" : "") + ":" + name + ":" + id;
	}

	public static string UnixTimestamp(DateTimeOffset time, TimestampStyles style = TimestampStyles.ShortDateTime)
	{
		return UnixTimestamp(time.ToUnixTimeSeconds(), style);
	}

	public static string UnixTimestamp(long timestamp, TimestampStyles style = TimestampStyles.ShortDateTime)
	{
		return $"<t:{timestamp.ToString()}:{GetTimestampFlag(style)}>";
	}

	private static char GetTimestampFlag(TimestampStyles style)
	{
		if (1 == 0)
		{
		}
		char result = style switch
		{
			TimestampStyles.ShortTime => 't', 
			TimestampStyles.LongTime => 'T', 
			TimestampStyles.ShortDate => 'd', 
			TimestampStyles.LongDate => 'D', 
			TimestampStyles.ShortDateTime => 'f', 
			TimestampStyles.LongDateTime => 'F', 
			TimestampStyles.RelativeTime => 'R', 
			_ => 'f', 
		};
		if (1 == 0)
		{
		}
		return result;
	}

	public static string GuildNavigation(GuildNavigationType type)
	{
		return "<id:" + Singleton<EnumCache<GuildNavigationType>>.Instance.ToLower(type) + ">";
	}

	public static string Italics(string message)
	{
		return "*" + message + "*";
	}

	public static string Bold(string message)
	{
		return "**" + message + "**";
	}

	public static string ItalicsBold(string message)
	{
		return "***" + message + "***";
	}

	public static string Underline(string message)
	{
		return "__" + message + "__";
	}

	public static string UnderlineItalics(string message)
	{
		return "__*" + message + "*__";
	}

	public static string UnderlineBold(string message)
	{
		return "__**" + message + "**__";
	}

	public static string UnderlineBoldItalics(string message)
	{
		return "__***" + message + "***__";
	}

	public static string Strikethrough(string message)
	{
		return "~~" + message + "~~";
	}

	public static string CodeBlockOneLine(string message)
	{
		return "`" + message + "`";
	}

	public static string CodeBlockMultiLine(string message)
	{
		return "```\n" + message + "\n```";
	}

	public static string CodeBlockLanguage(string message, string language)
	{
		return "```" + language + "\n" + message + "\n```";
	}

	public static string BlockQuoteSingleLine(string message)
	{
		return "> " + message;
	}

	public static string BlockQuoteMultiLine(string message)
	{
		return ">>> " + message;
	}

	public static string Spoiler(string message)
	{
		return "||" + message + "||";
	}

	public static string Header1(string header)
	{
		return "# " + header;
	}

	public static string Header2(string header)
	{
		return "## " + header;
	}

	public static string Header3(string header)
	{
		return "### " + header;
	}

	public static string MaskLink(string mask, string url)
	{
		return "[" + mask + "](" + url + ")";
	}

	public static string List(string message, bool indent)
	{
		return (indent ? " " : string.Empty) + "- " + message;
	}

	public static string NumberedList(string message, int number, bool indent)
	{
		return (indent ? " " : string.Empty) + Singleton<StringCache<int>>.Instance.ToString(number) + " " + message;
	}
}
