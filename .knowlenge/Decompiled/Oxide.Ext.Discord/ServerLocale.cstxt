using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Ext.Discord;
using Oxide.Ext.Discord.Json;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Logging;

[JsonConverter(typeof(ServerLocaleConverter))]
public readonly struct ServerLocale : IEquatable<ServerLocale>
{
	public readonly string Id;

	public static readonly ServerLocale Default = new ServerLocale("en");

	private static DateTime _lastError;

	private static readonly List<string> LocaleError = new List<string>();

	public bool IsValid => !string.IsNullOrEmpty(Id);

	public bool IsDefault => IsValid && Equals(Default);

	public DiscordLocale GetDiscordLocale()
	{
		return BaseDiscordLibrary<DiscordLocales>.Instance.GetDiscordLocale(this);
	}

	private ServerLocale(string id)
	{
		Id = id;
	}

	public static ServerLocale Parse(string locale)
	{
		ServerLocale serverLocale = new ServerLocale(locale);
		if (!BaseDiscordLibrary<DiscordLocales>.Instance.Contains(serverLocale) && (!LocaleError.Contains(locale) || _lastError + TimeSpan.FromMinutes(5.0) < DateTime.UtcNow))
		{
			LocaleError.Remove(locale);
			LocaleError.Add(locale);
			_lastError = DateTime.UtcNow;
			DiscordExtension.GlobalLogger.Warning("Parsed ServerLocale '{0}' which does not exist in DiscordLang. Please give this message to the Discord Extension Authors", locale);
		}
		return serverLocale;
	}

	internal static ServerLocale Create(string locale)
	{
		return new ServerLocale(locale);
	}

	public override string ToString()
	{
		return Id;
	}

	public bool Equals(ServerLocale other)
	{
		return Id == other.Id;
	}

	public override bool Equals(object obj)
	{
		return obj is ServerLocale other && Equals(other);
	}

	public override int GetHashCode()
	{
		return (Id != null) ? Id.GetHashCode() : 0;
	}
}
