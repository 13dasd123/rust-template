using System;
using Oxide.Core.Libraries.Covalence;
using Oxide.Ext.Discord.Cache;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Types;

public readonly struct PlayerId : IEquatable<PlayerId>
{
	public readonly string Id;

	public bool IsValid => !string.IsNullOrEmpty(Id);

	public IPlayer Player => IsValid ? Singleton<ServerPlayerCache>.Instance.GetPlayerById(Id) : null;

	public PlayerId(string id)
	{
		if (string.IsNullOrEmpty(id))
		{
			throw new ArgumentNullException("id");
		}
		Id = id;
	}

	public PlayerId(IPlayer player)
	{
		Id = player?.Id ?? throw new ArgumentNullException("player");
	}

	public bool Equals(PlayerId other)
	{
		return Id == other.Id;
	}

	public override bool Equals(object obj)
	{
		return obj is PlayerId other && Equals(other);
	}

	public override int GetHashCode()
	{
		return (Id != null) ? Id.GetHashCode() : 0;
	}
}
