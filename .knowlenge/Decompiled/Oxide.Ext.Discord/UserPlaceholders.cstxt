using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Plugins;

public static class UserPlaceholders
{
	internal static readonly PlaceholderDataKey TargetUserKey = new PlaceholderDataKey("TargetUser");

	internal static readonly PlaceholderDataKey BotUserKey = new PlaceholderDataKey("BotUser");

	public static Snowflake Id(DiscordUser user)
	{
		return user.Id;
	}

	public static string UserName(DiscordUser user)
	{
		return user.Username;
	}

	public static string Discriminator(DiscordUser user)
	{
		return user.Discriminator;
	}

	public static string FullName(DiscordUser user)
	{
		return user.FullUserName;
	}

	public static string AvatarUrl(DiscordUser user)
	{
		return user.GetAvatarUrl;
	}

	public static string BannerUrl(DiscordUser user)
	{
		return user.GetBannerUrl;
	}

	public static string Mention(DiscordUser user)
	{
		return user.Mention;
	}

	public static bool IsLinked(DiscordUser user)
	{
		return user.IsLinked();
	}

	internal static void RegisterPlaceholders()
	{
		RegisterPlaceholders(DiscordExtensionCore.Instance, DefaultKeys.User, new PlaceholderDataKey("DiscordUser"));
		RegisterPlaceholders(DiscordExtensionCore.Instance, DefaultKeys.UserTarget, TargetUserKey);
		RegisterPlaceholders(DiscordExtensionCore.Instance, DefaultKeys.Bot, BotUserKey);
	}

	public static void RegisterPlaceholders(Plugin plugin, UserKeys keys, PlaceholderDataKey dataKey)
	{
		DiscordPlaceholders instance = BaseDiscordLibrary<DiscordPlaceholders>.Instance;
		instance.RegisterPlaceholder<DiscordUser, Snowflake>(plugin, keys.Id, dataKey, Id);
		instance.RegisterPlaceholder<DiscordUser, string>(plugin, keys.Username, dataKey, UserName);
		instance.RegisterPlaceholder<DiscordUser, string>(plugin, keys.Discriminator, dataKey, Discriminator);
		instance.RegisterPlaceholder<DiscordUser, string>(plugin, keys.Fullname, dataKey, FullName);
		instance.RegisterPlaceholder<DiscordUser, string>(plugin, keys.AvatarUrl, dataKey, AvatarUrl);
		instance.RegisterPlaceholder<DiscordUser, string>(plugin, keys.BannerUrl, dataKey, BannerUrl);
		instance.RegisterPlaceholder<DiscordUser, string>(plugin, keys.Mention, dataKey, Mention);
		instance.RegisterPlaceholder<DiscordUser, bool>(plugin, keys.IsLinked, dataKey, IsLinked);
	}
}
