using System;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Oxide.Ext.Discord;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Services.IpApi;
using Oxide.Ext.Discord.Types;

internal sealed class IpApiService : Singleton<IpApiService>
{
	private readonly HttpClient _client;

	private readonly ILogger _logger = DiscordExtension.GlobalLogger;

	private readonly SemaphoreSlim _semaphore = new SemaphoreSlim(5, 5);

	private int _remainingRequests = 45;

	private DateTimeOffset _limitReset = DateTimeOffset.MinValue;

	private const string RemainingRequestsHeader = "X-Rl";

	private const string RemainingSecondsHeader = "X-Ttl";

	private const int MaxRetries = 3;

	private IpApiService()
	{
		HttpClientHandler handler = new HttpClientHandler
		{
			AutomaticDecompression = (DecompressionMethods.GZip | DecompressionMethods.Deflate),
			UseCookies = false
		};
		_client = new HttpClient(handler)
		{
			Timeout = TimeSpan.FromSeconds(15.0),
			BaseAddress = new Uri("http://ip-api.com/json/")
		};
		_client.DefaultRequestHeaders.Accept.Add(MediaTypeWithQualityHeaderValue.Parse("application/json"));
		_client.DefaultRequestHeaders.AcceptEncoding.Add(StringWithQualityHeaderValue.Parse("gzip"));
		_client.DefaultRequestHeaders.AcceptEncoding.Add(StringWithQualityHeaderValue.Parse("deflate"));
	}

	public ValueTask<IpResult> GetCountryCode(string ip)
	{
		_logger.Verbose("IpApiService.GetCountryCode Getting IP data for {0}", ip);
		string url = ip + "?fields=49155";
		return GetCountryCodeInternal(url, 0);
	}

	private async ValueTask<IpResult> GetCountryCodeInternal(string url, int retries)
	{
		if (retries++ >= 3)
		{
			_logger.Verbose("IpApiService.GetCountryCodeInternal Failed to get IP data after {0} retries", retries);
			return null;
		}
		if (_remainingRequests <= 0 && _limitReset > DateTimeOffset.UtcNow)
		{
			_logger.Verbose("IpApiService.GetCountryCodeInternal Rate Limit reached. Waiting for {0}", DateTimeOffset.UtcNow - _limitReset);
			await _limitReset.DelayUntil().ConfigureAwait(continueOnCapturedContext: false);
		}
		HttpResponseMessage result = null;
		try
		{
			await _semaphore.WaitAsync().ConfigureAwait(continueOnCapturedContext: false);
			_logger.Verbose("IpApiService.GetCountryCodeInternal Start Request {0}", url);
			result = await _client.GetAsync(url).ConfigureAwait(continueOnCapturedContext: false);
			if (result.IsSuccessStatusCode)
			{
				string json = await result.Content.ReadAsStringAsync().ConfigureAwait(continueOnCapturedContext: false);
				IpResult ipResult = JsonConvert.DeserializeObject<IpResult>(json);
				_logger.Verbose("IpApiService.GetCountryCodeInternal Request Success for IP: {0}. IP Success: {1} Message: {2} Body:\n{3} ", url, ipResult?.IsSuccess ?? false, ipResult?.Message, json);
				return (ipResult?.IsSuccess ?? false) ? ipResult : null;
			}
			if (retries >= 3)
			{
				ILogger logger = _logger;
				HttpStatusCode statusCode = result.StatusCode;
				logger.Error("IpApiService.GetCountryCodeInternal An error occured during request. Code: {0} Message: {1}", statusCode, await result.Content.ReadAsStringAsync().ConfigureAwait(continueOnCapturedContext: false));
			}
			HttpStatusCode statusCode2 = result.StatusCode;
			HttpStatusCode httpStatusCode = statusCode2;
			HttpStatusCode httpStatusCode2 = httpStatusCode;
			if (httpStatusCode2 == HttpStatusCode.InternalServerError || httpStatusCode2 == HttpStatusCode.ServiceUnavailable)
			{
				await (DateTimeOffset.UtcNow + TimeSpan.FromSeconds(1.0)).DelayUntil().ConfigureAwait(continueOnCapturedContext: false);
				return await GetCountryCodeInternal(url, retries).ConfigureAwait(continueOnCapturedContext: false);
			}
			return null;
		}
		catch (JsonSerializationException ex)
		{
			JsonSerializationException ex2 = ex;
			_logger.Exception("IpApiService.GetCountryCodeInternal An error occured during JSON serialization.", ex2);
			return null;
		}
		catch (Exception exception)
		{
			if (retries >= 3)
			{
				_logger.Exception("IpApiService.GetCountryCodeInternal An error occured during IP lookup.", exception);
			}
			await (DateTimeOffset.UtcNow + TimeSpan.FromSeconds(1.0)).DelayUntil().ConfigureAwait(continueOnCapturedContext: false);
			return await GetCountryCodeInternal(url, retries).ConfigureAwait(continueOnCapturedContext: false);
		}
		finally
		{
			_semaphore.Release();
			if (result?.Headers != null)
			{
				ParseHeaders(result.Headers);
			}
		}
	}

	private void ParseHeaders(HttpResponseHeaders headers)
	{
		if (headers.TryGetInt("X-Rl", out var value) && value < _remainingRequests)
		{
			_remainingRequests = value;
		}
		if (headers.TryGetInt("X-Ttl", out var value2))
		{
			DateTimeOffset dateTimeOffset = DateTimeOffset.UtcNow + TimeSpan.FromSeconds(value2) + TimeSpan.FromMilliseconds(25.0);
			if (dateTimeOffset > _limitReset)
			{
				_remainingRequests = value;
				_limitReset = dateTimeOffset;
			}
		}
		_logger.Verbose("IpApiService.GetCountryCodeInternal Parsed Headers. Remaining: {0} Limit Reset At: {1}", _remainingRequests, _limitReset);
	}
}
