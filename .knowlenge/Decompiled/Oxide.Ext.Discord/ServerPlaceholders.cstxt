using System;
using System.Linq;
using System.Net;
using Oxide.Core.Libraries.Covalence;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Cache;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Plugins;
using Oxide.Ext.Discord.Types;

public static class ServerPlaceholders
{
	public static string Name(IServer server)
	{
		return server.Name;
	}

	public static int Players(IServer server)
	{
		return server.Players;
	}

	public static int MaxPlayers(IServer server)
	{
		return server.MaxPlayers;
	}

	public static int TotalPlayers(IServer server)
	{
		return Singleton<OxideLibrary>.Instance.Covalence.Players.All.Count();
	}

	public static string Version(IServer server)
	{
		return server.Version;
	}

	public static string Protocol(IServer server)
	{
		return server.Protocol;
	}

	public static IPAddress Address(IServer server)
	{
		return server.Address;
	}

	public static ushort Port(IServer server)
	{
		return server.Port;
	}

	public static DateTime Time(IServer server)
	{
		return server.Time;
	}

	internal static void RegisterPlaceholders()
	{
		RegisterPlaceholders(DiscordExtensionCore.Instance, DefaultKeys.Server, new PlaceholderDataKey("IServer"));
	}

	public static void RegisterPlaceholders(Plugin plugin, ServerKeys keys, PlaceholderDataKey dataKey)
	{
		DiscordPlaceholders instance = BaseDiscordLibrary<DiscordPlaceholders>.Instance;
		instance.RegisterPlaceholder<IServer, string>(plugin, keys.Name, dataKey, Name);
		instance.RegisterPlaceholder<IServer, int>(plugin, keys.Players, dataKey, Players);
		instance.RegisterPlaceholder<IServer, int>(plugin, keys.MaxPlayers, dataKey, MaxPlayers);
		instance.RegisterPlaceholder<IServer, int>(plugin, keys.TotalPlayers, dataKey, TotalPlayers);
		instance.RegisterPlaceholder<IServer, string>(plugin, keys.Version, dataKey, Version);
		instance.RegisterPlaceholder<IServer, string>(plugin, keys.Protocol, dataKey, Protocol);
		instance.RegisterPlaceholder<IServer, IPAddress>(plugin, keys.Address, dataKey, Address);
		instance.RegisterPlaceholder<IServer, ushort>(plugin, keys.Port, dataKey, Port);
		instance.RegisterPlaceholder<IServer, DateTime>(plugin, keys.Time, dataKey, Time);
	}
}
