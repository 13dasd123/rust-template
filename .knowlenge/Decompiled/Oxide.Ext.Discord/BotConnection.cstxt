using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Connections;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Factory;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Types;

public class BotConnection
{
	public string ApiToken { get; set; }

	public GatewayIntents Intents { get; set; }

	public DiscordLogLevel LogLevel { get; set; }

	public string HiddenToken => Token?.HiddenToken ?? "Unknown Token";

	public Snowflake ApplicationId => Token?.ApplicationId ?? default(Snowflake);

	private BotTokenData Token { get; set; }

	public BotConnection()
	{
	}

	public BotConnection(string apiToken, GatewayIntents intents = GatewayIntents.None)
	{
		ApiToken = apiToken;
		Intents = intents;
	}

	public BotConnection(string apiToken, GatewayIntents intents = GatewayIntents.None, DiscordLogLevel logLevel = DiscordLogLevel.Info)
		: this(apiToken, intents)
	{
		ApiToken = apiToken;
		Intents = intents;
		LogLevel = logLevel;
	}

	internal BotConnection(BotConnection connection)
		: this(connection.ApiToken, connection.Intents)
	{
		Token = connection.Token;
	}

	internal void Initialize(DiscordClient client)
	{
		if (Token == null)
		{
			BotTokenData botTokenData2 = (Token = Singleton<BotTokenFactory>.Instance.CreateFromClient(client));
		}
	}

	public bool HasIntents(GatewayIntents intents)
	{
		return (Intents & intents) == intents;
	}

	public bool HasAnyIntent(GatewayIntents intents)
	{
		return (Intents & intents) != 0;
	}
}
