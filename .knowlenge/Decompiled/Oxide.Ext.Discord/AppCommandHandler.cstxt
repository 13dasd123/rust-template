using System.Collections.Concurrent;
using System.Collections.Generic;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Extensions;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Libraries;
using Oxide.Ext.Discord.Logging;
using Oxide.Ext.Discord.Plugins;

internal class AppCommandHandler
{
	private readonly ConcurrentDictionary<AppCommandId, BaseAppCommand> _commands = new ConcurrentDictionary<AppCommandId, BaseAppCommand>();

	private readonly List<ComponentCommand> _components = new List<ComponentCommand>();

	private readonly ILogger _logger;

	public bool IsEmpty => _commands.Count == 0;

	public AppCommandHandler(ILogger logger)
	{
		_logger = logger;
	}

	public BaseAppCommand GetCommandById(AppCommandId id)
	{
		InteractionType type = id.Type;
		if (1 == 0)
		{
		}
		BaseAppCommand result;
		switch (type)
		{
		case InteractionType.ApplicationCommand:
		case InteractionType.ApplicationCommandAutoComplete:
			result = _commands.GetValueOrDefault(id);
			break;
		case InteractionType.MessageComponent:
		case InteractionType.ModalSubmit:
			result = GetComponentCommand(id);
			break;
		default:
			result = null;
			break;
		}
		if (1 == 0)
		{
		}
		return result;
	}

	public void AddAppCommand(BaseAppCommand command)
	{
		if (command is ComponentCommand item)
		{
			_components.Add(item);
		}
		else
		{
			_commands[command.CommandId] = command;
		}
		_logger.Verbose("AppCommandHandler.AddAppCommand Command: {0}", command.CommandId);
	}

	public bool RemoveAppCommand(BaseAppCommand command)
	{
		_logger.Verbose("AppCommandHandler.RemoveAppCommand Command: {0}", command.CommandId);
		if (command is ComponentCommand item)
		{
			return _components.Remove(item);
		}
		BaseAppCommand value;
		return _commands.TryRemove(command.CommandId, out value);
	}

	private ComponentCommand GetComponentCommand(AppCommandId id)
	{
		for (int i = 0; i < _components.Count; i++)
		{
			ComponentCommand componentCommand = _components[i];
			if (componentCommand.IsForCommand(id))
			{
				return componentCommand;
			}
		}
		return null;
	}

	public IEnumerable<BaseAppCommand> GetCommandsForPlugin(Plugin plugin)
	{
		PluginId id = plugin.Id();
		foreach (BaseAppCommand command in _commands.Values)
		{
			if (command.IsForPlugin(id))
			{
				yield return command;
			}
		}
		for (int index = 0; index < _components.Count; index++)
		{
			ComponentCommand command2 = _components[index];
			if (command2.IsForPlugin(id))
			{
				yield return command2;
			}
		}
	}

	public IEnumerable<BaseAppCommand> GetCommands()
	{
		foreach (BaseAppCommand value in _commands.Values)
		{
			yield return value;
		}
		for (int index = 0; index < _components.Count; index++)
		{
			yield return _components[index];
		}
	}
}
