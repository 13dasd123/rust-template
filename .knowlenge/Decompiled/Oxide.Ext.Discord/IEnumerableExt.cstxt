using System;
using System.Collections.Generic;
using Oxide.Ext.Discord.Types;
using Oxide.Plugins;

public static class IEnumerableExt
{
	public static List<TSource> ToPooledList<TSource>(this IEnumerable<TSource> source, DiscordPluginPool pluginPool)
	{
		if (source == null)
		{
			throw new ArgumentNullException("source");
		}
		List<TSource> list = pluginPool.GetList<TSource>();
		list.AddRange(source);
		return list;
	}

	public static Hash<TKey, TElement> ToHash<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)
	{
		if (source == null)
		{
			throw new ArgumentNullException("source");
		}
		if (keySelector == null)
		{
			throw new ArgumentNullException("keySelector");
		}
		if (elementSelector == null)
		{
			throw new ArgumentNullException("elementSelector");
		}
		Hash<TKey, TElement> hash = new Hash<TKey, TElement>();
		foreach (TSource item in source)
		{
			hash.Add(keySelector(item), elementSelector(item));
		}
		return hash;
	}

	public static Hash<TKey, TElement> ToPooledHash<TSource, TKey, TElement>(this IEnumerable<TSource> source, DiscordPluginPool pluginPool, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)
	{
		if (source == null)
		{
			throw new ArgumentNullException("source");
		}
		if (keySelector == null)
		{
			throw new ArgumentNullException("keySelector");
		}
		if (elementSelector == null)
		{
			throw new ArgumentNullException("elementSelector");
		}
		Hash<TKey, TElement> hash = pluginPool.GetHash<TKey, TElement>();
		foreach (TSource item in source)
		{
			hash.Add(keySelector(item), elementSelector(item));
		}
		return hash;
	}
}
