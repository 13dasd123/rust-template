using System;
using System.Collections.Generic;
using System.Linq;
using Oxide.Core;
using Oxide.Core.Plugins;
using Oxide.Ext.Discord.Cache;
using Oxide.Ext.Discord.Types;

public sealed class DiscordPluginCache : Singleton<DiscordPluginCache>
{
	private readonly List<string> _loadablePlugins = new List<string>();

	private readonly List<string> _loadedPlugins = new List<string>();

	private readonly List<string> _allPlugins = new List<string>();

	private DateTime _nextLoadedUpdate = DateTime.MinValue;

	private DateTime _nextAllUpdate = DateTime.MinValue;

	private DiscordPluginCache()
	{
	}

	public IReadOnlyList<string> GetLoadedPlugins()
	{
		if (_loadedPlugins.Count != 0)
		{
			return _loadedPlugins;
		}
		_loadablePlugins.Clear();
		_loadedPlugins.AddRange(from p in Interface.Oxide.RootPluginManager.GetPlugins()
			where !p.IsCorePlugin
			select p.Name into p
			orderby p
			select p);
		return _loadedPlugins;
	}

	public IReadOnlyList<string> GetLoadablePlugins()
	{
		if (_nextLoadedUpdate > DateTime.UtcNow)
		{
			return _loadablePlugins;
		}
		_loadablePlugins.Clear();
		_loadablePlugins.AddRange(from p in Singleton<OxideLibrary>.Instance.PluginLoader.ScanDirectory(Interface.Oxide.PluginDirectory).Except(GetLoadedPlugins())
			orderby p
			select p);
		_nextLoadedUpdate = DateTime.UtcNow + TimeSpan.FromSeconds(15.0);
		return _loadablePlugins;
	}

	public IReadOnlyList<string> GetAllPlugins()
	{
		if (_nextAllUpdate > DateTime.UtcNow)
		{
			return _allPlugins;
		}
		_allPlugins.Clear();
		_allPlugins.AddRange(from p in Singleton<OxideLibrary>.Instance.PluginLoader.ScanDirectory(Interface.Oxide.PluginDirectory)
			orderby p
			select p);
		_nextAllUpdate = DateTime.UtcNow + TimeSpan.FromSeconds(15.0);
		return _allPlugins;
	}

	internal void OnPluginLoaded(Plugin plugin)
	{
		if (!plugin.IsCorePlugin)
		{
			_nextLoadedUpdate = DateTime.UtcNow;
			_loadedPlugins.Clear();
		}
	}

	internal void OnPluginUnloaded(Plugin plugin)
	{
		if (!plugin.IsCorePlugin)
		{
			_nextLoadedUpdate = DateTime.UtcNow;
			_loadedPlugins.Clear();
		}
	}
}
