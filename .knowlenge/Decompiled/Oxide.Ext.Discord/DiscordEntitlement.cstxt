using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Clients;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Interfaces;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class DiscordEntitlement
{
	[JsonProperty("id")]
	public Snowflake Id { get; set; }

	[JsonProperty("sku_id")]
	public Snowflake SkuId { get; set; }

	[JsonProperty("application_id")]
	public Snowflake ApplicationId { get; set; }

	[JsonProperty("user_id")]
	public Snowflake? UserId { get; set; }

	[JsonProperty("type")]
	public EntitlementType Type { get; set; }

	[JsonProperty("deleted")]
	public bool Deleted { get; set; }

	[JsonProperty("starts_at")]
	public DateTime StartsAt { get; set; }

	[JsonProperty("ends_at")]
	public DateTime EndsAt { get; set; }

	[JsonProperty("guild_id")]
	public Snowflake? GuildId { get; set; }

	[JsonProperty("consumed")]
	public bool? Consumed { get; set; }

	public static IPromise<List<DiscordEntitlement>> GetEntitlements(DiscordClient client, Snowflake applicationId, GetEntitlements getEntitlements = null)
	{
		InvalidSnowflakeException.ThrowIfInvalid(applicationId, requireValue: true);
		return client.Bot.Rest.Get<List<DiscordEntitlement>>(client, $"applications/{applicationId}/application-object/entitlements{getEntitlements?.ToQueryString()}", null);
	}

	public IPromise ConsumeEntitlement(DiscordClient client)
	{
		return client.Bot.Rest.Post(client, $"applications/{ApplicationId}/entitlements/{Id}/consume", null, null);
	}

	public IPromise<DiscordEntitlement> CreateTestEntitlement(DiscordClient client, CreateTestEntitlement create)
	{
		return client.Bot.Rest.Post<DiscordEntitlement>(client, $"applications/{ApplicationId}/entitlements", create, null);
	}

	public IPromise DeleteTestEntitlement(DiscordClient client)
	{
		return client.Bot.Rest.Delete(client, $"/applications/{ApplicationId}/entitlements/{Id}", null);
	}
}
