using System.Collections.Generic;
using Newtonsoft.Json;
using Oxide.Ext.Discord.Entities;
using Oxide.Ext.Discord.Exceptions;
using Oxide.Ext.Discord.Interfaces;
using Oxide.Ext.Discord.Json;
using Oxide.Ext.Discord.Libraries;

[JsonObject(MemberSerialization = MemberSerialization.OptIn)]
public class DiscordMessageTemplate
{
	[JsonProperty("Message Content")]
	public string Content { get; set; } = string.Empty;

	[JsonProperty("Message Embeds")]
	public List<DiscordEmbedTemplate> Embeds { get; set; } = new List<DiscordEmbedTemplate>();

	[JsonConverter(typeof(TemplateComponentsConverter))]
	[JsonProperty("Message Components")]
	public List<BaseComponentTemplate> Components { get; set; } = new List<BaseComponentTemplate>();

	[JsonConstructor]
	public DiscordMessageTemplate()
	{
	}

	public DiscordMessageTemplate(string content)
	{
		Content = content ?? string.Empty;
	}

	public T ToMessage<T>(PlaceholderData data = null, T message = null) where T : class, IDiscordMessageTemplate, new()
	{
		if (message == null)
		{
			message = new T();
		}
		data?.IncrementDepth();
		DiscordPlaceholders instance = BaseDiscordLibrary<DiscordPlaceholders>.Instance;
		if (!string.IsNullOrEmpty(Content))
		{
			message.Content = instance.ProcessPlaceholders(Content, data);
		}
		if (Embeds != null && Embeds.Count != 0)
		{
			message.Embeds = CreateEmbeds(data);
		}
		if (Components != null && Components.Count != 0)
		{
			message.Components = CreateComponents(data);
		}
		data?.DecrementDepth();
		data?.AutoDispose();
		return message;
	}

	private List<DiscordEmbed> CreateEmbeds(PlaceholderData data)
	{
		List<DiscordEmbed> list = new List<DiscordEmbed>();
		for (int i = 0; i < Embeds.Count; i++)
		{
			DiscordEmbedTemplate discordEmbedTemplate = Embeds[i];
			if (discordEmbedTemplate.Enabled)
			{
				list.Add(discordEmbedTemplate.ToEntity(data));
			}
		}
		return list;
	}

	private List<ActionRowComponent> CreateComponents(PlaceholderData data)
	{
		List<ActionRowComponent> list = new List<ActionRowComponent>();
		ActionRowComponent actionRowComponent = AddActionRow(list, -1, Components.Count);
		for (int i = 0; i < Components.Count; i++)
		{
			BaseComponentTemplate baseComponentTemplate = Components[i];
			if (!baseComponentTemplate.Visible || actionRowComponent == null)
			{
				continue;
			}
			if (baseComponentTemplate is ButtonTemplate buttonTemplate)
			{
				BaseComponent baseComponent = buttonTemplate.ToComponent(data);
				if (baseComponent != null)
				{
					actionRowComponent.Components.Add(baseComponent);
				}
				if (!buttonTemplate.Inline || actionRowComponent.Components.Count == 5)
				{
					InvalidMessageComponentException.ThrowIfInvalidMaxActionRows(list.Count);
					actionRowComponent = AddActionRow(list, i, Components.Count);
				}
			}
			else if (baseComponentTemplate is SelectMenuTemplate selectMenuTemplate)
			{
				actionRowComponent.Components.Add(selectMenuTemplate.ToComponent(data));
				InvalidMessageComponentException.ThrowIfInvalidMaxActionRows(list.Count);
				actionRowComponent = AddActionRow(list, i, Components.Count);
			}
		}
		if (actionRowComponent != null && actionRowComponent.Components.Count == 0)
		{
			list.Remove(actionRowComponent);
		}
		return list;
	}

	private ActionRowComponent AddActionRow(List<ActionRowComponent> row, int index, int count)
	{
		if (index + 1 >= count)
		{
			return null;
		}
		ActionRowComponent actionRowComponent = new ActionRowComponent();
		row.Add(actionRowComponent);
		return actionRowComponent;
	}
}
