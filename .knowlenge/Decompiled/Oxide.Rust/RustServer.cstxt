using System;
using System.Globalization;
using System.IO;
using System.Net;
using ConVar;
using Facepunch;
using Oxide.Core;
using Oxide.Core.Libraries.Covalence;
using Oxide.Game.Rust.Libraries;
using Rust;

public class RustServer : IServer
{
	internal readonly Server Server = new Server();

	private static IPAddress address;

	private static IPAddress localAddress;

	public string Name
	{
		get
		{
			return Server.hostname;
		}
		set
		{
			Server.hostname = value;
		}
	}

	public IPAddress Address
	{
		get
		{
			try
			{
				if (address == null || !Utility.ValidateIPv4(address.ToString()))
				{
					if (Utility.ValidateIPv4(Server.ip) && !Utility.IsLocalIP(Server.ip))
					{
						IPAddress.TryParse(Server.ip, out address);
						Interface.Oxide.LogInfo($"IP address from command-line: {address}", Array.Empty<object>());
					}
					else
					{
						IPAddress.TryParse(new WebClient().DownloadString("http://api.ipify.org"), out address);
						Interface.Oxide.LogInfo($"IP address from external API: {address}", Array.Empty<object>());
					}
				}
				return address;
			}
			catch (Exception ex)
			{
				RemoteLogger.Exception("Couldn't get server's public IP address", ex);
				return IPAddress.Any;
			}
		}
	}

	public IPAddress LocalAddress
	{
		get
		{
			try
			{
				return localAddress ?? (localAddress = Utility.GetLocalIP());
			}
			catch (Exception ex)
			{
				RemoteLogger.Exception("Couldn't get server's local IP address", ex);
				return IPAddress.Any;
			}
		}
	}

	public ushort Port => (ushort)Server.port;

	public string Version => BuildInfo.Current.Build.Number;

	public string Protocol => Protocol.printable;

	public CultureInfo Language => CultureInfo.InstalledUICulture;

	public int Players => BasePlayer.activePlayerList.Count;

	public int MaxPlayers
	{
		get
		{
			return Server.maxplayers;
		}
		set
		{
			Server.maxplayers = value;
		}
	}

	public DateTime Time
	{
		get
		{
			return TOD_Sky.Instance.Cycle.DateTime;
		}
		set
		{
			TOD_Sky.Instance.Cycle.DateTime = value;
		}
	}

	public SaveInfo SaveInfo { get; } = SaveInfo.Create(World.SaveFileName);

	public void Ban(string id, string reason, TimeSpan duration = default(TimeSpan))
	{
		if (!IsBanned(id))
		{
			ServerUsers.Set(ulong.Parse(id), (UserGroup)3, Name, reason, -1L);
			ServerUsers.Save();
		}
	}

	public TimeSpan BanTimeRemaining(string id)
	{
		if (!IsBanned(id))
		{
			return TimeSpan.Zero;
		}
		return TimeSpan.MaxValue;
	}

	public bool IsBanned(string id)
	{
		return ServerUsers.Is(ulong.Parse(id), (UserGroup)3);
	}

	public void Save()
	{
		Server.save((Arg)null);
		File.WriteAllText(Server.GetServerFolder("cfg") + "/serverauto.cfg", ConsoleSystem.SaveToConfigString(true));
		ServerUsers.Save();
	}

	public void Unban(string id)
	{
		if (IsBanned(id))
		{
			ServerUsers.Remove(ulong.Parse(id));
			ServerUsers.Save();
		}
	}

	public void Broadcast(string message, string prefix, params object[] args)
	{
		Server.Broadcast(message, prefix, 0uL, args);
	}

	public void Broadcast(string message)
	{
		Broadcast(message, null);
	}

	public void Command(string command, params object[] args)
	{
		Server.Command(command, args);
	}
}
