using System;
using System.Reflection;
using Oxide.Core;
using Oxide.Core.Plugins;
using Oxide.Game.Rust.Libraries;
using Oxide.Plugins;
using UnityEngine;

public abstract class RustPlugin : CSharpPlugin
{
	protected Command cmd = Interface.Oxide.GetLibrary<Command>((string)null);

	protected Rust rust = Interface.Oxide.GetLibrary<Rust>((string)null);

	protected Item Item = Interface.Oxide.GetLibrary<Item>((string)null);

	protected Player Player = Interface.Oxide.GetLibrary<Player>((string)null);

	protected Server Server = Interface.Oxide.GetLibrary<Server>((string)null);

	public override void HandleAddedToManager(PluginManager manager)
	{
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Expected O, but got Unknown
		//IL_025b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0260: Unknown result type (might be due to invalid IL or missing references)
		FieldInfo[] fields = ((object)this).GetType().GetFields(BindingFlags.Instance | BindingFlags.NonPublic);
		foreach (FieldInfo fieldInfo in fields)
		{
			if (fieldInfo.GetCustomAttributes(typeof(OnlinePlayersAttribute), inherit: true).Length != 0)
			{
				PluginFieldInfo val = new PluginFieldInfo((Plugin)(object)this, fieldInfo);
				if (val.GenericArguments.Length != 2 || val.GenericArguments[0] != typeof(BasePlayer))
				{
					((CSharpPlugin)this).Puts("The " + fieldInfo.Name + " field is not a Hash with a BasePlayer key! (online players will not be tracked)", Array.Empty<object>());
				}
				else if (!val.LookupMethod("Add", val.GenericArguments))
				{
					((CSharpPlugin)this).Puts("The " + fieldInfo.Name + " field does not support adding BasePlayer keys! (online players will not be tracked)", Array.Empty<object>());
				}
				else if (!val.LookupMethod("Remove", new Type[1] { typeof(BasePlayer) }))
				{
					((CSharpPlugin)this).Puts("The " + fieldInfo.Name + " field does not support removing BasePlayer keys! (online players will not be tracked)", Array.Empty<object>());
				}
				else if (val.GenericArguments[1].GetField("Player") == null)
				{
					((CSharpPlugin)this).Puts("The " + val.GenericArguments[1].Name + " class does not have a public Player field! (online players will not be tracked)", Array.Empty<object>());
				}
				else if (!val.HasValidConstructor(new Type[1] { typeof(BasePlayer) }))
				{
					((CSharpPlugin)this).Puts("The " + fieldInfo.Name + " field is using a class which contains no valid constructor (online players will not be tracked)", Array.Empty<object>());
				}
				else
				{
					base.onlinePlayerFields.Add(val);
				}
			}
		}
		MethodInfo[] methods = ((object)this).GetType().GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
		foreach (MethodInfo methodInfo in methods)
		{
			object[] customAttributes = methodInfo.GetCustomAttributes(typeof(ConsoleCommandAttribute), inherit: true);
			if (customAttributes.Length != 0)
			{
				object obj = customAttributes[0];
				ConsoleCommandAttribute val2 = (ConsoleCommandAttribute)((obj is ConsoleCommandAttribute) ? obj : null);
				if (val2 != null)
				{
					cmd.AddConsoleCommand(val2.Command, (Plugin)(object)this, methodInfo.Name);
				}
				continue;
			}
			customAttributes = methodInfo.GetCustomAttributes(typeof(ChatCommandAttribute), inherit: true);
			if (customAttributes.Length != 0)
			{
				object obj2 = customAttributes[0];
				ChatCommandAttribute val3 = (ChatCommandAttribute)((obj2 is ChatCommandAttribute) ? obj2 : null);
				if (val3 != null)
				{
					cmd.AddChatCommand(val3.Command, (Plugin)(object)this, methodInfo.Name);
				}
			}
		}
		if (base.onlinePlayerFields.Count > 0)
		{
			Enumerator<BasePlayer> enumerator = BasePlayer.activePlayerList.GetEnumerator();
			try
			{
				while (enumerator.MoveNext())
				{
					BasePlayer current = enumerator.Current;
					AddOnlinePlayer(current);
				}
			}
			finally
			{
				((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
			}
		}
		((CSharpPlugin)this).HandleAddedToManager(manager);
	}

	[HookMethod("OnPlayerConnected")]
	private void base_OnPlayerConnected(BasePlayer player)
	{
		AddOnlinePlayer(player);
	}

	[HookMethod("OnPlayerDisconnected")]
	private void base_OnPlayerDisconnected(BasePlayer player, string reason)
	{
		((CSharpPlugin)this).NextTick((Action)delegate
		{
			foreach (PluginFieldInfo onlinePlayerField in base.onlinePlayerFields)
			{
				onlinePlayerField.Call("Remove", new object[1] { player });
			}
		});
	}

	private void AddOnlinePlayer(BasePlayer player)
	{
		foreach (PluginFieldInfo onlinePlayerField in base.onlinePlayerFields)
		{
			Type type = onlinePlayerField.GenericArguments[1];
			object obj = ((type.GetConstructor(new Type[1] { typeof(BasePlayer) }) == null) ? Activator.CreateInstance(type) : Activator.CreateInstance(type, player));
			type.GetField("Player").SetValue(obj, player);
			onlinePlayerField.Call("Add", new object[2] { player, obj });
		}
	}

	protected void PrintToConsole(BasePlayer player, string format, params object[] args)
	{
		if (((BaseNetworkable)(player?)).net != null)
		{
			player.SendConsoleCommand("echo " + ((args.Length != 0) ? string.Format(format, args) : format), Array.Empty<object>());
		}
	}

	protected void PrintToConsole(string format, params object[] args)
	{
		if (BasePlayer.activePlayerList.Count >= 1)
		{
			ConsoleNetwork.BroadcastToAllClients("echo " + ((args.Length != 0) ? string.Format(format, args) : format), Array.Empty<object>());
		}
	}

	protected void PrintToChat(BasePlayer player, string format, params object[] args)
	{
		if (((BaseNetworkable)(player?)).net != null)
		{
			player.SendConsoleCommand("chat.add", new object[3]
			{
				2,
				0,
				(args.Length != 0) ? string.Format(format, args) : format
			});
		}
	}

	protected void PrintToChat(string format, params object[] args)
	{
		if (BasePlayer.activePlayerList.Count >= 1)
		{
			ConsoleNetwork.BroadcastToAllClients("chat.add", new object[3]
			{
				2,
				0,
				(args.Length != 0) ? string.Format(format, args) : format
			});
		}
	}

	protected void SendReply(Arg arg, string format, params object[] args)
	{
		MonoBehaviour obj = arg.Connection?.player;
		BasePlayer val = (BasePlayer)(object)((obj is BasePlayer) ? obj : null);
		string text = ((args.Length != 0) ? string.Format(format, args) : format);
		if (((BaseNetworkable)(val?)).net != null)
		{
			val.SendConsoleCommand("echo " + text, Array.Empty<object>());
		}
		else
		{
			((CSharpPlugin)this).Puts(text, Array.Empty<object>());
		}
	}

	protected void SendReply(BasePlayer player, string format, params object[] args)
	{
		PrintToChat(player, format, args);
	}

	protected void SendWarning(Arg arg, string format, params object[] args)
	{
		MonoBehaviour obj = arg.Connection?.player;
		BasePlayer val = (BasePlayer)(object)((obj is BasePlayer) ? obj : null);
		string text = ((args.Length != 0) ? string.Format(format, args) : format);
		if (((BaseNetworkable)(val?)).net != null)
		{
			val.SendConsoleCommand("echo " + text, Array.Empty<object>());
		}
		else
		{
			Debug.LogWarning((object)text);
		}
	}

	protected void SendError(Arg arg, string format, params object[] args)
	{
		MonoBehaviour obj = arg.Connection?.player;
		BasePlayer val = (BasePlayer)(object)((obj is BasePlayer) ? obj : null);
		string text = ((args.Length != 0) ? string.Format(format, args) : format);
		if (((BaseNetworkable)(val?)).net != null)
		{
			val.SendConsoleCommand("echo " + text, Array.Empty<object>());
		}
		else
		{
			Debug.LogError((object)text);
		}
	}

	protected void ForcePlayerPosition(BasePlayer player, Vector3 destination)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		player.MovePosition(destination);
		if (!player.IsSpectating() || (double)Vector3.Distance(((Component)player).transform.position, destination) > 25.0)
		{
			((BaseEntity)player).ClientRPC<Vector3>(RpcTarget.Player("ForcePositionTo", player), destination);
		}
		else
		{
			((BaseNetworkable)player).SendNetworkUpdate((NetworkQueue)1);
		}
	}
}
