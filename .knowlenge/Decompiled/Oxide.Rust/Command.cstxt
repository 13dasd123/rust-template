using System;
using System.Collections.Generic;
using System.Linq;
using Oxide.Core;
using Oxide.Core.Libraries;
using Oxide.Core.Plugins;
using Oxide.Game.Rust;
using Oxide.Game.Rust.Libraries;

public class Command : Library
{
	internal struct PluginCallback
	{
		public readonly Plugin Plugin;

		public readonly string Name;

		public Func<Arg, bool> Call;

		public PluginCallback(Plugin plugin, string name)
		{
			Plugin = plugin;
			Name = name;
			Call = null;
		}

		public PluginCallback(Plugin plugin, Func<Arg, bool> callback)
		{
			Plugin = plugin;
			Call = callback;
			Name = null;
		}
	}

	internal class ConsoleCommand
	{
		public readonly string Name;

		public PluginCallback Callback;

		public readonly Command RustCommand;

		public Action<Arg> OriginalCallback;

		internal readonly Permission permission = Interface.Oxide.GetLibrary<Permission>((string)null);

		public ConsoleCommand(string name)
		{
			//IL_0036: Unknown result type (might be due to invalid IL or missing references)
			//IL_003b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0044: Unknown result type (might be due to invalid IL or missing references)
			//IL_004d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0054: Unknown result type (might be due to invalid IL or missing references)
			//IL_005b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0062: Unknown result type (might be due to invalid IL or missing references)
			//IL_0069: Unknown result type (might be due to invalid IL or missing references)
			//IL_0070: Unknown result type (might be due to invalid IL or missing references)
			//IL_0077: Unknown result type (might be due to invalid IL or missing references)
			//IL_008e: Expected O, but got Unknown
			Name = name;
			string[] array = Name.Split(new char[1] { '.' });
			RustCommand = new Command
			{
				Name = array[1],
				Parent = array[0],
				FullName = name,
				ServerUser = true,
				ServerAdmin = true,
				Client = true,
				ClientInfo = false,
				Variable = false,
				Call = HandleCommand
			};
		}

		public void AddCallback(Plugin plugin, string name)
		{
			Callback = new PluginCallback(plugin, name);
		}

		public void AddCallback(Plugin plugin, Func<Arg, bool> callback)
		{
			Callback = new PluginCallback(plugin, callback);
		}

		public void HandleCommand(Arg arg)
		{
			Plugin plugin = Callback.Plugin;
			if (plugin != null)
			{
				plugin.TrackStart();
			}
			Callback.Call(arg);
			Plugin plugin2 = Callback.Plugin;
			if (plugin2 != null)
			{
				plugin2.TrackEnd();
			}
		}
	}

	internal class ChatCommand
	{
		public readonly string Name;

		public readonly Plugin Plugin;

		private readonly Action<BasePlayer, string, string[]> _callback;

		public ChatCommand(string name, Plugin plugin, Action<BasePlayer, string, string[]> callback)
		{
			Name = name;
			Plugin = plugin;
			_callback = callback;
		}

		public void HandleCommand(BasePlayer sender, string name, string[] args)
		{
			Plugin plugin = Plugin;
			if (plugin != null)
			{
				plugin.TrackStart();
			}
			_callback?.Invoke(sender, name, args);
			Plugin plugin2 = Plugin;
			if (plugin2 != null)
			{
				plugin2.TrackEnd();
			}
		}
	}

	internal readonly Dictionary<string, ConsoleCommand> consoleCommands;

	internal readonly Dictionary<string, ChatCommand> chatCommands;

	private readonly Dictionary<Plugin, Callback<Plugin, PluginManager>> pluginRemovedFromManager;

	public Command()
	{
		consoleCommands = new Dictionary<string, ConsoleCommand>();
		chatCommands = new Dictionary<string, ChatCommand>();
		pluginRemovedFromManager = new Dictionary<Plugin, Callback<Plugin, PluginManager>>();
	}

	[LibraryFunction("AddChatCommand")]
	public void AddChatCommand(string name, Plugin plugin, string callback)
	{
		AddChatCommand(name, plugin, delegate(BasePlayer player, string command, string[] args)
		{
			plugin.CallHook(callback, new object[3] { player, command, args });
		});
	}

	public void AddChatCommand(string command, Plugin plugin, Action<BasePlayer, string, string[]> callback)
	{
		string text = command.ToLowerInvariant();
		if (!CanOverrideCommand(command, "chat"))
		{
			string text2 = ((plugin != null) ? plugin.Name : null) ?? "An unknown plugin";
			Interface.Oxide.LogError("{0} tried to register command '{1}', this command already exists and cannot be overridden!", new object[2] { text2, text });
			return;
		}
		if (chatCommands.TryGetValue(text, out var value))
		{
			Plugin plugin2 = value.Plugin;
			string text3 = ((plugin2 != null) ? plugin2.Name : null) ?? "an unknown plugin";
			string text4 = ((plugin != null) ? plugin.Name : null) ?? "An unknown plugin";
			string text5 = text4 + " has replaced the '" + text + "' chat command previously registered by " + text3;
			Interface.Oxide.LogWarning(text5, Array.Empty<object>());
		}
		if (RustCore.Covalence.CommandSystem.registeredCommands.TryGetValue(text, out var value2))
		{
			Plugin source = value2.Source;
			string text6 = ((source != null) ? source.Name : null) ?? "an unknown plugin";
			string text7 = ((plugin != null) ? plugin.Name : null) ?? "An unknown plugin";
			string text8 = text7 + " has replaced the '" + text + "' command previously registered by " + text6;
			Interface.Oxide.LogWarning(text8, Array.Empty<object>());
			RustCore.Covalence.CommandSystem.UnregisterCommand(text, value2.Source);
		}
		value = new ChatCommand(text, plugin, callback);
		chatCommands[text] = value;
		if (plugin != null && !pluginRemovedFromManager.ContainsKey(plugin))
		{
			pluginRemovedFromManager[plugin] = ((Event<Plugin, PluginManager>)(object)plugin.OnRemovedFromManager).Add((Action<Plugin, PluginManager>)plugin_OnRemovedFromManager);
		}
	}

	[LibraryFunction("AddConsoleCommand")]
	public void AddConsoleCommand(string command, Plugin plugin, string callback)
	{
		AddConsoleCommand(command, plugin, (Arg arg) => plugin.CallHook(callback, new object[1] { arg }) != null);
	}

	public void AddConsoleCommand(string command, Plugin plugin, Func<Arg, bool> callback)
	{
		if (plugin != null && !pluginRemovedFromManager.ContainsKey(plugin))
		{
			pluginRemovedFromManager[plugin] = ((Event<Plugin, PluginManager>)(object)plugin.OnRemovedFromManager).Add((Action<Plugin, PluginManager>)plugin_OnRemovedFromManager);
		}
		string[] array = command.Split(new char[1] { '.' });
		string text = ((array.Length >= 2) ? array[0].Trim() : "global");
		string text2 = ((array.Length >= 2) ? string.Join(".", array.Skip(1).ToArray()) : array[0].Trim());
		string text3 = text + "." + text2;
		ConsoleCommand consoleCommand = new ConsoleCommand(text3);
		if (!CanOverrideCommand((text == "global") ? text2 : text3, "console"))
		{
			string text4 = ((plugin != null) ? plugin.Name : null) ?? "An unknown plugin";
			Interface.Oxide.LogError("{0} tried to register command '{1}', this command already exists and cannot be overridden!", new object[2] { text4, text3 });
			return;
		}
		if (consoleCommands.TryGetValue(text3, out var value))
		{
			if (value.OriginalCallback != null)
			{
				consoleCommand.OriginalCallback = value.OriginalCallback;
			}
			Plugin plugin2 = value.Callback.Plugin;
			string text5 = ((plugin2 != null) ? plugin2.Name : null) ?? "an unknown plugin";
			string text6 = ((plugin != null) ? plugin.Name : null) ?? "An unknown plugin";
			string text7 = text6 + " has replaced the '" + command + "' console command previously registered by " + text5;
			Interface.Oxide.LogWarning(text7, Array.Empty<object>());
			Server.Dict.Remove(value.RustCommand.FullName);
			if (text == "global")
			{
				Server.GlobalDict.Remove(value.RustCommand.Name);
			}
			Index.All = Server.Dict.Values.ToArray();
		}
		if (RustCore.Covalence.CommandSystem.registeredCommands.TryGetValue((text == "global") ? text2 : text3, out var value2))
		{
			if (value2.OriginalCallback != null)
			{
				consoleCommand.OriginalCallback = value2.OriginalCallback;
			}
			Plugin source = value2.Source;
			string text8 = ((source != null) ? source.Name : null) ?? "an unknown plugin";
			string text9 = ((plugin != null) ? plugin.Name : null) ?? "An unknown plugin";
			string text10 = text9 + " has replaced the '" + text3 + "' command previously registered by " + text8;
			Interface.Oxide.LogWarning(text10, Array.Empty<object>());
			RustCore.Covalence.CommandSystem.UnregisterCommand((text == "global") ? text2 : text3, value2.Source);
		}
		consoleCommand.AddCallback(plugin, callback);
		if (Server.Dict.TryGetValue(text3, out var value3))
		{
			if (value3.Variable)
			{
				string text11 = ((plugin != null) ? plugin.Name : null) ?? "An unknown plugin";
				Interface.Oxide.LogError(text11 + " tried to register the " + text2 + " console variable as a command!", Array.Empty<object>());
				return;
			}
			consoleCommand.OriginalCallback = value3.Call;
		}
		Server.Dict[text3] = consoleCommand.RustCommand;
		if (text == "global")
		{
			Server.GlobalDict[text2] = consoleCommand.RustCommand;
		}
		Index.All = Server.Dict.Values.ToArray();
		consoleCommands[text3] = consoleCommand;
	}

	[LibraryFunction("RemoveChatCommand")]
	public void RemoveChatCommand(string command, Plugin plugin)
	{
		ChatCommand chatCommand = chatCommands.Values.Where((ChatCommand x) => x.Plugin == plugin).FirstOrDefault((ChatCommand x) => x.Name == command);
		if (chatCommand != null)
		{
			RemoveChatCommand(chatCommand);
		}
	}

	[LibraryFunction("RemoveConsoleCommand")]
	public void RemoveConsoleCommand(string command, Plugin plugin)
	{
		ConsoleCommand consoleCommand = consoleCommands.Values.Where((ConsoleCommand x) => x.Callback.Plugin == plugin).FirstOrDefault((ConsoleCommand x) => x.Name == command);
		if (consoleCommand != null)
		{
			RemoveConsoleCommand(consoleCommand);
		}
	}

	private void RemoveChatCommand(ChatCommand command)
	{
		if (chatCommands.ContainsKey(command.Name))
		{
			chatCommands.Remove(command.Name);
		}
	}

	private void RemoveConsoleCommand(ConsoleCommand command)
	{
		if (!consoleCommands.ContainsKey(command.Name))
		{
			return;
		}
		consoleCommands.Remove(command.Name);
		if (command.OriginalCallback != null)
		{
			Server.Dict[command.RustCommand.FullName].Call = command.OriginalCallback;
			if (command.RustCommand.FullName.StartsWith("global."))
			{
				Server.GlobalDict[command.RustCommand.Name].Call = command.OriginalCallback;
			}
			return;
		}
		Server.Dict.Remove(command.RustCommand.FullName);
		if (command.Name.StartsWith("global."))
		{
			Server.GlobalDict.Remove(command.RustCommand.Name);
		}
		Index.All = Server.Dict.Values.ToArray();
	}

	internal bool HandleChatCommand(BasePlayer sender, string name, string[] args)
	{
		if (chatCommands.TryGetValue(name.ToLowerInvariant(), out var value))
		{
			value.HandleCommand(sender, name, args);
			return true;
		}
		return false;
	}

	private void plugin_OnRemovedFromManager(Plugin sender, PluginManager manager)
	{
		ConsoleCommand[] array = consoleCommands.Values.Where((ConsoleCommand c) => c.Callback.Plugin == sender).ToArray();
		foreach (ConsoleCommand command in array)
		{
			RemoveConsoleCommand(command);
		}
		ChatCommand[] array2 = chatCommands.Values.Where((ChatCommand c) => c.Plugin == sender).ToArray();
		foreach (ChatCommand command2 in array2)
		{
			RemoveChatCommand(command2);
		}
		if (pluginRemovedFromManager.TryGetValue(sender, out var value))
		{
			value.Remove();
			pluginRemovedFromManager.Remove(sender);
		}
	}

	private bool CanOverrideCommand(string command, string type)
	{
		string[] array = command.Split(new char[1] { '.' });
		string text = ((array.Length >= 2) ? array[0].Trim() : "global");
		string text2 = ((array.Length >= 2) ? string.Join(".", array.Skip(1).ToArray()) : array[0].Trim());
		string text3 = text + "." + text2;
		if (RustCore.Covalence.CommandSystem.registeredCommands.TryGetValue(command, out var value) && value.Source.IsCorePlugin)
		{
			return false;
		}
		ConsoleCommand value3;
		if (type == "chat")
		{
			if (chatCommands.TryGetValue(command, out var value2) && value2.Plugin.IsCorePlugin)
			{
				return false;
			}
		}
		else if (type == "console" && consoleCommands.TryGetValue((text == "global") ? text2 : text3, out value3) && value3.Callback.Plugin.IsCorePlugin)
		{
			return false;
		}
		if (!RustCore.RestrictedCommands.Contains(command))
		{
			return !RustCore.RestrictedCommands.Contains(text3);
		}
		return false;
	}
}
