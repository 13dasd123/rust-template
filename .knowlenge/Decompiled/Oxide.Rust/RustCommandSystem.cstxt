using System;
using System.Collections.Generic;
using System.Linq;
using Facepunch.Extend;
using Oxide.Core;
using Oxide.Core.Libraries.Covalence;
using Oxide.Core.Plugins;
using Oxide.Game.Rust;
using Oxide.Game.Rust.Libraries;
using Oxide.Game.Rust.Libraries.Covalence;
using UnityEngine;

public class RustCommandSystem : ICommandSystem
{
	internal class RegisteredCommand
	{
		public readonly Plugin Source;

		public readonly string Command;

		public readonly CommandCallback Callback;

		public Command RustCommand;

		public Command OriginalRustCommand;

		public Action<Arg> OriginalCallback;

		public RegisteredCommand(Plugin source, string command, CommandCallback callback)
		{
			Source = source;
			Command = command;
			Callback = callback;
		}
	}

	private readonly Command cmdlib = Interface.Oxide.GetLibrary<Command>((string)null);

	private readonly RustConsolePlayer consolePlayer;

	private readonly CommandHandler commandHandler;

	internal IDictionary<string, RegisteredCommand> registeredCommands;

	public RustCommandSystem()
	{
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Expected O, but got Unknown
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Expected O, but got Unknown
		registeredCommands = new Dictionary<string, RegisteredCommand>();
		commandHandler = new CommandHandler(new CommandCallback(CommandCallback), (Func<string, bool>)registeredCommands.ContainsKey);
		consolePlayer = new RustConsolePlayer();
	}

	private bool CommandCallback(IPlayer caller, string cmd, string[] args)
	{
		if (registeredCommands.TryGetValue(cmd, out var value))
		{
			return value.Callback.Invoke(caller, cmd, args);
		}
		return false;
	}

	public void RegisterCommand(string command, Plugin plugin, CommandCallback callback)
	{
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_03dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0403: Unknown result type (might be due to invalid IL or missing references)
		//IL_040a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0411: Unknown result type (might be due to invalid IL or missing references)
		//IL_0418: Unknown result type (might be due to invalid IL or missing references)
		//IL_041f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0436: Expected O, but got Unknown
		command = command.ToLowerInvariant().Trim();
		string[] array = command.Split(new char[1] { '.' });
		string text = ((array.Length >= 2) ? array[0].Trim() : "global");
		string text2 = ((array.Length >= 2) ? string.Join(".", array.Skip(1).ToArray()) : array[0].Trim());
		string text3 = text + "." + text2;
		if (text == "global")
		{
			command = text2;
		}
		RegisteredCommand registeredCommand = new RegisteredCommand(plugin, command, callback);
		if (!CanOverrideCommand(command))
		{
			throw new CommandAlreadyExistsException(command);
		}
		if (registeredCommands.TryGetValue(command, out var value))
		{
			if (value.OriginalCallback != null)
			{
				registeredCommand.OriginalCallback = value.OriginalCallback;
			}
			Plugin source = value.Source;
			string text4 = ((source != null) ? source.Name : null) ?? "an unknown plugin";
			string text5 = ((plugin != null) ? plugin.Name : null) ?? "An unknown plugin";
			string text6 = text5 + " has replaced the '" + command + "' command previously registered by " + text4;
			Interface.Oxide.LogWarning(text6, Array.Empty<object>());
			Server.Dict.Remove(text3);
			if (text == "global")
			{
				Server.GlobalDict.Remove(text2);
			}
			Index.All = Server.Dict.Values.ToArray();
		}
		if (cmdlib.chatCommands.TryGetValue(command, out var value2))
		{
			Plugin plugin2 = value2.Plugin;
			string text7 = ((plugin2 != null) ? plugin2.Name : null) ?? "an unknown plugin";
			string text8 = ((plugin != null) ? plugin.Name : null) ?? "An unknown plugin";
			string text9 = text8 + " has replaced the '" + command + "' chat command previously registered by " + text7;
			Interface.Oxide.LogWarning(text9, Array.Empty<object>());
			cmdlib.chatCommands.Remove(command);
		}
		if (cmdlib.consoleCommands.TryGetValue(text3, out var value3))
		{
			if (value3.OriginalCallback != null)
			{
				registeredCommand.OriginalCallback = value3.OriginalCallback;
			}
			Plugin plugin3 = value3.Callback.Plugin;
			string text10 = ((plugin3 != null) ? plugin3.Name : null) ?? "an unknown plugin";
			string text11 = ((plugin != null) ? plugin.Name : null) ?? "An unknown plugin";
			string text12 = text11 + " has replaced the '" + text3 + "' console command previously registered by " + text10;
			Interface.Oxide.LogWarning(text12, Array.Empty<object>());
			Server.Dict.Remove(value3.RustCommand.FullName);
			if (text == "global")
			{
				Server.GlobalDict.Remove(value3.RustCommand.Name);
			}
			Index.All = Server.Dict.Values.ToArray();
			cmdlib.consoleCommands.Remove(value3.RustCommand.FullName);
		}
		if (Server.Dict.TryGetValue(text3, out var value4))
		{
			if (value4.Variable)
			{
				string text13 = ((plugin != null) ? plugin.Name : null) ?? "An unknown plugin";
				Interface.Oxide.LogError(text13 + " tried to register the " + text3 + " console variable as a command!", Array.Empty<object>());
				return;
			}
			registeredCommand.OriginalCallback = value4.Call;
			registeredCommand.OriginalRustCommand = value4;
		}
		registeredCommand.RustCommand = new Command
		{
			Name = text2,
			Parent = text,
			FullName = command,
			ServerUser = true,
			ServerAdmin = true,
			Client = true,
			ClientInfo = false,
			Variable = false,
			Call = delegate(Arg arg)
			{
				if (arg != null)
				{
					BasePlayer val = ArgEx.Player(arg);
					if (arg.Connection != null && (Object)(object)val != (Object)null)
					{
						if (val.IPlayer is RustPlayer rustPlayer)
						{
							rustPlayer.LastCommand = (CommandType)1;
							callback.Invoke((IPlayer)(object)rustPlayer, command, ExtractArgs(arg));
						}
					}
					else if (arg.Connection == null)
					{
						consolePlayer.LastCommand = (CommandType)1;
						callback.Invoke((IPlayer)(object)consolePlayer, command, ExtractArgs(arg));
					}
				}
			}
		};
		Server.Dict[text3] = registeredCommand.RustCommand;
		if (text == "global")
		{
			Server.GlobalDict[text2] = registeredCommand.RustCommand;
		}
		Index.All = Server.Dict.Values.ToArray();
		registeredCommands[command] = registeredCommand;
	}

	public void UnregisterCommand(string command, Plugin plugin)
	{
		if (!registeredCommands.TryGetValue(command, out var value) || plugin != value.Source)
		{
			return;
		}
		string[] array = command.Split(new char[1] { '.' });
		string obj = ((array.Length >= 2) ? array[0].Trim() : "global");
		string text = ((array.Length >= 2) ? string.Join(".", array.Skip(1).ToArray()) : array[0].Trim());
		string text2 = obj + "." + text;
		registeredCommands.Remove(command);
		if (value.OriginalCallback != null)
		{
			if (Server.Dict.ContainsKey(text2))
			{
				Server.Dict[text2].Call = value.OriginalCallback;
			}
			if (text2.StartsWith("global.") && Server.GlobalDict.ContainsKey(text))
			{
				Server.GlobalDict[text].Call = value.OriginalCallback;
			}
			if (value.OriginalRustCommand != null)
			{
				if (Server.Dict.ContainsKey(text2))
				{
					Server.Dict[text2] = value.OriginalRustCommand;
				}
				if (text2.StartsWith("global.") && Server.GlobalDict.ContainsKey(text))
				{
					Server.GlobalDict[text] = value.OriginalRustCommand;
				}
			}
		}
		else
		{
			Server.Dict.Remove(text2);
			if (text2.StartsWith("global."))
			{
				Server.GlobalDict.Remove(text);
			}
		}
		Index.All = Server.Dict.Values.ToArray();
	}

	public bool HandleChatMessage(IPlayer player, string message)
	{
		return commandHandler.HandleChatMessage(player, message);
	}

	private bool CanOverrideCommand(string command)
	{
		string[] array = command.Split(new char[1] { '.' });
		string obj = ((array.Length >= 2) ? array[0].Trim() : "global");
		string text = ((array.Length >= 2) ? string.Join(".", array.Skip(1).ToArray()) : array[0].Trim());
		string text2 = obj + "." + text;
		if (registeredCommands.TryGetValue(command, out var value) && value.Source.IsCorePlugin)
		{
			return false;
		}
		if (cmdlib.chatCommands.TryGetValue(command, out var value2) && value2.Plugin.IsCorePlugin)
		{
			return false;
		}
		if (cmdlib.consoleCommands.TryGetValue(text2, out var value3) && value3.Callback.Plugin.IsCorePlugin)
		{
			return false;
		}
		if (!RustCore.RestrictedCommands.Contains(command))
		{
			return !RustCore.RestrictedCommands.Contains(text2);
		}
		return false;
	}

	public static string[] ExtractArgs(Arg arg)
	{
		if (arg == null || !arg.HasArgs(1))
		{
			return new string[0];
		}
		return StringExtensions.SplitQuotesStrings(arg.FullString, int.MaxValue);
	}
}
