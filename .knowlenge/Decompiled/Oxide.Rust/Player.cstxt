using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using Facepunch;
using Network;
using Oxide.Core;
using Oxide.Core.Libraries;
using Oxide.Core.Libraries.Covalence;
using Oxide.Game.Rust.Libraries;
using UnityEngine;

public class Player : Library
{
	private static readonly string ipPattern = ":{1}[0-9]{1}\\d*";

	internal readonly Permission permission = Interface.Oxide.GetLibrary<Permission>((string)null);

	public ListHashSet<BasePlayer> Players => BasePlayer.activePlayerList;

	public ListHashSet<BasePlayer> Sleepers => BasePlayer.sleepingPlayerList;

	public CultureInfo Language(BasePlayer player)
	{
		try
		{
			return CultureInfo.GetCultureInfo(((BaseNetworkable)player).net.connection.info.GetString("global.language", "en"));
		}
		catch (CultureNotFoundException)
		{
			return CultureInfo.GetCultureInfo("en");
		}
	}

	public string Address(Connection connection)
	{
		return Regex.Replace(connection.ipaddress, ipPattern, "");
	}

	public string Address(BasePlayer player)
	{
		object obj;
		if (player == null)
		{
			obj = null;
		}
		else
		{
			Networkable net = ((BaseNetworkable)player).net;
			obj = ((net != null) ? net.connection : null);
		}
		if (obj == null)
		{
			return null;
		}
		return Address(((BaseNetworkable)player).net.connection);
	}

	public int Ping(Connection connection)
	{
		return Net.sv.GetAveragePing(connection);
	}

	public int Ping(BasePlayer player)
	{
		return Ping(((BaseNetworkable)player).net.connection);
	}

	public bool IsAdmin(ulong id)
	{
		if (!ServerUsers.Is(id, (UserGroup)1))
		{
			return DeveloperList.Contains(id);
		}
		return true;
	}

	public bool IsAdmin(string id)
	{
		return IsAdmin(Convert.ToUInt64(id));
	}

	public bool IsAdmin(BasePlayer player)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		return IsAdmin(EncryptedValue<ulong>.op_Implicit(player.userID));
	}

	public bool IsBanned(ulong id)
	{
		return ServerUsers.Is(id, (UserGroup)3);
	}

	public bool IsBanned(string id)
	{
		return IsBanned(Convert.ToUInt64(id));
	}

	public bool IsBanned(BasePlayer player)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		return IsBanned(EncryptedValue<ulong>.op_Implicit(player.userID));
	}

	public bool IsConnected(BasePlayer player)
	{
		return player.IsConnected;
	}

	public bool IsSleeping(ulong id)
	{
		return Object.op_Implicit((Object)(object)BasePlayer.FindSleeping(id));
	}

	public bool IsSleeping(string id)
	{
		return IsSleeping(Convert.ToUInt64(id));
	}

	public bool IsSleeping(BasePlayer player)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		return IsSleeping(EncryptedValue<ulong>.op_Implicit(player.userID));
	}

	public void Ban(ulong id, string reason = "")
	{
		if (!IsBanned(id))
		{
			BasePlayer val = FindById(id);
			ServerUsers.Set(id, (UserGroup)3, ((val != null) ? val.displayName : null) ?? "Unknown", reason, -1L);
			ServerUsers.Save();
			if ((Object)(object)val != (Object)null && IsConnected(val))
			{
				Kick(val, reason);
			}
		}
	}

	public void Ban(string id, string reason = "")
	{
		Ban(Convert.ToUInt64(id), reason);
	}

	public void Ban(BasePlayer player, string reason = "")
	{
		Ban(player.UserIDString, reason);
	}

	public void Heal(BasePlayer player, float amount)
	{
		((BaseCombatEntity)player).Heal(amount);
	}

	public void Hurt(BasePlayer player, float amount)
	{
		((BaseCombatEntity)player).Hurt(amount);
	}

	public void Kick(BasePlayer player, string reason = "")
	{
		player.Kick(reason, true);
	}

	public void Kill(BasePlayer player)
	{
		((BaseCombatEntity)player).Die((HitInfo)null);
	}

	public void Rename(BasePlayer player, string name)
	{
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		name = (string.IsNullOrEmpty(name.Trim()) ? player.displayName : name);
		SingletonComponent<ServerMgr>.Instance.persistance.SetPlayerName(EncryptedValue<ulong>.op_Implicit(player.userID), name);
		((BaseNetworkable)player).net.connection.username = name;
		player.displayName = name;
		((BaseEntity)player)._name = name;
		((BaseNetworkable)player).SendNetworkUpdateImmediate(false);
		player.IPlayer.Name = name;
		permission.UpdateNickname(player.UserIDString, name);
		if (((BaseNetworkable)player).net.group == BaseNetworkable.LimboNetworkGroup)
		{
			return;
		}
		List<Connection> list = Pool.Get<List<Connection>>();
		for (int i = 0; i < Net.sv.connections.Count; i++)
		{
			Connection val = Net.sv.connections[i];
			if (val.connected && val.isAuthenticated && val.player is BasePlayer && (Object)(object)val.player != (Object)(object)player)
			{
				list.Add(val);
			}
		}
		((BaseNetworkable)player).OnNetworkSubscribersLeave(list);
		Pool.FreeUnmanaged<Connection>(ref list);
		if (!((BaseNetworkable)player).limitNetworking)
		{
			((BaseEntity)player).syncPosition = false;
			((BaseNetworkable)player)._limitedNetworking = true;
			Interface.Oxide.NextTick((Action)delegate
			{
				((BaseEntity)player).syncPosition = true;
				((BaseNetworkable)player)._limitedNetworking = false;
				((BaseNetworkable)player).UpdateNetworkGroup();
				((BaseNetworkable)player).SendNetworkUpdate((NetworkQueue)0);
			});
		}
	}

	public void Teleport(BasePlayer player, Vector3 destination)
	{
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		if (((BaseCombatEntity)player).IsAlive() && !player.IsSpectating())
		{
			try
			{
				player.EnsureDismounted();
				((BaseEntity)player).SetParent((BaseEntity)null, true, true);
				player.SetServerFall(true);
				player.MovePosition(destination);
				((BaseEntity)player).ClientRPC<Vector3>(RpcTarget.Player("ForcePositionTo", player), destination);
			}
			finally
			{
				player.SetServerFall(false);
			}
		}
	}

	public void Teleport(BasePlayer player, BasePlayer target)
	{
		//IL_0004: Unknown result type (might be due to invalid IL or missing references)
		Teleport(player, Position(target));
	}

	public void Teleport(BasePlayer player, float x, float y, float z)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		this.Teleport(player, new Vector3(x, y, z));
	}

	public void Unban(ulong id)
	{
		if (IsBanned(id))
		{
			ServerUsers.Remove(id);
			ServerUsers.Save();
		}
	}

	public void Unban(string id)
	{
		Unban(Convert.ToUInt64(id));
	}

	public void Unban(BasePlayer player)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		Unban(EncryptedValue<ulong>.op_Implicit(player.userID));
	}

	public Vector3 Position(BasePlayer player)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		return ((Component)player).transform.position;
	}

	public BasePlayer Find(string nameOrIdOrIp)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		Enumerator<BasePlayer> enumerator = Players.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				BasePlayer current = enumerator.Current;
				if (nameOrIdOrIp.Equals(current.displayName, StringComparison.OrdinalIgnoreCase) || nameOrIdOrIp.Equals(current.UserIDString) || nameOrIdOrIp.Equals(((BaseNetworkable)current).net.connection.ipaddress))
				{
					return current;
				}
			}
		}
		finally
		{
			((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
		}
		return null;
	}

	public BasePlayer FindById(string id)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		Enumerator<BasePlayer> enumerator = Players.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				BasePlayer current = enumerator.Current;
				if (id.Equals(current.UserIDString))
				{
					return current;
				}
			}
		}
		finally
		{
			((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
		}
		return null;
	}

	public BasePlayer FindById(ulong id)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		Enumerator<BasePlayer> enumerator = Players.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				BasePlayer current = enumerator.Current;
				if (id.Equals(EncryptedValue<ulong>.op_Implicit(current.userID)))
				{
					return current;
				}
			}
		}
		finally
		{
			((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
		}
		return null;
	}

	public void Message(BasePlayer player, string message, string prefix, ulong userId = 0uL, params object[] args)
	{
		if (!string.IsNullOrEmpty(message))
		{
			message = ((args.Length != 0) ? string.Format(Formatter.ToUnity(message), args) : Formatter.ToUnity(message));
			string text = ((prefix != null) ? (prefix + " " + message) : message);
			if (Interface.CallHook("OnMessagePlayer", (object)text, (object)player, (object)userId) == null)
			{
				player.SendConsoleCommand("chat.add", new object[3] { 2, userId, text });
			}
		}
	}

	public void Message(BasePlayer player, string message, ulong userId = 0uL)
	{
		Message(player, message, null, userId);
	}

	public void Reply(BasePlayer player, string message, string prefix, ulong userId = 0uL, params object[] args)
	{
		Message(player, message, prefix, userId, args);
	}

	public void Reply(BasePlayer player, string message, ulong userId = 0uL)
	{
		Message(player, message, null, userId);
	}

	public void Command(BasePlayer player, string command, params object[] args)
	{
		player.SendConsoleCommand(command, args);
	}

	public void DropItem(BasePlayer player, int itemId)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00df: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0109: Unknown result type (might be due to invalid IL or missing references)
		//IL_010e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0118: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_017d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0182: Unknown result type (might be due to invalid IL or missing references)
		//IL_0187: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0192: Unknown result type (might be due to invalid IL or missing references)
		//IL_0197: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c3: Unknown result type (might be due to invalid IL or missing references)
		Vector3 position = ((Component)player).transform.position;
		PlayerInventory val = Inventory(player);
		for (int i = 0; i < val.containerMain.capacity; i++)
		{
			Item slot = val.containerMain.GetSlot(i);
			if (slot.info.itemid == itemId)
			{
				slot.Drop(position + new Vector3(0f, 1f, 0f) + position / 2f, (position + new Vector3(0f, 0.2f, 0f)) * 8f, default(Quaternion));
			}
		}
		for (int j = 0; j < val.containerBelt.capacity; j++)
		{
			Item slot2 = val.containerBelt.GetSlot(j);
			if (slot2.info.itemid == itemId)
			{
				slot2.Drop(position + new Vector3(0f, 1f, 0f) + position / 2f, (position + new Vector3(0f, 0.2f, 0f)) * 8f, default(Quaternion));
			}
		}
		for (int k = 0; k < val.containerWear.capacity; k++)
		{
			Item slot3 = val.containerWear.GetSlot(k);
			if (slot3.info.itemid == itemId)
			{
				slot3.Drop(position + new Vector3(0f, 1f, 0f) + position / 2f, (position + new Vector3(0f, 0.2f, 0f)) * 8f, default(Quaternion));
			}
		}
	}

	public void DropItem(BasePlayer player, Item item)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_0108: Unknown result type (might be due to invalid IL or missing references)
		//IL_010e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0149: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_0169: Unknown result type (might be due to invalid IL or missing references)
		//IL_016e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0173: Unknown result type (might be due to invalid IL or missing references)
		//IL_0183: Unknown result type (might be due to invalid IL or missing references)
		//IL_0188: Unknown result type (might be due to invalid IL or missing references)
		//IL_0192: Unknown result type (might be due to invalid IL or missing references)
		//IL_0199: Unknown result type (might be due to invalid IL or missing references)
		//IL_019f: Unknown result type (might be due to invalid IL or missing references)
		Vector3 position = ((Component)player).transform.position;
		PlayerInventory val = Inventory(player);
		for (int i = 0; i < val.containerMain.capacity; i++)
		{
			Item slot = val.containerMain.GetSlot(i);
			if (slot == item)
			{
				slot.Drop(position + new Vector3(0f, 1f, 0f) + position / 2f, (position + new Vector3(0f, 0.2f, 0f)) * 8f, default(Quaternion));
			}
		}
		for (int j = 0; j < val.containerBelt.capacity; j++)
		{
			Item slot2 = val.containerBelt.GetSlot(j);
			if (slot2 == item)
			{
				slot2.Drop(position + new Vector3(0f, 1f, 0f) + position / 2f, (position + new Vector3(0f, 0.2f, 0f)) * 8f, default(Quaternion));
			}
		}
		for (int k = 0; k < val.containerWear.capacity; k++)
		{
			Item slot3 = val.containerWear.GetSlot(k);
			if (slot3 == item)
			{
				slot3.Drop(position + new Vector3(0f, 1f, 0f) + position / 2f, (position + new Vector3(0f, 0.2f, 0f)) * 8f, default(Quaternion));
			}
		}
	}

	public void GiveItem(BasePlayer player, int itemId, int quantity = 1)
	{
		GiveItem(player, Item.GetItem(itemId), quantity);
	}

	public void GiveItem(BasePlayer player, Item item, int quantity = 1)
	{
		player.inventory.GiveItem(ItemManager.CreateByItemID(item.info.itemid, quantity, 0uL), (ItemContainer)null);
	}

	public PlayerInventory Inventory(BasePlayer player)
	{
		return player.inventory;
	}

	public void ClearInventory(BasePlayer player)
	{
		PlayerInventory obj = Inventory(player);
		if (obj != null)
		{
			obj.Strip();
		}
	}

	public void ResetInventory(BasePlayer player)
	{
		PlayerInventory val = Inventory(player);
		if ((Object)(object)val != (Object)null)
		{
			val.DoDestroy();
			val.ServerInit(player);
		}
	}
}
