using System;
using System.Reflection;
using Oxide.Core;
using Oxide.Core.Extensions;
using Oxide.Game.Rust;
using Oxide.Game.Rust.Libraries;
using Oxide.Plugins;

public class RustExtension : Extension
{
	internal static Assembly Assembly = Assembly.GetExecutingAssembly();

	internal static AssemblyName AssemblyName = Assembly.GetName();

	internal static VersionNumber AssemblyVersion = new VersionNumber(AssemblyName.Version.Major, AssemblyName.Version.Minor, AssemblyName.Version.Build);

	internal static string AssemblyAuthors = ((AssemblyCompanyAttribute)Attribute.GetCustomAttribute(Assembly, typeof(AssemblyCompanyAttribute), inherit: false)).Company;

	public static string[] Filter = new string[18]
	{
		"alphamapResolution is clamped to the range of", "AngryAnt Behave version", "Floating point textures aren't supported on this device", "HDR RenderTexture format is not supported on this platform.", "Image Effects are not supported on this platform.", "Missing projectileID", "Motion vectors not supported on a platform that does not support", "The image effect Main Camera", "The image effect effect -", "Unable to find shaders",
		"Unsupported encoding: 'utf8'", "Warning, null renderer for ScaleRenderer!", "[AmplifyColor]", "[AmplifyOcclusion]", "[CoverageQueries] Disabled due to unsupported", "[CustomProbe]", "[Manifest] URI IS", "[SpawnHandler] populationCounts"
	};

	public override bool IsGameExtension => true;

	public override string Name => "Rust";

	public override string Author => AssemblyAuthors;

	public override VersionNumber Version => AssemblyVersion;

	public override string Branch => "public";

	public override string[] DefaultReferences => new string[35]
	{
		"ApexAI", "ApexShared", "Facepunch.Network", "Facepunch.Steamworks.Posix64", "Facepunch.Steamworks.Win64", "Facepunch.System", "Facepunch.UnityEngine", "NewAssembly", "Rust.Data", "Rust.Global",
		"Rust.Localization", "Rust.Platform.Common", "Rust.Platform.Steam", "Rust.Workshop", "Rust.World", "System.Drawing", "UnityEngine.AIModule", "UnityEngine.AssetBundleModule", "UnityEngine.CoreModule", "UnityEngine.GridModule",
		"UnityEngine.ImageConversionModule", "UnityEngine.Networking", "UnityEngine.PhysicsModule", "UnityEngine.TerrainModule", "UnityEngine.TerrainPhysicsModule", "UnityEngine.UI", "UnityEngine.UIModule", "UnityEngine.UIElementsModule", "UnityEngine.UnityWebRequestAudioModule", "UnityEngine.UnityWebRequestModule",
		"UnityEngine.UnityWebRequestTextureModule", "UnityEngine.UnityWebRequestWWWModule", "UnityEngine.VehiclesModule", "UnityEngine.WebModule", "netstandard"
	};

	public override string[] WhitelistAssemblies => new string[19]
	{
		"Assembly-CSharp", "Assembly-CSharp-firstpass", "DestMath", "Facepunch.Network", "Facepunch.System", "Facepunch.UnityEngine", "mscorlib", "Oxide.Core", "Oxide.Rust", "RustBuild",
		"Rust.Data", "Rust.Global", "Rust.Localization", "Rust.Localization", "Rust.Platform.Common", "Rust.Platform.Steam", "System", "System.Core", "UnityEngine"
	};

	public override string[] WhitelistNamespaces => new string[14]
	{
		"ConVar", "Dest", "Facepunch", "Network", "Oxide.Game.Rust.Cui", "ProtoBuf", "PVT", "Rust", "Steamworks", "System.Collections",
		"System.Security.Cryptography", "System.Text", "System.Threading.Monitor", "UnityEngine"
	};

	public RustExtension(ExtensionManager manager)
		: base(manager)
	{
	}

	public override void Load()
	{
		base.Manager.RegisterLibrary("Rust", new Oxide.Game.Rust.Libraries.Rust());
		base.Manager.RegisterLibrary("Command", new Command());
		base.Manager.RegisterLibrary("Item", new Oxide.Game.Rust.Libraries.Item());
		base.Manager.RegisterLibrary("Player", new Player());
		base.Manager.RegisterLibrary("Server", new Server());
		base.Manager.RegisterPluginLoader(new RustPluginLoader());
		if (Environment.OSVersion.Platform == PlatformID.Unix)
		{
			Cleanup.Add("Facepunch.Steamworks.Win64.dll");
		}
	}

	public override void LoadPluginWatchers(string directory)
	{
	}

	public override void OnModLoad()
	{
		CSharpPluginLoader.PluginReferences.UnionWith(DefaultReferences);
	}
}
