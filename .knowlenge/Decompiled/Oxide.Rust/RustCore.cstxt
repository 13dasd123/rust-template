using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Text;
using System.Text.RegularExpressions;
using ConVar;
using Facepunch;
using Network;
using Oxide.Core;
using Oxide.Core.Configuration;
using Oxide.Core.Extensions;
using Oxide.Core.Libraries;
using Oxide.Core.Libraries.Covalence;
using Oxide.Core.Plugins;
using Oxide.Core.RemoteConsole;
using Oxide.Game.Rust;
using Oxide.Game.Rust.Libraries;
using Oxide.Game.Rust.Libraries.Covalence;
using Rust.Ai.Gen2;
using Steamworks;
using UnityEngine;

public class RustCore : CSPlugin
{
	internal readonly Command cmdlib = Interface.Oxide.GetLibrary<Command>((string)null);

	internal readonly Lang lang = Interface.Oxide.GetLibrary<Lang>((string)null);

	internal readonly Permission permission = Interface.Oxide.GetLibrary<Permission>((string)null);

	internal readonly Player Player = Interface.Oxide.GetLibrary<Player>((string)null);

	internal static readonly RustCovalenceProvider Covalence = RustCovalenceProvider.Instance;

	internal readonly PluginManager pluginManager = Interface.Oxide.RootPluginManager;

	internal readonly IServer Server = Covalence.CreateServer();

	internal readonly RustExtension Extension;

	internal bool serverInitialized;

	internal bool isPlayerTakingDamage;

	internal static string ipPattern = ":{1}[0-9]{1}\\d*";

	internal static IEnumerable<string> RestrictedCommands => new string[4] { "ownerid", "moderatorid", "removeowner", "removemoderator" };

	[HookMethod("GrantCommand")]
	private void GrantCommand(IPlayer player, string command, string[] args)
	{
		if (!PermissionsLoaded(player))
		{
			return;
		}
		if (args.Length < 3)
		{
			player.Reply(lang.GetMessage("CommandUsageGrant", (Plugin)(object)this, player.Id));
			return;
		}
		string text = args[0];
		string text2 = ExtensionMethods.Sanitize(args[1]);
		string text3 = args[2];
		if (!permission.PermissionExists(text3, (Plugin)null))
		{
			player.Reply(string.Format(lang.GetMessage("PermissionNotFound", (Plugin)(object)this, player.Id), text3));
		}
		else if (text.Equals("group"))
		{
			if (!permission.GroupExists(text2))
			{
				player.Reply(string.Format(lang.GetMessage("GroupNotFound", (Plugin)(object)this, player.Id), text2));
				return;
			}
			if (permission.GroupHasPermission(text2, text3))
			{
				player.Reply(string.Format(lang.GetMessage("GroupAlreadyHasPermission", (Plugin)(object)this, player.Id), text2, text3));
				return;
			}
			permission.GrantGroupPermission(text2, text3, (Plugin)null);
			player.Reply(string.Format(lang.GetMessage("GroupPermissionGranted", (Plugin)(object)this, player.Id), text2, text3));
		}
		else if (text.Equals("user"))
		{
			IPlayer[] array = Covalence.PlayerManager.FindPlayers(text2).ToArray();
			if (array.Length > 1)
			{
				player.Reply(string.Format(lang.GetMessage("PlayersFound", (Plugin)(object)this, player.Id), string.Join(", ", array.Select((IPlayer p) => p.Name).ToArray())));
				return;
			}
			IPlayer val = ((array.Length == 1) ? array[0] : null);
			if (val == null && !permission.UserIdValid(text2))
			{
				player.Reply(string.Format(lang.GetMessage("PlayerNotFound", (Plugin)(object)this, player.Id), text2));
				return;
			}
			string text4 = text2;
			if (val != null)
			{
				text4 = val.Id;
				text2 = val.Name;
				permission.UpdateNickname(text4, text2);
			}
			if (permission.UserHasPermission(text2, text3))
			{
				player.Reply(string.Format(lang.GetMessage("PlayerAlreadyHasPermission", (Plugin)(object)this, player.Id), text4, text3));
				return;
			}
			permission.GrantUserPermission(text4, text3, (Plugin)null);
			player.Reply(string.Format(lang.GetMessage("PlayerPermissionGranted", (Plugin)(object)this, player.Id), text2 + " (" + text4 + ")", text3));
		}
		else
		{
			player.Reply(lang.GetMessage("CommandUsageGrant", (Plugin)(object)this, player.Id));
		}
	}

	[HookMethod("GroupCommand")]
	private void GroupCommand(IPlayer player, string command, string[] args)
	{
		if (!PermissionsLoaded(player))
		{
			return;
		}
		if (args.Length < 2)
		{
			player.Reply(lang.GetMessage("CommandUsageGroup", (Plugin)(object)this, player.Id));
			player.Reply(lang.GetMessage("CommandUsageGroupParent", (Plugin)(object)this, player.Id));
			player.Reply(lang.GetMessage("CommandUsageGroupRemove", (Plugin)(object)this, player.Id));
			return;
		}
		string text = args[0];
		string text2 = args[1];
		string text3 = ((args.Length >= 3) ? args[2] : "");
		int num = ((args.Length == 4) ? int.Parse(args[3]) : 0);
		if (text.Equals("add"))
		{
			if (permission.GroupExists(text2))
			{
				player.Reply(string.Format(lang.GetMessage("GroupAlreadyExists", (Plugin)(object)this, player.Id), text2));
				return;
			}
			permission.CreateGroup(text2, text3, num);
			player.Reply(string.Format(lang.GetMessage("GroupCreated", (Plugin)(object)this, player.Id), text2));
		}
		else if (text.Equals("remove"))
		{
			if (!permission.GroupExists(text2))
			{
				player.Reply(string.Format(lang.GetMessage("GroupNotFound", (Plugin)(object)this, player.Id), text2));
				return;
			}
			permission.RemoveGroup(text2);
			player.Reply(string.Format(lang.GetMessage("GroupDeleted", (Plugin)(object)this, player.Id), text2));
		}
		else if (text.Equals("set"))
		{
			if (!permission.GroupExists(text2))
			{
				player.Reply(string.Format(lang.GetMessage("GroupNotFound", (Plugin)(object)this, player.Id), text2));
				return;
			}
			permission.SetGroupTitle(text2, text3);
			permission.SetGroupRank(text2, num);
			player.Reply(string.Format(lang.GetMessage("GroupChanged", (Plugin)(object)this, player.Id), text2));
		}
		else if (text.Equals("parent"))
		{
			if (args.Length <= 2)
			{
				player.Reply(lang.GetMessage("CommandUsageGroupParent", (Plugin)(object)this, player.Id));
				return;
			}
			if (!permission.GroupExists(text2))
			{
				player.Reply(string.Format(lang.GetMessage("GroupNotFound", (Plugin)(object)this, player.Id), text2));
				return;
			}
			string text4 = args[2];
			if (!string.IsNullOrEmpty(text4) && !permission.GroupExists(text4))
			{
				player.Reply(string.Format(lang.GetMessage("GroupParentNotFound", (Plugin)(object)this, player.Id), text4));
			}
			else if (permission.SetGroupParent(text2, text4))
			{
				player.Reply(string.Format(lang.GetMessage("GroupParentChanged", (Plugin)(object)this, player.Id), text2, text4));
			}
			else
			{
				player.Reply(string.Format(lang.GetMessage("GroupParentNotChanged", (Plugin)(object)this, player.Id), text2));
			}
		}
		else
		{
			player.Reply(lang.GetMessage("CommandUsageGroup", (Plugin)(object)this, player.Id));
			player.Reply(lang.GetMessage("CommandUsageGroupParent", (Plugin)(object)this, player.Id));
			player.Reply(lang.GetMessage("CommandUsageGroupRemove", (Plugin)(object)this, player.Id));
		}
	}

	[HookMethod("LangCommand")]
	private void LangCommand(IPlayer player, string command, string[] args)
	{
		if (args.Length < 1)
		{
			player.Reply(lang.GetMessage("CommandUsageLang", (Plugin)(object)this, player.Id));
			return;
		}
		string text = args[0];
		try
		{
			text = new CultureInfo(text)?.TwoLetterISOLanguageName;
		}
		catch (CultureNotFoundException)
		{
			player.Reply(lang.GetMessage("InvalidLanguageName", (Plugin)(object)this, player.Id), text, Array.Empty<object>());
			return;
		}
		if (player.IsServer)
		{
			lang.SetServerLanguage(text);
			player.Reply(string.Format(lang.GetMessage("ServerLanguage", (Plugin)(object)this, player.Id), lang.GetServerLanguage()));
		}
		else
		{
			lang.SetLanguage(text, player.Id);
			player.Reply(string.Format(lang.GetMessage("PlayerLanguage", (Plugin)(object)this, player.Id), text));
		}
	}

	[HookMethod("LoadCommand")]
	private void LoadCommand(IPlayer player, string command, string[] args)
	{
		if (args.Length < 1)
		{
			player.Reply(lang.GetMessage("CommandUsageLoad", (Plugin)(object)this, player.Id));
			return;
		}
		if (args[0].Equals("*") || args[0].Equals("all"))
		{
			Interface.Oxide.LoadAllPlugins(false);
			return;
		}
		foreach (string text in args)
		{
			if (!string.IsNullOrEmpty(text))
			{
				Interface.Oxide.LoadPlugin(text);
				pluginManager.GetPlugin(text);
			}
		}
	}

	[HookMethod("PluginsCommand")]
	private void PluginsCommand(IPlayer player)
	{
		//IL_01a7: Unknown result type (might be due to invalid IL or missing references)
		Plugin[] array = (from pl in pluginManager.GetPlugins()
			where !pl.IsCorePlugin
			select pl).ToArray();
		HashSet<string> second = new HashSet<string>(array.Select((Plugin pl) => pl.Name));
		Dictionary<string, string> dictionary = new Dictionary<string, string>();
		foreach (PluginLoader pluginLoader in Interface.Oxide.GetPluginLoaders())
		{
			foreach (string item in pluginLoader.ScanDirectory(Interface.Oxide.PluginDirectory).Except(second))
			{
				dictionary[item] = (pluginLoader.PluginErrors.TryGetValue(item, out var value) ? value : "Unloaded");
			}
		}
		if (array.Length + dictionary.Count < 1)
		{
			player.Reply(lang.GetMessage("NoPluginsFound", (Plugin)(object)this, player.Id));
			return;
		}
		string text = $"Listing {array.Length + dictionary.Count} plugins:";
		int num = 1;
		foreach (Plugin item2 in array.Where((Plugin p) => p.Filename != null))
		{
			text += $"\n  {num++:00} \"{item2.Title}\" ({item2.Version}) by {item2.Author} ({item2.TotalHookTime:0.00}s / {FormatBytes(item2.TotalHookMemory)}) - {ExtensionMethods.Basename(item2.Filename, (string)null)}";
		}
		foreach (string key in dictionary.Keys)
		{
			text += $"\n  {num++:00} {key} - {dictionary[key]}";
		}
		player.Reply(text);
	}

	private static string FormatBytes(long bytes)
	{
		if (bytes < 1024)
		{
			return $"{bytes:0} B";
		}
		if (bytes < 1048576)
		{
			return $"{bytes / 1024:0} KB";
		}
		if (bytes < 1073741824)
		{
			return $"{bytes / 1048576:0} MB";
		}
		return $"{bytes / 1073741824:0} GB";
	}

	[HookMethod("ReloadCommand")]
	private void ReloadCommand(IPlayer player, string command, string[] args)
	{
		if (args.Length < 1)
		{
			player.Reply(lang.GetMessage("CommandUsageReload", (Plugin)(object)this, player.Id));
			return;
		}
		if (args[0].Equals("*") || args[0].Equals("all"))
		{
			Interface.Oxide.ReloadAllPlugins((IList<string>)null);
			return;
		}
		foreach (string text in args)
		{
			if (!string.IsNullOrEmpty(text))
			{
				Interface.Oxide.ReloadPlugin(text);
			}
		}
	}

	[HookMethod("RevokeCommand")]
	private void RevokeCommand(IPlayer player, string command, string[] args)
	{
		if (!PermissionsLoaded(player))
		{
			return;
		}
		if (args.Length < 3)
		{
			player.Reply(lang.GetMessage("CommandUsageRevoke", (Plugin)(object)this, player.Id));
			return;
		}
		string text = args[0];
		string text2 = ExtensionMethods.Sanitize(args[1]);
		string text3 = args[2];
		if (text.Equals("group"))
		{
			if (!permission.GroupExists(text2))
			{
				player.Reply(string.Format(lang.GetMessage("GroupNotFound", (Plugin)(object)this, player.Id), text2));
				return;
			}
			if (!permission.GroupHasPermission(text2, text3))
			{
				player.Reply(string.Format(lang.GetMessage("GroupDoesNotHavePermission", (Plugin)(object)this, player.Id), text2, text3));
				return;
			}
			permission.RevokeGroupPermission(text2, text3);
			player.Reply(string.Format(lang.GetMessage("GroupPermissionRevoked", (Plugin)(object)this, player.Id), text2, text3));
		}
		else if (text.Equals("user"))
		{
			IPlayer[] array = Covalence.PlayerManager.FindPlayers(text2).ToArray();
			if (array.Length > 1)
			{
				player.Reply(string.Format(lang.GetMessage("PlayersFound", (Plugin)(object)this, player.Id), string.Join(", ", array.Select((IPlayer p) => p.Name).ToArray())));
				return;
			}
			IPlayer val = ((array.Length == 1) ? array[0] : null);
			if (val == null && !permission.UserIdValid(text2))
			{
				player.Reply(string.Format(lang.GetMessage("PlayerNotFound", (Plugin)(object)this, player.Id), text2));
				return;
			}
			string text4 = text2;
			if (val != null)
			{
				text4 = val.Id;
				text2 = val.Name;
				permission.UpdateNickname(text4, text2);
			}
			if (!permission.UserHasPermission(text4, text3))
			{
				player.Reply(string.Format(lang.GetMessage("PlayerDoesNotHavePermission", (Plugin)(object)this, player.Id), text2, text3));
				return;
			}
			permission.RevokeUserPermission(text4, text3);
			player.Reply(string.Format(lang.GetMessage("PlayerPermissionRevoked", (Plugin)(object)this, player.Id), text2 + " (" + text4 + ")", text3));
		}
		else
		{
			player.Reply(lang.GetMessage("CommandUsageRevoke", (Plugin)(object)this, player.Id));
		}
	}

	[HookMethod("ShowCommand")]
	private void ShowCommand(IPlayer player, string command, string[] args)
	{
		if (!PermissionsLoaded(player))
		{
			return;
		}
		if (args.Length < 1)
		{
			player.Reply(lang.GetMessage("CommandUsageShow", (Plugin)(object)this, player.Id));
			player.Reply(lang.GetMessage("CommandUsageShowName", (Plugin)(object)this, player.Id));
			return;
		}
		string text = args[0];
		string text2 = ((args.Length == 2) ? ExtensionMethods.Sanitize(args[1]) : string.Empty);
		if (text.Equals("perms"))
		{
			player.Reply(string.Format(lang.GetMessage("Permissions", (Plugin)(object)this, player.Id) + ":\n" + string.Join(", ", permission.GetPermissions())));
		}
		else if (text.Equals("perm"))
		{
			if (args.Length < 2 || string.IsNullOrEmpty(text2))
			{
				player.Reply(lang.GetMessage("CommandUsageShow", (Plugin)(object)this, player.Id));
				player.Reply(lang.GetMessage("CommandUsageShowName", (Plugin)(object)this, player.Id));
				return;
			}
			string[] permissionUsers = permission.GetPermissionUsers(text2);
			string[] permissionGroups = permission.GetPermissionGroups(text2);
			string text3 = string.Format(lang.GetMessage("PermissionPlayers", (Plugin)(object)this, player.Id), text2) + ":\n";
			text3 += ((permissionUsers.Length != 0) ? string.Join(", ", permissionUsers) : lang.GetMessage("NoPermissionPlayers", (Plugin)(object)this, player.Id));
			text3 = text3 + "\n\n" + string.Format(lang.GetMessage("PermissionGroups", (Plugin)(object)this, player.Id), text2) + ":\n";
			text3 += ((permissionGroups.Length != 0) ? string.Join(", ", permissionGroups) : lang.GetMessage("NoPermissionGroups", (Plugin)(object)this, player.Id));
			player.Reply(text3);
		}
		else if (text.Equals("user"))
		{
			if (args.Length < 2 || string.IsNullOrEmpty(text2))
			{
				player.Reply(lang.GetMessage("CommandUsageShow", (Plugin)(object)this, player.Id));
				player.Reply(lang.GetMessage("CommandUsageShowName", (Plugin)(object)this, player.Id));
				return;
			}
			IPlayer[] array = Covalence.PlayerManager.FindPlayers(text2).ToArray();
			if (array.Length > 1)
			{
				player.Reply(string.Format(lang.GetMessage("PlayersFound", (Plugin)(object)this, player.Id), string.Join(", ", array.Select((IPlayer p) => p.Name).ToArray())));
				return;
			}
			IPlayer val = ((array.Length == 1) ? array[0] : null);
			if (val == null && !permission.UserIdValid(text2))
			{
				player.Reply(string.Format(lang.GetMessage("PlayerNotFound", (Plugin)(object)this, player.Id), text2));
				return;
			}
			string text4 = text2;
			if (val != null)
			{
				text4 = val.Id;
				text2 = val.Name;
				permission.UpdateNickname(text4, text2);
				text2 = text2 + " (" + text4 + ")";
			}
			string[] userPermissions = permission.GetUserPermissions(text4);
			string[] userGroups = permission.GetUserGroups(text4);
			string text5 = string.Format(lang.GetMessage("PlayerPermissions", (Plugin)(object)this, player.Id), text2) + ":\n";
			text5 += ((userPermissions.Length != 0) ? string.Join(", ", userPermissions) : lang.GetMessage("NoPlayerPermissions", (Plugin)(object)this, player.Id));
			text5 = text5 + "\n\n" + string.Format(lang.GetMessage("PlayerGroups", (Plugin)(object)this, player.Id), text2) + ":\n";
			text5 += ((userGroups.Length != 0) ? string.Join(", ", userGroups) : lang.GetMessage("NoPlayerGroups", (Plugin)(object)this, player.Id));
			player.Reply(text5);
		}
		else if (text.Equals("group"))
		{
			if (args.Length < 2 || string.IsNullOrEmpty(text2))
			{
				player.Reply(lang.GetMessage("CommandUsageShow", (Plugin)(object)this, player.Id));
				player.Reply(lang.GetMessage("CommandUsageShowName", (Plugin)(object)this, player.Id));
				return;
			}
			if (!permission.GroupExists(text2))
			{
				player.Reply(string.Format(lang.GetMessage("GroupNotFound", (Plugin)(object)this, player.Id), text2));
				return;
			}
			string[] usersInGroup = permission.GetUsersInGroup(text2);
			string[] groupPermissions = permission.GetGroupPermissions(text2, false);
			string text6 = string.Format(lang.GetMessage("GroupPlayers", (Plugin)(object)this, player.Id), text2) + ":\n";
			text6 += ((usersInGroup.Length != 0) ? string.Join(", ", usersInGroup) : lang.GetMessage("NoPlayersInGroup", (Plugin)(object)this, player.Id));
			text6 = text6 + "\n\n" + string.Format(lang.GetMessage("GroupPermissions", (Plugin)(object)this, player.Id), text2) + ":\n";
			text6 += ((groupPermissions.Length != 0) ? string.Join(", ", groupPermissions) : lang.GetMessage("NoGroupPermissions", (Plugin)(object)this, player.Id));
			string groupParent = permission.GetGroupParent(text2);
			while (permission.GroupExists(groupParent))
			{
				text6 = text6 + "\n" + string.Format(lang.GetMessage("ParentGroupPermissions", (Plugin)(object)this, player.Id), groupParent) + ":\n";
				text6 += string.Join(", ", permission.GetGroupPermissions(groupParent, false));
				groupParent = permission.GetGroupParent(groupParent);
			}
			player.Reply(text6);
		}
		else if (text.Equals("groups"))
		{
			player.Reply(string.Format(lang.GetMessage("Groups", (Plugin)(object)this, player.Id) + ":\n" + string.Join(", ", permission.GetGroups())));
		}
		else
		{
			player.Reply(lang.GetMessage("CommandUsageShow", (Plugin)(object)this, player.Id));
			player.Reply(lang.GetMessage("CommandUsageShowName", (Plugin)(object)this, player.Id));
		}
	}

	[HookMethod("UnloadCommand")]
	private void UnloadCommand(IPlayer player, string command, string[] args)
	{
		if (args.Length < 1)
		{
			player.Reply(lang.GetMessage("CommandUsageUnload", (Plugin)(object)this, player.Id));
			return;
		}
		if (args[0].Equals("*") || args[0].Equals("all"))
		{
			Interface.Oxide.UnloadAllPlugins((IList<string>)null);
			return;
		}
		foreach (string text in args)
		{
			if (!string.IsNullOrEmpty(text))
			{
				Interface.Oxide.UnloadPlugin(text);
			}
		}
	}

	[HookMethod("UserGroupCommand")]
	private void UserGroupCommand(IPlayer player, string command, string[] args)
	{
		if (!PermissionsLoaded(player))
		{
			return;
		}
		if (args.Length < 3)
		{
			player.Reply(lang.GetMessage("CommandUsageUserGroup", (Plugin)(object)this, player.Id));
			return;
		}
		string text = args[0];
		string text2 = ExtensionMethods.Sanitize(args[1]);
		string text3 = args[2];
		IPlayer[] array = Covalence.PlayerManager.FindPlayers(text2).ToArray();
		if (array.Length > 1)
		{
			player.Reply(string.Format(lang.GetMessage("PlayersFound", (Plugin)(object)this, player.Id), string.Join(", ", array.Select((IPlayer p) => p.Name).ToArray())));
			return;
		}
		IPlayer val = ((array.Length == 1) ? array[0] : null);
		if (val == null && !permission.UserIdValid(text2))
		{
			player.Reply(string.Format(lang.GetMessage("PlayerNotFound", (Plugin)(object)this, player.Id), text2));
			return;
		}
		string text4 = text2;
		if (val != null)
		{
			text4 = val.Id;
			text2 = val.Name;
			permission.UpdateNickname(text4, text2);
			text2 = text2 + "(" + text4 + ")";
		}
		if (!permission.GroupExists(text3))
		{
			player.Reply(string.Format(lang.GetMessage("GroupNotFound", (Plugin)(object)this, player.Id), text3));
		}
		else if (text.Equals("add"))
		{
			permission.AddUserGroup(text4, text3);
			player.Reply(string.Format(lang.GetMessage("PlayerAddedToGroup", (Plugin)(object)this, player.Id), text2, text3));
		}
		else if (text.Equals("remove"))
		{
			permission.RemoveUserGroup(text4, text3);
			player.Reply(string.Format(lang.GetMessage("PlayerRemovedFromGroup", (Plugin)(object)this, player.Id), text2, text3));
		}
		else
		{
			player.Reply(lang.GetMessage("CommandUsageUserGroup", (Plugin)(object)this, player.Id));
		}
	}

	[HookMethod("VersionCommand")]
	private void VersionCommand(IPlayer player)
	{
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		if (player.IsServer)
		{
			string format = "Oxide.Rust Version: {0}\nOxide.Rust Branch: {1}";
			player.Reply(string.Format(format, RustExtension.AssemblyVersion, ((Extension)Extension).Branch));
			return;
		}
		string format2 = Covalence.FormatText(lang.GetMessage("Version", (Plugin)(object)this, player.Id));
		player.Reply(string.Format(format2, RustExtension.AssemblyVersion, Covalence.GameName, Server.Version, Server.Protocol));
	}

	[HookMethod("SaveCommand")]
	private void SaveCommand(IPlayer player)
	{
		if (PermissionsLoaded(player) && player.IsAdmin)
		{
			Interface.Oxide.OnSave();
			Covalence.PlayerManager.SavePlayerData();
			player.Reply(lang.GetMessage("DataSaved", (Plugin)(object)this, player.Id));
		}
	}

	public RustCore()
	{
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		Extension = Interface.Oxide.GetExtension<RustExtension>();
		((Plugin)this).Title = "Rust";
		((Plugin)this).Author = ((Extension)Extension).Author;
		((Plugin)this).Version = ((Extension)Extension).Version;
	}

	private bool PermissionsLoaded(IPlayer player)
	{
		if (!permission.IsLoaded)
		{
			player.Reply(string.Format(lang.GetMessage("PermissionsNotLoaded", (Plugin)(object)this, player.Id), ((Library)permission).LastException.Message));
			return false;
		}
		return true;
	}

	[HookMethod("Init")]
	private void Init()
	{
		RemoteLogger.SetTag("game", ((Plugin)this).Title.ToLower());
		RemoteLogger.SetTag("game version", Server.Version);
		((Plugin)this).AddCovalenceCommand(new string[3] { "oxide.plugins", "o.plugins", "plugins" }, "PluginsCommand", "oxide.plugins");
		((Plugin)this).AddCovalenceCommand(new string[3] { "oxide.load", "o.load", "plugin.load" }, "LoadCommand", "oxide.load");
		((Plugin)this).AddCovalenceCommand(new string[3] { "oxide.reload", "o.reload", "plugin.reload" }, "ReloadCommand", "oxide.reload");
		((Plugin)this).AddCovalenceCommand(new string[3] { "oxide.unload", "o.unload", "plugin.unload" }, "UnloadCommand", "oxide.unload");
		((Plugin)this).AddCovalenceCommand(new string[3] { "oxide.grant", "o.grant", "perm.grant" }, "GrantCommand", "oxide.grant");
		((Plugin)this).AddCovalenceCommand(new string[3] { "oxide.group", "o.group", "perm.group" }, "GroupCommand", "oxide.group");
		((Plugin)this).AddCovalenceCommand(new string[3] { "oxide.revoke", "o.revoke", "perm.revoke" }, "RevokeCommand", "oxide.revoke");
		((Plugin)this).AddCovalenceCommand(new string[3] { "oxide.show", "o.show", "perm.show" }, "ShowCommand", "oxide.show");
		((Plugin)this).AddCovalenceCommand(new string[3] { "oxide.usergroup", "o.usergroup", "perm.usergroup" }, "UserGroupCommand", "oxide.usergroup");
		((Plugin)this).AddCovalenceCommand(new string[3] { "oxide.lang", "o.lang", "lang" }, "LangCommand", (string[])null);
		((Plugin)this).AddCovalenceCommand(new string[2] { "oxide.save", "o.save" }, "SaveCommand", (string[])null);
		((Plugin)this).AddCovalenceCommand(new string[2] { "oxide.version", "o.version" }, "VersionCommand", (string[])null);
		foreach (KeyValuePair<string, Dictionary<string, string>> language in Localization.languages)
		{
			lang.RegisterMessages(language.Value, (Plugin)(object)this, language.Key);
		}
		if (!permission.IsLoaded)
		{
			return;
		}
		int num = 0;
		foreach (string defaultGroup in Interface.Oxide.Config.Options.DefaultGroups)
		{
			if (!permission.GroupExists(defaultGroup))
			{
				permission.CreateGroup(defaultGroup, defaultGroup, num++);
			}
		}
		permission.RegisterValidate((Func<string, bool>)((string s) => ulong.TryParse(s, out var result) && ((result == 0L) ? 1 : ((int)Math.Floor(Math.Log10(result) + 1.0))) >= 17));
		permission.CleanUp();
	}

	[HookMethod("OnPluginLoaded")]
	private void OnPluginLoaded(Plugin plugin)
	{
		if (serverInitialized)
		{
			plugin.CallHook("OnServerInitialized", new object[1] { false });
		}
	}

	[HookMethod("IOnServerInitialized")]
	private void IOnServerInitialized()
	{
		if (!serverInitialized)
		{
			Analytics.Collect();
			if (!Interface.Oxide.Config.Options.Modded)
			{
				Interface.Oxide.LogWarning("The server is currently listed under Community. Please be aware that Facepunch only allows admin tools (that do not affect gameplay) under the Community section", Array.Empty<object>());
			}
			serverInitialized = true;
			Interface.CallHook("OnServerInitialized", (object)serverInitialized);
		}
	}

	[HookMethod("OnServerSave")]
	private void OnServerSave()
	{
		Interface.Oxide.OnSave();
		Covalence.PlayerManager.SavePlayerData();
	}

	[HookMethod("IOnServerShutdown")]
	private void IOnServerShutdown()
	{
		Interface.Oxide.CallHook("OnServerShutdown", Array.Empty<object>());
		Interface.Oxide.OnShutdown();
		Covalence.PlayerManager.SavePlayerData();
	}

	private void ParseCommand(string argstr, out string command, out string[] args)
	{
		List<string> list = new List<string>();
		StringBuilder stringBuilder = new StringBuilder();
		bool flag = false;
		foreach (char c in argstr)
		{
			if (c == '"')
			{
				if (flag)
				{
					string text = stringBuilder.ToString().Trim();
					if (!string.IsNullOrEmpty(text))
					{
						list.Add(text);
					}
					stringBuilder.Clear();
					flag = false;
				}
				else
				{
					flag = true;
				}
			}
			else if (char.IsWhiteSpace(c) && !flag)
			{
				string text2 = stringBuilder.ToString().Trim();
				if (!string.IsNullOrEmpty(text2))
				{
					list.Add(text2);
				}
				stringBuilder.Clear();
			}
			else
			{
				stringBuilder.Append(c);
			}
		}
		if (stringBuilder.Length > 0)
		{
			string text3 = stringBuilder.ToString().Trim();
			if (!string.IsNullOrEmpty(text3))
			{
				list.Add(text3);
			}
		}
		if (list.Count == 0)
		{
			command = null;
			args = null;
		}
		else
		{
			command = list[0];
			list.RemoveAt(0);
			args = list.ToArray();
		}
	}

	public static BasePlayer FindPlayer(string nameOrIdOrIp)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0102: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		BasePlayer result = null;
		Enumerator<BasePlayer> enumerator = BasePlayer.activePlayerList.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				BasePlayer current = enumerator.Current;
				if (string.IsNullOrEmpty(current.UserIDString))
				{
					continue;
				}
				if (current.UserIDString.Equals(nameOrIdOrIp))
				{
					return current;
				}
				if (!string.IsNullOrEmpty(current.displayName))
				{
					if (current.displayName.Equals(nameOrIdOrIp, StringComparison.OrdinalIgnoreCase))
					{
						return current;
					}
					if (StringEx.Contains(current.displayName, nameOrIdOrIp, CompareOptions.OrdinalIgnoreCase))
					{
						result = current;
					}
					Networkable net = ((BaseNetworkable)current).net;
					if (((net != null) ? net.connection : null) != null && ((BaseNetworkable)current).net.connection.ipaddress.Equals(nameOrIdOrIp))
					{
						return current;
					}
					Networkable net2 = ((BaseNetworkable)current).net;
					if (((net2 != null) ? net2.connection : null) != null && ((object)(NetworkableId)(ref ((BaseNetworkable)current).net.ID)/*cast due to .constrained prefix*/).Equals((object?)nameOrIdOrIp))
					{
						return current;
					}
				}
			}
		}
		finally
		{
			((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
		}
		enumerator = BasePlayer.sleepingPlayerList.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				BasePlayer current2 = enumerator.Current;
				if (string.IsNullOrEmpty(current2.UserIDString))
				{
					continue;
				}
				if (current2.UserIDString.Equals(nameOrIdOrIp))
				{
					return current2;
				}
				if (!string.IsNullOrEmpty(current2.displayName))
				{
					if (current2.displayName.Equals(nameOrIdOrIp, StringComparison.OrdinalIgnoreCase))
					{
						return current2;
					}
					if (StringEx.Contains(current2.displayName, nameOrIdOrIp, CompareOptions.OrdinalIgnoreCase))
					{
						result = current2;
					}
				}
			}
			return result;
		}
		finally
		{
			((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
		}
	}

	public static BasePlayer FindPlayerByName(string name)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		BasePlayer result = null;
		Enumerator<BasePlayer> enumerator = BasePlayer.activePlayerList.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				BasePlayer current = enumerator.Current;
				if (!string.IsNullOrEmpty(current.displayName))
				{
					if (current.displayName.Equals(name, StringComparison.OrdinalIgnoreCase))
					{
						return current;
					}
					if (StringEx.Contains(current.displayName, name, CompareOptions.OrdinalIgnoreCase))
					{
						result = current;
					}
				}
			}
		}
		finally
		{
			((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
		}
		enumerator = BasePlayer.sleepingPlayerList.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				BasePlayer current2 = enumerator.Current;
				if (!string.IsNullOrEmpty(current2.displayName))
				{
					if (current2.displayName.Equals(name, StringComparison.OrdinalIgnoreCase))
					{
						return current2;
					}
					if (StringEx.Contains(current2.displayName, name, CompareOptions.OrdinalIgnoreCase))
					{
						result = current2;
					}
				}
			}
			return result;
		}
		finally
		{
			((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
		}
	}

	public static BasePlayer FindPlayerById(ulong id)
	{
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		Enumerator<BasePlayer> enumerator = BasePlayer.activePlayerList.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				BasePlayer current = enumerator.Current;
				if (EncryptedValue<ulong>.op_Implicit(current.userID) == id)
				{
					return current;
				}
			}
		}
		finally
		{
			((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
		}
		enumerator = BasePlayer.sleepingPlayerList.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				BasePlayer current2 = enumerator.Current;
				if (EncryptedValue<ulong>.op_Implicit(current2.userID) == id)
				{
					return current2;
				}
			}
		}
		finally
		{
			((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
		}
		return null;
	}

	public static BasePlayer FindPlayerByIdString(string id)
	{
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		Enumerator<BasePlayer> enumerator = BasePlayer.activePlayerList.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				BasePlayer current = enumerator.Current;
				if (!string.IsNullOrEmpty(current.UserIDString) && current.UserIDString.Equals(id))
				{
					return current;
				}
			}
		}
		finally
		{
			((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
		}
		enumerator = BasePlayer.sleepingPlayerList.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				BasePlayer current2 = enumerator.Current;
				if (!string.IsNullOrEmpty(current2.UserIDString) && current2.UserIDString.Equals(id))
				{
					return current2;
				}
			}
		}
		finally
		{
			((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
		}
		return null;
	}

	[HookMethod("IOnBaseCombatEntityHurt")]
	private object IOnBaseCombatEntityHurt(BaseCombatEntity entity, HitInfo hitInfo)
	{
		if (!(entity is BasePlayer))
		{
			return Interface.CallHook("OnEntityTakeDamage", (object)entity, (object)hitInfo);
		}
		return null;
	}

	[HookMethod("IOnNpcTarget")]
	private object IOnNpcTarget(BaseNpc npc, BaseEntity target)
	{
		if (Interface.CallHook("OnNpcTarget", (object)npc, (object)target) != null)
		{
			npc.SetFact((Facts)0, (byte)0, true, true);
			npc.SetFact((Facts)1, (byte)3, true, true);
			npc.SetFact((Facts)20, (byte)1, true, true);
			npc.playerTargetDecisionStartTime = 0f;
			return 0f;
		}
		return null;
	}

	[HookMethod("IOnNpcTarget")]
	private object IOnNpcTarget(SenseComponent sense, BaseEntity target)
	{
		if (!Object.op_Implicit((Object)(object)sense) || !Object.op_Implicit((Object)(object)target))
		{
			return null;
		}
		BaseEntity baseEntity = ((EntityComponent<BaseEntity>)(object)sense).baseEntity;
		if (!Object.op_Implicit((Object)(object)baseEntity))
		{
			return null;
		}
		if (Interface.CallHook("OnNpcTarget", (object)baseEntity, (object)target) != null)
		{
			return false;
		}
		return null;
	}

	[HookMethod("IOnEntitySaved")]
	private void IOnEntitySaved(BaseNetworkable baseNetworkable, SaveInfo saveInfo)
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		if (serverInitialized && saveInfo.forConnection != null)
		{
			Interface.CallHook("OnEntitySaved", (object)baseNetworkable, (object)saveInfo);
		}
	}

	[HookMethod("IOnLoseCondition")]
	private object IOnLoseCondition(Item item, float amount)
	{
		object[] array = new object[2] { item, amount };
		Interface.CallHook("OnLoseCondition", array);
		amount = (float)array[1];
		float condition = item.condition;
		item.condition -= amount;
		if (item.condition <= 0f && item.condition < condition)
		{
			item.OnBroken();
		}
		return true;
	}

	[HookMethod("ICanPickupEntity")]
	private object ICanPickupEntity(BasePlayer basePlayer, DoorCloser entity)
	{
		object obj = Interface.CallHook("CanPickupEntity", (object)basePlayer, (object)entity);
		if (!(obj is bool) || (bool)obj)
		{
			return null;
		}
		return true;
	}

	[HookMethod("IOnBasePlayerAttacked")]
	private object IOnBasePlayerAttacked(BasePlayer basePlayer, HitInfo hitInfo)
	{
		if (!serverInitialized || (Object)(object)basePlayer == (Object)null || hitInfo == null || ((BaseCombatEntity)basePlayer).IsDead() || isPlayerTakingDamage || basePlayer is NPCPlayer)
		{
			return null;
		}
		if (Interface.CallHook("OnEntityTakeDamage", (object)basePlayer, (object)hitInfo) != null)
		{
			return true;
		}
		isPlayerTakingDamage = true;
		try
		{
			((BaseEntity)basePlayer).OnAttacked(hitInfo);
		}
		finally
		{
			isPlayerTakingDamage = false;
		}
		return true;
	}

	[HookMethod("IOnBasePlayerHurt")]
	private object IOnBasePlayerHurt(BasePlayer basePlayer, HitInfo hitInfo)
	{
		if (!isPlayerTakingDamage)
		{
			return Interface.CallHook("OnEntityTakeDamage", (object)basePlayer, (object)hitInfo);
		}
		return null;
	}

	[HookMethod("OnServerUserSet")]
	private void OnServerUserSet(ulong steamId, UserGroup group, string playerName, string reason, long expiry)
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Invalid comparison between Unknown and I4
		if (serverInitialized && (int)group == 3)
		{
			string text = steamId.ToString();
			IPlayer val = Covalence.PlayerManager.FindPlayerById(text);
			Interface.CallHook("OnPlayerBanned", (object)playerName, (object)steamId, (object)(((val != null) ? val.Address : null) ?? "0"), (object)reason, (object)expiry);
			Interface.CallHook("OnUserBanned", (object)playerName, (object)text, (object)(((val != null) ? val.Address : null) ?? "0"), (object)reason, (object)expiry);
		}
	}

	[HookMethod("OnServerUserRemove")]
	private void OnServerUserRemove(ulong steamId)
	{
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Invalid comparison between Unknown and I4
		if (serverInitialized && ServerUsers.users.ContainsKey(steamId) && (int)ServerUsers.users[steamId].group == 3)
		{
			string text = steamId.ToString();
			IPlayer val = Covalence.PlayerManager.FindPlayerById(text);
			Interface.CallHook("OnPlayerUnbanned", (object)(((val != null) ? val.Name : null) ?? "Unnamed"), (object)steamId, (object)(((val != null) ? val.Address : null) ?? "0"));
			Interface.CallHook("OnUserUnbanned", (object)(((val != null) ? val.Name : null) ?? "Unnamed"), (object)text, (object)(((val != null) ? val.Address : null) ?? "0"));
		}
	}

	[HookMethod("IOnUserApprove")]
	private object IOnUserApprove(Connection connection)
	{
		string username = connection.username;
		string text = connection.userid.ToString();
		string text2 = Regex.Replace(connection.ipaddress, ipPattern, "");
		uint authLevel = connection.authLevel;
		if (permission.IsLoaded)
		{
			permission.UpdateNickname(text, username);
			DefaultGroups defaultGroups = Interface.Oxide.Config.Options.DefaultGroups;
			if (!permission.UserHasGroup(text, defaultGroups.Players))
			{
				permission.AddUserGroup(text, defaultGroups.Players);
			}
			if (authLevel >= 2 && !permission.UserHasGroup(text, defaultGroups.Administrators))
			{
				permission.AddUserGroup(text, defaultGroups.Administrators);
			}
		}
		Covalence.PlayerManager.PlayerJoin(connection.userid, username);
		object obj = Interface.CallHook("CanClientLogin", (object)connection);
		object obj2 = Interface.CallHook("CanUserLogin", (object)username, (object)text, (object)text2);
		object obj3 = ((obj == null) ? obj2 : obj);
		if (obj3 is string || (obj3 is bool && !(bool)obj3))
		{
			ConnectionAuth.Reject(connection, (obj3 is string) ? obj3.ToString() : lang.GetMessage("ConnectionRejected", (Plugin)(object)this, text), (string)null);
			return true;
		}
		object obj4 = Interface.CallHook("OnUserApprove", (object)connection);
		object result = Interface.CallHook("OnUserApproved", (object)username, (object)text, (object)text2);
		if (obj4 != null)
		{
			return obj4;
		}
		return result;
	}

	[HookMethod("IOnPlayerBanned")]
	private void IOnPlayerBanned(Connection connection, AuthResponse status)
	{
		Interface.CallHook("OnPlayerBanned", (object)connection, (object)((object)(AuthResponse)(ref status)/*cast due to .constrained prefix*/).ToString());
	}

	[HookMethod("IOnPlayerChat")]
	private object IOnPlayerChat(ulong playerId, string playerName, string message, ChatChannel channel, BasePlayer basePlayer)
	{
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		if (string.IsNullOrEmpty(message) || message.Equals("text"))
		{
			return true;
		}
		string chatCommandPrefix = CommandHandler.GetChatCommandPrefix(message);
		if (chatCommandPrefix != null)
		{
			TryRunPlayerCommand(basePlayer, message, chatCommandPrefix);
			return false;
		}
		message = StringEx.EscapeRichText(message, false);
		if ((Object)(object)basePlayer == (Object)null || !basePlayer.IsConnected)
		{
			return Interface.CallHook("OnPlayerOfflineChat", (object)playerId, (object)playerName, (object)message, (object)channel);
		}
		object obj = Interface.CallHook("OnPlayerChat", (object)basePlayer, (object)message, (object)channel);
		object result = Interface.CallHook("OnUserChat", (object)basePlayer.IPlayer, (object)message);
		if (obj != null)
		{
			return obj;
		}
		return result;
	}

	private void TryRunPlayerCommand(BasePlayer basePlayer, string message, string commandPrefix)
	{
		if ((Object)(object)basePlayer == (Object)null)
		{
			return;
		}
		string text = message.Replace("\n", "").Replace("\r", "").Trim();
		if (string.IsNullOrEmpty(text))
		{
			return;
		}
		ParseCommand(text.Substring(commandPrefix.Length), out var command, out var args);
		if (command == null)
		{
			return;
		}
		if (!basePlayer.IsConnected)
		{
			Interface.CallHook("OnApplicationCommand", (object)basePlayer, (object)command, (object)args);
			Interface.CallHook("OnApplicationCommand", (object)basePlayer.IPlayer, (object)command, (object)args);
			return;
		}
		object obj = Interface.CallHook("OnPlayerCommand", (object)basePlayer, (object)command, (object)args);
		object obj2 = Interface.CallHook("OnUserCommand", (object)basePlayer.IPlayer, (object)command, (object)args);
		if (((obj == null) ? obj2 : obj) != null)
		{
			return;
		}
		try
		{
			if (!Covalence.CommandSystem.HandleChatMessage(basePlayer.IPlayer, text) && !cmdlib.HandleChatCommand(basePlayer, command, args) && Interface.Oxide.Config.Options.Modded)
			{
				basePlayer.IPlayer.Reply(string.Format(lang.GetMessage("UnknownCommand", (Plugin)(object)this, basePlayer.IPlayer.Id), command));
			}
		}
		catch (Exception ex)
		{
			Exception ex2 = ex;
			string text2 = string.Empty;
			string text3 = string.Empty;
			StringBuilder stringBuilder = new StringBuilder();
			while (ex2 != null)
			{
				string name = ex2.GetType().Name;
				text2 = (name + ": " + ex2.Message).TrimEnd(' ', ':');
				stringBuilder.AppendLine(ex2.StackTrace);
				if (ex2.InnerException != null)
				{
					stringBuilder.AppendLine("Rethrow as " + name);
				}
				ex2 = ex2.InnerException;
			}
			StackTrace stackTrace = new StackTrace(ex, 0, fNeedFileInfo: true);
			for (int i = 0; i < stackTrace.FrameCount; i++)
			{
				MethodBase method = stackTrace.GetFrame(i).GetMethod();
				if ((object)method != null && (object)method.DeclaringType != null && method.DeclaringType.Namespace == "Oxide.Plugins")
				{
					text3 = method.DeclaringType.Name;
				}
			}
			Interface.Oxide.LogError(string.Format("Failed to run command '/{0}' on plugin '{1}'. ({2}){3}{4}", command, text3, text2.Replace(Environment.NewLine, " "), Environment.NewLine, stackTrace), Array.Empty<object>());
		}
	}

	[HookMethod("OnClientAuth")]
	private void OnClientAuth(Connection connection)
	{
		connection.username = Regex.Replace(connection.username, "<[^>]*>", string.Empty);
	}

	[HookMethod("IOnPlayerConnected")]
	private void IOnPlayerConnected(BasePlayer basePlayer)
	{
		lang.SetLanguage(((BaseNetworkable)basePlayer).net.connection.info.GetString("global.language", "en"), basePlayer.UserIDString);
		basePlayer.SendEntitySnapshot((BaseNetworkable)(object)CommunityEntity.ServerInstance);
		Covalence.PlayerManager.PlayerConnected(basePlayer);
		IPlayer val = Covalence.PlayerManager.FindPlayerById(basePlayer.UserIDString);
		if (val != null)
		{
			basePlayer.IPlayer = val;
			Interface.CallHook("OnUserConnected", (object)val);
		}
		Interface.Oxide.CallHook("OnPlayerConnected", new object[1] { basePlayer });
	}

	[HookMethod("OnPlayerDisconnected")]
	private void OnPlayerDisconnected(BasePlayer basePlayer, string reason)
	{
		IPlayer iPlayer = basePlayer.IPlayer;
		if (iPlayer != null)
		{
			Interface.CallHook("OnUserDisconnected", (object)iPlayer, (object)reason);
		}
		Covalence.PlayerManager.PlayerDisconnected(basePlayer);
	}

	[HookMethod("OnPlayerSetInfo")]
	private void OnPlayerSetInfo(Connection connection, string key, string val)
	{
		if (!(key == "global.language"))
		{
			return;
		}
		lang.SetLanguage(val, connection.userid.ToString());
		MonoBehaviour player = connection.player;
		BasePlayer val2 = (BasePlayer)(object)((player is BasePlayer) ? player : null);
		if ((Object)(object)val2 != (Object)null)
		{
			Interface.CallHook("OnPlayerLanguageChanged", (object)val2, (object)val);
			if (val2.IPlayer != null)
			{
				Interface.CallHook("OnPlayerLanguageChanged", (object)val2.IPlayer, (object)val);
			}
		}
	}

	[HookMethod("OnPlayerKicked")]
	private void OnPlayerKicked(BasePlayer basePlayer, string reason)
	{
		if (basePlayer.IPlayer != null)
		{
			Interface.CallHook("OnUserKicked", (object)basePlayer.IPlayer, (object)reason);
		}
	}

	[HookMethod("OnPlayerRespawn")]
	private object OnPlayerRespawn(BasePlayer basePlayer)
	{
		IPlayer iPlayer = basePlayer.IPlayer;
		if (iPlayer == null)
		{
			return null;
		}
		return Interface.CallHook("OnUserRespawn", (object)iPlayer);
	}

	[HookMethod("OnPlayerRespawned")]
	private void OnPlayerRespawned(BasePlayer basePlayer)
	{
		IPlayer iPlayer = basePlayer.IPlayer;
		if (iPlayer != null)
		{
			Interface.CallHook("OnUserRespawned", (object)iPlayer);
		}
	}

	[HookMethod("IOnRconMessage")]
	private object IOnRconMessage(IPAddress ipAddress, string command)
	{
		if (ipAddress != null && !string.IsNullOrEmpty(command))
		{
			RemoteMessage message = RemoteMessage.GetMessage(command);
			if (string.IsNullOrEmpty(message?.Message))
			{
				return null;
			}
			if (Interface.CallHook("OnRconMessage", (object)ipAddress, (object)message) != null)
			{
				return true;
			}
			string[] array = CommandLine.Split(message.Message);
			if (array.Length >= 1)
			{
				string text = array[0].ToLower();
				string[] array2 = array.Skip(1).ToArray();
				if (Interface.CallHook("OnRconCommand", (object)ipAddress, (object)text, (object)array2) != null)
				{
					return true;
				}
			}
		}
		return null;
	}

	[HookMethod("IOnRconInitialize")]
	private object IOnRconInitialize()
	{
		if (!Interface.Oxide.Config.Rcon.Enabled)
		{
			return null;
		}
		return true;
	}

	[HookMethod("IOnRunCommandLine")]
	private object IOnRunCommandLine()
	{
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		foreach (KeyValuePair<string, string> @switch in CommandLine.GetSwitches())
		{
			string text = @switch.Value;
			if (text == "")
			{
				text = "1";
			}
			string text2 = @switch.Key.Substring(1);
			Option unrestricted = Option.Unrestricted;
			((Option)(ref unrestricted)).PrintOutput = false;
			ConsoleSystem.Run(unrestricted, text2, new object[1] { text });
		}
		return false;
	}

	[HookMethod("IOnServerCommand")]
	private object IOnServerCommand(Arg arg)
	{
		if (arg == null || (arg.Connection != null && (Object)(object)ArgEx.Player(arg) == (Object)null))
		{
			return true;
		}
		if (arg.cmd.FullName == "chat.say" || arg.cmd.FullName == "chat.teamsay" || arg.cmd.FullName == "chat.localsay")
		{
			return null;
		}
		object obj = Interface.CallHook("OnServerCommand", (object)arg);
		object obj2 = Interface.CallHook("OnServerCommand", (object)arg.cmd.FullName, (object)RustCommandSystem.ExtractArgs(arg));
		if (((obj == null) ? obj2 : obj) != null)
		{
			return true;
		}
		return null;
	}

	[HookMethod("OnServerInformationUpdated")]
	private void OnServerInformationUpdated()
	{
		SteamServer.GameTags += ",^o";
		if (Interface.Oxide.Config.Options.Modded)
		{
			SteamServer.GameTags += "^z";
		}
	}

	[HookMethod("IOnCupboardAuthorize")]
	private object IOnCupboardAuthorize(ulong userID, BasePlayer player, BuildingPrivlidge privlidge)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		if (userID == EncryptedValue<ulong>.op_Implicit(player.userID))
		{
			if (Interface.CallHook("OnCupboardAuthorize", (object)privlidge, (object)player) != null)
			{
				return true;
			}
		}
		else if (Interface.CallHook("OnCupboardAssign", (object)privlidge, (object)userID, (object)player) != null)
		{
			return true;
		}
		return null;
	}
}
