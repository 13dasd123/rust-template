using System;
using Oxide.Core;
using Oxide.Core.Libraries;
using Oxide.Core.Plugins;

internal class ConsoleCommand
{
	public readonly string Name;

	public PluginCallback Callback;

	public readonly Command RustCommand;

	public Action<Arg> OriginalCallback;

	internal readonly Permission permission = Interface.Oxide.GetLibrary<Permission>((string)null);

	public ConsoleCommand(string name)
	{
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Expected O, but got Unknown
		Name = name;
		string[] array = Name.Split(new char[1] { '.' });
		RustCommand = new Command
		{
			Name = array[1],
			Parent = array[0],
			FullName = name,
			ServerUser = true,
			ServerAdmin = true,
			Client = true,
			ClientInfo = false,
			Variable = false,
			Call = HandleCommand
		};
	}

	public void AddCallback(Plugin plugin, string name)
	{
		Callback = new PluginCallback(plugin, name);
	}

	public void AddCallback(Plugin plugin, Func<Arg, bool> callback)
	{
		Callback = new PluginCallback(plugin, callback);
	}

	public void HandleCommand(Arg arg)
	{
		Plugin plugin = Callback.Plugin;
		if (plugin != null)
		{
			plugin.TrackStart();
		}
		Callback.Call(arg);
		Plugin plugin2 = Callback.Plugin;
		if (plugin2 != null)
		{
			plugin2.TrackEnd();
		}
	}
}
