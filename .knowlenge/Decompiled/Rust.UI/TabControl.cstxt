using Rust.UI;
using TMPro;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;

public class TabControl : RustControl
{
	public RectTransform TabContainer;

	public RectTransform PanelContainer;

	public RustButton ButtonControl;

	public float InnerPadding;

	public bool AllowCloseAll;

	public Image Background;

	public Image Foreground;

	public RustLayout Panel(string name)
	{
		Transform obj = ((Transform)PanelContainer).Find(name);
		if (obj == null)
		{
			return null;
		}
		return ((Component)obj).GetComponent<RustLayout>();
	}

	public RustButton Button(string name)
	{
		Transform obj = ((Transform)TabContainer).Find(name);
		if (obj == null)
		{
			return null;
		}
		return ((Component)obj).GetComponent<RustButton>();
	}

	public void AddTab(string name, Phrase buttontext = null, Icons icon = Icons.ExclamationSquare)
	{
		bool flag = ((Transform)PanelContainer).childCount == 0;
		GameObject obj = Object.Instantiate<GameObject>(((Component)ButtonControl).gameObject);
		((Object)obj).name = name;
		RustButton component = obj.GetComponent<RustButton>();
		((UIBehaviour)(object)component).SetParent((Transform)(object)TabContainer);
		component.Text.AutoSizeParent = true;
		component.Text.AutoSetWidth = true;
		component.IsToggle = true;
		component.UnpressSiblings = true;
		component.PreventToggleOff = !AllowCloseAll;
		component.TabPanelTarget = (Transform)(object)PanelContainer;
		component.Icon.Icon = icon;
		if (buttontext == null)
		{
			((TMP_Text)component.Text).text = name;
			component.Text.DoAutoSize();
		}
		else
		{
			component.Text.SetPhrase(buttontext);
		}
		if (flag && !AllowCloseAll)
		{
			component.Toggle(v: true);
		}
		RustLayout rustLayout = Make.Container.Vertical();
		((Object)rustLayout).name = name;
		((UIBehaviour)(object)rustLayout).SetParent((Transform)(object)PanelContainer);
		Transform transform = ((Component)rustLayout).transform;
		((RectTransform)(object)((transform is RectTransform) ? transform : null)).Fill(InnerPadding, InnerPadding, InnerPadding, InnerPadding);
		((Component)rustLayout).gameObject.SetActive(flag && !AllowCloseAll);
		LayoutRebuilder.MarkLayoutForRebuild(TabContainer);
	}

	protected override void ApplyStyle(StyleColorSet s)
	{
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		base.ApplyStyle(s);
		if (Object.op_Implicit((Object)(object)Background))
		{
			((Graphic)Background).color = s.Bg;
		}
		if (Object.op_Implicit((Object)(object)Foreground))
		{
			((Graphic)Foreground).color = s.Fg;
		}
	}
}
