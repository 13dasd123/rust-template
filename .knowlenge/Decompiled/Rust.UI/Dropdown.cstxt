using System;
using Rust.UI;
using TMPro;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.EventSystems;
using UnityEngine.UI;

public class Dropdown : RustControl, IPointerDownHandler, IEventSystemHandler
{
	[Serializable]
	public class ChangedEvent : UnityEvent<Option>
	{
	}

	public RustIcon Icon;

	public RustText Text;

	public RustIcon OptionIcon;

	public Option[] Options;

	private int CurrentOption;

	public ChangedEvent OnChanged;

	public Option Value => Options[CurrentOption];

	protected override void Awake()
	{
		((UIBehaviour)this).Awake();
	}

	public void SetOptions(Option[] options)
	{
		Options = options;
		SetOptionDefault();
	}

	protected void SetOptionFromUser(Option option)
	{
		SetOption(option);
		((UnityEvent<Option>)OnChanged)?.Invoke(option);
	}

	public void SetOption(int i)
	{
		i += Options.Length;
		i %= Options.Length;
		CurrentOption = i;
		((TMP_Text)Text).text = Options[i].Label.translated;
		OptionIcon.Icon = Options[i].Icon;
	}

	public void SetOption(Option option)
	{
		for (int i = 0; i < Options.Length; i++)
		{
			if (Options[i].Value == option.Value)
			{
				SetOption(i);
				break;
			}
		}
	}

	public void SetOptionDefault()
	{
		if (Options == null || Options.Length == 0)
		{
			return;
		}
		for (int i = 0; i < Options.Length; i++)
		{
			if (Options[i].Default)
			{
				SetOption(i);
				return;
			}
		}
		SetOption(0);
	}

	public void OnLeft()
	{
		SetOption(CurrentOption - 1);
		((UnityEvent<Option>)OnChanged)?.Invoke(Value);
	}

	public void OnRight()
	{
		SetOption(CurrentOption + 1);
		((UnityEvent<Option>)OnChanged)?.Invoke(Value);
	}

	protected override void ApplyStyle(StyleColorSet s)
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		if (Object.op_Implicit((Object)(object)Text))
		{
			((Graphic)Text).color = s.Fg;
		}
		if (Object.op_Implicit((Object)(object)Icon))
		{
			((Graphic)Icon).color = s.Icon;
		}
		if (Object.op_Implicit((Object)(object)OptionIcon))
		{
			((Graphic)OptionIcon).color = s.Fg;
		}
		Image component = ((Component)this).GetComponent<Image>();
		if (Object.op_Implicit((Object)(object)component))
		{
			((Graphic)component).color = s.Bg;
		}
	}

	public void OnPointerDown(PointerEventData eventData)
	{
		OpenMenu();
	}

	public void OpenMenu()
	{
		if (Options.Length != 0)
		{
			Menu menu = Make.Menu(Options, Value);
			((UnityEvent<Option>)menu.OnSelected).AddListener((UnityAction<Option>)SetOptionFromUser);
			menu.Popup(base.rectTransform);
		}
	}
}
