using Rust.UI;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;
using UnityEngine.Video;

public class Video : RustControl
{
	public RawImage VideoCanvas;

	public VideoPlayer VideoPlayer;

	public CanvasGroup CanvasGroup;

	[Range(0f, 5f)]
	public float FadeIn;

	private uint textureWidth;

	private uint textureHeight;

	private Vector2 playerSize;

	protected override void Awake()
	{
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Expected O, but got Unknown
		((UIBehaviour)this).Awake();
		VideoPlayer.errorReceived += new ErrorEventHandler(VideoPlayer_errorReceived);
	}

	private void VideoPlayer_errorReceived(VideoPlayer source, string message)
	{
		Debug.Log((object)("Video Error: \"" + message + "\""));
	}

	public void PlayUrl(string video)
	{
		VideoPlayer.Stop();
		VideoPlayer.url = video;
		VideoPlayer.Play();
		CanvasGroup.alpha = 0f;
		textureWidth = 0u;
		textureHeight = 0u;
	}

	public void LateUpdate()
	{
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)VideoPlayer.texture == (Object)null)
		{
			CanvasGroup.alpha = 0f;
			textureWidth = 0u;
			textureHeight = 0u;
			VideoCanvas.texture = null;
		}
		else if ((textureWidth != VideoPlayer.width || textureHeight != VideoPlayer.height || !(playerSize == base.rectTransform.GetSize())) && VideoPlayer.isPrepared && VideoPlayer.frame >= 0)
		{
			VideoCanvas.texture = VideoPlayer.texture;
			textureWidth = VideoPlayer.width;
			textureHeight = VideoPlayer.height;
			Cover();
			if (FadeIn > 0f)
			{
				CanvasGroup.alpha = 0f;
				LeanTween.alphaCanvas(CanvasGroup, 1f, FadeIn);
			}
			else
			{
				CanvasGroup.alpha = 1f;
			}
		}
	}

	private void Cover()
	{
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		Transform transform = ((Component)VideoCanvas).transform;
		RectTransform trans = (RectTransform)(object)((transform is RectTransform) ? transform : null);
		Vector2 size = base.rectTransform.GetSize();
		Vector2 val = default(Vector2);
		((Vector2)(ref val))..ctor((float)VideoPlayer.width, (float)VideoPlayer.height);
		float num = size.x / size.y;
		float num2 = val.x / val.y;
		playerSize = size;
		if (num == num2)
		{
			trans.SetSize(new Vector2(size.x, size.y));
		}
		if (num > num2)
		{
			trans.SetSize(new Vector2(size.x, size.x / num2));
		}
		if (num < num2)
		{
			trans.SetSize(new Vector2(size.y * num2, size.y));
		}
	}

	public void Stop()
	{
		VideoPlayer.Stop();
		VideoCanvas.texture = null;
		textureWidth = 0u;
		textureHeight = 0u;
		CanvasGroup.alpha = 0f;
	}
}
