using UnityEngine;
using UnityEngine.UI;

public class CoverImage : MaskableGraphic
{
	[SerializeField]
	private Texture _texture;

	public Texture texture
	{
		get
		{
			return _texture;
		}
		set
		{
			if (!((Object)(object)value == (Object)(object)texture))
			{
				_texture = value;
				((Graphic)this).SetVerticesDirty();
				((Graphic)this).SetMaterialDirty();
			}
		}
	}

	public override Texture mainTexture
	{
		get
		{
			if (!((Object)(object)_texture != (Object)null))
			{
				return (Texture)(object)Graphic.s_WhiteTexture;
			}
			return _texture;
		}
	}

	public CoverImage()
	{
		((Graphic)this).useLegacyMeshGeneration = false;
	}

	protected override void OnPopulateMesh(VertexHelper vh)
	{
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_0110: Unknown result type (might be due to invalid IL or missing references)
		//IL_0116: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0121: Unknown result type (might be due to invalid IL or missing references)
		//IL_0135: Unknown result type (might be due to invalid IL or missing references)
		//IL_0140: Unknown result type (might be due to invalid IL or missing references)
		//IL_0146: Unknown result type (might be due to invalid IL or missing references)
		//IL_014c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0151: Unknown result type (might be due to invalid IL or missing references)
		//IL_0165: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)_texture == (Object)null)
		{
			((Graphic)this).OnPopulateMesh(vh);
			return;
		}
		Rect dst = ((Graphic)this).GetPixelAdjustedRect();
		Vector4 val = default(Vector4);
		((Vector4)(ref val))..ctor(((Rect)(ref dst)).x, ((Rect)(ref dst)).y, ((Rect)(ref dst)).x + ((Rect)(ref dst)).width, ((Rect)(ref dst)).y + ((Rect)(ref dst)).height);
		float num = (float)_texture.width * _texture.texelSize.x;
		float num2 = (float)_texture.height * _texture.texelSize.y;
		Color32 val2 = Color32.op_Implicit(((Graphic)this).color);
		Rect coverRect = GetCoverRect(in dst, _texture);
		vh.Clear();
		vh.AddVert(new Vector3(val.x, val.y), val2, new Vector2(((Rect)(ref coverRect)).xMin * num, ((Rect)(ref coverRect)).yMin * num2));
		vh.AddVert(new Vector3(val.x, val.w), val2, new Vector2(((Rect)(ref coverRect)).xMin * num, ((Rect)(ref coverRect)).yMax * num2));
		vh.AddVert(new Vector3(val.z, val.w), val2, new Vector2(((Rect)(ref coverRect)).xMax * num, ((Rect)(ref coverRect)).yMax * num2));
		vh.AddVert(new Vector3(val.z, val.y), val2, new Vector2(((Rect)(ref coverRect)).xMax * num, ((Rect)(ref coverRect)).yMin * num2));
		vh.AddTriangle(0, 1, 2);
		vh.AddTriangle(2, 3, 0);
	}

	private Rect GetCoverRect(in Rect dst, Texture texture)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		Rect result = dst;
		Vector2 size = ((Rect)(ref result)).size;
		Vector2 val = default(Vector2);
		((Vector2)(ref val))..ctor((float)texture.width, (float)texture.height);
		float num = size.x / size.y;
		float num2 = val.x / val.y;
		float num3 = ((num >= num2) ? (size.x / val.x) : (size.y / val.y));
		float num4 = val.x * num3;
		float num5 = val.y * num3;
		result = default(Rect);
		((Rect)(ref result)).x = (num4 - size.x) / 2f / num4;
		((Rect)(ref result)).y = (num5 - size.y) / 2f / num5;
		((Rect)(ref result)).width = size.x / num4;
		((Rect)(ref result)).height = size.y / num5;
		return result;
	}

	protected override void OnDidApplyAnimationProperties()
	{
		((Graphic)this).SetMaterialDirty();
		((Graphic)this).SetVerticesDirty();
	}

	protected override void OnRectTransformDimensionsChange()
	{
		((Graphic)this).SetVerticesDirty();
	}
}
