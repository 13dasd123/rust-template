using System;
using System.Runtime.CompilerServices;
using Rust.UI;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.EventSystems;

public class RustUiTest : MonoBehaviour
{
	[Serializable]
	[CompilerGenerated]
	private sealed class <>c
	{
		public static readonly <>c <>9 = new <>c();

		public static UnityAction <>9__3_0;

		public static UnityAction <>9__3_1;

		public static UnityAction <>9__3_2;

		public static UnityAction<Option> <>9__3_3;

		public static UnityAction<string> <>9__3_4;

		public static UnityAction<float> <>9__3_5;

		public static UnityAction<float> <>9__3_6;

		public static UnityAction<bool> <>9__3_7;

		public static UnityAction<bool> <>9__3_8;

		public static UnityAction<bool> <>9__3_9;

		public static UnityAction<Option> <>9__3_11;

		public static UnityAction<Option> <>9__3_12;

		public static UnityAction<Option> <>9__3_13;

		internal void <Awake>b__3_0()
		{
			Debug.Log((object)"Button Pressed");
		}

		internal void <Awake>b__3_1()
		{
			Debug.Log((object)"Button Pressed");
		}

		internal void <Awake>b__3_2()
		{
			Debug.Log((object)"Button Pressed");
		}

		internal void <Awake>b__3_3(Option val)
		{
			Debug.Log((object)("Value Changed: " + val.Value));
		}

		internal void <Awake>b__3_4(string val)
		{
			Debug.Log((object)("Value Changed: " + val));
		}

		internal void <Awake>b__3_5(float val)
		{
			Debug.Log((object)$"Value Changed: {val}");
		}

		internal void <Awake>b__3_6(float val)
		{
			Debug.Log((object)$"Value Changed: {val}");
		}

		internal void <Awake>b__3_7(bool val)
		{
			Debug.Log((object)$"Value Changed: {val}");
		}

		internal void <Awake>b__3_8(bool val)
		{
			Debug.Log((object)$"Value Changed: {val}");
		}

		internal void <Awake>b__3_9(bool val)
		{
			Debug.Log((object)$"Value Changed: {val}");
		}

		internal void <Awake>b__3_11(Option val)
		{
			Debug.Log((object)$"Value Changed: {val}");
		}

		internal void <Awake>b__3_12(Option val)
		{
			Debug.Log((object)$"Value Changed: {val}");
		}

		internal void <Awake>b__3_13(Option val)
		{
			Debug.Log((object)$"Value Changed: {val}");
		}
	}

	private static readonly Option[] enumOptions = new Option[3]
	{
		new Option("test.one", "Test One", "testone"),
		new Option("test.two", "Test Two", "testtwo"),
		new Option("test.three", "Test Three", "testthree")
	};

	private static readonly Option[] enumOptionsJustIcons = new Option[5]
	{
		new Option(Icons.Marker),
		new Option(Icons.Peace),
		new Option(Icons.Duck),
		new Option(Icons.MapPin),
		new Option(Icons.Fire)
	};

	private static readonly Option[] enumOptionsWithIcons = new Option[3]
	{
		new Option("test.one", "Test One", "testone", isdefault: false, Icons.UserNinja),
		new Option("test.two", "Test Two", "testtwo", isdefault: false, Icons.BookUser),
		new Option("test.three", "Test Three", "testthree")
	};

	private void Awake()
	{
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Unknown result type (might be due to invalid IL or missing references)
		//IL_0109: Expected O, but got Unknown
		//IL_0153: Unknown result type (might be due to invalid IL or missing references)
		//IL_0158: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Expected O, but got Unknown
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b3: Expected O, but got Unknown
		//IL_0416: Unknown result type (might be due to invalid IL or missing references)
		//IL_042c: Expected O, but got Unknown
		//IL_0452: Unknown result type (might be due to invalid IL or missing references)
		//IL_0468: Expected O, but got Unknown
		//IL_0478: Unknown result type (might be due to invalid IL or missing references)
		//IL_048e: Expected O, but got Unknown
		//IL_04a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ba: Expected O, but got Unknown
		//IL_04d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ef: Expected O, but got Unknown
		//IL_050c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0516: Expected O, but got Unknown
		TabControl tabControl = Make.Container.TabControl();
		((UIBehaviour)(object)tabControl).SetParent(((Component)this).transform);
		tabControl.AddTab("tabcontrol", Phrase.op_Implicit(string.Empty), Icons.Folders);
		TabControl tabControl2 = Make.Container.TabControl("Vertical");
		((UIBehaviour)(object)tabControl2).SetParent((UIBehaviour)(object)tabControl.Panel("tabcontrol"));
		tabControl2.AddTab("a", Phrase.op_Implicit(string.Empty), Icons.HandHeart);
		tabControl2.AddTab("b", Phrase.op_Implicit(string.Empty), Icons.OilCan);
		tabControl2.AddTab("c", Phrase.op_Implicit(string.Empty), Icons.SunCloud);
		tabControl.AddTab("buttons", Phrase.op_Implicit("Buttons"), Icons.Clipboard);
		RustButton rustButton = Make.Button(Phrase.op_Implicit("Button Normal"), Icons.Rss);
		((UIBehaviour)(object)rustButton).SetParent((UIBehaviour)(object)tabControl.Panel("buttons"));
		UnityEvent onPressed = rustButton.OnPressed;
		object obj = <>c.<>9__3_0;
		if (obj == null)
		{
			UnityAction val2 = delegate
			{
				Debug.Log((object)"Button Pressed");
			};
			<>c.<>9__3_0 = val2;
			obj = (object)val2;
		}
		onPressed.AddListener((UnityAction)obj);
		RustButton rustButton2 = Make.Button(Phrase.op_Implicit("Button Danger"), Icons.ExclamationTriangle, toggle: false, "Danger");
		((UIBehaviour)(object)rustButton2).SetParent((UIBehaviour)(object)tabControl.Panel("buttons"));
		UnityEvent onPressed2 = rustButton2.OnPressed;
		object obj2 = <>c.<>9__3_1;
		if (obj2 == null)
		{
			UnityAction val3 = delegate
			{
				Debug.Log((object)"Button Pressed");
			};
			<>c.<>9__3_1 = val3;
			obj2 = (object)val3;
		}
		onPressed2.AddListener((UnityAction)obj2);
		RustButton rustButton3 = Make.Button(Phrase.op_Implicit("Button Success"), Icons.InfoSquare, toggle: false, "Success");
		((UIBehaviour)(object)rustButton3).SetParent((UIBehaviour)(object)tabControl.Panel("buttons"));
		UnityEvent onPressed3 = rustButton3.OnPressed;
		object obj3 = <>c.<>9__3_2;
		if (obj3 == null)
		{
			UnityAction val4 = delegate
			{
				Debug.Log((object)"Button Pressed");
			};
			<>c.<>9__3_2 = val4;
			obj3 = (object)val4;
		}
		onPressed3.AddListener((UnityAction)obj3);
		tabControl.AddTab("input", Phrase.op_Implicit("Inputs"), Icons.Inbox);
		RustOption rustOption = Make.Option(enumOptions);
		((UIBehaviour)(object)rustOption).SetParent((UIBehaviour)(object)tabControl.Panel("input"));
		((UnityEvent<Option>)rustOption.OnChanged).AddListener((UnityAction<Option>)delegate(Option val)
		{
			Debug.Log((object)("Value Changed: " + val.Value));
		});
		RustInput rustInput = Make.Input(Phrase.op_Implicit("Enter Your Name"));
		((UIBehaviour)(object)rustInput).SetParent((UIBehaviour)(object)tabControl.Panel("input"));
		((UnityEvent<string>)rustInput.OnValueChanged).AddListener((UnityAction<string>)delegate(string val)
		{
			Debug.Log((object)("Value Changed: " + val));
		});
		RustSlider rustSlider = Make.Slider(0f, 1f, 0.3f);
		((UIBehaviour)(object)rustSlider).SetParent((UIBehaviour)(object)tabControl.Panel("input"));
		((UnityEvent<float>)rustSlider.OnChanged).AddListener((UnityAction<float>)delegate(float val)
		{
			Debug.Log((object)$"Value Changed: {val}");
		});
		RustSlider rustSlider2 = Make.Slider(0f, 50f, 3f, integer: true);
		((UIBehaviour)(object)rustSlider2).SetParent((UIBehaviour)(object)tabControl.Panel("input"));
		((UnityEvent<float>)rustSlider2.OnChanged).AddListener((UnityAction<float>)delegate(float val)
		{
			Debug.Log((object)$"Value Changed: {val}");
		});
		RustToggle rustToggle = Make.ToggleOnOff();
		((UIBehaviour)(object)rustToggle).SetParent((UIBehaviour)(object)tabControl.Panel("input"));
		((UnityEvent<bool>)rustToggle.OnChanged).AddListener((UnityAction<bool>)delegate(bool val)
		{
			Debug.Log((object)$"Value Changed: {val}");
		});
		RustToggle rustToggle2 = Make.ToggleEnabledDisabled();
		((UIBehaviour)(object)rustToggle2).SetParent((UIBehaviour)(object)tabControl.Panel("input"));
		((UnityEvent<bool>)rustToggle2.OnChanged).AddListener((UnityAction<bool>)delegate(bool val)
		{
			Debug.Log((object)$"Value Changed: {val}");
		});
		RustToggle rustToggle3 = Make.Toggle(Phrase.op_Implicit("Awake"), Phrase.op_Implicit("Asleep"));
		((UIBehaviour)(object)rustToggle3).SetParent((UIBehaviour)(object)tabControl.Panel("input"));
		((UnityEvent<bool>)rustToggle3.OnChanged).AddListener((UnityAction<bool>)delegate(bool val)
		{
			Debug.Log((object)$"Value Changed: {val}");
		});
		tabControl.AddTab("menu", Phrase.op_Implicit("Menu"), Icons.Backward);
		RustButton file = Make.Button(new Phrase("menu.file", "File"), Icons.File, toggle: true, "Toolbar.Normal", autoSize: true);
		RustWrapper rustWrapper = Make.Container.Toolbar();
		rustWrapper.Add((UIBehaviour)(object)file);
		rustWrapper.Add((UIBehaviour)(object)Make.Button(new Phrase("menu.edit", "Edit"), Icons.Pencil, toggle: true, "Toolbar.Normal", autoSize: true));
		rustWrapper.Add((UIBehaviour)(object)Make.Button(new Phrase("menu.view", "View"), Icons.Magnet, toggle: true, "Toolbar.Normal", autoSize: true));
		rustWrapper.AddFlex();
		rustWrapper.Add((UIBehaviour)(object)Make.Button(new Phrase("menu.exit", "Exit"), Icons.SearchMinus, toggle: true, "Toolbar.Normal", autoSize: true));
		((UIBehaviour)(object)rustWrapper).SetParent((UIBehaviour)(object)tabControl.Panel("menu"));
		RustButton rustButton4 = Make.Button(new Phrase("changebtext", "Change Button Text"), Icons.Sync);
		((UIBehaviour)(object)rustButton4).SetParent((UIBehaviour)(object)tabControl.Panel("menu"));
		rustButton4.OnPressed.AddListener((UnityAction)delegate
		{
			string[] array = new string[6] { "Hi", "Hello", "Long String", "File", "Buttes", "Yep" };
			file.Text.SetText(array[Random.Range(0, array.Length)]);
		});
		RustButtonGroup rustButtonGroup = Make.ButtonGroup(enumOptions);
		((UIBehaviour)(object)rustButtonGroup).SetParent((UIBehaviour)(object)tabControl.Panel("buttons"));
		((UnityEvent<Option>)rustButtonGroup.OnChanged).AddListener((UnityAction<Option>)delegate(Option val)
		{
			Debug.Log((object)$"Value Changed: {val}");
		});
		RustButtonGroup rustButtonGroup2 = Make.ButtonGroup(enumOptionsJustIcons);
		((UIBehaviour)(object)rustButtonGroup2).SetParent((UIBehaviour)(object)tabControl.Panel("buttons"));
		((UnityEvent<Option>)rustButtonGroup2.OnChanged).AddListener((UnityAction<Option>)delegate(Option val)
		{
			Debug.Log((object)$"Value Changed: {val}");
		});
		RustButtonGroup rustButtonGroup3 = Make.ButtonGroup(enumOptionsWithIcons);
		((UIBehaviour)(object)rustButtonGroup3).SetParent((UIBehaviour)(object)tabControl.Panel("buttons"));
		((UnityEvent<Option>)rustButtonGroup3.OnChanged).AddListener((UnityAction<Option>)delegate(Option val)
		{
			Debug.Log((object)$"Value Changed: {val}");
		});
	}
}
