using System;
using RTLTMPro;
using Rust.Localization;
using Rust.UI;
using TMPro;
using UnityEngine;
using UnityEngine.Serialization;
using UnityEngine.UI;

[AddComponentMenu("Rust/UI/RustText")]
public class RustText : TextMeshProUGUI, ILocalize
{
	public bool IsLocalized;

	public string Token;

	[TextArea]
	public string English;

	[NonSerialized]
	public Phrase Phrase;

	[FormerlySerializedAs("AutoSizeContainer")]
	public bool AutoSetWidth;

	public bool AutoSetHeight;

	public bool AutoSizeParent;

	public float MinWidth = 30f;

	public float MaxWidth = float.PositiveInfinity;

	public float MinHeight;

	public float MaxHeight = float.PositiveInfinity;

	private object[] localizationArguments;

	private static FastStringBuilder inputBuilder = new FastStringBuilder(2048);

	private bool invertedAlignment;

	public string LanguageToken => Token;

	public string LanguageEnglish => English;

	public void SetPhrase(Phrase phrase, params object[] args)
	{
		if (Application.isPlaying)
		{
			Phrase = phrase;
		}
		IsLocalized = true;
		Token = phrase.token;
		English = phrase.english;
		if (args != null && args.Length != 0)
		{
			SetPhraseArguments(args);
		}
		else
		{
			UpdateLocalizedText(forceEnglish: false);
		}
	}

	protected override void Awake()
	{
		((TextMeshProUGUI)this).Awake();
		UpdateLocalizedText(forceEnglish: false);
	}

	public void SetPhraseArguments(params object[] args)
	{
		localizationArguments = args;
		UpdateLocalizedText(forceEnglish: false);
	}

	public void SetText(string str)
	{
		SetText(str, localized: false);
	}

	public void SetText(string str, bool localized, bool forceRTLFormatting = false)
	{
		IsLocalized = localized;
		if (localized || forceRTLFormatting)
		{
			str = FormatLocalizedText(str, forceRTLFormatting);
			((TMP_Text)this).text = str;
			DoAutoSize();
			FormatAlignment();
		}
		else
		{
			((TMP_Text)this).text = str;
			DoAutoSize();
		}
	}

	public virtual void DoAutoSize()
	{
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Expected O, but got Unknown
		//IL_0098: Expected O, but got Unknown
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00de: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_010f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_012e: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_013a: Expected O, but got Unknown
		//IL_0140: Expected O, but got Unknown
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Expected O, but got Unknown
		//IL_00c2: Expected O, but got Unknown
		//IL_0153: Unknown result type (might be due to invalid IL or missing references)
		//IL_0158: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_0164: Expected O, but got Unknown
		//IL_016a: Expected O, but got Unknown
		if ((Object)(object)((TMP_Text)this).font == (Object)null)
		{
			Debug.LogWarning((object)("null font: " + ((Object)((Component)this).gameObject).name), (Object)(object)((Component)this).gameObject);
			return;
		}
		if (AutoSetWidth)
		{
			RectTransform val = (RectTransform)((TMP_Text)this).transform;
			Vector2 preferredValues = ((TMP_Text)this).GetPreferredValues(((TMP_Text)this).text, float.PositiveInfinity, float.PositiveInfinity);
			preferredValues.x = Mathf.Clamp(preferredValues.x, MinWidth, MaxWidth);
			RectTransformEx.SetWidth(val, preferredValues.x + ((TMP_Text)this).m_currentFontAsset.normalSpacingOffset);
			RectTransformEx.DoAutoLayout(val);
			if (AutoSizeParent)
			{
				RectTransform val2 = (RectTransform)((TMP_Text)this).transform.parent;
				RectTransformEx.SetWidth(val2, preferredValues.x);
				RectTransformEx.DoAutoLayout(val2);
			}
		}
		if (AutoSetHeight)
		{
			RectTransform val3 = (RectTransform)((TMP_Text)this).transform;
			Rect rect = val3.rect;
			Vector2 preferredValues2 = ((TMP_Text)this).GetPreferredValues(((TMP_Text)this).text, ((Rect)(ref rect)).width - (((TMP_Text)this).m_margin.x + ((TMP_Text)this).m_margin.z), float.PositiveInfinity);
			preferredValues2.y = Mathf.Clamp(preferredValues2.y, MinHeight, MaxHeight);
			RectTransformEx.SetHeight(val3, preferredValues2.y);
			RectTransformEx.DoAutoLayout(val3);
			if (AutoSizeParent)
			{
				RectTransform val4 = (RectTransform)((TMP_Text)this).transform.parent;
				RectTransformEx.SetHeight(val4, preferredValues2.y);
				RectTransformEx.DoAutoLayout(val4);
			}
		}
	}

	public override void Rebuild(CanvasUpdate update)
	{
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		if (!((Object)(object)this == (Object)null))
		{
			((TextMeshProUGUI)this).Rebuild(update);
		}
	}

	private string GetLocalizedText(bool englishVersion)
	{
		if (Phrase != null)
		{
			if (localizationArguments != null)
			{
				return string.Format(Phrase.translated, localizationArguments);
			}
			return Phrase.translated;
		}
		string text = (englishVersion ? English : Translate.Get(Token, English));
		if (string.IsNullOrEmpty(text))
		{
			return string.Empty;
		}
		if (localizationArguments != null)
		{
			text = string.Format(text, localizationArguments);
		}
		return text;
	}

	private void UpdateLocalizedText(bool forceEnglish)
	{
		if (IsLocalized)
		{
			string localizedText = GetLocalizedText(forceEnglish);
			((TMP_Text)this).text = FormatLocalizedText(localizedText);
			DoAutoSize();
			FormatAlignment();
		}
	}

	public static void OnLanguageChanged()
	{
		RustText[] array = Resources.FindObjectsOfTypeAll<RustText>();
		for (int i = 0; i < array.Length; i++)
		{
			array[i].UpdateLocalizedText(forceEnglish: false);
		}
	}

	public string FormatLocalizedText(string str, bool force = false)
	{
		if (Translate.CurrentLanguageIsRTL() || force)
		{
			((TMP_Text)this).isRightToLeftText = TextUtils.ContainsRTLInput(str);
			if (((TMP_Text)this).isRightToLeftText)
			{
				inputBuilder.Clear();
				RTLSupport.FixRTL(str, inputBuilder, true, true, true);
				inputBuilder.Reverse();
				str = ((object)inputBuilder).ToString();
				((TMP_Text)this).text = str;
			}
			return str;
		}
		((TMP_Text)this).isRightToLeftText = false;
		return str;
	}

	private void FormatAlignment()
	{
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Invalid comparison between Unknown and I4
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Invalid comparison between Unknown and I4
		if (Translate.CurrentLanguageIsRTL() && TextUtils.ContainsRTLInput(((TMP_Text)this).text))
		{
			if ((((TMP_Text)this).textInfo.lineCount >= 3 && (int)GetHorizontalAlignment() == 1) || (int)GetHorizontalAlignment() == 8)
			{
				SetHorizontalAlignment((_HorizontalAlignmentOptions)4);
				invertedAlignment = true;
			}
		}
		else if (invertedAlignment)
		{
			SetHorizontalAlignment((_HorizontalAlignmentOptions)1);
			invertedAlignment = false;
		}
	}

	public _HorizontalAlignmentOptions GetHorizontalAlignment()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		return (_HorizontalAlignmentOptions)(((TMP_Text)this).alignment & 0x3F);
	}

	public _VerticalAlignmentOptions GetVerticalAligment()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		return (_VerticalAlignmentOptions)(((TMP_Text)this).alignment & 0xFF00);
	}

	public void SetHorizontalAlignment(_HorizontalAlignmentOptions option)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		((TMP_Text)this).alignment = (TextAlignmentOptions)(option | GetVerticalAligment());
	}

	public void SetVerticalAlignment(_VerticalAlignmentOptions option)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		((TMP_Text)this).alignment = (TextAlignmentOptions)(option | GetHorizontalAlignment());
	}
}
