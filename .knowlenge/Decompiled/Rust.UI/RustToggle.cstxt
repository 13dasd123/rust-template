using System;
using System.Collections;
using Rust.UI;
using TMPro;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.EventSystems;
using UnityEngine.UI;

public class RustToggle : RustControl, IPointerDownHandler, IEventSystemHandler
{
	[Serializable]
	public class ChangedEvent : UnityEvent<bool>
	{
	}

	public StyleAsset StyleOff;

	public Image Handle;

	public RustText TextOn;

	public RustText TextOff;

	public bool Value;

	public float SliderWidth = 0.3f;

	public ChangedEvent OnChanged;

	private Coroutine anim;

	public override StyleAsset Styles
	{
		get
		{
			if (!Value)
			{
				return StyleOff;
			}
			return base.Styles;
		}
	}

	public void SetValue(bool value)
	{
		if (value != Value)
		{
			Value = value;
			ApplyStyles();
		}
	}

	public void OnPointerDown(PointerEventData eventData)
	{
		Value = !Value;
		((UnityEvent<bool>)OnChanged)?.Invoke(Value);
		if (anim != null)
		{
			((MonoBehaviour)this).StopCoroutine(anim);
		}
		anim = ((MonoBehaviour)this).StartCoroutine(AnimateTo());
	}

	private IEnumerator AnimateTo()
	{
		Vector2 handleMin = new Vector2(((Graphic)Handle).rectTransform.anchorMin.x, (!Value) ? 0f : (1f - SliderWidth));
		Vector2 handleMax = new Vector2(((Graphic)Handle).rectTransform.anchorMax.x, (!Value) ? SliderWidth : 1f);
		float animTime = 0.15f;
		float time = 0f;
		Image bg = ((Component)this).GetComponent<Image>();
		for (; time < animTime; time += Time.unscaledDeltaTime)
		{
			StyleColorSet currentStyleCollection = CurrentStyleCollection;
			float num = time / animTime;
			((Graphic)TextOn).color = Color.Lerp(((Graphic)TextOn).color, ColorEx.WithAlpha(currentStyleCollection.Fg, (float)(Value ? 1 : 0)), num);
			((Graphic)TextOff).color = Color.Lerp(((Graphic)TextOff).color, ColorEx.WithAlpha(currentStyleCollection.Fg, (float)((!Value) ? 1 : 0)), num);
			((Graphic)Handle).color = Color.Lerp(((Graphic)Handle).color, currentStyleCollection.Fg, num);
			((Graphic)bg).color = Color.Lerp(((Graphic)bg).color, currentStyleCollection.Bg, num);
			Vector2 anchorMax = ((Graphic)Handle).rectTransform.anchorMax;
			anchorMax.x = Mathf.Lerp(handleMax.x, handleMax.y, num * (2f - num));
			((Graphic)Handle).rectTransform.anchorMax = anchorMax;
			Vector2 anchorMin = ((Graphic)Handle).rectTransform.anchorMin;
			anchorMin.x = Mathf.Lerp(handleMin.x, handleMin.y, num * (2f - num));
			((Graphic)Handle).rectTransform.anchorMin = anchorMin;
			yield return null;
		}
		anim = null;
		ApplyStyles();
	}

	public override void ApplyStyles()
	{
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0104: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_014a: Unknown result type (might be due to invalid IL or missing references)
		//IL_015b: Unknown result type (might be due to invalid IL or missing references)
		if (anim == null && !((Object)(object)Styles == (Object)null))
		{
			Vector2 anchorMin = ((Graphic)Handle).rectTransform.anchorMin;
			anchorMin.x = ((!Value) ? 0f : (1f - SliderWidth));
			((Graphic)Handle).rectTransform.anchorMin = anchorMin;
			Vector2 anchorMax = ((Graphic)Handle).rectTransform.anchorMax;
			anchorMax.x = ((!Value) ? SliderWidth : 1f);
			((Graphic)Handle).rectTransform.anchorMax = anchorMax;
			StyleColorSet currentStyleCollection = CurrentStyleCollection;
			((Graphic)((Component)this).GetComponent<Image>()).color = currentStyleCollection.Bg;
			((TMP_Text)TextOn).rectTransform.anchorMax = Vector2Ex.X(((TMP_Text)TextOn).rectTransform.anchorMax, 1f - SliderWidth);
			((TMP_Text)TextOff).rectTransform.anchorMin = Vector2Ex.X(((TMP_Text)TextOn).rectTransform.anchorMin, SliderWidth);
			((Graphic)TextOn).color = ColorEx.WithAlpha(currentStyleCollection.Fg, (float)(Value ? 1 : 0));
			((Graphic)TextOff).color = ColorEx.WithAlpha(currentStyleCollection.Fg, (float)((!Value) ? 1 : 0));
			((Graphic)Handle).color = currentStyleCollection.Fg;
		}
	}
}
