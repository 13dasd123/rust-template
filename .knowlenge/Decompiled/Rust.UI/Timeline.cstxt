using System;
using System.Collections.Generic;
using Rust.UI;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.EventSystems;

[AddComponentMenu("Rust/UI/Timeline")]
public class Timeline : RustControl, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler, IDragHandler
{
	[Serializable]
	public class ScrubEvent : UnityEvent<float>
	{
	}

	public int StartTime;

	public int EndTime;

	public int CurrentPosition;

	public TimeRuler TimeRuler;

	public RectTransform IndicatorCurrent;

	public UnityEvent OnStartScrub;

	public UnityEvent OnEndScrub;

	public ScrubEvent OnScrubToTime;

	public List<TimelineMarker> Markers = new List<TimelineMarker>();

	public TimelineMarker SelectedMarker { get; set; }

	internal void SelectMarker(TimelineMarker marker)
	{
		if ((Object)(object)SelectedMarker == (Object)(object)marker)
		{
			return;
		}
		SelectedMarker = marker;
		foreach (TimelineMarker marker2 in Markers)
		{
			marker2.ApplyStyles();
		}
		TimelineMarker selectedMarker = SelectedMarker;
		if (selectedMarker != null)
		{
			Transform transform = ((Component)selectedMarker).transform;
			if (transform != null)
			{
				transform.SetAsLastSibling();
			}
		}
		RectTransform indicatorCurrent = IndicatorCurrent;
		if (indicatorCurrent != null)
		{
			((Transform)indicatorCurrent).SetAsLastSibling();
		}
	}

	internal void DragMarker(TimelineMarker marker, PointerEventData eventData)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		Vector2 val = default(Vector2);
		if (RectTransformUtility.ScreenPointToLocalPointInRectangle(base.rectTransform, eventData.position, eventData.pressEventCamera, ref val))
		{
			Vector2 val2 = val;
			Rect rect = base.rectTransform.rect;
			val = val2 + ((Rect)(ref rect)).size * base.rectTransform.pivot;
			int time = GetTime(val.x);
			marker.SetTime(time);
			marker.Position(this);
			if ((Object)(object)marker == (Object)(object)SelectedMarker)
			{
				Scrubbed(marker.CurrentPosition);
			}
		}
	}

	internal void DeleteMarker(TimelineMarker timelineMarker)
	{
		Markers.Remove(timelineMarker);
		Object.Destroy((Object)(object)((Component)timelineMarker).gameObject);
	}

	protected override void Awake()
	{
		Markers.Clear();
		Markers.AddRange(((Component)this).GetComponentsInChildren<TimelineMarker>());
		Rebuild();
	}

	public void Rebuild()
	{
		TimeRuler.StartTime = StartTime;
		TimeRuler.EndTime = EndTime;
		TimeRuler.Rebuild();
		foreach (TimelineMarker marker in Markers)
		{
			marker.Position(this);
		}
	}

	public void AddMarker(TimelineMarker marker)
	{
		Markers.Add(marker);
		((UIBehaviour)(object)marker).SetParent((UIBehaviour)(object)this);
		marker.Position(this);
	}

	public void SetCurrentPosition(int pos)
	{
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		CurrentPosition = pos;
		float x = GetX(pos);
		IndicatorCurrent.offsetMin = Vector2Ex.WithX(IndicatorCurrent.offsetMin, x);
		IndicatorCurrent.offsetMax = Vector2Ex.WithX(IndicatorCurrent.offsetMax, x + 1f);
	}

	public float GetX(int time)
	{
		return (float)time / (float)EndTime * base.rectTransform.GetWidth();
	}

	public int GetTime(float x)
	{
		return Mathf.Clamp(Mathf.RoundToInt(x / base.rectTransform.GetWidth() * (float)EndTime), StartTime, EndTime);
	}

	public void OnPointerDown(PointerEventData eventData)
	{
		OnDrag(eventData);
		OnStartScrub.Invoke();
	}

	public void OnPointerUp(PointerEventData eventData)
	{
		OnDrag(eventData);
		OnEndScrub.Invoke();
	}

	public void Scrubbed(int time)
	{
		time = Mathf.Clamp(time, StartTime, EndTime);
		((UnityEvent<float>)OnScrubToTime).Invoke((float)time);
	}

	public void OnDrag(PointerEventData eventData)
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		SelectMarker(null);
		Vector2 val = default(Vector2);
		if (RectTransformUtility.ScreenPointToLocalPointInRectangle(base.rectTransform, eventData.position, eventData.pressEventCamera, ref val))
		{
			Vector2 val2 = val;
			Rect rect = base.rectTransform.rect;
			val = val2 + ((Rect)(ref rect)).size * base.rectTransform.pivot;
			Scrubbed(GetTime(val.x));
		}
	}
}
