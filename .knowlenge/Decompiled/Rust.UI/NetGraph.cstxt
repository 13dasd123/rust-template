using System.Collections.Generic;
using System.Linq;
using Network;
using Rust.UI.Debug;
using UnityEngine;

public class NetGraph : SingletonComponent<NetGraph>
{
	public CanvasGroup group;

	private NetGraphRow[] rows;

	public bool Enabled
	{
		set
		{
			group.alpha = (value ? 1 : 0);
		}
	}

	public void Start()
	{
		rows = GetComponentsInChildren<NetGraphRow>(includeInactive: true);
		Object.DontDestroyOnLoad(base.gameObject);
	}

	public void UpdateFrom(Stats incomingStats)
	{
		for (int i = 0; i < rows.Length; i++)
		{
			rows[i].Hide();
		}
		int num = 0;
		foreach (KeyValuePair<string, Stats.Node> item in incomingStats.Previous.Children.OrderByDescending((KeyValuePair<string, Stats.Node> y) => y.Value.Bytes))
		{
			if (num >= rows.Length)
			{
				break;
			}
			rows[num].UpdateFrom(item);
			num++;
		}
	}
}
