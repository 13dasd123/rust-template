using System;
using System.Collections.Generic;
using System.Linq;
using Facepunch.Extend;
using Rust.UI;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.EventSystems;
using UnityEngine.UI;

public class Menu : RustControl
{
	[Serializable]
	public class ChangedEvent : UnityEvent<Option>
	{
	}

	public bool AllowFiltering;

	public int MaxResults = 100;

	public Image Border;

	public Image Background;

	public Option[] Options;

	public RectTransform OptionCanvas;

	public RustInput FilterField;

	[NonSerialized]
	public Option SelectedOption;

	public ChangedEvent OnSelected;

	[NonSerialized]
	public Blocker Blocker;

	protected override void Awake()
	{
		((UIBehaviour)this).Awake();
		((UnityEvent<string>)FilterField.OnValueChanged).AddListener((UnityAction<string>)delegate
		{
			Build();
		});
	}

	public void Build()
	{
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Expected O, but got Unknown
		((Component)((Component)FilterField).transform.parent).gameObject.SetActive(AllowFiltering);
		TransformEx.DestroyAllChildren((Transform)(object)OptionCanvas, true);
		foreach (Option option in GetOptions())
		{
			RustButton rustButton = Make.MenuOption(option.Label, option.Icon);
			((UIBehaviour)(object)rustButton).SetParent((Transform)(object)OptionCanvas);
			((Object)((Component)rustButton).gameObject).hideFlags = (HideFlags)61;
			rustButton.OnPressed.AddListener((UnityAction)delegate
			{
				OnOptionSelected(option);
			});
			if (!string.IsNullOrEmpty(SelectedOption.Value) && option.Value == SelectedOption.Value)
			{
				rustButton.SetPressed(value: true);
			}
		}
	}

	private void OnOptionSelected(Option option)
	{
		((UnityEvent<Option>)OnSelected).Invoke(option);
		Object.Destroy((Object)(object)((Component)this).gameObject);
		if (Object.op_Implicit((Object)(object)Blocker))
		{
			Object.Destroy((Object)(object)((Component)Blocker).gameObject);
		}
	}

	private IEnumerable<Option> GetOptions()
	{
		if (!AllowFiltering)
		{
			return Options.Select((Option x) => x);
		}
		string searchString = FilterField.Text;
		return Options.Where((Option x) => string.IsNullOrEmpty(searchString) || x.Label.translated.Contains(searchString)).Take(MaxResults);
	}

	internal void Popup(RectTransform source)
	{
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		//IL_0181: Unknown result type (might be due to invalid IL or missing references)
		//IL_0186: Unknown result type (might be due to invalid IL or missing references)
		//IL_0196: Unknown result type (might be due to invalid IL or missing references)
		//IL_019b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_013f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0144: Unknown result type (might be due to invalid IL or missing references)
		Blocker = Make.Blocker();
		((UIBehaviour)(object)Blocker).SetParentRootCanvas((Transform)(object)source);
		Blocker.rectTransform.Fill(-1f, -1f, -1f, -1f);
		float x = ((Component)Blocker).transform.lossyScale.x;
		((UIBehaviour)(object)this).SetParent((UIBehaviour)(object)Blocker);
		Build();
		((Component)OptionCanvas).GetComponent<RustLayout>().DoLayout();
		((Component)this).GetComponent<RustLayout>().DoLayout();
		Vector3[] array = (Vector3[])(object)new Vector3[4];
		source.GetLocalCorners(array);
		for (int i = 0; i < array.Length; i++)
		{
			array[i] = ((Transform)source).TransformPoint(array[i]);
		}
		if (array[0].y / (float)Screen.height < 0.33f)
		{
			base.rectTransform.pivot = new Vector2(0f, 0f);
			base.rectTransform.anchorMin = Vector2.op_Implicit(Vector3.zero);
			base.rectTransform.anchorMax = Vector2.op_Implicit(Vector3.zero);
			base.rectTransform.offsetMin = Vector2.op_Implicit(array[1] / x);
			base.rectTransform.offsetMax = Vector2.op_Implicit(array[1] / x);
			base.rectTransform.SetWidth(source.GetWidth());
		}
		else
		{
			base.rectTransform.pivot = new Vector2(0f, 1f);
			base.rectTransform.anchorMin = Vector2.op_Implicit(Vector3.zero);
			base.rectTransform.anchorMax = Vector2.op_Implicit(Vector3.zero);
			base.rectTransform.offsetMin = Vector2.op_Implicit(array[0] / x);
			base.rectTransform.offsetMax = Vector2.op_Implicit(array[0] / x);
			base.rectTransform.SetWidth(source.GetWidth());
			RestrainToScreen();
		}
	}

	private void RestrainToScreen()
	{
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		((Component)OptionCanvas).GetComponent<RustLayout>().DoLayout();
		((Component)this).GetComponent<RustLayout>().DoLayout();
		int num = 4;
		if (base.rectTransform.offsetMin.y < (float)num)
		{
			float amount = Mathf.Abs(base.rectTransform.offsetMin.y) + (float)num;
			base.rectTransform.MoveY(amount);
		}
		if (base.rectTransform.offsetMin.y > (float)(Screen.height - 4))
		{
			float num2 = Mathf.Abs((float)Screen.height - base.rectTransform.offsetMin.y) + (float)num;
			base.rectTransform.MoveY(0f - num2);
		}
	}

	protected override void ApplyStyle(StyleColorSet s)
	{
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		base.ApplyStyle(s);
		if (Object.op_Implicit((Object)(object)Background))
		{
			((Graphic)Background).color = s.Bg;
		}
		if (Object.op_Implicit((Object)(object)Border))
		{
			((Graphic)Border).color = s.Fg;
		}
	}
}
