using System;
using Rust.UI;
using TMPro;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.EventSystems;
using UnityEngine.UI;

public class RustOption : RustControl
{
	[Serializable]
	public class ChangedEvent : UnityEvent<Option>
	{
	}

	public RustButton Left;

	public RustButton Right;

	public RustText Text;

	public Option[] Options;

	private int CurrentOption;

	public ChangedEvent OnChanged;

	public Option Value => Options[CurrentOption];

	protected override void Awake()
	{
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Expected O, but got Unknown
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Expected O, but got Unknown
		((UIBehaviour)this).Awake();
		Left.OnPressed.AddListener(new UnityAction(OnLeft));
		Right.OnPressed.AddListener(new UnityAction(OnRight));
	}

	public void SetOptions(Option[] options)
	{
		Options = options;
		SetOptionDefault();
	}

	public void SetOption(int i)
	{
		i += Options.Length;
		i %= Options.Length;
		CurrentOption = i;
		((TMP_Text)Text).text = Options[i].Label.translated;
	}

	public void SetOptionDefault()
	{
		if (Options == null || Options.Length == 0)
		{
			return;
		}
		for (int i = 0; i < Options.Length; i++)
		{
			if (Options[i].Default)
			{
				SetOption(i);
				return;
			}
		}
		SetOption(0);
	}

	public void OnLeft()
	{
		SetOption(CurrentOption - 1);
		((UnityEvent<Option>)OnChanged)?.Invoke(Value);
	}

	public void OnRight()
	{
		SetOption(CurrentOption + 1);
		((UnityEvent<Option>)OnChanged)?.Invoke(Value);
	}

	protected override void ApplyStyle(StyleColorSet s)
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		if (Object.op_Implicit((Object)(object)Text))
		{
			((Graphic)Text).color = s.Fg;
		}
		Image component = ((Component)this).GetComponent<Image>();
		if (Object.op_Implicit((Object)(object)component))
		{
			((Graphic)component).color = s.Bg;
		}
	}
}
