using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Newtonsoft.Json.Linq;
using Rust.UI;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.EventSystems;

public class Properties
{
	private object Parent;

	private RectTransform Canvas;

	public List<FieldInfo> Fields = new List<FieldInfo>();

	public bool IsDirty { get; set; }

	public event Action UpdateControlsFromValues;

	public Properties(object Parent, RectTransform Canvas)
	{
		this.Parent = Parent;
		this.Canvas = Canvas;
	}

	public void CreateControls()
	{
		FieldInfo[] fields = Parent.GetType().GetFields(BindingFlags.Instance | BindingFlags.Public | BindingFlags.FlattenHierarchy);
		foreach (FieldInfo f in fields)
		{
			CreateControl(f);
		}
	}

	private void AddControl(RustControl ctrl, LabelAttribute label)
	{
		if (label != null)
		{
			RustWrapper rustWrapper = Make.Form.Horizontal(label.Phrase, (UIBehaviour)(object)ctrl);
			((Object)((Component)rustWrapper).gameObject).name = ((Object)((Component)ctrl).gameObject).name;
			((UIBehaviour)(object)rustWrapper).SetParent((Transform)(object)Canvas);
		}
		else
		{
			((UIBehaviour)(object)ctrl).SetParent((Transform)(object)Canvas);
		}
	}

	private bool CreateControl(FieldInfo f)
	{
		if (f.FieldType == typeof(float) || f.FieldType == typeof(int))
		{
			return CreateNumericControl(f);
		}
		if (f.FieldType == typeof(string))
		{
			return CreateStringControl(f);
		}
		if (f.FieldType == typeof(bool))
		{
			return CreateBooleanControl(f);
		}
		CreateReadOnlyControl(f);
		return false;
	}

	private bool CreateReadOnlyControl(FieldInfo f)
	{
		string name = f.Name;
		_ = f.FieldType == typeof(float);
		_ = f.FieldType == typeof(int);
		LabelAttribute customAttribute = f.GetCustomAttribute<LabelAttribute>();
		RustInput ctrl = Make.Input();
		((Object)((Component)ctrl).gameObject).name = name;
		ctrl.Text = $"{f.GetValue(Parent)}";
		AddControl(ctrl, customAttribute);
		UpdateControlsFromValues += delegate
		{
			ctrl.Text = $"{f.GetValue(Parent)}";
		};
		Fields.Add(f);
		return true;
	}

	private bool CreateStringControl(FieldInfo f)
	{
		string name = f.Name;
		LabelAttribute customAttribute = f.GetCustomAttribute<LabelAttribute>();
		ButtonGroupAttribute? customAttribute2 = f.GetCustomAttribute<ButtonGroupAttribute>();
		Option[] array = (from x in f.GetCustomAttributes<OptionAttribute>()
			select x.GetOption()).ToArray();
		if (customAttribute2 != null && array.Length != 0)
		{
			RustButtonGroup ctrl = Make.ButtonGroup(array, "FullWidth");
			((Object)((Component)ctrl).gameObject).name = name;
			((UnityEvent<Option>)ctrl.OnChanged).AddListener((UnityAction<Option>)delegate(Option x)
			{
				f.SetValue(Parent, x.Value);
				MarkDirty();
			});
			AddControl(ctrl, customAttribute);
			UpdateControlsFromValues += delegate
			{
				ctrl.SetOption((string)f.GetValue(Parent));
			};
			Fields.Add(f);
			return true;
		}
		return true;
	}

	private bool CreateBooleanControl(FieldInfo f)
	{
		string name = f.Name;
		LabelAttribute customAttribute = f.GetCustomAttribute<LabelAttribute>();
		RustToggle ctrl = Make.ToggleOnOff();
		((Object)((Component)ctrl).gameObject).name = name;
		((UnityEvent<bool>)ctrl.OnChanged).AddListener((UnityAction<bool>)delegate(bool x)
		{
			f.SetValue(Parent, x);
			MarkDirty();
		});
		ctrl.SetValue((bool)f.GetValue(Parent));
		AddControl(ctrl, customAttribute);
		UpdateControlsFromValues += delegate
		{
			ctrl.SetValue((bool)f.GetValue(Parent));
		};
		Fields.Add(f);
		return true;
	}

	private bool CreateNumericControl(FieldInfo f)
	{
		string name = f.Name;
		_ = f.FieldType == typeof(float);
		_ = f.FieldType == typeof(int);
		LabelAttribute customAttribute = f.GetCustomAttribute<LabelAttribute>();
		RangeAttribute customAttribute2 = ((MemberInfo)f).GetCustomAttribute<RangeAttribute>();
		if (customAttribute2 != null)
		{
			RustSlider ctrl = Make.Slider(customAttribute2.min, customAttribute2.max, 0.5f);
			((Object)((Component)ctrl).gameObject).name = name;
			((UnityEvent<float>)ctrl.OnChanged).AddListener((UnityAction<float>)delegate(float x)
			{
				f.SetValue(Parent, x);
				MarkDirty();
			});
			ctrl.Value = (float)f.GetValue(Parent);
			AddControl(ctrl, customAttribute);
			UpdateControlsFromValues += delegate
			{
				ctrl.Value = (float)f.GetValue(Parent);
			};
			Fields.Add(f);
			return true;
		}
		return CreateReadOnlyControl(f);
	}

	public void SyncControls()
	{
		this.UpdateControlsFromValues?.Invoke();
	}

	public Dictionary<string, object> GetValues()
	{
		Dictionary<string, object> dictionary = new Dictionary<string, object>();
		foreach (FieldInfo field in Fields)
		{
			dictionary.Add(field.Name, field.GetValue(Parent));
		}
		return dictionary;
	}

	public void SetValues(Dictionary<string, object> d)
	{
		foreach (FieldInfo field in Fields)
		{
			if (d.TryGetValue(field.Name, out var value))
			{
				field.SetValue(Parent, value);
			}
		}
	}

	public void SetValues(Dictionary<string, object> a, Dictionary<string, object> b, float delta)
	{
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		foreach (FieldInfo field in Fields)
		{
			if (!a.TryGetValue(field.Name, out var value) || !b.TryGetValue(field.Name, out var value2))
			{
				continue;
			}
			if (field.FieldType == typeof(float))
			{
				float num = Mathf.Lerp((float)value, (float)value2, delta);
				field.SetValue(Parent, num);
			}
			else if (field.FieldType == typeof(Vector3))
			{
				if (field.Name.StartsWith("Rot"))
				{
					Quaternion val = Quaternion.Lerp(Quaternion.Euler((Vector3)value), Quaternion.Euler((Vector3)value2), delta);
					field.SetValue(Parent, ((Quaternion)(ref val)).eulerAngles);
				}
				else
				{
					Vector3 val2 = Vector3.Lerp((Vector3)value, (Vector3)value2, delta);
					field.SetValue(Parent, val2);
				}
			}
			else
			{
				field.SetValue(Parent, value);
			}
		}
	}

	private void MarkDirty()
	{
		IsDirty = true;
	}

	public void Load(JProperty entry)
	{
		JToken value = entry.Value;
		JObject val = (JObject)(object)((value is JObject) ? value : null);
		JToken val2 = default(JToken);
		foreach (FieldInfo field in Fields)
		{
			if (val.TryGetValue(field.Name, ref val2))
			{
				field.SetValue(Parent, val2.ToObject(field.FieldType));
			}
		}
	}
}
