using System;
using Facepunch;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.Video;

[RequireComponent(typeof(CoverImage), typeof(VideoPlayer))]
public class CoverVideo : MonoBehaviour
{
	public string Url;

	[Min(0f)]
	public float FadeIn = 0.5f;

	public Graphic Fallback;

	private CoverImage _cover;

	private VideoPlayer _player;

	private CanvasRenderer _fallbackGraphic;

	public void OnEnable()
	{
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Expected O, but got Unknown
		_cover = ((Component)this).GetComponent<CoverImage>();
		_player = ((Component)this).GetComponent<VideoPlayer>();
		CanvasRenderer val = default(CanvasRenderer);
		if ((Object)(object)Fallback != (Object)null && ((Component)Fallback).TryGetComponent<CanvasRenderer>(ref val))
		{
			val.SetAlpha(1f);
		}
		CanvasRenderer val2 = default(CanvasRenderer);
		if (((Component)this).TryGetComponent<CanvasRenderer>(ref val2))
		{
			val2.SetAlpha(0f);
		}
		if ((Object)(object)_cover != (Object)null && (Object)(object)_player != (Object)null && !string.IsNullOrWhiteSpace(Url))
		{
			((Graphic)_cover).color = Color.white;
			_player.renderMode = (VideoRenderMode)4;
			_player.prepareCompleted += new EventHandler(PlayerPrepareCompleted);
			Play(Url);
		}
	}

	public void OnDisable()
	{
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Expected O, but got Unknown
		if ((Object)(object)_cover != (Object)null)
		{
			_cover.texture = null;
		}
		if ((Object)(object)_player != (Object)null)
		{
			_player.prepareCompleted -= new EventHandler(PlayerPrepareCompleted);
			_player.Stop();
		}
	}

	private async void Play(string url)
	{
		try
		{
			string text = await WebUtil.DownloadFileTemp(url, true);
			if (!string.IsNullOrEmpty(text))
			{
				_player.Stop();
				_player.url = text;
				_player.Play();
			}
		}
		catch (Exception ex)
		{
			Debug.LogWarning((object)ex);
		}
	}

	private void PlayerPrepareCompleted(VideoPlayer source)
	{
		if (!((Object)(object)_cover == (Object)null) && !((Object)(object)_player == (Object)null))
		{
			_cover.texture = _player.texture;
			((Graphic)_cover).CrossFadeAlpha(1f, FadeIn, false);
			if ((Object)(object)Fallback != (Object)null)
			{
				Fallback.CrossFadeAlpha(0f, FadeIn, false);
			}
		}
	}
}
