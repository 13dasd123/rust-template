using Rust.UI;
using TMPro;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.EventSystems;
using UnityEngine.UI;

[AddComponentMenu("Rust/UI/Button")]
public class RustButton : RustControl, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler, ILayoutElement
{
	public Image Background;

	public RustText Text;

	public RustText SubText;

	public RustIcon Icon;

	public Image IconImage;

	public UnityEvent OnPressed;

	public UnityEvent OnReleased;

	public bool IsToggle;

	public bool UnpressSiblings;

	public bool PreventToggleOff;

	public Transform TabPanelTarget;

	public Vector4 TextMargin = new Vector4(30f, 5f, 10f, 5f);

	public Vector4 TextMarginNoIcon = new Vector4(10f, 5f, 10f, 5f);

	public bool Value
	{
		get
		{
			return IsPressed;
		}
		set
		{
			if (value != Value)
			{
				if (value)
				{
					CurrentState |= State.Pressed;
				}
				else
				{
					CurrentState &= ~State.Pressed;
				}
				ApplyStyles();
			}
		}
	}

	public bool AutoSize
	{
		get
		{
			return Text.AutoSizeParent;
		}
		set
		{
			Text.AutoSizeParent = value;
		}
	}

	public float minWidth
	{
		get
		{
			//IL_001e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			if (!Object.op_Implicit((Object)(object)Text))
			{
				return 0f;
			}
			Rect rect = ((TMP_Text)Text).rectTransform.rect;
			return ((Rect)(ref rect)).width;
		}
	}

	public float preferredWidth
	{
		get
		{
			//IL_001e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			if (!Object.op_Implicit((Object)(object)Text))
			{
				return 0f;
			}
			Rect rect = ((TMP_Text)Text).rectTransform.rect;
			return ((Rect)(ref rect)).width;
		}
	}

	public float flexibleWidth
	{
		get
		{
			//IL_001e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			if (!Object.op_Implicit((Object)(object)Text))
			{
				return 0f;
			}
			Rect rect = ((TMP_Text)Text).rectTransform.rect;
			return ((Rect)(ref rect)).width;
		}
	}

	public float minHeight
	{
		get
		{
			if (!Object.op_Implicit((Object)(object)Text))
			{
				return 0f;
			}
			return ((TMP_Text)Text).minHeight;
		}
	}

	public float preferredHeight
	{
		get
		{
			if (!Object.op_Implicit((Object)(object)Text))
			{
				return 0f;
			}
			return ((TMP_Text)Text).preferredHeight;
		}
	}

	public float flexibleHeight
	{
		get
		{
			if (!Object.op_Implicit((Object)(object)Text))
			{
				return 0f;
			}
			return ((TMP_Text)Text).flexibleHeight;
		}
	}

	public int layoutPriority
	{
		get
		{
			if (!Object.op_Implicit((Object)(object)Text))
			{
				return 0;
			}
			return ((TMP_Text)Text).layoutPriority;
		}
	}

	public void Press()
	{
		if (IsDisabled)
		{
			return;
		}
		if (IsToggle)
		{
			if (!PreventToggleOff || !Value)
			{
				Toggle(!Value);
			}
		}
		else
		{
			Toggle(v: true, forced: true);
		}
	}

	public void Unpress()
	{
		if (!IsDisabled)
		{
			if (!IsToggle)
			{
				Toggle(v: false, forced: true);
			}
			ApplyStyles();
		}
	}

	public virtual void OnPointerDown(PointerEventData eventData)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		if ((int)eventData.button == 0)
		{
			Press();
		}
	}

	public void SetToggleTrue()
	{
		Toggle(v: true);
	}

	public void SetToggleFalse()
	{
		Toggle(v: false);
	}

	public void Toggle(bool v, bool forced = false)
	{
		if (v)
		{
			if (UnpressSiblings)
			{
				DoUnpressSiblings();
			}
			if (Value && !forced)
			{
				return;
			}
			CurrentState |= State.Pressed;
			OnPressed.Invoke();
			ToggleTabPanel(onOff: true);
		}
		else
		{
			if (!Value && !forced)
			{
				return;
			}
			CurrentState &= ~State.Pressed;
			OnReleased.Invoke();
			ToggleTabPanel(onOff: false);
		}
		ApplyStyles();
	}

	private void ToggleTabPanel(bool onOff)
	{
		if (!((Object)(object)TabPanelTarget == (Object)null))
		{
			Transform val = TabPanelTarget.Find(((Object)((Component)this).gameObject).name);
			if (!((Object)(object)val == (Object)null))
			{
				((Component)val).gameObject.SetActive(onOff);
			}
		}
	}

	private void DoUnpressSiblings()
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Expected O, but got Unknown
		foreach (Transform item in ((Component)this).transform.parent)
		{
			Transform val = item;
			if (!((Object)(object)val == (Object)(object)((Component)this).transform))
			{
				RustButton component = ((Component)val).GetComponent<RustButton>();
				if (!((Object)(object)component == (Object)null))
				{
					component.Toggle(v: false);
				}
			}
		}
	}

	public virtual void OnPointerUp(PointerEventData eventData)
	{
		Unpress();
	}

	protected override void OnDisable()
	{
		((UIBehaviour)this).OnDisable();
		if (!IsToggle && Value)
		{
			CurrentState &= ~State.Pressed;
			ApplyStyles();
		}
		if (!IsToggle && CurrentState.HasFlag(State.Hovered))
		{
			CurrentState &= ~State.Hovered;
			ApplyStyles();
		}
	}

	protected override void ApplyStyle(StyleColorSet s)
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00de: Unknown result type (might be due to invalid IL or missing references)
		//IL_00eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_013d: Unknown result type (might be due to invalid IL or missing references)
		if (Object.op_Implicit((Object)(object)Background))
		{
			((Graphic)Background).color = s.Bg;
		}
		if (Object.op_Implicit((Object)(object)Text))
		{
			((Graphic)Text).color = s.Fg;
		}
		if (Object.op_Implicit((Object)(object)SubText))
		{
			((Graphic)SubText).color = Color.Lerp(s.Bg, s.Fg, 0.5f);
		}
		if (Object.op_Implicit((Object)(object)Icon))
		{
			((Graphic)Icon).color = s.Icon;
		}
		if (Object.op_Implicit((Object)(object)IconImage))
		{
			((Graphic)IconImage).color = s.Icon;
		}
		if (Object.op_Implicit((Object)(object)Text))
		{
			Vector4 val = (((!Object.op_Implicit((Object)(object)Icon) || Icon.Icon == Icons.None) && !Object.op_Implicit((Object)(object)IconImage)) ? TextMarginNoIcon : TextMargin);
			if (((TMP_Text)Text).margin != val)
			{
				((TMP_Text)Text).margin = val;
				Text.DoAutoSize();
			}
			if ((Object)(object)SubText != (Object)null && ((TMP_Text)SubText).margin != val)
			{
				((TMP_Text)SubText).margin = val;
				SubText.DoAutoSize();
			}
		}
	}

	public void CalculateLayoutInputHorizontal()
	{
		RustText text = Text;
		if (text != null)
		{
			((TextMeshProUGUI)text).CalculateLayoutInputHorizontal();
		}
	}

	public void CalculateLayoutInputVertical()
	{
		RustText text = Text;
		if (text != null)
		{
			((TextMeshProUGUI)text).CalculateLayoutInputVertical();
		}
	}
}
