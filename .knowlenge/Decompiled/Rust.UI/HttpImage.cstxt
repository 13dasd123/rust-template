using System.Collections;
using System.Collections.Generic;
using Rust;
using UnityEngine;
using UnityEngine.Networking;
using UnityEngine.UI;

public class HttpImage : MonoBehaviour
{
	public static Dictionary<string, UnityWebRequest> RequestCache = new Dictionary<string, UnityWebRequest>();

	public static Dictionary<string, (Texture2D, Sprite)> TextureCache = new Dictionary<string, (Texture2D, Sprite)>();

	public Texture2D LoadingImage;

	public Texture2D MissingImage;

	public string Url = "";

	public bool AutosizeHeight;

	[Tooltip("Fill the RectTransform with the image without skewing when rendering in a RawImage and AutosizeHeight is disabled.")]
	public bool UseCoverFill;

	public bool GenerateMipmaps = true;

	public float MaxWidth;

	public float MaxHeight;

	public bool AllowDisablingImage = true;

	public RawImage rawImage;

	private Image image;

	private Sprite loadingSprite;

	private Sprite missingSprite;

	private bool didLoad;

	private void Init()
	{
		rawImage = ((Component)this).GetComponent<RawImage>();
		image = ((Component)this).GetComponent<Image>();
		if ((Object)(object)LoadingImage != (Object)null)
		{
			loadingSprite = CreateSprite(LoadingImage);
		}
		if ((Object)(object)MissingImage != (Object)null)
		{
			missingSprite = CreateSprite(MissingImage);
		}
		SetImageEnabled(enabled: false);
	}

	private void Start()
	{
		if (!didLoad)
		{
			Init();
			if (Url != string.Empty)
			{
				string url = Url;
				Url = string.Empty;
				Load(url);
			}
		}
	}

	private void OnDestroy()
	{
		if ((Object)(object)loadingSprite != (Object)null)
		{
			Object.Destroy((Object)(object)loadingSprite);
		}
		if ((Object)(object)missingSprite != (Object)null)
		{
			Object.Destroy((Object)(object)missingSprite);
		}
	}

	public bool Load(string url)
	{
		if (string.IsNullOrEmpty(url))
		{
			return false;
		}
		if (Url == url)
		{
			return false;
		}
		if ((Object)(object)rawImage == (Object)null && (Object)(object)image == (Object)null)
		{
			Init();
		}
		SetLoadingImage();
		Url = url;
		didLoad = true;
		if (TextureCache.TryGetValue(url, out var value))
		{
			UpdateImageTexture(value);
			return false;
		}
		if (RequestCache.ContainsKey(url))
		{
			SetImageEnabled(enabled: false);
			((MonoBehaviour)Global.Runner).StartCoroutine(WaitForLoad(url));
			return false;
		}
		SetImageEnabled(enabled: false);
		((MonoBehaviour)Global.Runner).StartCoroutine(StartAndWaitForLoad(url));
		return true;
	}

	public void Load(Sprite sprite)
	{
		if ((Object)(object)rawImage == (Object)null && (Object)(object)image == (Object)null)
		{
			Init();
		}
		Url = null;
		didLoad = true;
		UpdateImageTexture((sprite.texture, sprite));
	}

	private IEnumerator WaitForLoad(string url)
	{
		while (!TextureCache.ContainsKey(url) && url == Url)
		{
			yield return null;
		}
		if (Object.op_Implicit((Object)(object)this) && url == Url && ((Object)(object)rawImage != (Object)null || (Object)(object)image != (Object)null))
		{
			UpdateImageTexture(TextureCache[url]);
		}
	}

	private void UpdateImageTexture((Texture2D, Sprite) tex)
	{
		if (!((Object)(object)tex.Item1 == (Object)null) && !((Object)(object)tex.Item2 == (Object)null) && Object.op_Implicit((Object)(object)this) && ((Object)(object)rawImage != (Object)null || (Object)(object)image != (Object)null))
		{
			if ((Object)(object)rawImage != (Object)null)
			{
				rawImage.texture = (Texture)(object)tex.Item1;
			}
			if ((Object)(object)image != (Object)null)
			{
				image.sprite = tex.Item2;
			}
			SetImageEnabled(enabled: true);
			AutosizeForTexture(tex.Item1);
		}
	}

	public void SetMissingImage()
	{
		UpdateImageTexture((MissingImage, missingSprite));
		Url = "";
	}

	public void SetLoadingImage()
	{
		UpdateImageTexture((LoadingImage, loadingSprite));
		Url = "";
	}

	private IEnumerator StartAndWaitForLoad(string url)
	{
		UnityWebRequest request = new UnityWebRequest(url);
		request.downloadHandler = (DownloadHandler)new DownloadHandlerBuffer();
		RequestCache.Add(url, request);
		yield return request.SendWebRequest();
		RequestCache.Remove(url);
		Texture2D val = null;
		if (request.isDone && !request.isHttpError && !request.isNetworkError)
		{
			val = (GenerateMipmaps ? new Texture2D(16, 16) : new Texture2D(16, 16, (TextureFormat)5, false));
			((Object)val).name = url;
			((Texture)val).wrapMode = (TextureWrapMode)1;
			if (!ImageConversion.LoadImage(val, request.downloadHandler.data, true))
			{
				Object.DestroyImmediate((Object)(object)val);
				val = null;
			}
			else if ((MaxWidth > 0f && (float)((Texture)val).width > MaxWidth) || (MaxHeight > 0f && (float)((Texture)val).height > MaxHeight))
			{
				Debug.Log((object)("Texture from " + url + " was too big, ignoring"));
				Object.DestroyImmediate((Object)(object)val);
				val = null;
			}
		}
		if ((Object)(object)val == (Object)null)
		{
			if ((Object)(object)MissingImage != (Object)null)
			{
				val = MissingImage;
			}
			if ((Object)(object)val == (Object)null)
			{
				val = Texture2D.blackTexture;
			}
		}
		Sprite item = CreateSprite(val);
		(Texture2D, Sprite) tuple = (val, item);
		TextureCache.Add(url, tuple);
		request.Dispose();
		if (Object.op_Implicit((Object)(object)this) && url == Url && ((Object)(object)rawImage != (Object)null || (Object)(object)image != (Object)null))
		{
			UpdateImageTexture(tuple);
			AutosizeForTexture(val);
		}
	}

	private void AutosizeForTexture(Texture2D texture)
	{
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00af: Unknown result type (might be due to invalid IL or missing references)
		if (AutosizeHeight)
		{
			float num = (float)((Texture)texture).width / (float)((Texture)texture).height;
			if ((Object)(object)rawImage != (Object)null)
			{
				((Graphic)rawImage).rectTransform.sizeDelta = new Vector2(((Graphic)rawImage).rectTransform.sizeDelta.x, ((Graphic)rawImage).rectTransform.sizeDelta.x / num);
			}
			if ((Object)(object)image != (Object)null)
			{
				((Graphic)image).rectTransform.sizeDelta = new Vector2(((Graphic)image).rectTransform.sizeDelta.x, ((Graphic)image).rectTransform.sizeDelta.x / num);
			}
			SetImageEnabled(enabled: true);
		}
		UpdateCoverFill();
	}

	private void UpdateCoverFill()
	{
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
		if (UseCoverFill && !((Object)(object)rawImage == (Object)null))
		{
			Texture texture = rawImage.texture;
			Rect uvRect = ((Graphic)rawImage).GetPixelAdjustedRect();
			Vector2 size = ((Rect)(ref uvRect)).size;
			Vector2 val = default(Vector2);
			((Vector2)(ref val))..ctor((float)texture.width, (float)texture.height);
			float num = size.x / size.y;
			float num2 = val.x / val.y;
			float num3 = ((num >= num2) ? (size.x / val.x) : (size.y / val.y));
			float num4 = val.x * num3;
			float num5 = val.y * num3;
			RawImage obj = rawImage;
			uvRect = default(Rect);
			((Rect)(ref uvRect)).x = (num4 - size.x) / 2f / num4;
			((Rect)(ref uvRect)).y = (num5 - size.y) / 2f / num5;
			((Rect)(ref uvRect)).width = size.x / num4;
			((Rect)(ref uvRect)).height = size.y / num5;
			obj.uvRect = uvRect;
		}
	}

	private void SetImageEnabled(bool enabled)
	{
		if (AllowDisablingImage)
		{
			if ((Object)(object)rawImage != (Object)null)
			{
				((Behaviour)rawImage).enabled = enabled;
			}
			if ((Object)(object)image != (Object)null)
			{
				((Behaviour)image).enabled = enabled;
			}
		}
	}

	private void OnRectTransformDimensionsChange()
	{
		UpdateCoverFill();
	}

	private static Sprite CreateSprite(Texture2D texture)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		return Sprite.Create(texture, new Rect(Vector2.zero, new Vector2((float)((Texture)texture).width, (float)((Texture)texture).height)), new Vector2(0.5f, 0.5f));
	}
}
