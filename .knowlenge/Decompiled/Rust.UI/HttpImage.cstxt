using System.Collections;
using System.Collections.Generic;
using Rust;
using UnityEngine;
using UnityEngine.Networking;
using UnityEngine.UI;

[RequireComponent(typeof(RawImage))]
public class HttpImage : MonoBehaviour
{
	public static Dictionary<string, UnityWebRequest> RequestCache = new Dictionary<string, UnityWebRequest>();

	public static Dictionary<string, Texture2D> TextureCache = new Dictionary<string, Texture2D>();

	public Texture2D LoadingImage;

	public Texture2D MissingImage;

	private RawImage image;

	public string Url = "";

	public bool PreserveAspectHeight;

	public float MaxWidth;

	public float MaxHeight;

	private void Init()
	{
		image = GetComponent<RawImage>();
		image.enabled = false;
	}

	private void OnEnable()
	{
		Init();
		if (Url != string.Empty)
		{
			string url = Url;
			Url = string.Empty;
			Load(url);
		}
	}

	public bool Load(string url)
	{
		if (string.IsNullOrEmpty(url))
		{
			return false;
		}
		if (Url == url)
		{
			return false;
		}
		if (image == null)
		{
			Init();
		}
		UpdateImageTexture(LoadingImage);
		Url = url;
		if (TextureCache.ContainsKey(url))
		{
			image.texture = TextureCache[url];
			image.enabled = true;
			return false;
		}
		if (!base.isActiveAndEnabled)
		{
			return false;
		}
		if (RequestCache.ContainsKey(url))
		{
			image.enabled = false;
			Global.Runner.StartCoroutine(WaitForLoad(url));
			return false;
		}
		image.enabled = false;
		Global.Runner.StartCoroutine(StartAndWaitForLoad(url));
		return true;
	}

	private IEnumerator WaitForLoad(string url)
	{
		while (!TextureCache.ContainsKey(url))
		{
			yield return null;
		}
		if ((bool)this && (bool)image)
		{
			UpdateImageTexture(TextureCache[url]);
		}
	}

	private void UpdateImageTexture(Texture2D tex)
	{
		if (!(tex == null) && (bool)this && (bool)image)
		{
			image.texture = tex;
			image.enabled = true;
		}
	}

	public void SetMissingImage()
	{
		UpdateImageTexture(MissingImage);
		Url = "";
	}

	public void SetLoadingImage()
	{
		UpdateImageTexture(LoadingImage);
		Url = "";
	}

	private IEnumerator StartAndWaitForLoad(string url)
	{
		UnityWebRequest request = new UnityWebRequest(url)
		{
			downloadHandler = new DownloadHandlerBuffer()
		};
		RequestCache.Add(url, request);
		yield return request.SendWebRequest();
		RequestCache.Remove(url);
		Texture2D texture2D = null;
		if (request.isDone && !request.isHttpError && !request.isNetworkError)
		{
			texture2D = new Texture2D(16, 16);
			texture2D.name = url;
			if (!texture2D.LoadImage(request.downloadHandler.data, markNonReadable: true))
			{
				Object.DestroyImmediate(texture2D);
				texture2D = null;
			}
			if ((MaxWidth > 0f && (float)texture2D.width > MaxWidth) || (MaxHeight > 0f && (float)texture2D.height > MaxHeight))
			{
				Debug.Log("Texture from " + url + " was too big, ignoring");
				texture2D = null;
			}
		}
		if (texture2D == null)
		{
			texture2D = MissingImage;
			if (texture2D == null)
			{
				texture2D = Texture2D.blackTexture;
			}
		}
		TextureCache.Add(url, texture2D);
		request.Dispose();
		if ((bool)this && (bool)image)
		{
			UpdateImageTexture(texture2D);
			if (PreserveAspectHeight)
			{
				float num = (float)texture2D.height / (float)texture2D.width;
				image.rectTransform.sizeDelta = new Vector2(0f, image.rectTransform.rect.width * num);
				image.enabled = true;
			}
		}
	}
}
