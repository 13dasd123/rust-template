using System;
using System.IO;
using System.Reflection;
using Oxide.Core;
using Oxide.Core.Extensions;
using Oxide.Core.SQLite.Libraries;

public class SQLiteExtension : Extension
{
	internal static readonly Version AssemblyVersion = Assembly.GetExecutingAssembly().GetName().Version;

	private SQLite sqlite;

	public override string Name => "SQLite";

	public override VersionNumber Version => new VersionNumber(AssemblyVersion.Major, AssemblyVersion.Minor, AssemblyVersion.Build);

	public override string Author => "Oxide Team";

	public SQLiteExtension(ExtensionManager manager)
		: base(manager)
	{
		if (Environment.OSVersion.Platform == PlatformID.Unix)
		{
			string extensionDirectory = Interface.Oxide.ExtensionDirectory;
			File.WriteAllText(Path.Combine(extensionDirectory, "System.Data.SQLite.dll.config"), $"<configuration>\n<dllmap dll=\"sqlite3\" target=\"{extensionDirectory}/x86/libsqlite3.so\" os=\"!windows,osx\" cpu=\"x86\" />\n<dllmap dll=\"sqlite3\" target=\"{extensionDirectory}/x64/libsqlite3.so\" os=\"!windows,osx\" cpu=\"x86-64\" />\n</configuration>");
		}
	}

	public override void Load()
	{
		base.Manager.RegisterLibrary("SQLite", sqlite = new SQLite());
	}

	public override void LoadPluginWatchers(string pluginDirectory)
	{
	}

	public override void OnModLoad()
	{
	}
}
