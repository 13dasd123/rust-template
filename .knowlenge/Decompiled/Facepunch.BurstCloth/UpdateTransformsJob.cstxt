using Facepunch.BurstCloth.Jobs;
using Unity.Collections;
using Unity.Mathematics;
using UnityEngine.Jobs;

internal struct UpdateTransformsJob : IJobParallelForTransform
{
	[ReadOnly]
	[NativeMatchesParallelForLength]
	public NativeArray<BoneData> Data;

	[ReadOnly]
	[NativeMatchesParallelForLength]
	public NativeArray<BoneState> State;

	public void Execute(int index, [WriteOnly] TransformAccess transform)
	{
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		ref BoneData @readonly = BurstUtil.GetReadonly<BoneData>(ref Data, index);
		ref BoneState readonly2 = BurstUtil.GetReadonly<BoneState>(ref State, index);
		if (@readonly.Depth != 0)
		{
			ref BoneState readonly3 = BurstUtil.GetReadonly<BoneState>(ref State, @readonly.Parent);
			RigidTransform val = math.inverse(math.RigidTransform(readonly3.Rotation, readonly3.Position));
			RigidTransform val2 = math.RigidTransform(readonly2.Rotation, readonly2.Position);
			RigidTransform val3 = math.mul(val, val2);
			((TransformAccess)(ref transform)).localRotation = quaternion.op_Implicit(val3.rot);
			((TransformAccess)(ref transform)).localPosition = float3.op_Implicit(val3.pos);
		}
	}
}
