using System;
using System.Collections.Generic;
using System.Linq;
using Facepunch.BurstCloth;
using Facepunch.BurstCloth.Jobs;
using Unity.Collections;
using Unity.Jobs;
using Unity.Jobs.LowLevel.Unsafe;
using Unity.Mathematics;
using UnityEngine;
using UnityEngine.Jobs;

public class BurstCloth : MonoBehaviour
{
	[Serializable]
	internal struct Chain
	{
		public List<Transform> Transforms;
	}

	internal const int TickRateMultiplier = 30;

	internal const int MaximumTickRate = 120;

	private static readonly List<SphereParams> SphereParamsShared = new List<SphereParams>(32);

	[Header("Structure")]
	public Transform[] RootBones;

	[Tooltip("You only need to set this value if this is a ViewModel prefab")]
	public Transform ViewModelRootTransform;

	public bool SiblingConstraints = true;

	[Range(0f, 1f)]
	public float LengthModifier = 1f;

	[Header("Simulation")]
	public BurstClothMaterial Material;

	public Vector3 Gravity = Vector3.down;

	public Transform SimulationSpace;

	[Range(0f, 1f)]
	public float RootMotionStrength = 1f;

	public float MaxOriginDelta = 1f;

	[Tooltip("This will be used as the default for all bones without a length constraint given by BurstClothConstraint")]
	public Vector2 DefaultLengthConstraint = new Vector2(0f, 1f);

	[Tooltip("If the controller becomes culled, bones will return to their original rigged positions")]
	public bool ResetBonesOnDisable;

	[Header("Collision")]
	public bool EnableCollisions = true;

	public float CollisionRadius;

	public float CollisionDirectionAdjustment;

	public float CollisionFilteringScale = 3f;

	[BurstClothCurveRect(0f, 0f, 1f, 1f)]
	public AnimationCurve CollisionRadiusCurve = AnimationCurve.Linear(0f, 1f, 1f, 1f);

	[Header("Performance")]
	public bool EnableSimulation = true;

	[Range(30f, 120f)]
	public int TickRate = 120;

	[Range(1f, 16f)]
	public int MaxTicksPerFrame = 4;

	[Range(1f, 16f)]
	public int ConstraintIterationCount = 2;

	[SerializeField]
	[HideInInspector]
	internal List<Chain> _chains;

	[SerializeField]
	[HideInInspector]
	internal List<BoneData> _boneDataOriginal;

	[SerializeField]
	[HideInInspector]
	internal List<RotationConstraint> _rotationConstraintsDataOriginal;

	private Vector3 _origin;

	private Quaternion _rotation;

	private Quaternion _prevRotation;

	private Quaternion _rotationDelta;

	private Vector3 _up;

	private Vector3 _simulationSpaceDelta;

	private Transform _prevSimulationSpace;

	private Vector3? _prevSimulationOrigin;

	private Vector3 _originDelta;

	private Vector3? _prevOrigin;

	private bool _originDirty;

	private float _accumulator;

	private int _boneCount;

	private int _maxBoneDepth;

	private Dictionary<Transform, int> _boneToIndex;

	private TransformAccessArray _boneTransforms;

	private NativeArray<BoneData> _boneData;

	private NativeArray<BoneState> _boneState;

	private NativeArray<RotationConstraint> _rotationConstraints;

	[SerializeField]
	[HideInInspector]
	private List<string> _skinConstraintTargetsIds;

	private Transform[] _skinConstraintTargetCache;

	[SerializeField]
	[HideInInspector]
	internal List<SkinConstraint> _skinConstraintsOriginal;

	private NativeArray<SkinConstraint> _skinConstraints;

	private bool _skinAccessArrayDirty;

	private TransformAccessArray _skinConstraintsTransformAccessArray;

	private TransformAccessArray _sphereColliderTransforms;

	private NativeArray<SphereColliderData> _sphereColliderData;

	private NativeArray<SphereColliderState> _sphereColliderState;

	protected virtual Transform GetSkeletonBone(string boneId)
	{
		return null;
	}

	protected void Initialize()
	{
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0123: Unknown result type (might be due to invalid IL or missing references)
		//IL_0128: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		//IL_0132: Unknown result type (might be due to invalid IL or missing references)
		//IL_0137: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0140: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_0588: Unknown result type (might be due to invalid IL or missing references)
		//IL_0176: Unknown result type (might be due to invalid IL or missing references)
		//IL_017b: Unknown result type (might be due to invalid IL or missing references)
		//IL_017d: Unknown result type (might be due to invalid IL or missing references)
		//IL_017f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0181: Unknown result type (might be due to invalid IL or missing references)
		//IL_0186: Unknown result type (might be due to invalid IL or missing references)
		//IL_0188: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		//IL_018f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0194: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_021b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0224: Unknown result type (might be due to invalid IL or missing references)
		//IL_0229: Unknown result type (might be due to invalid IL or missing references)
		//IL_022e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0279: Unknown result type (might be due to invalid IL or missing references)
		//IL_0280: Unknown result type (might be due to invalid IL or missing references)
		//IL_0285: Unknown result type (might be due to invalid IL or missing references)
		//IL_028a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0291: Unknown result type (might be due to invalid IL or missing references)
		//IL_0296: Unknown result type (might be due to invalid IL or missing references)
		//IL_029b: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_030b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0310: Unknown result type (might be due to invalid IL or missing references)
		//IL_0319: Unknown result type (might be due to invalid IL or missing references)
		//IL_031e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0323: Unknown result type (might be due to invalid IL or missing references)
		//IL_032c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0331: Unknown result type (might be due to invalid IL or missing references)
		//IL_0336: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03de: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0403: Unknown result type (might be due to invalid IL or missing references)
		//IL_0408: Unknown result type (might be due to invalid IL or missing references)
		//IL_0418: Unknown result type (might be due to invalid IL or missing references)
		//IL_041a: Unknown result type (might be due to invalid IL or missing references)
		//IL_041f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0424: Unknown result type (might be due to invalid IL or missing references)
		//IL_043b: Unknown result type (might be due to invalid IL or missing references)
		//IL_043d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0442: Unknown result type (might be due to invalid IL or missing references)
		//IL_0447: Unknown result type (might be due to invalid IL or missing references)
		//IL_0450: Unknown result type (might be due to invalid IL or missing references)
		//IL_0455: Unknown result type (might be due to invalid IL or missing references)
		//IL_045a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0461: Unknown result type (might be due to invalid IL or missing references)
		//IL_0463: Unknown result type (might be due to invalid IL or missing references)
		//IL_0465: Unknown result type (might be due to invalid IL or missing references)
		//IL_0467: Unknown result type (might be due to invalid IL or missing references)
		//IL_046c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0471: Unknown result type (might be due to invalid IL or missing references)
		//IL_0475: Unknown result type (might be due to invalid IL or missing references)
		//IL_047a: Unknown result type (might be due to invalid IL or missing references)
		//IL_047f: Unknown result type (might be due to invalid IL or missing references)
		//IL_04db: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ee: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)Material == (Object)null)
		{
			Material = BurstClothMaterial.DefaultMaterial;
		}
		if (_chains == null || _chains.Count == 0)
		{
			_chains = new List<Chain>();
			Transform[] rootBones = RootBones;
			foreach (Transform obj in rootBones)
			{
				List<Transform> list = new List<Transform>();
				Transform val = obj;
				while ((Object)(object)val != (Object)null)
				{
					list.Add(val);
					if (val.childCount == 0)
					{
						break;
					}
					val = val.GetChild(0);
				}
				if (list.Count >= 2)
				{
					_chains.Add(new Chain
					{
						Transforms = list
					});
				}
			}
		}
		SetupManagedData();
		if (_boneDataOriginal != null && _boneDataOriginal.Count != 0)
		{
			return;
		}
		_boneDataOriginal = new List<BoneData>();
		_rotationConstraintsDataOriginal = new List<RotationConstraint>();
		_skinConstraintTargetsIds = new List<string>();
		_skinConstraintsOriginal = new List<SkinConstraint>();
		Vector3 localScale = Vector3.one;
		if ((Object)(object)ViewModelRootTransform != (Object)null)
		{
			localScale = ViewModelRootTransform.localScale;
			ViewModelRootTransform.localScale = Vector3.one;
		}
		(Vector3 Origin, Quaternion Rotation, Vector3 Up) originTransform = GetOriginTransform();
		Vector3 item = originTransform.Origin;
		Quaternion item2 = originTransform.Rotation;
		Vector3 item3 = originTransform.Up;
		Quaternion val2 = Quaternion.Inverse(item2);
		int num = 0;
		BurstClothConstraint burstClothConstraint = default(BurstClothConstraint);
		for (int j = 0; j < _chains.Count; j++)
		{
			List<Transform> transforms = _chains[j].Transforms;
			for (int k = 0; k < transforms.Count; k++)
			{
				Transform val3 = transforms[k];
				Vector3 position = val3.position;
				Vector3 val4 = Vector3.Project(position - item, item3) + item;
				(Transform, int) siblingAndIndex = GetSiblingAndIndex(j - 1, k);
				Transform item4 = siblingAndIndex.Item1;
				int item5 = siblingAndIndex.Item2;
				(Vector3, float) boneLocalPositionAndLength = GetBoneLocalPositionAndLength(val3, item4);
				Vector3 item6 = boneLocalPositionAndLength.Item1;
				float item7 = boneLocalPositionAndLength.Item2;
				(Transform, int) siblingAndIndex2 = GetSiblingAndIndex(j + 1, k);
				Transform item8 = siblingAndIndex2.Item1;
				int item9 = siblingAndIndex2.Item2;
				(Vector3, float) boneLocalPositionAndLength2 = GetBoneLocalPositionAndLength(val3, item8);
				Vector3 item10 = boneLocalPositionAndLength2.Item1;
				float item11 = boneLocalPositionAndLength2.Item2;
				float num2 = (float)k / (float)_maxBoneDepth;
				BurstClothConstraint burstClothConstraint2 = (((Component)val3).TryGetComponent<BurstClothConstraint>(ref burstClothConstraint) ? burstClothConstraint : null);
				Vector3 val5 = position - val3.parent.position;
				float magnitude = ((Vector3)(ref val5)).magnitude;
				int rotationConstraintIndex = -1;
				int skinConstraintIndex = -1;
				if ((Object)(object)burstClothConstraint2 != (Object)null)
				{
					bool constrainRotateX = burstClothConstraint2.ConstrainRotateX;
					bool constrainRotateY = burstClothConstraint2.ConstrainRotateY;
					bool constrainRotateZ = burstClothConstraint2.ConstrainRotateZ;
					if (constrainRotateX || constrainRotateY || constrainRotateZ)
					{
						RotationConstraint item12 = new RotationConstraint(new bool3(constrainRotateX, constrainRotateY, constrainRotateZ), math.radians(float2.op_Implicit(burstClothConstraint2.RotateX)), math.radians(float2.op_Implicit(burstClothConstraint2.RotateY)), math.radians(float2.op_Implicit(burstClothConstraint2.RotateZ)));
						_rotationConstraintsDataOriginal.Add(item12);
						rotationConstraintIndex = _rotationConstraintsDataOriginal.Count - 1;
					}
					if (burstClothConstraint2.ExtraSkinConstraint && !string.IsNullOrEmpty(burstClothConstraint2.SkeletonBoneName))
					{
						_skinConstraintTargetsIds.Add(burstClothConstraint2.SkeletonBoneName);
						SkinConstraint skinConstraint = default(SkinConstraint);
						skinConstraint.LocalSkinPosition = float3.zero;
						skinConstraint.LocalSkinNormal = float3.op_Implicit(burstClothConstraint2.SkinNormal);
						skinConstraint.LocalEscapeNormal = float3.op_Implicit(burstClothConstraint2.EscapeNormal);
						skinConstraint.BackstopRadius = burstClothConstraint2.BackstopRadius;
						skinConstraint.BackstopInset = burstClothConstraint2.BackstopInset;
						SkinConstraint item13 = skinConstraint;
						_skinConstraintsOriginal.Add(item13);
						skinConstraintIndex = _skinConstraintsOriginal.Count - 1;
					}
				}
				List<BoneData> boneDataOriginal = _boneDataOriginal;
				BoneData item14 = new BoneData
				{
					Depth = k,
					Parent = ((k > 0) ? (num - 1) : (-1)),
					Child = ((k < transforms.Count - 1) ? (num + 1) : (-1)),
					Length = magnitude
				};
				Vector3 val6 = val3.parent.InverseTransformPoint(position);
				item14.NormalFromParent = float3.op_Implicit(((Vector3)(ref val6)).normalized);
				item14.LeftSibling = item5;
				item14.LengthToLeft = item7;
				item14.NormalFromLeft = math.normalize(float3.op_Implicit(item6));
				item14.RightSibling = item9;
				item14.NormalFromRight = math.normalize(float3.op_Implicit(item10));
				item14.LengthToRight = item11;
				item14.LocalPosition = float3.op_Implicit(val3.parent.InverseTransformPoint(position));
				item14.LocalRotation = quaternion.op_Implicit(val3.localRotation);
				val6 = val2 * (position - val4);
				item14.DirectionFromOrigin = float3.op_Implicit(((Vector3)(ref val6)).normalized);
				item14.CollisionRadius = CollisionRadius * CollisionRadiusCurve.Evaluate(num2);
				item14.DampingInv = 1f - Material.GetDamping(num2);
				item14.RotationConstraintIndex = rotationConstraintIndex;
				item14.SkinConstraintIndex = skinConstraintIndex;
				item14.LengthConstraint = ((burstClothConstraint2 != null && burstClothConstraint2.ConstrainLength) ? float2.op_Implicit(burstClothConstraint2.Length) : float2.op_Implicit(DefaultLengthConstraint)) * magnitude;
				item14.LengthRelaxation = Material.GetLengthRelaxation(num2);
				item14.ShapeRelaxation = Material.GetShapeRelaxation(num2);
				item14.SiblingRelaxation = Material.GetSiblingRelaxation(num2);
				boneDataOriginal.Add(item14);
				num++;
			}
		}
		if ((Object)(object)ViewModelRootTransform != (Object)null)
		{
			ViewModelRootTransform.localScale = localScale;
		}
	}

	protected virtual void Awake()
	{
		Initialize();
	}

	protected virtual void OnEnable()
	{
		BurstClothManager.Get().Instances.Add(this);
		_originDirty = true;
	}

	protected void ResetBoneTransforms(bool resetBoneStates = false)
	{
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		if (_boneDataOriginal == null || _boneDataOriginal.Count == 0)
		{
			return;
		}
		int num = 0;
		Vector3 val2 = default(Vector3);
		Quaternion val3 = default(Quaternion);
		for (int i = 0; i < _chains.Count; i++)
		{
			Chain chain = _chains[i];
			for (int j = 0; j < chain.Transforms.Count; j++)
			{
				BoneData boneData = _boneDataOriginal[num];
				num++;
				if (boneData.Depth != 0)
				{
					Transform val = chain.Transforms[j];
					val.localPosition = float3.op_Implicit(boneData.LocalPosition);
					val.localRotation = quaternion.op_Implicit(boneData.LocalRotation);
					if (resetBoneStates && _boneState.IsCreated)
					{
						val.GetPositionAndRotation(ref val2, ref val3);
						_boneState[num - 1] = new BoneState
						{
							Position = float3.op_Implicit(val2),
							OldPosition = float3.op_Implicit(val2),
							Rotation = quaternion.op_Implicit(val3)
						};
					}
				}
			}
		}
	}

	protected virtual void OnDisable()
	{
		if (ResetBonesOnDisable)
		{
			ResetBoneTransforms();
		}
		_accumulator = 0f;
		_boneCount = 0;
		_maxBoneDepth = 0;
		_boneToIndex = null;
		if (((TransformAccessArray)(ref _boneTransforms)).isCreated)
		{
			((TransformAccessArray)(ref _boneTransforms)).Dispose();
		}
		if (_boneData.IsCreated)
		{
			_boneData.Dispose();
		}
		if (_rotationConstraints.IsCreated)
		{
			_rotationConstraints.Dispose();
		}
		if (_boneState.IsCreated)
		{
			_boneState.Dispose();
		}
		if (_sphereColliderData.IsCreated)
		{
			_sphereColliderData.Dispose();
		}
		if (_sphereColliderState.IsCreated)
		{
			_sphereColliderState.Dispose();
		}
		if (((TransformAccessArray)(ref _sphereColliderTransforms)).isCreated)
		{
			((TransformAccessArray)(ref _sphereColliderTransforms)).Dispose();
		}
		if (_skinConstraints.IsCreated)
		{
			_skinConstraints.Dispose();
		}
		if (((TransformAccessArray)(ref _skinConstraintsTransformAccessArray)).isCreated)
		{
			((TransformAccessArray)(ref _skinConstraintsTransformAccessArray)).Dispose();
		}
		BurstClothManager.Get().Instances.Remove(this);
	}

	protected internal virtual void FrameUpdate()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0104: Unknown result type (might be due to invalid IL or missing references)
		//IL_0109: Unknown result type (might be due to invalid IL or missing references)
		//IL_010f: Unknown result type (might be due to invalid IL or missing references)
		//IL_012e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0133: Unknown result type (might be due to invalid IL or missing references)
		//IL_016c: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0152: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_0186: Unknown result type (might be due to invalid IL or missing references)
		//IL_0191: Unknown result type (might be due to invalid IL or missing references)
		//IL_0196: Unknown result type (might be due to invalid IL or missing references)
		//IL_019c: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_017e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b2: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = _rotation * Vector3.forward;
		(Vector3, Quaternion, Vector3) originTransform = GetOriginTransform();
		_origin = originTransform.Item1;
		_rotation = originTransform.Item2;
		_up = originTransform.Item3;
		Vector3 val2 = _rotation * Vector3.forward;
		if (Vector3.Dot(val, val2) < 0.2f)
		{
			ResetBoneTransforms(resetBoneStates: true);
			_originDirty = true;
		}
		if (SimulationSpace != null && (Object)(object)SimulationSpace == (Object)null)
		{
			SimulationSpace = null;
		}
		_rotationDelta = _rotation * Quaternion.Inverse(_prevRotation);
		Transform simulationSpace = SimulationSpace;
		Vector3 val3 = ((simulationSpace != null) ? simulationSpace.position : Vector3.zero);
		if (_originDirty)
		{
			_simulationSpaceDelta = Vector3.zero;
			_prevSimulationOrigin = val3;
		}
		else
		{
			_simulationSpaceDelta += (_prevSimulationOrigin.HasValue ? (val3 - _prevSimulationOrigin.Value) : Vector3.zero);
			_prevSimulationOrigin = val3;
		}
		if (SimulationSpace != _prevSimulationSpace)
		{
			_simulationSpaceDelta = Vector3.zero;
		}
		_prevSimulationSpace = SimulationSpace;
		if (_originDirty)
		{
			_originDelta = Vector3.zero;
			_prevOrigin = _origin;
		}
		else
		{
			_originDelta += (_prevOrigin.HasValue ? (_origin - _prevOrigin.Value - _simulationSpaceDelta) : Vector3.zero);
			_prevOrigin = _origin;
		}
		_originDirty = false;
	}

	private void VerifySkinConstraintTransformCache()
	{
		if (_skinConstraintTargetsIds == null)
		{
			return;
		}
		if (_skinConstraintTargetCache == null && _skinConstraintTargetsIds.Count > 0)
		{
			_skinConstraintTargetCache = (Transform[])(object)new Transform[_skinConstraintTargetsIds.Count];
		}
		for (int i = 0; i < _skinConstraintTargetsIds.Count; i++)
		{
			Transform val = _skinConstraintTargetCache[i];
			if ((Object)(object)val == (Object)null)
			{
				_skinAccessArrayDirty = true;
				val = GetSkeletonBone(_skinConstraintTargetsIds[i]);
			}
			_skinConstraintTargetCache[i] = val;
		}
	}

	private void PopulateSkinConstraintTransformAccessArray()
	{
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		if (_skinConstraintTargetCache == null || (((TransformAccessArray)(ref _skinConstraintsTransformAccessArray)).isCreated && !_skinAccessArrayDirty))
		{
			return;
		}
		if (!((TransformAccessArray)(ref _skinConstraintsTransformAccessArray)).isCreated || ((TransformAccessArray)(ref _skinConstraintsTransformAccessArray)).capacity < _skinConstraintTargetCache.Length)
		{
			if (((TransformAccessArray)(ref _skinConstraintsTransformAccessArray)).isCreated)
			{
				((TransformAccessArray)(ref _skinConstraintsTransformAccessArray)).Dispose();
			}
			_skinConstraintsTransformAccessArray = new TransformAccessArray(_skinConstraintTargetCache.Length, -1);
		}
		((TransformAccessArray)(ref _skinConstraintsTransformAccessArray)).SetTransforms(_skinConstraintTargetCache);
		_skinAccessArrayDirty = false;
	}

	internal JobHandle SimulateSystem()
	{
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00de: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0100: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_010d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_0144: Unknown result type (might be due to invalid IL or missing references)
		//IL_0149: Unknown result type (might be due to invalid IL or missing references)
		//IL_014e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0156: Unknown result type (might be due to invalid IL or missing references)
		//IL_015b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0160: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_018a: Unknown result type (might be due to invalid IL or missing references)
		//IL_019b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0182: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01da: Unknown result type (might be due to invalid IL or missing references)
		//IL_01df: Unknown result type (might be due to invalid IL or missing references)
		//IL_020e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0213: Unknown result type (might be due to invalid IL or missing references)
		//IL_0218: Unknown result type (might be due to invalid IL or missing references)
		//IL_0220: Unknown result type (might be due to invalid IL or missing references)
		//IL_0225: Unknown result type (might be due to invalid IL or missing references)
		//IL_022a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0232: Unknown result type (might be due to invalid IL or missing references)
		//IL_0237: Unknown result type (might be due to invalid IL or missing references)
		//IL_023c: Unknown result type (might be due to invalid IL or missing references)
		//IL_026d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0272: Unknown result type (might be due to invalid IL or missing references)
		//IL_0278: Unknown result type (might be due to invalid IL or missing references)
		//IL_027d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0283: Unknown result type (might be due to invalid IL or missing references)
		//IL_0288: Unknown result type (might be due to invalid IL or missing references)
		//IL_0298: Unknown result type (might be due to invalid IL or missing references)
		//IL_029d: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0323: Unknown result type (might be due to invalid IL or missing references)
		//IL_0329: Unknown result type (might be due to invalid IL or missing references)
		//IL_032b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0330: Unknown result type (might be due to invalid IL or missing references)
		//IL_0335: Unknown result type (might be due to invalid IL or missing references)
		//IL_035a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0360: Unknown result type (might be due to invalid IL or missing references)
		//IL_0362: Unknown result type (might be due to invalid IL or missing references)
		//IL_0367: Unknown result type (might be due to invalid IL or missing references)
		//IL_0369: Unknown result type (might be due to invalid IL or missing references)
		//IL_036b: Unknown result type (might be due to invalid IL or missing references)
		//IL_036d: Unknown result type (might be due to invalid IL or missing references)
		//IL_036f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0374: Unknown result type (might be due to invalid IL or missing references)
		//IL_0378: Unknown result type (might be due to invalid IL or missing references)
		//IL_037a: Unknown result type (might be due to invalid IL or missing references)
		//IL_037f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0382: Unknown result type (might be due to invalid IL or missing references)
		//IL_0387: Unknown result type (might be due to invalid IL or missing references)
		//IL_0389: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fa: Unknown result type (might be due to invalid IL or missing references)
		SetupData();
		_accumulator += Time.deltaTime;
		float num = 1f / (float)TickRate;
		int num2 = Mathf.Min(Mathf.FloorToInt(_accumulator / num), MaxTicksPerFrame);
		if (num2 == 0)
		{
			return default(JobHandle);
		}
		_accumulator -= (float)num2 * num;
		UpdateSkinConstraintsJob updateSkinConstraintsJob = default(UpdateSkinConstraintsJob);
		updateSkinConstraintsJob.SkinConstraints = _skinConstraints;
		UpdateSkinConstraintsJob updateSkinConstraintsJob2 = updateSkinConstraintsJob;
		InitializeBoneStateJob initializeBoneStateJob = default(InitializeBoneStateJob);
		initializeBoneStateJob.Data = _boneData;
		initializeBoneStateJob.State = _boneState;
		InitializeBoneStateJob initializeBoneStateJob2 = initializeBoneStateJob;
		InitializeSphereColliderStateJob initializeSphereColliderStateJob = default(InitializeSphereColliderStateJob);
		initializeSphereColliderStateJob.Data = _sphereColliderData;
		initializeSphereColliderStateJob.State = _sphereColliderState;
		InitializeSphereColliderStateJob initializeSphereColliderStateJob2 = initializeSphereColliderStateJob;
		SimulatePositionsJob simulatePositionsJob = default(SimulatePositionsJob);
		simulatePositionsJob.ColliderData = _sphereColliderData;
		simulatePositionsJob.ColliderState = _sphereColliderState;
		simulatePositionsJob.RotationConstraints = _rotationConstraints;
		simulatePositionsJob.SkinConstraints = _skinConstraints;
		simulatePositionsJob.BoneData = _boneData;
		simulatePositionsJob.BoneStates = _boneState;
		simulatePositionsJob.TickRate = TickRate;
		simulatePositionsJob.DeltaTime = num;
		simulatePositionsJob.IterationCount = num2;
		simulatePositionsJob.ConstraintIterationCount = ConstraintIterationCount;
		simulatePositionsJob.SimulationSpaceDelta = float3.op_Implicit(_simulationSpaceDelta);
		simulatePositionsJob.OriginRotationDelta = quaternion.op_Implicit(_rotationDelta);
		simulatePositionsJob.OriginDelta = float3.op_Implicit((((Vector3)(ref _originDelta)).sqrMagnitude < MaxOriginDelta * MaxOriginDelta) ? (_originDelta * (1f - RootMotionStrength)) : _originDelta);
		simulatePositionsJob.Gravity = float3.op_Implicit((Vector3)((((Vector3)(ref Gravity)).sqrMagnitude < 0.01f) ? new Vector3(0f, -0.01f, 0f) : Gravity));
		simulatePositionsJob.SiblingConstraints = SiblingConstraints;
		simulatePositionsJob.LengthModifier = LengthModifier;
		simulatePositionsJob.EnableCollisions = EnableCollisions;
		simulatePositionsJob.Origin = float3.op_Implicit(_origin);
		simulatePositionsJob.Rotation = quaternion.op_Implicit(_rotation);
		simulatePositionsJob.Up = float3.op_Implicit(_up);
		simulatePositionsJob.CollisionProjectionYOffset = CollisionDirectionAdjustment;
		simulatePositionsJob.CollisionFilteringScale = CollisionFilteringScale;
		simulatePositionsJob.Radius = 10f;
		SimulatePositionsJob simulatePositionsJob2 = simulatePositionsJob;
		_prevRotation = _rotation;
		_originDelta = Vector3.zero;
		_simulationSpaceDelta = Vector3.zero;
		UpdateTransformsJob updateTransformsJob = default(UpdateTransformsJob);
		updateTransformsJob.Data = _boneData;
		updateTransformsJob.State = _boneState;
		UpdateTransformsJob updateTransformsJob2 = updateTransformsJob;
		JobHandle val = default(JobHandle);
		if (((TransformAccessArray)(ref _skinConstraintsTransformAccessArray)).isCreated)
		{
			val = IJobParallelForTransformExtensions.ScheduleReadOnly<UpdateSkinConstraintsJob>(updateSkinConstraintsJob2, _skinConstraintsTransformAccessArray, math.max(((TransformAccessArray)(ref _boneTransforms)).length / math.max(JobsUtility.JobWorkerCount, 1), 32), default(JobHandle));
		}
		JobHandle val2 = IJobParallelForTransformExtensions.ScheduleReadOnly<InitializeBoneStateJob>(initializeBoneStateJob2, _boneTransforms, math.max(((TransformAccessArray)(ref _boneTransforms)).length / math.max(JobsUtility.JobWorkerCount, 1), 32), default(JobHandle));
		JobHandle val3 = IJobParallelForTransformExtensions.ScheduleReadOnly<InitializeSphereColliderStateJob>(initializeSphereColliderStateJob2, _sphereColliderTransforms, math.max(((TransformAccessArray)(ref _sphereColliderTransforms)).length / math.max(JobsUtility.JobWorkerCount, 1), 32), default(JobHandle));
		JobHandle val4 = JobHandle.CombineDependencies(val, val2, val3);
		JobHandle val5 = IJobExtensions.Schedule<SimulatePositionsJob>(simulatePositionsJob2, val4);
		return IJobParallelForTransformExtensions.Schedule<UpdateTransformsJob>(updateTransformsJob2, _boneTransforms, val5);
	}

	private void SetupData()
	{
		SetupManagedData();
		SetupNativeData();
	}

	private void SetupManagedData()
	{
		if (_boneCount == 0 || _maxBoneDepth == 0)
		{
			_boneCount = _chains.Sum((Chain c) => c.Transforms.Count);
			_maxBoneDepth = _chains.Max((Chain c) => c.Transforms.Count);
		}
		if (_boneToIndex == null)
		{
			_boneToIndex = new Dictionary<Transform, int>();
			BuildBoneToIndexMap(_boneToIndex);
		}
		VerifySkinConstraintTransformCache();
	}

	private void SetupNativeData()
	{
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		//IL_010c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0172: Unknown result type (might be due to invalid IL or missing references)
		//IL_0177: Unknown result type (might be due to invalid IL or missing references)
		//IL_0274: Unknown result type (might be due to invalid IL or missing references)
		//IL_0279: Unknown result type (might be due to invalid IL or missing references)
		//IL_028b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0290: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0344: Unknown result type (might be due to invalid IL or missing references)
		//IL_0349: Unknown result type (might be due to invalid IL or missing references)
		//IL_0369: Unknown result type (might be due to invalid IL or missing references)
		//IL_036e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01af: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f5: Unknown result type (might be due to invalid IL or missing references)
		if (!((TransformAccessArray)(ref _boneTransforms)).isCreated)
		{
			_boneTransforms = new TransformAccessArray(_boneCount, -1);
			foreach (Chain chain in _chains)
			{
				foreach (Transform transform in chain.Transforms)
				{
					((TransformAccessArray)(ref _boneTransforms)).Add(transform);
				}
			}
		}
		if (!_boneData.IsCreated)
		{
			_boneData = new NativeArray<BoneData>(_boneCount, (Allocator)4, (NativeArrayOptions)0);
			int num = 0;
			foreach (BoneData item in _boneDataOriginal)
			{
				_boneData[num++] = item;
			}
		}
		if (!_rotationConstraints.IsCreated)
		{
			_rotationConstraints = new NativeArray<RotationConstraint>(_rotationConstraintsDataOriginal.Count, (Allocator)4, (NativeArrayOptions)0);
			int num2 = 0;
			foreach (RotationConstraint item2 in _rotationConstraintsDataOriginal)
			{
				_rotationConstraints[num2++] = item2;
			}
		}
		if (!_boneState.IsCreated)
		{
			_boneState = new NativeArray<BoneState>(_boneCount, (Allocator)4, (NativeArrayOptions)0);
			int num3 = 0;
			foreach (Chain chain2 in _chains)
			{
				foreach (Transform transform2 in chain2.Transforms)
				{
					Vector3 position = transform2.position;
					_boneState[num3++] = new BoneState
					{
						Position = float3.op_Implicit(position),
						Rotation = quaternion.op_Implicit(transform2.rotation),
						OldPosition = float3.op_Implicit(position)
					};
				}
			}
		}
		if (!((TransformAccessArray)(ref _sphereColliderTransforms)).isCreated || !_sphereColliderData.IsCreated)
		{
			SphereParamsShared.Clear();
			GatherColliders(SphereParamsShared);
			_sphereColliderTransforms = new TransformAccessArray(SphereParamsShared.Count, -1);
			_sphereColliderData = new NativeArray<SphereColliderData>(SphereParamsShared.Count, (Allocator)4, (NativeArrayOptions)0);
			for (int i = 0; i < SphereParamsShared.Count; i++)
			{
				SphereParams sphereParams = SphereParamsShared[i];
				((TransformAccessArray)(ref _sphereColliderTransforms)).Add(sphereParams.Transform);
				_sphereColliderData[i] = new SphereColliderData
				{
					Radius = sphereParams.Radius,
					RadiusSqr = sphereParams.Radius * sphereParams.Radius,
					LocalPosition = float3.op_Implicit(sphereParams.Point)
				};
			}
			SphereParamsShared.Clear();
		}
		if (!_sphereColliderState.IsCreated)
		{
			_sphereColliderState = new NativeArray<SphereColliderState>(_sphereColliderData.Length, (Allocator)4, (NativeArrayOptions)0);
		}
		if (!_skinConstraints.IsCreated)
		{
			_skinConstraints = new NativeArray<SkinConstraint>(_skinConstraintsOriginal.Count, (Allocator)4, (NativeArrayOptions)0);
			for (int j = 0; j < _skinConstraintsOriginal.Count; j++)
			{
				_skinConstraints[j] = _skinConstraintsOriginal[j];
			}
		}
		PopulateSkinConstraintTransformAccessArray();
	}

	protected virtual (Vector3 Origin, Quaternion Rotation, Vector3 Up) GetOriginTransform()
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		return (Origin: ((Component)this).transform.position, Rotation: ((Component)this).transform.rotation, Up: ((Component)this).transform.up);
	}

	protected virtual void GatherColliders(List<SphereParams> sphereColliders)
	{
	}

	private static (Vector3, float) GetBoneLocalPositionAndLength(Transform parent, Transform child)
	{
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)child == (Object)null)
		{
			return (Vector3.zero, 0f);
		}
		Vector3 item = child.InverseTransformPoint(parent.position);
		return (item, ((Vector3)(ref item)).magnitude);
	}

	private (Transform, int) GetSiblingAndIndex(int chainIndex, int depth)
	{
		if (chainIndex < 0 || chainIndex >= _chains.Count)
		{
			return (null, -1);
		}
		List<Transform> transforms = _chains[chainIndex].Transforms;
		if (depth < 0 || depth >= transforms.Count)
		{
			return (null, -1);
		}
		Transform val = transforms[depth];
		return (val, _boneToIndex[val]);
	}

	private void BuildBoneToIndexMap(Dictionary<Transform, int> boneToIndex)
	{
		boneToIndex.Clear();
		int num = 0;
		foreach (Chain chain in _chains)
		{
			foreach (Transform transform in chain.Transforms)
			{
				boneToIndex.Add(transform, num++);
			}
		}
	}

	protected void UpdateCachedMaterialData()
	{
		bool flag = false;
		if (_chains != null)
		{
			foreach (Chain chain in _chains)
			{
				foreach (Transform transform in chain.Transforms)
				{
					if ((Object)(object)transform == (Object)null)
					{
						flag = true;
						break;
					}
				}
				if (flag)
				{
					break;
				}
			}
		}
		if (flag)
		{
			_chains.Clear();
		}
		if (!Application.isPlaying || !_boneData.IsCreated)
		{
			return;
		}
		if ((Object)(object)Material == (Object)null)
		{
			Material = BurstClothMaterial.DefaultMaterial;
		}
		int num = 0;
		for (int i = 0; i < _chains.Count; i++)
		{
			List<Transform> transforms = _chains[i].Transforms;
			for (int j = 0; j < transforms.Count; j++)
			{
				BoneData boneData = _boneDataOriginal[num];
				float num2 = (float)j / (float)_maxBoneDepth;
				boneData.CollisionRadius = CollisionRadius * CollisionRadiusCurve.Evaluate(num2);
				boneData.DampingInv = 1f - Material.GetDamping(num2);
				boneData.LengthRelaxation = Material.GetLengthRelaxation(num2);
				boneData.ShapeRelaxation = Material.GetShapeRelaxation(num2);
				boneData.SiblingRelaxation = Material.GetSiblingRelaxation(num2);
				_boneDataOriginal[num] = boneData;
				_boneData[num] = boneData;
				num++;
			}
		}
	}
}
