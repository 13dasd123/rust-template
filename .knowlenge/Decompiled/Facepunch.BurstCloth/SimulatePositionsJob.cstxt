using Facepunch.BurstCloth;
using Facepunch.BurstCloth.Jobs;
using Unity.Collections;
using Unity.Jobs;
using Unity.Mathematics;
using UnityEngine;

internal struct SimulatePositionsJob : IJob
{
	private struct LerpState
	{
		public float3 Start;

		public float3 End;
	}

	private readonly struct Collision
	{
		public readonly bool Exists;

		public readonly float3 TargetToResolve;

		public Collision(bool exists, float3 targetToResolve)
		{
			//IL_0008: Unknown result type (might be due to invalid IL or missing references)
			//IL_0009: Unknown result type (might be due to invalid IL or missing references)
			Exists = exists;
			TargetToResolve = targetToResolve;
		}
	}

	[ReadOnly]
	public NativeArray<SphereColliderData> ColliderData;

	[ReadOnly]
	public NativeArray<SphereColliderState> ColliderState;

	[ReadOnly]
	public NativeArray<RotationConstraint> RotationConstraints;

	[ReadOnly]
	public NativeArray<SkinConstraint> SkinConstraints;

	[ReadOnly]
	public NativeArray<BoneData> BoneData;

	public NativeArray<BoneState> BoneStates;

	public int TickRate;

	public float DeltaTime;

	public int IterationCount;

	public int ConstraintIterationCount;

	public quaternion OriginRotationDelta;

	public float3 SimulationSpaceDelta;

	public float3 OriginDelta;

	public float3 Gravity;

	public float LengthModifier;

	public bool SiblingConstraints;

	public bool EnableCollisions;

	public float3 Origin;

	public quaternion Rotation;

	public float3 Up;

	public float Radius;

	public float CollisionProjectionYOffset;

	public float CollisionFilteringScale;

	public void Execute()
	{
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0121: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_0154: Unknown result type (might be due to invalid IL or missing references)
		//IL_0229: Unknown result type (might be due to invalid IL or missing references)
		//IL_0230: Unknown result type (might be due to invalid IL or missing references)
		//IL_0235: Unknown result type (might be due to invalid IL or missing references)
		//IL_023a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0241: Unknown result type (might be due to invalid IL or missing references)
		//IL_0246: Unknown result type (might be due to invalid IL or missing references)
		NativeArray<LerpState> val = default(NativeArray<LerpState>);
		val..ctor(BoneStates.Length, (Allocator)2, (NativeArrayOptions)0);
		bool flag = EnableCollisions && ColliderData.Length > 0;
		NativeArray<Collision> collisions = default(NativeArray<Collision>);
		collisions..ctor(BoneStates.Length, (Allocator)2, (NativeArrayOptions)1);
		AdjustSimulationSpace();
		for (int i = 0; i < BoneStates.Length; i++)
		{
			ref BoneState @readonly = BurstUtil.GetReadonly<BoneState>(ref BoneStates, i);
			val[i] = new LerpState
			{
				Start = @readonly.OldPosition,
				End = @readonly.Position
			};
		}
		for (int j = 0; j < IterationCount; j++)
		{
			float num = ((float)j + 1f) / (float)IterationCount;
			for (int k = 0; k < BoneData.Length; k++)
			{
				ref BoneData readonly2 = BurstUtil.GetReadonly<BoneData>(ref BoneData, k);
				ref BoneState reference = ref BurstUtil.Get<BoneState>(ref BoneStates, k);
				if (readonly2.Depth == 0)
				{
					reference.OldPosition = reference.Position;
					reference.Position = math.lerp(val[k].Start, val[k].End, num);
				}
				else
				{
					VerletIntegrate(ref reference, Gravity, DeltaTime, readonly2.DampingInv);
				}
			}
			if (flag)
			{
				PopulateCollisions(collisions);
			}
			for (int l = 0; l < ConstraintIterationCount; l++)
			{
				for (int m = 0; m < BoneData.Length; m++)
				{
					ApplyRotationConstraints((BoneData)BurstUtil.GetReadonly<BoneData>(ref BoneData, m), ref BurstUtil.Get<BoneState>(ref BoneStates, m));
				}
				for (int n = 0; n < BoneData.Length; n++)
				{
					ref BoneData readonly3 = BurstUtil.GetReadonly<BoneData>(ref BoneData, n);
					ref BoneState state = ref BurstUtil.Get<BoneState>(ref BoneStates, n);
					ref Collision readonly4 = BurstUtil.GetReadonly<Collision>(ref collisions, n);
					ApplyLinearConstraints(in readonly3, ref state, in BoneStates, in readonly4);
				}
				for (int num2 = 0; num2 < BoneData.Length; num2++)
				{
					if (((BoneData)BurstUtil.GetReadonly<BoneData>(ref BoneData, num2)).Depth != 0)
					{
						ref BoneState reference2 = ref BurstUtil.Get<BoneState>(ref BoneStates, num2);
						ref float3 position = ref reference2.Position;
						position += reference2.Delta;
						reference2.Delta = float3.zero;
					}
				}
			}
			for (int num3 = 0; num3 < BoneData.Length; num3++)
			{
				ApplyRotationConstraints((BoneData)BurstUtil.GetReadonly<BoneData>(ref BoneData, num3), ref BurstUtil.Get<BoneState>(ref BoneStates, num3));
			}
		}
		val.Dispose();
	}

	private void AdjustSimulationSpace()
	{
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		for (int i = 0; i < BoneData.Length; i++)
		{
			ref BoneData @readonly = BurstUtil.GetReadonly<BoneData>(ref BoneData, i);
			ref BoneState reference = ref BurstUtil.Get<BoneState>(ref BoneStates, i);
			float3 val = reference.Position - Origin;
			float3 val2 = val - math.rotate(OriginRotationDelta, val);
			if (((BoneData)@readonly).Depth > 0)
			{
				ref float3 position = ref reference.Position;
				position += SimulationSpaceDelta + OriginDelta - val2;
			}
			ref float3 oldPosition = ref reference.OldPosition;
			oldPosition += SimulationSpaceDelta + OriginDelta - val2;
		}
	}

	private void ApplyLinearConstraints(in BoneData data, ref BoneState state, in NativeArray<BoneState> workBoneState, in Collision collision)
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00af: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00de: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_0108: Unknown result type (might be due to invalid IL or missing references)
		//IL_010d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_0235: Unknown result type (might be due to invalid IL or missing references)
		//IL_023a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0243: Unknown result type (might be due to invalid IL or missing references)
		//IL_0248: Unknown result type (might be due to invalid IL or missing references)
		//IL_024d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0179: Unknown result type (might be due to invalid IL or missing references)
		//IL_017f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01de: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0204: Unknown result type (might be due to invalid IL or missing references)
		//IL_0206: Unknown result type (might be due to invalid IL or missing references)
		//IL_020b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0210: Unknown result type (might be due to invalid IL or missing references)
		//IL_0212: Unknown result type (might be due to invalid IL or missing references)
		//IL_0213: Unknown result type (might be due to invalid IL or missing references)
		//IL_0215: Unknown result type (might be due to invalid IL or missing references)
		//IL_021a: Unknown result type (might be due to invalid IL or missing references)
		//IL_021f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0220: Unknown result type (might be due to invalid IL or missing references)
		//IL_0222: Unknown result type (might be due to invalid IL or missing references)
		//IL_0227: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0134: Unknown result type (might be due to invalid IL or missing references)
		//IL_0137: Unknown result type (might be due to invalid IL or missing references)
		//IL_013c: Unknown result type (might be due to invalid IL or missing references)
		//IL_013e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0143: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		//IL_0152: Unknown result type (might be due to invalid IL or missing references)
		//IL_0154: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_0262: Unknown result type (might be due to invalid IL or missing references)
		//IL_0267: Unknown result type (might be due to invalid IL or missing references)
		//IL_0271: Unknown result type (might be due to invalid IL or missing references)
		//IL_0276: Unknown result type (might be due to invalid IL or missing references)
		//IL_027b: Unknown result type (might be due to invalid IL or missing references)
		//IL_028b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0290: Unknown result type (might be due to invalid IL or missing references)
		//IL_0344: Unknown result type (might be due to invalid IL or missing references)
		//IL_0349: Unknown result type (might be due to invalid IL or missing references)
		//IL_0354: Unknown result type (might be due to invalid IL or missing references)
		//IL_0359: Unknown result type (might be due to invalid IL or missing references)
		//IL_035e: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02be: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02de: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0305: Unknown result type (might be due to invalid IL or missing references)
		//IL_0307: Unknown result type (might be due to invalid IL or missing references)
		//IL_030c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0311: Unknown result type (might be due to invalid IL or missing references)
		//IL_0313: Unknown result type (might be due to invalid IL or missing references)
		//IL_0315: Unknown result type (might be due to invalid IL or missing references)
		//IL_0317: Unknown result type (might be due to invalid IL or missing references)
		//IL_031c: Unknown result type (might be due to invalid IL or missing references)
		//IL_032c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0331: Unknown result type (might be due to invalid IL or missing references)
		//IL_0333: Unknown result type (might be due to invalid IL or missing references)
		//IL_0338: Unknown result type (might be due to invalid IL or missing references)
		if (data.Depth == 0)
		{
			return;
		}
		ref BoneState reference = ref BurstUtil.Get<BoneState>(ref workBoneState, data.Parent);
		float3 val = float3.zero;
		int num = 0;
		float3 val2 = float3.zero;
		int num2 = 0;
		if (data.SkinConstraintIndex >= 0)
		{
			ref SkinConstraint @readonly = BurstUtil.GetReadonly<SkinConstraint>(ref SkinConstraints, data.SkinConstraintIndex);
			float3 val3 = @readonly.WorldSkinPosition - @readonly.WorldSkinNormal * @readonly.BackstopInset;
			if (math.distancesq(state.Position, val3) <= @readonly.BackstopRadius * @readonly.BackstopRadius)
			{
				float3 val4 = math.normalize(state.Position - val3);
				float3 val5 = Slerp(val4, @readonly.WorldEscapeNormal, math.select(0.2f, 1f, math.dot(val4, @readonly.WorldEscapeNormal) >= 0f));
				float3 val6 = val3 + val5 * @readonly.BackstopRadius;
				float3 val7 = state.Position - val6;
				val += 0.5f * data.LengthRelaxation * -val7;
				num++;
			}
		}
		if (EnableCollisions && collision.Exists)
		{
			float3 targetToResolve = collision.TargetToResolve;
			float3 val8 = state.Position - targetToResolve;
			val += 0.5f * data.LengthRelaxation * -val8;
			num++;
		}
		if (data.LengthRelaxation > 0f)
		{
			float num3 = math.clamp(math.distance(state.Position, reference.Position), data.LengthConstraint.x, data.LengthConstraint.y);
			float3 val9 = reference.Position + math.rotate(reference.Rotation, data.NormalFromParent * num3 * LengthModifier);
			float3 val10 = state.Position - val9;
			float3 val11 = math.select(0.5f, 1f, data.Depth == 1) * data.LengthRelaxation * -val10;
			val += val11;
			num++;
			val2 -= val11;
			num2++;
		}
		ref float3 delta = ref state.Delta;
		delta += val / ((float)num + 1.1754944E-38f);
		if (data.Depth > 1)
		{
			ref float3 delta2 = ref reference.Delta;
			delta2 += val2 / ((float)num2 + 1.1754944E-38f);
		}
		if (SiblingConstraints)
		{
			float3 val12 = float3.zero;
			int num4 = 0;
			if (data.LeftSibling >= 0)
			{
				ref BoneState reference2 = ref BurstUtil.Get<BoneState>(ref workBoneState, data.LeftSibling);
				float3 val13 = reference2.Position + math.rotate(math.slerp(reference2.Rotation, state.Rotation, 0.5f), data.NormalFromLeft * data.LengthToLeft);
				float3 val14 = state.Position - val13;
				float3 val15 = 0.5f * data.SiblingRelaxation * -val14;
				val12 += val15;
				num4++;
				ref float3 delta3 = ref reference2.Delta;
				delta3 -= val15;
			}
			ref float3 delta4 = ref state.Delta;
			delta4 += val12 / ((float)num4 + 1.1754944E-38f);
		}
	}

	private static void VerletIntegrate(ref BoneState state, float3 acceleration, float dt, float damping)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		float3 position = state.Position;
		ref float3 position2 = ref state.Position;
		position2 += (state.Position - state.OldPosition) * damping + acceleration * dt * dt;
		state.OldPosition = position;
	}

	private void PopulateCollisions(NativeArray<Collision> collisions)
	{
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00df: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		for (int i = 0; i < BoneStates.Length; i++)
		{
			ref BoneState @readonly = BurstUtil.GetReadonly<BoneState>(ref BoneStates, i);
			ref BoneData readonly2 = BurstUtil.GetReadonly<BoneData>(ref BoneData, i);
			float3 val = math.project(@readonly.Position - Origin, Up) + Origin + Up * CollisionProjectionYOffset;
			float3 val2 = math.normalizesafe(@readonly.Position - val, default(float3));
			float3 val3 = math.mul(Rotation, readonly2.DirectionFromOrigin);
			float3 val4 = Slerp(val3, val2, math.max(math.dot(val2, val3), 0f));
			float3 origin = val + val4 * Radius;
			float3 val5 = @readonly.Position - origin;
			float3 direction = math.normalizesafe(val5, default(float3));
			float maxDistance = math.length(val5);
			bool hit;
			float3 val6 = RayMarch(in origin, in direction, readonly2.CollisionRadius, maxDistance, out hit);
			if (math.distancesq(val6, @readonly.Position) > readonly2.CollisionRadius * CollisionFilteringScale * readonly2.CollisionRadius * CollisionFilteringScale)
			{
				hit = false;
			}
			collisions[i] = new Collision(hit, val6);
		}
	}

	private void ApplyRotationConstraints(in BoneData data, ref BoneState state)
	{
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00df: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_0108: Unknown result type (might be due to invalid IL or missing references)
		//IL_010d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_0114: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_011a: Unknown result type (might be due to invalid IL or missing references)
		if (data.Depth != 0 && data.Parent >= 0)
		{
			ref BoneData @readonly = BurstUtil.GetReadonly<BoneData>(ref BoneData, data.Parent);
			ref BoneState reference = ref BurstUtil.Get<BoneState>(ref BoneStates, data.Parent);
			quaternion rotation = state.Rotation;
			if (data.Child >= 0)
			{
				ref BoneData readonly2 = BurstUtil.GetReadonly<BoneData>(ref BoneData, data.Child);
				ref BoneState reference2 = ref BurstUtil.Get<BoneState>(ref BoneStates, data.Child);
				rotation = math.mul(rotation, FromToRotation(readonly2.LocalPosition, math.mul(math.conjugate(rotation), reference2.Position - state.Position)));
			}
			else
			{
				rotation = math.mul(rotation, FromToRotation(@readonly.LocalPosition, math.mul(math.conjugate(rotation), state.Position - reference.Position)));
			}
			_ = SiblingConstraints;
			quaternion val = math.mul(reference.Rotation, data.LocalRotation);
			rotation = math.slerp(rotation, val, math.saturate(DeltaTime * data.ShapeRelaxation));
			rotation = ApplyAngleLimitsConstraint(in data, in RotationConstraints, rotation, reference.Rotation);
			state.Rotation = math.normalize(rotation);
		}
	}

	private static quaternion ApplyAngleLimitsConstraint(in BoneData data, in NativeArray<RotationConstraint> rotationConstraints, quaternion rotation, quaternion parentRotation)
	{
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		if (data.RotationConstraintIndex == -1)
		{
			return rotation;
		}
		ref RotationConstraint @readonly = BurstUtil.GetReadonly<RotationConstraint>(ref rotationConstraints, data.RotationConstraintIndex);
		float3 val = ToEuler(math.mul(math.conjugate(parentRotation), rotation), (RotationOrder)4);
		if (@readonly.Constraints.x)
		{
			val.x = ClampAngle(val.x, @readonly.X.x, @readonly.X.y);
		}
		if (@readonly.Constraints.y)
		{
			val.y = ClampAngle(val.y, @readonly.Y.x, @readonly.Y.y);
		}
		if (@readonly.Constraints.z)
		{
			val.z = ClampAngle(val.z, @readonly.Z.x, @readonly.Z.y);
		}
		return math.mul(parentRotation, quaternion.Euler(val, (RotationOrder)4));
	}

	private float3 RayMarch(in float3 origin, in float3 direction, float radius, float maxDistance, out bool hit)
	{
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		hit = false;
		float num = 0f;
		for (int i = 0; i < 8; i++)
		{
			float3 position = origin + direction * num;
			float num2 = Scene(in position) - radius;
			if (num2 < 0.0001f)
			{
				hit = true;
				return position + direction * num2;
			}
			num += num2;
			if (num > maxDistance)
			{
				break;
			}
		}
		return origin + direction * maxDistance;
	}

	private float Scene(in float3 position)
	{
		float num = float.MaxValue;
		for (int i = 0; i < ColliderData.Length; i++)
		{
			ref SphereColliderData @readonly = BurstUtil.GetReadonly<SphereColliderData>(ref ColliderData, i);
			num = Union(num, SphereSignedDistance(in position, in ((SphereColliderState)BurstUtil.GetReadonly<SphereColliderState>(ref ColliderState, i)).Position, in @readonly.Radius));
		}
		return num;
	}

	private static float Union(float d1, float d2)
	{
		return math.min(d1, d2);
	}

	private static float SphereSignedDistance(in float3 p, in float3 pSphere, in float r)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		return math.length(p - pSphere) - r;
	}

	private static float Capsule(in float3 p, in float3 a, in float3 b, float r)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		float3 val = p - a;
		float3 val2 = b - a;
		float num = math.clamp(math.dot(val, val2) / math.dot(val2, val2), 0f, 1f);
		return math.length(val - val2 * num) - r;
	}

	private static float3 Slerp(float3 a, float3 b, float t)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		return float3.op_Implicit(Vector3.Slerp(float3.op_Implicit(a), float3.op_Implicit(b), t));
	}

	private static quaternion FromToRotation(float3 from, float3 to)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		float num = math.acos(math.clamp(math.dot(math.normalizesafe(from, default(float3)), math.normalizesafe(to, default(float3))), -1f, 1f));
		return quaternion.AxisAngle(math.normalizesafe(math.cross(from, to), default(float3)), num);
	}

	private static float ClampAngle(float current, float min, float max)
	{
		float num = math.abs((min - max + 180f) % 360f - 180f) * 0.5f;
		float target = min + num;
		float num2 = math.abs(DeltaAngle(current, target)) - num;
		if (num2 > 0f)
		{
			current = MoveTowardsAngle(current, target, num2);
		}
		return current;
	}

	private static float MoveTowardsAngle(float current, float target, float maxDelta)
	{
		float num = DeltaAngle(current, target);
		if (0f - maxDelta < num && num < maxDelta)
		{
			return target;
		}
		target = current + num;
		return MoveTowards(current, target, maxDelta);
	}

	private static float MoveTowards(float current, float target, float maxDelta)
	{
		if (!(math.abs(target - current) <= maxDelta))
		{
			return current + math.sign(target - current) * maxDelta;
		}
		return target;
	}

	private static float DeltaAngle(float current, float target)
	{
		float num = Repeat(target - current, 360f);
		if ((double)num > 180.0)
		{
			num -= 360f;
		}
		return num;
	}

	private static float Repeat(float t, float length)
	{
		return math.clamp(t - math.floor(t / length) * length, 0f, length);
	}

	private static float3 ToEuler(quaternion q, RotationOrder order = 4)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Expected I4, but got Unknown
		//IL_06c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0580: Unknown result type (might be due to invalid IL or missing references)
		//IL_0586: Unknown result type (might be due to invalid IL or missing references)
		//IL_02fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0302: Unknown result type (might be due to invalid IL or missing references)
		//IL_043e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0444: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0770: Unknown result type (might be due to invalid IL or missing references)
		//IL_0776: Unknown result type (might be due to invalid IL or missing references)
		//IL_077c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0782: Unknown result type (might be due to invalid IL or missing references)
		//IL_0792: Unknown result type (might be due to invalid IL or missing references)
		//IL_0799: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_07a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_06dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_06e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0700: Unknown result type (might be due to invalid IL or missing references)
		//IL_0709: Unknown result type (might be due to invalid IL or missing references)
		//IL_070f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0718: Unknown result type (might be due to invalid IL or missing references)
		//IL_071e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0725: Unknown result type (might be due to invalid IL or missing references)
		//IL_072c: Unknown result type (might be due to invalid IL or missing references)
		//IL_062f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0635: Unknown result type (might be due to invalid IL or missing references)
		//IL_063b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0641: Unknown result type (might be due to invalid IL or missing references)
		//IL_0651: Unknown result type (might be due to invalid IL or missing references)
		//IL_0658: Unknown result type (might be due to invalid IL or missing references)
		//IL_0660: Unknown result type (might be due to invalid IL or missing references)
		//IL_0667: Unknown result type (might be due to invalid IL or missing references)
		//IL_0673: Unknown result type (might be due to invalid IL or missing references)
		//IL_0675: Unknown result type (might be due to invalid IL or missing references)
		//IL_0677: Unknown result type (might be due to invalid IL or missing references)
		//IL_0690: Unknown result type (might be due to invalid IL or missing references)
		//IL_0695: Unknown result type (might be due to invalid IL or missing references)
		//IL_059b: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_05bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_05cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_05de: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_03bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_03d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_040c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0411: Unknown result type (might be due to invalid IL or missing references)
		//IL_0317: Unknown result type (might be due to invalid IL or missing references)
		//IL_031e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0327: Unknown result type (might be due to invalid IL or missing references)
		//IL_032d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0334: Unknown result type (might be due to invalid IL or missing references)
		//IL_033b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0344: Unknown result type (might be due to invalid IL or missing references)
		//IL_034b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0354: Unknown result type (might be due to invalid IL or missing references)
		//IL_035a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0361: Unknown result type (might be due to invalid IL or missing references)
		//IL_0368: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_04fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_050e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0515: Unknown result type (might be due to invalid IL or missing references)
		//IL_051d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0524: Unknown result type (might be due to invalid IL or missing references)
		//IL_0530: Unknown result type (might be due to invalid IL or missing references)
		//IL_0532: Unknown result type (might be due to invalid IL or missing references)
		//IL_0534: Unknown result type (might be due to invalid IL or missing references)
		//IL_054d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0552: Unknown result type (might be due to invalid IL or missing references)
		//IL_0459: Unknown result type (might be due to invalid IL or missing references)
		//IL_045f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0468: Unknown result type (might be due to invalid IL or missing references)
		//IL_046e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0475: Unknown result type (might be due to invalid IL or missing references)
		//IL_047c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0485: Unknown result type (might be due to invalid IL or missing references)
		//IL_048b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0494: Unknown result type (might be due to invalid IL or missing references)
		//IL_049a: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0268: Unknown result type (might be due to invalid IL or missing references)
		//IL_026e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0274: Unknown result type (might be due to invalid IL or missing references)
		//IL_027a: Unknown result type (might be due to invalid IL or missing references)
		//IL_028a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0291: Unknown result type (might be due to invalid IL or missing references)
		//IL_0299: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01db: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0201: Unknown result type (might be due to invalid IL or missing references)
		//IL_0207: Unknown result type (might be due to invalid IL or missing references)
		//IL_0210: Unknown result type (might be due to invalid IL or missing references)
		//IL_0216: Unknown result type (might be due to invalid IL or missing references)
		//IL_021d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0224: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0133: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_0149: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_0158: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_016b: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_016f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0188: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0801: Unknown result type (might be due to invalid IL or missing references)
		//IL_0802: Unknown result type (might be due to invalid IL or missing references)
		float4 value = q.value;
		float4 val = value * ((float4)(ref value)).wwww * new float4(2f);
		float4 val2 = value * ((float4)(ref value)).yzxw * new float4(2f);
		float4 val3 = value * value;
		float3 euler = default(float3);
		((float3)(ref euler))..ctor(0f);
		switch ((int)order)
		{
		case 5:
		{
			float num29 = val2.z + val.y;
			if (num29 * num29 < 0.99999595f)
			{
				float num30 = 0f - val2.x + val.z;
				float num31 = val3.x + val3.w - val3.y - val3.z;
				float num32 = 0f - val2.y + val.x;
				float num33 = val3.z + val3.w - val3.y - val3.x;
				((float3)(ref euler))..ctor(math.atan2(num30, num31), math.asin(num29), math.atan2(num32, num33));
			}
			else
			{
				num29 = math.clamp(num29, -1f, 1f);
				float4 val8 = default(float4);
				((float4)(ref val8))..ctor(val2.z, val.y, val2.y, val.x);
				float num34 = 2f * (val8.x * val8.w + val8.y * val8.z);
				float num35 = math.csum(val8 * val8 * new float4(-1f, 1f, -1f, 1f));
				((float3)(ref euler))..ctor(math.atan2(num34, num35), math.asin(num29), 0f);
			}
			break;
		}
		case 4:
		{
			float num15 = val2.y - val.x;
			if (num15 * num15 < 0.99999595f)
			{
				float num16 = val2.x + val.z;
				float num17 = val3.y + val3.w - val3.x - val3.z;
				float num18 = val2.z + val.y;
				float num19 = val3.z + val3.w - val3.x - val3.y;
				((float3)(ref euler))..ctor(math.atan2(num16, num17), 0f - math.asin(num15), math.atan2(num18, num19));
			}
			else
			{
				num15 = math.clamp(num15, -1f, 1f);
				float4 val6 = default(float4);
				((float4)(ref val6))..ctor(val2.z, val.y, val2.y, val.x);
				float num20 = 2f * (val6.x * val6.w + val6.y * val6.z);
				float num21 = math.csum(val6 * val6 * new float4(-1f, 1f, -1f, 1f));
				((float3)(ref euler))..ctor(math.atan2(num20, num21), 0f - math.asin(num15), 0f);
			}
			break;
		}
		case 2:
		{
			float num36 = val2.y + val.x;
			if (num36 * num36 < 0.99999595f)
			{
				float num37 = 0f - val2.z + val.y;
				float num38 = val3.z + val3.w - val3.x - val3.y;
				float num39 = 0f - val2.x + val.z;
				float num40 = val3.y + val3.w - val3.z - val3.x;
				((float3)(ref euler))..ctor(math.atan2(num37, num38), math.asin(num36), math.atan2(num39, num40));
			}
			else
			{
				num36 = math.clamp(num36, -1f, 1f);
				float4 val9 = default(float4);
				((float4)(ref val9))..ctor(val2.x, val.z, val2.y, val.x);
				float num41 = 2f * (val9.x * val9.w + val9.y * val9.z);
				float num42 = math.csum(val9 * val9 * new float4(-1f, 1f, -1f, 1f));
				((float3)(ref euler))..ctor(math.atan2(num41, num42), math.asin(num36), 0f);
			}
			break;
		}
		case 3:
		{
			float num8 = val2.x - val.z;
			if (num8 * num8 < 0.99999595f)
			{
				float num9 = val2.z + val.y;
				float num10 = val3.x + val3.w - val3.z - val3.y;
				float num11 = val2.y + val.x;
				float num12 = val3.y + val3.w - val3.x - val3.z;
				((float3)(ref euler))..ctor(math.atan2(num9, num10), 0f - math.asin(num8), math.atan2(num11, num12));
			}
			else
			{
				num8 = math.clamp(num8, -1f, 1f);
				float4 val5 = default(float4);
				((float4)(ref val5))..ctor(val2.x, val.z, val2.y, val.x);
				float num13 = 2f * (val5.x * val5.w + val5.y * val5.z);
				float num14 = math.csum(val5 * val5 * new float4(-1f, 1f, -1f, 1f));
				((float3)(ref euler))..ctor(math.atan2(num13, num14), 0f - math.asin(num8), 0f);
			}
			break;
		}
		case 1:
		{
			float num22 = val2.x + val.z;
			if (num22 * num22 < 0.99999595f)
			{
				float num23 = 0f - val2.y + val.x;
				float num24 = val3.y + val3.w - val3.z - val3.x;
				float num25 = 0f - val2.z + val.y;
				float num26 = val3.x + val3.w - val3.y - val3.z;
				((float3)(ref euler))..ctor(math.atan2(num23, num24), math.asin(num22), math.atan2(num25, num26));
			}
			else
			{
				num22 = math.clamp(num22, -1f, 1f);
				float4 val7 = default(float4);
				((float4)(ref val7))..ctor(val2.x, val.z, val2.z, val.y);
				float num27 = 2f * (val7.x * val7.w + val7.y * val7.z);
				float num28 = math.csum(val7 * val7 * new float4(-1f, 1f, -1f, 1f));
				((float3)(ref euler))..ctor(math.atan2(num27, num28), math.asin(num22), 0f);
			}
			break;
		}
		case 0:
		{
			float num = val2.z - val.y;
			if (num * num < 0.99999595f)
			{
				float num2 = val2.y + val.x;
				float num3 = val3.z + val3.w - val3.y - val3.x;
				float num4 = val2.x + val.z;
				float num5 = val3.x + val3.w - val3.y - val3.z;
				((float3)(ref euler))..ctor(math.atan2(num2, num3), 0f - math.asin(num), math.atan2(num4, num5));
			}
			else
			{
				num = math.clamp(num, -1f, 1f);
				float4 val4 = default(float4);
				((float4)(ref val4))..ctor(val2.z, val.y, val2.x, val.z);
				float num6 = 2f * (val4.x * val4.w + val4.y * val4.z);
				float num7 = math.csum(val4 * val4 * new float4(-1f, 1f, -1f, 1f));
				((float3)(ref euler))..ctor(math.atan2(num6, num7), 0f - math.asin(num), 0f);
			}
			break;
		}
		}
		return EulerReorderBack(euler, order);
	}

	private static float3 EulerReorderBack(float3 euler, RotationOrder order)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Expected I4, but got Unknown
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		return (float3)((int)order switch
		{
			1 => ((float3)(ref euler)).xzy, 
			3 => ((float3)(ref euler)).zxy, 
			2 => ((float3)(ref euler)).yxz, 
			4 => ((float3)(ref euler)).yzx, 
			5 => ((float3)(ref euler)).zyx, 
			_ => euler, 
		});
	}
}
