using Facepunch.BurstCloth.Jobs;
using Unity.Burst;
using Unity.Collections;
using Unity.Mathematics;
using UnityEngine.Jobs;

[BurstCompile]
internal struct InitializeSphereColliderStateJob : IJobParallelForTransform
{
	[ReadOnly]
	[NativeMatchesParallelForLength]
	public NativeArray<SphereColliderData> Data;

	[WriteOnly]
	[NativeMatchesParallelForLength]
	public NativeArray<SphereColliderState> State;

	public void Execute(int index, TransformAccess transform)
	{
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		ref SphereColliderData @readonly = BurstUtil.GetReadonly<SphereColliderData>(ref Data, index);
		ref SphereColliderState reference = ref BurstUtil.Get<SphereColliderState>(ref State, index);
		float3 val = float3.op_Implicit(((TransformAccess)(ref transform)).position);
		quaternion val2 = quaternion.op_Implicit(((TransformAccess)(ref transform)).rotation);
		reference.Position = val + math.mul(val2, @readonly.LocalPosition);
	}
}
