using Facepunch.BurstCloth.Jobs;
using Unity.Collections;
using Unity.Mathematics;
using UnityEngine.Jobs;

internal struct InitializeBoneStateJob : IJobParallelForTransform
{
	[ReadOnly]
	[NativeMatchesParallelForLength]
	public NativeArray<BoneData> Data;

	[WriteOnly]
	[NativeMatchesParallelForLength]
	public NativeArray<BoneState> State;

	public void Execute(int index, [ReadOnly] TransformAccess transform)
	{
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		ref BoneData @readonly = BurstUtil.GetReadonly<BoneData>(ref Data, index);
		ref BoneState reference = ref BurstUtil.Get<BoneState>(ref State, index);
		if (((BoneData)@readonly).Depth == 0)
		{
			reference.OldPosition = reference.Position;
			reference.Position = float3.op_Implicit(((TransformAccess)(ref transform)).position);
		}
		reference.Rotation = quaternion.op_Implicit(((TransformAccess)(ref transform)).rotation);
	}
}
