using Facepunch.BurstCloth;
using UnityEngine;

[CreateAssetMenu(fileName = "BurstClothMaterial", menuName = "Facepunch.BurstCloth/Material")]
public class BurstClothMaterial : ScriptableObject
{
	[SerializeField]
	[Range(0f, 1f)]
	private float _damping = 0.2f;

	[SerializeField]
	[BurstClothCurveRect(0f, 0f, 1f, 1f)]
	private AnimationCurve _dampingCurve = AnimationCurve.EaseInOut(0f, 0.5f, 1f, 1f);

	[SerializeField]
	[Range(0f, 1f)]
	private float _stiffness = 0.1f;

	[SerializeField]
	[BurstClothCurveRect(0f, 0f, 1f, 1f)]
	private AnimationCurve _stiffnessCurve = AnimationCurve.Linear(0f, 1f, 1f, 1f);

	[SerializeField]
	[Range(0f, 1f)]
	private float _resistance = 0.9f;

	[SerializeField]
	[BurstClothCurveRect(0f, 0f, 1f, 1f)]
	private AnimationCurve _resistanceCurve = AnimationCurve.Linear(0f, 1f, 1f, 0f);

	[SerializeField]
	[Range(0f, 1f)]
	private float _slackness = 0.1f;

	[SerializeField]
	[BurstClothCurveRect(0f, 0f, 1f, 1f)]
	private AnimationCurve _slacknessCurve = AnimationCurve.Linear(0f, 1f, 1f, 0.8f);

	private static BurstClothMaterial _defaultMaterial;

	public float Damping
	{
		get
		{
			return _damping;
		}
		set
		{
			_damping = Mathf.Clamp01(value);
		}
	}

	public AnimationCurve DampingCurve => _dampingCurve;

	public float Stiffness
	{
		get
		{
			return _stiffness;
		}
		set
		{
			_stiffness = Mathf.Clamp01(value);
		}
	}

	public AnimationCurve StiffnessCurve => _stiffnessCurve;

	public float Resistance
	{
		get
		{
			return _resistance;
		}
		set
		{
			_resistance = Mathf.Clamp01(value);
		}
	}

	public AnimationCurve ResistanceCurve => _resistanceCurve;

	public float Slackness
	{
		get
		{
			return _slackness;
		}
		set
		{
			_slackness = Mathf.Clamp01(value);
		}
	}

	public AnimationCurve SlacknessCurve => _slacknessCurve;

	public static BurstClothMaterial DefaultMaterial
	{
		get
		{
			if (_defaultMaterial == null)
			{
				_defaultMaterial = ScriptableObject.CreateInstance<BurstClothMaterial>();
			}
			_defaultMaterial.name = "BurstCloth_Default";
			return _defaultMaterial;
		}
	}

	public float GetDamping(float t)
	{
		return Damping * DampingCurve.Evaluate(t);
	}

	public float GetStiffness(float t)
	{
		return Stiffness * StiffnessCurve.Evaluate(t);
	}

	public float GetResistance(float t)
	{
		return Resistance * ResistanceCurve.Evaluate(t);
	}

	public float GetSlackness(float t)
	{
		return Slackness * SlacknessCurve.Evaluate(t);
	}
}
