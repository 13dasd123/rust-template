using System;
using System.Collections.Generic;
using Facepunch.Flexbox;
using TMPro;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;

[RequireComponent(typeof(RectTransform))]
[DisallowMultipleComponent]
[ExecuteAlways]
public class FlexGraphicTransform : UIBehaviour, IMeshModifier
{
	[Range(0f, 1f)]
	public float OriginX = 0.5f;

	[Range(0f, 1f)]
	public float OriginY = 0.5f;

	public float TranslateX;

	public float TranslateY;

	public float ScaleX = 1f;

	public float ScaleY = 1f;

	public float Rotate;

	private static readonly Dictionary<TextMeshProUGUI, FlexGraphicTransform> TextMeshProTransformers;

	private static readonly List<TMP_SubMeshUI> SubMeshUIs;

	private static readonly List<Mesh> Meshes;

	private static readonly VertexHelper VertexHelper;

	private static readonly List<Vector3> Vertices;

	private static readonly List<int> Indices;

	private static readonly List<Color32> Colors;

	private static readonly List<Vector2> Uv0;

	private static readonly List<Vector2> Uv1;

	private static readonly List<Vector3> Normals;

	private static readonly List<Vector4> Tangents;

	private FlexGraphicTransform _parent;

	private RectTransform _rt;

	private Graphic _graphic;

	private TextMeshProUGUI _textMeshPro;

	private CanvasRenderer _canvasRenderer;

	private Matrix4x4 transformationMatrix
	{
		get
		{
			//IL_000c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0017: Unknown result type (might be due to invalid IL or missing references)
			//IL_001c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0027: Unknown result type (might be due to invalid IL or missing references)
			//IL_002c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0030: Unknown result type (might be due to invalid IL or missing references)
			//IL_0035: Unknown result type (might be due to invalid IL or missing references)
			//IL_003a: Unknown result type (might be due to invalid IL or missing references)
			//IL_003b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0041: Unknown result type (might be due to invalid IL or missing references)
			//IL_004c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0051: Unknown result type (might be due to invalid IL or missing references)
			//IL_0056: Unknown result type (might be due to invalid IL or missing references)
			//IL_0068: Unknown result type (might be due to invalid IL or missing references)
			//IL_007d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0093: Unknown result type (might be due to invalid IL or missing references)
			//IL_0098: Unknown result type (might be due to invalid IL or missing references)
			//IL_009d: Unknown result type (might be due to invalid IL or missing references)
			//IL_009e: Unknown result type (might be due to invalid IL or missing references)
			//IL_009f: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
			//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
			Vector2 val = new Vector2(OriginX, OriginY) - _rt.pivot;
			Rect rect = _rt.rect;
			Vector2 val2 = val * ((Rect)(ref rect)).size;
			Matrix4x4 val3 = Matrix4x4.Translate(new Vector3(val2.x, val2.y, 0f));
			Matrix4x4 val4 = Matrix4x4.TRS(new Vector3(TranslateX, TranslateY, 0f), Quaternion.Euler(0f, 0f, Rotate), new Vector3(ScaleX, ScaleY, 1f));
			Matrix4x4 val5 = val3 * val4 * ((Matrix4x4)(ref val3)).inverse;
			if (!((Object)(object)_parent != (Object)null))
			{
				return val5;
			}
			return _parent.transformationMatrix * val5;
		}
	}

	static FlexGraphicTransform()
	{
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Expected O, but got Unknown
		TextMeshProTransformers = new Dictionary<TextMeshProUGUI, FlexGraphicTransform>();
		SubMeshUIs = new List<TMP_SubMeshUI>();
		Meshes = new List<Mesh>();
		VertexHelper = new VertexHelper();
		Vertices = new List<Vector3>();
		Indices = new List<int>();
		Colors = new List<Color32>();
		Uv0 = new List<Vector2>();
		Uv1 = new List<Vector2>();
		Normals = new List<Vector3>();
		Tangents = new List<Vector4>();
		TMPro_EventManager.TEXT_CHANGED_EVENT.Add((Action<Object>)delegate(Object obj)
		{
			TextMeshProUGUI val = (TextMeshProUGUI)(object)((obj is TextMeshProUGUI) ? obj : null);
			if (val != null && TextMeshProTransformers.TryGetValue(val, out var value))
			{
				value.ModifyTextMeshPro();
			}
		});
	}

	protected override void Awake()
	{
		((UIBehaviour)this).Awake();
		UpdateParent();
		_rt = ((Component)this).GetComponent<RectTransform>();
		_graphic = ((Component)this).GetComponent<Graphic>();
		_textMeshPro = ((Component)this).GetComponent<TextMeshProUGUI>();
		_canvasRenderer = ((Component)this).GetComponent<CanvasRenderer>();
	}

	private void UpdateParent()
	{
		_parent = (((Object)(object)((Component)this).transform.parent != (Object)null) ? ((Component)((Component)this).transform.parent).GetComponent<FlexGraphicTransform>() : null);
	}

	protected override void OnEnable()
	{
		((UIBehaviour)this).OnEnable();
		if ((Object)(object)_textMeshPro != (Object)null)
		{
			TextMeshProTransformers.Add(_textMeshPro, this);
		}
		SetVerticesDirty();
	}

	protected override void OnDisable()
	{
		if ((Object)(object)_textMeshPro != (Object)null)
		{
			TextMeshProTransformers.Remove(_textMeshPro);
		}
		SetVerticesDirty();
		((UIBehaviour)this).OnDisable();
	}

	protected override void OnDidApplyAnimationProperties()
	{
		SetVerticesDirty();
		((UIBehaviour)this).OnDidApplyAnimationProperties();
	}

	protected override void OnTransformParentChanged()
	{
		((UIBehaviour)this).OnTransformParentChanged();
		UpdateParent();
	}

	public void SetVerticesDirty()
	{
		//IL_017d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)_textMeshPro != (Object)null && ((TMP_Text)_textMeshPro).textInfo?.meshInfo != null)
		{
			TMP_MeshInfo[] meshInfo = ((TMP_Text)_textMeshPro).textInfo.meshInfo;
			foreach (TMP_MeshInfo val in meshInfo)
			{
				Mesh mesh = val.mesh;
				if ((Object)(object)mesh != (Object)null)
				{
					mesh.Clear();
					mesh.vertices = val.vertices;
					mesh.uv = val.uvs0;
					mesh.uv2 = val.uvs2;
					mesh.colors32 = val.colors32;
					mesh.normals = val.normals;
					mesh.tangents = val.tangents;
					mesh.triangles = val.triangles;
				}
			}
			if ((Object)(object)_canvasRenderer != (Object)null)
			{
				_canvasRenderer.SetMesh(((TMP_Text)_textMeshPro).mesh);
				((Component)_textMeshPro).GetComponentsInChildren<TMP_SubMeshUI>(false, SubMeshUIs);
				foreach (TMP_SubMeshUI subMeshUI in SubMeshUIs)
				{
					subMeshUI.canvasRenderer.SetMesh(subMeshUI.mesh);
				}
				SubMeshUIs.Clear();
			}
			((TMP_Text)_textMeshPro).havePropertiesChanged = true;
		}
		else if ((Object)(object)_graphic != (Object)null)
		{
			_graphic.SetVerticesDirty();
		}
		FlexGraphicTransform flexGraphicTransform = default(FlexGraphicTransform);
		foreach (Transform item in ((Component)this).transform)
		{
			if (((Component)item).TryGetComponent<FlexGraphicTransform>(ref flexGraphicTransform) && ((Behaviour)flexGraphicTransform).isActiveAndEnabled)
			{
				flexGraphicTransform.SetVerticesDirty();
			}
		}
	}

	public void ModifyMesh(Mesh mesh)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Expected O, but got Unknown
		VertexHelper val = new VertexHelper(mesh);
		try
		{
			ModifyMesh(val);
			val.FillMesh(mesh);
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public void ModifyMesh(VertexHelper vh)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		Matrix4x4 val = transformationMatrix;
		UIVertex val2 = default(UIVertex);
		int currentVertCount = vh.currentVertCount;
		for (int i = 0; i < currentVertCount; i++)
		{
			vh.PopulateUIVertex(ref val2, i);
			val2.position = ((Matrix4x4)(ref val)).MultiplyPoint(val2.position);
			vh.SetUIVertex(val2, i);
		}
	}

	private void ModifyTextMeshPro()
	{
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)_textMeshPro == (Object)null || !((Behaviour)this).isActiveAndEnabled)
		{
			return;
		}
		Meshes.Clear();
		TMP_MeshInfo[] meshInfo = ((TMP_Text)_textMeshPro).textInfo.meshInfo;
		foreach (TMP_MeshInfo val in meshInfo)
		{
			Meshes.Add(val.mesh);
		}
		foreach (Mesh mesh in Meshes)
		{
			if ((Object)(object)mesh != (Object)null)
			{
				CopyIntoVertexHelper(mesh);
				ModifyMesh(VertexHelper);
				VertexHelper.FillMesh(mesh);
			}
		}
		if ((Object)(object)_canvasRenderer != (Object)null)
		{
			_canvasRenderer.SetMesh(((TMP_Text)_textMeshPro).mesh);
			((Component)this).GetComponentsInChildren<TMP_SubMeshUI>(false, SubMeshUIs);
			foreach (TMP_SubMeshUI subMeshUI in SubMeshUIs)
			{
				subMeshUI.canvasRenderer.SetMesh(subMeshUI.mesh);
			}
			SubMeshUIs.Clear();
		}
		Meshes.Clear();
	}

	private static void CopyIntoVertexHelper(Mesh mesh)
	{
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		VertexHelper.Clear();
		mesh.GetVertices(Vertices);
		mesh.GetIndices(Indices, 0);
		mesh.GetColors(Colors);
		mesh.GetUVs(0, Uv0);
		mesh.GetUVs(1, Uv1);
		mesh.GetNormals(Normals);
		mesh.GetTangents(Tangents);
		for (int i = 0; i < Vertices.Count; i++)
		{
			VertexHelper.AddVert(Vertices[i], Colors[i], Uv0[i], Uv1[i], Normals[i], Tangents[i]);
		}
		for (int j = 0; j < Indices.Count; j += 3)
		{
			VertexHelper.AddTriangle(Indices[j], Indices[j + 1], Indices[j + 2]);
		}
	}
}
