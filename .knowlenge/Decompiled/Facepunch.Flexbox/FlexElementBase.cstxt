using System.Collections.Generic;
using Facepunch.Flexbox;
using Facepunch.Flexbox.Utility;
using UnityEngine;
using UnityEngine.EventSystems;

public abstract class FlexElementBase : UIBehaviour, IFlexNode
{
	[Tooltip("Controls the initial size of the element before factoring in grow/shrink.")]
	public FlexLength Basis;

	[Min(0f)]
	[Tooltip("How much this flex element should grow relative to its siblings.")]
	public int Grow;

	[Min(0f)]
	[Tooltip("How much this flex element should shrink relative to its siblings.")]
	public int Shrink = 1;

	[Tooltip("Optionally override the parent's cross axis alignment for this element.")]
	public FlexAlignSelf AlignSelf;

	[Tooltip("The minimum allowed dimensions of this flex element.")]
	public FlexLength MinWidth;

	[Tooltip("The minimum allowed dimensions of this flex element.")]
	public FlexLength MaxWidth;

	[Tooltip("The maximum allowed dimensions of this flex element.")]
	public FlexLength MinHeight;

	[Tooltip("The maximum allowed dimensions of this flex element.")]
	public FlexLength MaxHeight;

	[Tooltip("Overrides for the preferred dimensions of this flex element. Useful for things like images which would normally have a preferred size of zero.")]
	public FlexValue OverridePreferredWidth;

	[Tooltip("Overrides for the preferred dimensions of this flex element. Useful for things like images which would normally have a preferred size of zero.")]
	public FlexValue OverridePreferredHeight;

	[Tooltip("Absolute elements act as the root container for any number of flex elements.")]
	public bool IsAbsolute;

	[Tooltip("Automatically resize an absolute element to match the size of its children.")]
	public bool AutoSizeX;

	[Tooltip("Automatically resize an absolute element to match the size of its children.")]
	public bool AutoSizeY;

	protected bool IsDirty;

	protected bool IsDoingLayout;

	protected float PrefWidth;

	protected float PrefHeight;

	protected readonly List<IFlexNode> Children = new List<IFlexNode>();

	protected virtual bool IsReversed => false;

	RectTransform IFlexNode.Transform => (RectTransform)((Component)this).transform;

	bool IFlexNode.IsActive => ((UIBehaviour)this).IsActive();

	bool IFlexNode.IsAbsolute => IsAbsolute;

	bool IFlexNode.IsDirty => IsDirty;

	FlexLength IFlexNode.MinWidth => MinWidth;

	FlexLength IFlexNode.MaxWidth => MaxWidth;

	FlexLength IFlexNode.MinHeight => MinHeight;

	FlexLength IFlexNode.MaxHeight => MaxHeight;

	FlexLength IFlexNode.Basis => Basis;

	int IFlexNode.Grow => Grow;

	int IFlexNode.Shrink => Shrink;

	FlexAlignSelf IFlexNode.AlignSelf => AlignSelf;

	internal void PerformLayout()
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Expected O, but got Unknown
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		RectTransform val = (RectTransform)((Component)this).transform;
		Rect rect = val.rect;
		float width = ((Rect)(ref rect)).width;
		float height = ((Rect)(ref rect)).height;
		bool flag = !IsAbsolute && FlexUtility.IsPrefabRoot(((Component)this).gameObject);
		bool flag2 = (IsAbsolute && AutoSizeX) || flag;
		bool flag3 = (IsAbsolute && AutoSizeY) || flag;
		((IFlexNode)this).MeasureHorizontal();
		((IFlexNode)this).LayoutHorizontal(flag2 ? PrefWidth : width, flag3 ? PrefHeight : height);
		((IFlexNode)this).MeasureVertical();
		((IFlexNode)this).LayoutVertical(flag2 ? PrefWidth : width, flag3 ? PrefHeight : height);
		IsDoingLayout = true;
		try
		{
			if (flag2)
			{
				val.SetSizeWithCurrentAnchors((Axis)0, PrefWidth);
			}
			if (flag3)
			{
				val.SetSizeWithCurrentAnchors((Axis)1, PrefHeight);
			}
		}
		finally
		{
			IsDoingLayout = false;
		}
	}

	public void SetLayoutDirty(bool force = false)
	{
		if (force || (!IsDoingLayout && ((UIBehaviour)this).IsActive()))
		{
			IsDirty = true;
			Transform parent = ((Component)this).transform.parent;
			IFlexNode flexNode = default(IFlexNode);
			if (IsAbsolute || (Object)(object)parent == (Object)null || !((Component)parent).TryGetComponent<IFlexNode>(ref flexNode))
			{
				FlexLayoutManager.EnqueueLayout(this);
			}
			else
			{
				flexNode.SetLayoutDirty(force);
			}
		}
	}

	protected abstract void MeasureHorizontalImpl();

	protected abstract void LayoutHorizontalImpl(float maxWidth, float maxHeight);

	protected abstract void MeasureVerticalImpl();

	protected abstract void LayoutVerticalImpl(float maxWidth, float maxHeight);

	void IFlexNode.SetupTransform()
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		if (!IsAbsolute)
		{
			RectTransform val = (RectTransform)((Component)this).transform;
			((Transform)val).localRotation = Quaternion.identity;
			val.pivot = new Vector2(0f, 1f);
			val.anchorMin = new Vector2(0f, 1f);
			val.anchorMax = new Vector2(0f, 1f);
		}
	}

	void IFlexNode.MeasureHorizontal()
	{
		Children.Clear();
		foreach (IFlexNode item in new FlexChildEnumerable(this, IsReversed))
		{
			Children.Add(item);
			item.SetupTransform();
		}
		MeasureHorizontalImpl();
	}

	void IFlexNode.LayoutHorizontal(float maxWidth, float maxHeight)
	{
		IsDoingLayout = true;
		try
		{
			LayoutHorizontalImpl(maxWidth, maxHeight);
		}
		finally
		{
			IsDoingLayout = false;
		}
	}

	void IFlexNode.MeasureVertical()
	{
		MeasureVerticalImpl();
	}

	void IFlexNode.LayoutVertical(float maxWidth, float maxHeight)
	{
		IsDoingLayout = true;
		try
		{
			LayoutVerticalImpl(maxWidth, maxHeight);
			IsDirty = false;
		}
		finally
		{
			IsDoingLayout = false;
		}
	}

	void IFlexNode.GetScale(out float scaleX, out float scaleY)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		Vector3 localScale = ((Transform)(RectTransform)((Component)this).transform).localScale;
		scaleX = localScale.x;
		scaleY = localScale.y;
	}

	void IFlexNode.GetPreferredSize(out float preferredWidth, out float preferredHeight)
	{
		preferredWidth = Mathf.Clamp(OverridePreferredWidth.GetOrDefault(PrefWidth), MinWidth.GetValueOrDefault(0f), MaxWidth.GetValueOrDefault(float.PositiveInfinity));
		preferredHeight = Mathf.Clamp(OverridePreferredHeight.GetOrDefault(PrefHeight), MinHeight.GetValueOrDefault(0f), MaxHeight.GetValueOrDefault(float.PositiveInfinity));
	}

	protected override void OnEnable()
	{
		SetLayoutDirty(force: true);
	}

	protected override void OnDisable()
	{
		SetLayoutDirty(force: true);
	}

	protected override void OnRectTransformDimensionsChange()
	{
		SetLayoutDirty();
	}

	protected override void OnBeforeTransformParentChanged()
	{
		SetLayoutDirty();
	}

	protected override void OnTransformParentChanged()
	{
		SetLayoutDirty();
	}

	protected virtual void OnTransformChildrenChanged()
	{
		SetLayoutDirty();
	}

	protected static ref T Pick<T>(bool value, ref T ifTrue, ref T ifFalse)
	{
		if (value)
		{
			return ref ifTrue;
		}
		return ref ifFalse;
	}

	protected static float CalculateLengthValue(in FlexLength length, float fillValue, float defaultValue)
	{
		if (!length.HasValue)
		{
			return defaultValue;
		}
		if (length.Unit != FlexUnit.Percent)
		{
			return length.Value;
		}
		return length.Value / 100f * fillValue;
	}
}
