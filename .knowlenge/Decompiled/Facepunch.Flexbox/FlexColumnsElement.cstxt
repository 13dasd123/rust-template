using System;
using Facepunch.Flexbox;
using UnityEngine;
using UnityEngine.Serialization;

[ExecuteAlways]
[RequireComponent(typeof(RectTransform))]
[DisallowMultipleComponent]
public class FlexColumnsElement : FlexElementBase
{
	private struct ColumnParameters
	{
		public float Height;

		public float Offset;
	}

	[Tooltip("Spacing to add from this elements borders to where children are laid out.")]
	public FlexPadding Padding;

	[Min(0f)]
	[Tooltip("Spacing to add between each child flex item.")]
	public float Gap;

	[Tooltip("Enable this to use a fixed number of columns.")]
	public bool FixedColumnCount;

	[Min(1f)]
	[Tooltip("The number of columns to use when using a fixed number of columns.")]
	public int ColumnCount = 1;

	[Min(1f)]
	[Tooltip("The minimum width of each column when not using a fixed number of columns.")]
	[FormerlySerializedAs("ColumnWidth")]
	public int ColumnMinWidth = 100;

	private int _calculatedColumnCount;

	private ColumnParameters[] _columnParams = Array.Empty<ColumnParameters>();

	protected override void MeasureHorizontalImpl()
	{
		float num = 0f;
		bool flag = true;
		foreach (IFlexNode child in Children)
		{
			if (child.IsDirty)
			{
				child.MeasureHorizontal();
			}
			child.GetScale(out var scaleX, out var scaleY);
			child.GetPreferredSize(out var preferredWidth, out scaleY);
			float num2 = (flag ? 0f : Gap);
			num += preferredWidth * scaleX + num2;
			if (flag)
			{
				flag = false;
			}
		}
		float b = ((Basis.HasValue && Basis.Unit == FlexUnit.Pixels) ? Basis.Value : 0f);
		float a = ((MinWidth.HasValue && MinWidth.Unit == FlexUnit.Pixels) ? MinWidth.Value : 0f);
		float max = ((MaxWidth.HasValue && MaxWidth.Unit == FlexUnit.Pixels) ? MaxWidth.Value : float.PositiveInfinity);
		float num3 = Padding.left + Padding.right;
		PrefWidth = Mathf.Clamp(num + num3, Mathf.Max(a, b), max);
	}

	protected override void LayoutHorizontalImpl(float maxWidth, float maxHeight)
	{
		float num = maxWidth - Padding.left - Padding.right;
		_calculatedColumnCount = (FixedColumnCount ? ColumnCount : Mathf.Max(Mathf.FloorToInt((num + Gap) / ((float)ColumnMinWidth + Gap)), 1));
		int num2 = Mathf.Max(_calculatedColumnCount - 1, 0);
		float num3 = (num - Gap * (float)num2) / (float)_calculatedColumnCount;
		int num4 = 0;
		foreach (IFlexNode child in Children)
		{
			float min = FlexElementBase.CalculateLengthValue(child.MinWidth, num, 0f);
			float max = FlexElementBase.CalculateLengthValue(child.MaxWidth, num, float.PositiveInfinity);
			float num5 = Mathf.Clamp(num3, min, max);
			child.LayoutHorizontal(num5, float.PositiveInfinity);
			RectTransform rectTransform = child.Transform;
			rectTransform.sizeDelta = new Vector2(num5, rectTransform.sizeDelta.y);
			Vector2 anchoredPosition = rectTransform.anchoredPosition;
			rectTransform.anchoredPosition = new Vector2(Padding.left + (num3 + Gap) * (float)num4, anchoredPosition.y);
			num4++;
			if (num4 >= _calculatedColumnCount)
			{
				num4 = 0;
			}
		}
	}

	protected override void MeasureVerticalImpl()
	{
		EnsureColumnParamsSize();
		for (int i = 0; i < _calculatedColumnCount; i++)
		{
			_columnParams[i].Height = 0f;
		}
		int num = 0;
		bool flag = true;
		foreach (IFlexNode child in Children)
		{
			if (child.IsDirty)
			{
				child.MeasureVertical();
			}
			child.GetScale(out var scaleX, out var scaleY);
			child.GetPreferredSize(out scaleX, out var preferredHeight);
			float num2 = (flag ? 0f : Gap);
			_columnParams[num].Height += preferredHeight * scaleY + num2;
			num++;
			if (num >= _calculatedColumnCount)
			{
				num = 0;
				flag = false;
			}
		}
		float b = ((Basis.HasValue && Basis.Unit == FlexUnit.Pixels) ? Basis.Value : 0f);
		float a = ((MinHeight.HasValue && MinHeight.Unit == FlexUnit.Pixels) ? MinHeight.Value : 0f);
		float max = ((MaxHeight.HasValue && MaxHeight.Unit == FlexUnit.Pixels) ? MaxHeight.Value : float.PositiveInfinity);
		float num3 = 0f;
		for (int j = 0; j < _calculatedColumnCount; j++)
		{
			float height = _columnParams[j].Height;
			if (height > num3)
			{
				num3 = height;
			}
		}
		float num4 = Padding.top + Padding.bottom;
		PrefHeight = Mathf.Clamp(num3 + num4, Mathf.Max(a, b), max);
	}

	protected override void LayoutVerticalImpl(float maxWidth, float maxHeight)
	{
		float fillValue = maxHeight - Padding.top - Padding.bottom;
		EnsureColumnParamsSize();
		for (int i = 0; i < _calculatedColumnCount; i++)
		{
			_columnParams[i].Offset = 0f;
		}
		int num = 0;
		foreach (IFlexNode child in Children)
		{
			ref ColumnParameters reference = ref _columnParams[num];
			float min = FlexElementBase.CalculateLengthValue(child.MinHeight, fillValue, 0f);
			float max = FlexElementBase.CalculateLengthValue(child.MaxHeight, fillValue, float.PositiveInfinity);
			child.GetPreferredSize(out var _, out var preferredHeight);
			float num2 = Mathf.Clamp(preferredHeight, min, max);
			child.LayoutVertical(float.PositiveInfinity, num2);
			RectTransform rectTransform = child.Transform;
			rectTransform.sizeDelta = new Vector2(rectTransform.sizeDelta.x, num2);
			rectTransform.anchoredPosition = new Vector2(rectTransform.anchoredPosition.x, 0f - (Padding.top + reference.Offset));
			reference.Offset += num2 + Gap;
			num++;
			if (num >= _calculatedColumnCount)
			{
				num = 0;
			}
		}
	}

	private void EnsureColumnParamsSize()
	{
		if (_columnParams.Length < _calculatedColumnCount)
		{
			Array.Resize(ref _columnParams, _calculatedColumnCount);
		}
	}
}
