using System;
using System.Collections.Generic;
using Facepunch.Flexbox;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class FlexTransition : MonoBehaviour
{
	public enum TransitionProperty
	{
		PaddingLeft = 0,
		PaddingRight = 1,
		PaddingTop = 2,
		PaddingBottom = 3,
		Gap = 4,
		MinWidth = 5,
		MinHeight = 6,
		MaxWidth = 7,
		MaxHeight = 8,
		ScaleX = 100,
		ScaleY = 101,
		ImageColor = 102,
		TextColor = 103,
		CanvasAlpha = 104,
		RotationZ = 105
	}

	[Serializable]
	public struct Definition
	{
		public TransitionProperty Property;

		public UnityEngine.Object Object;

		public float FromFloat;

		public float ToFloat;

		public Color FromColor;

		public Color ToColor;

		[Min(0f)]
		public float Duration;

		public LeanTweenType Ease;
	}

	public Definition[] Transitions;

	private readonly List<int> _pendingIds = new List<int>();

	private bool _currentState;

	public void Start()
	{
		SwitchState(enabled: false, animate: false);
	}

	public void SwitchState(bool enabled, bool animate)
	{
		_currentState = enabled;
		if (Transitions == null || Transitions.Length == 0)
		{
			return;
		}
		foreach (int pendingId in _pendingIds)
		{
			LeanTween.cancel(pendingId);
		}
		_pendingIds.Clear();
		for (int i = 0; i < Transitions.Length; i++)
		{
			LTDescr lTDescr = RunTransitionImpl(in Transitions[i], animate);
			if (lTDescr != null)
			{
				_pendingIds.Add(lTDescr.uniqueId);
			}
		}
	}

	public void SwitchState(bool enabled)
	{
		SwitchState(enabled, animate: true);
	}

	public void ToggleState()
	{
		SwitchState(!_currentState);
	}

	private LTDescr RunTransitionImpl(in Definition transition, bool animate)
	{
		LTDescr result = null;
		switch (transition.Property)
		{
		case TransitionProperty.ScaleX:
		{
			FlexElement flexElement3 = transition.Object as FlexElement;
			if (flexElement3 == null)
			{
				break;
			}
			float num5 = (_currentState ? transition.ToFloat : transition.FromFloat);
			if (animate)
			{
				result = LeanTween.scaleX(flexElement3.gameObject, num5, transition.Duration).setEase(transition.Ease).setOnUpdate(delegate(float value, object obj)
				{
					FlexElement flexElement4 = (FlexElement)obj;
					if (flexElement4 != null)
					{
						flexElement4.SetLayoutDirty();
					}
				}, flexElement3);
			}
			else
			{
				Vector3 localScale2 = flexElement3.transform.localScale;
				localScale2.x = num5;
				flexElement3.transform.localScale = localScale2;
				flexElement3.SetLayoutDirty();
			}
			break;
		}
		case TransitionProperty.ScaleY:
		{
			FlexElement flexElement = transition.Object as FlexElement;
			if (flexElement == null)
			{
				break;
			}
			float num3 = (_currentState ? transition.ToFloat : transition.FromFloat);
			if (animate)
			{
				result = LeanTween.scaleY(flexElement.gameObject, num3, transition.Duration).setEase(transition.Ease).setOnUpdate(delegate(float value, object obj)
				{
					FlexElement flexElement2 = (FlexElement)obj;
					if (flexElement2 != null)
					{
						flexElement2.SetLayoutDirty();
					}
				}, flexElement);
			}
			else
			{
				Vector3 localScale = flexElement.transform.localScale;
				localScale.y = num3;
				flexElement.transform.localScale = localScale;
				flexElement.SetLayoutDirty();
			}
			break;
		}
		case TransitionProperty.ImageColor:
		{
			Image image = transition.Object as Image;
			if (image == null)
			{
				break;
			}
			Color startValue2 = image.color;
			Color targetValue2 = (_currentState ? transition.ToColor : transition.FromColor);
			if (animate)
			{
				result = LeanTween.value(image.gameObject, 0f, 1f, transition.Duration).setEase(transition.Ease).setOnUpdate(delegate(float value)
				{
					if (image != null)
					{
						image.color = Color.Lerp(startValue2, targetValue2, value);
					}
				});
			}
			else
			{
				image.color = targetValue2;
			}
			break;
		}
		case TransitionProperty.TextColor:
		{
			TMP_Text text = transition.Object as TMP_Text;
			if (text == null)
			{
				break;
			}
			Color startValue = text.color;
			Color targetValue = (_currentState ? transition.ToColor : transition.FromColor);
			if (animate)
			{
				result = LeanTween.value(text.gameObject, 0f, 1f, transition.Duration).setEase(transition.Ease).setOnUpdate(delegate(float value)
				{
					if (text != null)
					{
						text.color = Color.Lerp(startValue, targetValue, value);
					}
				});
			}
			else
			{
				text.color = targetValue;
			}
			break;
		}
		case TransitionProperty.CanvasAlpha:
		{
			CanvasGroup canvasGroup = transition.Object as CanvasGroup;
			if (!(canvasGroup == null))
			{
				float num4 = (_currentState ? transition.ToFloat : transition.FromFloat);
				if (animate)
				{
					result = LeanTween.alphaCanvas(canvasGroup, num4, transition.Duration).setEase(transition.Ease);
				}
				else
				{
					canvasGroup.alpha = num4;
				}
			}
			break;
		}
		case TransitionProperty.RotationZ:
		{
			Transform transform = transition.Object as Transform;
			if (!(transform == null))
			{
				float num2 = (_currentState ? transition.ToFloat : transition.FromFloat);
				if (animate)
				{
					result = LeanTween.rotateZ(transform.gameObject, num2, transition.Duration).setEase(transition.Ease);
					break;
				}
				Vector3 localEulerAngles = transform.localEulerAngles;
				localEulerAngles.z = num2;
				transform.localEulerAngles = localEulerAngles;
			}
			break;
		}
		default:
		{
			FlexElement element = transition.Object as FlexElement;
			if (element == null)
			{
				break;
			}
			TransitionProperty property = transition.Property;
			float num = (_currentState ? transition.ToFloat : transition.FromFloat);
			if (animate)
			{
				result = LeanTween.value(element.gameObject, Property(element, property), num, transition.Duration).setEase(transition.Ease).setOnUpdate(delegate(float newValue, object _)
				{
					if (element != null)
					{
						Property(element, property) = newValue;
						element.SetLayoutDirty();
					}
				}, this);
			}
			else
			{
				Property(element, property) = num;
				element.SetLayoutDirty();
			}
			break;
		}
		}
		return result;
	}

	private static ref float Property(FlexElement element, TransitionProperty property)
	{
		return property switch
		{
			TransitionProperty.PaddingLeft => ref element.Padding.left, 
			TransitionProperty.PaddingRight => ref element.Padding.right, 
			TransitionProperty.PaddingTop => ref element.Padding.top, 
			TransitionProperty.PaddingBottom => ref element.Padding.bottom, 
			TransitionProperty.Gap => ref element.Gap, 
			TransitionProperty.MinWidth => ref element.MinWidth.Value, 
			TransitionProperty.MinHeight => ref element.MinHeight.Value, 
			TransitionProperty.MaxWidth => ref element.MaxWidth.Value, 
			TransitionProperty.MaxHeight => ref element.MaxHeight.Value, 
			_ => throw new NotSupportedException(string.Format("{0} {1}", "TransitionProperty", property)), 
		};
	}
}
