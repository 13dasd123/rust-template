using System;
using System.Collections;
using System.Collections.Generic;
using Facepunch.Flexbox;
using UnityEngine;

internal struct FlexChildEnumerator : IEnumerator<IFlexNode>, IEnumerator, IDisposable
{
	private readonly Transform _parent;

	private readonly int _childCount;

	private readonly bool _reversed;

	private int _index;

	public IFlexNode Current { get; private set; }

	object IEnumerator.Current => Current;

	public FlexChildEnumerator(FlexElementBase parent, bool reversed)
	{
		_parent = ((Component)parent).transform;
		_childCount = _parent.childCount;
		_reversed = reversed;
		_index = (reversed ? (_childCount - 1) : 0);
		Current = null;
	}

	public bool MoveNext()
	{
		IFlexNode flexNode = default(IFlexNode);
		while (true)
		{
			if (_reversed ? (_index < 0) : (_index >= _childCount))
			{
				Current = null;
				return false;
			}
			if (((Component)_parent.GetChild(_index)).gameObject.TryGetComponent<IFlexNode>(ref flexNode) && flexNode.IsActive && !flexNode.IsAbsolute)
			{
				break;
			}
			_index += ((!_reversed) ? 1 : (-1));
		}
		Current = flexNode;
		_index += ((!_reversed) ? 1 : (-1));
		return true;
	}

	public void Reset()
	{
	}

	public void Dispose()
	{
	}
}
