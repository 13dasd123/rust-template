using Facepunch.Flexbox;
using TMPro;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.UI;

[ExecuteAlways]
[RequireComponent(typeof(RectTransform))]
[DisallowMultipleComponent]
public class FlexText : TextMeshProUGUI, IFlexNode
{
	[Tooltip("Controls the initial size of the element before factoring in grow/shrink.")]
	public FlexLength Basis;

	[Min(0f)]
	[Tooltip("How much this flex element should grow relative to its siblings.")]
	public int Grow = 1;

	[Min(0f)]
	[Tooltip("How much this flex element should shrink relative to its siblings.")]
	public int Shrink = 1;

	[Tooltip("Optionally override the parent's cross axis alignment for this element.")]
	public FlexAlignSelf AlignSelf;

	[Tooltip("The minimum allowed dimensions of this flex element.")]
	public FlexLength MinWidth;

	[Tooltip("The minimum allowed dimensions of this flex element.")]
	public FlexLength MaxWidth;

	[Tooltip("The maximum allowed dimensions of this flex element.")]
	public FlexLength MinHeight;

	[Tooltip("The maximum allowed dimensions of this flex element.")]
	public FlexLength MaxHeight;

	private bool _isDirty;

	private float _preferredWidth;

	private float _preferredHeight;

	RectTransform IFlexNode.Transform => (RectTransform)((TMP_Text)this).transform;

	bool IFlexNode.IsActive => ((Behaviour)this).isActiveAndEnabled;

	bool IFlexNode.IsAbsolute => false;

	bool IFlexNode.IsDirty => _isDirty;

	FlexLength IFlexNode.MinWidth => MinWidth;

	FlexLength IFlexNode.MaxWidth => MaxWidth;

	FlexLength IFlexNode.MinHeight => MinHeight;

	FlexLength IFlexNode.MaxHeight => MaxHeight;

	FlexLength IFlexNode.Basis => Basis;

	int IFlexNode.Grow => Grow;

	int IFlexNode.Shrink => Shrink;

	FlexAlignSelf IFlexNode.AlignSelf => AlignSelf;

	protected override void OnEnable()
	{
		((TextMeshProUGUI)this).OnEnable();
		((Graphic)this).SetLayoutDirty();
	}

	protected override void OnDisable()
	{
		((TextMeshProUGUI)this).OnDisable();
		((Graphic)this).SetLayoutDirty();
	}

	public override void SetLayoutDirty()
	{
		_isDirty = true;
		((TextMeshProUGUI)this).SetLayoutDirty();
		Transform parent = ((TMP_Text)this).transform.parent;
		IFlexNode flexNode = default(IFlexNode);
		if ((Object)(object)parent != (Object)null && ((Component)parent).TryGetComponent<IFlexNode>(ref flexNode) && flexNode.IsActive)
		{
			flexNode.SetLayoutDirty();
		}
	}

	void IFlexNode.SetupTransform()
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		RectTransform val = (RectTransform)((TMP_Text)this).transform;
		((Transform)val).localRotation = Quaternion.identity;
		val.pivot = new Vector2(0f, 1f);
		val.anchorMin = new Vector2(0f, 1f);
		val.anchorMax = new Vector2(0f, 1f);
	}

	void IFlexNode.SetLayoutDirty(bool force)
	{
		if (force || ((UIBehaviour)this).IsActive())
		{
			((Graphic)this).SetLayoutDirty();
		}
	}

	void IFlexNode.MeasureHorizontal()
	{
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		float valueOrDefault = MaxWidth.GetValueOrDefault(float.PositiveInfinity);
		float valueOrDefault2 = MaxHeight.GetValueOrDefault(float.PositiveInfinity);
		Vector2 preferredValues = ((TMP_Text)this).GetPreferredValues(valueOrDefault, valueOrDefault2);
		_preferredWidth = Mathf.Max(Mathf.Min(preferredValues.x, valueOrDefault), MinWidth.GetValueOrDefault(0f));
		_preferredHeight = Mathf.Max(Mathf.Min(preferredValues.y, valueOrDefault2), MinHeight.GetValueOrDefault(0f));
	}

	void IFlexNode.LayoutHorizontal(float maxWidth, float maxHeight)
	{
	}

	void IFlexNode.MeasureVertical()
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		Vector2 sizeDelta = ((RectTransform)((TMP_Text)this).transform).sizeDelta;
		float valueOrDefault = MaxWidth.GetValueOrDefault(float.PositiveInfinity);
		float valueOrDefault2 = MaxHeight.GetValueOrDefault(float.PositiveInfinity);
		Vector2 preferredValues = ((TMP_Text)this).GetPreferredValues(sizeDelta.x, valueOrDefault2);
		_preferredWidth = Mathf.Max(Mathf.Min(preferredValues.x, valueOrDefault), MinWidth.GetValueOrDefault(0f));
		_preferredHeight = Mathf.Max(Mathf.Min(preferredValues.y, valueOrDefault2), MinHeight.GetValueOrDefault(0f));
	}

	void IFlexNode.LayoutVertical(float maxWidth, float maxHeight)
	{
		_isDirty = false;
	}

	void IFlexNode.GetScale(out float scaleX, out float scaleY)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		Vector3 localScale = ((Transform)(RectTransform)((TMP_Text)this).transform).localScale;
		scaleX = localScale.x;
		scaleY = localScale.y;
	}

	void IFlexNode.GetPreferredSize(out float preferredWidth, out float preferredHeight)
	{
		preferredWidth = _preferredWidth;
		preferredHeight = _preferredHeight;
	}
}
