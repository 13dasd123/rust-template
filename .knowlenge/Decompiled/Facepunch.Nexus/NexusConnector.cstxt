using System;
using System.Diagnostics;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
using Facepunch.Nexus;
using Facepunch.Nexus.Connector;
using Facepunch.Nexus.Logging;
using Facepunch.Nexus.Models;
using Newtonsoft.Json;

internal class NexusConnector : Object, INexusConnector
{
	private struct Request : ValueType
	{
		[field: CompilerGenerated]
		public HttpMethod Method
		{
			[CompilerGenerated]
			get;
			[CompilerGenerated]
			set;
		}

		[field: CompilerGenerated]
		public string Url
		{
			[CompilerGenerated]
			get;
			[CompilerGenerated]
			set;
		}

		[field: CompilerGenerated]
		public HttpContent Content
		{
			[CompilerGenerated]
			get;
			[CompilerGenerated]
			set;
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <GetNexus>d__7 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<NexusDetails> <>t__builder;

		public NexusConnector <>4__this;

		public int nexusId;

		private TaskAwaiter<ApiResult<NexusDetails>> <>u__1;

		private void MoveNext()
		{
			//IL_0095: Expected O, but got Unknown
			//IL_0065: Unknown result type (might be due to invalid IL or missing references)
			//IL_006a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			//IL_0033: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Unknown result type (might be due to invalid IL or missing references)
			//IL_004d: Unknown result type (might be due to invalid IL or missing references)
			//IL_004f: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusConnector nexusConnector = <>4__this;
			NexusDetails response;
			try
			{
				TaskAwaiter<ApiResult<NexusDetails>> val;
				if (num != 0)
				{
					val = nexusConnector.GetRequest<NexusDetails>(String.Format("{0}/{1}", (object)nexusConnector.BaseUrl, (object)nexusId)).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<TaskAwaiter<ApiResult<NexusDetails>>, <GetNexus>d__7>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter<ApiResult<NexusDetails>>);
					num = (<>1__state = -1);
				}
				response = val.GetResult().Response;
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(response);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <ListNexuses>d__6 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<NexusListing> <>t__builder;

		public string publicKey;

		public NexusConnector <>4__this;

		public NexusRealm realm;

		private TaskAwaiter<ApiResult<NexusListing>> <>u__1;

		private void MoveNext()
		{
			//IL_00b8: Expected O, but got Unknown
			//IL_0088: Unknown result type (might be due to invalid IL or missing references)
			//IL_008d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0095: Unknown result type (might be due to invalid IL or missing references)
			//IL_0056: Unknown result type (might be due to invalid IL or missing references)
			//IL_005b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_0070: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusConnector nexusConnector = <>4__this;
			NexusListing response;
			try
			{
				TaskAwaiter<ApiResult<NexusListing>> val;
				if (num != 0)
				{
					if (String.IsNullOrWhiteSpace(publicKey))
					{
						throw new ArgumentNullException("publicKey");
					}
					val = nexusConnector.GetRequest<NexusListing>(String.Format("{0}?publicKey={1}&realm={2}", (object)nexusConnector.BaseUrl, (object)WebUtility.UrlEncode(publicKey), (object)(Int32)realm)).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<TaskAwaiter<ApiResult<NexusListing>>, <ListNexuses>d__6>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter<ApiResult<NexusListing>>);
					num = (<>1__state = -1);
				}
				response = val.GetResult().Response;
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(response);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <SendRequestImpl>d__20<TResponse> : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<ApiResult<TResponse>> <>t__builder;

		public string authToken;

		public Request request;

		public NexusConnector <>4__this;

		public Func<HttpResponseMessage, Task<TResponse>> responseReader;

		private AuthenticationHeaderValue <auth>5__2;

		private int <retryCount>5__3;

		private HttpResponseMessage <response>5__4;

		private ConfiguredTaskAwaiter<HttpResponseMessage> <>u__1;

		private ConfiguredTaskAwaiter <>u__2;

		private ConfiguredTaskAwaiter<TResponse> <>u__3;

		private void MoveNext()
		{
			//IL_010d: Expected O, but got Unknown
			//IL_030b: Expected O, but got Unknown
			//IL_01bf: Unknown result type (might be due to invalid IL or missing references)
			//IL_01c4: Unknown result type (might be due to invalid IL or missing references)
			//IL_01cc: Unknown result type (might be due to invalid IL or missing references)
			//IL_02bc: Unknown result type (might be due to invalid IL or missing references)
			//IL_02c1: Unknown result type (might be due to invalid IL or missing references)
			//IL_02c9: Unknown result type (might be due to invalid IL or missing references)
			//IL_012e: Unknown result type (might be due to invalid IL or missing references)
			//IL_02e7: Unknown result type (might be due to invalid IL or missing references)
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
			//IL_009e: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
			//IL_005e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0063: Unknown result type (might be due to invalid IL or missing references)
			//IL_0074: Unknown result type (might be due to invalid IL or missing references)
			//IL_0086: Expected O, but got Unknown
			//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
			//IL_0176: Unknown result type (might be due to invalid IL or missing references)
			//IL_0181: Unknown result type (might be due to invalid IL or missing references)
			//IL_0186: Unknown result type (might be due to invalid IL or missing references)
			//IL_018a: Unknown result type (might be due to invalid IL or missing references)
			//IL_018f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0228: Unknown result type (might be due to invalid IL or missing references)
			//IL_0232: Invalid comparison between Unknown and I4
			//IL_01a4: Unknown result type (might be due to invalid IL or missing references)
			//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
			//IL_025d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0267: Invalid comparison between Unknown and I4
			//IL_0251: Unknown result type (might be due to invalid IL or missing references)
			//IL_021c: Unknown result type (might be due to invalid IL or missing references)
			//IL_02fc: Unknown result type (might be due to invalid IL or missing references)
			//IL_027e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0283: Unknown result type (might be due to invalid IL or missing references)
			//IL_0287: Unknown result type (might be due to invalid IL or missing references)
			//IL_028c: Unknown result type (might be due to invalid IL or missing references)
			//IL_02a1: Unknown result type (might be due to invalid IL or missing references)
			//IL_02a3: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusConnector nexusConnector = <>4__this;
			ApiResult<TResponse> result2;
			try
			{
				HttpRequestMessage val3 = default(HttpRequestMessage);
				ConfiguredTaskAwaiter val2;
				ConfiguredTaskAwaiter<TResponse> val;
				TResponse result;
				HttpRequestMessage val7;
				switch (num)
				{
				default:
					<auth>5__2 = ((authToken == null) ? ((AuthenticationHeaderValue)null) : new AuthenticationHeaderValue("Bearer", authToken));
					<retryCount>5__3 = 0;
					goto IL_0048;
				case 0:
				{
					try
					{
						ConfiguredTaskAwaiter<HttpResponseMessage> val4;
						if (num != 0)
						{
							val4 = nexusConnector.HttpClient.SendAsync(val3).ConfigureAwait(false).GetAwaiter();
							if (!val4.IsCompleted)
							{
								num = (<>1__state = 0);
								<>u__1 = val4;
								System.Runtime.CompilerServices.Unsafe.As<AsyncTaskMethodBuilder<ApiResult<TResponse>>, AsyncTaskMethodBuilder<ApiResult<ApiResult<TResponse>>>>(ref <>t__builder).AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<HttpResponseMessage>, <SendRequestImpl>d__20<TResponse>>(ref val4, ref this);
								return;
							}
						}
						else
						{
							val4 = <>u__1;
							<>u__1 = default(ConfiguredTaskAwaiter<HttpResponseMessage>);
							num = (<>1__state = -1);
						}
						HttpResponseMessage result3 = val4.GetResult();
						<response>5__4 = result3;
					}
					catch (HttpRequestException val5)
					{
						HttpRequestException exception = val5;
						nexusConnector.Logger.LogWarn("Failed to send HTTP request to Nexus", (Exception)(object)exception);
					}
					HttpResponseMessage obj = <response>5__4;
					int num2 = ((obj != null) ? ((int)obj.StatusCode) : 0);
					if (<response>5__4 == null || (num2 >= 500 && num2 <= 599))
					{
						if (<retryCount>5__3 <= 5)
						{
							ConfiguredTaskAwaitable val6 = Task.Delay(TimeSpan.FromSeconds(Math.Pow(3.0, (double)<retryCount>5__3))).ConfigureAwait(false);
							val2 = ((ConfiguredTaskAwaitable)(ref val6)).GetAwaiter();
							if (!((ConfiguredTaskAwaiter)(ref val2)).IsCompleted)
							{
								num = (<>1__state = 1);
								<>u__2 = val2;
								System.Runtime.CompilerServices.Unsafe.As<AsyncTaskMethodBuilder<ApiResult<TResponse>>, AsyncTaskMethodBuilder<ApiResult<ApiResult<TResponse>>>>(ref <>t__builder).AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter, <SendRequestImpl>d__20<TResponse>>(ref val2, ref this);
								return;
							}
							goto IL_01db;
						}
						HttpResponseMessage obj2 = <response>5__4;
						if (obj2 != null)
						{
							obj2.EnsureSuccessStatusCode();
						}
						throw new Exception(String.Format("Expected EnsureSuccessStatusCode to throw for status {0}", (object)num2));
					}
					if ((int)<response>5__4.StatusCode == 401)
					{
						<response>5__4.EnsureSuccessStatusCode();
						throw new Exception(String.Format("Expected EnsureSuccessStatusCode to throw for status {0}", (object)num2));
					}
					if ((int)<response>5__4.StatusCode == 200)
					{
						val = ((Func<HttpResponseMessage, Task<HttpResponseMessage>>)(object)responseReader).Invoke(<response>5__4).ConfigureAwait(false).GetAwaiter();
						if (!val.IsCompleted)
						{
							num = (<>1__state = 2);
							<>u__3 = val;
							System.Runtime.CompilerServices.Unsafe.As<AsyncTaskMethodBuilder<ApiResult<TResponse>>, AsyncTaskMethodBuilder<ApiResult<ApiResult<TResponse>>>>(ref <>t__builder).AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<TResponse>, <SendRequestImpl>d__20<TResponse>>(ref val, ref this);
							return;
						}
						goto IL_02d8;
					}
					result2 = new ApiResult<TResponse>(<response>5__4.StatusCode);
					break;
				}
				case 1:
					val2 = <>u__2;
					<>u__2 = default(ConfiguredTaskAwaiter);
					num = (<>1__state = -1);
					goto IL_01db;
				case 2:
					{
						val = <>u__3;
						<>u__3 = default(ConfiguredTaskAwaiter<TResponse>);
						num = (<>1__state = -1);
						goto IL_02d8;
					}
					IL_02d8:
					result = val.GetResult();
					result2 = new ApiResult<TResponse>(<response>5__4.StatusCode, result);
					break;
					IL_01db:
					((ConfiguredTaskAwaiter)(ref val2)).GetResult();
					<retryCount>5__3++;
					goto IL_0048;
					IL_0048:
					val7 = new HttpRequestMessage(request.Method, request.Url);
					val7.Headers.Authorization = <auth>5__2;
					val7.Content = request.Content;
					val3 = val7;
					<response>5__4 = null;
					goto case 0;
				}
			}
			catch (Exception val8)
			{
				Exception exception2 = val8;
				<>1__state = -2;
				<auth>5__2 = null;
				System.Runtime.CompilerServices.Unsafe.As<AsyncTaskMethodBuilder<ApiResult<TResponse>>, AsyncTaskMethodBuilder<ApiResult<ApiResult<TResponse>>>>(ref <>t__builder).SetException(exception2);
				return;
			}
			<>1__state = -2;
			<auth>5__2 = null;
			System.Runtime.CompilerServices.Unsafe.As<AsyncTaskMethodBuilder<ApiResult<TResponse>>, AsyncTaskMethodBuilder<ApiResult<ApiResult<TResponse>>>>(ref <>t__builder).SetResult((ApiResult<ApiResult<TResponse>>)result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			System.Runtime.CompilerServices.Unsafe.As<AsyncTaskMethodBuilder<ApiResult<TResponse>>, AsyncTaskMethodBuilder<ApiResult<ApiResult<TResponse>>>>(ref <>t__builder).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <SendRequestWithoutResponse>d__19 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<ApiResult> <>t__builder;

		public NexusConnector <>4__this;

		public Request request;

		public string authToken;

		private TaskAwaiter<ApiResult<int>> <>u__1;

		private void MoveNext()
		{
			//IL_00a9: Expected O, but got Unknown
			//IL_0074: Unknown result type (might be due to invalid IL or missing references)
			//IL_0079: Unknown result type (might be due to invalid IL or missing references)
			//IL_0081: Unknown result type (might be due to invalid IL or missing references)
			//IL_009a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0042: Unknown result type (might be due to invalid IL or missing references)
			//IL_0047: Unknown result type (might be due to invalid IL or missing references)
			//IL_005c: Unknown result type (might be due to invalid IL or missing references)
			//IL_005e: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusConnector nexusConnector = <>4__this;
			ApiResult result;
			try
			{
				TaskAwaiter<ApiResult<int>> val;
				if (num != 0)
				{
					val = nexusConnector.SendRequestImpl<int>(request, authToken, (HttpResponseMessage _) => CompletedDummyTask).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<TaskAwaiter<ApiResult<int>>, <SendRequestWithoutResponse>d__19>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter<ApiResult<int>>);
					num = (<>1__state = -1);
				}
				result = new ApiResult(val.GetResult().StatusCode);
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	private const int MaxRetryCount = 5;

	private const double BaseRetryDelay = 3.0;

	protected readonly INexusLogger Logger;

	protected readonly string BaseUrl;

	protected readonly HttpClient HttpClient;

	private static readonly Task<int> CompletedDummyTask = Task.FromResult<int>(0);

	public NexusConnector(INexusLogger logger, string baseUrl)
	{
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Expected O, but got Unknown
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		Logger = logger ?? NullLogger.Instance;
		BaseUrl = ((baseUrl != null) ? baseUrl.TrimEnd((char[])(object)new Char[1] { (Char)47 }) : null) ?? throw new ArgumentNullException("baseUrl");
		HttpClient = new HttpClient();
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<NexusListing> ListNexuses(string publicKey, NexusRealm realm)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<ListNexuses>d__6 <ListNexuses>d__ = default(<ListNexuses>d__6);
		<ListNexuses>d__.<>t__builder = AsyncTaskMethodBuilder<NexusListing>.Create();
		<ListNexuses>d__.<>4__this = this;
		<ListNexuses>d__.publicKey = publicKey;
		<ListNexuses>d__.realm = realm;
		<ListNexuses>d__.<>1__state = -1;
		<ListNexuses>d__.<>t__builder.Start<<ListNexuses>d__6>(ref <ListNexuses>d__);
		return <ListNexuses>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<NexusDetails> GetNexus(int nexusId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<GetNexus>d__7 <GetNexus>d__ = default(<GetNexus>d__7);
		<GetNexus>d__.<>t__builder = AsyncTaskMethodBuilder<NexusDetails>.Create();
		<GetNexus>d__.<>4__this = this;
		<GetNexus>d__.nexusId = nexusId;
		<GetNexus>d__.<>1__state = -1;
		<GetNexus>d__.<>t__builder.Start<<GetNexus>d__7>(ref <GetNexus>d__);
		return <GetNexus>d__.<>t__builder.Task;
	}

	protected Task<ApiResult<TResponse>> GetRequest<TResponse>(string url, string authToken = null)
	{
		Request request = new Request
		{
			Method = HttpMethod.Get,
			Url = url
		};
		return SendRequest<TResponse>(in request, authToken);
	}

	protected Task<ApiResult<TResponse>> PostRequest<TResponse>(string url, string authToken = null)
	{
		Request request = new Request
		{
			Method = HttpMethod.Post,
			Url = url
		};
		return SendRequest<TResponse>(in request, authToken);
	}

	protected Task<ApiResult<TResponse>> PostRequest<TRequest, TResponse>(string url, TRequest requestBody, string authToken = null)
	{
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Expected O, but got Unknown
		StringContent content = new StringContent(JsonConvert.SerializeObject((object)requestBody), Encoding.UTF8, "application/json");
		Request request = new Request
		{
			Method = HttpMethod.Post,
			Url = url,
			Content = (HttpContent)(object)content
		};
		return SendRequest<TResponse>(in request, authToken);
	}

	protected Task<ApiResult<TResponse>> DeleteRequest<TResponse>(string url, string authToken = null)
	{
		Request request = new Request
		{
			Method = HttpMethod.Delete,
			Url = url
		};
		return SendRequest<TResponse>(in request, authToken);
	}

	protected Task<ApiResult> PostRequestWithoutResponse<TRequest>(string url, TRequest requestBody, string authToken = null)
	{
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Expected O, but got Unknown
		StringContent content = new StringContent(JsonConvert.SerializeObject((object)requestBody), Encoding.UTF8, "application/json");
		return SendRequestWithoutResponse(new Request
		{
			Method = HttpMethod.Post,
			Url = url,
			Content = (HttpContent)(object)content
		}, authToken);
	}

	protected Task<ApiResult> PostRequestWithoutResponse(string url, string authToken = null)
	{
		return SendRequestWithoutResponse(new Request
		{
			Method = HttpMethod.Post,
			Url = url
		}, authToken);
	}

	protected Task<ApiResult> PostRequestRawWithoutResponse(string url, string payload, string payloadMimeType, string authToken = null)
	{
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Expected O, but got Unknown
		return SendRequestWithoutResponse(new Request
		{
			Method = HttpMethod.Post,
			Url = url,
			Content = (HttpContent)new StringContent(payload, Encoding.UTF8, payloadMimeType)
		}, authToken);
	}

	protected Task<ApiResult> PostRequestRawWithoutResponse(string url, ArraySegment<byte> payload, string payloadMimeType, string authToken = null)
	{
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Expected O, but got Unknown
		ByteArrayContent val = new ByteArrayContent(payload.Array, payload.Offset, payload.Count);
		((HttpContent)val).Headers.ContentType = MediaTypeHeaderValue.Parse(payloadMimeType);
		return SendRequestWithoutResponse(new Request
		{
			Method = HttpMethod.Post,
			Url = url,
			Content = (HttpContent)(object)val
		}, authToken);
	}

	protected Task<ApiResult> DeleteRequestWithoutResponse(string url, string authToken = null)
	{
		return SendRequestWithoutResponse(new Request
		{
			Method = HttpMethod.Delete,
			Url = url
		}, authToken);
	}

	private unsafe Task<ApiResult<TResponse>> SendRequest<TResponse>(in Request request, string authToken = null)
	{
		return SendRequestImpl<TResponse>(request, authToken, [AsyncStateMachine(/*Could not decode attribute arguments.*/)] (HttpResponseMessage response) =>
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			<>c__17<TResponse>.<<SendRequest>b__17_0>d <<SendRequest>b__17_0>d = default(<>c__17<TResponse>.<<SendRequest>b__17_0>d);
			<<SendRequest>b__17_0>d.<>t__builder = AsyncTaskMethodBuilder<TResponse>.Create();
			<<SendRequest>b__17_0>d.response = response;
			<<SendRequest>b__17_0>d.<>1__state = -1;
			((AsyncTaskMethodBuilder<<>c__17<TResponse>.<<SendRequest>b__17_0>d>*)(&<<SendRequest>b__17_0>d.<>t__builder))->Start<<>c__17<TResponse>.<<SendRequest>b__17_0>d>(ref <<SendRequest>b__17_0>d);
			return <<SendRequest>b__17_0>d.<>t__builder.Task;
		});
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	private Task<ApiResult> SendRequestWithoutResponse(Request request, string authToken = null)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<SendRequestWithoutResponse>d__19 <SendRequestWithoutResponse>d__ = default(<SendRequestWithoutResponse>d__19);
		<SendRequestWithoutResponse>d__.<>t__builder = AsyncTaskMethodBuilder<ApiResult>.Create();
		<SendRequestWithoutResponse>d__.<>4__this = this;
		<SendRequestWithoutResponse>d__.request = request;
		<SendRequestWithoutResponse>d__.authToken = authToken;
		<SendRequestWithoutResponse>d__.<>1__state = -1;
		<SendRequestWithoutResponse>d__.<>t__builder.Start<<SendRequestWithoutResponse>d__19>(ref <SendRequestWithoutResponse>d__);
		return <SendRequestWithoutResponse>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	private unsafe Task<ApiResult<TResponse>> SendRequestImpl<TResponse>(Request request, string authToken, Func<HttpResponseMessage, Task<TResponse>> responseReader)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<SendRequestImpl>d__20<TResponse> <SendRequestImpl>d__ = default(<SendRequestImpl>d__20<TResponse>);
		<SendRequestImpl>d__.<>t__builder = AsyncTaskMethodBuilder<ApiResult<TResponse>>.Create();
		<SendRequestImpl>d__.<>4__this = this;
		<SendRequestImpl>d__.request = request;
		<SendRequestImpl>d__.authToken = authToken;
		<SendRequestImpl>d__.responseReader = responseReader;
		<SendRequestImpl>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder<ApiResult<<SendRequestImpl>d__20<TResponse>>>*)(&<SendRequestImpl>d__.<>t__builder))->Start<<SendRequestImpl>d__20<TResponse>>(ref <SendRequestImpl>d__);
		return <SendRequestImpl>d__.<>t__builder.Task;
	}
}
