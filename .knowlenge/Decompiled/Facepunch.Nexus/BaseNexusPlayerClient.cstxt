using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;
using Facepunch.Nexus;
using Facepunch.Nexus.Connector;
using Facepunch.Nexus.Models;
using Facepunch.Nexus.Time;

public abstract class BaseNexusPlayerClient : BaseNexusClient
{
	[StructLayout(3)]
	[CompilerGenerated]
	private struct <SelectNexus>d__23 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncValueTaskMethodBuilder<PlayerDetails> <>t__builder;

		public int nexusId;

		public BaseNexusPlayerClient <>4__this;

		private NexusDetails <nexus>5__2;

		private ConfiguredValueTaskAwaiter<NexusDetails> <>u__1;

		private ConfiguredValueTaskAwaiter<PlayerDetails> <>u__2;

		private void MoveNext()
		{
			//IL_01d2: Expected O, but got Unknown
			//IL_0020: Unknown result type (might be due to invalid IL or missing references)
			//IL_009a: Unknown result type (might be due to invalid IL or missing references)
			//IL_009f: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
			//IL_0034: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
			//IL_00dd: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
			//IL_0116: Unknown result type (might be due to invalid IL or missing references)
			//IL_011b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0123: Unknown result type (might be due to invalid IL or missing references)
			//IL_005c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0061: Unknown result type (might be due to invalid IL or missing references)
			//IL_0065: Unknown result type (might be due to invalid IL or missing references)
			//IL_006a: Unknown result type (might be due to invalid IL or missing references)
			//IL_00fb: Unknown result type (might be due to invalid IL or missing references)
			//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
			//IL_007f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0081: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			BaseNexusPlayerClient baseNexusPlayerClient = <>4__this;
			PlayerDetails result3;
			try
			{
				if ((uint)num > 1u)
				{
					if (nexusId <= 0)
					{
						throw new ArgumentOutOfRangeException("nexusId");
					}
					if (baseNexusPlayerClient.NexusId > 0)
					{
						throw new InvalidOperationException("A nexus has already been selected");
					}
					baseNexusPlayerClient.Reset();
				}
				try
				{
					ConfiguredValueTaskAwaiter<PlayerDetails> val;
					ConfiguredValueTaskAwaiter<NexusDetails> val2;
					if (num != 0)
					{
						if (num == 1)
						{
							val = <>u__2;
							<>u__2 = default(ConfiguredValueTaskAwaiter<PlayerDetails>);
							num = (<>1__state = -1);
							goto IL_0132;
						}
						val2 = baseNexusPlayerClient.GetNexusDetails(nexusId).ConfigureAwait(false).GetAwaiter();
						if (!val2.IsCompleted)
						{
							num = (<>1__state = 0);
							<>u__1 = val2;
							<>t__builder.AwaitUnsafeOnCompleted<ConfiguredValueTaskAwaiter<NexusDetails>, <SelectNexus>d__23>(ref val2, ref this);
							return;
						}
					}
					else
					{
						val2 = <>u__1;
						<>u__1 = default(ConfiguredValueTaskAwaiter<NexusDetails>);
						num = (<>1__state = -1);
					}
					NexusDetails result = val2.GetResult();
					<nexus>5__2 = result;
					val = baseNexusPlayerClient.GetPlayerDetails(nexusId).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 1);
						<>u__2 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredValueTaskAwaiter<PlayerDetails>, <SelectNexus>d__23>(ref val, ref this);
						return;
					}
					goto IL_0132;
					IL_0132:
					PlayerDetails result2 = val.GetResult();
					NexusZoneDetails nexusZoneDetails = FindZone(<nexus>5__2, result2.ConnectZoneKey);
					baseNexusPlayerClient.UpdateVariables(baseNexusPlayerClient.NexusVariables, <nexus>5__2.Variables);
					baseNexusPlayerClient.UpdateVariables(baseNexusPlayerClient.ZoneVariables, nexusZoneDetails?.Variables);
					baseNexusPlayerClient.UpdateVariables(baseNexusPlayerClient.PlayerVariables, result2.Variables);
					baseNexusPlayerClient.NexusId = nexusId;
					baseNexusPlayerClient.ZoneKey = nexusZoneDetails?.Key;
					baseNexusPlayerClient.Nexus = <nexus>5__2;
					baseNexusPlayerClient.Player = result2;
					result3 = result2;
				}
				catch (Object)
				{
					baseNexusPlayerClient.Reset();
					throw;
				}
			}
			catch (Exception val4)
			{
				Exception exception = val4;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result3);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	private protected readonly VariableContainer NexusVariables;

	private protected readonly VariableContainer ZoneVariables;

	private protected readonly VariableContainer PlayerVariables;

	[field: CompilerGenerated]
	public int NexusId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		protected set;
	}

	[field: CompilerGenerated]
	public string ZoneKey
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		protected set;
	}

	[field: CompilerGenerated]
	public NexusDetails Nexus
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		protected set;
	}

	public NexusZoneDetails Zone => FindZone(Nexus, ZoneKey);

	[field: CompilerGenerated]
	public PlayerDetails Player
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		protected set;
	}

	protected override bool ShouldUpdateVariables
	{
		get
		{
			if (base.ShouldUpdateVariables)
			{
				return NexusId > 0;
			}
			return false;
		}
	}

	internal BaseNexusPlayerClient(INexusConnector connector, IClockProvider clock, double updateInterval)
		: base(connector, clock, updateInterval)
	{
		NexusVariables = new VariableContainer();
		ZoneVariables = new VariableContainer();
		PlayerVariables = new VariableContainer();
	}

	protected internal abstract System.Threading.Tasks.ValueTask<PlayerDetails> GetPlayerDetails(int nexusId);

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public System.Threading.Tasks.ValueTask<PlayerDetails> SelectNexus(int nexusId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<SelectNexus>d__23 <SelectNexus>d__ = default(<SelectNexus>d__23);
		<SelectNexus>d__.<>t__builder = AsyncValueTaskMethodBuilder<PlayerDetails>.Create();
		<SelectNexus>d__.<>4__this = this;
		<SelectNexus>d__.nexusId = nexusId;
		<SelectNexus>d__.<>1__state = -1;
		<SelectNexus>d__.<>t__builder.Start<<SelectNexus>d__23>(ref <SelectNexus>d__);
		return <SelectNexus>d__.<>t__builder.Task;
	}

	protected override System.Threading.Tasks.ValueTask Initialize(CancellationToken ct)
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		if (NexusId <= 0)
		{
			throw new InvalidOperationException("Must select a nexus before starting the client");
		}
		return default(System.Threading.Tasks.ValueTask);
	}

	protected virtual void Reset()
	{
		NexusId = 0;
		ZoneKey = null;
		Nexus = null;
		Player = null;
		NexusVariables.Clear();
		ZoneVariables.Clear();
		PlayerVariables.Clear();
	}

	public bool TryGetNexusVariable(string key, out Variable variable)
	{
		return NexusVariables.TryGet(key, out variable);
	}

	public bool TryGetZoneVariable(string key, out Variable variable)
	{
		return ZoneVariables.TryGet(key, out variable);
	}

	public bool TryGetPlayerVariable(string key, out Variable variable)
	{
		return PlayerVariables.TryGet(key, out variable);
	}

	protected override void OnNexusDetailsUpdated(int nexusId, NexusDetails details)
	{
		base.OnNexusDetailsUpdated(nexusId, details);
		if (nexusId == NexusId)
		{
			NexusZoneDetails nexusZoneDetails = FindZone(details, ZoneKey);
			UpdateVariables(NexusVariables, details.Variables);
			UpdateVariables(ZoneVariables, nexusZoneDetails?.Variables);
		}
	}

	private static NexusZoneDetails FindZone(NexusDetails nexus, string zoneKey)
	{
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		if (nexus == null || String.IsNullOrEmpty(zoneKey))
		{
			return null;
		}
		Enumerator<NexusZoneDetails> enumerator = nexus.Zones.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				NexusZoneDetails current = enumerator.Current;
				if (String.Equals(current.Key, zoneKey, (StringComparison)3))
				{
					return current;
				}
			}
		}
		finally
		{
			((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
		}
		return null;
	}
}
