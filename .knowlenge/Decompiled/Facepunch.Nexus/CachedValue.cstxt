using System;
using System.Collections.Generic;
using Facepunch.Nexus;
using Facepunch.Nexus.Time;

internal class CachedValue<TKey, TValue> : CachedValue where TKey : IEquatable<TKey>
{
	private readonly Dictionary<TKey, ValueTuple<TValue, double>> _values = (Dictionary<TKey, ValueTuple<TValue, double>>)(object)new Dictionary<TKey, ValueTuple<ValueTuple<TValue, double>, double>>();

	public CachedValue(IClockProvider clock)
		: base(clock)
	{
	}

	public unsafe bool TryGetValue(in TKey key, out TValue value)
	{
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		ValueTuple<TValue, double> val = default(ValueTuple<TValue, double>);
		if (!((Dictionary<TKey, ValueTuple<ValueTuple<TValue, double>, double>>)(object)_values).TryGetValue(key, ref *(ValueTuple<ValueTuple<TValue, double>, double>*)(&val)) || Clock.Timestamp >= val.Item2)
		{
			value = default(TValue);
			return false;
		}
		value = val.Item1;
		return true;
	}

	public ref readonly TValue Update(in TKey key, in TValue value)
	{
		//IL_0039: Expected F8, but got O
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		if (value != null)
		{
			((Dictionary<TKey, ValueTuple<ValueTuple<TValue, double>, double>>)(object)_values)[key] = (ValueTuple<ValueTuple<TValue, double>, double>)new ValueTuple<double, double>((double)value, Clock.Timestamp + 30.0);
		}
		else
		{
			Invalidate(in key);
		}
		return ref value;
	}

	public void Invalidate(in TKey key)
	{
		((Dictionary<TKey, ValueTuple<ValueTuple<TValue, double>, double>>)(object)_values).Remove(key);
	}
}
