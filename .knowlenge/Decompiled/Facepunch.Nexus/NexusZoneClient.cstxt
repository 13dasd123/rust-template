using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;
using Facepunch.Nexus;
using Facepunch.Nexus.Connector;
using Facepunch.Nexus.Logging;
using Facepunch.Nexus.Models;
using Facepunch.Nexus.Time;
using Newtonsoft.Json;

public sealed class NexusZoneClient : BaseNexusClient
{
	[StructLayout(3)]
	[CompilerGenerated]
	private struct <Assign>d__56 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public string playerId;

		public string toZone;

		public NexusZoneClient <>4__this;

		private TaskAwaiter <>u__1;

		private void MoveNext()
		{
			//IL_00d0: Expected O, but got Unknown
			//IL_008e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0093: Unknown result type (might be due to invalid IL or missing references)
			//IL_009a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_005e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0063: Unknown result type (might be due to invalid IL or missing references)
			//IL_003b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0077: Unknown result type (might be due to invalid IL or missing references)
			//IL_0078: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			try
			{
				TaskAwaiter val;
				if (num != 0)
				{
					if (String.IsNullOrWhiteSpace(playerId))
					{
						throw new ArgumentNullException("playerId");
					}
					if (String.IsNullOrWhiteSpace(toZone))
					{
						throw new ArgumentNullException("toZone");
					}
					nexusZoneClient.AssertInitialized();
					val = nexusZoneClient._connector.Assign(playerId, toZone).GetAwaiter();
					if (!((TaskAwaiter)(ref val)).IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<TaskAwaiter, <Assign>d__56>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter);
					num = (<>1__state = -1);
				}
				((TaskAwaiter)(ref val)).GetResult();
				if (nexusZoneClient.TryGetPlayer(playerId, out var player))
				{
					player.UpdateZone(toZone);
				}
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <CreateClan>d__7 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncValueTaskMethodBuilder<NexusClanResult<NexusClan>> <>t__builder;

		public NexusZoneClient <>4__this;

		public ClanCreateParameters parameters;

		private ConfiguredTaskAwaiter<ApiResult<ClanDetails>> <>u__1;

		private void MoveNext()
		{
			//IL_00f2: Expected O, but got Unknown
			//IL_0067: Unknown result type (might be due to invalid IL or missing references)
			//IL_006c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0074: Unknown result type (might be due to invalid IL or missing references)
			//IL_0029: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_008d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0097: Invalid comparison between Unknown and I4
			//IL_004c: Unknown result type (might be due to invalid IL or missing references)
			//IL_004e: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ae: Invalid comparison between Unknown and I4
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			NexusClanResult<NexusClan> result2;
			try
			{
				ConfiguredTaskAwaiter<ApiResult<ClanDetails>> val;
				if (num != 0)
				{
					nexusZoneClient.AssertInitialized();
					val = nexusZoneClient._connector.CreateClan(parameters).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult<ClanDetails>>, <CreateClan>d__7>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<ApiResult<ClanDetails>>);
					num = (<>1__state = -1);
				}
				ApiResult<ClanDetails> result = val.GetResult();
				if ((int)result.StatusCode == 409)
				{
					result2 = new NexusClanResult<NexusClan>(NexusClanResultCode.DuplicateName);
				}
				else if ((int)result.StatusCode == 417)
				{
					result2 = new NexusClanResult<NexusClan>(NexusClanResultCode.AlreadyInAClan);
				}
				else if (!result.IsSuccess)
				{
					result2 = new NexusClanResult<NexusClan>(NexusClanResultCode.Fail);
				}
				else
				{
					result.EnsureSuccessfulWithResponse();
					NexusClan response = nexusZoneClient.UpsertClan(result.Response);
					result2 = new NexusClanResult<NexusClan>(response);
				}
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <GetClan>d__4 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncValueTaskMethodBuilder<NexusClanResult<NexusClan>> <>t__builder;

		public NexusZoneClient <>4__this;

		public long clanId;

		private ConfiguredTaskAwaiter<ApiResult<ClanDetails>> <>u__1;

		private void MoveNext()
		{
			//IL_0125: Expected O, but got Unknown
			//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e2: Invalid comparison between Unknown and I4
			//IL_0074: Unknown result type (might be due to invalid IL or missing references)
			//IL_0079: Unknown result type (might be due to invalid IL or missing references)
			//IL_007d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0082: Unknown result type (might be due to invalid IL or missing references)
			//IL_0097: Unknown result type (might be due to invalid IL or missing references)
			//IL_0099: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			NexusClanResult<NexusClan> result;
			try
			{
				ConfiguredTaskAwaiter<ApiResult<ClanDetails>> val;
				if (num != 0)
				{
					nexusZoneClient.AssertInitialized();
					Dictionary<long, NexusClan> clans = nexusZoneClient._clans;
					bool flag = false;
					try
					{
						Monitor.Enter((object)clans, ref flag);
						NexusClan response = default(NexusClan);
						if (!nexusZoneClient._clans.TryGetValue(clanId, ref response))
						{
							goto end_IL_0025;
						}
						result = new NexusClanResult<NexusClan>(response);
						goto end_IL_000e;
						end_IL_0025:;
					}
					finally
					{
						if (num < 0 && flag)
						{
							Monitor.Exit((object)clans);
						}
					}
					val = nexusZoneClient._connector.GetClan(clanId).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult<ClanDetails>>, <GetClan>d__4>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<ApiResult<ClanDetails>>);
					num = (<>1__state = -1);
				}
				ApiResult<ClanDetails> result2 = val.GetResult();
				if ((int)result2.StatusCode == 404)
				{
					result = new NexusClanResult<NexusClan>(NexusClanResultCode.NotFound);
				}
				else if (!result2.IsSuccess)
				{
					result = new NexusClanResult<NexusClan>(NexusClanResultCode.Fail);
				}
				else
				{
					result2.EnsureSuccessfulWithResponse();
					NexusClan response2 = nexusZoneClient.UpsertClan(result2.Response);
					result = new NexusClanResult<NexusClan>(response2);
				}
				end_IL_000e:;
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <GetClanByMember>d__5 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncValueTaskMethodBuilder<NexusClanResult<NexusClan>> <>t__builder;

		public NexusZoneClient <>4__this;

		public string playerId;

		private ConfiguredTaskAwaiter<ApiResult<ClanDetails>> <>u__1;

		private void MoveNext()
		{
			//IL_00da: Expected O, but got Unknown
			//IL_0067: Unknown result type (might be due to invalid IL or missing references)
			//IL_006c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0074: Unknown result type (might be due to invalid IL or missing references)
			//IL_0029: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_008d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0097: Invalid comparison between Unknown and I4
			//IL_004c: Unknown result type (might be due to invalid IL or missing references)
			//IL_004e: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			NexusClanResult<NexusClan> result2;
			try
			{
				ConfiguredTaskAwaiter<ApiResult<ClanDetails>> val;
				if (num != 0)
				{
					nexusZoneClient.AssertInitialized();
					val = nexusZoneClient._connector.GetClanByMember(playerId).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult<ClanDetails>>, <GetClanByMember>d__5>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<ApiResult<ClanDetails>>);
					num = (<>1__state = -1);
				}
				ApiResult<ClanDetails> result = val.GetResult();
				if ((int)result.StatusCode == 404)
				{
					result2 = new NexusClanResult<NexusClan>(NexusClanResultCode.NoClan);
				}
				else if (!result.IsSuccess)
				{
					result2 = new NexusClanResult<NexusClan>(NexusClanResultCode.Fail);
				}
				else
				{
					result.EnsureSuccessfulWithResponse();
					NexusClan response = nexusZoneClient.UpsertClan(result.Response);
					result2 = new NexusClanResult<NexusClan>(response);
				}
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <GetClanLeaderboard>d__9 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncValueTaskMethodBuilder<NexusClanResult<List<ClanLeaderboardEntry>>> <>t__builder;

		public NexusZoneClient <>4__this;

		public int limit;

		private ConfiguredTaskAwaiter<ApiResult<List<ClanLeaderboardEntry>>> <>u__1;

		private void MoveNext()
		{
			//IL_00ab: Expected O, but got Unknown
			//IL_0064: Unknown result type (might be due to invalid IL or missing references)
			//IL_0069: Unknown result type (might be due to invalid IL or missing references)
			//IL_0071: Unknown result type (might be due to invalid IL or missing references)
			//IL_0029: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_004c: Unknown result type (might be due to invalid IL or missing references)
			//IL_004e: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			NexusClanResult<List<ClanLeaderboardEntry>> result2;
			try
			{
				ConfiguredTaskAwaiter<ApiResult<List<ClanLeaderboardEntry>>> val;
				if (num != 0)
				{
					nexusZoneClient.AssertInitialized();
					val = nexusZoneClient._connector.GetClanLeaderboard(limit).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult<List<ClanLeaderboardEntry>>>, <GetClanLeaderboard>d__9>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<ApiResult<List<ClanLeaderboardEntry>>>);
					num = (<>1__state = -1);
				}
				ApiResult<List<ClanLeaderboardEntry>> result = val.GetResult();
				result2 = (result.IsSuccess ? new NexusClanResult<List<ClanLeaderboardEntry>>(result.Response) : new NexusClanResult<List<ClanLeaderboardEntry>>(NexusClanResultCode.Fail));
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <GetNexusDetails>d__66 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncValueTaskMethodBuilder<NexusDetails> <>t__builder;

		public NexusZoneClient <>4__this;

		public int nexusId;

		private TaskAwaiter<NexusDetails> <>u__1;

		private void MoveNext()
		{
			//IL_009d: Expected O, but got Unknown
			//IL_0063: Unknown result type (might be due to invalid IL or missing references)
			//IL_0068: Unknown result type (might be due to invalid IL or missing references)
			//IL_0070: Unknown result type (might be due to invalid IL or missing references)
			//IL_0031: Unknown result type (might be due to invalid IL or missing references)
			//IL_0036: Unknown result type (might be due to invalid IL or missing references)
			//IL_004b: Unknown result type (might be due to invalid IL or missing references)
			//IL_004d: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			NexusDetails result;
			try
			{
				NexusDetails value;
				TaskAwaiter<NexusDetails> val;
				if (num != 0)
				{
					if (nexusZoneClient._cachedNexusInfo.TryGetValue(out value))
					{
						goto IL_0097;
					}
					val = nexusZoneClient._connector.GetNexus(nexusId).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<TaskAwaiter<NexusDetails>, <GetNexusDetails>d__66>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter<NexusDetails>);
					num = (<>1__state = -1);
				}
				NexusDetails value2 = val.GetResult();
				value = nexusZoneClient._cachedNexusInfo.Update(in value2);
				goto IL_0097;
				IL_0097:
				result = value;
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <GetPlayer>d__54 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncValueTaskMethodBuilder<NexusPlayer> <>t__builder;

		public string playerId;

		public NexusZoneClient <>4__this;

		private NexusPlayer <newPlayer>5__2;

		private TaskAwaiter <>u__1;

		private void MoveNext()
		{
			//IL_0157: Expected O, but got Unknown
			//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
			//IL_00da: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
			//IL_0026: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
			//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			NexusPlayer result;
			try
			{
				TaskAwaiter val;
				Dictionary<string, NexusPlayer> players;
				bool flag;
				if (num != 0)
				{
					if (String.IsNullOrWhiteSpace(playerId))
					{
						throw new ArgumentNullException("playerId");
					}
					nexusZoneClient.AssertInitialized();
					players = nexusZoneClient._players;
					flag = false;
					try
					{
						Monitor.Enter((object)players, ref flag);
						NexusPlayer nexusPlayer = default(NexusPlayer);
						if (!nexusZoneClient._players.TryGetValue(playerId, ref nexusPlayer))
						{
							goto end_IL_003c;
						}
						result = nexusPlayer;
						goto end_IL_000e;
						end_IL_003c:;
					}
					finally
					{
						if (num < 0 && flag)
						{
							Monitor.Exit((object)players);
						}
					}
					<newPlayer>5__2 = new NexusPlayer(nexusZoneClient._logger, nexusZoneClient._connector, nexusZoneClient._clock, playerId);
					val = <newPlayer>5__2.Refresh().GetAwaiter();
					if (!((TaskAwaiter)(ref val)).IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<TaskAwaiter, <GetPlayer>d__54>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter);
					num = (<>1__state = -1);
				}
				((TaskAwaiter)(ref val)).GetResult();
				players = nexusZoneClient._players;
				flag = false;
				try
				{
					Monitor.Enter((object)players, ref flag);
					NexusPlayer nexusPlayer2 = default(NexusPlayer);
					if (!nexusZoneClient._players.TryGetValue(playerId, ref nexusPlayer2))
					{
						nexusZoneClient._players.Add(playerId, <newPlayer>5__2);
						goto end_IL_0102;
					}
					result = nexusPlayer2;
					goto end_IL_000e;
					end_IL_0102:;
				}
				finally
				{
					if (num < 0 && flag)
					{
						Monitor.Exit((object)players);
					}
				}
				result = <newPlayer>5__2;
				end_IL_000e:;
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<newPlayer>5__2 = null;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<newPlayer>5__2 = null;
			<>t__builder.SetResult(result);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <GetZoneDetails>d__65 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncValueTaskMethodBuilder<ZoneDetails> <>t__builder;

		public NexusZoneClient <>4__this;

		private TaskAwaiter<ZoneDetails> <>u__1;

		private void MoveNext()
		{
			//IL_00c1: Expected O, but got Unknown
			//IL_0063: Unknown result type (might be due to invalid IL or missing references)
			//IL_0068: Unknown result type (might be due to invalid IL or missing references)
			//IL_0070: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0033: Unknown result type (might be due to invalid IL or missing references)
			//IL_0048: Unknown result type (might be due to invalid IL or missing references)
			//IL_004a: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			ZoneDetails result;
			try
			{
				ZoneDetails value;
				TaskAwaiter<ZoneDetails> val;
				if (num != 0)
				{
					if (nexusZoneClient._cachedZoneInfo.TryGetValue(out value))
					{
						goto IL_00bb;
					}
					val = nexusZoneClient._connector.GetZoneDetails().GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<TaskAwaiter<ZoneDetails>, <GetZoneDetails>d__65>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter<ZoneDetails>);
					num = (<>1__state = -1);
				}
				ZoneDetails value2 = val.GetResult();
				value = nexusZoneClient._cachedZoneInfo.Update(in value2);
				nexusZoneClient.UpdateVariables(nexusZoneClient._nexusVariables, value.NexusVariables);
				nexusZoneClient.UpdateVariables(nexusZoneClient._zoneVariables, value.Variables);
				goto IL_00bb;
				IL_00bb:
				result = value;
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <Initialize>d__42 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncValueTaskMethodBuilder <>t__builder;

		public NexusZoneClient <>4__this;

		private ValueTaskAwaiter<ZoneDetails> <>u__1;

		private ValueTaskAwaiter<NexusDetails> <>u__2;

		private void MoveNext()
		{
			//IL_00f7: Expected O, but got Unknown
			//IL_0055: Unknown result type (might be due to invalid IL or missing references)
			//IL_005a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0061: Unknown result type (might be due to invalid IL or missing references)
			//IL_0094: Unknown result type (might be due to invalid IL or missing references)
			//IL_0099: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
			//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
			//IL_0022: Unknown result type (might be due to invalid IL or missing references)
			//IL_0027: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
			//IL_003b: Unknown result type (might be due to invalid IL or missing references)
			//IL_003c: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			try
			{
				ValueTaskAwaiter<NexusDetails> val;
				ValueTaskAwaiter<ZoneDetails> val2;
				if (num != 0)
				{
					if (num == 1)
					{
						val = <>u__2;
						<>u__2 = default(ValueTaskAwaiter<NexusDetails>);
						num = (<>1__state = -1);
						goto IL_00e2;
					}
					val2 = nexusZoneClient.GetZoneDetails().GetAwaiter();
					if (!val2.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val2;
						((AsyncValueTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ValueTaskAwaiter<ZoneDetails>, <Initialize>d__42>(ref val2, ref this);
						return;
					}
				}
				else
				{
					val2 = <>u__1;
					<>u__1 = default(ValueTaskAwaiter<ZoneDetails>);
					num = (<>1__state = -1);
				}
				ZoneDetails result = val2.GetResult();
				nexusZoneClient.Zone = result;
				val = nexusZoneClient.GetNexusDetails(nexusZoneClient.Zone.NexusId).GetAwaiter();
				if (!val.IsCompleted)
				{
					num = (<>1__state = 1);
					<>u__2 = val;
					((AsyncValueTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ValueTaskAwaiter<NexusDetails>, <Initialize>d__42>(ref val, ref this);
					return;
				}
				goto IL_00e2;
				IL_00e2:
				NexusDetails result2 = val.GetResult();
				nexusZoneClient.Nexus = result2;
			}
			catch (Exception val3)
			{
				Exception exception = val3;
				<>1__state = -2;
				((AsyncValueTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncValueTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncValueTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <ListClanInvitations>d__8 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncValueTaskMethodBuilder<NexusClanResult<List<ClanInvitation>>> <>t__builder;

		public NexusZoneClient <>4__this;

		public string playerId;

		private ConfiguredTaskAwaiter<ApiResult<List<ClanInvitation>>> <>u__1;

		private void MoveNext()
		{
			//IL_00ab: Expected O, but got Unknown
			//IL_0064: Unknown result type (might be due to invalid IL or missing references)
			//IL_0069: Unknown result type (might be due to invalid IL or missing references)
			//IL_0071: Unknown result type (might be due to invalid IL or missing references)
			//IL_0029: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_004c: Unknown result type (might be due to invalid IL or missing references)
			//IL_004e: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			NexusClanResult<List<ClanInvitation>> result2;
			try
			{
				ConfiguredTaskAwaiter<ApiResult<List<ClanInvitation>>> val;
				if (num != 0)
				{
					nexusZoneClient.AssertInitialized();
					val = nexusZoneClient._connector.ListInvitations(playerId).ConfigureAwait(false).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter<ApiResult<List<ClanInvitation>>>, <ListClanInvitations>d__8>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter<ApiResult<List<ClanInvitation>>>);
					num = (<>1__state = -1);
				}
				ApiResult<List<ClanInvitation>> result = val.GetResult();
				result2 = (result.IsSuccess ? new NexusClanResult<List<ClanInvitation>>(result.Response) : new NexusClanResult<List<ClanInvitation>>(NexusClanResultCode.Fail));
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <PlayerLogin>d__52 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<NexusLoginResult> <>t__builder;

		public string playerId;

		public NexusZoneClient <>4__this;

		private TaskAwaiter<ZonePlayerLogin> <>u__1;

		private void MoveNext()
		{
			//IL_0167: Expected O, but got Unknown
			//IL_0075: Unknown result type (might be due to invalid IL or missing references)
			//IL_007a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0082: Unknown result type (might be due to invalid IL or missing references)
			//IL_0040: Unknown result type (might be due to invalid IL or missing references)
			//IL_0045: Unknown result type (might be due to invalid IL or missing references)
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_005a: Unknown result type (might be due to invalid IL or missing references)
			//IL_005c: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			NexusLoginResult result2;
			try
			{
				TaskAwaiter<ZonePlayerLogin> val;
				if (num != 0)
				{
					if (String.IsNullOrWhiteSpace(playerId))
					{
						throw new ArgumentNullException("playerId");
					}
					nexusZoneClient.AssertInitialized();
					val = nexusZoneClient._connector.PlayerLogin(playerId).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<TaskAwaiter<ZonePlayerLogin>, <PlayerLogin>d__52>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter<ZonePlayerLogin>);
					num = (<>1__state = -1);
				}
				ZonePlayerLogin result = val.GetResult();
				NexusLoginResult nexusLoginResult = new NexusLoginResult(result);
				if (!nexusLoginResult.IsRedirect && nexusLoginResult.AssignedZoneKey != null && nexusLoginResult.AssignedZoneKey != nexusZoneClient.Zone.Key)
				{
					throw new InvalidOperationException("Player is assigned to a different zone");
				}
				Dictionary<string, NexusPlayer> players = nexusZoneClient._players;
				bool flag = false;
				NexusPlayer nexusPlayer = default(NexusPlayer);
				try
				{
					Monitor.Enter((object)players, ref flag);
					if (!nexusZoneClient._players.TryGetValue(playerId, ref nexusPlayer))
					{
						nexusPlayer = new NexusPlayer(nexusZoneClient._logger, nexusZoneClient._connector, nexusZoneClient._clock, playerId);
						nexusZoneClient._players.Add(playerId, nexusPlayer);
					}
				}
				finally
				{
					if (num < 0 && flag)
					{
						Monitor.Exit((object)players);
					}
				}
				nexusPlayer.UpdateZone(nexusLoginResult.AssignedZoneKey);
				nexusPlayer.UpdateVariables(nexusLoginResult.Variables);
				result2 = nexusLoginResult;
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(result2);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <SetNexusVariable>d__47 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public NexusZoneClient <>4__this;

		public string key;

		public string value;

		public bool isTransient;

		public bool isSecret;

		private ConfiguredTaskAwaiter <>u__1;

		private void MoveNext()
		{
			//IL_00e7: Expected O, but got Unknown
			//IL_009d: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
			//IL_0064: Unknown result type (might be due to invalid IL or missing references)
			//IL_0069: Unknown result type (might be due to invalid IL or missing references)
			//IL_006d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			//IL_0086: Unknown result type (might be due to invalid IL or missing references)
			//IL_0087: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			try
			{
				ConfiguredTaskAwaiter val;
				if (num == 0)
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter);
					num = (<>1__state = -1);
					goto IL_00b8;
				}
				nexusZoneClient.AssertInitialized();
				if (!nexusZoneClient._nexusVariables.TryGet(key, out var variable) || variable != value)
				{
					ConfiguredTaskAwaitable val2 = nexusZoneClient._connector.SetNexusVariable(key, value, isTransient, isSecret).ConfigureAwait(false);
					val = ((ConfiguredTaskAwaitable)(ref val2)).GetAwaiter();
					if (!((ConfiguredTaskAwaiter)(ref val)).IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter, <SetNexusVariable>d__47>(ref val, ref this);
						return;
					}
					goto IL_00b8;
				}
				goto end_IL_000e;
				IL_00b8:
				((ConfiguredTaskAwaiter)(ref val)).GetResult();
				nexusZoneClient._nexusVariables.Set(key, value);
				nexusZoneClient.DispatchVariableChanged(key);
				end_IL_000e:;
			}
			catch (Exception val3)
			{
				Exception exception = val3;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <SetNexusVariable>d__48 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public NexusZoneClient <>4__this;

		public string key;

		public byte[] value;

		public bool isTransient;

		public bool isSecret;

		private ConfiguredTaskAwaiter <>u__1;

		private void MoveNext()
		{
			//IL_00ec: Expected O, but got Unknown
			//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
			//IL_0069: Unknown result type (might be due to invalid IL or missing references)
			//IL_006e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			//IL_0077: Unknown result type (might be due to invalid IL or missing references)
			//IL_008b: Unknown result type (might be due to invalid IL or missing references)
			//IL_008c: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			try
			{
				ConfiguredTaskAwaiter val;
				if (num == 0)
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter);
					num = (<>1__state = -1);
					goto IL_00bd;
				}
				nexusZoneClient.AssertInitialized();
				if (!nexusZoneClient._nexusVariables.TryGet(key, out var variable) || variable != value)
				{
					ConfiguredTaskAwaitable val2 = nexusZoneClient._connector.SetNexusVariable(key, System.Memory<byte>.op_Implicit(value), isTransient, isSecret).ConfigureAwait(false);
					val = ((ConfiguredTaskAwaitable)(ref val2)).GetAwaiter();
					if (!((ConfiguredTaskAwaiter)(ref val)).IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter, <SetNexusVariable>d__48>(ref val, ref this);
						return;
					}
					goto IL_00bd;
				}
				goto end_IL_000e;
				IL_00bd:
				((ConfiguredTaskAwaiter)(ref val)).GetResult();
				nexusZoneClient._nexusVariables.Set(key, value);
				nexusZoneClient.DispatchVariableChanged(key);
				end_IL_000e:;
			}
			catch (Exception val3)
			{
				Exception exception = val3;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <SetZoneVariable>d__49 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public NexusZoneClient <>4__this;

		public string key;

		public string value;

		public bool isTransient;

		public bool isSecret;

		private ConfiguredTaskAwaiter <>u__1;

		private void MoveNext()
		{
			//IL_00e7: Expected O, but got Unknown
			//IL_009d: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
			//IL_0064: Unknown result type (might be due to invalid IL or missing references)
			//IL_0069: Unknown result type (might be due to invalid IL or missing references)
			//IL_006d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			//IL_0086: Unknown result type (might be due to invalid IL or missing references)
			//IL_0087: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			try
			{
				ConfiguredTaskAwaiter val;
				if (num == 0)
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter);
					num = (<>1__state = -1);
					goto IL_00b8;
				}
				nexusZoneClient.AssertInitialized();
				if (!nexusZoneClient._zoneVariables.TryGet(key, out var variable) || variable != value)
				{
					ConfiguredTaskAwaitable val2 = nexusZoneClient._connector.SetZoneVariable(key, value, isTransient, isSecret).ConfigureAwait(false);
					val = ((ConfiguredTaskAwaitable)(ref val2)).GetAwaiter();
					if (!((ConfiguredTaskAwaiter)(ref val)).IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter, <SetZoneVariable>d__49>(ref val, ref this);
						return;
					}
					goto IL_00b8;
				}
				goto end_IL_000e;
				IL_00b8:
				((ConfiguredTaskAwaiter)(ref val)).GetResult();
				nexusZoneClient._zoneVariables.Set(key, value);
				nexusZoneClient.DispatchVariableChanged(key);
				end_IL_000e:;
			}
			catch (Exception val3)
			{
				Exception exception = val3;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <SetZoneVariable>d__50 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public NexusZoneClient <>4__this;

		public string key;

		public byte[] value;

		public bool isTransient;

		public bool isSecret;

		private ConfiguredTaskAwaiter <>u__1;

		private void MoveNext()
		{
			//IL_00ec: Expected O, but got Unknown
			//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
			//IL_0069: Unknown result type (might be due to invalid IL or missing references)
			//IL_006e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			//IL_0077: Unknown result type (might be due to invalid IL or missing references)
			//IL_008b: Unknown result type (might be due to invalid IL or missing references)
			//IL_008c: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			try
			{
				ConfiguredTaskAwaiter val;
				if (num == 0)
				{
					val = <>u__1;
					<>u__1 = default(ConfiguredTaskAwaiter);
					num = (<>1__state = -1);
					goto IL_00bd;
				}
				nexusZoneClient.AssertInitialized();
				if (!nexusZoneClient._zoneVariables.TryGet(key, out var variable) || variable != value)
				{
					ConfiguredTaskAwaitable val2 = nexusZoneClient._connector.SetZoneVariable(key, System.Memory<byte>.op_Implicit(value), isTransient, isSecret).ConfigureAwait(false);
					val = ((ConfiguredTaskAwaitable)(ref val2)).GetAwaiter();
					if (!((ConfiguredTaskAwaiter)(ref val)).IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ConfiguredTaskAwaiter, <SetZoneVariable>d__50>(ref val, ref this);
						return;
					}
					goto IL_00bd;
				}
				goto end_IL_000e;
				IL_00bd:
				((ConfiguredTaskAwaiter)(ref val)).GetResult();
				nexusZoneClient._zoneVariables.Set(key, value);
				nexusZoneClient.DispatchVariableChanged(key);
				end_IL_000e:;
			}
			catch (Exception val3)
			{
				Exception exception = val3;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <SubmitClanScoreEventBatch>d__12 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncVoidMethodBuilder <>t__builder;

		public NexusZoneClient <>4__this;

		private TaskAwaiter<ApiResult> <>u__1;

		private void MoveNext()
		{
			//IL_008e: Expected O, but got Unknown
			//IL_00a9: Expected O, but got Unknown
			//IL_005d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0062: Unknown result type (might be due to invalid IL or missing references)
			//IL_0069: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			//IL_0046: Unknown result type (might be due to invalid IL or missing references)
			//IL_0047: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			try
			{
				if (num != 0)
				{
					nexusZoneClient._submittingScoreEventsBatch = true;
				}
				try
				{
					TaskAwaiter<ApiResult> val;
					if (num != 0)
					{
						val = nexusZoneClient._connector.AddClanScoreEventBatch(nexusZoneClient._scoreEventBatch).GetAwaiter();
						if (!val.IsCompleted)
						{
							num = (<>1__state = 0);
							<>u__1 = val;
							((AsyncVoidMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<TaskAwaiter<ApiResult>, <SubmitClanScoreEventBatch>d__12>(ref val, ref this);
							return;
						}
					}
					else
					{
						val = <>u__1;
						<>u__1 = default(TaskAwaiter<ApiResult>);
						num = (<>1__state = -1);
					}
					val.GetResult();
					nexusZoneClient._scoreEventBatch.Clear();
				}
				catch (Exception val2)
				{
					Exception exception = val2;
					nexusZoneClient.DispatchError(exception);
				}
				finally
				{
					if (num < 0)
					{
						nexusZoneClient._submittingScoreEventsBatch = false;
					}
				}
			}
			catch (Exception val3)
			{
				Exception exception2 = val3;
				<>1__state = -2;
				((AsyncVoidMethodBuilder)(ref <>t__builder)).SetException(exception2);
				return;
			}
			<>1__state = -2;
			((AsyncVoidMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncVoidMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <Update>d__43 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncValueTaskMethodBuilder <>t__builder;

		public NexusZoneClient <>4__this;

		private ValueTaskAwaiter<ZoneDetails> <>u__1;

		private ValueTaskAwaiter<NexusDetails> <>u__2;

		private void MoveNext()
		{
			//IL_0200: Expected O, but got Unknown
			//IL_0055: Unknown result type (might be due to invalid IL or missing references)
			//IL_005a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0061: Unknown result type (might be due to invalid IL or missing references)
			//IL_0094: Unknown result type (might be due to invalid IL or missing references)
			//IL_0099: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c9: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
			//IL_0022: Unknown result type (might be due to invalid IL or missing references)
			//IL_0027: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
			//IL_003b: Unknown result type (might be due to invalid IL or missing references)
			//IL_003c: Unknown result type (might be due to invalid IL or missing references)
			//IL_014f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0154: Unknown result type (might be due to invalid IL or missing references)
			//IL_0126: Unknown result type (might be due to invalid IL or missing references)
			//IL_0130: Expected O, but got Unknown
			//IL_01b2: Unknown result type (might be due to invalid IL or missing references)
			//IL_01b7: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusZoneClient nexusZoneClient = <>4__this;
			try
			{
				ValueTaskAwaiter<NexusDetails> val;
				ValueTaskAwaiter<ZoneDetails> val2;
				if (num != 0)
				{
					if (num == 1)
					{
						val = <>u__2;
						<>u__2 = default(ValueTaskAwaiter<NexusDetails>);
						num = (<>1__state = -1);
						goto IL_00e5;
					}
					val2 = nexusZoneClient.GetZoneDetails().GetAwaiter();
					if (!val2.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val2;
						((AsyncValueTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ValueTaskAwaiter<ZoneDetails>, <Update>d__43>(ref val2, ref this);
						return;
					}
				}
				else
				{
					val2 = <>u__1;
					<>u__1 = default(ValueTaskAwaiter<ZoneDetails>);
					num = (<>1__state = -1);
				}
				ZoneDetails result = val2.GetResult();
				nexusZoneClient.Zone = result;
				val = nexusZoneClient.GetNexusDetails(nexusZoneClient.Zone.NexusId).GetAwaiter();
				if (!val.IsCompleted)
				{
					num = (<>1__state = 1);
					<>u__2 = val;
					((AsyncValueTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ValueTaskAwaiter<NexusDetails>, <Update>d__43>(ref val, ref this);
					return;
				}
				goto IL_00e5;
				IL_00e5:
				NexusDetails result2 = val.GetResult();
				nexusZoneClient.Nexus = result2;
				if (nexusZoneClient._socket.IsStarted && !nexusZoneClient._socket.IsConnected)
				{
					nexusZoneClient.DispatchError(new Exception(String.Concat("Socket is not connected for zone ", nexusZoneClient.Zone.Key)));
				}
				Dictionary<string, NexusPlayer> players = nexusZoneClient._players;
				bool flag = false;
				try
				{
					Monitor.Enter((object)players, ref flag);
					Enumerator<string, NexusPlayer> enumerator = nexusZoneClient._players.Values.GetEnumerator();
					try
					{
						while (enumerator.MoveNext())
						{
							enumerator.Current.RefreshIfNeeded();
						}
					}
					finally
					{
						if (num < 0)
						{
							((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
						}
					}
				}
				finally
				{
					if (num < 0 && flag)
					{
						Monitor.Exit((object)players);
					}
				}
				Dictionary<long, NexusClan> clans = nexusZoneClient._clans;
				flag = false;
				try
				{
					Monitor.Enter((object)clans, ref flag);
					Enumerator<long, NexusClan> enumerator2 = nexusZoneClient._clans.Values.GetEnumerator();
					try
					{
						while (enumerator2.MoveNext())
						{
							enumerator2.Current.RefreshIfNeeded();
						}
					}
					finally
					{
						if (num < 0)
						{
							((IDisposable)enumerator2/*cast due to .constrained prefix*/).Dispose();
						}
					}
				}
				finally
				{
					if (num < 0 && flag)
					{
						Monitor.Exit((object)clans);
					}
				}
				nexusZoneClient.UpdateClanScoreEvents();
			}
			catch (Exception val3)
			{
				Exception exception = val3;
				<>1__state = -2;
				((AsyncValueTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncValueTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncValueTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	private readonly INexusLogger _logger;

	private readonly INexusZoneConnector _connector;

	private readonly INexusSocketConnector _socket;

	private readonly IClockProvider _clock;

	private readonly VariableContainer _nexusVariables;

	private readonly VariableContainer _zoneVariables;

	private readonly CachedValue<ZoneDetails> _cachedZoneInfo;

	private readonly CachedValue<NexusDetails> _cachedNexusInfo;

	private readonly Dictionary<string, NexusPlayer> _players;

	private readonly Dictionary<long, NexusClan> _clans;

	private readonly Queue<NewClanScoreEventBatchEntry> _scoreEventQueue;

	private readonly List<NewClanScoreEventBatchEntry> _scoreEventBatch;

	private bool _submittingScoreEventsBatch;

	[field: CompilerGenerated]
	public INexusClanEventListener ClanEventListener
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public ZoneDetails Zone
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		private set;
	}

	[field: CompilerGenerated]
	public NexusDetails Nexus
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		private set;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public System.Threading.Tasks.ValueTask<NexusClanResult<NexusClan>> GetClan(long clanId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<GetClan>d__4 <GetClan>d__ = default(<GetClan>d__4);
		<GetClan>d__.<>t__builder = AsyncValueTaskMethodBuilder<NexusClanResult<NexusClan>>.Create();
		<GetClan>d__.<>4__this = this;
		<GetClan>d__.clanId = clanId;
		<GetClan>d__.<>1__state = -1;
		<GetClan>d__.<>t__builder.Start<<GetClan>d__4>(ref <GetClan>d__);
		return <GetClan>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public System.Threading.Tasks.ValueTask<NexusClanResult<NexusClan>> GetClanByMember(string playerId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<GetClanByMember>d__5 <GetClanByMember>d__ = default(<GetClanByMember>d__5);
		<GetClanByMember>d__.<>t__builder = AsyncValueTaskMethodBuilder<NexusClanResult<NexusClan>>.Create();
		<GetClanByMember>d__.<>4__this = this;
		<GetClanByMember>d__.playerId = playerId;
		<GetClanByMember>d__.<>1__state = -1;
		<GetClanByMember>d__.<>t__builder.Start<<GetClanByMember>d__5>(ref <GetClanByMember>d__);
		return <GetClanByMember>d__.<>t__builder.Task;
	}

	public bool TryGetClan(long clanId, out NexusClan clan)
	{
		AssertInitialized();
		lock (_clans)
		{
			return _clans.TryGetValue(clanId, ref clan);
		}
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public System.Threading.Tasks.ValueTask<NexusClanResult<NexusClan>> CreateClan(ClanCreateParameters parameters)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<CreateClan>d__7 <CreateClan>d__ = default(<CreateClan>d__7);
		<CreateClan>d__.<>t__builder = AsyncValueTaskMethodBuilder<NexusClanResult<NexusClan>>.Create();
		<CreateClan>d__.<>4__this = this;
		<CreateClan>d__.parameters = parameters;
		<CreateClan>d__.<>1__state = -1;
		<CreateClan>d__.<>t__builder.Start<<CreateClan>d__7>(ref <CreateClan>d__);
		return <CreateClan>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public System.Threading.Tasks.ValueTask<NexusClanResult<List<ClanInvitation>>> ListClanInvitations(string playerId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<ListClanInvitations>d__8 <ListClanInvitations>d__ = default(<ListClanInvitations>d__8);
		<ListClanInvitations>d__.<>t__builder = AsyncValueTaskMethodBuilder<NexusClanResult<List<ClanInvitation>>>.Create();
		<ListClanInvitations>d__.<>4__this = this;
		<ListClanInvitations>d__.playerId = playerId;
		<ListClanInvitations>d__.<>1__state = -1;
		<ListClanInvitations>d__.<>t__builder.Start<<ListClanInvitations>d__8>(ref <ListClanInvitations>d__);
		return <ListClanInvitations>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public System.Threading.Tasks.ValueTask<NexusClanResult<List<ClanLeaderboardEntry>>> GetClanLeaderboard(int limit = 100)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<GetClanLeaderboard>d__9 <GetClanLeaderboard>d__ = default(<GetClanLeaderboard>d__9);
		<GetClanLeaderboard>d__.<>t__builder = AsyncValueTaskMethodBuilder<NexusClanResult<List<ClanLeaderboardEntry>>>.Create();
		<GetClanLeaderboard>d__.<>4__this = this;
		<GetClanLeaderboard>d__.limit = limit;
		<GetClanLeaderboard>d__.<>1__state = -1;
		<GetClanLeaderboard>d__.<>t__builder.Start<<GetClanLeaderboard>d__9>(ref <GetClanLeaderboard>d__);
		return <GetClanLeaderboard>d__.<>t__builder.Task;
	}

	internal void EnqueueClanScoreEvent(in NewClanScoreEventBatchEntry entry)
	{
		lock (_scoreEventQueue)
		{
			_scoreEventQueue.Enqueue(entry);
		}
	}

	private void UpdateClanScoreEvents()
	{
		if (_submittingScoreEventsBatch)
		{
			return;
		}
		lock (_scoreEventQueue)
		{
			if (_scoreEventQueue.Count == 0)
			{
				return;
			}
			_scoreEventBatch.Clear();
			while (_scoreEventQueue.Count > 0)
			{
				_scoreEventBatch.Add(_scoreEventQueue.Dequeue());
			}
		}
		SubmitClanScoreEventBatch();
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	private void SubmitClanScoreEventBatch()
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<SubmitClanScoreEventBatch>d__12 <SubmitClanScoreEventBatch>d__ = default(<SubmitClanScoreEventBatch>d__12);
		<SubmitClanScoreEventBatch>d__.<>t__builder = AsyncVoidMethodBuilder.Create();
		<SubmitClanScoreEventBatch>d__.<>4__this = this;
		<SubmitClanScoreEventBatch>d__.<>1__state = -1;
		((AsyncVoidMethodBuilder)(ref <SubmitClanScoreEventBatch>d__.<>t__builder)).Start<<SubmitClanScoreEventBatch>d__12>(ref <SubmitClanScoreEventBatch>d__);
	}

	private void HandleClanEvent(in NexusMessage message)
	{
		//IL_018e: Expected O, but got Unknown
		try
		{
			if (!message.IsString)
			{
				_logger.LogError(String.Concat("Received clan event type ", message.ContentType, " but the payload is not a string"));
			}
			else if (message.ContentType.EndsWith("-disband"))
			{
				ClanDisbandedEvent args = JsonConvert.DeserializeObject<ClanDisbandedEvent>(message.AsString);
				RemoveClan(args.ClanId);
				ClanEventListener?.OnDisbanded(in args);
			}
			else if (message.ContentType.EndsWith("-invite"))
			{
				ClanInvitedEvent args2 = JsonConvert.DeserializeObject<ClanInvitedEvent>(message.AsString);
				RefreshClan(args2.ClanId);
				ClanEventListener?.OnInvitation(in args2);
			}
			else if (message.ContentType.EndsWith("-join"))
			{
				ClanJoinedEvent args3 = JsonConvert.DeserializeObject<ClanJoinedEvent>(message.AsString);
				RefreshClan(args3.ClanId);
				ClanEventListener?.OnJoined(in args3);
			}
			else if (message.ContentType.EndsWith("-kick"))
			{
				ClanKickedEvent args4 = JsonConvert.DeserializeObject<ClanKickedEvent>(message.AsString);
				RefreshClan(args4.ClanId);
				ClanEventListener?.OnKicked(in args4);
			}
			else if (message.ContentType.EndsWith("-change"))
			{
				RefreshClan(JsonConvert.DeserializeObject<ClanChangedEvent>(message.AsString).ClanId);
			}
			else
			{
				_logger.LogError(String.Concat("Cannot handle clan event: ", message.ContentType));
			}
		}
		catch (Exception val)
		{
			Exception exception = val;
			_logger.LogError(String.Concat("Failed to handle clan event (type=", message.ContentType, "): ", message.AsString), exception);
		}
		AcknowledgeMessage(in message);
	}

	private void RefreshClan(long clanId)
	{
		lock (_clans)
		{
			NexusClan nexusClan = default(NexusClan);
			if (_clans.TryGetValue(clanId, ref nexusClan))
			{
				nexusClan.RefreshInBackground();
			}
		}
	}

	internal NexusClan UpsertClan(in ClanDetails details)
	{
		lock (_clans)
		{
			NexusClan nexusClan = default(NexusClan);
			if (_clans.TryGetValue(details.ClanId, ref nexusClan))
			{
				UpdateClan(nexusClan, in details);
			}
			else
			{
				nexusClan = new NexusClan(this, _connector, _clock, _logger, details.ClanId);
				UpdateClan(nexusClan, in details);
				_clans.Add(details.ClanId, nexusClan);
			}
			return nexusClan;
		}
	}

	private void UpdateClan(NexusClan clan, in ClanDetails details)
	{
		if (clan.UpdateFromModel(in details))
		{
			ClanChangedEvent clanChangedEvent = default(ClanChangedEvent);
			clanChangedEvent.ClanId = clan.ClanId;
			ClanChangedEvent args = clanChangedEvent;
			ClanEventListener?.OnChanged(in args);
		}
	}

	internal void RemoveClan(long clanId)
	{
		//IL_0044: Expected O, but got Unknown
		lock (_clans)
		{
			if (!_clans.Remove(clanId))
			{
				return;
			}
		}
		try
		{
			ClanEventListener?.OnUnload(in clanId);
		}
		catch (Exception val)
		{
			Exception exception = val;
			_logger.LogError("Clan event listener for OnUnload threw an exception", exception);
		}
	}

	public NexusZoneClient(INexusLogger logger, string baseUrl, string secretKey, int lockDuration = 30)
		: this(logger, new NexusZoneConnector(logger, baseUrl, secretKey), new NexusSocketConnector(logger, baseUrl, secretKey, lockDuration), DefaultClockProvider.Instance, 30.0)
	{
	}

	internal NexusZoneClient(INexusLogger logger, INexusZoneConnector connector, INexusSocketConnector socket, IClockProvider clock, double updateInterval)
		: base(connector, clock, updateInterval)
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		_logger = logger ?? throw new ArgumentNullException("logger");
		_connector = connector ?? throw new ArgumentNullException("connector");
		_socket = socket ?? throw new ArgumentNullException("socket");
		_clock = clock ?? throw new ArgumentNullException("clock");
		_nexusVariables = new VariableContainer();
		_zoneVariables = new VariableContainer();
		_cachedNexusInfo = new CachedValue<NexusDetails>(clock);
		_cachedZoneInfo = new CachedValue<ZoneDetails>(clock);
		_players = new Dictionary<string, NexusPlayer>();
		_clans = new Dictionary<long, NexusClan>();
		_scoreEventQueue = new Queue<NewClanScoreEventBatchEntry>();
		_scoreEventBatch = new List<NewClanScoreEventBatchEntry>();
	}

	protected override void Dispose(bool disposing)
	{
		base.Dispose(disposing);
		((IDisposable)_socket).Dispose();
		lock (_players)
		{
			_players.Clear();
		}
		lock (_clans)
		{
			_clans.Clear();
		}
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	protected override System.Threading.Tasks.ValueTask Initialize(CancellationToken ct)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<Initialize>d__42 <Initialize>d__ = default(<Initialize>d__42);
		<Initialize>d__.<>t__builder = AsyncValueTaskMethodBuilder.Create();
		<Initialize>d__.<>4__this = this;
		<Initialize>d__.<>1__state = -1;
		((AsyncValueTaskMethodBuilder)(ref <Initialize>d__.<>t__builder)).Start<<Initialize>d__42>(ref <Initialize>d__);
		return ((AsyncValueTaskMethodBuilder)(ref <Initialize>d__.<>t__builder)).Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	protected override System.Threading.Tasks.ValueTask Update(CancellationToken ct)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<Update>d__43 <Update>d__ = default(<Update>d__43);
		<Update>d__.<>t__builder = AsyncValueTaskMethodBuilder.Create();
		<Update>d__.<>4__this = this;
		<Update>d__.<>1__state = -1;
		((AsyncValueTaskMethodBuilder)(ref <Update>d__.<>t__builder)).Start<<Update>d__43>(ref <Update>d__);
		return ((AsyncValueTaskMethodBuilder)(ref <Update>d__.<>t__builder)).Task;
	}

	public void StartListening()
	{
		_socket.Start();
	}

	public bool TryGetNexusVariable(string key, out Variable variable)
	{
		return _nexusVariables.TryGet(key, out variable);
	}

	public bool TryGetZoneVariable(string key, out Variable variable)
	{
		return _zoneVariables.TryGet(key, out variable);
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task SetNexusVariable(string key, string value, bool isTransient = true, bool isSecret = true)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<SetNexusVariable>d__47 <SetNexusVariable>d__ = default(<SetNexusVariable>d__47);
		<SetNexusVariable>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<SetNexusVariable>d__.<>4__this = this;
		<SetNexusVariable>d__.key = key;
		<SetNexusVariable>d__.value = value;
		<SetNexusVariable>d__.isTransient = isTransient;
		<SetNexusVariable>d__.isSecret = isSecret;
		<SetNexusVariable>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <SetNexusVariable>d__.<>t__builder)).Start<<SetNexusVariable>d__47>(ref <SetNexusVariable>d__);
		return ((AsyncTaskMethodBuilder)(ref <SetNexusVariable>d__.<>t__builder)).Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task SetNexusVariable(string key, byte[] value, bool isTransient = true, bool isSecret = true)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<SetNexusVariable>d__48 <SetNexusVariable>d__ = default(<SetNexusVariable>d__48);
		<SetNexusVariable>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<SetNexusVariable>d__.<>4__this = this;
		<SetNexusVariable>d__.key = key;
		<SetNexusVariable>d__.value = value;
		<SetNexusVariable>d__.isTransient = isTransient;
		<SetNexusVariable>d__.isSecret = isSecret;
		<SetNexusVariable>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <SetNexusVariable>d__.<>t__builder)).Start<<SetNexusVariable>d__48>(ref <SetNexusVariable>d__);
		return ((AsyncTaskMethodBuilder)(ref <SetNexusVariable>d__.<>t__builder)).Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task SetZoneVariable(string key, string value, bool isTransient = true, bool isSecret = true)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<SetZoneVariable>d__49 <SetZoneVariable>d__ = default(<SetZoneVariable>d__49);
		<SetZoneVariable>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<SetZoneVariable>d__.<>4__this = this;
		<SetZoneVariable>d__.key = key;
		<SetZoneVariable>d__.value = value;
		<SetZoneVariable>d__.isTransient = isTransient;
		<SetZoneVariable>d__.isSecret = isSecret;
		<SetZoneVariable>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <SetZoneVariable>d__.<>t__builder)).Start<<SetZoneVariable>d__49>(ref <SetZoneVariable>d__);
		return ((AsyncTaskMethodBuilder)(ref <SetZoneVariable>d__.<>t__builder)).Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task SetZoneVariable(string key, byte[] value, bool isTransient = true, bool isSecret = true)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<SetZoneVariable>d__50 <SetZoneVariable>d__ = default(<SetZoneVariable>d__50);
		<SetZoneVariable>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<SetZoneVariable>d__.<>4__this = this;
		<SetZoneVariable>d__.key = key;
		<SetZoneVariable>d__.value = value;
		<SetZoneVariable>d__.isTransient = isTransient;
		<SetZoneVariable>d__.isSecret = isSecret;
		<SetZoneVariable>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <SetZoneVariable>d__.<>t__builder)).Start<<SetZoneVariable>d__50>(ref <SetZoneVariable>d__);
		return ((AsyncTaskMethodBuilder)(ref <SetZoneVariable>d__.<>t__builder)).Task;
	}

	public Task<List<string>> FindPlayersWithVariable(string key, string value)
	{
		return _connector.FindPlayersWithVariable(key, value);
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<NexusLoginResult> PlayerLogin(string playerId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<PlayerLogin>d__52 <PlayerLogin>d__ = default(<PlayerLogin>d__52);
		<PlayerLogin>d__.<>t__builder = AsyncTaskMethodBuilder<NexusLoginResult>.Create();
		<PlayerLogin>d__.<>4__this = this;
		<PlayerLogin>d__.playerId = playerId;
		<PlayerLogin>d__.<>1__state = -1;
		<PlayerLogin>d__.<>t__builder.Start<<PlayerLogin>d__52>(ref <PlayerLogin>d__);
		return <PlayerLogin>d__.<>t__builder.Task;
	}

	public void PlayerLogout(string playerId)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(playerId))
		{
			throw new ArgumentNullException("playerId");
		}
		AssertInitialized();
		lock (_players)
		{
			_players.Remove(playerId);
		}
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public System.Threading.Tasks.ValueTask<NexusPlayer> GetPlayer(string playerId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<GetPlayer>d__54 <GetPlayer>d__ = default(<GetPlayer>d__54);
		<GetPlayer>d__.<>t__builder = AsyncValueTaskMethodBuilder<NexusPlayer>.Create();
		<GetPlayer>d__.<>4__this = this;
		<GetPlayer>d__.playerId = playerId;
		<GetPlayer>d__.<>1__state = -1;
		<GetPlayer>d__.<>t__builder.Start<<GetPlayer>d__54>(ref <GetPlayer>d__);
		return <GetPlayer>d__.<>t__builder.Task;
	}

	public bool TryGetPlayer(string playerId, out NexusPlayer player)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(playerId))
		{
			throw new ArgumentNullException("playerId");
		}
		AssertInitialized();
		lock (_players)
		{
			return _players.TryGetValue(playerId, ref player);
		}
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task Assign(string playerId, string toZone)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<Assign>d__56 <Assign>d__ = default(<Assign>d__56);
		<Assign>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<Assign>d__.<>4__this = this;
		<Assign>d__.playerId = playerId;
		<Assign>d__.toZone = toZone;
		<Assign>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <Assign>d__.<>t__builder)).Start<<Assign>d__56>(ref <Assign>d__);
		return ((AsyncTaskMethodBuilder)(ref <Assign>d__.<>t__builder)).Task;
	}

	public Task RegisterTransfers(string toZone, IEnumerable<string> playerIds)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(toZone))
		{
			throw new ArgumentNullException("toZone");
		}
		if (playerIds == null)
		{
			throw new ArgumentNullException("playerIds");
		}
		AssertInitialized();
		return _connector.RegisterTransfers(toZone, playerIds);
	}

	public Task CompleteTransfers(IEnumerable<string> playerIds)
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		if (playerIds == null)
		{
			throw new ArgumentNullException("playerIds");
		}
		AssertInitialized();
		return _connector.CompleteTransfers(playerIds);
	}

	public bool TryReceiveMessage(out NexusMessage message)
	{
		AssertInitialized();
		while (true)
		{
			if (!_socket.TryReceive(out message))
			{
				message = default(NexusMessage);
				return false;
			}
			if (!message.ContentType.StartsWith("application/json+clan-"))
			{
				break;
			}
			HandleClanEvent(in message);
		}
		return true;
	}

	public void AcknowledgeMessage(in NexusMessage message)
	{
		AssertInitialized();
		_socket.Acknowledge(message.MessageId);
	}

	public Task SendMessage(string toZone, Uuid id, string message, Nullable<int> ttl = default(Nullable<int>))
	{
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		if (id == Uuid.Empty)
		{
			throw new ArgumentNullException("id");
		}
		if (String.IsNullOrWhiteSpace(message))
		{
			throw new ArgumentNullException("message");
		}
		AssertInitialized();
		return _connector.SendMessage(toZone, id, message, ttl);
	}

	public Task SendMessage(string toZone, Uuid id, System.Memory<byte> message, Nullable<int> ttl = default(Nullable<int>))
	{
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		if (id == Uuid.Empty)
		{
			throw new ArgumentNullException("id");
		}
		if (message.IsEmpty)
		{
			throw new ArgumentNullException("message");
		}
		AssertInitialized();
		return _connector.SendMessage(toZone, id, message, ttl);
	}

	public Task<ZoneMapCheckResult> CheckUploadedMap()
	{
		AssertInitialized();
		return _connector.CheckUploadedMap();
	}

	public Task UploadMap(string key, byte[] pngMapImage)
	{
		AssertInitialized();
		return _connector.UploadMap(key, pngMapImage);
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	internal System.Threading.Tasks.ValueTask<ZoneDetails> GetZoneDetails()
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<GetZoneDetails>d__65 <GetZoneDetails>d__ = default(<GetZoneDetails>d__65);
		<GetZoneDetails>d__.<>t__builder = AsyncValueTaskMethodBuilder<ZoneDetails>.Create();
		<GetZoneDetails>d__.<>4__this = this;
		<GetZoneDetails>d__.<>1__state = -1;
		<GetZoneDetails>d__.<>t__builder.Start<<GetZoneDetails>d__65>(ref <GetZoneDetails>d__);
		return <GetZoneDetails>d__.<>t__builder.Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	internal new System.Threading.Tasks.ValueTask<NexusDetails> GetNexusDetails(int nexusId)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<GetNexusDetails>d__66 <GetNexusDetails>d__ = default(<GetNexusDetails>d__66);
		<GetNexusDetails>d__.<>t__builder = AsyncValueTaskMethodBuilder<NexusDetails>.Create();
		<GetNexusDetails>d__.<>4__this = this;
		<GetNexusDetails>d__.nexusId = nexusId;
		<GetNexusDetails>d__.<>1__state = -1;
		<GetNexusDetails>d__.<>t__builder.Start<<GetNexusDetails>d__66>(ref <GetNexusDetails>d__);
		return <GetNexusDetails>d__.<>t__builder.Task;
	}

	private void AssertInitialized()
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		if (Zone == null)
		{
			throw new InvalidOperationException("Zone is not initialized");
		}
	}
}
