using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Facepunch.Nexus;

public struct Uuid : ValueType, IEquatable<Uuid>
{
	public static readonly Uuid Empty;

	private static readonly object _syncRoot;

	private static readonly int _nodeId;

	private static int _sequence;

	private static ulong _previousTimestamp;

	[field: CompilerGenerated]
	public int NodeId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int Sequence
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public ulong Timestamp
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	public Uuid(int nodeId, int sequence, ulong timestamp)
	{
		NodeId = nodeId;
		Sequence = sequence;
		Timestamp = timestamp;
	}

	public override string ToString()
	{
		return String.Format("{0:X8}{1:X8}{2:X16}", (object)NodeId, (object)Sequence, (object)Timestamp);
	}

	public static implicit operator Uuid(Guid guid)
	{
		return Unsafe.As<Guid, Uuid>(ref guid);
	}

	public static implicit operator Guid(Uuid uuid)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		return Unsafe.As<Uuid, Guid>(ref uuid);
	}

	public bool Equals(Uuid other)
	{
		if (NodeId == other.NodeId && Sequence == other.Sequence)
		{
			return Timestamp == other.Timestamp;
		}
		return false;
	}

	public override bool Equals(object obj)
	{
		if (obj is Uuid other)
		{
			return Equals(other);
		}
		return false;
	}

	public override int GetHashCode()
	{
		int num = ((NodeId * 397) ^ Sequence) * 397;
		ulong timestamp = Timestamp;
		return num ^ ((UInt64)(ref timestamp)).GetHashCode();
	}

	public static bool operator ==(Uuid left, Uuid right)
	{
		return left.Equals(right);
	}

	public static bool operator !=(Uuid left, Uuid right)
	{
		return !left.Equals(right);
	}

	static Uuid()
	{
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Expected O, but got Unknown
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		if (Marshal.SizeOf<Uuid>() != Marshal.SizeOf<Guid>())
		{
			throw new Exception("sizeof(Uuid) != sizeof(Guid)");
		}
		_syncRoot = (object)new Object();
		_nodeId = ((Object)Environment.MachineName).GetHashCode();
		_sequence = Environment.TickCount;
	}

	public static Uuid Generate()
	{
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		lock (_syncRoot)
		{
			DateTime utcNow = DateTime.UtcNow;
			ulong ticks = (ulong)((DateTime)(ref utcNow)).Ticks;
			if (ticks <= _previousTimestamp)
			{
				_sequence++;
			}
			_previousTimestamp = ticks;
			return new Uuid(_nodeId, _sequence, ticks);
		}
	}
}
