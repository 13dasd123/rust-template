using System;
using System.Collections.Generic;

internal static class Util : Object
{
	public static T Update<T>(in T currentValue, in T newValue, ref bool changed) where T : IEquatable<T>
	{
		if (EqualityComparer<T>.Default.Equals(currentValue, newValue))
		{
			return currentValue;
		}
		changed = true;
		return newValue;
	}

	public static bool Resize<T>(this List<T> list, int newCount)
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		if (list == null)
		{
			throw new ArgumentNullException("list");
		}
		if (newCount < 0)
		{
			throw new ArgumentOutOfRangeException("newCount");
		}
		if (list.Count == newCount)
		{
			return false;
		}
		if (list.Count > newCount)
		{
			while (list.Count > newCount)
			{
				list.RemoveAt(list.Count - 1);
			}
		}
		else
		{
			while (list.Count < newCount)
			{
				list.Add(default(T));
			}
		}
		return true;
	}
}
