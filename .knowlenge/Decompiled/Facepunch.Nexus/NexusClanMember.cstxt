using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Facepunch.Nexus;
using Facepunch.Nexus.Models;

public class NexusClanMember : Object
{
	private readonly VariableContainer _variables;

	[field: CompilerGenerated]
	public string PlayerId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int RoleId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public long Joined
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public long LastSeen
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	public IEnumerable<KeyValuePair<string, Variable>> Variables => _variables;

	public NexusClanMember(ClanMember details)
	{
		_variables = new VariableContainer();
		UpdateFromModel(details);
	}

	public bool TryGetVariable(string key, out Variable variable)
	{
		return _variables.TryGet(key, out variable);
	}

	internal bool UpdateFromModel(ClanMember details)
	{
		bool changed = false;
		PlayerId = Util.Update<string>(in ILSpyHelper_AsRefReadOnly(PlayerId), in ILSpyHelper_AsRefReadOnly(details.PlayerId), ref changed);
		RoleId = Util.Update<int>(in ILSpyHelper_AsRefReadOnly(RoleId), in ILSpyHelper_AsRefReadOnly(details.RoleId), ref changed);
		Joined = Util.Update<long>(in ILSpyHelper_AsRefReadOnly(Joined), in ILSpyHelper_AsRefReadOnly(details.Joined), ref changed);
		LastSeen = Util.Update<long>(in ILSpyHelper_AsRefReadOnly(LastSeen), in ILSpyHelper_AsRefReadOnly(details.LastSeen), ref changed);
		return changed | _variables.UpdateFromModel(details.Variables);
		static ref readonly T ILSpyHelper_AsRefReadOnly<T>(in T temp)
		{
			//ILSpy generated this function to help ensure overload resolution can pick the overload using 'in'
			return ref temp;
		}
	}
}
