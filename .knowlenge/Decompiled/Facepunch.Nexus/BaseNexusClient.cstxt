using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;
using Facepunch.Nexus;
using Facepunch.Nexus.Connector;
using Facepunch.Nexus.Models;
using Facepunch.Nexus.Time;

public abstract class BaseNexusClient : NexusAnonymousClient, IDisposable
{
	[StructLayout(3)]
	[CompilerGenerated]
	private struct <Start>d__16 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public BaseNexusClient <>4__this;

		private ValueTaskAwaiter <>u__1;

		private void MoveNext()
		{
			//IL_00b2: Expected O, but got Unknown
			//IL_0078: Unknown result type (might be due to invalid IL or missing references)
			//IL_007d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0084: Unknown result type (might be due to invalid IL or missing references)
			//IL_009c: Unknown result type (might be due to invalid IL or missing references)
			//IL_003b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0048: Unknown result type (might be due to invalid IL or missing references)
			//IL_004d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0033: Unknown result type (might be due to invalid IL or missing references)
			//IL_0061: Unknown result type (might be due to invalid IL or missing references)
			//IL_0062: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			BaseNexusClient baseNexusClient = <>4__this;
			try
			{
				ValueTaskAwaiter val;
				if (num != 0)
				{
					if (baseNexusClient._started)
					{
						throw new InvalidOperationException(String.Concat("The ", ((MemberInfo)((Object)baseNexusClient).GetType()).Name, " was already started"));
					}
					val = baseNexusClient.Initialize(baseNexusClient.CancellationToken).GetAwaiter();
					if (!((ValueTaskAwaiter)(ref val)).IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ValueTaskAwaiter, <Start>d__16>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(ValueTaskAwaiter);
					num = (<>1__state = -1);
				}
				((ValueTaskAwaiter)(ref val)).GetResult();
				baseNexusClient.UpdateLoop(baseNexusClient.CancellationToken);
				baseNexusClient._started = true;
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <UpdateLoop>d__19 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public BaseNexusClient <>4__this;

		public CancellationToken ct;

		private TaskAwaiter <>u__1;

		private ValueTaskAwaiter <>u__2;

		private void MoveNext()
		{
			//IL_012b: Expected O, but got Unknown
			//IL_005e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0063: Unknown result type (might be due to invalid IL or missing references)
			//IL_006a: Unknown result type (might be due to invalid IL or missing references)
			//IL_002b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0030: Unknown result type (might be due to invalid IL or missing references)
			//IL_0044: Unknown result type (might be due to invalid IL or missing references)
			//IL_0045: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
			//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
			//IL_0087: Unknown result type (might be due to invalid IL or missing references)
			//IL_0095: Unknown result type (might be due to invalid IL or missing references)
			//IL_009a: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
			//IL_00af: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			BaseNexusClient baseNexusClient = <>4__this;
			try
			{
				if (num != 0)
				{
					if (num == 1)
					{
						goto IL_0081;
					}
					goto IL_0117;
				}
				TaskAwaiter val = <>u__1;
				<>u__1 = default(TaskAwaiter);
				num = (<>1__state = -1);
				goto IL_0079;
				IL_0079:
				((TaskAwaiter)(ref val)).GetResult();
				goto IL_0081;
				IL_0081:
				Exception val3 = default(Exception);
				try
				{
					ValueTaskAwaiter val2;
					if (num != 1)
					{
						val2 = baseNexusClient.Update(ct).GetAwaiter();
						if (!((ValueTaskAwaiter)(ref val2)).IsCompleted)
						{
							num = (<>1__state = 1);
							<>u__2 = val2;
							((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ValueTaskAwaiter, <UpdateLoop>d__19>(ref val2, ref this);
							return;
						}
					}
					else
					{
						val2 = <>u__2;
						<>u__2 = default(ValueTaskAwaiter);
						num = (<>1__state = -1);
					}
					((ValueTaskAwaiter)(ref val2)).GetResult();
				}
				catch (object obj) when (((Func<bool>)delegate
				{
					// Could not convert BlockContainer to single expression
					object obj2 = ((obj is Exception) ? obj : null);
					System.Runtime.CompilerServices.Unsafe.SkipInit(out int result);
					if (obj2 == null)
					{
						result = 0;
					}
					else
					{
						val3 = (Exception)obj2;
						result = ((!(val3 is OperationCanceledException)) ? 1 : 0);
					}
					return (byte)result != 0;
				}).Invoke())
				{
					baseNexusClient.DispatchError(val3);
				}
				goto IL_0117;
				IL_0117:
				if (!((CancellationToken)(ref ct)).IsCancellationRequested)
				{
					val = baseNexusClient.Clock.Delay(baseNexusClient._updateInterval).GetAwaiter();
					if (!((TaskAwaiter)(ref val)).IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<TaskAwaiter, <UpdateLoop>d__19>(ref val, ref this);
						return;
					}
					goto IL_0079;
				}
			}
			catch (Exception val4)
			{
				Exception exception = val4;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[CompilerGenerated]
	private NexusVariableChangedHandler m_OnVariableChanged;

	[CompilerGenerated]
	private NexusErrorHandler m_OnError;

	protected readonly IClockProvider Clock;

	protected readonly CancellationToken CancellationToken;

	private readonly CancellationTokenSource _cts;

	private readonly double _updateInterval;

	private bool _disposed;

	private bool _started;

	protected virtual bool ShouldUpdateVariables => _started;

	public event NexusVariableChangedHandler OnVariableChanged
	{
		[CompilerGenerated]
		add
		{
			NexusVariableChangedHandler nexusVariableChangedHandler = this.m_OnVariableChanged;
			NexusVariableChangedHandler nexusVariableChangedHandler2;
			do
			{
				nexusVariableChangedHandler2 = nexusVariableChangedHandler;
				NexusVariableChangedHandler nexusVariableChangedHandler3 = (NexusVariableChangedHandler)(object)Delegate.Combine((Delegate)(object)nexusVariableChangedHandler2, (Delegate)(object)value);
				nexusVariableChangedHandler = Interlocked.CompareExchange<NexusVariableChangedHandler>(ref this.m_OnVariableChanged, nexusVariableChangedHandler3, nexusVariableChangedHandler2);
			}
			while (nexusVariableChangedHandler != nexusVariableChangedHandler2);
		}
		[CompilerGenerated]
		remove
		{
			NexusVariableChangedHandler nexusVariableChangedHandler = this.m_OnVariableChanged;
			NexusVariableChangedHandler nexusVariableChangedHandler2;
			do
			{
				nexusVariableChangedHandler2 = nexusVariableChangedHandler;
				NexusVariableChangedHandler nexusVariableChangedHandler3 = (NexusVariableChangedHandler)(object)Delegate.Remove((Delegate)(object)nexusVariableChangedHandler2, (Delegate)(object)value);
				nexusVariableChangedHandler = Interlocked.CompareExchange<NexusVariableChangedHandler>(ref this.m_OnVariableChanged, nexusVariableChangedHandler3, nexusVariableChangedHandler2);
			}
			while (nexusVariableChangedHandler != nexusVariableChangedHandler2);
		}
	}

	public event NexusErrorHandler OnError
	{
		[CompilerGenerated]
		add
		{
			NexusErrorHandler nexusErrorHandler = this.m_OnError;
			NexusErrorHandler nexusErrorHandler2;
			do
			{
				nexusErrorHandler2 = nexusErrorHandler;
				NexusErrorHandler nexusErrorHandler3 = (NexusErrorHandler)(object)Delegate.Combine((Delegate)(object)nexusErrorHandler2, (Delegate)(object)value);
				nexusErrorHandler = Interlocked.CompareExchange<NexusErrorHandler>(ref this.m_OnError, nexusErrorHandler3, nexusErrorHandler2);
			}
			while (nexusErrorHandler != nexusErrorHandler2);
		}
		[CompilerGenerated]
		remove
		{
			NexusErrorHandler nexusErrorHandler = this.m_OnError;
			NexusErrorHandler nexusErrorHandler2;
			do
			{
				nexusErrorHandler2 = nexusErrorHandler;
				NexusErrorHandler nexusErrorHandler3 = (NexusErrorHandler)(object)Delegate.Remove((Delegate)(object)nexusErrorHandler2, (Delegate)(object)value);
				nexusErrorHandler = Interlocked.CompareExchange<NexusErrorHandler>(ref this.m_OnError, nexusErrorHandler3, nexusErrorHandler2);
			}
			while (nexusErrorHandler != nexusErrorHandler2);
		}
	}

	protected BaseNexusClient(INexusConnector connector, IClockProvider clock, double updateInterval)
		: base(connector, clock)
	{
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Expected O, but got Unknown
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		_cts = new CancellationTokenSource();
		_updateInterval = updateInterval;
		Clock = clock ?? throw new ArgumentNullException("clock");
		CancellationToken = _cts.Token;
	}

	~BaseNexusClient()
	{
		try
		{
			Dispose(disposing: false);
		}
		finally
		{
			((Object)this).Finalize();
		}
	}

	public void Dispose()
	{
		Dispose(disposing: true);
		GC.SuppressFinalize((object)this);
	}

	protected virtual void Dispose(bool disposing)
	{
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		if (_disposed)
		{
			throw new ObjectDisposedException(((MemberInfo)((Object)this).GetType()).Name);
		}
		_disposed = true;
		_cts.Cancel();
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task Start()
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<Start>d__16 <Start>d__ = default(<Start>d__16);
		<Start>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<Start>d__.<>4__this = this;
		<Start>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <Start>d__.<>t__builder)).Start<<Start>d__16>(ref <Start>d__);
		return ((AsyncTaskMethodBuilder)(ref <Start>d__.<>t__builder)).Task;
	}

	protected abstract System.Threading.Tasks.ValueTask Initialize(CancellationToken ct);

	protected abstract System.Threading.Tasks.ValueTask Update(CancellationToken ct);

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	private Task UpdateLoop(CancellationToken ct)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		<UpdateLoop>d__19 <UpdateLoop>d__ = default(<UpdateLoop>d__19);
		<UpdateLoop>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<UpdateLoop>d__.<>4__this = this;
		<UpdateLoop>d__.ct = ct;
		<UpdateLoop>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <UpdateLoop>d__.<>t__builder)).Start<<UpdateLoop>d__19>(ref <UpdateLoop>d__);
		return ((AsyncTaskMethodBuilder)(ref <UpdateLoop>d__.<>t__builder)).Task;
	}

	internal void UpdateVariables(VariableContainer container, Dictionary<string, VariableData> updatedData)
	{
		//IL_0061: Expected O, but got Unknown
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		if (container == null)
		{
			throw new ArgumentNullException("container");
		}
		if (updatedData == null || updatedData.Count == 0)
		{
			return;
		}
		NexusVariableChangedHandler nexusVariableChangedHandler = this.OnVariableChanged;
		HashSet<string> val = ((ShouldUpdateVariables && nexusVariableChangedHandler != null) ? new HashSet<string>() : null);
		container.UpdateFromModel(updatedData, val);
		if (nexusVariableChangedHandler == null || val == null)
		{
			return;
		}
		Enumerator<string> enumerator = val.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				string current = enumerator.Current;
				try
				{
					nexusVariableChangedHandler(this, current);
				}
				catch (Exception val2)
				{
					Exception exception = val2;
					DispatchError(exception);
				}
			}
		}
		finally
		{
			((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
		}
	}

	internal void DispatchVariableChanged(string key)
	{
		//IL_0016: Expected O, but got Unknown
		try
		{
			this.OnVariableChanged?.Invoke(this, key);
		}
		catch (Exception val)
		{
			Exception exception = val;
			DispatchError(exception);
		}
	}

	internal void DispatchError(Exception exception)
	{
		try
		{
			this.OnError?.Invoke(this, exception);
		}
		catch (Object)
		{
		}
	}
}
