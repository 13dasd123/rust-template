using System;
using System.Collections;
using System.Collections.Generic;
using Facepunch.Nexus;
using Facepunch.Nexus.Models;

internal class VariableContainer : Object, IEnumerable<KeyValuePair<string, Variable>>, IEnumerable
{
	private readonly Dictionary<string, Variable> _variables;

	public int Count => _variables.Count;

	public VariableContainer()
	{
		_variables = new Dictionary<string, Variable>((IEqualityComparer<string>)(object)StringComparer.InvariantCultureIgnoreCase);
	}

	public bool UpdateFromModel(Dictionary<string, VariableData> data, HashSet<string> changedKeys = null)
	{
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		if (data == null || data.Count == 0)
		{
			return false;
		}
		bool result = false;
		Enumerator<string, VariableData> enumerator = data.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				KeyValuePair<string, VariableData> current = enumerator.Current;
				if (UpdateFromModel(current.Key, current.Value))
				{
					changedKeys?.Add(current.Key);
					result = true;
				}
			}
			return result;
		}
		finally
		{
			((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
		}
	}

	public bool UpdateFromModel(string key, VariableData data)
	{
		Variable variable = default(Variable);
		if (_variables.TryGetValue(key, ref variable))
		{
			return variable.UpdateFromModel(data);
		}
		variable = new Variable();
		variable.UpdateFromModel(data);
		_variables.Add(key, variable);
		return true;
	}

	public bool TryGet(string key, out Variable variable)
	{
		return _variables.TryGetValue(key, ref variable);
	}

	public bool Set(string key, string value)
	{
		Variable variable = default(Variable);
		if (!_variables.TryGetValue(key, ref variable))
		{
			variable = new Variable();
			_variables.Add(key, variable);
		}
		return variable.Set(value, 0L);
	}

	public bool Set(string key, byte[] value)
	{
		Variable variable = default(Variable);
		if (!_variables.TryGetValue(key, ref variable))
		{
			variable = new Variable();
			_variables.Add(key, variable);
		}
		return variable.Set(value, 0L);
	}

	public void Remove(string key)
	{
		_variables.Remove(key);
	}

	public void Clear()
	{
		_variables.Clear();
	}

	public Enumerator<string, Variable> GetEnumerator()
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		return _variables.GetEnumerator();
	}

	IEnumerator<KeyValuePair<string, Variable>> IEnumerable<KeyValuePair<string, Variable>>.GetEnumerator()
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		return (IEnumerator<KeyValuePair<string, Variable>>)(object)_variables.GetEnumerator();
	}

	IEnumerator IEnumerable.GetEnumerator()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		return (IEnumerator)(object)GetEnumerator();
	}
}
