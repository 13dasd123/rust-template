using System;
using System.Buffers;
using System.Collections.Generic;
using System.Diagnostics;
using System.Net.WebSockets;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Channels;
using System.Threading.Tasks;
using Facepunch.Nexus;
using Facepunch.Nexus.Connector;
using Facepunch.Nexus.Logging;
using Facepunch.Nexus.Models;
using Newtonsoft.Json;

internal class NexusSocketConnector : Object, INexusSocketConnector, IDisposable
{
	[StructLayout(3)]
	[CompilerGenerated]
	private struct <Connect>d__21 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<ClientWebSocket> <>t__builder;

		public NexusSocketConnector <>4__this;

		public CancellationToken ct;

		private ClientWebSocket <socket>5__2;

		private TaskAwaiter <>u__1;

		private void MoveNext()
		{
			//IL_00d6: Expected O, but got Unknown
			//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
			//IL_0015: Unknown result type (might be due to invalid IL or missing references)
			//IL_001f: Expected O, but got Unknown
			//IL_0033: Unknown result type (might be due to invalid IL or missing references)
			//IL_006f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0079: Unknown result type (might be due to invalid IL or missing references)
			//IL_007e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0092: Unknown result type (might be due to invalid IL or missing references)
			//IL_0093: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusSocketConnector nexusSocketConnector = <>4__this;
			ClientWebSocket result;
			try
			{
				TaskAwaiter val;
				if (num != 0)
				{
					<socket>5__2 = new ClientWebSocket();
					<socket>5__2.Options.KeepAliveInterval = TimeSpan.FromSeconds(30.0);
					<socket>5__2.Options.SetRequestHeader("Authorization", String.Concat("Bearer ", nexusSocketConnector._secretKey));
					val = <socket>5__2.ConnectAsync(nexusSocketConnector._socketEndpoint, ct).GetAwaiter();
					if (!((TaskAwaiter)(ref val)).IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<TaskAwaiter, <Connect>d__21>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter);
					num = (<>1__state = -1);
				}
				((TaskAwaiter)(ref val)).GetResult();
				result = <socket>5__2;
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<socket>5__2 = null;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<socket>5__2 = null;
			<>t__builder.SetResult(result);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <HandleIncoming>d__19 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public NexusSocketConnector <>4__this;

		public CancellationToken ct;

		private byte[] <buffer>5__2;

		private int <offset>5__3;

		private TaskAwaiter<WebSocketReceiveResult> <>u__1;

		private TaskAwaiter <>u__2;

		private void MoveNext()
		{
			//IL_02de: Expected O, but got Unknown
			//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d4: Invalid comparison between Unknown and I4
			//IL_0126: Unknown result type (might be due to invalid IL or missing references)
			//IL_012b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0133: Unknown result type (might be due to invalid IL or missing references)
			//IL_0150: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
			//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
			//IL_0066: Unknown result type (might be due to invalid IL or missing references)
			//IL_0068: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			//IL_0077: Unknown result type (might be due to invalid IL or missing references)
			//IL_015e: Unknown result type (might be due to invalid IL or missing references)
			//IL_016d: Unknown result type (might be due to invalid IL or missing references)
			//IL_010b: Unknown result type (might be due to invalid IL or missing references)
			//IL_010d: Unknown result type (might be due to invalid IL or missing references)
			//IL_008c: Unknown result type (might be due to invalid IL or missing references)
			//IL_008e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0181: Unknown result type (might be due to invalid IL or missing references)
			//IL_01bf: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusSocketConnector nexusSocketConnector = <>4__this;
			try
			{
				if ((uint)num <= 1u)
				{
					goto IL_002d;
				}
				goto IL_02b2;
				IL_02b2:
				if (!((CancellationToken)(ref ct)).IsCancellationRequested && nexusSocketConnector.IsConnected)
				{
					<buffer>5__2 = ArrayPool<byte>.Shared.Rent(1048576);
					goto IL_002d;
				}
				nexusSocketConnector._logger.LogInfo("Nexus socket incoming handler terminating");
				goto end_IL_000e;
				IL_002d:
				Exception exception = default(Exception);
				try
				{
					TaskAwaiter val;
					if (num != 0)
					{
						if (num != 1)
						{
							<offset>5__3 = 0;
							goto IL_003e;
						}
						val = <>u__2;
						<>u__2 = default(TaskAwaiter);
						num = (<>1__state = -1);
						goto IL_0142;
					}
					TaskAwaiter<WebSocketReceiveResult> val2 = <>u__1;
					<>u__1 = default(TaskAwaiter<WebSocketReceiveResult>);
					num = (<>1__state = -1);
					goto IL_00c3;
					IL_003e:
					ArraySegment<byte> val3 = default(ArraySegment<byte>);
					val3..ctor(<buffer>5__2, <offset>5__3, <buffer>5__2.Length - <offset>5__3);
					val2 = ((WebSocket)nexusSocketConnector._socket).ReceiveAsync(val3, ct).GetAwaiter();
					if (!val2.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val2;
						((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<TaskAwaiter<WebSocketReceiveResult>, <HandleIncoming>d__19>(ref val2, ref this);
						return;
					}
					goto IL_00c3;
					IL_00c3:
					WebSocketReceiveResult result = val2.GetResult();
					if ((int)result.MessageType == 2)
					{
						val = ((WebSocket)nexusSocketConnector._socket).CloseAsync((WebSocketCloseStatus)1000, "Closing", ct).GetAwaiter();
						if (!((TaskAwaiter)(ref val)).IsCompleted)
						{
							num = (<>1__state = 1);
							<>u__2 = val;
							((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<TaskAwaiter, <HandleIncoming>d__19>(ref val, ref this);
							return;
						}
						goto IL_0142;
					}
					if ((int)result.MessageType != 0)
					{
						throw new InvalidOperationException(String.Format("Unexpected message type {0}", (object)result.MessageType));
					}
					if (result.Count == 0)
					{
						throw new InvalidOperationException("Received no data");
					}
					<offset>5__3 += result.Count;
					if (<offset>5__3 >= <buffer>5__2.Length)
					{
						if (<buffer>5__2.Length >= 67108864)
						{
							throw new InvalidOperationException("Message too large");
						}
						byte[] array = ArrayPool<byte>.Shared.Rent(<buffer>5__2.Length * 2);
						Buffer.BlockCopy((Array)(object)<buffer>5__2, 0, (Array)(object)array, 0, <buffer>5__2.Length);
						ArrayPool<byte>.Shared.Return(<buffer>5__2, false);
						<buffer>5__2 = array;
					}
					if (!result.EndOfMessage)
					{
						goto IL_003e;
					}
					NexusMessage nexusMessage = <HandleIncoming>g__ReadMessage|19_0(<buffer>5__2, <offset>5__3);
					Queue<NexusMessage> incoming = nexusSocketConnector._incoming;
					bool flag = false;
					try
					{
						Monitor.Enter((object)incoming, ref flag);
						nexusSocketConnector._incoming.Enqueue(nexusMessage);
					}
					finally
					{
						if (num < 0 && flag)
						{
							Monitor.Exit((object)incoming);
						}
					}
					goto end_IL_002d;
					IL_0142:
					((TaskAwaiter)(ref val)).GetResult();
					goto end_IL_000e;
					end_IL_002d:;
				}
				catch (object obj) when (((Func<bool>)delegate
				{
					// Could not convert BlockContainer to single expression
					object obj2 = ((obj is Exception) ? obj : null);
					System.Runtime.CompilerServices.Unsafe.SkipInit(out int result2);
					if (obj2 == null)
					{
						result2 = 0;
					}
					else
					{
						exception = (Exception)obj2;
						result2 = ((!((CancellationToken)(ref ct)).IsCancellationRequested) ? 1 : 0);
					}
					return (byte)result2 != 0;
				}).Invoke())
				{
					nexusSocketConnector._logger.LogError("Error handling incoming message", exception);
					throw;
				}
				finally
				{
					if (num < 0)
					{
						ArrayPool<byte>.Shared.Return(<buffer>5__2, false);
					}
				}
				<buffer>5__2 = null;
				goto IL_02b2;
				end_IL_000e:;
			}
			catch (Exception val4)
			{
				Exception exception2 = val4;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception2);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <HandleOutgoing>d__20 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public NexusSocketConnector <>4__this;

		public CancellationToken ct;

		private byte[] <buffer>5__2;

		private ValueTaskAwaiter<string> <>u__1;

		private TaskAwaiter <>u__2;

		private void MoveNext()
		{
			//IL_01c0: Expected O, but got Unknown
			//IL_0083: Unknown result type (might be due to invalid IL or missing references)
			//IL_0088: Unknown result type (might be due to invalid IL or missing references)
			//IL_0090: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
			//IL_00db: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
			//IL_011a: Unknown result type (might be due to invalid IL or missing references)
			//IL_011f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0127: Unknown result type (might be due to invalid IL or missing references)
			//IL_0040: Unknown result type (might be due to invalid IL or missing references)
			//IL_004e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0053: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
			//IL_0101: Unknown result type (might be due to invalid IL or missing references)
			//IL_0068: Unknown result type (might be due to invalid IL or missing references)
			//IL_006a: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusSocketConnector nexusSocketConnector = <>4__this;
			try
			{
				if ((uint)num <= 1u)
				{
					goto IL_002a;
				}
				goto IL_0194;
				IL_0194:
				if (!((CancellationToken)(ref ct)).IsCancellationRequested && nexusSocketConnector.IsConnected)
				{
					<buffer>5__2 = ArrayPool<byte>.Shared.Rent(64);
					goto IL_002a;
				}
				nexusSocketConnector._logger.LogInfo("Nexus socket incoming handler terminating");
				goto end_IL_000e;
				IL_002a:
				Exception exception = default(Exception);
				try
				{
					TaskAwaiter val;
					ValueTaskAwaiter<string> val2;
					if (num != 0)
					{
						if (num == 1)
						{
							val = <>u__2;
							<>u__2 = default(TaskAwaiter);
							num = (<>1__state = -1);
							goto IL_0136;
						}
						val2 = nexusSocketConnector._outgoing.Reader.ReadAsync(ct).GetAwaiter();
						if (!val2.IsCompleted)
						{
							num = (<>1__state = 0);
							<>u__1 = val2;
							((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<ValueTaskAwaiter<string>, <HandleOutgoing>d__20>(ref val2, ref this);
							return;
						}
					}
					else
					{
						val2 = <>u__1;
						<>u__1 = default(ValueTaskAwaiter<string>);
						num = (<>1__state = -1);
					}
					string result = val2.GetResult();
					int bytes = Encoding.UTF8.GetBytes(result, 0, result.Length, <buffer>5__2, 0);
					ArraySegment<byte> val3 = default(ArraySegment<byte>);
					val3..ctor(<buffer>5__2, 0, bytes);
					val = ((WebSocket)nexusSocketConnector._socket).SendAsync(val3, (WebSocketMessageType)0, true, ct).GetAwaiter();
					if (!((TaskAwaiter)(ref val)).IsCompleted)
					{
						num = (<>1__state = 1);
						<>u__2 = val;
						((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<TaskAwaiter, <HandleOutgoing>d__20>(ref val, ref this);
						return;
					}
					goto IL_0136;
					IL_0136:
					((TaskAwaiter)(ref val)).GetResult();
				}
				catch (object obj) when (((Func<bool>)delegate
				{
					// Could not convert BlockContainer to single expression
					object obj2 = ((obj is Exception) ? obj : null);
					System.Runtime.CompilerServices.Unsafe.SkipInit(out int result2);
					if (obj2 == null)
					{
						result2 = 0;
					}
					else
					{
						exception = (Exception)obj2;
						result2 = ((!((CancellationToken)(ref ct)).IsCancellationRequested) ? 1 : 0);
					}
					return (byte)result2 != 0;
				}).Invoke())
				{
					nexusSocketConnector._logger.LogError("Error handling outgoing message", exception);
					throw;
				}
				finally
				{
					if (num < 0)
					{
						ArrayPool<byte>.Shared.Return(<buffer>5__2, false);
					}
				}
				<buffer>5__2 = null;
				goto IL_0194;
				end_IL_000e:;
			}
			catch (Exception val4)
			{
				Exception exception2 = val4;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception2);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	[StructLayout(3)]
	[CompilerGenerated]
	private struct <ReconnectLoop>d__18 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder <>t__builder;

		public NexusSocketConnector <>4__this;

		public CancellationToken ct;

		private int <>7__wrap1;

		private Exception <e>5__3;

		private TaskAwaiter<ClientWebSocket> <>u__1;

		private CancellationTokenSource <connCts>5__4;

		private TaskAwaiter<Task> <>u__2;

		private TaskAwaiter <>u__3;

		private void MoveNext()
		{
			//IL_02c5: Expected O, but got Unknown
			//IL_01c1: Unknown result type (might be due to invalid IL or missing references)
			//IL_01cb: Expected O, but got Unknown
			//IL_026b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0270: Unknown result type (might be due to invalid IL or missing references)
			//IL_0278: Unknown result type (might be due to invalid IL or missing references)
			//IL_022c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0236: Unknown result type (might be due to invalid IL or missing references)
			//IL_023b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0086: Unknown result type (might be due to invalid IL or missing references)
			//IL_008b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0093: Unknown result type (might be due to invalid IL or missing references)
			//IL_0250: Unknown result type (might be due to invalid IL or missing references)
			//IL_0252: Unknown result type (might be due to invalid IL or missing references)
			//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
			//IL_0047: Unknown result type (might be due to invalid IL or missing references)
			//IL_0051: Unknown result type (might be due to invalid IL or missing references)
			//IL_0056: Unknown result type (might be due to invalid IL or missing references)
			//IL_006b: Unknown result type (might be due to invalid IL or missing references)
			//IL_006d: Unknown result type (might be due to invalid IL or missing references)
			//IL_014c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0151: Unknown result type (might be due to invalid IL or missing references)
			//IL_0159: Unknown result type (might be due to invalid IL or missing references)
			//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
			//IL_0107: Unknown result type (might be due to invalid IL or missing references)
			//IL_0117: Unknown result type (might be due to invalid IL or missing references)
			//IL_011c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0131: Unknown result type (might be due to invalid IL or missing references)
			//IL_0133: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusSocketConnector nexusSocketConnector = <>4__this;
			try
			{
				_ = 2;
				try
				{
					if ((uint)num <= 1u)
					{
						goto IL_002b;
					}
					if (num != 2)
					{
						goto IL_0295;
					}
					TaskAwaiter val = <>u__3;
					<>u__3 = default(TaskAwaiter);
					num = (<>1__state = -1);
					goto IL_0287;
					IL_002b:
					try
					{
						TaskAwaiter<ClientWebSocket> val2;
						if (num != 0)
						{
							if (num == 1)
							{
								goto IL_00e0;
							}
							nexusSocketConnector._logger.LogInfo("Connecting to nexus socket...");
							val2 = nexusSocketConnector.Connect(ct).GetAwaiter();
							if (!val2.IsCompleted)
							{
								num = (<>1__state = 0);
								<>u__1 = val2;
								((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<TaskAwaiter<ClientWebSocket>, <ReconnectLoop>d__18>(ref val2, ref this);
								return;
							}
						}
						else
						{
							val2 = <>u__1;
							<>u__1 = default(TaskAwaiter<ClientWebSocket>);
							num = (<>1__state = -1);
						}
						ClientWebSocket result = val2.GetResult();
						nexusSocketConnector._socket = result;
						nexusSocketConnector._logger.LogInfo("Connected to nexus socket!");
						<connCts>5__4 = CancellationTokenSource.CreateLinkedTokenSource((CancellationToken[])(object)new CancellationToken[1] { ct });
						goto IL_00e0;
						IL_00e0:
						try
						{
							TaskAwaiter<Task> val3;
							if (num != 1)
							{
								val3 = Task.WhenAny((Task[])(object)new Task[2]
								{
									nexusSocketConnector.HandleIncoming(<connCts>5__4.Token),
									nexusSocketConnector.HandleOutgoing(<connCts>5__4.Token)
								}).GetAwaiter();
								if (!val3.IsCompleted)
								{
									num = (<>1__state = 1);
									<>u__2 = val3;
									((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<TaskAwaiter<Task>, <ReconnectLoop>d__18>(ref val3, ref this);
									return;
								}
							}
							else
							{
								val3 = <>u__2;
								<>u__2 = default(TaskAwaiter<Task>);
								num = (<>1__state = -1);
							}
							val3.GetResult();
							<connCts>5__4.Cancel();
						}
						finally
						{
							if (num < 0 && <connCts>5__4 != null)
							{
								((IDisposable)<connCts>5__4).Dispose();
							}
						}
						<connCts>5__4 = null;
						nexusSocketConnector._logger.LogInfo("Nexus socket handlers terminated");
					}
					catch (object obj) when (((Func<bool>)delegate
					{
						// Could not convert BlockContainer to single expression
						object obj2 = ((obj is Exception) ? obj : null);
						System.Runtime.CompilerServices.Unsafe.SkipInit(out int result2);
						if (obj2 == null)
						{
							result2 = 0;
						}
						else
						{
							<e>5__3 = (Exception)obj2;
							result2 = ((!((CancellationToken)(ref ct)).IsCancellationRequested) ? 1 : 0);
						}
						return (byte)result2 != 0;
					}).Invoke())
					{
						<>7__wrap1 = 1;
					}
					int num2 = <>7__wrap1;
					if (num2 == 1)
					{
						nexusSocketConnector._logger.LogError("Lost connection to Nexus zone socket", <e>5__3);
						ClientWebSocket socket = nexusSocketConnector._socket;
						if (socket != null)
						{
							((WebSocket)socket).Dispose();
						}
						nexusSocketConnector._socket = null;
						val = Task.Delay(5000, ct).GetAwaiter();
						if (!((TaskAwaiter)(ref val)).IsCompleted)
						{
							num = (<>1__state = 2);
							<>u__3 = val;
							((AsyncTaskMethodBuilder)(ref <>t__builder)).AwaitUnsafeOnCompleted<TaskAwaiter, <ReconnectLoop>d__18>(ref val, ref this);
							return;
						}
						goto IL_0287;
					}
					goto IL_028e;
					IL_0287:
					((TaskAwaiter)(ref val)).GetResult();
					goto IL_028e;
					IL_0295:
					if (!((CancellationToken)(ref ct)).IsCancellationRequested)
					{
						<>7__wrap1 = 0;
						goto IL_002b;
					}
					goto end_IL_0013;
					IL_028e:
					<e>5__3 = null;
					goto IL_0295;
					end_IL_0013:;
				}
				catch (OperationCanceledException)
				{
				}
				finally
				{
					if (num < 0)
					{
						nexusSocketConnector._logger.LogInfo("Nexus socket reconnect loop is exiting");
					}
				}
			}
			catch (Exception val5)
			{
				Exception exception = val5;
				<>1__state = -2;
				((AsyncTaskMethodBuilder)(ref <>t__builder)).SetException(exception);
				return;
			}
			<>1__state = -2;
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetResult();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			((AsyncTaskMethodBuilder)(ref <>t__builder)).SetStateMachine(stateMachine);
		}
	}

	private const int MaxMessageIdLength = 64;

	private readonly INexusLogger _logger;

	private readonly CancellationTokenSource _cts;

	private readonly Uri _socketEndpoint;

	private readonly string _secretKey;

	private readonly Queue<NexusMessage> _incoming;

	private readonly Channel<string> _outgoing;

	private bool _started;

	private ClientWebSocket _socket;

	public bool IsStarted => _started;

	public bool IsConnected
	{
		get
		{
			//IL_0016: Unknown result type (might be due to invalid IL or missing references)
			//IL_001c: Invalid comparison between Unknown and I4
			if (_started && _socket != null)
			{
				return (int)((WebSocket)_socket).State == 2;
			}
			return false;
		}
	}

	public NexusSocketConnector(INexusLogger logger, string baseUrl, string secretKey, int lockDuration)
	{
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Expected O, but got Unknown
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Expected O, but got Unknown
		//IL_00af: Unknown result type (might be due to invalid IL or missing references)
		_logger = logger ?? NullLogger.Instance;
		baseUrl = ((baseUrl != null) ? baseUrl.TrimEnd((char[])(object)new Char[1] { (Char)47 }) : null) ?? throw new ArgumentNullException("baseUrl");
		if (baseUrl.StartsWith("http://"))
		{
			baseUrl = baseUrl.Replace("http://", "ws://");
		}
		if (baseUrl.StartsWith("https://"))
		{
			baseUrl = baseUrl.Replace("https://", "wss://");
		}
		_cts = new CancellationTokenSource();
		_socketEndpoint = new Uri(String.Format("{0}/zone/socket?lockDuration={1}", (object)baseUrl, (object)lockDuration));
		_secretKey = secretKey ?? throw new ArgumentNullException("secretKey");
		_incoming = new Queue<NexusMessage>();
		_outgoing = Channel.CreateBounded<string>(new BoundedChannelOptions(10)
		{
			SingleReader = true,
			SingleWriter = false
		});
	}

	public void Dispose()
	{
		_outgoing.Writer.Complete((Exception)null);
		_cts.Cancel();
		_cts.Dispose();
		ClientWebSocket socket = _socket;
		if (socket != null)
		{
			((WebSocket)socket).Dispose();
		}
		_socket = null;
	}

	public void Start()
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		if (_started)
		{
			throw new InvalidOperationException("The socket connector was already started.");
		}
		Task.Run((Func<Task>)([CompilerGenerated] () => ReconnectLoop(_cts.Token)));
		_started = true;
	}

	public bool TryReceive(out NexusMessage message)
	{
		lock (_incoming)
		{
			if (_incoming.Count == 0)
			{
				message = default(NexusMessage);
				return false;
			}
			message = _incoming.Dequeue();
			return true;
		}
	}

	public void Acknowledge(string messageId)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		if (String.IsNullOrWhiteSpace(messageId))
		{
			throw new ArgumentNullException("messageId");
		}
		if (Encoding.UTF8.GetByteCount(messageId) >= 64)
		{
			throw new ArgumentException(String.Format("{0} cannot exceed {1} bytes", (object)"messageId", (object)64));
		}
		if (!_outgoing.Writer.TryWrite(messageId))
		{
			throw new InvalidOperationException("Failed to enqueue message acknowledgement");
		}
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	private Task ReconnectLoop(CancellationToken ct)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		<ReconnectLoop>d__18 <ReconnectLoop>d__ = default(<ReconnectLoop>d__18);
		<ReconnectLoop>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<ReconnectLoop>d__.<>4__this = this;
		<ReconnectLoop>d__.ct = ct;
		<ReconnectLoop>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <ReconnectLoop>d__.<>t__builder)).Start<<ReconnectLoop>d__18>(ref <ReconnectLoop>d__);
		return ((AsyncTaskMethodBuilder)(ref <ReconnectLoop>d__.<>t__builder)).Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	private Task HandleIncoming(CancellationToken ct)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		<HandleIncoming>d__19 <HandleIncoming>d__ = default(<HandleIncoming>d__19);
		<HandleIncoming>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<HandleIncoming>d__.<>4__this = this;
		<HandleIncoming>d__.ct = ct;
		<HandleIncoming>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <HandleIncoming>d__.<>t__builder)).Start<<HandleIncoming>d__19>(ref <HandleIncoming>d__);
		return ((AsyncTaskMethodBuilder)(ref <HandleIncoming>d__.<>t__builder)).Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	private Task HandleOutgoing(CancellationToken ct)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		<HandleOutgoing>d__20 <HandleOutgoing>d__ = default(<HandleOutgoing>d__20);
		<HandleOutgoing>d__.<>t__builder = AsyncTaskMethodBuilder.Create();
		<HandleOutgoing>d__.<>4__this = this;
		<HandleOutgoing>d__.ct = ct;
		<HandleOutgoing>d__.<>1__state = -1;
		((AsyncTaskMethodBuilder)(ref <HandleOutgoing>d__.<>t__builder)).Start<<HandleOutgoing>d__20>(ref <HandleOutgoing>d__);
		return ((AsyncTaskMethodBuilder)(ref <HandleOutgoing>d__.<>t__builder)).Task;
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	private Task<ClientWebSocket> Connect(CancellationToken ct)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		<Connect>d__21 <Connect>d__ = default(<Connect>d__21);
		<Connect>d__.<>t__builder = AsyncTaskMethodBuilder<ClientWebSocket>.Create();
		<Connect>d__.<>4__this = this;
		<Connect>d__.ct = ct;
		<Connect>d__.<>1__state = -1;
		<Connect>d__.<>t__builder.Start<<Connect>d__21>(ref <Connect>d__);
		return <Connect>d__.<>t__builder.Task;
	}

	[CompilerGenerated]
	internal static NexusMessage <HandleIncoming>g__ReadMessage|19_0(byte[] buffer, int length)
	{
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		IncomingMessage incomingMessage = JsonConvert.DeserializeObject<IncomingMessage>(Encoding.UTF8.GetString(buffer, 0, length));
		if (incomingMessage.ContentType.StartsWith("text/") || incomingMessage.ContentType.StartsWith("application/json"))
		{
			string @string = Encoding.UTF8.GetString(incomingMessage.Data);
			return new NexusMessage(incomingMessage.MessageId, incomingMessage.Id, incomingMessage.ContentType, @string);
		}
		return new NexusMessage(incomingMessage.MessageId, incomingMessage.Id, incomingMessage.ContentType, incomingMessage.Data);
	}
}
