using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Facepunch.Nexus;
using Facepunch.Nexus.Models;

public class NexusClanRole : Object
{
	private readonly VariableContainer _variables;

	[field: CompilerGenerated]
	public int RoleId
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public int Rank
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public string Name
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public bool CanInvite
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public bool CanKick
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public bool CanPromote
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public bool CanDemote
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public bool CanAccessLogs
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	[field: CompilerGenerated]
	public bool CanAccessScoreEvents
	{
		[CompilerGenerated]
		get;
		[CompilerGenerated]
		set;
	}

	public IEnumerable<KeyValuePair<string, Variable>> Variables => _variables;

	public NexusClanRole(ClanRole details)
	{
		_variables = new VariableContainer();
		UpdateFromModel(details);
	}

	public bool TryGetVariable(string key, out Variable variable)
	{
		return _variables.TryGet(key, out variable);
	}

	internal bool UpdateFromModel(ClanRole details)
	{
		bool changed = false;
		RoleId = Util.Update<int>(in ILSpyHelper_AsRefReadOnly(RoleId), in ILSpyHelper_AsRefReadOnly(details.RoleId), ref changed);
		Rank = Util.Update<int>(in ILSpyHelper_AsRefReadOnly(Rank), in ILSpyHelper_AsRefReadOnly(details.Rank), ref changed);
		Name = Util.Update<string>(in ILSpyHelper_AsRefReadOnly(Name), in ILSpyHelper_AsRefReadOnly(details.Name), ref changed);
		CanInvite = Util.Update<bool>(in ILSpyHelper_AsRefReadOnly(CanInvite), in ILSpyHelper_AsRefReadOnly(details.CanInvite), ref changed);
		CanKick = Util.Update<bool>(in ILSpyHelper_AsRefReadOnly(CanKick), in ILSpyHelper_AsRefReadOnly(details.CanKick), ref changed);
		CanPromote = Util.Update<bool>(in ILSpyHelper_AsRefReadOnly(CanPromote), in ILSpyHelper_AsRefReadOnly(details.CanPromote), ref changed);
		CanDemote = Util.Update<bool>(in ILSpyHelper_AsRefReadOnly(CanDemote), in ILSpyHelper_AsRefReadOnly(details.CanDemote), ref changed);
		CanAccessLogs = Util.Update<bool>(in ILSpyHelper_AsRefReadOnly(CanAccessLogs), in ILSpyHelper_AsRefReadOnly(details.CanAccessLogs), ref changed);
		CanAccessScoreEvents = Util.Update<bool>(in ILSpyHelper_AsRefReadOnly(CanAccessScoreEvents), in ILSpyHelper_AsRefReadOnly(details.CanAccessScoreEvents), ref changed);
		return changed | _variables.UpdateFromModel(details.Variables);
		static ref readonly T ILSpyHelper_AsRefReadOnly<T>(in T temp)
		{
			//ILSpy generated this function to help ensure overload resolution can pick the overload using 'in'
			return ref temp;
		}
	}
}
