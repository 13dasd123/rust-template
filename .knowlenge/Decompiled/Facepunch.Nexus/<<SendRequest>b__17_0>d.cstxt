using System;
using System.Diagnostics;
using System.Net.Http;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Newtonsoft.Json;

[StructLayout(3)]
private struct <<SendRequest>b__17_0>d : ValueType, IAsyncStateMachine
{
	public int <>1__state;

	public AsyncTaskMethodBuilder<TResponse> <>t__builder;

	public HttpResponseMessage response;

	private TaskAwaiter<string> <>u__1;

	private void MoveNext()
	{
		//IL_0075: Expected O, but got Unknown
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		int num = <>1__state;
		TResponse result;
		try
		{
			TaskAwaiter<string> val;
			if (num != 0)
			{
				val = response.Content.ReadAsStringAsync().GetAwaiter();
				if (!val.IsCompleted)
				{
					num = (<>1__state = 0);
					<>u__1 = val;
					<>t__builder.AwaitUnsafeOnCompleted<TaskAwaiter<string>, <<SendRequest>b__17_0>d>(ref val, ref this);
					return;
				}
			}
			else
			{
				val = <>u__1;
				<>u__1 = default(TaskAwaiter<string>);
				num = (<>1__state = -1);
			}
			result = JsonConvert.DeserializeObject<TResponse>(val.GetResult());
		}
		catch (Exception val2)
		{
			Exception exception = val2;
			<>1__state = -2;
			<>t__builder.SetException(exception);
			return;
		}
		<>1__state = -2;
		<>t__builder.SetResult(result);
	}

	[DebuggerHidden]
	private void SetStateMachine(IAsyncStateMachine stateMachine)
	{
		<>t__builder.SetStateMachine(stateMachine);
	}
}
