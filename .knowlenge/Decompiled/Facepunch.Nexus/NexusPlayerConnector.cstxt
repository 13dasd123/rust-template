using System;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using Facepunch.Nexus;
using Facepunch.Nexus.Connector;
using Facepunch.Nexus.Logging;
using Facepunch.Nexus.Models;

internal class NexusPlayerConnector : NexusConnector, INexusPlayerConnector, INexusConnector
{
	[StructLayout(3)]
	[CompilerGenerated]
	private struct <GetPlayerDetails>d__2 : ValueType, IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncTaskMethodBuilder<PlayerDetails> <>t__builder;

		public NexusPlayerConnector <>4__this;

		public int nexusId;

		public string playerAuthToken;

		private TaskAwaiter<ApiResult<PlayerDetails>> <>u__1;

		private void MoveNext()
		{
			//IL_0095: Expected O, but got Unknown
			//IL_0065: Unknown result type (might be due to invalid IL or missing references)
			//IL_006a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			//IL_0033: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Unknown result type (might be due to invalid IL or missing references)
			//IL_004d: Unknown result type (might be due to invalid IL or missing references)
			//IL_004f: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			NexusPlayerConnector nexusPlayerConnector = <>4__this;
			PlayerDetails response;
			try
			{
				TaskAwaiter<ApiResult<PlayerDetails>> val;
				if (num != 0)
				{
					val = nexusPlayerConnector.GetRequest<PlayerDetails>(String.Concat(nexusPlayerConnector._playerInfoEndpoint, ((Int32)(ref nexusId)).ToString()), playerAuthToken).GetAwaiter();
					if (!val.IsCompleted)
					{
						num = (<>1__state = 0);
						<>u__1 = val;
						<>t__builder.AwaitUnsafeOnCompleted<TaskAwaiter<ApiResult<PlayerDetails>>, <GetPlayerDetails>d__2>(ref val, ref this);
						return;
					}
				}
				else
				{
					val = <>u__1;
					<>u__1 = default(TaskAwaiter<ApiResult<PlayerDetails>>);
					num = (<>1__state = -1);
				}
				response = val.GetResult().Response;
			}
			catch (Exception val2)
			{
				Exception exception = val2;
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			<>1__state = -2;
			<>t__builder.SetResult(response);
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}
	}

	private readonly string _playerInfoEndpoint;

	public NexusPlayerConnector(INexusLogger logger, string baseUrl)
		: base(logger, baseUrl)
	{
		_playerInfoEndpoint = String.Concat(BaseUrl, "/player/info?nexusId=");
	}

	[AsyncStateMachine(/*Could not decode attribute arguments.*/)]
	public Task<PlayerDetails> GetPlayerDetails(int nexusId, string playerAuthToken)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		<GetPlayerDetails>d__2 <GetPlayerDetails>d__ = default(<GetPlayerDetails>d__2);
		<GetPlayerDetails>d__.<>t__builder = AsyncTaskMethodBuilder<PlayerDetails>.Create();
		<GetPlayerDetails>d__.<>4__this = this;
		<GetPlayerDetails>d__.nexusId = nexusId;
		<GetPlayerDetails>d__.playerAuthToken = playerAuthToken;
		<GetPlayerDetails>d__.<>1__state = -1;
		<GetPlayerDetails>d__.<>t__builder.Start<<GetPlayerDetails>d__2>(ref <GetPlayerDetails>d__);
		return <GetPlayerDetails>d__.<>t__builder.Task;
	}
}
