using Mono.Cecil;
using Oxide.CSharp.Patching.Validation;

public class HasVisibilityAttribute : PatchValidationAttribute
{
	public bool IsPublic { get; }

	public bool? IsStatic { get; set; }

	public HasVisibilityAttribute(bool isPublic)
	{
		IsPublic = isPublic;
	}

	protected override bool IsValid(object item)
	{
		TypeDefinition val = (TypeDefinition)((item is TypeDefinition) ? item : null);
		if (val != null)
		{
			if (((TypeReference)val).IsNested)
			{
				if (val.IsNestedPublic != IsPublic)
				{
					return false;
				}
			}
			else if (val.IsPublic != IsPublic)
			{
				return false;
			}
			if (IsStatic.HasValue && (val.IsAbstract && val.IsSealed) != IsStatic.Value)
			{
				return false;
			}
			return true;
		}
		PropertyDefinition val2 = (PropertyDefinition)((item is PropertyDefinition) ? item : null);
		if (val2 != null)
		{
			if (IsPublic)
			{
				if (val2.SetMethod == null)
				{
					return IsValid(val2.GetMethod);
				}
				if (IsValid(val2.GetMethod))
				{
					return IsValid(val2.SetMethod);
				}
				return false;
			}
			if (val2.SetMethod == null)
			{
				return IsValid(val2.GetMethod);
			}
			if (!IsValid(val2.GetMethod))
			{
				return IsValid(val2.SetMethod);
			}
			return true;
		}
		EventDefinition val3 = (EventDefinition)((item is EventDefinition) ? item : null);
		if (val3 != null)
		{
			if (val3.AddMethod != null)
			{
				return IsValid(val3.AddMethod);
			}
			return false;
		}
		MethodDefinition val4 = (MethodDefinition)((item is MethodDefinition) ? item : null);
		if (val4 != null)
		{
			if (IsStatic.HasValue && val4.IsStatic != IsStatic.Value)
			{
				return false;
			}
			return val4.IsPublic == IsPublic;
		}
		FieldDefinition val5 = (FieldDefinition)((item is FieldDefinition) ? item : null);
		if (val5 != null)
		{
			if (IsStatic.HasValue && val5.IsStatic != IsStatic.Value)
			{
				return false;
			}
			return val5.IsPublic == IsPublic;
		}
		if (item is IMemberDefinition)
		{
			bool? propertyValue = PatchValidationAttribute.GetPropertyValue<bool?>(item, "IsPublic", null);
			if (!propertyValue.HasValue || propertyValue.Value != IsPublic)
			{
				return false;
			}
			if (IsStatic.HasValue)
			{
				bool? propertyValue2 = PatchValidationAttribute.GetPropertyValue<bool?>(item, "IsStatic", null);
				if (!propertyValue2.HasValue || propertyValue2.Value != IsStatic.Value)
				{
					return false;
				}
			}
			return true;
		}
		return false;
	}
}
