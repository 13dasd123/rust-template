using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text.RegularExpressions;
using Oxide;
using Oxide.Core;
using Oxide.Core.Extensions;
using Oxide.Core.Libraries;
using Oxide.Core.Logging;
using Oxide.Core.Plugins;
using Oxide.CSharp;
using Oxide.Logging;
using Oxide.Plugins;

public class CSharpPluginLoader : PluginLoader
{
	public static string[] DefaultReferences = new string[8] { "mscorlib", "Oxide.Core", "Oxide.CSharp", "Oxide.Common", "System", "System.Core", "System.Data", "System.Xml" };

	public static HashSet<string> PluginReferences = new HashSet<string>(DefaultReferences);

	public static CSharpPluginLoader Instance;

	private static CSharpExtension extension;

	private static Dictionary<string, CompilablePlugin> plugins = new Dictionary<string, CompilablePlugin>();

	private static readonly string[] AssemblyBlacklist = new string[3] { "Newtonsoft.Json", "protobuf-net", "websocket-sharp" };

	private List<CompilablePlugin> compilationQueue = new List<CompilablePlugin>();

	private CompilerService compiler;

	private Timer timer { get; } = Interface.Oxide.GetLibrary<Timer>((string)null);

	public override string FileExtension => ".cs";

	public static CompilablePlugin GetCompilablePlugin(string directory, string name)
	{
		string key = Regex.Replace(name, "_", "");
		if (!plugins.TryGetValue(key, out var value))
		{
			value = new CompilablePlugin(extension, Instance, directory, name);
			plugins[key] = value;
		}
		return value;
	}

	public CSharpPluginLoader(CSharpExtension extension)
	{
		Instance = this;
		CSharpPluginLoader.extension = extension;
		compiler = new CompilerService((Extension)(object)extension);
	}

	public void OnModLoaded()
	{
		compiler.Precheck();
		foreach (Extension allExtension in Interface.Oxide.GetAllExtensions())
		{
			if (allExtension == null || (!allExtension.IsCoreExtension && !allExtension.IsGameExtension))
			{
				continue;
			}
			Assembly assembly = ((object)allExtension).GetType().Assembly;
			string name = assembly.GetName().Name;
			if (ExtensionMethods.Contains<string>(AssemblyBlacklist, name))
			{
				continue;
			}
			PluginReferences.Add(name);
			AssemblyName[] referencedAssemblies = assembly.GetReferencedAssemblies();
			foreach (AssemblyName assemblyName in referencedAssemblies)
			{
				if (assemblyName != null)
				{
					PluginReferences.Add(assemblyName.Name);
				}
			}
		}
	}

	public override IEnumerable<string> ScanDirectory(string directory)
	{
		if (!compiler.Installed)
		{
			yield break;
		}
		IEnumerable<string> enumerable = <>n__0(directory);
		foreach (string item in enumerable)
		{
			yield return item;
		}
	}

	public override Plugin Load(string directory, string name)
	{
		CompilablePlugin compilablePlugin = GetCompilablePlugin(directory, name);
		if (compilablePlugin.IsLoading)
		{
			((Logger)(object)Interface.Oxide.RootLogger).WriteDebug((LogType)3, LogEvent.Compile, "CSharp", "Load requested for plugin which is already loading: " + compilablePlugin.Name);
			return null;
		}
		if (base.LoadedPlugins.ContainsKey(compilablePlugin.Name))
		{
			timer.Once(0.5f, (Action)delegate
			{
				Load(compilablePlugin);
			}, (Plugin)null);
		}
		else
		{
			Load(compilablePlugin);
		}
		return null;
	}

	public override void Reload(string directory, string name)
	{
		if (Regex.Match(directory, "\\\\include\\b", RegexOptions.IgnoreCase).Success)
		{
			name = "Oxide." + name;
			{
				foreach (CompilablePlugin value in plugins.Values)
				{
					if (value.References.Contains(name))
					{
						Interface.Oxide.LogInfo("Reloading " + value.Name + " because it references updated include file: " + name, Array.Empty<object>());
						value.LastModifiedAt = DateTime.Now;
						Load(value);
					}
				}
				return;
			}
		}
		CompilablePlugin compilablePlugin = GetCompilablePlugin(directory, name);
		if (compilablePlugin.IsLoading)
		{
			((Logger)(object)Interface.Oxide.RootLogger).WriteDebug((LogType)3, LogEvent.Compile, "CSharp", "Reload requested for plugin which is already loading: " + compilablePlugin.Name);
		}
		else
		{
			Load(compilablePlugin);
		}
	}

	public override void Unloading(Plugin pluginBase)
	{
		if (!(pluginBase is CSharpPlugin cSharpPlugin))
		{
			return;
		}
		base.LoadedPlugins.Remove(((Plugin)cSharpPlugin).Name);
		foreach (CompilablePlugin value in plugins.Values)
		{
			if (value.Requires.Contains(((Plugin)cSharpPlugin).Name))
			{
				Interface.Oxide.UnloadPlugin(value.Name);
			}
		}
	}

	public void Load(CompilablePlugin plugin)
	{
		PluginLoadingStarted(plugin);
		plugin.Compile(delegate(bool compiled)
		{
			if (!compiled)
			{
				PluginLoadingCompleted(plugin);
			}
			else
			{
				foreach (string item in plugin.Requires.Where((string r) => base.LoadedPlugins.ContainsKey(r) && ((PluginLoader)this).LoadingPlugins.Contains(r)))
				{
					Interface.Oxide.UnloadPlugin(item);
				}
				IEnumerable<string> enumerable = plugin.Requires.Where((string r) => !base.LoadedPlugins.ContainsKey(r));
				if (enumerable.Any())
				{
					IEnumerable<string> enumerable2 = plugin.Requires.Where((string r) => ((PluginLoader)this).LoadingPlugins.Contains(r));
					if (enumerable2.Any())
					{
						((Logger)(object)Interface.Oxide.RootLogger).WriteDebug((LogType)2, LogEvent.Compile, "CSharp", plugin.Name + " plugin is waiting for requirements to be loaded: " + ExtensionMethods.ToSentence<string>(enumerable2));
					}
					else
					{
						Interface.Oxide.LogError(plugin.Name + " plugin requires missing dependencies: " + ExtensionMethods.ToSentence<string>(enumerable), Array.Empty<object>());
						((PluginLoader)this).PluginErrors[plugin.Name] = "Missing dependencies: " + ExtensionMethods.ToSentence<string>(enumerable);
						PluginLoadingCompleted(plugin);
					}
				}
				else
				{
					Interface.Oxide.UnloadPlugin(plugin.Name);
					plugin.LoadPlugin(delegate(CSharpPlugin pl)
					{
						if (pl != null)
						{
							base.LoadedPlugins[((Plugin)pl).Name] = (Plugin)(object)pl;
						}
						PluginLoadingCompleted(plugin);
					});
				}
			}
		});
	}

	public void CompilationRequested(CompilablePlugin plugin)
	{
		if (Compilation.Current != null)
		{
			Compilation.Current.Add(plugin);
			return;
		}
		if (compilationQueue.Count < 1)
		{
			Interface.Oxide.NextTick((Action)delegate
			{
				CompileAssembly(compilationQueue.ToArray());
				compilationQueue.Clear();
			});
		}
		compilationQueue.Add(plugin);
	}

	public void PluginLoadingStarted(CompilablePlugin plugin)
	{
		if (!((PluginLoader)this).LoadingPlugins.Contains(plugin.Name))
		{
			((PluginLoader)this).LoadingPlugins.Add(plugin.Name);
		}
		plugin.IsLoading = true;
	}

	private void PluginLoadingCompleted(CompilablePlugin plugin)
	{
		((PluginLoader)this).LoadingPlugins.Remove(plugin.Name);
		plugin.IsLoading = false;
		string[] array = ((PluginLoader)this).LoadingPlugins.ToArray();
		foreach (string name in array)
		{
			CompilablePlugin compilablePlugin = GetCompilablePlugin(plugin.Directory, name);
			if (compilablePlugin.IsLoading && compilablePlugin.Requires.Contains(plugin.Name))
			{
				Load(compilablePlugin);
			}
		}
	}

	private void CompileAssembly(CompilablePlugin[] plugins)
	{
		compiler.Compile(plugins, delegate(Compilation compilation)
		{
			if (compilation.compiledAssembly == null)
			{
				foreach (CompilablePlugin plugin in compilation.plugins)
				{
					plugin.OnCompilationFailed();
					((PluginLoader)this).PluginErrors[plugin.Name] = "Failed to compile: " + plugin.CompilerErrors;
					Interface.Oxide.LogError("Error while compiling " + plugin.ScriptName + ": " + plugin.CompilerErrors, Array.Empty<object>());
				}
				return;
			}
			if (compilation.plugins.Count > 0)
			{
				string[] array = (from pl in compilation.plugins
					where string.IsNullOrEmpty(pl.CompilerErrors)
					select pl.Name).ToArray();
				string arg = ((array.Length > 1) ? "were" : "was");
				Interface.Oxide.LogInfo($"{ExtensionMethods.ToSentence<string>((IEnumerable<string>)array)} {arg} compiled successfully in {Math.Round(compilation.duration * 1000f)}ms", Array.Empty<object>());
			}
			foreach (CompilablePlugin plugin2 in compilation.plugins)
			{
				if (plugin2.CompilerErrors == null)
				{
					Interface.Oxide.UnloadPlugin(plugin2.Name);
					plugin2.OnCompilationSucceeded(compilation.compiledAssembly);
				}
				else
				{
					plugin2.OnCompilationFailed();
					((PluginLoader)this).PluginErrors[plugin2.Name] = "Failed to compile: " + plugin2.CompilerErrors;
					Interface.Oxide.LogError("Error while compiling " + plugin2.ScriptName + ": " + plugin2.CompilerErrors, Array.Empty<object>());
				}
			}
		});
	}

	public void OnShutdown()
	{
		compiler.Stop(synchronous: true, "framework shutting down");
	}

	[CompilerGenerated]
	[DebuggerHidden]
	private IEnumerable<string> <>n__0(string directory)
	{
		return ((PluginLoader)this).ScanDirectory(directory);
	}
}
