using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Threading;
using Mono.Cecil;
using Oxide;
using Oxide.Core;
using Oxide.Core.CSharp;
using Oxide.Core.Logging;
using Oxide.CSharp;
using Oxide.Logging;
using Oxide.Plugins;

public class CompiledAssembly
{
	public CompilablePlugin[] CompilablePlugins;

	public string[] PluginNames;

	public string Name;

	public DateTime CompiledAt;

	public byte[] RawAssembly;

	public byte[] Symbols;

	public byte[] PatchedAssembly;

	public float Duration;

	public Assembly LoadedAssembly;

	public bool IsLoading;

	private List<Action<bool>> loadCallbacks = new List<Action<bool>>();

	private bool isPatching;

	private bool isLoaded;

	public bool IsBatch => CompilablePlugins.Length > 1;

	public CompiledAssembly(string name, CompilablePlugin[] plugins, byte[] rawAssembly, float duration, byte[] symbols)
	{
		Name = name;
		CompilablePlugins = plugins;
		RawAssembly = rawAssembly;
		Duration = duration;
		PluginNames = CompilablePlugins.Select((CompilablePlugin pl) => pl.Name).ToArray();
		Symbols = symbols;
	}

	public void LoadAssembly(Action<bool> callback)
	{
		if (isLoaded)
		{
			callback(obj: true);
			return;
		}
		IsLoading = true;
		loadCallbacks.Add(callback);
		if (isPatching)
		{
			return;
		}
		ValidateAssembly(delegate(byte[] rawAssembly)
		{
			if (rawAssembly == null)
			{
				foreach (Action<bool> loadCallback in loadCallbacks)
				{
					loadCallback(obj: true);
				}
				loadCallbacks.Clear();
				IsLoading = false;
			}
			else
			{
				LoadedAssembly = Assembly.Load(rawAssembly);
				isLoaded = true;
				foreach (Action<bool> loadCallback2 in loadCallbacks)
				{
					loadCallback2(obj: true);
				}
				loadCallbacks.Clear();
				IsLoading = false;
			}
		});
	}

	private void ValidateAssembly(Action<byte[]> callback)
	{
		if (isPatching)
		{
			((Logger)(object)Interface.Oxide.RootLogger).WriteDebug((LogType)3, LogEvent.Compile, "CSharp", "Already patching plugin assembly: " + ExtensionMethods.ToSentence<string>((IEnumerable<string>)PluginNames) + " (ignoring)");
			return;
		}
		isPatching = true;
		ThreadPool.QueueUserWorkItem(delegate
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_0013: Expected O, but got Unknown
			//IL_029a: Unknown result type (might be due to invalid IL or missing references)
			//IL_029f: Unknown result type (might be due to invalid IL or missing references)
			//IL_02ab: Expected O, but got Unknown
			try
			{
				AssemblyDefinition val = null;
				ReaderParameters val2 = new ReaderParameters
				{
					AssemblyResolver = (IAssemblyResolver)(object)new AssemblyResolver()
				};
				using (MemoryStream memoryStream = new MemoryStream(RawAssembly))
				{
					val = AssemblyDefinition.ReadAssembly((Stream)memoryStream, val2);
				}
				int num = 0;
				int num2 = CompilablePlugins.Count((CompilablePlugin p) => p.CompilerErrors == null);
				for (int i = 0; i < val.MainModule.Types.Count; i++)
				{
					if (num == num2)
					{
						((Logger)(object)Interface.Oxide.RootLogger).WriteDebug((LogType)2, LogEvent.Compile, "CSharp", $"Patched {num} of {num2} plugins");
						break;
					}
					try
					{
						TypeDefinition type = val.MainModule.Types[i];
						if (!(((TypeReference)type).Namespace != "Oxide.Plugins") && ExtensionMethods.Contains<string>(PluginNames, ((MemberReference)type).Name))
						{
							num++;
							((Logger)(object)Interface.Oxide.RootLogger).WriteDebug((LogType)2, LogEvent.Compile, "CSharp", "Preparing " + ((MemberReference)type).Name + " for runtime patching. . .");
							if (((IEnumerable<MethodDefinition>)type.Methods).FirstOrDefault((Func<MethodDefinition, bool>)((MethodDefinition m) => !m.IsStatic && m.IsConstructor && !((MethodReference)m).HasParameters && !m.IsPublic)) != null)
							{
								((Logger)(object)Interface.Oxide.RootLogger).WriteDebug((LogType)1, LogEvent.Compile, "CSharp", "User defined constructors are not supported. Please remove the constructor from " + ((MemberReference)type).Name + ".cs");
								CompilablePlugin compilablePlugin = CompilablePlugins.SingleOrDefault((CompilablePlugin p) => p.Name == ((MemberReference)type).Name);
								if (compilablePlugin != null)
								{
									compilablePlugin.CompilerErrors = "Primary constructor in main class must be public";
								}
							}
							else
							{
								((Logger)(object)Interface.Oxide.RootLogger).WriteDebug((LogType)2, LogEvent.Compile, "CSharp", "Patching DirectCallMethod on " + ((MemberReference)type).Name);
								new DirectCallMethod(val.MainModule, type, val2);
							}
						}
					}
					catch (Exception exception)
					{
						((Logger)(object)Interface.Oxide.RootLogger).WriteDebug((LogType)1, LogEvent.Compile, "CSharp", $"Failed to patch type at index {i}", exception);
					}
				}
				using (MemoryStream memoryStream2 = new MemoryStream())
				{
					val.Write((Stream)memoryStream2, new WriterParameters
					{
						WriteSymbols = false
					});
					PatchedAssembly = memoryStream2.ToArray();
				}
				Interface.Oxide.NextTick((Action)delegate
				{
					isPatching = false;
					callback(PatchedAssembly);
				});
			}
			catch (Exception ex)
			{
				Exception ex2 = ex;
				Exception ex3 = ex2;
				Interface.Oxide.NextTick((Action)delegate
				{
					isPatching = false;
					((Logger)(object)Interface.Oxide.RootLogger).WriteDebug((LogType)3, LogEvent.Compile, "CSharp", "Failed to patch DirectCallHook method on plugins " + ExtensionMethods.ToSentence<string>((IEnumerable<string>)PluginNames) + ", performance may be degraded.", ex3);
					callback(RawAssembly);
				});
			}
		});
	}

	public bool IsOutdated()
	{
		return CompilablePlugins.Any((CompilablePlugin pl) => pl.GetLastModificationTime() != CompiledAt);
	}
}
