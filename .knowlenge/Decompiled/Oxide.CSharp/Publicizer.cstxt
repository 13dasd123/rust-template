using System;
using Mono.Cecil;
using Oxide.CSharp.Patching;
using Oxide.CSharp.Patching.Validation;

[HasName("0Harmony", StringValidationType.StartsWith, StringComparison.InvariantCultureIgnoreCase, InverseCheck = true)]
[HasName("System", StringValidationType.StartsWith, StringComparison.InvariantCultureIgnoreCase, InverseCheck = true)]
[HasName("Microsoft", StringValidationType.StartsWith, StringComparison.InvariantCultureIgnoreCase, InverseCheck = true)]
[HasName("mscorlib", StringValidationType.StartsWith, StringComparison.InvariantCultureIgnoreCase, InverseCheck = true)]
[HasName("Unity", StringValidationType.StartsWith, StringComparison.InvariantCultureIgnoreCase, InverseCheck = true)]
[HasName("Mono", StringValidationType.StartsWith, StringComparison.InvariantCultureIgnoreCase, InverseCheck = true)]
[HasName("netstandard", StringValidationType.StartsWith, StringComparison.InvariantCultureIgnoreCase, InverseCheck = true)]
[HasName("Oxide", StringValidationType.StartsWith, StringComparison.InvariantCultureIgnoreCase, InverseCheck = true)]
[HasName("MySql.Data", StringValidationType.StartsWith, StringComparison.InvariantCultureIgnoreCase, InverseCheck = true)]
[HasEnvironmentalVariable("AllowPublicize")]
public class Publicizer : TraversePatch
{
	[HasVisability(false)]
	[IsSpecialName(InverseCheck = false)]
	[HasAttribute("CompilerGeneratedAttribute", StringValidationType.EndsWith, StringComparison.InvariantCultureIgnoreCase, InverseCheck = true)]
	[HasAttribute("CompilerServices.ExtensionAttribute", StringValidationType.EndsWith, StringComparison.InvariantCultureIgnoreCase, InverseCheck = true)]
	protected override bool OnMemberDefinition(IMemberDefinition member)
	{
		return base.OnMemberDefinition(member);
	}

	protected override bool OnTypeDefinition(TypeDefinition type)
	{
		if (type.IsNested && !type.IsNestedPublic)
		{
			type.IsNestedPrivate = true;
			return true;
		}
		if (!type.IsPublic)
		{
			type.IsPublic = true;
			return true;
		}
		return false;
	}

	protected override bool OnFieldDefinition(FieldDefinition field)
	{
		if (field.IsPublic)
		{
			return false;
		}
		field.IsPublic = true;
		return true;
	}

	protected override bool OnPropertyDefinition(PropertyDefinition property)
	{
		bool num = property.GetMethod != null && OnMethodDefinition(property.GetMethod);
		bool flag = property.SetMethod != null && OnMethodDefinition(property.SetMethod);
		return num || flag;
	}

	protected override bool OnMethodDefinition(MethodDefinition method)
	{
		if (method.IsPublic)
		{
			return false;
		}
		method.IsPublic = true;
		return true;
	}
}
