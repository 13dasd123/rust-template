using System.Reflection;
using Oxide.Core;
using Oxide.Core.Libraries.Covalence;
using Oxide.Core.Plugins;
using Oxide.Plugins;

public class CovalencePlugin : CSharpPlugin
{
	private new static readonly Covalence covalence = Interface.Oxide.GetLibrary<Covalence>((string)null);

	protected string game = covalence.Game;

	protected IPlayerManager players = covalence.Players;

	protected IServer server = covalence.Server;

	protected void Log(string format, params object[] args)
	{
		Interface.Oxide.LogInfo("[{0}] {1}", new object[2]
		{
			((Plugin)this).Title,
			(args.Length != 0) ? string.Format(format, args) : format
		});
	}

	protected void LogWarning(string format, params object[] args)
	{
		Interface.Oxide.LogWarning("[{0}] {1}", new object[2]
		{
			((Plugin)this).Title,
			(args.Length != 0) ? string.Format(format, args) : format
		});
	}

	protected void LogError(string format, params object[] args)
	{
		Interface.Oxide.LogError("[{0}] {1}", new object[2]
		{
			((Plugin)this).Title,
			(args.Length != 0) ? string.Format(format, args) : format
		});
	}

	public override void HandleAddedToManager(PluginManager manager)
	{
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Expected O, but got Unknown
		MethodInfo[] methods = ((object)this).GetType().GetMethods(BindingFlags.Instance | BindingFlags.NonPublic);
		foreach (MethodInfo method in methods)
		{
			object[] customAttributes = method.GetCustomAttributes(typeof(CommandAttribute), inherit: true);
			object[] customAttributes2 = method.GetCustomAttributes(typeof(PermissionAttribute), inherit: true);
			if (customAttributes.Length == 0)
			{
				continue;
			}
			CommandAttribute commandAttribute = customAttributes[0] as CommandAttribute;
			PermissionAttribute permissionAttribute = ((customAttributes2.Length == 0) ? null : (customAttributes2[0] as PermissionAttribute));
			if (commandAttribute != null)
			{
				((Plugin)this).AddCovalenceCommand(commandAttribute.Commands, permissionAttribute?.Permission, (CommandCallback)delegate(IPlayer caller, string command, string[] args)
				{
					((Plugin)this).CallHook(method.Name, new object[3] { caller, command, args });
					return true;
				});
			}
		}
		base.HandleAddedToManager(manager);
	}
}
