using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using Oxide.Core;
using Oxide.Core.Libraries;
using Oxide.Core.Plugins;
using Oxide.Plugins;

public class CompilableFile
{
	private static Timer timer = Interface.Oxide.GetLibrary<Timer>((string)null);

	private static object compileLock = new object();

	public CSharpExtension Extension;

	public CSharpPluginLoader Loader;

	public string Name;

	public string Directory;

	public string ScriptName;

	public string ScriptPath;

	public string[] ScriptLines;

	public Encoding ScriptEncoding;

	public HashSet<string> Requires = new HashSet<string>();

	public HashSet<string> References = new HashSet<string>();

	public HashSet<string> IncludePaths = new HashSet<string>();

	public string CompilerErrors;

	public CompiledAssembly CompiledAssembly;

	public DateTime LastModifiedAt;

	public DateTime LastCachedScriptAt;

	public DateTime LastCompiledAt;

	public bool IsCompilationNeeded;

	protected Action<CSharpPlugin> LoadCallback;

	protected Action<bool> CompileCallback;

	protected float CompilationQueuedAt;

	private TimerInstance timeoutTimer;

	public byte[] ScriptSource => ScriptEncoding.GetBytes(string.Join(Environment.NewLine, ScriptLines));

	public CompilableFile(CSharpExtension extension, CSharpPluginLoader loader, string directory, string name)
	{
		Extension = extension;
		Loader = loader;
		Directory = directory;
		ScriptName = name;
		ScriptPath = Path.Combine(Directory, ScriptName + ".cs");
		Name = Regex.Replace(ScriptName, "_", "");
		CheckLastModificationTime();
	}

	internal void Compile(Action<bool> callback)
	{
		lock (compileLock)
		{
			if (CompilationQueuedAt > 0f)
			{
				float num = Interface.Oxide.Now - CompilationQueuedAt;
				Interface.Oxide.LogDebug($"Plugin compilation is already queued: {ScriptName} ({num:0.000} ago)", Array.Empty<object>());
				return;
			}
			OnLoadingStarted();
			if (CompiledAssembly != null && !HasBeenModified() && (CompiledAssembly.IsLoading || !CompiledAssembly.IsBatch || CompiledAssembly.CompilablePlugins.All((CompilablePlugin pl) => pl.IsLoading)))
			{
				callback(obj: true);
				return;
			}
			IsCompilationNeeded = true;
			CompileCallback = callback;
			CompilationQueuedAt = Interface.Oxide.Now;
			OnCompilationRequested();
		}
	}

	internal virtual void OnCompilationStarted()
	{
		LastCompiledAt = LastModifiedAt;
		TimerInstance obj = timeoutTimer;
		if (obj != null)
		{
			obj.Destroy();
		}
		timeoutTimer = null;
		Interface.Oxide.NextTick((Action)delegate
		{
			TimerInstance obj2 = timeoutTimer;
			if (obj2 != null)
			{
				obj2.Destroy();
			}
			timeoutTimer = timer.Once((float)Math.Max(30, ((PluginLoader)Loader).LoadingPlugins.Count * 3), (Action)OnCompilationTimeout, (Plugin)null);
		});
	}

	internal void OnCompilationSucceeded(CompiledAssembly compiledAssembly)
	{
		if (timeoutTimer == null)
		{
			Interface.Oxide.LogWarning("Ignored unexpected plugin compilation: " + Name, Array.Empty<object>());
			return;
		}
		TimerInstance obj = timeoutTimer;
		if (obj != null)
		{
			obj.Destroy();
		}
		timeoutTimer = null;
		IsCompilationNeeded = false;
		CompilationQueuedAt = 0f;
		CompiledAssembly = compiledAssembly;
		CompileCallback?.Invoke(obj: true);
	}

	internal void OnCompilationFailed()
	{
		if (timeoutTimer == null)
		{
			Interface.Oxide.LogWarning("Ignored unexpected plugin compilation failure: " + Name, Array.Empty<object>());
			return;
		}
		TimerInstance obj = timeoutTimer;
		if (obj != null)
		{
			obj.Destroy();
		}
		timeoutTimer = null;
		CompilationQueuedAt = 0f;
		LastCompiledAt = default(DateTime);
		CompileCallback?.Invoke(obj: false);
		IsCompilationNeeded = false;
	}

	internal void OnCompilationTimeout()
	{
		Interface.Oxide.LogError("Timed out waiting for plugin to be compiled: " + Name, Array.Empty<object>());
		CompilerErrors = "Timed out waiting for compilation";
		OnCompilationFailed();
	}

	internal bool HasBeenModified()
	{
		DateTime lastModifiedAt = LastModifiedAt;
		CheckLastModificationTime();
		return LastModifiedAt != lastModifiedAt;
	}

	internal void CheckLastModificationTime()
	{
		if (!File.Exists(ScriptPath))
		{
			LastModifiedAt = default(DateTime);
			return;
		}
		DateTime lastModificationTime = GetLastModificationTime();
		if (lastModificationTime != default(DateTime))
		{
			LastModifiedAt = lastModificationTime;
		}
	}

	internal DateTime GetLastModificationTime()
	{
		try
		{
			return File.GetLastWriteTime(ScriptPath);
		}
		catch (IOException ex)
		{
			Interface.Oxide.LogError("IOException while checking plugin: {0} ({1})", new object[2] { ScriptName, ex.Message });
			return default(DateTime);
		}
	}

	protected virtual void OnLoadingStarted()
	{
	}

	protected virtual void OnCompilationRequested()
	{
	}

	protected virtual void InitFailed(string message = null)
	{
		if (message != null)
		{
			Interface.Oxide.LogError(message, Array.Empty<object>());
		}
		LoadCallback?.Invoke(null);
	}
}
