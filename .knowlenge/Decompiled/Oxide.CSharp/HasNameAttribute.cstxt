using System;
using System.Text.RegularExpressions;
using Mono.Cecil;
using Oxide.CSharp.Patching.Validation;

public class HasNameAttribute : PatchValidationAttribute
{
	public string ValidationRule { get; internal set; }

	public StringValidationType ValidationType { get; }

	public StringComparison ValidationComparison { get; }

	public HasNameAttribute(string rule, StringValidationType type = StringValidationType.StartsWith, StringComparison comparison = StringComparison.InvariantCultureIgnoreCase)
	{
		ValidationRule = rule;
		ValidationType = type;
		ValidationComparison = comparison;
	}

	protected override bool IsValid(object item)
	{
		string text = null;
		if (item is string text2)
		{
			text = text2;
		}
		else
		{
			AssemblyDefinition val = (AssemblyDefinition)((item is AssemblyDefinition) ? item : null);
			if (val != null)
			{
				text = val.FullName;
			}
			else
			{
				ModuleDefinition val2 = (ModuleDefinition)((item is ModuleDefinition) ? item : null);
				if (val2 != null)
				{
					text = val2.Assembly.FullName;
				}
				else
				{
					ModuleReference val3 = (ModuleReference)((item is ModuleReference) ? item : null);
					if (val3 != null)
					{
						text = val3.Name;
					}
					else
					{
						AssemblyNameReference val4 = (AssemblyNameReference)((item is AssemblyNameReference) ? item : null);
						if (val4 != null)
						{
							text = val4.FullName;
						}
						else
						{
							MemberReference val5 = (MemberReference)((item is MemberReference) ? item : null);
							if (val5 == null)
							{
								return false;
							}
							text = val5.FullName;
						}
					}
				}
			}
		}
		return ValidationType switch
		{
			StringValidationType.Equals => text.Equals(ValidationRule, ValidationComparison), 
			StringValidationType.Contains => text.IndexOf(ValidationRule, ValidationComparison) >= 0, 
			StringValidationType.EndsWith => text.EndsWith(ValidationRule, ValidationComparison), 
			StringValidationType.RegularExpression => Regex.IsMatch(text, ValidationRule, RegexOptions.Compiled), 
			_ => text.StartsWith(ValidationRule, ValidationComparison), 
		};
	}
}
