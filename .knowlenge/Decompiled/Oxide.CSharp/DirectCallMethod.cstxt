using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using Mono.Cecil;
using Mono.Cecil.Cil;
using Mono.Cecil.Rocks;
using Mono.Collections.Generic;
using Oxide.Core;
using Oxide.Core.CSharp;
using Oxide.Core.Plugins;

public class DirectCallMethod
{
	public class Node
	{
		public char Char;

		public string Name;

		public Dictionary<char, Node> Edges = new Dictionary<char, Node>();

		public Node Parent;

		public Instruction FirstInstruction;
	}

	private ModuleDefinition module;

	private TypeDefinition type;

	private MethodDefinition method;

	private MethodBody body;

	private Instruction endInstruction;

	private Dictionary<Instruction, Node> jumpToEdgePlaceholderTargets = new Dictionary<Instruction, Node>();

	private List<Instruction> jumpToEndPlaceholders = new List<Instruction>();

	private Dictionary<string, MethodDefinition> hookMethods = new Dictionary<string, MethodDefinition>();

	private MethodReference getLength;

	private MethodReference getChars;

	private MethodReference isNullOrEmpty;

	private MethodReference stringEquals;

	private string hook_attribute = typeof(HookMethodAttribute).FullName;

	public DirectCallMethod(ModuleDefinition module, TypeDefinition type, ReaderParameters readerParameters)
	{
		//IL_01a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c9: Expected O, but got Unknown
		//IL_01d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_0200: Unknown result type (might be due to invalid IL or missing references)
		//IL_0205: Unknown result type (might be due to invalid IL or missing references)
		//IL_0212: Unknown result type (might be due to invalid IL or missing references)
		//IL_021f: Unknown result type (might be due to invalid IL or missing references)
		//IL_022c: Unknown result type (might be due to invalid IL or missing references)
		//IL_023b: Expected O, but got Unknown
		//IL_0242: Unknown result type (might be due to invalid IL or missing references)
		//IL_0247: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0268: Unknown result type (might be due to invalid IL or missing references)
		//IL_0272: Expected O, but got Unknown
		//IL_02ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f4: Expected O, but got Unknown
		//IL_0315: Unknown result type (might be due to invalid IL or missing references)
		//IL_0327: Unknown result type (might be due to invalid IL or missing references)
		//IL_0338: Unknown result type (might be due to invalid IL or missing references)
		//IL_0342: Unknown result type (might be due to invalid IL or missing references)
		//IL_034f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0355: Unknown result type (might be due to invalid IL or missing references)
		//IL_0362: Unknown result type (might be due to invalid IL or missing references)
		//IL_036c: Expected O, but got Unknown
		//IL_03b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c3: Expected O, but got Unknown
		//IL_03de: Unknown result type (might be due to invalid IL or missing references)
		//IL_03e8: Expected O, but got Unknown
		//IL_03e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0401: Unknown result type (might be due to invalid IL or missing references)
		//IL_040d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0419: Unknown result type (might be due to invalid IL or missing references)
		//IL_042b: Unknown result type (might be due to invalid IL or missing references)
		//IL_044f: Unknown result type (might be due to invalid IL or missing references)
		//IL_045f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0471: Unknown result type (might be due to invalid IL or missing references)
		//IL_047d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0489: Unknown result type (might be due to invalid IL or missing references)
		DirectCallMethod directCallMethod = this;
		this.module = module;
		this.type = type;
		getLength = module.Import((MethodBase)typeof(string).GetMethod("get_Length", new Type[0]));
		getChars = module.Import((MethodBase)typeof(string).GetMethod("get_Chars", new Type[1] { typeof(int) }));
		isNullOrEmpty = module.Import((MethodBase)typeof(string).GetMethod("IsNullOrEmpty", new Type[1] { typeof(string) }));
		stringEquals = module.Import((MethodBase)typeof(string).GetMethod("Equals", new Type[1] { typeof(string) }));
		AssemblyDefinition val = AssemblyDefinition.ReadAssembly(Path.Combine(Interface.Oxide.ExtensionDirectory, "Oxide.CSharp.dll"), readerParameters);
		ModuleDefinition mainModule = val.MainModule;
		TypeDefinition val2 = module.Import((TypeReference)(object)val.MainModule.GetType("Oxide.Plugins.CSharpPlugin")).Resolve();
		MethodDefinition val3 = module.Import((MethodReference)(object)((IEnumerable<MethodDefinition>)val2.Methods).First((MethodDefinition method) => ((MemberReference)method).Name == "DirectCallHook")).Resolve();
		method = new MethodDefinition(((MemberReference)val3).Name, val3.Attributes, mainModule.Import(((MethodReference)val3).ReturnType))
		{
			DeclaringType = type
		};
		Enumerator<ParameterDefinition> enumerator = ((MethodReference)val3).Parameters.GetEnumerator();
		Enumerator<CustomAttribute> enumerator2;
		try
		{
			while (enumerator.MoveNext())
			{
				ParameterDefinition current = enumerator.Current;
				ParameterDefinition val4 = new ParameterDefinition(((ParameterReference)current).Name, current.Attributes, module.Import(((ParameterReference)current).ParameterType))
				{
					IsOut = current.IsOut,
					Constant = current.Constant,
					MarshalInfo = current.MarshalInfo,
					IsReturnValue = current.IsReturnValue
				};
				enumerator2 = current.CustomAttributes.GetEnumerator();
				try
				{
					while (enumerator2.MoveNext())
					{
						CustomAttribute current2 = enumerator2.Current;
						val4.CustomAttributes.Add(new CustomAttribute(module.Import(current2.Constructor)));
					}
				}
				finally
				{
					((IDisposable)enumerator2/*cast due to .constrained prefix*/).Dispose();
				}
				((MethodReference)method).Parameters.Add(val4);
			}
		}
		finally
		{
			((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
		}
		enumerator2 = val3.CustomAttributes.GetEnumerator();
		try
		{
			while (enumerator2.MoveNext())
			{
				CustomAttribute current3 = enumerator2.Current;
				method.CustomAttributes.Add(new CustomAttribute(module.Import(current3.Constructor)));
			}
		}
		finally
		{
			((IDisposable)enumerator2/*cast due to .constrained prefix*/).Dispose();
		}
		method.ImplAttributes = val3.ImplAttributes;
		method.SemanticsAttributes = val3.SemanticsAttributes;
		MethodDefinition obj = method;
		obj.Attributes = (MethodAttributes)(obj.Attributes & 0xFEFF);
		MethodDefinition obj2 = method;
		obj2.Attributes = (MethodAttributes)(obj2.Attributes | 0);
		body = new MethodBody(method);
		MethodBodyRocks.SimplifyMacros(body);
		method.Body = body;
		type.Methods.Add(method);
		body.Variables.Add(new VariableDefinition("name_size", module.TypeSystem.Int32));
		body.Variables.Add(new VariableDefinition("i", module.TypeSystem.Int32));
		AddInstruction(OpCodes.Ldarg_2);
		AddInstruction(OpCodes.Ldnull);
		AddInstruction(OpCodes.Stind_Ref);
		AddInstruction(OpCodes.Ldarg_1);
		AddInstruction(OpCodes.Call, isNullOrEmpty);
		Instruction obj3 = AddInstruction(OpCodes.Brfalse, body.Instructions[0]);
		Return(value: false);
		obj3.Operand = AddInstruction(OpCodes.Ldarg_1);
		AddInstruction(OpCodes.Callvirt, getLength);
		AddInstruction(OpCodes.Stloc_0);
		AddInstruction(OpCodes.Ldc_I4_0);
		AddInstruction(OpCodes.Stloc_1);
		foreach (MethodDefinition item in ((IEnumerable<MethodDefinition>)type.Methods).Where((MethodDefinition m) => !m.IsStatic && (m.IsPrivate || directCallMethod.IsHookMethod(m)) && !((MethodReference)m).HasGenericParameters && !((MethodReference)m).ReturnType.IsGenericParameter && m.DeclaringType == type && !m.IsSetter && !m.IsGetter))
		{
			if (((MemberReference)item).Name.Contains("<"))
			{
				continue;
			}
			string text = ((MemberReference)item).Name;
			if (((MethodReference)item).Parameters.Count > 0)
			{
				text = text + "(" + string.Join(", ", ((IEnumerable<ParameterDefinition>)((MethodReference)item).Parameters).Select((ParameterDefinition x) => ((object)((ParameterReference)x).ParameterType).ToString().Replace("/", "+").Replace("<", "[")
					.Replace(">", "]")).ToArray()) + ")";
			}
			if (!hookMethods.ContainsKey(text))
			{
				hookMethods[text] = item;
			}
		}
		Node node = new Node();
		foreach (string key in hookMethods.Keys)
		{
			Node node2 = node;
			for (int i = 1; i <= key.Length; i++)
			{
				char c = key[i - 1];
				if (!node2.Edges.TryGetValue(c, out var value))
				{
					value = new Node
					{
						Parent = node2,
						Char = c
					};
					node2.Edges[c] = value;
				}
				if (i == key.Length)
				{
					value.Name = key;
				}
				node2 = value;
			}
		}
		int num = 1;
		foreach (char key2 in node.Edges.Keys)
		{
			BuildNode(node.Edges[key2], num++);
		}
		endInstruction = Return(value: false);
		foreach (Instruction key3 in jumpToEdgePlaceholderTargets.Keys)
		{
			key3.Operand = jumpToEdgePlaceholderTargets[key3].FirstInstruction;
		}
		foreach (Instruction jumpToEndPlaceholder in jumpToEndPlaceholders)
		{
			jumpToEndPlaceholder.Operand = endInstruction;
		}
		MethodBodyRocks.OptimizeMacros(body);
	}

	private bool IsHookMethod(MethodDefinition method)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		Enumerator<CustomAttribute> enumerator = method.CustomAttributes.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				if (((MemberReference)enumerator.Current.AttributeType).FullName == hook_attribute)
				{
					return true;
				}
			}
		}
		finally
		{
			((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
		}
		return false;
	}

	private void BuildNode(Node node, int edge_number)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_01af: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0133: Unknown result type (might be due to invalid IL or missing references)
		//IL_013f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0156: Unknown result type (might be due to invalid IL or missing references)
		//IL_016e: Unknown result type (might be due to invalid IL or missing references)
		if (edge_number == 1)
		{
			node.FirstInstruction = AddInstruction(OpCodes.Ldloc_1);
			AddInstruction(OpCodes.Ldloc_0);
			jumpToEndPlaceholders.Add(AddInstruction(OpCodes.Bge, body.Instructions[0]));
		}
		if (edge_number == 1)
		{
			AddInstruction(OpCodes.Ldarg_1);
		}
		else
		{
			node.FirstInstruction = AddInstruction(OpCodes.Ldarg_1);
		}
		AddInstruction(OpCodes.Ldloc_1);
		AddInstruction(OpCodes.Callvirt, getChars);
		AddInstruction(Ldc_I4_n(node.Char));
		if (node.Parent.Edges.Count > edge_number)
		{
			JumpToEdge(node.Parent.Edges.Values.ElementAt(edge_number));
		}
		else
		{
			JumpToEnd();
		}
		if (node.Edges.Count == 1 && node.Name == null)
		{
			Node node2 = node;
			while (node2.Edges.Count == 1 && node2.Name == null)
			{
				node2 = node2.Edges.Values.First();
			}
			if (node2.Edges.Count == 0 && node2.Name != null)
			{
				AddInstruction(OpCodes.Ldarg_1);
				AddInstruction(Instruction.Create(OpCodes.Ldstr, node2.Name));
				AddInstruction(OpCodes.Callvirt, stringEquals);
				jumpToEndPlaceholders.Add(AddInstruction(OpCodes.Brfalse, body.Instructions[0]));
				CallMethod(hookMethods[node2.Name]);
				Return(value: true);
				return;
			}
		}
		AddInstruction(OpCodes.Ldloc_1);
		AddInstruction(OpCodes.Ldc_I4_1);
		AddInstruction(OpCodes.Add);
		AddInstruction(OpCodes.Stloc_1);
		if (node.Name != null)
		{
			AddInstruction(OpCodes.Ldloc_1);
			AddInstruction(OpCodes.Ldloc_0);
			if (node.Edges.Count > 0)
			{
				JumpToEdge(node.Edges.Values.First());
			}
			else
			{
				JumpToEnd();
			}
			CallMethod(hookMethods[node.Name]);
			Return(value: true);
		}
		int num = 1;
		foreach (char key in node.Edges.Keys)
		{
			BuildNode(node.Edges[key], num++);
		}
	}

	private void CallMethod(MethodDefinition method)
	{
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_017b: Unknown result type (might be due to invalid IL or missing references)
		//IL_011e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		//IL_0108: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0209: Unknown result type (might be due to invalid IL or missing references)
		//IL_0278: Unknown result type (might be due to invalid IL or missing references)
		//IL_025b: Unknown result type (might be due to invalid IL or missing references)
		Dictionary<ParameterDefinition, VariableDefinition> dictionary = new Dictionary<ParameterDefinition, VariableDefinition>();
		for (int i = 0; i < ((MethodReference)method).Parameters.Count; i++)
		{
			ParameterDefinition val = ((MethodReference)method).Parameters[i];
			TypeReference parameterType = ((ParameterReference)val).ParameterType;
			ByReferenceType val2 = (ByReferenceType)(object)((parameterType is ByReferenceType) ? parameterType : null);
			if (val2 != null)
			{
				VariableDefinition value = AddVariable(module.Import(((TypeSpecification)val2).ElementType));
				AddInstruction(OpCodes.Ldarg_3);
				AddInstruction(Ldc_I4_n(i));
				AddInstruction(OpCodes.Ldelem_Ref);
				AddInstruction(OpCodes.Unbox_Any, module.Import(((TypeSpecification)val2).ElementType));
				AddInstruction(OpCodes.Stloc_S, value);
				dictionary[val] = value;
			}
		}
		if (((MemberReference)((MethodReference)method).ReturnType).Name != "Void")
		{
			AddInstruction(OpCodes.Ldarg_2);
		}
		AddInstruction(OpCodes.Ldarg_0);
		for (int j = 0; j < ((MethodReference)method).Parameters.Count; j++)
		{
			ParameterDefinition val3 = ((MethodReference)method).Parameters[j];
			if (((ParameterReference)val3).ParameterType is ByReferenceType)
			{
				AddInstruction(OpCodes.Ldloca, dictionary[val3]);
				continue;
			}
			AddInstruction(OpCodes.Ldarg_3);
			AddInstruction(Ldc_I4_n(j));
			AddInstruction(OpCodes.Ldelem_Ref);
			AddInstruction(OpCodes.Unbox_Any, module.Import(((ParameterReference)val3).ParameterType));
		}
		AddInstruction(OpCodes.Call, module.Import((MethodReference)(object)method));
		for (int k = 0; k < ((MethodReference)method).Parameters.Count; k++)
		{
			ParameterDefinition val4 = ((MethodReference)method).Parameters[k];
			TypeReference parameterType2 = ((ParameterReference)val4).ParameterType;
			ByReferenceType val5 = (ByReferenceType)(object)((parameterType2 is ByReferenceType) ? parameterType2 : null);
			if (val5 != null)
			{
				AddInstruction(OpCodes.Ldarg_3);
				AddInstruction(Ldc_I4_n(k));
				AddInstruction(OpCodes.Ldloc_S, dictionary[val4]);
				AddInstruction(OpCodes.Box, module.Import(((TypeSpecification)val5).ElementType));
				AddInstruction(OpCodes.Stelem_Ref);
			}
		}
		if (((MemberReference)((MethodReference)method).ReturnType).Name != "Void")
		{
			if (((MemberReference)((MethodReference)method).ReturnType).Name != "Object")
			{
				AddInstruction(OpCodes.Box, module.Import(((MethodReference)method).ReturnType));
			}
			AddInstruction(OpCodes.Stind_Ref);
		}
	}

	private Instruction Return(bool value)
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		Instruction result = AddInstruction(Ldc_I4_n(value ? 1 : 0));
		AddInstruction(OpCodes.Ret);
		return result;
	}

	private void JumpToEdge(Node node)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		Instruction key = AddInstruction(OpCodes.Bne_Un, body.Instructions[1]);
		jumpToEdgePlaceholderTargets[key] = node;
	}

	private void JumpToEnd()
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		jumpToEndPlaceholders.Add(AddInstruction(OpCodes.Bne_Un, body.Instructions[0]));
	}

	private Instruction AddInstruction(OpCode opcode)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		return AddInstruction(Instruction.Create(opcode));
	}

	private Instruction AddInstruction(OpCode opcode, Instruction instruction)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		return AddInstruction(Instruction.Create(opcode, instruction));
	}

	private Instruction AddInstruction(OpCode opcode, MethodReference method_reference)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		return AddInstruction(Instruction.Create(opcode, method_reference));
	}

	private Instruction AddInstruction(OpCode opcode, TypeReference type_reference)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		return AddInstruction(Instruction.Create(opcode, type_reference));
	}

	private Instruction AddInstruction(OpCode opcode, int value)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		return AddInstruction(Instruction.Create(opcode, value));
	}

	private Instruction AddInstruction(OpCode opcode, VariableDefinition value)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		return AddInstruction(Instruction.Create(opcode, value));
	}

	private Instruction AddInstruction(Instruction instruction)
	{
		body.Instructions.Add(instruction);
		return instruction;
	}

	public VariableDefinition AddVariable(TypeReference typeRef, string name = "")
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Expected O, but got Unknown
		VariableDefinition val = new VariableDefinition(name, typeRef);
		body.Variables.Add(val);
		return val;
	}

	private Instruction Ldc_I4_n(int n)
	{
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		return (Instruction)(n switch
		{
			0 => Instruction.Create(OpCodes.Ldc_I4_0), 
			1 => Instruction.Create(OpCodes.Ldc_I4_1), 
			2 => Instruction.Create(OpCodes.Ldc_I4_2), 
			3 => Instruction.Create(OpCodes.Ldc_I4_3), 
			4 => Instruction.Create(OpCodes.Ldc_I4_4), 
			5 => Instruction.Create(OpCodes.Ldc_I4_5), 
			6 => Instruction.Create(OpCodes.Ldc_I4_6), 
			7 => Instruction.Create(OpCodes.Ldc_I4_7), 
			8 => Instruction.Create(OpCodes.Ldc_I4_8), 
			_ => Instruction.Create(OpCodes.Ldc_I4_S, (sbyte)n), 
		});
	}
}
