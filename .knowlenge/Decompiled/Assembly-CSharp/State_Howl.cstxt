using System;
using Facepunch;
using Rust.Ai.Gen2;
using UnityEngine;

[Serializable]
[SoftRequireComponent(typeof(BlackboardComponent))]
public class State_Howl : State_PlayAnimation
{
	[SerializeField]
	private float howlRange = 100f;

	public const string WolfNearbyAlreadyHowled = "WolfNearbyAlreadyHowled";

	public float Range => howlRange;

	public override EFSMStateStatus OnStateEnter()
	{
		if (!Owner.FindTarget(out var targetEntity))
		{
			return EFSMStateStatus.Failure;
		}
		if (!Owner.GetComponent<LimitedTurnNavAgent>().CanReach(targetEntity.transform.position, triggerPathFailed: true))
		{
			return EFSMStateStatus.Failure;
		}
		Owner.GetComponent<BlackboardComponent>().Add("WolfNearbyAlreadyHowled");
		using (PooledList<Wolf2> pooledList = Pool.Get<PooledList<Wolf2>>())
		{
			BaseEntity.Query.Server.GetBrainsInSphere(Owner.transform.position, howlRange, pooledList);
			foreach (Wolf2 item in pooledList)
			{
				if (!(item == Owner))
				{
					item.GetComponent<BlackboardComponent>().Add("WolfNearbyAlreadyHowled");
					Wolf2FSM otherWolf = item.GetComponent<Wolf2FSM>();
					Owner.Invoke(delegate
					{
						otherWolf.Howl(targetEntity);
					}, 1f);
				}
			}
		}
		return base.OnStateEnter();
	}
}
