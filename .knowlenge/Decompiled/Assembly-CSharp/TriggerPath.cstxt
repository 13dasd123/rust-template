using UnityEngine;

public class TriggerPath : TriggerBase, IServerComponent
{
	public int pathTriggerId;

	[Header("Path")]
	public BasePath path;

	[Header("Spline")]
	public WorldSpline spline;

	public int splineDirection = 1;

	internal override GameObject InterestedInObject(GameObject obj)
	{
		obj = base.InterestedInObject(obj);
		if ((Object)(object)obj == (Object)null)
		{
			return null;
		}
		BaseEntity baseEntity = obj.ToBaseEntity();
		if ((Object)(object)baseEntity == (Object)null)
		{
			return null;
		}
		if (baseEntity.isServer)
		{
			return ((Component)baseEntity).gameObject;
		}
		return null;
	}

	internal override void OnEntityEnter(BaseEntity ent)
	{
		base.OnEntityEnter(ent);
		IPathListener pathListener = default(IPathListener);
		if (((Component)ent).TryGetComponent<IPathListener>(ref pathListener))
		{
			if (Object.op_Implicit((Object)(object)spline))
			{
				pathListener.OnSplinePathTrigger(pathTriggerId, spline, splineDirection);
			}
			if (Object.op_Implicit((Object)(object)path))
			{
				pathListener.OnBasePathTrigger(pathTriggerId, path);
			}
		}
	}
}
