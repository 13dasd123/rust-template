using System;
using System.Collections.Generic;
using Facepunch.Math;
using Facepunch.Sqlite;
using ProtoBuf;
using UnityEngine;

public class UserPersistance : IDisposable
{
	public static Database blueprints;

	public static Database deaths;

	public UserPersistance(string strFolder)
	{
		blueprints = new Database();
		blueprints.Open(strFolder + "/player.blueprints." + 3 + ".db");
		if (!blueprints.TableExists("data"))
		{
			blueprints.Execute("CREATE TABLE data ( userid TEXT PRIMARY KEY, info BLOB, updated INTEGER )");
		}
		deaths = new Database();
		deaths.Open(strFolder + "/player.deaths." + 3 + ".db");
		if (!deaths.TableExists("data"))
		{
			deaths.Execute("CREATE TABLE data ( userid TEXT, born INTEGER, died INTEGER, info BLOB )");
			deaths.Execute("CREATE INDEX IF NOT EXISTS userindex ON data ( userid )");
			deaths.Execute("CREATE INDEX IF NOT EXISTS diedindex ON data ( died )");
		}
	}

	public virtual void Dispose()
	{
		if (blueprints != null)
		{
			blueprints.Close();
			blueprints = null;
		}
		if (deaths != null)
		{
			deaths.Close();
			deaths = null;
		}
	}

	public PersistantPlayer GetPlayerInfo(ulong playerID)
	{
		PersistantPlayer persistantPlayer = FetchFromDatabase(playerID);
		if (persistantPlayer == null)
		{
			persistantPlayer = new PersistantPlayer();
		}
		persistantPlayer.ShouldPool = false;
		if (persistantPlayer.unlockedItems == null)
		{
			persistantPlayer.unlockedItems = new List<int>();
		}
		return persistantPlayer;
	}

	private PersistantPlayer FetchFromDatabase(ulong playerID)
	{
		try
		{
			Row row = blueprints.QueryRow("SELECT info FROM data WHERE userid = ?", playerID.ToString());
			if (row != null)
			{
				byte[] blob = row.GetBlob("info");
				return PersistantPlayer.Deserialize(blob);
			}
		}
		catch (Exception ex)
		{
			Debug.LogError("Error loading player blueprints: (" + ex.Message + ")");
		}
		return null;
	}

	public void SetPlayerInfo(ulong playerID, PersistantPlayer info)
	{
		using (TimeWarning.New("SetPlayerInfo"))
		{
			byte[] array;
			using (TimeWarning.New("ToProtoBytes"))
			{
				array = info.ToProtoBytes();
			}
			blueprints.Execute("INSERT OR REPLACE INTO data ( userid, info, updated ) VALUES ( ?, ?, ? )", playerID.ToString(), array, Epoch.Current);
		}
	}

	public void AddLifeStory(ulong playerID, PlayerLifeStory lifeStory)
	{
		if (deaths == null || lifeStory == null)
		{
			return;
		}
		using (TimeWarning.New("AddLifeStory"))
		{
			byte[] array;
			using (TimeWarning.New("ToProtoBytes"))
			{
				array = lifeStory.ToProtoBytes();
			}
			deaths.Execute("INSERT INTO data ( userid, born, died, info ) VALUES ( ?, ?, ?, ? )", playerID.ToString(), (int)lifeStory.timeBorn, (int)lifeStory.timeDied, array);
		}
	}

	public PlayerLifeStory GetLastLifeStory(ulong playerID)
	{
		if (deaths == null)
		{
			return null;
		}
		using (TimeWarning.New("GetLastLifeStory"))
		{
			try
			{
				byte[] array = deaths.QueryBlob("SELECT info FROM data WHERE userid = ? ORDER BY died DESC LIMIT 1", playerID.ToString());
				if (array == null)
				{
					return null;
				}
				PlayerLifeStory playerLifeStory = PlayerLifeStory.Deserialize(array);
				playerLifeStory.ShouldPool = false;
				return playerLifeStory;
			}
			catch (Exception ex)
			{
				Debug.LogError("Error loading lifestory from database: (" + ex.Message + ")");
			}
			return null;
		}
	}
}
