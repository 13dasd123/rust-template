using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Facepunch.Math;
using Facepunch.Sqlite;
using ProtoBuf;
using UnityEngine;

public class UserPersistance : IDisposable
{
	private static Database blueprints;

	private static Database deaths;

	private string Folder;

	public UserPersistance(string strFolder)
	{
		Folder = strFolder + "/user." + 1 + "/";
		blueprints = new Database();
		blueprints.Open(strFolder + "/player.blueprints." + 1 + ".db");
		if (!blueprints.TableExists("data"))
		{
			blueprints.Execute("CREATE TABLE data ( userid TEXT PRIMARY KEY, info BLOB, updated INTEGER )");
		}
	}

	public virtual void Dispose()
	{
		if (blueprints != null)
		{
			blueprints.Close();
			blueprints = null;
		}
		if (deaths != null)
		{
			deaths.Close();
			deaths = null;
		}
	}

	public PersistantPlayer GetPlayerInfo(ulong playerID)
	{
		PersistantPlayer persistantPlayer = null;
		persistantPlayer = FetchFromDatabase(playerID);
		if (persistantPlayer == null)
		{
			persistantPlayer = new PersistantPlayer();
		}
		persistantPlayer.ShouldPool = false;
		if (persistantPlayer.unlockedItems == null)
		{
			persistantPlayer.unlockedItems = new List<int>();
		}
		return persistantPlayer;
	}

	private string GetUserFolder(ulong playerID)
	{
		return Folder + string.Join("/", (from x in playerID.ToString()
			select string.Empty + x).ToArray());
	}

	private PersistantPlayer FetchFromDatabase(ulong playerID)
	{
		try
		{
			Row row = blueprints.QueryRow("SELECT info FROM data WHERE userid = ?", playerID.ToString());
			if (row != null)
			{
				byte[] blob = row.GetBlob("info");
				return PersistantPlayer.Deserialize(blob);
			}
			string path = GetUserFolder(playerID) + "/current.data";
			if (!File.Exists(path))
			{
				return null;
			}
			byte[] array = File.ReadAllBytes(path);
			if (array == null)
			{
				return null;
			}
			return PersistantPlayer.Deserialize(array);
		}
		catch (Exception ex)
		{
			Debug.LogError("Error loading player blueprints: (" + ex.Message + ")");
		}
		return null;
	}

	public void SetPlayerInfo(ulong playerID, PersistantPlayer info)
	{
		using (TimeWarning.New("SetPlayerInfo"))
		{
			byte[] array;
			using (TimeWarning.New("ToProtoBytes"))
			{
				array = info.ToProtoBytes();
			}
			blueprints.Execute("INSERT OR REPLACE INTO data ( userid, info, updated ) VALUES ( ?, ?, ? )", playerID.ToString(), array, Epoch.Current);
		}
	}

	public void AddLifeStory(ulong playerID, PlayerLifeStory lifeStory)
	{
		if (deaths == null || lifeStory == null)
		{
			return;
		}
		using (TimeWarning.New("AddLifeStory"))
		{
			byte[] array = lifeStory.ToProtoBytes();
			deaths.Execute("INSERT INTO data ( userid, born, died, info ) VALUES ( ?, ?, ?, ? )", playerID.ToString(), (int)lifeStory.timeBorn, (int)lifeStory.timeDied, array);
		}
	}

	public PlayerLifeStory GetLastLifeStory(ulong playerID)
	{
		if (deaths == null)
		{
			return null;
		}
		using (TimeWarning.New("GetLastLifeStory"))
		{
			try
			{
				byte[] array = deaths.QueryBlob("SELECT info FROM data WHERE userid = ? ORDER BY died DESC LIMIT 1", playerID.ToString());
				if (array == null)
				{
					return null;
				}
				PlayerLifeStory playerLifeStory = PlayerLifeStory.Deserialize(array);
				playerLifeStory.ShouldPool = false;
				return playerLifeStory;
			}
			catch (Exception ex)
			{
				Debug.LogError("Error loading lifestory from database: (" + ex.Message + ")");
			}
			return null;
		}
	}
}
