using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using ProtoBuf;

public class UserPersistance : IDisposable
{
	private static Dictionary<ulong, PersistantPlayer> cachedData = new Dictionary<ulong, PersistantPlayer>();

	private string Folder;

	public UserPersistance(string strFolder)
	{
		Folder = strFolder + "/user/";
	}

	public virtual void Dispose()
	{
		cachedData.Clear();
	}

	public PersistantPlayer GetPlayerInfo(ulong playerID)
	{
		PersistantPlayer value = null;
		if (cachedData.TryGetValue(playerID, out value))
		{
			return value;
		}
		value = FetchFromDatabase(playerID);
		if (value == null)
		{
			value = new PersistantPlayer();
		}
		cachedData[playerID] = value;
		value.ShouldPool = false;
		return value;
	}

	public string GetUserFolder(ulong playerID)
	{
		return Folder + string.Join("/", (from x in playerID.ToString()
			select string.Empty + x).ToArray());
	}

	private PersistantPlayer FetchFromDatabase(ulong playerID)
	{
		string path = GetUserFolder(playerID) + "/current.data";
		if (!File.Exists(path))
		{
			return null;
		}
		byte[] array = File.ReadAllBytes(path);
		if (array == null)
		{
			return null;
		}
		return PersistantPlayer.Deserialize(array);
	}

	public void ClearUnlockedDataForAllPlayers()
	{
		foreach (KeyValuePair<ulong, PersistantPlayer> cachedDatum in cachedData)
		{
			cachedDatum.Value.unlockedItems.Clear();
		}
	}

	public void SetPlayerInfo(ulong playerID, PersistantPlayer info)
	{
		cachedData[playerID] = info;
		using (TimeWarning.New("SetPlayerInfo"))
		{
			byte[] bytes;
			using (TimeWarning.New("ToProtoBytes"))
			{
				bytes = info.ToProtoBytes();
			}
			string userFolder = GetUserFolder(playerID);
			if (!Directory.Exists(userFolder))
			{
				Directory.CreateDirectory(userFolder);
			}
			string path = userFolder + "/current.data";
			File.WriteAllBytes(path, bytes);
		}
	}

	public void AddLifeStory(ulong playerID, PlayerLifeStory lifeStory)
	{
		if (lifeStory == null)
		{
			return;
		}
		using (TimeWarning.New("AddLifeStory"))
		{
			string userFolder = GetUserFolder(playerID);
			if (!Directory.Exists(userFolder))
			{
				Directory.CreateDirectory(userFolder);
			}
			string path = userFolder + "/previous.life";
			byte[] bytes = lifeStory.ToProtoBytes();
			File.WriteAllBytes(path, bytes);
		}
	}

	public PlayerLifeStory GetLastLifeStory(ulong playerID)
	{
		using (TimeWarning.New("GetLastLifeStory"))
		{
			string path = GetUserFolder(playerID) + "/previous.life";
			if (!File.Exists(path))
			{
				return null;
			}
			byte[] buffer = File.ReadAllBytes(path);
			PlayerLifeStory playerLifeStory = PlayerLifeStory.Deserialize(buffer);
			playerLifeStory.ShouldPool = false;
			return playerLifeStory;
		}
	}
}
