using System.Collections.Generic;

public class SmartList<ValueType> where ValueType : SmartListValue
{
	private List<ValueType> list;

	private Queue<int> recycled;

	public int Size => list.Count;

	public int Count => list.Count - recycled.Count;

	public ValueType this[int i]
	{
		get
		{
			return list[i];
		}
		set
		{
			list[i] = value;
		}
	}

	public SmartList(int capacity)
	{
		list = new List<ValueType>(capacity);
		recycled = new Queue<int>();
	}

	public void Add(ValueType value, int capacityGranularity = 16)
	{
		int num;
		if (recycled.Count > 0)
		{
			num = recycled.Dequeue();
			list[num] = value;
		}
		else
		{
			num = list.Count;
			if (num == list.Capacity)
			{
				list.Capacity += capacityGranularity;
			}
			list.Add(value);
		}
		value.hashedListIndex = num;
	}

	public void Remove(ValueType value)
	{
		int hashedListIndex = value.hashedListIndex;
		list[hashedListIndex] = (ValueType)null;
		recycled.Enqueue(hashedListIndex);
		value.hashedListIndex = -1;
	}

	public bool Contains(ValueType value)
	{
		int hashedListIndex = value.hashedListIndex;
		return hashedListIndex >= 0 && list[hashedListIndex] != null;
	}
}
