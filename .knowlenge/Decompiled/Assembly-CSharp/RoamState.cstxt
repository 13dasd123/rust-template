using UnityEngine;

public class RoamState : BasicAIState
{
	private float nextRoamPositionTime = -1f;

	private float lastDestinationTime;

	public override float GetWeight()
	{
		if (!GetEntity().HasTarget() && GetEntity().SecondsSinceAttacked > 10f)
		{
			return 5f;
		}
		return 0f;
	}

	public override void StateEnter()
	{
		GetEntity().SetDesiredSpeed(HumanNPC.SpeedType.SlowWalk);
		GetEntity().SetPlayerFlag(BasePlayer.PlayerFlags.Relaxed, b: true);
		nextRoamPositionTime = -1f;
		lastDestinationTime = Time.time;
		base.StateEnter();
	}

	public override void StateLeave()
	{
		GetEntity().SetPlayerFlag(BasePlayer.PlayerFlags.Relaxed, b: false);
		base.StateLeave();
	}

	public override void StateThink(float delta)
	{
		base.StateThink(delta);
		bool flag = Time.time - lastDestinationTime > 25f;
		if ((Vector3.Distance(GetEntity().finalDestination, GetEntity().transform.position) < 2f || flag) && nextRoamPositionTime == -1f)
		{
			nextRoamPositionTime = Time.time + Random.Range(5f, 10f);
		}
		if (nextRoamPositionTime != -1f && Time.time > nextRoamPositionTime)
		{
			AIMovePoint bestRoamPosition = GetEntity().GetBestRoamPosition(GetEntity().transform.position);
			if ((bool)bestRoamPosition)
			{
				float num = Vector3.Distance(bestRoamPosition.transform.position, GetEntity().transform.position) / 1.5f;
				bestRoamPosition.MarkUsedForRoam(num + 11f);
			}
			lastDestinationTime = Time.time;
			Vector3 destination = ((bestRoamPosition == null) ? GetEntity().transform.position : bestRoamPosition.transform.position);
			GetEntity().SetDestination(destination);
			nextRoamPositionTime = -1f;
		}
	}
}
