using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using Rust;
using Rust.Ai;
using UnityEngine;
using UnityEngine.AI;

public class MonumentNavMesh : FacepunchBehaviour, IServerComponent
{
	public int NavMeshAgentTypeIndex;

	[Tooltip("The default area associated with the NavMeshAgent index.")]
	public string DefaultAreaName = "HumanNPC";

	public int CellCount = 1;

	public int CellSize = 80;

	public int Height = 100;

	public float NavmeshResolutionModifier = 0.5f;

	public Bounds Bounds;

	public NavMeshData NavMeshData;

	public NavMeshDataInstance NavMeshDataInstance;

	public LayerMask LayerMask;

	public NavMeshCollectGeometry NavMeshCollectGeometry;

	private List<AsyncTerrainNavMeshBake> terrainBakes;

	private List<NavMeshBuildSource> sources;

	private AsyncOperation BuildingOperation;

	private bool HasBuildOperationStarted;

	private Stopwatch BuildTimer = new Stopwatch();

	private int defaultArea;

	private int agentTypeId;

	public bool IsBuilding
	{
		get
		{
			if (!HasBuildOperationStarted || BuildingOperation != null)
			{
				return true;
			}
			return false;
		}
	}

	private void OnEnable()
	{
		if (AiManager.nav_grid)
		{
			base.enabled = false;
			return;
		}
		agentTypeId = NavMesh.GetSettingsByIndex(NavMeshAgentTypeIndex).agentTypeID;
		NavMeshData = new NavMeshData(agentTypeId);
		sources = new List<NavMeshBuildSource>();
		terrainBakes = new List<AsyncTerrainNavMeshBake>();
		defaultArea = NavMesh.GetAreaFromName(DefaultAreaName);
		InvokeRepeating(FinishBuildingNavmesh, 0f, 1f);
	}

	private void OnDisable()
	{
		if (!Rust.Application.isQuitting && !AiManager.nav_grid)
		{
			CancelInvoke(FinishBuildingNavmesh);
			NavMeshDataInstance.Remove();
		}
	}

	[ContextMenu("Update Monument Nav Mesh")]
	public void UpdateNavMeshAsync()
	{
		if (!HasBuildOperationStarted && !AiManager.nav_disable && !SquadManager.squad_disable)
		{
			float realtimeSinceStartup = Time.realtimeSinceStartup;
			UnityEngine.Debug.Log("Starting Monument Navmesh Build with " + sources.Count + " sources");
			NavMeshBuildSettings settingsByIndex = NavMesh.GetSettingsByIndex(NavMeshAgentTypeIndex);
			settingsByIndex.overrideVoxelSize = true;
			settingsByIndex.voxelSize *= NavmeshResolutionModifier;
			BuildingOperation = NavMeshBuilder.UpdateNavMeshDataAsync(NavMeshData, settingsByIndex, sources, Bounds);
			BuildTimer.Reset();
			BuildTimer.Start();
			HasBuildOperationStarted = true;
			float num = Time.realtimeSinceStartup - realtimeSinceStartup;
			if (num > 0.1f)
			{
				UnityEngine.Debug.LogWarning("Calling UpdateNavMesh took " + num);
			}
		}
	}

	private IEnumerator CollectSourcesAsync(Action callback)
	{
		float time = Time.realtimeSinceStartup;
		UnityEngine.Debug.Log("Starting Navmesh Source Collecting.");
		NavMeshBuilder.CollectSources(markups: new List<NavMeshBuildMarkup>(), includedWorldBounds: Bounds, includedLayerMask: LayerMask, geometry: NavMeshCollectGeometry, defaultArea: defaultArea, results: sources);
		if (TerrainMeta.HeightMap != null)
		{
			for (float x = 0f - Bounds.extents.x; x < Bounds.extents.x; x += (float)CellSize)
			{
				for (float z = 0f - Bounds.extents.z; z < Bounds.extents.z; z += (float)CellSize)
				{
					AsyncTerrainNavMeshBake terrainSource = new AsyncTerrainNavMeshBake(Bounds.center + new Vector3(x, 0f, z), CellSize, Height, normal: false, alpha: true);
					yield return terrainSource;
					terrainBakes.Add(terrainSource);
					NavMeshBuildSource mesh = terrainSource.CreateNavMeshBuildSource(addSourceObject: true);
					mesh.area = defaultArea;
					sources.Add(mesh);
				}
			}
		}
		AppendModifierVolumes(ref sources);
		float timeTaken = Time.realtimeSinceStartup - time;
		if (timeTaken > 0.1f)
		{
			UnityEngine.Debug.LogWarning("Calling CollectSourcesAsync took " + timeTaken);
		}
		callback?.Invoke();
	}

	public IEnumerator UpdateNavMeshAndWait()
	{
		if (HasBuildOperationStarted || AiManager.nav_disable || SquadManager.squad_disable)
		{
			yield break;
		}
		HasBuildOperationStarted = false;
		Bounds.center = base.transform.position;
		Bounds.size = new Vector3(CellSize * CellCount, Height, CellSize * CellCount);
		if (AiManager.nav_wait)
		{
			yield return CollectSourcesAsync(UpdateNavMeshAsync);
		}
		else
		{
			StartCoroutine(CollectSourcesAsync(UpdateNavMeshAsync));
		}
		if (!AiManager.nav_wait)
		{
			UnityEngine.Debug.Log("nav_wait is false, so we're not waiting for the navmesh to finish generating. This might cause your server to sputter while it's generating.");
			yield break;
		}
		int lastPct = 0;
		while (!HasBuildOperationStarted)
		{
			Thread.Sleep(250);
			yield return null;
		}
		while (BuildingOperation != null)
		{
			int pctDone = (int)(BuildingOperation.progress * 100f);
			if (lastPct != pctDone)
			{
				UnityEngine.Debug.LogFormat("{0}%", pctDone);
				lastPct = pctDone;
			}
			Thread.Sleep(250);
			FinishBuildingNavmesh();
			yield return null;
		}
	}

	private void AppendModifierVolumes(ref List<NavMeshBuildSource> sources)
	{
		List<NavMeshModifierVolume> activeModifiers = NavMeshModifierVolume.activeModifiers;
		foreach (NavMeshModifierVolume item2 in activeModifiers)
		{
			if (((int)LayerMask & (1 << item2.gameObject.layer)) != 0 && item2.AffectsAgentType(agentTypeId))
			{
				Vector3 vector = item2.transform.TransformPoint(item2.center);
				if (Bounds.Contains(vector))
				{
					Vector3 lossyScale = item2.transform.lossyScale;
					Vector3 size = new Vector3(item2.size.x * Mathf.Abs(lossyScale.x), item2.size.y * Mathf.Abs(lossyScale.y), item2.size.z * Mathf.Abs(lossyScale.z));
					NavMeshBuildSource item = default(NavMeshBuildSource);
					item.shape = NavMeshBuildSourceShape.ModifierBox;
					item.transform = Matrix4x4.TRS(vector, item2.transform.rotation, Vector3.one);
					item.size = size;
					item.area = item2.area;
					sources.Add(item);
				}
			}
		}
	}

	public void FinishBuildingNavmesh()
	{
		if (BuildingOperation != null && BuildingOperation.isDone)
		{
			if (!NavMeshDataInstance.valid)
			{
				NavMeshDataInstance = NavMesh.AddNavMeshData(NavMeshData);
			}
			UnityEngine.Debug.Log($"Monument Navmesh Build took {BuildTimer.Elapsed.TotalSeconds:0.00} seconds");
			BuildingOperation = null;
		}
	}

	public void OnDrawGizmosSelected()
	{
		Gizmos.color = Color.magenta * new Color(1f, 1f, 1f, 0.5f);
		Gizmos.DrawCube(base.transform.position, Bounds.size);
	}
}
