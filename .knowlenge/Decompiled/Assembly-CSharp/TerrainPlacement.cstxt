using System;
using UnityEngine;

public abstract class TerrainPlacement : PrefabAttribute
{
	[ReadOnly]
	public Vector3 size = Vector3.zero;

	[ReadOnly]
	public Vector3 extents = Vector3.zero;

	[ReadOnly]
	public Vector3 offset = Vector3.zero;

	public bool HeightMap = true;

	public bool AlphaMap = true;

	public bool WaterMap;

	[InspectorFlags]
	public TerrainSplat.Enum SplatMask;

	[InspectorFlags]
	public TerrainBiome.Enum BiomeMask;

	[InspectorFlags]
	public TerrainTopology.Enum TopologyMask;

	[HideInInspector]
	public Texture2D heightmap;

	[HideInInspector]
	public Texture2D splatmap0;

	[HideInInspector]
	public Texture2D splatmap1;

	[HideInInspector]
	public Texture2D alphamap;

	[HideInInspector]
	public Texture2D biomemap;

	[HideInInspector]
	public Texture2D topologymap;

	[HideInInspector]
	public Texture2D watermap;

	[HideInInspector]
	public Texture2D blendmap;

	[ContextMenu("Refresh Terrain Data")]
	public void RefreshTerrainData()
	{
		TerrainData terrainData = Terrain.activeTerrain.terrainData;
		TerrainHeightMap component = Terrain.activeTerrain.GetComponent<TerrainHeightMap>();
		if ((bool)component)
		{
			heightmap = component.HeightTexture;
		}
		TerrainSplatMap component2 = Terrain.activeTerrain.GetComponent<TerrainSplatMap>();
		if ((bool)component2)
		{
			splatmap0 = component2.SplatTexture0;
			splatmap1 = component2.SplatTexture1;
		}
		TerrainAlphaMap component3 = Terrain.activeTerrain.GetComponent<TerrainAlphaMap>();
		if ((bool)component3)
		{
			alphamap = component3.AlphaTexture;
		}
		TerrainBiomeMap component4 = Terrain.activeTerrain.GetComponent<TerrainBiomeMap>();
		if ((bool)component4)
		{
			biomemap = component4.BiomeTexture;
		}
		TerrainTopologyMap component5 = Terrain.activeTerrain.GetComponent<TerrainTopologyMap>();
		if ((bool)component5)
		{
			topologymap = component5.TopologyTexture;
		}
		TerrainWaterMap component6 = Terrain.activeTerrain.GetComponent<TerrainWaterMap>();
		if ((bool)component6)
		{
			watermap = component6.WaterTexture;
		}
		TerrainBlendMap component7 = Terrain.activeTerrain.GetComponent<TerrainBlendMap>();
		if ((bool)component7)
		{
			blendmap = component7.BlendTexture;
		}
		size = terrainData.size;
		extents = terrainData.size * 0.5f;
		offset = Terrain.activeTerrain.GetPosition() + terrainData.size.XZ3D() * 0.5f - base.transform.position;
	}

	public void Apply(Matrix4x4 localToWorld, Matrix4x4 worldToLocal)
	{
		if (ShouldHeight())
		{
			ApplyHeight(localToWorld, worldToLocal);
		}
		if (ShouldSplat())
		{
			ApplySplat(localToWorld, worldToLocal);
		}
		if (ShouldAlpha())
		{
			ApplyAlpha(localToWorld, worldToLocal);
		}
		if (ShouldBiome())
		{
			ApplyBiome(localToWorld, worldToLocal);
		}
		if (ShouldTopology())
		{
			ApplyTopology(localToWorld, worldToLocal);
		}
		if (ShouldWater())
		{
			ApplyWater(localToWorld, worldToLocal);
		}
	}

	protected bool ShouldHeight()
	{
		return heightmap != null && HeightMap;
	}

	protected bool ShouldSplat(int id = -1)
	{
		return splatmap0 != null && splatmap1 != null && ((uint)SplatMask & (uint)id) != 0;
	}

	protected bool ShouldAlpha()
	{
		return alphamap != null && AlphaMap;
	}

	protected bool ShouldBiome(int id = -1)
	{
		return biomemap != null && ((uint)BiomeMask & (uint)id) != 0;
	}

	protected bool ShouldTopology(int id = -1)
	{
		return topologymap != null && ((uint)TopologyMask & (uint)id) != 0;
	}

	protected bool ShouldWater()
	{
		return watermap != null && WaterMap;
	}

	protected abstract void ApplyHeight(Matrix4x4 localToWorld, Matrix4x4 worldToLocal);

	protected abstract void ApplySplat(Matrix4x4 localToWorld, Matrix4x4 worldToLocal);

	protected abstract void ApplyAlpha(Matrix4x4 localToWorld, Matrix4x4 worldToLocal);

	protected abstract void ApplyBiome(Matrix4x4 localToWorld, Matrix4x4 worldToLocal);

	protected abstract void ApplyTopology(Matrix4x4 localToWorld, Matrix4x4 worldToLocal);

	protected abstract void ApplyWater(Matrix4x4 localToWorld, Matrix4x4 worldToLocal);

	protected override Type GetIndexedType()
	{
		return typeof(TerrainPlacement);
	}
}
