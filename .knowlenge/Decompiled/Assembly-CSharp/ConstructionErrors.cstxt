using UnityEngine;

public static class ConstructionErrors
{
	public static readonly Phrase NoPermission = new Phrase("error_buildpermission", "You don't have permission to build here");

	public static readonly Phrase StackPrivilege = new Phrase("error_stackprivilege", "Cannot stack building privileges");

	public static readonly Phrase CantBuildWhileMoving = new Phrase("error_whilemoving", "You can't build this while moving");

	public static readonly Phrase ThroughRock = new Phrase("error_throughrock", "Placing through rock");

	public static readonly Phrase InsideObjects = new Phrase("error_insideobjects", "Can't deploy inside objects");

	public static readonly Phrase TooCloseToRoad = new Phrase("error_tooclosetoroad", "Placing too close to road");

	public static readonly Phrase TooFarAway = new Phrase("error_toofar", "Too far away");

	public static readonly Phrase BlockedBy = new Phrase("error_blockedby", "Blocked by {0}");

	public static readonly Phrase BlockedByPlayer = new Phrase("error_blockedbyplayer", "Blocked by Player {0}");

	public static readonly Phrase BlockedByVehicle = new Phrase("error_blockedbyvehicle", "Blocked by Vehicle");

	public static readonly Phrase TooCloseTo = new Phrase("error_toocloseto", "Too close to {0}");

	public static readonly Phrase TooCloseToMonument = new Phrase("error_tooclosetomonument", "Cannot build this close to {0}");

	public static readonly Phrase BlockedByTree = new Phrase("error_blockedbytree", "Blocked by tree");

	public static readonly Phrase BlockedByTerrain = new Phrase("error_blockedbyterrain", "Blocked by terrain");

	public static readonly Phrase SkinNotOwned = new Phrase("error_skinnotowned", "Skin not owned");

	public static readonly Phrase CannotBuildInThisArea = new Phrase("error_cannotbuildarea", "Cannot build in this area");

	public static readonly Phrase NotEnoughSpace = new Phrase("error_notenoughspace", "Not enough space");

	public static readonly Phrase NotStableEnough = new Phrase("error_notstableenough", "Not stable enough");

	public static readonly Phrase MustPlaceOnConstruction = new Phrase("error_wantsconstruction", "Must be placed on a construction");

	public static readonly Phrase CantPlaceOnConstruction = new Phrase("error_doesnotwantconstruction", "Cannot be placed on constructions");

	public static readonly Phrase CantPlaceOnMonument = new Phrase("error_cantplaceonmonument", "Cannot be placed on monument");

	public static readonly Phrase NotInTerrain = new Phrase("error_notinterrain", "Not in terrain");

	public static readonly Phrase MustPlaceOnRoad = new Phrase("error_placement_needs_road", "Must be placed on road");

	public static readonly Phrase CantPlaceOnRoad = new Phrase("error_placement_no_road", "Cannot be placed on road");

	public static readonly Phrase InvalidAreaVehicleLarge = new Phrase("error_invalidarea_vehiclelarge", "Cannot deploy near a large vehicle");

	public static readonly Phrase InvalidAngle = new Phrase("error_invalidangle", "Invalid angle");

	public static readonly Phrase InvalidEntity = new Phrase("error_invalidentitycheck", "Invalid entity");

	public static readonly Phrase InvalidEntityType = new Phrase("error_invalidentitytype", "Invalid entity type");

	public static readonly Phrase WantsWater = new Phrase("error_inwater_wants", "Must be placed in water");

	public static readonly Phrase WantsWaterBody = new Phrase("error_inwater_wants_body", "Must be placed in a body of water");

	public static readonly Phrase InWater = new Phrase("error_inwater", "Can't be placed in water");

	public static readonly Phrase TooDeep = new Phrase("error_toodeep", "Water is too deep");

	public static readonly Phrase TooShallow = new Phrase("error_shallow", "Water is too shallow");

	public static readonly Phrase CouldntFindConstruction = new Phrase("error_counlndfindconstruction", "Couldn't find construction");

	public static readonly Phrase CouldntFindEntity = new Phrase("error_counlndfindentity", "Couldn't find entity");

	public static readonly Phrase CouldntFindSocket = new Phrase("error_counlndfindsocket", "Couldn't find socket");

	public static readonly Phrase Antihack = new Phrase("error_antihack", "Anti hack!");

	public static readonly Phrase AntihackWithReason = new Phrase("error_antihack_reason", "Anti hack! ({0})");

	public static readonly Phrase CantDeployOnDoor = new Phrase("error_cantdeployondoor", "Can't deploy on door");

	public static readonly Phrase DeployableMismatch = new Phrase("error_deployablemismatch", "Deployable mismatch!");

	public static readonly Phrase LineOfSightBlocked = new Phrase("error_lineofsightblocked", "Line of sight blocked");

	public static readonly Phrase ParentTooFar = new Phrase("error_parenttoofar", "Parent too far away");

	public static readonly Phrase SocketOccupied = new Phrase("error_sockectoccupied", "Target socket is occupied");

	public static readonly Phrase SocketNotFemale = new Phrase("error_socketnotfemale", "Target socket is not female");

	public static readonly Phrase WantsInside = new Phrase("error_wantsinside", "Must be placed inside your base");

	public static readonly Phrase WantsOutside = new Phrase("error_wantsoutside", "Can't be placed inside a base");

	public static readonly Phrase PlayerName = new Phrase("error_name_player", "Player {0}");

	public static readonly Phrase HorseName = new Phrase("error_name_horse", "Horse");

	public static readonly Phrase ModularCarName = new Phrase("error_name_modularcar", "Modular Car");

	public static readonly Phrase TreeName = new Phrase("error_name_tree", "Tree");

	public static readonly Phrase DebrisName = new Phrase("error_name_debris", "Debris");

	public static readonly Phrase OreName = new Phrase("error_name_ore", "Ore");

	public static readonly Phrase CannotAttachToUnauthorized = new Phrase("error_cannotattachtounauth", "Cannot attach to unauthorized building");

	public static readonly Phrase CannotConnectTwoBuildings = new Phrase("error_connecttwobuildings", "Cannot connect two buildings with cupboards");

	public static readonly Phrase CantUpgradeRecentlyDamaged = new Phrase("error_upgraderecentlydamaged", "Recently damaged, upgradable in {0} seconds");

	public static readonly Phrase CantRotateAnymore = new Phrase("grade_rotationblocked", "Can't rotate this block anymore");

	public static readonly Phrase CantDemolishAnymore = new Phrase("grade_demolishblocked", "Can't demolish this block anymore");

	public static string GetTranslatedNameFromEntity(BaseEntity entity, BasePlayer fromPlayer = null)
	{
		if (entity is ModularCar || entity is BaseVehicleModule)
		{
			return ModularCarName.translated;
		}
		if (entity is BaseVehicleSeat && entity.parentEntity.Get(serverside: false) is RidableHorse)
		{
			return HorseName.translated;
		}
		if (entity is RidableHorse || entity is BaseSaddle || entity is RidableHorse2 || entity is HorseSaddle)
		{
			return HorseName.translated;
		}
		if (entity is HumanNPC humanNPC)
		{
			return humanNPC.displayName;
		}
		if (entity is BasePlayer { displayName: var arg } basePlayer)
		{
			if ((Object)(object)fromPlayer != (Object)null)
			{
				arg = NameHelper.GetPlayerNameStreamSafe(fromPlayer, basePlayer);
			}
			return string.Format(PlayerName.translated, arg);
		}
		if (entity is BuildingBlock buildingBlock)
		{
			return PrefabAttribute.server.Find<Construction>(buildingBlock.prefabID).info.name.translated;
		}
		if (entity is DebrisEntity)
		{
			return DebrisName.translated;
		}
		if (entity is TreeEntity)
		{
			return TreeName.translated;
		}
		if (entity is OreResourceEntity)
		{
			return OreName.translated;
		}
		SprayCan.GetItemDefinitionForEntity(entity, out var def);
		if ((Object)(object)def != (Object)null)
		{
			return def.displayName.translated;
		}
		return string.Empty;
	}

	public static string GetBlockedByErrorFromCollider(Collider col, BasePlayer fromPlayer = null)
	{
		PreventBuildingMonumentTag preventBuildingMonumentTag = GetPreventBuildingMonumentTag(col);
		if ((Object)(object)preventBuildingMonumentTag != (Object)null)
		{
			return string.Format(TooCloseToMonument.translated, preventBuildingMonumentTag.GetAttachedMonument().displayPhrase.translated);
		}
		BaseEntity baseEntity = col.ToBaseEntity();
		if ((Object)(object)baseEntity != (Object)null)
		{
			string translatedNameFromEntity = GetTranslatedNameFromEntity(baseEntity, fromPlayer);
			if (!string.IsNullOrEmpty(translatedNameFromEntity))
			{
				return string.Format(BlockedBy.translated, translatedNameFromEntity);
			}
		}
		else if (col is TerrainCollider)
		{
			return BlockedByTerrain.translated;
		}
		return null;
	}

	public static PreventBuildingMonumentTag GetPreventBuildingMonumentTag(Collider col)
	{
		PreventBuildingMonumentTag preventBuildingMonumentTag = default(PreventBuildingMonumentTag);
		if ((Object)(object)col != (Object)null && ((Component)col).TryGetComponent<PreventBuildingMonumentTag>(ref preventBuildingMonumentTag) && (Object)(object)preventBuildingMonumentTag.GetAttachedMonument() != (Object)null && !((Component)preventBuildingMonumentTag).gameObject.HasCustomTag(GameObjectTag.BlockPlacement))
		{
			return preventBuildingMonumentTag;
		}
		return null;
	}

	public static void Log(BasePlayer player, string message)
	{
		if (!((Object)(object)player == (Object)null) && !string.IsNullOrEmpty(message) && player.isServer && player.net.connection.info.GetBool("client.errortoasts_debug", false))
		{
			player.ChatMessage(message);
		}
	}
}
