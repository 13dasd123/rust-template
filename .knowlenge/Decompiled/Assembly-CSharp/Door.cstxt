#define UNITY_ASSERTIONS
using System;
using ConVar;
using Network;
using Oxide.Core;
using UnityEngine;
using UnityEngine.Assertions;

public class Door : AnimatedBuildingBlock
{
	public GameObjectRef knockEffect;

	public bool canTakeLock = true;

	public bool hasHatch;

	public bool canTakeCloser;

	private float decayResetTimeLast = float.NegativeInfinity;

	private float nextKnockTime = float.NegativeInfinity;

	public override bool OnRpcMessage(BasePlayer player, uint rpc, Message msg)
	{
		using (TimeWarning.New("Door.OnRpcMessage"))
		{
			if (rpc == 3003686860u && player != null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log(string.Concat("SV_RPCMessage: ", player, " - RPC_CloseDoor "));
				}
				using (TimeWarning.New("RPC_CloseDoor"))
				{
					using (TimeWarning.New("Conditions"))
					{
						if (!RPC_Server.MaxDistance.Test("RPC_CloseDoor", this, player, 3f))
						{
							return true;
						}
					}
					try
					{
						using (TimeWarning.New("Call"))
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage rpc2 = rPCMessage;
							RPC_CloseDoor(rpc2);
						}
					}
					catch (Exception exception)
					{
						player.Kick("RPC Error in RPC_CloseDoor");
						Debug.LogException(exception);
					}
				}
				return true;
			}
			if (rpc == 167081128 && player != null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log(string.Concat("SV_RPCMessage: ", player, " - RPC_KnockDoor "));
				}
				using (TimeWarning.New("RPC_KnockDoor"))
				{
					using (TimeWarning.New("Conditions"))
					{
						if (!RPC_Server.MaxDistance.Test("RPC_KnockDoor", this, player, 3f))
						{
							return true;
						}
					}
					try
					{
						using (TimeWarning.New("Call"))
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage rpc3 = rPCMessage;
							RPC_KnockDoor(rpc3);
						}
					}
					catch (Exception exception2)
					{
						player.Kick("RPC Error in RPC_KnockDoor");
						Debug.LogException(exception2);
					}
				}
				return true;
			}
			if (rpc == 4041793042u && player != null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log(string.Concat("SV_RPCMessage: ", player, " - RPC_OpenDoor "));
				}
				using (TimeWarning.New("RPC_OpenDoor"))
				{
					using (TimeWarning.New("Conditions"))
					{
						if (!RPC_Server.MaxDistance.Test("RPC_OpenDoor", this, player, 3f))
						{
							return true;
						}
					}
					try
					{
						using (TimeWarning.New("Call"))
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage rpc4 = rPCMessage;
							RPC_OpenDoor(rpc4);
						}
					}
					catch (Exception exception3)
					{
						player.Kick("RPC Error in RPC_OpenDoor");
						Debug.LogException(exception3);
					}
				}
				return true;
			}
			if (rpc == 3327264274u && player != null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log(string.Concat("SV_RPCMessage: ", player, " - RPC_ToggleHatch "));
				}
				using (TimeWarning.New("RPC_ToggleHatch"))
				{
					using (TimeWarning.New("Conditions"))
					{
						if (!RPC_Server.MaxDistance.Test("RPC_ToggleHatch", this, player, 3f))
						{
							return true;
						}
					}
					try
					{
						using (TimeWarning.New("Call"))
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage rpc5 = rPCMessage;
							RPC_ToggleHatch(rpc5);
						}
					}
					catch (Exception exception4)
					{
						player.Kick("RPC Error in RPC_ToggleHatch");
						Debug.LogException(exception4);
					}
				}
				return true;
			}
		}
		return base.OnRpcMessage(player, rpc, msg);
	}

	public override void ResetState()
	{
		base.ResetState();
		decayResetTimeLast = float.NegativeInfinity;
	}

	public override bool HasSlot(Slot slot)
	{
		if (slot == Slot.Lock && canTakeLock)
		{
			return true;
		}
		if (slot == Slot.UpperModifier)
		{
			return true;
		}
		return base.HasSlot(slot);
	}

	public override bool CanPickup(BasePlayer player)
	{
		if (!IsOpen())
		{
			return false;
		}
		if ((bool)GetSlot(Slot.Lock))
		{
			return false;
		}
		if ((bool)GetSlot(Slot.UpperModifier))
		{
			return false;
		}
		return base.CanPickup(player);
	}

	public void CloseRequest()
	{
		SetOpen(open: false);
	}

	public override void OnFlagsChanged(Flags old, Flags next)
	{
		base.OnFlagsChanged(old, next);
		BaseEntity slot = GetSlot(Slot.UpperModifier);
		if ((bool)slot)
		{
			slot.SendMessage("Think");
		}
	}

	public void SetOpen(bool open)
	{
		SetFlag(Flags.Open, open);
		SendNetworkUpdateImmediate();
	}

	public void SetLocked(bool locked)
	{
		SetFlag(Flags.Locked, b: false);
		SendNetworkUpdateImmediate();
	}

	public bool GetPlayerLockPermission(BasePlayer player)
	{
		BaseLock baseLock = GetSlot(Slot.Lock) as BaseLock;
		if (baseLock == null)
		{
			return true;
		}
		return baseLock.GetPlayerLockPermission(player);
	}

	[RPC_Server]
	[RPC_Server.MaxDistance(3f)]
	private void RPC_OpenDoor(RPCMessage rpc)
	{
		if (!rpc.player.CanInteract() || IsOpen() || IsBusy() || IsLocked())
		{
			return;
		}
		BaseLock baseLock = GetSlot(Slot.Lock) as BaseLock;
		if (baseLock != null)
		{
			if (!baseLock.OnTryToOpen(rpc.player))
			{
				return;
			}
			if (baseLock.IsLocked() && UnityEngine.Time.realtimeSinceStartup - decayResetTimeLast > 60f)
			{
				BuildingBlock buildingBlock = FindLinkedEntity<BuildingBlock>();
				if ((bool)buildingBlock)
				{
					Decay.BuildingDecayTouch(buildingBlock);
				}
				else
				{
					Decay.RadialDecayTouch(base.transform.position, 40f, 2097408);
				}
				decayResetTimeLast = UnityEngine.Time.realtimeSinceStartup;
			}
		}
		SetFlag(Flags.Open, b: true);
		SendNetworkUpdateImmediate();
		Interface.CallHook("OnDoorOpened", this, rpc.player);
	}

	[RPC_Server.MaxDistance(3f)]
	[RPC_Server]
	private void RPC_CloseDoor(RPCMessage rpc)
	{
		if (rpc.player.CanInteract() && IsOpen() && !IsBusy() && !IsLocked())
		{
			BaseLock baseLock = GetSlot(Slot.Lock) as BaseLock;
			if (!(baseLock != null) || baseLock.OnTryToClose(rpc.player))
			{
				SetFlag(Flags.Open, b: false);
				SendNetworkUpdateImmediate();
				Interface.CallHook("OnDoorClosed", this, rpc.player);
			}
		}
	}

	[RPC_Server]
	[RPC_Server.MaxDistance(3f)]
	private void RPC_KnockDoor(RPCMessage rpc)
	{
		if (rpc.player.CanInteract() && knockEffect.isValid && !(UnityEngine.Time.realtimeSinceStartup < nextKnockTime))
		{
			nextKnockTime = UnityEngine.Time.realtimeSinceStartup + 0.5f;
			Effect.server.Run(knockEffect.resourcePath, this, 0u, Vector3.zero, Vector3.zero);
		}
	}

	[RPC_Server.MaxDistance(3f)]
	[RPC_Server]
	private void RPC_ToggleHatch(RPCMessage rpc)
	{
		if (rpc.player.CanInteract() && hasHatch)
		{
			BaseLock baseLock = GetSlot(Slot.Lock) as BaseLock;
			if (!baseLock || baseLock.OnTryToOpen(rpc.player))
			{
				SetFlag(Flags.Reserved3, !HasFlag(Flags.Reserved3));
			}
		}
	}

	public override bool SupportsPooling()
	{
		return true;
	}

	public override float BoundsPadding()
	{
		return 2f;
	}
}
