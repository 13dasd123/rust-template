using UnityEngine;

public class ConstructionSocket : Socket_Base
{
	public enum Type
	{
		None = 0,
		Foundation = 1,
		Floor = 2,
		Doorway = 4,
		Wall = 5,
		Block = 6,
		Support = 7,
		Ramp = 10,
		Window = 11,
		Shutters = 12,
		WallFrame = 13,
		FloorFrame = 14
	}

	public Type socketType;

	public int rotationDegrees;

	public int rotationOffset;

	public bool restrictPlacementAngle;

	public float faceAngle;

	public float angleAllowed = 150f;

	[Range(0f, 1f)]
	public float support = 1f;

	private void OnDrawGizmos()
	{
		Gizmos.matrix = base.transform.localToWorldMatrix;
		Gizmos.color = Color.red;
		Gizmos.DrawLine(Vector3.zero, Vector3.forward * 0.6f);
		Gizmos.color = Color.blue;
		Gizmos.DrawLine(Vector3.zero, Vector3.right * 0.1f);
		Gizmos.color = Color.green;
		Gizmos.DrawLine(Vector3.zero, Vector3.up * 0.1f);
		Gizmos.DrawIcon(base.transform.position, "light_circle_green.png", allowScaling: false);
	}

	private void OnDrawGizmosSelected()
	{
		if (female)
		{
			Gizmos.matrix = base.transform.localToWorldMatrix;
			Gizmos.DrawWireCube(selectCenter, selectSize);
		}
	}

	public override bool TestTarget(Construction.Target target)
	{
		if (!base.TestTarget(target))
		{
			return false;
		}
		ConstructionSocket constructionSocket = target.socket as ConstructionSocket;
		if (constructionSocket == null)
		{
			return false;
		}
		if (constructionSocket.socketType == Type.None || socketType == Type.None)
		{
			return false;
		}
		if (constructionSocket.socketType != socketType)
		{
			return false;
		}
		return true;
	}

	public bool TestRestrictedAngles(Vector3 suggestedPos, Quaternion suggestedAng, Construction.Target target)
	{
		if (restrictPlacementAngle)
		{
			Quaternion quaternion = Quaternion.Euler(0f, faceAngle, 0f);
			Quaternion quaternion2 = quaternion * suggestedAng;
			Vector3 a = target.ray.direction.XZ3D();
			float num = a.DotDegrees(quaternion2 * Vector3.forward);
			if (num > angleAllowed * 0.5f)
			{
				return false;
			}
			if (num < angleAllowed * -0.5f)
			{
				return false;
			}
		}
		return true;
	}

	public override Construction.Placement DoPlacement(Construction.Target target)
	{
		if (!target.construction || !target.construction.transform)
		{
			return null;
		}
		Vector3 vector = target.GetWorldPosition();
		Quaternion quaternion = target.GetWorldRotation(female: true);
		if (rotationDegrees > 0)
		{
			Construction.Placement placement = new Construction.Placement();
			for (int i = 0; i < 360; i += rotationDegrees)
			{
				Quaternion quaternion2 = quaternion * Quaternion.Inverse(rotation);
				Vector3 direction = target.ray.direction;
				Vector3 vector2 = quaternion2 * Vector3.up;
				direction -= Vector3.Dot(direction, vector2) * vector2;
				direction.Normalize();
				Quaternion quaternion3 = Quaternion.LookRotation(direction, quaternion2 * Vector3.up);
				if (rotationOffset != 0)
				{
					quaternion3 *= Quaternion.Euler(0f, rotationOffset, 0f);
				}
				Vector3 eulerAngles = (Quaternion.Inverse(quaternion) * quaternion3).eulerAngles;
				eulerAngles.x = eulerAngles.x.SnapTo(rotationDegrees) + (float)i;
				quaternion3 = Quaternion.Euler(eulerAngles);
				Vector3 lhs = quaternion3 * Vector3.up;
				float num = Mathf.Abs(Vector3.Dot(lhs, new Vector3(0f, 0f, -1f)));
				if (!(num < 0.98f))
				{
					quaternion3 = quaternion * quaternion3;
					placement.rotation = Quaternion.Euler(target.rotation) * quaternion3;
					Vector3 vector3 = placement.rotation * position;
					placement.position = vector - vector3;
					if (CheckSocketMods(placement))
					{
						return placement;
					}
				}
			}
		}
		Construction.Placement placement2 = new Construction.Placement();
		Quaternion quaternion4 = quaternion * Quaternion.Inverse(rotation);
		Vector3 vector4 = quaternion4 * position;
		placement2.position = vector - vector4;
		placement2.rotation = quaternion4;
		if (!TestRestrictedAngles(vector, quaternion, target))
		{
			return null;
		}
		return placement2;
	}
}
