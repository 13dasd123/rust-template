using UnityEngine;

public struct Operation
{
	private string path;

	private AsyncOperation request;

	public bool isDone => request == null || request.isDone;

	public float progress => (request == null) ? 1f : request.progress;

	public Operation(string path, AsyncOperation request)
	{
		this.path = path;
		this.request = request;
	}

	public static implicit operator AsyncOperation(Operation op)
	{
		return op.request;
	}

	public T Load<T>() where T : Object
	{
		T result = (T)null;
		if (!isDone)
		{
			return result;
		}
		if (cache.ContainsKey(path))
		{
			result = cache[path] as T;
		}
		else if (request is AssetBundleRequest assetBundleRequest && assetBundleRequest.asset != null)
		{
			cache.Add(path, assetBundleRequest.asset);
			result = assetBundleRequest.asset as T;
		}
		return result;
	}
}
