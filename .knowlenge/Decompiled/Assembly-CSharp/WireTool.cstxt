#define UNITY_ASSERTIONS
using System;
using System.Collections.Generic;
using ConVar;
using Network;
using UnityEngine;
using UnityEngine.Assertions;

public class WireTool : HeldEntity
{
	public struct PendingPlug_t
	{
		public IOEntity ent;

		public bool input;

		public int index;

		public GameObject tempLine;
	}

	public static float maxWireLength = 30f;

	private const int maxLineNodes = 16;

	public GameObjectRef plugEffect;

	public GameObjectRef ioLine;

	public PendingPlug_t pending;

	public Sprite InputSprite;

	public Sprite OutputSprite;

	public Sprite ClearSprite;

	public override bool OnRpcMessage(BasePlayer player, uint rpc, Message msg)
	{
		using (TimeWarning.New("WireTool.OnRpcMessage"))
		{
			if (rpc == 678101026 && player != null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log(string.Concat("SV_RPCMessage: ", player, " - AddLine "));
				}
				using (TimeWarning.New("AddLine"))
				{
					using (TimeWarning.New("Conditions"))
					{
						if (!RPC_Server.IsVisible.Test("AddLine", this, player, 3f))
						{
							return true;
						}
					}
					try
					{
						using (TimeWarning.New("Call"))
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage msg2 = rPCMessage;
							AddLine(msg2);
						}
					}
					catch (Exception exception)
					{
						player.Kick("RPC Error in AddLine");
						Debug.LogException(exception);
					}
				}
				return true;
			}
			if (rpc == 40328523 && player != null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log(string.Concat("SV_RPCMessage: ", player, " - MakeConnection "));
				}
				using (TimeWarning.New("MakeConnection"))
				{
					using (TimeWarning.New("Conditions"))
					{
						if (!RPC_Server.IsVisible.Test("MakeConnection", this, player, 3f))
						{
							return true;
						}
					}
					try
					{
						using (TimeWarning.New("Call"))
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage msg3 = rPCMessage;
							MakeConnection(msg3);
						}
					}
					catch (Exception exception2)
					{
						player.Kick("RPC Error in MakeConnection");
						Debug.LogException(exception2);
					}
				}
				return true;
			}
			if (rpc == 2469840259u && player != null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log(string.Concat("SV_RPCMessage: ", player, " - RequestClear "));
				}
				using (TimeWarning.New("RequestClear"))
				{
					using (TimeWarning.New("Conditions"))
					{
						if (!RPC_Server.IsVisible.Test("RequestClear", this, player, 3f))
						{
							return true;
						}
					}
					try
					{
						using (TimeWarning.New("Call"))
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage msg4 = rPCMessage;
							RequestClear(msg4);
						}
					}
					catch (Exception exception3)
					{
						player.Kick("RPC Error in RequestClear");
						Debug.LogException(exception3);
					}
				}
				return true;
			}
			if (rpc == 2596458392u && player != null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log(string.Concat("SV_RPCMessage: ", player, " - SetPlugged "));
				}
				using (TimeWarning.New("SetPlugged"))
				{
					try
					{
						using (TimeWarning.New("Call"))
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage plugged = rPCMessage;
							SetPlugged(plugged);
						}
					}
					catch (Exception exception4)
					{
						player.Kick("RPC Error in SetPlugged");
						Debug.LogException(exception4);
					}
				}
				return true;
			}
			if (rpc == 210386477 && player != null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log(string.Concat("SV_RPCMessage: ", player, " - TryClear "));
				}
				using (TimeWarning.New("TryClear"))
				{
					using (TimeWarning.New("Conditions"))
					{
						if (!RPC_Server.IsVisible.Test("TryClear", this, player, 3f))
						{
							return true;
						}
					}
					try
					{
						using (TimeWarning.New("Call"))
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage msg5 = rPCMessage;
							TryClear(msg5);
						}
					}
					catch (Exception exception5)
					{
						player.Kick("RPC Error in TryClear");
						Debug.LogException(exception5);
					}
				}
				return true;
			}
		}
		return base.OnRpcMessage(player, rpc, msg);
	}

	public void ClearPendingPlug()
	{
		pending.ent = null;
		pending.index = -1;
	}

	public bool HasPendingPlug()
	{
		return pending.ent != null && pending.index != -1;
	}

	public bool PendingPlugIsInput()
	{
		return pending.ent != null && pending.index != -1 && pending.input;
	}

	public bool PendingPlugIsOutput()
	{
		return pending.ent != null && pending.index != -1 && !pending.input;
	}

	public static bool CanPlayerUseWires(BasePlayer player)
	{
		return player.CanBuild() && !GamePhysics.CheckSphere(player.eyes.position, 0.1f, 536870912, QueryTriggerInteraction.Collide);
	}

	[RPC_Server]
	[RPC_Server.IsVisible(3f)]
	public void TryClear(RPCMessage msg)
	{
		BasePlayer player = msg.player;
		if (CanPlayerUseWires(player))
		{
			uint uid = msg.read.UInt32();
			BaseNetworkable baseNetworkable = BaseNetworkable.serverEntities.Find(uid);
			IOEntity iOEntity = ((!(baseNetworkable == null)) ? baseNetworkable.GetComponent<IOEntity>() : null);
			if (!(iOEntity == null))
			{
				iOEntity.ClearConnections();
				iOEntity.SendNetworkUpdate();
			}
		}
	}

	[RPC_Server]
	[RPC_Server.IsVisible(3f)]
	public void MakeConnection(RPCMessage msg)
	{
		BasePlayer player = msg.player;
		if (!CanPlayerUseWires(player))
		{
			return;
		}
		uint uid = msg.read.UInt32();
		int num = msg.read.Int32();
		uint uid2 = msg.read.UInt32();
		int num2 = msg.read.Int32();
		BaseNetworkable baseNetworkable = BaseNetworkable.serverEntities.Find(uid);
		IOEntity iOEntity = ((!(baseNetworkable == null)) ? baseNetworkable.GetComponent<IOEntity>() : null);
		if (!(iOEntity == null))
		{
			BaseNetworkable baseNetworkable2 = BaseNetworkable.serverEntities.Find(uid2);
			IOEntity iOEntity2 = ((!(baseNetworkable2 == null)) ? baseNetworkable2.GetComponent<IOEntity>() : null);
			if (!(iOEntity2 == null) && !(Vector3.Distance(baseNetworkable2.transform.position, baseNetworkable.transform.position) > maxWireLength) && num < iOEntity.inputs.Length && num2 < iOEntity2.outputs.Length && !(iOEntity.inputs[num].connectedTo.Get() != null) && !(iOEntity2.outputs[num2].connectedTo.Get() != null) && (!iOEntity.inputs[num].rootConnectionsOnly || iOEntity2.IsRootEntity()))
			{
				iOEntity.inputs[num].connectedTo.Set(iOEntity2);
				iOEntity.inputs[num].connectedToSlot = num2;
				iOEntity.inputs[num].connectedTo.Init();
				iOEntity2.outputs[num2].connectedTo.Set(iOEntity);
				iOEntity2.outputs[num2].connectedToSlot = num;
				iOEntity2.outputs[num2].connectedTo.Init();
				iOEntity2.MarkDirtyForceUpdateOutputs();
				iOEntity2.SendNetworkUpdate();
				iOEntity.SendNetworkUpdate();
			}
		}
	}

	[RPC_Server]
	public void SetPlugged(RPCMessage msg)
	{
	}

	[RPC_Server]
	[RPC_Server.IsVisible(3f)]
	public void RequestClear(RPCMessage msg)
	{
		BasePlayer player = msg.player;
		if (!CanPlayerUseWires(player))
		{
			return;
		}
		uint uid = msg.read.UInt32();
		int num = msg.read.Int32();
		bool flag = msg.read.Bit();
		BaseNetworkable baseNetworkable = BaseNetworkable.serverEntities.Find(uid);
		IOEntity iOEntity = ((!(baseNetworkable == null)) ? baseNetworkable.GetComponent<IOEntity>() : null);
		if (iOEntity == null || num >= ((!flag) ? iOEntity.outputs.Length : iOEntity.inputs.Length))
		{
			return;
		}
		IOEntity.IOSlot iOSlot = ((!flag) ? iOEntity.outputs[num] : iOEntity.inputs[num]);
		if (!(iOSlot.connectedTo.Get() == null))
		{
			IOEntity iOEntity2 = iOSlot.connectedTo.Get();
			IOEntity.IOSlot iOSlot2 = ((!flag) ? iOEntity2.inputs[iOSlot.connectedToSlot] : iOEntity2.outputs[iOSlot.connectedToSlot]);
			if (flag)
			{
				iOEntity.UpdateFromInput(0, num);
			}
			else if ((bool)iOEntity2)
			{
				iOEntity2.UpdateFromInput(0, iOSlot.connectedToSlot);
			}
			iOSlot.Clear();
			iOSlot2.Clear();
			if ((bool)iOEntity2)
			{
				iOEntity2.MarkDirtyForceUpdateOutputs();
				iOEntity2.SendNetworkUpdate();
			}
			iOEntity.MarkDirtyForceUpdateOutputs();
			iOEntity.SendNetworkUpdate();
		}
	}

	[RPC_Server]
	[RPC_Server.IsVisible(3f)]
	public void AddLine(RPCMessage msg)
	{
		if (!CanPlayerUseWires(msg.player))
		{
			return;
		}
		int num = msg.read.Int32();
		if (num > 18)
		{
			return;
		}
		List<Vector3> list = new List<Vector3>();
		for (int i = 0; i < num; i++)
		{
			Vector3 item = msg.read.Vector3();
			list.Add(item);
		}
		if (!ValidateLine(list))
		{
			return;
		}
		uint uid = msg.read.UInt32();
		int num2 = msg.read.Int32();
		uint uid2 = msg.read.UInt32();
		int num3 = msg.read.Int32();
		BaseNetworkable baseNetworkable = BaseNetworkable.serverEntities.Find(uid);
		IOEntity iOEntity = ((!(baseNetworkable == null)) ? baseNetworkable.GetComponent<IOEntity>() : null);
		if (!(iOEntity == null))
		{
			BaseNetworkable baseNetworkable2 = BaseNetworkable.serverEntities.Find(uid2);
			IOEntity iOEntity2 = ((!(baseNetworkable2 == null)) ? baseNetworkable2.GetComponent<IOEntity>() : null);
			if (!(iOEntity2 == null) && num2 < iOEntity.inputs.Length && num3 < iOEntity2.outputs.Length && !(iOEntity.inputs[num2].connectedTo.Get() != null) && !(iOEntity2.outputs[num3].connectedTo.Get() != null))
			{
				iOEntity2.outputs[num3].linePoints = list.ToArray();
				iOEntity2.SendNetworkUpdate();
			}
		}
	}

	public bool ValidateLine(List<Vector3> lineList)
	{
		if (lineList.Count < 2)
		{
			return false;
		}
		Vector3 a = lineList[0];
		float num = 0f;
		for (int i = 1; i < lineList.Count; i++)
		{
			Vector3 vector = lineList[i];
			num += Vector3.Distance(a, vector);
			if (num > maxWireLength)
			{
				return false;
			}
			a = vector;
		}
		return true;
	}
}
