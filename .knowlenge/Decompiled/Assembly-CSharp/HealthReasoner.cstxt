using Rust.Ai.HTN;
using Rust.Ai.HTN.Bear;
using Rust.Ai.HTN.Reasoning;

public class HealthReasoner : INpcReasoner
{
	public float TickFrequency { get; set; }

	public float LastTickTime { get; set; }

	public void Tick(IHTNAgent npc, float deltaTime, float time)
	{
		if (npc.AiDomain.NpcContext is BearContext bearContext)
		{
			float healthFraction = npc.healthFraction;
			if (healthFraction > 0.9f)
			{
				bearContext.SetFact(Facts.HealthState, HealthState.FullHealth);
			}
			else if (healthFraction > 0.6f)
			{
				bearContext.SetFact(Facts.HealthState, HealthState.HighHealth);
			}
			else if (healthFraction > 0.3f)
			{
				bearContext.SetFact(Facts.HealthState, HealthState.MediumHealth);
			}
			else if (healthFraction > 0f)
			{
				bearContext.SetFact(Facts.HealthState, HealthState.LowHealth);
			}
			else
			{
				bearContext.SetFact(Facts.HealthState, HealthState.Dead);
			}
		}
	}
}
