using FIMSpace.Basics;
using FIMSpace.GroundFitter;
using UnityEngine;

public class FGroundFitter_Demo_Patrolling : MonoBehaviour
{
	public Vector4 MovementRandomPointRange = new Vector4(25f, -25f, 25f, -25f);

	public float speed = 1f;

	private Transform bodyTransform;

	private float bodyRotateSpeed = 5f;

	private Animator animator;

	private FGroundFitter fitter;

	private float timer;

	private Vector3 targetPoint;

	private bool onDestination;

	private FAnimationClips clips;

	private void Start()
	{
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		fitter = ((Component)this).GetComponent<FGroundFitter>();
		animator = ((Component)this).GetComponentInChildren<Animator>();
		timer = Random.Range(1f, 5f);
		if (((Object)this).name.Contains("Fpider"))
		{
			bodyTransform = ((Component)this).transform.GetChild(0).Find("BSkeleton").GetChild(0)
				.Find("Body_Shield");
		}
		((Component)this).transform.rotation = Quaternion.Euler(0f, Random.Range(-180f, 180f), 0f);
		FGroundFitter fGroundFitter = fitter;
		Quaternion rotation = ((Component)this).transform.rotation;
		fGroundFitter.UpAxisRotation = ((Quaternion)(ref rotation)).eulerAngles.y;
		onDestination = true;
		((Component)this).transform.localScale = Vector3.one * Random.Range(0.5f, 1f);
		clips = new FAnimationClips(animator);
		clips.AddClip("Idle");
		clips.AddClip("Move");
	}

	private void Update()
	{
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0113: Unknown result type (might be due to invalid IL or missing references)
		if (onDestination)
		{
			timer -= Time.deltaTime;
			if (timer < 0f)
			{
				ChooseNewDestination();
			}
			bodyRotateSpeed = Mathf.Lerp(bodyRotateSpeed, 50f, Time.deltaTime * 2f);
		}
		else
		{
			RaycastHit lastRaycast = fitter.LastRaycast;
			if (Object.op_Implicit((Object)(object)((RaycastHit)(ref lastRaycast)).transform))
			{
				Transform transform = ((Component)this).transform;
				lastRaycast = fitter.LastRaycast;
				transform.position = ((RaycastHit)(ref lastRaycast)).point;
			}
			Transform transform2 = ((Component)this).transform;
			transform2.position += ((Component)this).transform.forward * speed * Time.deltaTime;
			if (Vector3.Distance(((Component)this).transform.position, targetPoint) < 2f)
			{
				ReachDestination();
			}
			Quaternion val = Quaternion.LookRotation(targetPoint - ((Component)this).transform.position);
			fitter.UpAxisRotation = Mathf.LerpAngle(fitter.UpAxisRotation, ((Quaternion)(ref val)).eulerAngles.y, Time.deltaTime * 7f);
			bodyRotateSpeed = Mathf.Lerp(bodyRotateSpeed, -250f, Time.deltaTime * 3f);
		}
		if (Object.op_Implicit((Object)(object)bodyTransform))
		{
			bodyTransform.Rotate(0f, 0f, Time.deltaTime * bodyRotateSpeed);
		}
	}

	private void ChooseNewDestination()
	{
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		targetPoint = new Vector3(Random.Range(MovementRandomPointRange.x, MovementRandomPointRange.y), 0f, Random.Range(MovementRandomPointRange.z, MovementRandomPointRange.w));
		RaycastHit val = default(RaycastHit);
		Physics.Raycast(targetPoint + Vector3.up * 1000f, Vector3.down, ref val, float.PositiveInfinity, LayerMask.op_Implicit(fitter.GroundLayerMask), (QueryTriggerInteraction)1);
		if (Object.op_Implicit((Object)(object)((RaycastHit)(ref val)).transform))
		{
			targetPoint = ((RaycastHit)(ref val)).point;
		}
		animator.CrossFadeInFixedTime(clips["Move"], 0.25f);
		onDestination = false;
	}

	private void ReachDestination()
	{
		timer = Random.Range(1f, 5f);
		onDestination = true;
		animator.CrossFadeInFixedTime(clips["Idle"], 0.15f);
	}
}
