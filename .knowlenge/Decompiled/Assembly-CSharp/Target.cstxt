using System;
using UnityEngine;

public class Target
{
	public WaterDynamics owner;

	public TargetDesc desc;

	private byte[] pixels;

	private byte[] clearTileTable;

	private SimpleList<ushort> clearTileList;

	private byte[] drawTileTable;

	private SimpleList<ushort> drawTileList;

	private const int MaxInteractionOffset = 100;

	private Vector3 prevCameraWorldPos;

	private Vector2i interactionOffset;

	public TargetDesc Desc => desc;

	public byte[] Pixels => pixels;

	public byte[] DrawTileTable => drawTileTable;

	public SimpleList<ushort> DrawTileList => drawTileList;

	public Target(WaterDynamics owner, Vector3 areaPosition, Vector3 areaSize)
	{
		this.owner = owner;
		desc = new TargetDesc(areaPosition, areaSize);
	}

	public void Destroy()
	{
		desc.Clear();
	}

	private Texture2D CreateDynamicTexture(int size)
	{
		return new Texture2D(size, size, TextureFormat.ARGB32, mipChain: false, linear: true)
		{
			filterMode = FilterMode.Bilinear,
			wrapMode = TextureWrapMode.Clamp
		};
	}

	private RenderTexture CreateRenderTexture(int size)
	{
		RenderTextureFormat format = (SystemInfoEx.SupportsRenderTextureFormat(RenderTextureFormat.RHalf) ? RenderTextureFormat.RHalf : RenderTextureFormat.RFloat);
		RenderTexture renderTexture = new RenderTexture(size, size, 0, format, RenderTextureReadWrite.Linear);
		renderTexture.filterMode = FilterMode.Bilinear;
		renderTexture.wrapMode = TextureWrapMode.Clamp;
		renderTexture.Create();
		return renderTexture;
	}

	public void ClearTiles()
	{
		for (int i = 0; i < clearTileList.Count; i++)
		{
			desc.TileOffsetToXYOffset(clearTileList[i], out var x, out var y, out var offset);
			int num = Mathf.Min(x + desc.tileSize, desc.size) - x;
			int num2 = Mathf.Min(y + desc.tileSize, desc.size) - y;
			if (owner.useNativePath)
			{
				RasterClearTile_Native(ref pixels[0], offset, desc.size, num, num2);
				continue;
			}
			for (int j = 0; j < num2; j++)
			{
				Array.Clear(pixels, offset, num);
				offset += desc.size;
			}
		}
	}

	public void ProcessTiles()
	{
		int tileX;
		int tileY;
		ushort tileIndex;
		for (int i = 0; i < clearTileList.Count; i++)
		{
			ushort num = desc.TileOffsetToTileXYIndex(clearTileList[i], out tileX, out tileY, out tileIndex);
			clearTileTable[num] = 0;
			clearTileList[i] = ushort.MaxValue;
		}
		clearTileList.Clear();
		for (int j = 0; j < drawTileList.Count; j++)
		{
			ushort num2 = desc.TileOffsetToTileXYIndex(drawTileList[j], out tileX, out tileY, out tileIndex);
			if (clearTileTable[tileIndex] == 0)
			{
				clearTileTable[tileIndex] = 1;
				clearTileList.Add(tileIndex);
			}
			drawTileTable[num2] = 0;
			drawTileList[j] = ushort.MaxValue;
		}
		drawTileList.Clear();
	}

	public void UpdateTiles()
	{
	}

	public void Prepare()
	{
	}

	public void Update()
	{
	}

	public void UpdateGlobalShaderProperties()
	{
	}
}
