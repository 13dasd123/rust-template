using Rust.Ai.HTN;
using Rust.Ai.HTN.Reasoning;
using Rust.Ai.HTN.ScientistJunkpile;

public class VulnerabilityReasoner : INpcReasoner
{
	private float _lastVulnerabilityDecrementTime;

	public float TickFrequency { get; set; }

	public float LastTickTime { get; set; }

	public void Tick(IHTNAgent npc, float deltaTime, float time)
	{
		if (!(npc.AiDomain.NpcContext is ScientistJunkpileContext scientistJunkpileContext))
		{
			return;
		}
		HTNPlayer hTNPlayer = npc as HTNPlayer;
		if (!(hTNPlayer == null))
		{
			float num = time - hTNPlayer.lastAttackedTime;
			if (num > 3f && scientistJunkpileContext.IsFact(Facts.Vulnerability) && time - _lastVulnerabilityDecrementTime > 2f)
			{
				_lastVulnerabilityDecrementTime = time;
				scientistJunkpileContext.IncrementFact(Facts.Vulnerability, -1);
			}
		}
	}
}
