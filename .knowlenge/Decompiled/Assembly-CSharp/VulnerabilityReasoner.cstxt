using Rust.Ai.HTN;
using Rust.Ai.HTN.Bear;
using Rust.Ai.HTN.Reasoning;

public class VulnerabilityReasoner : INpcReasoner
{
	private float _lastVulnerabilityDecrementTime;

	public float TickFrequency { get; set; }

	public float LastTickTime { get; set; }

	public void Tick(IHTNAgent npc, float deltaTime, float time)
	{
		if (npc.AiDomain.NpcContext is BearContext bearContext)
		{
			HTNAnimal hTNAnimal = npc as HTNAnimal;
			if (!(hTNAnimal == null) && time - hTNAnimal.lastAttackedTime > 3f && bearContext.IsFact(Facts.Vulnerability) && time - _lastVulnerabilityDecrementTime > 2f)
			{
				_lastVulnerabilityDecrementTime = time;
				bearContext.IncrementFact(Facts.Vulnerability, -1);
			}
		}
	}
}
