using System;
using System.Collections.Generic;
using System.IO;
using Facepunch.Utility;

public static class Binary
{
	private enum Section : byte
	{
		Info,
		Thread,
		Marks
	}

	private struct SectionBlock : IDisposable
	{
		private MemoryStream stream;

		private long startPos;

		public static SectionBlock New(Section section, MemoryStream stream)
		{
			SectionBlock result = default(SectionBlock);
			result.stream = stream;
			result.startPos = stream.Position;
			result.Begin(section);
			return result;
		}

		private void Begin(Section section)
		{
			Write(4276993775u);
			Write((byte)section);
			Write(ulong.MaxValue);
		}

		private void End()
		{
			long num = startPos + 5;
			long num2 = stream.Position - num - 8;
			byte[] buffer = stream.GetBuffer();
			for (byte b = 0; b < 8; b++)
			{
				buffer[num + b] = (byte)(num2 >> 56 - b * 8);
			}
			Write(3735928559u);
		}

		public void Write(string text)
		{
			Write((ushort)text.Length);
			for (int i = 0; i < text.Length; i++)
			{
				stream.WriteByte((byte)text[i]);
			}
		}

		public void Write(ulong value)
		{
			for (byte b = 0; b < 8; b++)
			{
				stream.WriteByte((byte)(value >> 56 - b * 8));
			}
		}

		public void Write(uint value)
		{
			for (byte b = 0; b < 4; b++)
			{
				stream.WriteByte((byte)(value >> 24 - b * 8));
			}
		}

		public void Write(ushort value)
		{
			stream.WriteByte((byte)(value >> 8));
			stream.WriteByte((byte)value);
		}

		public void Write(byte value)
		{
			stream.WriteByte(value);
		}

		void IDisposable.Dispose()
		{
			End();
		}
	}

	public unsafe static void Export(IList<ServerProfiler.Profile> profiles)
	{
		uint[] syncIndices = new uint[10];
		Preprocess(profiles, ref syncIndices);
		MemoryStream memoryStream = new MemoryStream(134217728);
		using (SectionBlock sectionBlock = SectionBlock.New(Section.Info, memoryStream))
		{
			string text = $"World Size: {0}, Seed: {0}, Players: {0}, Entities: {0}";
			sectionBlock.Write(text);
		}
		foreach (ServerProfiler.Profile profile in profiles)
		{
			using SectionBlock sectionBlock2 = SectionBlock.New(Section.Thread, memoryStream);
			sectionBlock2.Write((uint)profile.ThreadId);
			long num = 0L;
			using SectionBlock sectionBlock3 = SectionBlock.New(Section.Marks, memoryStream);
			for (uint num2 = 0u; num2 < profile.MarksCreated; num2++)
			{
				ServerProfiler.Mark mark = profile.Marks[num2];
				sectionBlock3.Write((byte)mark.Event);
				sectionBlock3.Write((ulong)mark.Timestamp);
				if (mark.Event == ServerProfiler.Mark.Type.Enter)
				{
					ServerProfiler.SerializeNameTo(profile.Methods[num++], memoryStream);
				}
			}
		}
		byte[] array = new byte[memoryStream.Position];
		Buffer.BlockCopy(memoryStream.GetBuffer(), 0, array, 0, (int)memoryStream.Position);
		File.WriteAllBytes("Perf.bin.gz", Compression.Compress(array));
	}
}
