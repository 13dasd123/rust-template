using FIMSpace.FProceduralAnimation;
using UnityEngine;

public class LAM_HeightStabilizer : LegsAnimatorControlModuleBase
{
	private LegsAnimator.Variable _powerV;

	private LegsAnimator.Variable _reactV;

	private LegsAnimator.Variable _thresV;

	private LegsAnimator.Variable _extrV;

	private Vector3 adjustement = Vector3.zero;

	private Vector3 sd_adjustement = Vector3.zero;

	public override bool AskForSpineBone => true;

	public override void OnInit(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		base.OnInit(helper);
		_powerV = helper.RequestVariable("Blend", 1f);
		_reactV = helper.RequestVariable("Reaction Speed", 0.7f);
		_thresV = helper.RequestVariable("Blend Y", 0.5f);
		_extrV = helper.RequestVariable("Extra Push Down Blend", 0.1f);
	}

	public override void OnReInitialize(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		adjustement = Vector3.zero;
		sd_adjustement = Vector3.zero;
	}

	public override void OnPreLateUpdate(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_013d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_0147: Unknown result type (might be due to invalid IL or missing references)
		Vector3 lastAppliedHipsFinalPosition = base.LA._LastAppliedHipsFinalPosition;
		Vector3 val = base.LA.ToRootLocalSpace(lastAppliedHipsFinalPosition);
		Vector3 lastKeyframeLocalPosition = base.LA.HipsSetup.LastKeyframeLocalPosition;
		val.y = 0f;
		lastKeyframeLocalPosition.y = 0f;
		Vector3 val2 = lastKeyframeLocalPosition - val;
		float magnitude = ((Vector3)(ref val2)).magnitude;
		val2.y -= magnitude * _thresV.GetFloat();
		val2 *= _powerV.GetFloat();
		val2.y -= Mathf.InverseLerp(base.LA.ScaleReferenceNoScale * 0.001f, base.LA.ScaleReferenceNoScale * (0.15f + _extrV.GetFloat() * 0.1f), magnitude) * _extrV.GetFloat() * 0.25f;
		val2 *= base.EffectBlend;
		adjustement = Vector3.SmoothDamp(adjustement, val2, ref sd_adjustement, Mathf.Lerp(0.4f, 0.005f, _reactV.GetFloat()), 1000000f, base.LA.DeltaTime);
		LegsAnimator lA = base.LA;
		lA._Hips_Modules_ExtraWOffset += base.LA.RootToWorldSpaceVec(adjustement);
	}
}
