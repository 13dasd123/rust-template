using Apex.Ai.HTN;
using Apex.Serialization;
using UnityEngine;
using UnityEngine.AI;

public class BearNavigateInDirectionOfLastKnownHeadingOfPrimaryEnemyPlayer : BaseNavigateTo
{
	[ApexSerialization]
	private bool DisableIsSearchingOnComplete = true;

	public static Vector3 GetDestination(BearContext context)
	{
		BaseNpcMemory.EnemyPlayerInfo primaryKnownEnemyPlayer = context.Memory.PrimaryKnownEnemyPlayer;
		if (primaryKnownEnemyPlayer.PlayerInfo.Player != null && NavMesh.FindClosestEdge(primaryKnownEnemyPlayer.LastKnownPosition + primaryKnownEnemyPlayer.LastKnownHeading * 2f, out var hit, context.Domain.NavAgent.areaMask))
		{
			Vector3 position = hit.position;
			context.Memory.LastClosestEdgeNormal = hit.normal;
			return position;
		}
		return context.Body.transform.position;
	}

	public static Vector3 GetContinuousDestinationFromBody(BearContext context)
	{
		if (context.Memory.LastClosestEdgeNormal.sqrMagnitude < 0.01f)
		{
			return context.Body.transform.position;
		}
		BaseNpcMemory.EnemyPlayerInfo primaryKnownEnemyPlayer = context.Memory.PrimaryKnownEnemyPlayer;
		if (primaryKnownEnemyPlayer.PlayerInfo.Player != null)
		{
			Vector3 vector = context.Body.estimatedVelocity.normalized;
			if (vector.sqrMagnitude < 0.01f)
			{
				vector = context.Body.estimatedVelocity.normalized;
			}
			if (vector.sqrMagnitude < 0.01f)
			{
				vector = primaryKnownEnemyPlayer.LastKnownHeading;
			}
			if (NavMesh.FindClosestEdge(context.Body.transform.position + vector * 2f, out var hit, context.Domain.NavAgent.areaMask))
			{
				float num = Vector3.Dot(context.Memory.LastClosestEdgeNormal, hit.normal);
				if (num > 0.9f)
				{
					return hit.position;
				}
				context.Memory.LastClosestEdgeNormal = hit.normal;
				return hit.position + hit.normal * 0.25f;
			}
		}
		return context.Body.transform.position;
	}

	public override OperatorStateType Tick(BearContext context, PrimitiveTaskSelector task)
	{
		OperatorStateType operatorStateType = base.Tick(context, task);
		if (operatorStateType == OperatorStateType.Running)
		{
			if (context.Domain.NavAgent.remainingDistance < context.Domain.NavAgent.stoppingDistance + 0.5f)
			{
				OnContinuePath(context, task);
			}
			return operatorStateType;
		}
		return operatorStateType;
	}

	private void OnContinuePath(BearContext context, PrimitiveTaskSelector task)
	{
		Vector3 continuousDestinationFromBody = GetContinuousDestinationFromBody(context);
		if (!((context.Body.transform.position - continuousDestinationFromBody).sqrMagnitude <= 0.2f))
		{
			OnPreStart(context);
			context.Domain.SetDestination(continuousDestinationFromBody);
			OnStart(context);
		}
	}

	protected override Vector3 _GetDestination(BearContext context)
	{
		return GetDestination(context);
	}

	protected override void OnPreStart(BearContext context)
	{
		context.Domain.NavAgent.stoppingDistance = 0.1f;
	}

	protected override void OnStart(BearContext context)
	{
		context.SetFact(Facts.IsSearching, value: true);
	}

	protected override void OnPathFailed(BearContext context)
	{
		context.SetFact(Facts.IsSearching, value: false);
		context.Domain.NavAgent.stoppingDistance = 1f;
	}

	protected override void OnPathComplete(BearContext context)
	{
		if (DisableIsSearchingOnComplete)
		{
			context.SetFact(Facts.IsSearching, value: false);
		}
		context.Domain.NavAgent.stoppingDistance = 1f;
	}
}
