using System;
using Unity.Collections;
using Unity.Jobs;
using Unity.Mathematics;
using UnityEngine;

[GenerateTestsForBurstCompatibility]
public struct CoarseQueryGrid : IDisposable
{
	public struct RefCountedSpatialArray : IDisposable
	{
		private NativeArray<byte> _array;

		public NativeArray<byte> RawArray => _array;

		public int Length => _array.Length;

		public static RefCountedSpatialArray Init(int length)
		{
			//IL_000d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0012: Unknown result type (might be due to invalid IL or missing references)
			RefCountedSpatialArray result = default(RefCountedSpatialArray);
			result._array = new NativeArray<byte>(length, (Allocator)4, (NativeArrayOptions)1);
			return result;
		}

		public void Add(int index)
		{
			Debug.Assert(_array[index] != byte.MaxValue);
			ref NativeArray<byte> array = ref _array;
			byte b = array[index];
			array[index] = (byte)(b + 1);
		}

		public void Remove(int index)
		{
			Debug.Assert(_array[index] != 0);
			ref NativeArray<byte> array = ref _array;
			byte b = array[index];
			array[index] = (byte)(b - 1);
		}

		public bool Get(int index)
		{
			return _array[index] > 0;
		}

		public void Dispose()
		{
			_array.Dispose();
		}
	}

	private const float StaticBoundsInflation = 0.1f;

	private readonly int _cellXZDimensionCount;

	private readonly Vector2 _gridCentre;

	private readonly float _yCutoff;

	private readonly int _cellSize;

	private readonly int _cellClampLimit;

	private NativeReference<bool> _result;

	private bool _hasDisposed;

	private NativeList<Bounds> _dynamicBounds;

	private RefCountedSpatialArray _upperStaticSpatialArray;

	private RefCountedSpatialArray _lowerStaticSpatialArray;

	public CoarseQueryGrid(int cellSize, int maxWorldSizeXZ, float yCutoff)
	{
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		_cellSize = cellSize;
		_cellXZDimensionCount = (int)((float)(maxWorldSizeXZ / cellSize) + 0.5f);
		_gridCentre = new Vector2((float)maxWorldSizeXZ * 0.5f, (float)maxWorldSizeXZ * 0.5f);
		_yCutoff = yCutoff;
		_hasDisposed = false;
		_result = new NativeReference<bool>(AllocatorHandle.op_Implicit((Allocator)4), (NativeArrayOptions)1);
		_upperStaticSpatialArray = RefCountedSpatialArray.Init(_cellXZDimensionCount * _cellXZDimensionCount);
		_lowerStaticSpatialArray = RefCountedSpatialArray.Init(_cellXZDimensionCount * _cellXZDimensionCount);
		_dynamicBounds = new NativeList<Bounds>(AllocatorHandle.op_Implicit((Allocator)4));
		_cellClampLimit = _upperStaticSpatialArray.Length - 1;
	}

	private bool TouchesUpperSpatial(Bounds bounds)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		return ((Bounds)(ref bounds)).max.y >= _yCutoff;
	}

	private bool TouchesUpperSpatial(Vector3 pos, float r)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		return pos.y + r >= _yCutoff;
	}

	private bool TouchesLowerSpatial(Bounds bounds)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		return ((Bounds)(ref bounds)).min.y <= _yCutoff;
	}

	private bool TouchesLowerSpatial(Vector3 pos, float r)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		return pos.y - r <= _yCutoff;
	}

	public void PrepareForDynamicPopulate(int dynamicCount)
	{
		if (!_hasDisposed)
		{
			_dynamicBounds.Clear();
			if (_dynamicBounds.Capacity < dynamicCount)
			{
				_dynamicBounds.SetCapacity(dynamicCount);
			}
		}
	}

	private bool CheckStateAdd()
	{
		if (_hasDisposed)
		{
			Debug.LogError((object)"Adding bounds to disposed CoarseQueryGrid");
		}
		return _hasDisposed;
	}

	public void AddDynamic(Bounds bounds)
	{
		if (!CheckStateAdd())
		{
			_dynamicBounds.Add(ref bounds);
		}
	}

	public void AddStatic(Bounds bounds)
	{
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		if (!CheckStateAdd())
		{
			((Bounds)(ref bounds)).Expand(0.1f);
			Vector2i min = WorldPosToStaticGrid(((Bounds)(ref bounds)).min);
			Vector2i max = WorldPosToStaticGrid(((Bounds)(ref bounds)).max);
			if (TouchesUpperSpatial(bounds))
			{
				AddStatic(min, max, _upperStaticSpatialArray);
			}
			if (TouchesLowerSpatial(bounds))
			{
				AddStatic(min, max, _lowerStaticSpatialArray);
			}
		}
	}

	private void AddStatic(Vector2i min, Vector2i max, RefCountedSpatialArray spatial)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		for (int i = min.x; i <= max.x; i++)
		{
			for (int j = min.y; j <= max.y; j++)
			{
				int index = GridToStaticIndex(new Vector2i(i, j));
				spatial.Add(index);
			}
		}
	}

	public void RemoveStatic(Bounds bounds)
	{
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		if (!_hasDisposed)
		{
			((Bounds)(ref bounds)).Expand(0.1f);
			Vector2i min = WorldPosToStaticGrid(((Bounds)(ref bounds)).min);
			Vector2i max = WorldPosToStaticGrid(((Bounds)(ref bounds)).max);
			if (TouchesUpperSpatial(bounds))
			{
				RemoveStatic(min, max, _upperStaticSpatialArray);
			}
			if (TouchesLowerSpatial(bounds))
			{
				RemoveStatic(min, max, _lowerStaticSpatialArray);
			}
		}
	}

	private void RemoveStatic(Vector2i min, Vector2i max, RefCountedSpatialArray spatial)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		for (int i = min.x; i <= max.x; i++)
		{
			for (int j = min.y; j <= max.y; j++)
			{
				int index = GridToStaticIndex(new Vector2i(i, j));
				spatial.Remove(index);
			}
		}
	}

	public bool CheckJob(Bounds checkBounds)
	{
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		if (_hasDisposed)
		{
			return true;
		}
		CoarseQueryGridBoundsJob coarseQueryGridBoundsJob = default(CoarseQueryGridBoundsJob);
		coarseQueryGridBoundsJob.Grid = this;
		coarseQueryGridBoundsJob.CheckBounds = checkBounds;
		coarseQueryGridBoundsJob.Result = _result;
		CoarseQueryGridBoundsJob coarseQueryGridBoundsJob2 = coarseQueryGridBoundsJob;
		IJobExtensions.RunByRef<CoarseQueryGridBoundsJob>(ref coarseQueryGridBoundsJob2);
		return _result.Value;
	}

	public bool Check(Bounds checkBounds)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		if (_hasDisposed)
		{
			return true;
		}
		Vector2i min = WorldPosToStaticGrid(((Bounds)(ref checkBounds)).min);
		Vector2i max = WorldPosToStaticGrid(((Bounds)(ref checkBounds)).max);
		if (TouchesUpperSpatial(checkBounds) && Check(min, max, _upperStaticSpatialArray))
		{
			return true;
		}
		if (TouchesLowerSpatial(checkBounds) && Check(min, max, _lowerStaticSpatialArray))
		{
			return true;
		}
		Enumerator<Bounds> enumerator = _dynamicBounds.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				Bounds current = enumerator.Current;
				if (((Bounds)(ref current)).Intersects(checkBounds))
				{
					return true;
				}
			}
		}
		finally
		{
			((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
		}
		return false;
	}

	private bool Check(Vector2i min, Vector2i max, RefCountedSpatialArray spatial)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		for (int i = min.x; i <= max.x; i++)
		{
			for (int j = min.y; j <= max.y; j++)
			{
				int index = GridToStaticIndex(new Vector2i(i, j));
				if (spatial.Get(index))
				{
					return true;
				}
			}
		}
		return false;
	}

	public bool CheckJob(Vector3 worldPosition, float radius)
	{
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		if (_hasDisposed)
		{
			return true;
		}
		CoarseQueryGridPosRadJob coarseQueryGridPosRadJob = default(CoarseQueryGridPosRadJob);
		coarseQueryGridPosRadJob.Grid = this;
		coarseQueryGridPosRadJob.CheckPos = worldPosition;
		coarseQueryGridPosRadJob.CheckRad = radius;
		coarseQueryGridPosRadJob.Result = _result;
		CoarseQueryGridPosRadJob coarseQueryGridPosRadJob2 = coarseQueryGridPosRadJob;
		IJobExtensions.RunByRef<CoarseQueryGridPosRadJob>(ref coarseQueryGridPosRadJob2);
		return _result.Value;
	}

	public bool Check(Vector3 worldPosition, float radius)
	{
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		if (_hasDisposed)
		{
			return true;
		}
		Vector2i min = WorldPosToStaticGrid(worldPosition - Vector3.one * radius);
		Vector2i max = WorldPosToStaticGrid(worldPosition + Vector3.one * radius);
		if (TouchesUpperSpatial(worldPosition, radius) && Check(min, max, _upperStaticSpatialArray))
		{
			return true;
		}
		if (TouchesLowerSpatial(worldPosition, radius) && Check(min, max, _lowerStaticSpatialArray))
		{
			return true;
		}
		float num = radius * radius;
		Enumerator<Bounds> enumerator = _dynamicBounds.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				Bounds current = enumerator.Current;
				if (Vector3.SqrMagnitude(((Bounds)(ref current)).ClosestPoint(worldPosition) - worldPosition) <= num)
				{
					return true;
				}
			}
		}
		finally
		{
			((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
		}
		return false;
	}

	public bool CheckJob(Vector3 start, Vector3 end, float radius)
	{
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		if (_hasDisposed)
		{
			return true;
		}
		Vector3 val = Vector3.one * radius;
		Vector3 val2 = Vector3.Min(start, end) - val;
		Vector3 val3 = Vector3.Max(start, end) + val;
		Bounds checkBounds = default(Bounds);
		((Bounds)(ref checkBounds))..ctor((val3 + val2) * 0.5f, val3 - val2);
		return CheckJob(checkBounds);
	}

	public bool Check(Vector3 start, Vector3 end, float radius)
	{
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		if (_hasDisposed)
		{
			return true;
		}
		Vector3 val = Vector3.one * radius;
		Vector3 val2 = Vector3.Min(start, end) - val;
		Vector3 val3 = Vector3.Max(start, end) + val;
		Bounds checkBounds = default(Bounds);
		((Bounds)(ref checkBounds))..ctor((val3 + val2) * 0.5f, val3 - val2);
		return Check(checkBounds);
	}

	private Vector2i WorldPosToStaticGrid(Vector3 worldPosition)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		return new Vector2i((int)((worldPosition.x + _gridCentre.x) / (float)_cellSize), (int)((worldPosition.z + _gridCentre.y) / (float)_cellSize));
	}

	private int GridToStaticIndex(Vector2i gridPosition)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		return math.clamp(gridPosition.x + gridPosition.y * _cellXZDimensionCount, 0, _cellClampLimit);
	}

	public void Dispose()
	{
		_hasDisposed = true;
		_result.Dispose();
		_dynamicBounds.Dispose();
		_upperStaticSpatialArray.Dispose();
		_lowerStaticSpatialArray.Dispose();
	}
}
