using System;
using Oxide.Core;
using Rust;
using UnityEngine;

public class LootContainer : StorageContainer
{
	public enum spawnType
	{
		GENERIC,
		PLAYER,
		TOWN,
		AIRDROP,
		CRASHSITE,
		ROADSIDE
	}

	[Serializable]
	public struct LootSpawnSlot
	{
		public LootSpawn definition;

		public int numberToSpawn;

		public float probability;
	}

	public bool destroyOnEmpty = true;

	public LootSpawn lootDefinition;

	public int maxDefinitionsToSpawn;

	public float minSecondsBetweenRefresh = 3600f;

	public float maxSecondsBetweenRefresh = 7200f;

	public bool initialLootSpawn = true;

	public float xpLootedScale = 1f;

	public float xpDestroyedScale = 1f;

	public bool BlockPlayerItemInput;

	public int scrapAmount;

	public spawnType SpawnType;

	private static ItemDefinition scrapDef;

	public LootSpawnSlot[] LootSpawnSlots;

	public bool shouldRefreshContents => minSecondsBetweenRefresh > 0f && maxSecondsBetweenRefresh > 0f;

	public override void ServerInit()
	{
		base.ServerInit();
		if (initialLootSpawn)
		{
			SpawnLoot();
		}
		if (BlockPlayerItemInput && !Rust.Application.isLoadingSave && inventory != null)
		{
			inventory.SetFlag(ItemContainer.Flag.NoItemInput, b: true);
		}
	}

	public override void PostServerLoad()
	{
		base.PostServerLoad();
		if (BlockPlayerItemInput && inventory != null)
		{
			inventory.SetFlag(ItemContainer.Flag.NoItemInput, b: true);
		}
	}

	public virtual void SpawnLoot()
	{
		if (inventory == null)
		{
			Debug.Log("CONTACT DEVELOPERS! LootContainer::PopulateLoot has null inventory!!!");
			return;
		}
		inventory.Clear();
		ItemManager.DoRemoves();
		if (Interface.CallHook("OnLootSpawn", this) == null)
		{
			PopulateLoot();
			if (shouldRefreshContents)
			{
				Invoke(SpawnLoot, UnityEngine.Random.Range(minSecondsBetweenRefresh, maxSecondsBetweenRefresh));
			}
		}
	}

	public int ScoreForRarity(Rarity rarity)
	{
		return rarity switch
		{
			Rarity.Common => 1, 
			Rarity.Uncommon => 2, 
			Rarity.Rare => 3, 
			Rarity.VeryRare => 4, 
			_ => 5000, 
		};
	}

	public virtual void PopulateLoot()
	{
		if (LootSpawnSlots.Length > 0)
		{
			LootSpawnSlot[] lootSpawnSlots = LootSpawnSlots;
			for (int i = 0; i < lootSpawnSlots.Length; i++)
			{
				LootSpawnSlot lootSpawnSlot = lootSpawnSlots[i];
				for (int j = 0; j < lootSpawnSlot.numberToSpawn; j++)
				{
					float num = UnityEngine.Random.Range(0f, 1f);
					if (num <= lootSpawnSlot.probability)
					{
						lootSpawnSlot.definition.SpawnIntoContainer(inventory);
					}
				}
			}
		}
		else if (lootDefinition != null)
		{
			for (int k = 0; k < maxDefinitionsToSpawn; k++)
			{
				lootDefinition.SpawnIntoContainer(inventory);
			}
		}
		if (SpawnType == spawnType.ROADSIDE || SpawnType == spawnType.TOWN)
		{
			foreach (Item item in inventory.itemList)
			{
				if (item.hasCondition)
				{
					item.condition = UnityEngine.Random.Range(item.info.condition.foundCondition.fractionMin, item.info.condition.foundCondition.fractionMax) * item.info.condition.max;
				}
			}
		}
		GenerateScrap();
	}

	public void GenerateScrap()
	{
		if (scrapAmount <= 0)
		{
			return;
		}
		if (scrapDef == null)
		{
			scrapDef = ItemManager.FindItemDefinition("scrap");
		}
		int num = scrapAmount;
		if (num > 0)
		{
			Item item = ItemManager.Create(scrapDef, num, 0uL);
			if (!item.MoveToContainer(inventory))
			{
				item.Drop(base.transform.position, Vector3.zero);
			}
		}
	}

	public override void PlayerStoppedLooting(BasePlayer player)
	{
		base.PlayerStoppedLooting(player);
		if (destroyOnEmpty && (inventory == null || inventory.itemList == null || inventory.itemList.Count == 0))
		{
			Kill(DestroyMode.Gib);
		}
	}

	public void RemoveMe()
	{
		Kill(DestroyMode.Gib);
	}

	public override bool ShouldDropItemsIndividually()
	{
		return true;
	}

	public override bool SupportsPooling()
	{
		return true;
	}
}
