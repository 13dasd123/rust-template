using FIMSpace.FProceduralAnimation;
using UnityEngine;

public class LAM_AutoGroundAlignBodyMatrix : LegsAnimatorControlModuleBase
{
	private Vector3 averageNormal;

	private Vector3 animatedAverageNormal;

	private Quaternion lastOrientation;

	private LegsAnimator.Variable _blendV;

	private LegsAnimator.Variable _rotateV;

	private LegsAnimator.Variable _alignSpdV;

	private LegsAnimator.Variable _alignDownV;

	private LegsAnimator.Variable _AxisBlendV;

	private float _blend = 1f;

	public override bool AskForSpineBone => true;

	public override void OnInit(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		animatedAverageNormal = base.LA.Up;
		lastOrientation = base.LA.BaseTransform.rotation;
		_blendV = helper.RequestVariable("Matrix Blend", 1f);
		_rotateV = helper.RequestVariable("Rotate Hips", 1f);
		_alignSpdV = helper.RequestVariable("Aligning Speed", 0.7f);
		_alignDownV = helper.RequestVariable("Spine Restore", 0.5f);
		_AxisBlendV = helper.RequestVariable("Rotation Axis Blend", Vector3.one);
	}

	public override void Leg_LatePreRaycastingUpdate(LegsAnimator.LegsAnimatorCustomModuleHelper helper, LegsAnimator.Leg leg)
	{
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		_blend = base.EffectBlend;
		if (leg.RaycastHitted)
		{
			Vector3 val = averageNormal;
			RaycastHit lastGroundHit = leg.LastGroundHit;
			averageNormal = val + ((RaycastHit)(ref lastGroundHit)).normal;
		}
	}

	public override void OnUpdate(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		Quaternion val = lastOrientation;
		float num = _blend * _blendV.GetFloat();
		if (num < 1f)
		{
			val = Quaternion.SlerpUnclamped(Quaternion.identity, lastOrientation, num);
		}
		Matrix4x4 mx = Matrix4x4.TRS(base.LA.BaseTransform.position, val * base.LA.BaseTransform.rotation, base.LA.BaseTransform.lossyScale);
		base.LA.User_OverwriteCastMatrix(mx);
	}

	public override void OnAfterAnimatorCaptureUpdate(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_015b: Unknown result type (might be due to invalid IL or missing references)
		//IL_016c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_010f: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0134: Unknown result type (might be due to invalid IL or missing references)
		//IL_0140: Unknown result type (might be due to invalid IL or missing references)
		float num = _blend * _rotateV.GetFloat();
		if (!(num < 0.001f))
		{
			Vector3 eulerAngles = ((Quaternion)(ref lastOrientation)).eulerAngles;
			eulerAngles.x = LAM_DirectionalMovement.FormatAngleToPM180(eulerAngles.x);
			eulerAngles.y = LAM_DirectionalMovement.FormatAngleToPM180(eulerAngles.y);
			eulerAngles.z = LAM_DirectionalMovement.FormatAngleToPM180(eulerAngles.z);
			Quaternion identity = Quaternion.identity;
			identity *= Quaternion.AngleAxis(eulerAngles.x * num, Vector3.right);
			identity *= Quaternion.AngleAxis(eulerAngles.y * num, Vector3.up);
			identity *= Quaternion.AngleAxis(eulerAngles.z * num, Vector3.forward);
			LegsAnimator lA = base.LA;
			lA._LastHipsRotationOffsetOutsideInfo *= identity;
			if (Object.op_Implicit((Object)(object)base.LA.SpineBone))
			{
				Quaternion rotation = base.LA.SpineBone.rotation;
				base.LA.HipsSetup.bone.rotation = identity * base.LA.HipsSetup.bone.rotation;
				base.LA.SpineBone.rotation = Quaternion.Slerp(base.LA.SpineBone.rotation, rotation, _alignDownV.GetFloat());
			}
			else
			{
				base.LA.HipsSetup.bone.rotation = identity * base.LA.HipsSetup.bone.rotation;
			}
		}
	}

	public override void OnLateUpdatePreApply(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_010f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0114: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00db: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0104: Unknown result type (might be due to invalid IL or missing references)
		//IL_0109: Unknown result type (might be due to invalid IL or missing references)
		if (averageNormal == Vector3.zero)
		{
			averageNormal = base.LA.Up;
		}
		else
		{
			((Vector3)(ref averageNormal)).Normalize();
		}
		if (_alignSpdV.GetFloat() < 0.999f)
		{
			float num = Mathf.LerpUnclamped(5f, 20f, _alignSpdV.GetFloat());
			animatedAverageNormal = Vector3.Slerp(animatedAverageNormal, averageNormal, base.LA.DeltaTime * num);
		}
		else
		{
			animatedAverageNormal = averageNormal;
		}
		lastOrientation = Quaternion.FromToRotation(Vector3.up, animatedAverageNormal);
		Vector3 vector = _AxisBlendV.GetVector3();
		if (vector != Vector3.one)
		{
			Vector3 eulerAngles = ((Quaternion)(ref lastOrientation)).eulerAngles;
			vector = helper.Parent.BaseTransform.TransformDirection(vector);
			lastOrientation = Quaternion.Euler(eulerAngles.x * vector.x, eulerAngles.y * vector.y, eulerAngles.z * vector.z);
		}
		averageNormal = Vector3.zero;
	}
}
