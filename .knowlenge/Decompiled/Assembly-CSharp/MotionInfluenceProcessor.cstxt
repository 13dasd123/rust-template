using System;
using UnityEngine;

[Serializable]
public class MotionInfluenceProcessor
{
	public bool AdvancedInfluence;

	public Vector3 AxisMotionInfluence = Vector3.one;

	public Vector3 AxisMotionInfluenceBackwards = Vector3.one;

	private float MultiplyBlend = 1f;

	[NonSerialized]
	public float ExtraBoost = 1f;

	private float _sd_mb;

	private Transform root;

	public Vector3 OutputInfluenceOffset { get; private set; }

	public Vector3 previousPosition { get; private set; }

	public Vector3 rootOffset { get; private set; }

	public Vector3 localOffset { get; private set; }

	public void TransitionBlend(float target, float duration, float delta)
	{
		MultiplyBlend = Mathf.SmoothDamp(MultiplyBlend, target, ref _sd_mb, duration, 10000000f, delta);
	}

	public void Reset()
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		previousPosition = root.position;
		localOffset = Vector3.zero;
		rootOffset = Vector3.zero;
	}

	public void Init(Transform root)
	{
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		this.root = root;
		previousPosition = root.position;
		localOffset = Vector3.zero;
	}

	public void Update()
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		rootOffset = root.position - previousPosition;
		previousPosition = root.position;
		localOffset = root.InverseTransformVector(rootOffset);
		float num = MultiplyBlend * ExtraBoost;
		if (num != 1f)
		{
			localOffset *= num;
		}
		Motion_MotionInfluence();
	}

	public void OverrideOffset(Vector3 offset)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		rootOffset = offset;
		localOffset = root.InverseTransformVector(rootOffset);
		Motion_MotionInfluence();
	}

	private void Motion_MotionInfluence()
	{
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		if (!AdvancedInfluence)
		{
			if (AxisMotionInfluence != Vector3.one)
			{
				OutputInfluenceOffset = root.TransformVector(ScaleMotionInfluence(localOffset, AxisMotionInfluence));
			}
		}
		else
		{
			OutputInfluenceOffset = root.TransformVector(ScaleMotionInfluence(localOffset, AxisMotionInfluence, AxisMotionInfluenceBackwards));
		}
	}

	private Vector3 ScaleMotionInfluence(Vector3 toScale, Vector3 influenceMul)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		return new Vector3(toScale.x * (1f - influenceMul.x), toScale.y * (1f - influenceMul.y), toScale.z * (1f - influenceMul.z));
	}

	private Vector3 ScaleMotionInfluence(Vector3 toScale, Vector3 influenceMulForw, Vector3 influenceMulBack)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		if (toScale.x > 0f)
		{
			toScale.x *= 1f - influenceMulForw.x;
		}
		else
		{
			toScale.x *= 1f - influenceMulBack.x;
		}
		if (toScale.y > 0f)
		{
			toScale.y *= 1f - influenceMulForw.y;
		}
		else
		{
			toScale.y *= 1f - influenceMulBack.y;
		}
		if (toScale.z > 0f)
		{
			toScale.z *= 1f - influenceMulForw.z;
		}
		else
		{
			toScale.z *= 1f - influenceMulBack.z;
		}
		return toScale;
	}

	public Vector3 CalculateInversedInfluence()
	{
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		if (!AdvancedInfluence)
		{
			if (AxisMotionInfluence != Vector3.one)
			{
				return root.TransformVector(ScaleMotionInfluenceInverse(localOffset, AxisMotionInfluence));
			}
			return rootOffset;
		}
		return root.TransformVector(ScaleMotionInfluenceInverse(localOffset, AxisMotionInfluence, AxisMotionInfluenceBackwards));
	}

	private Vector3 ScaleMotionInfluenceInverse(Vector3 toScale, Vector3 influenceMul)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		return new Vector3(toScale.x * influenceMul.x, toScale.y * influenceMul.y, toScale.z * influenceMul.z);
	}

	private Vector3 ScaleMotionInfluenceInverse(Vector3 toScale, Vector3 influenceMulForw, Vector3 influenceMulBack)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		if (toScale.x > 0f)
		{
			toScale.x *= influenceMulForw.x;
		}
		else
		{
			toScale.x *= influenceMulBack.x;
		}
		if (toScale.y > 0f)
		{
			toScale.y *= influenceMulForw.y;
		}
		else
		{
			toScale.y *= influenceMulBack.y;
		}
		if (toScale.z > 0f)
		{
			toScale.z *= influenceMulForw.z;
		}
		else
		{
			toScale.z *= influenceMulBack.z;
		}
		return toScale;
	}
}
