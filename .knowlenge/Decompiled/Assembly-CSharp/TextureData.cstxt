using UnityEngine;

public struct TextureData
{
	public int width;

	public int height;

	public Color32[] colors;

	private const float float2byte = 255f;

	private const float byte2float = 0.003921569f;

	private const float float2short = 32766f;

	private const float short2float = 3.051944E-05f;

	public TextureData(Texture2D tex)
	{
		width = tex.width;
		height = tex.height;
		colors = tex.GetPixels32();
	}

	public Color32 GetColor(int x, int y)
	{
		return colors[y * width + x];
	}

	public int GetShort(int x, int y)
	{
		return DecodeShort(GetColor(x, y));
	}

	public int GetInt(int x, int y)
	{
		return DecodeInt(GetColor(x, y));
	}

	public float GetFloat(int x, int y)
	{
		return DecodeFloat(GetColor(x, y));
	}

	public float GetHalf(int x, int y)
	{
		return Short2Float(GetShort(x, y));
	}

	public Vector4 GetVector(int x, int y)
	{
		return DecodeVector(GetColor(x, y));
	}

	public Vector3 GetNormal(int x, int y)
	{
		return DecodeNormal(GetColor(x, y));
	}

	public Color32 GetInterpolatedColor(float x, float y)
	{
		float num = x * (float)(width - 1);
		float num2 = y * (float)(height - 1);
		int num3 = Mathf.Clamp((int)num, 1, width - 2);
		int num4 = Mathf.Clamp((int)num2, 1, height - 2);
		int x2 = Mathf.Min(num3 + 1, width - 2);
		int y2 = Mathf.Min(num4 + 1, height - 2);
		Color a = GetColor(num3, num4);
		Color b = GetColor(x2, num4);
		Color a2 = GetColor(num3, y2);
		Color b2 = GetColor(x2, y2);
		float t = num - (float)num3;
		float t2 = num2 - (float)num4;
		Color a3 = Color.Lerp(a, b, t);
		Color b3 = Color.Lerp(a2, b2, t);
		return Color.Lerp(a3, b3, t2);
	}

	public int GetInterpolatedInt(float x, float y)
	{
		float f = x * (float)(width - 1);
		float f2 = y * (float)(height - 1);
		int x2 = Mathf.Clamp(Mathf.RoundToInt(f), 1, width - 2);
		int y2 = Mathf.Clamp(Mathf.RoundToInt(f2), 1, height - 2);
		return GetInt(x2, y2);
	}

	public int GetInterpolatedShort(float x, float y)
	{
		float f = x * (float)(width - 1);
		float f2 = y * (float)(height - 1);
		int x2 = Mathf.Clamp(Mathf.RoundToInt(f), 1, width - 2);
		int y2 = Mathf.Clamp(Mathf.RoundToInt(f2), 1, height - 2);
		return GetShort(x2, y2);
	}

	public float GetInterpolatedFloat(float x, float y)
	{
		float num = x * (float)(width - 1);
		float num2 = y * (float)(height - 1);
		int num3 = Mathf.Clamp((int)num, 1, width - 2);
		int num4 = Mathf.Clamp((int)num2, 1, height - 2);
		int x2 = Mathf.Min(num3 + 1, width - 2);
		int y2 = Mathf.Min(num4 + 1, height - 2);
		float @float = GetFloat(num3, num4);
		float float2 = GetFloat(x2, num4);
		float float3 = GetFloat(num3, y2);
		float float4 = GetFloat(x2, y2);
		float t = num - (float)num3;
		float t2 = num2 - (float)num4;
		float a = Mathf.Lerp(@float, float2, t);
		float b = Mathf.Lerp(float3, float4, t);
		return Mathf.Lerp(a, b, t2);
	}

	public float GetInterpolatedHalf(float x, float y)
	{
		float num = x * (float)(width - 1);
		float num2 = y * (float)(height - 1);
		int num3 = Mathf.Clamp((int)num, 1, width - 2);
		int num4 = Mathf.Clamp((int)num2, 1, height - 2);
		int x2 = Mathf.Min(num3 + 1, width - 2);
		int y2 = Mathf.Min(num4 + 1, height - 2);
		float half = GetHalf(num3, num4);
		float half2 = GetHalf(x2, num4);
		float half3 = GetHalf(num3, y2);
		float half4 = GetHalf(x2, y2);
		float t = num - (float)num3;
		float t2 = num2 - (float)num4;
		float a = Mathf.Lerp(half, half2, t);
		float b = Mathf.Lerp(half3, half4, t);
		return Mathf.Lerp(a, b, t2);
	}

	public Vector4 GetInterpolatedVector(float x, float y)
	{
		float num = x * (float)(width - 1);
		float num2 = y * (float)(height - 1);
		int num3 = Mathf.Clamp((int)num, 1, width - 2);
		int num4 = Mathf.Clamp((int)num2, 1, height - 2);
		int x2 = Mathf.Min(num3 + 1, width - 2);
		int y2 = Mathf.Min(num4 + 1, height - 2);
		Vector4 vector = GetVector(num3, num4);
		Vector4 vector2 = GetVector(x2, num4);
		Vector4 vector3 = GetVector(num3, y2);
		Vector4 vector4 = GetVector(x2, y2);
		float t = num - (float)num3;
		float t2 = num2 - (float)num4;
		Vector4 a = Vector4.Lerp(vector, vector2, t);
		Vector4 b = Vector4.Lerp(vector3, vector4, t);
		return Vector4.Lerp(a, b, t2);
	}

	public Vector3 GetInterpolatedNormal(float x, float y)
	{
		float num = x * (float)(width - 1);
		float num2 = y * (float)(height - 1);
		int num3 = Mathf.Clamp((int)num, 1, width - 2);
		int num4 = Mathf.Clamp((int)num2, 1, height - 2);
		int x2 = Mathf.Min(num3 + 1, width - 2);
		int y2 = Mathf.Min(num4 + 1, height - 2);
		Vector3 normal = GetNormal(num3, num4);
		Vector3 normal2 = GetNormal(x2, num4);
		Vector3 normal3 = GetNormal(num3, y2);
		Vector3 normal4 = GetNormal(x2, y2);
		float t = num - (float)num3;
		float t2 = num2 - (float)num4;
		Vector3 a = Vector3.Lerp(normal, normal2, t);
		Vector3 b = Vector3.Lerp(normal3, normal4, t);
		return Vector3.Lerp(a, b, t2);
	}

	public static byte Float2Byte(float f)
	{
		return (byte)(f * 255f + 0.5f);
	}

	public static float Byte2Float(int b)
	{
		return (float)b * 0.003921569f;
	}

	public static short Float2Short(float f)
	{
		return (short)(f * 32766f + 0.5f);
	}

	public static float Short2Float(int b)
	{
		return (float)b * 3.051944E-05f;
	}

	public static Color32 EncodeFloat(float f)
	{
		Union32 union = default(Union32);
		union.f = f;
		return new Color32(union.b1, union.b2, union.b3, union.b4);
	}

	public static float DecodeFloat(Color32 c)
	{
		Union32 union = default(Union32);
		union.b1 = c.r;
		union.b2 = c.g;
		union.b3 = c.b;
		union.b4 = c.a;
		return union.f;
	}

	public static Color32 EncodeInt(int i)
	{
		Union32 union = default(Union32);
		union.i = i;
		return new Color32(union.b1, union.b2, union.b3, union.b4);
	}

	public static int DecodeInt(Color32 c)
	{
		Union32 union = default(Union32);
		union.b1 = c.r;
		union.b2 = c.g;
		union.b3 = c.b;
		union.b4 = c.a;
		return union.i;
	}

	public static Color32 EncodeShort(short i)
	{
		Union16 union = default(Union16);
		union.i = i;
		return new Color32(union.b1, 0, union.b2, 1);
	}

	public static short DecodeShort(Color32 c)
	{
		Union16 union = default(Union16);
		union.b1 = c.r;
		union.b2 = c.b;
		return union.i;
	}

	public static Color EncodeNormal(Vector3 n)
	{
		n = (n + Vector3.one) * 0.5f;
		return new Color(n.z, n.z, n.z, n.x);
	}

	public static Vector3 DecodeNormal(Color c)
	{
		float num = c.a * 2f - 1f;
		float num2 = c.g * 2f - 1f;
		float y = Mathf.Sqrt(1f - Mathf.Clamp01(num * num + num2 * num2));
		return new Vector3(num, y, num2);
	}

	public static Color32 EncodeVector(Vector4 v)
	{
		return new Color32(Float2Byte(v.x), Float2Byte(v.y), Float2Byte(v.z), Float2Byte(v.w));
	}

	public static Vector4 DecodeVector(Color32 c)
	{
		return new Vector4(Byte2Float(c.r), Byte2Float(c.g), Byte2Float(c.b), Byte2Float(c.a));
	}
}
