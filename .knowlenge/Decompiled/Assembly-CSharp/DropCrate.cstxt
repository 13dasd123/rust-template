using UnityEngine;

public class DropCrate : BasicAIState
{
	private float nextDropTime;

	public DropCrate()
		: base(AIState.DropCrate)
	{
	}

	public override bool CanInterrupt()
	{
		if (base.CanInterrupt())
		{
			return !CanDrop();
		}
		return false;
	}

	public bool CanDrop()
	{
		if (Time.time > nextDropTime)
		{
			return (brain.GetBrainBaseEntity() as CH47HelicopterAIController).CanDropCrate();
		}
		return false;
	}

	public override float GetWeight()
	{
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		if (!CanDrop())
		{
			return 0f;
		}
		if (IsInState())
		{
			return 10000f;
		}
		if (brain.CurrentState != null && brain.CurrentState.StateType == AIState.Orbit && brain.CurrentState.TimeInState > 60f)
		{
			CH47DropZone closest = CH47DropZone.GetClosest(brain.mainInterestPoint);
			if (Object.op_Implicit((Object)(object)closest) && Vector3Ex.Distance2D(((Component)closest).transform.position, brain.mainInterestPoint) < 200f)
			{
				CH47AIBrain component = ((Component)brain).GetComponent<CH47AIBrain>();
				if ((Object)(object)component != (Object)null)
				{
					float num = Mathf.InverseLerp(300f, 600f, component.Age);
					return 1000f * num;
				}
			}
		}
		return 0f;
	}

	public override void StateEnter(BaseAIBrain brain, BaseEntity entity)
	{
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		CH47HelicopterAIController obj = entity as CH47HelicopterAIController;
		obj.SetDropDoorOpen(open: true);
		obj.EnableFacingOverride(enabled: false);
		CH47DropZone closest = CH47DropZone.GetClosest(((Component)obj).transform.position);
		if ((Object)(object)closest == (Object)null)
		{
			nextDropTime = Time.time + 60f;
		}
		brain.mainInterestPoint = ((Component)closest).transform.position;
		obj.SetMoveTarget(brain.mainInterestPoint);
		base.StateEnter(brain, entity);
	}

	public override StateStatus StateThink(float delta, BaseAIBrain brain, BaseEntity entity)
	{
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		base.StateThink(delta, brain, entity);
		CH47HelicopterAIController cH47HelicopterAIController = entity as CH47HelicopterAIController;
		if (CanDrop() && Vector3Ex.Distance2D(brain.mainInterestPoint, ((Component)cH47HelicopterAIController).transform.position) < 5f)
		{
			Vector3 velocity = cH47HelicopterAIController.rigidBody.velocity;
			if (((Vector3)(ref velocity)).magnitude < 5f)
			{
				cH47HelicopterAIController.DropCrate();
				nextDropTime = Time.time + 120f;
			}
		}
		return StateStatus.Running;
	}

	public override void StateLeave(BaseAIBrain brain, BaseEntity entity)
	{
		(entity as CH47HelicopterAIController).SetDropDoorOpen(open: false);
		nextDropTime = Time.time + 60f;
		base.StateLeave(brain, entity);
	}
}
