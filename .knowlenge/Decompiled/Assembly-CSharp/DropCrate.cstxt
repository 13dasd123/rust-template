using UnityEngine;

public class DropCrate : BasicAIState
{
	private float nextDropTime;

	public override bool CanInterrupt()
	{
		return base.CanInterrupt() && !CanDrop();
	}

	public bool CanDrop()
	{
		return Time.time > nextDropTime && brain.GetEntity().CanDropCrate();
	}

	public override float GetWeight()
	{
		if (!CanDrop())
		{
			return 0f;
		}
		CH47DropZone closest = CH47DropZone.GetClosest(brain.GetEntity().transform.position);
		if (closest == null || Vector3.Distance(closest.transform.position, brain.mainInterestPoint) > 200f)
		{
			return 0f;
		}
		if (IsInState())
		{
			return 10000f;
		}
		if (brain._currentState == 5 && brain.GetCurrentState().TimeInState() > 60f)
		{
			return 1000f;
		}
		return 0f;
	}

	public override void StateEnter()
	{
		brain.GetEntity().SetDropDoorOpen(open: true);
		brain.GetEntity().EnableFacingOverride(enabled: false);
		CH47DropZone closest = CH47DropZone.GetClosest(brain.GetEntity().transform.position);
		if (closest == null)
		{
			nextDropTime = Time.time + 60f;
		}
		brain.mainInterestPoint = closest.transform.position;
		brain.GetEntity().SetMoveTarget(brain.mainInterestPoint);
		base.StateEnter();
	}

	public override void StateThink(float delta)
	{
		base.StateThink(delta);
		if (CanDrop() && Vector3Ex.Distance2D(brain.mainInterestPoint, brain.GetEntity().transform.position) < 5f && brain.GetEntity().rigidBody.velocity.magnitude < 5f)
		{
			brain.GetEntity().DropCrate();
			nextDropTime = Time.time + 120f;
		}
	}

	public override void StateLeave()
	{
		brain.GetEntity().SetDropDoorOpen(open: false);
		nextDropTime = Time.time + 60f;
		base.StateLeave();
	}
}
