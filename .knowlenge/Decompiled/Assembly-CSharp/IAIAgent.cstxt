using Rust.Ai;
using UnityEngine;
using UnityEngine.AI;

public interface IAIAgent
{
	BaseNpc.AiStatistics GetStats { get; }

	NavMeshAgent GetNavAgent { get; }

	Vector3 Destination { get; set; }

	bool IsStopped { get; set; }

	bool AutoBraking { get; set; }

	bool HasPath { get; }

	float TimeAtDestination { get; }

	BaseEntity FoodTarget { get; set; }

	float GetAttackRange { get; }

	Vector3 GetAttackOffset { get; }

	BaseEntity AttackTarget { get; set; }

	float AttackTargetVisibleFor { get; }

	Memory.SeenInfo AttackTargetMemory { get; set; }

	BaseCombatEntity CombatTarget { get; }

	Vector3 AttackPosition { get; }

	Vector3 CrouchedAttackPosition { get; }

	Vector3 CurrentAimAngles { get; }

	Vector3 GuardPosition { get; set; }

	BaseCombatEntity Entity { get; }

	float GetAttackCost { get; }

	float GetStamina { get; }

	float GetEnergy { get; }

	float GetSleep { get; }

	float GetStuckDuration { get; }

	float GetLastStuckTime { get; }

	float currentBehaviorDuration { get; }

	BaseNpc.Behaviour CurrentBehaviour { get; set; }

	int AgentTypeIndex { get; set; }

	bool IsNavRunning();

	void Pause();

	void Resume();

	void UpdateDestination(Vector3 newDestination);

	void UpdateDestination(Transform tx);

	void StopMoving();

	bool WantsToEat(BaseEntity eatable);

	void Eat();

	void StartAttack();

	bool AttackReady();

	float GetWantsToAttack(BaseEntity target);

	float FearLevel(BaseEntity ent);

	bool BusyTimerActive();

	void SetBusyFor(float dur);
}
