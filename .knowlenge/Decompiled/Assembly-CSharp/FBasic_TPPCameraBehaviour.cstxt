using FIMSpace.Basics;
using UnityEngine;

[DefaultExecutionOrder(1000)]
public class FBasic_TPPCameraBehaviour : MonoBehaviour
{
	[Header("Transform to be followed by camera")]
	public Transform ToFollow;

	[Header("Offset in position in reference to target transform (focus point)")]
	public Vector3 FollowingOffset = new Vector3(0f, 1.5f, 0f);

	[Header("Offset in position in reference to camera orientation")]
	public Vector3 FollowingOffsetDirection = new Vector3(0f, 0f, 0f);

	[Header("Clamp values for zoom of camera")]
	public Vector2 DistanceRanges = new Vector2(5f, 10f);

	private float targetDistance;

	private float animatedDistance;

	public Vector2 RotationRanges = new Vector2(-5f, 60f);

	private Vector2 targetSphericRotation = new Vector2(0f, 0f);

	private Vector2 animatedSphericRotation = new Vector2(0f, 0f);

	[Space(10f)]
	[Tooltip("Sensitivity value for rotating camera around following object")]
	public float RotationSensitivity = 10f;

	[Range(0.1f, 1f)]
	[Header("If you want camera rotation to be smooth")]
	public float RotationSpeed = 1f;

	[Header("If you want camera to follow target with some smoothness")]
	[Range(0f, 1f)]
	public float HardFollowValue = 1f;

	[Header("If you want to hold cursor (cursor switch on TAB)")]
	public bool LockCursor = true;

	private bool rotateCamera = true;

	private RaycastHit sightObstacleHit;

	[Header("Layer mask to check obstacles in sight ray")]
	public LayerMask SightLayerMask;

	private Vector3 targetPosition;

	[Header("How far forward raycast should check collision for camera")]
	public float CollisionOffset = 1f;

	public EFUpdateClock UpdateClock;

	private void Start()
	{
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		targetDistance = (DistanceRanges.x + DistanceRanges.y) / 2f;
		animatedDistance = DistanceRanges.y;
		targetSphericRotation = new Vector2(((Component)this).transform.eulerAngles.y, ((Component)this).transform.eulerAngles.x);
		animatedSphericRotation = targetSphericRotation;
	}

	private void UpdateMethods()
	{
		InputCalculations();
		ZoomCalculations();
		FollowCalculations();
		RaycastCalculations();
		SwitchCalculations();
	}

	private void LateUpdate()
	{
		if (UpdateClock == EFUpdateClock.LateUpdate)
		{
			UpdateMethods();
		}
	}

	private void Update()
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Invalid comparison between Unknown and I4
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Invalid comparison between Unknown and I4
		if (Input.GetMouseButtonDown(1) && (int)Cursor.lockState != 1)
		{
			HelperSwitchCursor();
		}
		if ((Input.GetKey((KeyCode)27) || Input.GetKeyDown((KeyCode)9)) && (int)Cursor.lockState == 1)
		{
			HelperSwitchCursor();
		}
		if (UpdateClock == EFUpdateClock.Update)
		{
			UpdateMethods();
		}
	}

	private void FixedUpdate()
	{
		if (UpdateClock == EFUpdateClock.FixedUpdate)
		{
			UpdateMethods();
		}
	}

	private void InputCalculations()
	{
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Invalid comparison between Unknown and I4
		targetDistance -= Input.GetAxis("Mouse ScrollWheel") * 5f;
		if (rotateCamera && (int)Cursor.lockState == 1)
		{
			targetSphericRotation.x += Input.GetAxis("Mouse X") * RotationSensitivity;
			targetSphericRotation.y -= Input.GetAxis("Mouse Y") * RotationSensitivity;
		}
	}

	private void ZoomCalculations()
	{
		if (!Object.op_Implicit((Object)(object)((RaycastHit)(ref sightObstacleHit)).transform))
		{
			targetDistance = Mathf.Clamp(targetDistance, DistanceRanges.x, DistanceRanges.y);
		}
		animatedDistance = Mathf.Lerp(animatedDistance, targetDistance, Time.deltaTime * 8f);
	}

	private void FollowCalculations()
	{
		//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0133: Unknown result type (might be due to invalid IL or missing references)
		//IL_0134: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0124: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0131: Unknown result type (might be due to invalid IL or missing references)
		targetSphericRotation.y = HelperClampAngle(targetSphericRotation.y, RotationRanges.x, RotationRanges.y);
		if (RotationSpeed < 1f)
		{
			animatedSphericRotation = new Vector2(Mathf.LerpAngle(animatedSphericRotation.x, targetSphericRotation.x, Time.deltaTime * 30f * RotationSpeed), Mathf.LerpAngle(animatedSphericRotation.y, targetSphericRotation.y, Time.deltaTime * 30f * RotationSpeed));
		}
		else
		{
			animatedSphericRotation = targetSphericRotation;
		}
		Quaternion rotation = Quaternion.Euler(animatedSphericRotation.y, animatedSphericRotation.x, 0f);
		((Component)this).transform.rotation = rotation;
		Vector3 val = ((Component)ToFollow).transform.position + FollowingOffset;
		if (HardFollowValue < 1f)
		{
			float num = Mathf.Lerp(0.5f, 40f, HardFollowValue);
			val = Vector3.Lerp(targetPosition, val, Time.deltaTime * num);
		}
		targetPosition = val;
	}

	private void RaycastCalculations()
	{
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0104: Unknown result type (might be due to invalid IL or missing references)
		//IL_0109: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = ((Component)ToFollow).transform.position + FollowingOffset + ((Component)this).transform.TransformVector(FollowingOffsetDirection);
		Quaternion val2 = Quaternion.Euler(targetSphericRotation.y, targetSphericRotation.x, 0f);
		Ray val3 = default(Ray);
		((Ray)(ref val3))..ctor(val, val2 * -Vector3.forward);
		if (Physics.Raycast(val3, ref sightObstacleHit, targetDistance + CollisionOffset, LayerMask.op_Implicit(SightLayerMask), (QueryTriggerInteraction)1))
		{
			((Component)this).transform.position = ((RaycastHit)(ref sightObstacleHit)).point - ((Ray)(ref val3)).direction * CollisionOffset;
			return;
		}
		Vector3 val4 = ((Component)this).transform.rotation * -Vector3.forward * animatedDistance;
		((Component)this).transform.position = targetPosition + val4 + ((Component)this).transform.TransformVector(FollowingOffsetDirection);
	}

	private void SwitchCalculations()
	{
		if (LockCursor && Input.GetKeyDown((KeyCode)9))
		{
			HelperSwitchCursor();
			if (Cursor.visible)
			{
				rotateCamera = false;
			}
			else
			{
				rotateCamera = true;
			}
		}
	}

	private float HelperClampAngle(float angle, float min, float max)
	{
		if (angle < -360f)
		{
			angle += 360f;
		}
		if (angle > 360f)
		{
			angle -= 360f;
		}
		return Mathf.Clamp(angle, min, max);
	}

	private void HelperSwitchCursor()
	{
		if (Cursor.visible)
		{
			if (Application.isFocused)
			{
				Cursor.lockState = (CursorLockMode)1;
				Cursor.visible = false;
			}
		}
		else
		{
			Cursor.lockState = (CursorLockMode)0;
			Cursor.visible = true;
		}
	}
}
