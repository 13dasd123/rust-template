using System.Collections.Generic;
using Facepunch;
using UnityEngine;

public class PlayerModelHair : MonoBehaviour
{
	public struct RendererMaterials
	{
		public string[] names;

		public Material[] original;

		public Material[] replacement;

		public RendererMaterials(Renderer r)
		{
			original = r.sharedMaterials;
			replacement = original.Clone() as Material[];
			names = new string[original.Length];
			for (int i = 0; i < original.Length; i++)
			{
				names[i] = original[i].name;
			}
		}
	}

	public HairType type;

	private Dictionary<Renderer, RendererMaterials> materials;

	public Dictionary<Renderer, RendererMaterials> Materials => materials;

	private void CacheOriginalMaterials()
	{
		if (materials != null)
		{
			return;
		}
		materials = new Dictionary<Renderer, RendererMaterials>();
		List<SkinnedMeshRenderer> obj = Pool.GetList<SkinnedMeshRenderer>();
		base.gameObject.GetComponentsInChildren(includeInactive: true, obj);
		materials.Clear();
		foreach (SkinnedMeshRenderer item in obj)
		{
			materials.Add(item, new RendererMaterials(item));
		}
		Pool.FreeList(ref obj);
	}

	private void Setup(HairType type, HairSetCollection hair, int baseSeed, float typeNum, int meshIndex, MaterialPropertyBlock block)
	{
		CacheOriginalMaterials();
		HairSetCollection.HairSetEntry hairSetEntry = hair.Get(type, typeNum);
		if (hairSetEntry.HairSet == null)
		{
			Debug.LogWarning("Hair.Get returned a NULL hair");
			return;
		}
		int blendShapeIndex = -1;
		if (type == HairType.Facial || type == HairType.Eyebrow)
		{
			blendShapeIndex = meshIndex;
		}
		HairDye dye = null;
		if (hairSetEntry.HairDyeCollection != null)
		{
			Random.InitState(baseSeed + meshIndex);
			float seed = Random.Range(0f, 1f);
			dye = hairSetEntry.HairDyeCollection.Get(seed);
		}
		hairSetEntry.HairSet.Process(this, dye, block);
		hairSetEntry.HairSet.ProcessMorphs(base.gameObject, blendShapeIndex);
	}

	public void Setup(SkinSetCollection skin, float hairNum, float meshNum, MaterialPropertyBlock block)
	{
		int index = skin.GetIndex(meshNum);
		SkinSet skinSet = skin.Skins[index];
		if (skinSet == null)
		{
			Debug.LogError("Skin.Get returned a NULL skin");
			return;
		}
		int num = (int)type;
		int num2 = Mathf.FloorToInt(hairNum * 100000f);
		Random.InitState(num2 + num);
		float typeNum = Random.Range(0f, 1f);
		Setup(type, skinSet.HairCollection, num2, typeNum, index, block);
	}
}
