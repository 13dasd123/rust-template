using System.Collections.Generic;

public class Library
{
	private AttributeCollection all = new AttributeCollection();

	private Dictionary<uint, AttributeCollection> prefabs = new Dictionary<uint, AttributeCollection>();

	public AttributeCollection Find(uint prefabID)
	{
		if (prefabs.TryGetValue(prefabID, out var value))
		{
			return value;
		}
		value = new AttributeCollection();
		prefabs.Add(prefabID, value);
		return value;
	}

	public T Find<T>(uint prefabID) where T : PrefabAttribute
	{
		T[] array = Find(prefabID).Find<T>();
		if (array.Length == 0)
		{
			return (T)null;
		}
		return array[0];
	}

	public T[] FindAll<T>(uint prefabID) where T : PrefabAttribute
	{
		return Find(prefabID).Find<T>();
	}

	public T[] GetAll<T>() where T : PrefabAttribute
	{
		return all.Find<T>();
	}

	public void Add(uint prefabID, PrefabAttribute attribute)
	{
		AttributeCollection attributeCollection = Find(prefabID);
		attributeCollection.Add(attribute);
		all.Add(attribute);
	}
}
