using Apex.Serialization;
using Rust.Ai;
using UnityEngine;

public class InInCoverFromEntity : WeightedScorerBase<BaseEntity>
{
	[ApexSerialization]
	public float CoverArcThreshold = -0.75f;

	public override float GetScore(BaseContext ctx, BaseEntity option)
	{
		if (SingletonComponent<AiManager>.Instance == null || !SingletonComponent<AiManager>.Instance.enabled || !SingletonComponent<AiManager>.Instance.UseCover || ctx.AIAgent.AttackTarget == null)
		{
			return 0f;
		}
		if (!(ctx is NPCHumanContext nPCHumanContext))
		{
			return 0f;
		}
		if (nPCHumanContext.ReservedCoverPoint != null)
		{
			Vector3 normalized = (option.ServerPosition - nPCHumanContext.Position).normalized;
			if (ScanForCover.ProvidesCoverFromDirection(nPCHumanContext.ReservedCoverPoint, normalized, CoverArcThreshold))
			{
				return 1f;
			}
		}
		return 0f;
	}
}
