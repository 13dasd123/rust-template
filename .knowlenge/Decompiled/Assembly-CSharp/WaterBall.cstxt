using System.Collections.Generic;
using Facepunch;
using UnityEngine;

public class WaterBall : BaseEntity
{
	public ItemDefinition liquidType;

	public int waterAmount;

	public GameObjectRef waterExplosion;

	public Rigidbody myRigidBody;

	public override void ServerInit()
	{
		base.ServerInit();
		Invoke(Extinguish, 10f);
	}

	public void Extinguish()
	{
		CancelInvoke(Extinguish);
		if (!base.IsDestroyed)
		{
			Kill();
		}
	}

	public void FixedUpdate()
	{
		if (base.isServer)
		{
			GetComponent<Rigidbody>().AddForce(Physics.gravity, ForceMode.Acceleration);
		}
	}

	public void DoSplash()
	{
		float num = 2.5f;
		List<BaseEntity> obj = Pool.GetList<BaseEntity>();
		Vis.Entities(base.transform.position + new Vector3(0f, num * 0.75f, 0f), num, obj, 1084435201);
		int num2 = 0;
		while (waterAmount > 0 && num2 < 3)
		{
			List<ISplashable> obj2 = Pool.GetList<ISplashable>();
			foreach (BaseEntity item in obj)
			{
				if (!item.isClient && item is ISplashable splashable && !obj2.Contains(splashable) && splashable.wantsSplash(liquidType, waterAmount))
				{
					obj2.Add(splashable);
				}
			}
			if (obj2.Count == 0)
			{
				break;
			}
			int b = Mathf.CeilToInt(waterAmount / obj2.Count);
			foreach (ISplashable item2 in obj2)
			{
				int num3 = item2.DoSplash(liquidType, Mathf.Min(waterAmount, b));
				waterAmount -= num3;
				if (waterAmount <= 0)
				{
					break;
				}
			}
			Pool.FreeList(ref obj2);
			num2++;
		}
		Pool.FreeList(ref obj);
	}

	private void OnCollisionEnter(Collision collision)
	{
		if (!base.isClient && !myRigidBody.isKinematic)
		{
			DoSplash();
			Effect.server.Run(waterExplosion.resourcePath, base.transform.position + new Vector3(0f, 0f, 0f), Vector3.up);
			myRigidBody.isKinematic = true;
			Invoke(Extinguish, 2f);
		}
	}
}
