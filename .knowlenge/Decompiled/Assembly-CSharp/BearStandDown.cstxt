using System.Collections;
using Apex.Ai.HTN;
using Apex.Serialization;
using UnityEngine;

public class BearStandDown : OperatorBase<BearContext>
{
	[ApexSerialization]
	private float _standDownTime = 0.5f;

	public override void Execute(BearContext context)
	{
		context.Domain.StopNavigating();
		context.Body.ClientRPC(null, "PlayAnimationTrigger", "standDown");
		context.Body.StartCoroutine(AsyncTimer(context, _standDownTime));
	}

	public override OperatorStateType Tick(BearContext context, PrimitiveTaskSelector task)
	{
		if (context.IsFact(Facts.IsTransitioning))
		{
			return OperatorStateType.Running;
		}
		ApplyExpectedEffects(context, task);
		return OperatorStateType.Complete;
	}

	public override void Abort(BearContext context, PrimitiveTaskSelector task)
	{
		context.SetFact(Facts.IsTransitioning, value: false);
	}

	private IEnumerator AsyncTimer(BearContext context, float time)
	{
		context.SetFact(Facts.IsTransitioning, value: true);
		yield return CoroutineEx.waitForSeconds(time);
		context.SetFact(Facts.IsTransitioning, value: false);
	}
}
