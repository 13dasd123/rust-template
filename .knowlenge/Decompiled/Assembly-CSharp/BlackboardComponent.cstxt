using System;
using System.Collections.Generic;
using Facepunch;
using UnityEngine;

public class BlackboardComponent : EntityComponent<BaseEntity>, IServerComponent
{
	[SerializeField]
	private float factDuration = 30f;

	private HashSet<string> addedFacts = new HashSet<string>();

	private Dictionary<string, float> factExpirationTimes = new Dictionary<string, float>();

	public override void InitShared()
	{
		base.InitShared();
		((MonoBehaviour)this).InvokeRepeating("CleanExpiredFacts", Random.value, 1f);
	}

	public void Add(string value)
	{
		if (addedFacts.Add(value))
		{
			factExpirationTimes[value] = Time.time + factDuration;
		}
	}

	public void Remove(string value)
	{
		if (addedFacts.Remove(value))
		{
			factExpirationTimes.Remove(value);
		}
	}

	public void Clear()
	{
		addedFacts.Clear();
		factExpirationTimes.Clear();
	}

	public bool Has(string value)
	{
		return addedFacts.Contains(value);
	}

	public void CleanExpiredFacts()
	{
		TimeWarning val = TimeWarning.New("BlackboardComponent.CleanExpiredFacts", 0);
		try
		{
			float time = Time.time;
			PooledList<string> val2 = Pool.Get<PooledList<string>>();
			try
			{
				foreach (string addedFact in addedFacts)
				{
					if (factExpirationTimes[addedFact] < time)
					{
						((List<string>)(object)val2).Add(addedFact);
					}
				}
				foreach (string item in (List<string>)(object)val2)
				{
					Remove(item);
				}
			}
			finally
			{
				((IDisposable)val2)?.Dispose();
			}
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}
}
