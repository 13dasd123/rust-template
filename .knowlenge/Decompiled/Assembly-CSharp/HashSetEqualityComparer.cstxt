using System;
using System.Collections.Generic;

private class HashSetEqualityComparer<T> : IEqualityComparer<HashSet<T>> where T : IComparable<T>
{
	public static HashSetEqualityComparer<T> Instance { get; } = new HashSetEqualityComparer<T>();

	public bool Equals(HashSet<T> x, HashSet<T> y)
	{
		if (x == y)
		{
			return true;
		}
		if (x == null)
		{
			return false;
		}
		if (y == null)
		{
			return false;
		}
		if (x.GetType() != y.GetType())
		{
			return false;
		}
		if (x.Count != y.Count)
		{
			return false;
		}
		foreach (T item in x)
		{
			if (!y.Contains(item))
			{
				return false;
			}
		}
		return true;
	}

	public int GetHashCode(HashSet<T> set)
	{
		int num = 0;
		if (set != null)
		{
			foreach (T item in set)
			{
				num ^= (item?.GetHashCode() ?? 0) & 0x7FFFFFFF;
			}
		}
		return num;
	}
}
