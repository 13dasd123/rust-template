using UnityEngine;

public class OrbitState : BasicAIState
{
	public Vector3 GetOrbitCenter()
	{
		return brain.mainInterestPoint;
	}

	public override bool CanInterrupt()
	{
		return base.CanInterrupt();
	}

	public override float GetWeight()
	{
		if (IsInState())
		{
			float num = 1f - Mathf.InverseLerp(120f, 180f, TimeInState());
			return 5f * num;
		}
		if (brain._currentState == 2 && Vector3Ex.Distance2D(brain.mainInterestPoint, brain.GetEntity().GetPosition()) <= PatrolState.patrolApproachDist * 1.1f)
		{
			return 5f;
		}
		return 0f;
	}

	public override void StateEnter()
	{
		brain.GetEntity().EnableFacingOverride(enabled: true);
		brain.GetEntity().InitiateAnger();
		base.StateEnter();
	}

	public override void StateThink(float delta)
	{
		Vector3 orbitCenter = GetOrbitCenter();
		CH47HelicopterAIController entity = brain.GetEntity();
		Vector3 position = entity.GetPosition();
		Vector3 vector = Vector3Ex.Direction2D(orbitCenter, position);
		Vector3 vector2 = Vector3.Cross(Vector3.up, vector);
		Vector3 lhs = Vector3.Cross(entity.transform.right, Vector3.up);
		float num = Vector3.Dot(lhs, vector2);
		float num2 = ((!(num < 0f)) ? 1f : (-1f));
		float num3 = 75f;
		Vector3 normalized = (-vector + vector2 * num2 * 0.6f).normalized;
		Vector3 vector3 = orbitCenter + normalized * num3;
		entity.SetMoveTarget(vector3);
		entity.SetAimDirection(Vector3Ex.Direction2D(vector3, position));
		base.StateThink(delta);
	}

	public override void StateLeave()
	{
		brain.GetEntity().EnableFacingOverride(enabled: false);
		brain.GetEntity().CancelAnger();
		base.StateLeave();
	}
}
