using UnityEngine;

public class OrbitState : BasicAIState
{
	public OrbitState()
		: base(AIState.Orbit)
	{
	}

	public Vector3 GetOrbitCenter()
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		return brain.mainInterestPoint;
	}

	public override float GetWeight()
	{
		if (IsInState())
		{
			float num = 1f - Mathf.InverseLerp(120f, 180f, base.TimeInState);
			return 5f * num;
		}
		if (brain.CurrentState != null && brain.CurrentState.StateType == AIState.Patrol && brain.CurrentState is PatrolState patrolState && patrolState.AtPatrolDestination())
		{
			return 5f;
		}
		return 0f;
	}

	public override void StateEnter(BaseAIBrain brain, BaseEntity entity)
	{
		CH47HelicopterAIController obj = entity as CH47HelicopterAIController;
		obj.EnableFacingOverride(enabled: true);
		obj.InitiateAnger();
		base.StateEnter(brain, entity);
	}

	public override StateStatus StateThink(float delta, BaseAIBrain brain, BaseEntity entity)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		Vector3 orbitCenter = GetOrbitCenter();
		CH47HelicopterAIController cH47HelicopterAIController = entity as CH47HelicopterAIController;
		Vector3 position = cH47HelicopterAIController.GetPosition();
		Vector3 val = Vector3Ex.Direction2D(orbitCenter, position);
		Vector3 val2 = Vector3.Cross(Vector3.up, val);
		float num = ((Vector3.Dot(Vector3.Cross(((Component)cH47HelicopterAIController).transform.right, Vector3.up), val2) < 0f) ? (-1f) : 1f);
		float num2 = 75f;
		Vector3 val3 = -val + val2 * num * 0.6f;
		Vector3 normalized = ((Vector3)(ref val3)).normalized;
		Vector3 val4 = orbitCenter + normalized * num2;
		cH47HelicopterAIController.SetMoveTarget(val4);
		cH47HelicopterAIController.SetAimDirection(Vector3Ex.Direction2D(val4, position));
		base.StateThink(delta, brain, entity);
		return StateStatus.Running;
	}

	public override void StateLeave(BaseAIBrain brain, BaseEntity entity)
	{
		CH47HelicopterAIController obj = entity as CH47HelicopterAIController;
		obj.EnableFacingOverride(enabled: false);
		obj.CancelAnger();
		base.StateLeave(brain, entity);
	}
}
