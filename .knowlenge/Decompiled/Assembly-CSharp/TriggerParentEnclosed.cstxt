using UnityEngine;

public class TriggerParentEnclosed : TriggerBase, IServerComponent
{
	public float Padding;

	private BoxCollider boxCollider;

	protected void OnEnable()
	{
		boxCollider = GetComponent<BoxCollider>();
	}

	internal override GameObject InterestedInObject(GameObject obj)
	{
		obj = base.InterestedInObject(obj);
		if (obj == null)
		{
			return null;
		}
		BaseEntity baseEntity = GameObjectEx.ToBaseEntity(obj);
		if (baseEntity == null)
		{
			return null;
		}
		if (baseEntity.isClient)
		{
			return null;
		}
		return baseEntity.gameObject;
	}

	internal override void OnEntityEnter(BaseEntity ent)
	{
		BasePlayer basePlayer = ent.ToPlayer();
		if ((!(basePlayer != null) || !basePlayer.isMounted) && !(ent is NPCPlayer) && !ent.HasParent() && !(ent.FindTrigger<TriggerParentExclusion>() != null))
		{
			UpdateParenting(ent);
			base.OnEntityEnter(ent);
			if (entityContents != null && entityContents.Count == 1)
			{
				InvokeRepeating(OnTick, 0f, 0f);
			}
		}
	}

	internal override void OnEntityLeave(BaseEntity ent)
	{
		BasePlayer basePlayer = ent.ToPlayer();
		if ((!(basePlayer != null) || !basePlayer.IsSleeping()) && !(ent.GetParentEntity() != GameObjectEx.ToBaseEntity(base.gameObject)))
		{
			ent.SetParent(null, worldPositionStays: true, sendImmediate: true);
			ent.ForceUpdateTriggers(enter: true, exit: false);
			if (basePlayer != null)
			{
				basePlayer.PauseFlyHackDetection(5f);
				basePlayer.PauseSpeedHackDetection(5f);
				basePlayer.PauseVehicleNoClipDetection(5f);
			}
			base.OnEntityLeave(ent);
			if (entityContents == null || entityContents.Count == 0)
			{
				CancelInvoke(OnTick);
			}
		}
	}

	private void UpdateParenting(BaseEntity ent)
	{
		Bounds bounds = new Bounds(boxCollider.center, boxCollider.size);
		bounds.Expand(Padding);
		if (new OBB(boxCollider.transform, bounds).Contains(ent.CenterPoint()))
		{
			if (!ent.HasParent())
			{
				ent.SetParent(GameObjectEx.ToBaseEntity(base.gameObject), worldPositionStays: true, sendImmediate: true);
			}
		}
		else if (!(ent.GetParentEntity() != GameObjectEx.ToBaseEntity(base.gameObject)))
		{
			ent.SetParent(null, worldPositionStays: true, sendImmediate: true);
		}
	}

	private void OnTick()
	{
		if (entityContents == null)
		{
			return;
		}
		foreach (BaseEntity entityContent in entityContents)
		{
			UpdateParenting(entityContent);
		}
	}
}
