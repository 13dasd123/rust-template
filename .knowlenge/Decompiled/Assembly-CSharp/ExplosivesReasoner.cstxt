using Rust.Ai.HTN;
using Rust.Ai.HTN.Reasoning;
using Rust.Ai.HTN.Scientist;

public class ExplosivesReasoner : INpcReasoner
{
	public float TickFrequency { get; set; }

	public float LastTickTime { get; set; }

	public void Tick(IHTNAgent npc, float deltaTime, float time)
	{
		if (!(npc.AiDomain.NpcContext is ScientistContext scientistContext))
		{
			return;
		}
		for (int i = 0; i < scientistContext.Memory.KnownTimedExplosives.Count; i++)
		{
			BaseNpcMemory.EntityOfInterestInfo entityOfInterestInfo = scientistContext.Memory.KnownTimedExplosives[i];
			if (entityOfInterestInfo.Entity != null)
			{
				AttackEntity firearm = scientistContext.Domain.GetFirearm();
				if ((entityOfInterestInfo.Entity.transform.position - scientistContext.BodyPosition).sqrMagnitude < scientistContext.Body.AiDefinition.Engagement.SqrCloseRangeFirearm(firearm))
				{
					scientistContext.SetFact(Facts.NearbyExplosives, value: true);
					scientistContext.IncrementFact(Facts.Alertness, 2);
					return;
				}
			}
		}
		scientistContext.SetFact(Facts.NearbyExplosives, value: false);
	}
}
