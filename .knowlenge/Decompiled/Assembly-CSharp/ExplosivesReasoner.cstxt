using Rust.Ai.HTN;
using Rust.Ai.HTN.Reasoning;
using Rust.Ai.HTN.ScientistJunkpile;

public class ExplosivesReasoner : INpcReasoner
{
	public float TickFrequency { get; set; }

	public float LastTickTime { get; set; }

	public void Tick(IHTNAgent npc, float deltaTime, float time)
	{
		if (!(npc.AiDomain.NpcContext is ScientistJunkpileContext scientistJunkpileContext))
		{
			return;
		}
		for (int i = 0; i < scientistJunkpileContext.Memory.KnownTimedExplosives.Count; i++)
		{
			BaseNpcMemory.EntityOfInterestInfo entityOfInterestInfo = scientistJunkpileContext.Memory.KnownTimedExplosives[i];
			if (entityOfInterestInfo.Entity != null)
			{
				AttackEntity firearm = scientistJunkpileContext.Domain.GetFirearm();
				float sqrMagnitude = (entityOfInterestInfo.Entity.transform.position - scientistJunkpileContext.BodyPosition).sqrMagnitude;
				if (sqrMagnitude < scientistJunkpileContext.Body.AiDefinition.Engagement.SqrCloseRangeFirearm(firearm))
				{
					scientistJunkpileContext.SetFact(Facts.NearbyExplosives, value: true);
					scientistJunkpileContext.IncrementFact(Facts.Alertness, 2);
					return;
				}
			}
		}
		scientistJunkpileContext.SetFact(Facts.NearbyExplosives, value: false);
	}
}
