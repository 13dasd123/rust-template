using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.IO;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;
using Cysharp.Text;
using Network;
using Rust;
using Steamworks;
using UnityEngine;

public class AzureWebInterface
{
	public static readonly AzureWebInterface client = new AzureWebInterface(isClient: true);

	public static readonly AzureWebInterface server = new AzureWebInterface(isClient: false);

	private AzureAnalyticsUploader GameplayBulkUploader;

	public bool IsClient;

	public int MaxRetries = 1;

	public int FlushSize = 1000;

	public TimeSpan FlushDelay = TimeSpan.FromSeconds(30.0);

	private DateTime nextFlush;

	private ConcurrentQueue<EventRecord> uploadQueue = new ConcurrentQueue<EventRecord>();

	private HttpClient HttpClient = new HttpClient();

	private static readonly MediaTypeHeaderValue JsonContentType = new MediaTypeHeaderValue("application/json")
	{
		CharSet = Encoding.UTF8.WebName
	};

	public int PendingCount => uploadQueue.Count;

	public AzureWebInterface(bool isClient)
	{
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Expected O, but got Unknown
		IsClient = isClient;
		Task.Run((Func<Task?>)UploadSchedulingThread);
	}

	public void EnqueueEvent(EventRecord point)
	{
		if (!IsClient && !string.IsNullOrEmpty(GetContainerUrl()))
		{
			if (GameplayBulkUploader.NeedsCreation())
			{
				GameplayBulkUploader = AzureAnalyticsUploader.Create("gameplay_events", TimeSpan.FromMinutes(5.0));
				GameplayBulkUploader.UseJsonDataObject = true;
			}
			GameplayBulkUploader.Append(point);
		}
		else
		{
			point.MarkSubmitted();
			uploadQueue.Enqueue(point);
		}
	}

	private async Task UploadSchedulingThread()
	{
		while (!Application.isQuitting)
		{
			try
			{
				DateTime utcNow = DateTime.UtcNow;
				if (uploadQueue.IsEmpty || (uploadQueue.Count < FlushSize && nextFlush > utcNow))
				{
					await Task.Delay(1000);
					continue;
				}
				nextFlush = utcNow.Add(FlushDelay);
				List<EventRecord> list = Pool.Get<List<EventRecord>>();
				EventRecord result;
				while (uploadQueue.TryDequeue(out result))
				{
					list.Add(result);
				}
				Task.Run(async delegate
				{
					await UploadAsync(list);
				});
			}
			catch (Exception ex)
			{
				Debug.LogException(ex);
				await Task.Delay(1000);
			}
		}
	}

	private void SerializeEvents(List<EventRecord> records, MemoryStream stream)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		int num = 0;
		Utf8ValueStringBuilder writer = ZString.CreateUtf8StringBuilder();
		try
		{
			((Utf8ValueStringBuilder)(ref writer)).Append("[");
			foreach (EventRecord record in records)
			{
				if (num > 0)
				{
					((Utf8ValueStringBuilder)(ref writer)).Append(',');
				}
				record.SerializeAsJson(ref writer);
				num++;
			}
			((Utf8ValueStringBuilder)(ref writer)).Append("]");
			((Utf8ValueStringBuilder)(ref writer)).WriteTo((Stream)stream);
		}
		finally
		{
			((Utf8ValueStringBuilder)(ref writer)).Dispose();
		}
	}

	private async Task UploadAsync(List<EventRecord> records)
	{
		if (!(IsClient ? (Application.Manifest?.Features?.ClientAnalytics == true) : (Application.Manifest?.Features?.ServerAnalytics == true)))
		{
			Pool.Free<EventRecord>(ref records, true);
			return;
		}
		if (records.Count == 0)
		{
			Pool.Free<EventRecord>(ref records, false);
			return;
		}
		MemoryStream stream = Pool.Get<MemoryStream>();
		stream.Position = 0L;
		stream.SetLength(0L);
		try
		{
			SerializeEvents(records, stream);
			AuthTicket ticket = null;
			for (int attempt = 0; attempt < MaxRetries; attempt++)
			{
				try
				{
					ByteArrayContent content = new ByteArrayContent(stream.GetBuffer(), 0, (int)stream.Length);
					try
					{
						((HttpContent)content).Headers.ContentType = JsonContentType;
						if (!string.IsNullOrEmpty(AnalyticsSecret))
						{
							((HttpHeaders)((HttpContent)content).Headers).Add(AnalyticsHeader, AnalyticsSecret);
						}
						else
						{
							((HttpHeaders)((HttpContent)content).Headers).Add(AnalyticsHeader, AnalyticsPublicKey);
						}
						if (!IsClient)
						{
							((HttpHeaders)((HttpContent)content).Headers).Add("X-SERVER-IP", Net.sv.ip);
							((HttpHeaders)((HttpContent)content).Headers).Add("X-SERVER-PORT", Net.sv.port.ToString());
						}
						(await HttpClient.PostAsync(IsClient ? ClientAnalyticsUrl : ServerAnalyticsUrl, (HttpContent)(object)content)).EnsureSuccessStatusCode();
					}
					finally
					{
						((IDisposable)content)?.Dispose();
					}
				}
				catch (Exception ex)
				{
					HttpRequestException val = (HttpRequestException)(object)((ex is HttpRequestException) ? ex : null);
					if (val != null)
					{
						Debug.Log((object)("HTTP Error when uploading analytics: " + ((Exception)(object)val).Message));
					}
					else
					{
						Debug.LogException(ex);
					}
					goto IL_02ae;
				}
				break;
				IL_02ae:
				if (ticket != null)
				{
					try
					{
						ticket.Cancel();
					}
					catch (Exception ex2)
					{
						Debug.LogError((object)("Failed to cancel auth ticket in analytics: " + ex2.ToString()));
					}
				}
			}
		}
		catch (Exception ex3)
		{
			if (IsClient)
			{
				Debug.LogWarning((object)ex3.ToString());
			}
			else
			{
				Debug.LogException(ex3);
			}
		}
		finally
		{
			Pool.Free<EventRecord>(ref records, true);
			Pool.FreeUnmanaged(ref stream);
		}
	}
}
