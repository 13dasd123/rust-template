using System;
using UnityEngine;

public class ConditionalModel : PrefabAttribute
{
	[NonSerialized]
	public ModelConditionTest[] conditions;

	[NonSerialized]
	public GameObject prefabObject;

	[NonSerialized]
	public string conditionalName;

	[NonSerialized]
	public uint conditionalID;

	protected override void AttributeSetup(GameObject rootObj, string name, bool serverside, bool clientside, bool bundling)
	{
		base.AttributeSetup(rootObj, name, serverside, clientside, bundling);
		conditions = GetComponentsInChildren<ModelConditionTest>(includeInactive: true);
		prefabObject = base.gameObject;
		conditionalName = (name + "/" + base.gameObject.name).ToLower();
		conditionalID = gameManager.AddPrefab(conditionalName, prefabObject);
	}

	public GameObject Run(GameObject parent)
	{
		if (!prefabObject)
		{
			return null;
		}
		for (int i = 0; i < conditions.Length; i++)
		{
			if (!conditions[i].DoTest(parent))
			{
				return null;
			}
		}
		GameObject gameObject = gameManager.CreatePrefab(conditionalName, parent.transform, active: false);
		gameObject.transform.localPosition = prefabObject.transform.localPosition;
		gameObject.transform.localRotation = prefabObject.transform.localRotation;
		PrefabInfoEx.AwakeFromInstantiate(gameObject);
		return gameObject;
	}

	protected override Type GetIndexedType()
	{
		return typeof(ConditionalModel);
	}
}
