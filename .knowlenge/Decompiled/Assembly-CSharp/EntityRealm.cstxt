using System.Collections;
using System.Collections.Generic;
using Network;
using Network.Visibility;
using UnityEngine;

public abstract class EntityRealm : IEnumerable<BaseNetworkable>, IEnumerable
{
	private ListDictionary<uint, BaseNetworkable> entityList = new ListDictionary<uint, BaseNetworkable>();

	public int Count => entityList.Count;

	protected abstract Manager visibilityManager { get; }

	public BaseNetworkable Find(uint uid)
	{
		BaseNetworkable val = null;
		if (!entityList.TryGetValue(uid, out val))
		{
			return null;
		}
		return val;
	}

	public void RegisterID(BaseNetworkable ent)
	{
		if (ent.net != null)
		{
			if (entityList.Contains(ent.net.ID))
			{
				entityList[ent.net.ID] = ent;
			}
			else
			{
				entityList.Add(ent.net.ID, ent);
			}
		}
	}

	public void UnregisterID(BaseNetworkable ent)
	{
		if (ent.net != null)
		{
			entityList.Remove(ent.net.ID);
		}
	}

	public Group FindGroup(uint uid)
	{
		return visibilityManager?.Get(uid);
	}

	public Group TryFindGroup(uint uid)
	{
		return visibilityManager?.TryGet(uid);
	}

	public void FindInGroup(uint uid, List<BaseNetworkable> list)
	{
		Group group = TryFindGroup(uid);
		if (group == null)
		{
			return;
		}
		int count = group.networkables.Values.Count;
		Networkable[] buffer = group.networkables.Values.Buffer;
		for (int i = 0; i < count; i++)
		{
			Networkable networkable = buffer[i];
			BaseNetworkable baseNetworkable = Find(networkable.ID);
			if (!(baseNetworkable == null) && baseNetworkable.net != null && baseNetworkable.net.group != null)
			{
				if (baseNetworkable.net.group.ID != uid)
				{
					Debug.LogWarning("Group ID mismatch: " + baseNetworkable.ToString());
				}
				else
				{
					list.Add(baseNetworkable);
				}
			}
		}
	}

	public IEnumerator<BaseNetworkable> GetEnumerator()
	{
		return entityList.Values.GetEnumerator();
	}

	IEnumerator IEnumerable.GetEnumerator()
	{
		return GetEnumerator();
	}
}
