using System.Collections;
using System.Collections.Generic;
using Network;
using Network.Visibility;
using UnityEngine;

public abstract class EntityRealm : IEnumerable<BaseNetworkable>, IEnumerable
{
	public HiddenValue<ListDictionary<NetworkableId, BaseNetworkable>> entityList = new HiddenValue<ListDictionary<NetworkableId, BaseNetworkable>>(new ListDictionary<NetworkableId, BaseNetworkable>());

	public int Count => entityList.Get().Count;

	protected abstract Manager visibilityManager { get; }

	public bool Contains(NetworkableId uid)
	{
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		return entityList.Get().Contains(uid);
	}

	public BaseNetworkable Find(NetworkableId uid)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		BaseNetworkable result = null;
		if (!entityList.Get().TryGetValue(uid, ref result))
		{
			return null;
		}
		return result;
	}

	public void RegisterID(BaseNetworkable ent)
	{
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		if (ent.net != null)
		{
			ListDictionary<NetworkableId, BaseNetworkable> val = entityList.Get();
			if (val.Contains(ent.net.ID))
			{
				val[ent.net.ID] = ent;
			}
			else
			{
				val.Add(ent.net.ID, ent);
			}
		}
	}

	public void UnregisterID(BaseNetworkable ent)
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		if (ent.net != null)
		{
			entityList.Get().Remove(ent.net.ID);
		}
	}

	public Group FindGroup(uint uid)
	{
		Manager val = visibilityManager;
		if (val == null)
		{
			return null;
		}
		return val.Get(uid);
	}

	public Group TryFindGroup(uint uid)
	{
		Manager val = visibilityManager;
		if (val == null)
		{
			return null;
		}
		return val.TryGet(uid);
	}

	public void FindInGroup(uint uid, List<BaseNetworkable> list)
	{
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		Group val = TryFindGroup(uid);
		if (val == null)
		{
			return;
		}
		int count = val.networkables.Values.Count;
		Networkable[] buffer = val.networkables.Values.Buffer;
		for (int i = 0; i < count; i++)
		{
			Networkable val2 = buffer[i];
			BaseNetworkable baseNetworkable = Find(val2.ID);
			if (!((Object)(object)baseNetworkable == (Object)null) && baseNetworkable.net != null && baseNetworkable.net.group != null)
			{
				if (baseNetworkable.net.group.ID != uid)
				{
					Debug.LogWarning((object)("Group ID mismatch: " + ((object)baseNetworkable).ToString()));
				}
				else
				{
					list.Add(baseNetworkable);
				}
			}
		}
	}

	public Enumerator<BaseNetworkable> GetEnumerator()
	{
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		return entityList.Get().Values.GetEnumerator();
	}

	IEnumerator<BaseNetworkable> IEnumerable<BaseNetworkable>.GetEnumerator()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		return (IEnumerator<BaseNetworkable>)(object)GetEnumerator();
	}

	IEnumerator IEnumerable.GetEnumerator()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		return (IEnumerator)(object)GetEnumerator();
	}

	public void Clear()
	{
		entityList.Get().Clear();
	}
}
