using Rust.UI;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.UI;
using VLB;

public class UIMixingTableItem : MonoBehaviour
{
	public Image ItemIcon;

	public Tooltip ItemTooltip;

	public RustText TextItemNameAndQuantity;

	public UIMixingTableItemIngredient[] Ingredients;

	public Recipe Recipe;

	public void Init(Recipe r, UnityAction<Recipe> onClicked)
	{
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Expected O, but got Unknown
		Recipe = r;
		if ((Object)(object)Recipe == (Object)null)
		{
			return;
		}
		((UnityEvent)((Component)this).gameObject.GetOrAddComponent<Button>().onClick).AddListener((UnityAction)delegate
		{
			onClicked.Invoke(Recipe);
		});
		ItemIcon.sprite = Recipe.DisplayIcon;
		TextItemNameAndQuantity.SetText($"{Recipe.ProducedItemCount} x {Recipe.DisplayName}", true, false);
		ItemTooltip.Text = Recipe.DisplayDescription;
		for (int i = 0; i < Ingredients.Length; i++)
		{
			if (i >= Recipe.Ingredients.Length)
			{
				Ingredients[i].InitBlank();
			}
			else
			{
				Ingredients[i].Init(Recipe.Ingredients[i]);
			}
		}
	}

	public void CleanUp()
	{
		Button component = ((Component)this).gameObject.GetComponent<Button>();
		if ((Object)(object)component != (Object)null)
		{
			((UnityEventBase)component.onClick).RemoveAllListeners();
		}
	}

	public void SetAvailable(bool flag)
	{
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		((Graphic)TextItemNameAndQuantity).color = (Color)(flag ? new Color(0.78f, 0.78f, 0.78f) : Color.grey);
	}
}
