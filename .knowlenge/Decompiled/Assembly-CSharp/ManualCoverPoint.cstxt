using Rust.Ai;
using UnityEngine;

public class ManualCoverPoint : FacepunchBehaviour
{
	public bool IsDynamic;

	public float Score = 2f;

	public CoverPointVolume Volume;

	public Vector3 Normal;

	public CoverPoint.CoverType NormalCoverType;

	public Vector3 Position => base.transform.position;

	public float DirectionMagnitude
	{
		get
		{
			if (Volume != null)
			{
				return Volume.CoverPointRayLength;
			}
			return 1f;
		}
	}

	private void Awake()
	{
		if (base.transform.parent != null)
		{
			Volume = base.transform.parent.GetComponent<CoverPointVolume>();
		}
	}

	public CoverPoint ToCoverPoint(CoverPointVolume volume)
	{
		Volume = volume;
		CoverPoint coverPoint;
		if (IsDynamic)
		{
			coverPoint = new CoverPoint(Volume, Score);
			coverPoint.IsDynamic = true;
			coverPoint.SourceTransform = base.transform;
			coverPoint.NormalCoverType = NormalCoverType;
			CoverPoint coverPoint2 = coverPoint;
			Vector3? vector = base.transform?.position;
			coverPoint2.Position = ((!vector.HasValue) ? Vector3.zero : vector.Value);
			return coverPoint;
		}
		Vector3 normalized = (base.transform.rotation * Normal).normalized;
		coverPoint = new CoverPoint(Volume, Score);
		coverPoint.IsDynamic = false;
		coverPoint.Position = base.transform.position;
		coverPoint.Normal = normalized;
		coverPoint.NormalCoverType = NormalCoverType;
		return coverPoint;
	}
}
