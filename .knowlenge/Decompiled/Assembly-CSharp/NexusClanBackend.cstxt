using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ConVar;
using Facepunch;
using Facepunch.Nexus;
using Facepunch.Nexus.Models;
using ProtoBuf.Nexus;
using Rust;
using UnityEngine;

public class NexusClanBackend : IClanBackend, IDisposable
{
	private readonly Dictionary<long, NexusClanWrapper> _clanWrappers;

	private IClanChangeSink _changeSink;

	private NexusClanChatCollector _chatCollector;

	private NexusClanEventHandler _eventHandler;

	private NexusZoneClient _client;

	public NexusClanBackend()
	{
		_clanWrappers = new Dictionary<long, NexusClanWrapper>();
	}

	public ValueTask Initialize(IClanChangeSink changeSink)
	{
		if (!NexusServer.Started)
		{
			throw new InvalidOperationException("Cannot use the Nexus clan backend when nexus is not enabled on this server!");
		}
		_clanWrappers.Clear();
		_changeSink = changeSink;
		_chatCollector = new NexusClanChatCollector(changeSink);
		_eventHandler = new NexusClanEventHandler(this, changeSink);
		_client = NexusServer.ZoneClient;
		_client.ClanEventListener = (INexusClanEventListener)(object)_eventHandler;
		((MonoBehaviour)Global.Runner).StartCoroutine(BroadcastClanChatBatches());
		return default(ValueTask);
	}

	public void Dispose()
	{
		_clanWrappers.Clear();
		_changeSink = null;
		_chatCollector = null;
		_eventHandler = null;
		NexusZoneClient client = _client;
		if (((client != null) ? client.ClanEventListener : null) != null)
		{
			_client.ClanEventListener = null;
		}
		_client = null;
	}

	public async ValueTask<ClanValueResult<IClan>> Get(long clanId)
	{
		NexusClanResult<NexusClan> val = await _client.GetClan(clanId);
		NexusClan clan = default(NexusClan);
		if (val.IsSuccess && val.TryGetResponse(ref clan))
		{
			return ClanValueResult<IClan>.op_Implicit((IClan)(object)Wrap(clan));
		}
		return ClanValueResult<IClan>.op_Implicit(val.ResultCode.ToClanResult());
	}

	public bool TryGet(long clanId, out IClan clan)
	{
		NexusClan clan2 = default(NexusClan);
		if (!_client.TryGetClan(clanId, ref clan2))
		{
			clan = null;
			return false;
		}
		clan = (IClan)(object)Wrap(clan2);
		return true;
	}

	public async ValueTask<ClanValueResult<IClan>> GetByMember(ulong steamId)
	{
		NexusClanResult<NexusClan> val = await _client.GetClanByMember(NexusClanUtil.GetPlayerId(steamId));
		NexusClan clan = default(NexusClan);
		if (val.IsSuccess && val.TryGetResponse(ref clan))
		{
			return ClanValueResult<IClan>.op_Implicit((IClan)(object)Wrap(clan));
		}
		return ClanValueResult<IClan>.op_Implicit(val.ResultCode.ToClanResult());
	}

	public async ValueTask<ClanValueResult<IClan>> Create(ulong leaderSteamId, string name)
	{
		ClanCreateParameters val = default(ClanCreateParameters);
		((ClanCreateParameters)(ref val)).ClanName = name;
		((ClanCreateParameters)(ref val)).ClanNameNormalized = name.ToLowerInvariant().Normalize(NormalizationForm.FormKC);
		((ClanCreateParameters)(ref val)).LeaderPlayerId = NexusClanUtil.GetPlayerId(leaderSteamId);
		((ClanCreateParameters)(ref val)).LeaderRoleName = "Leader";
		((ClanCreateParameters)(ref val)).LeaderRoleVariables = NexusClanUtil.DefaultLeaderVariables;
		((ClanCreateParameters)(ref val)).MemberRoleName = "Member";
		ClanCreateParameters val2 = val;
		NexusClanResult<NexusClan> val3 = await _client.CreateClan(val2);
		NexusClan clan = default(NexusClan);
		if (val3.IsSuccess && val3.TryGetResponse(ref clan))
		{
			return ClanValueResult<IClan>.op_Implicit((IClan)(object)Wrap(clan));
		}
		return ClanValueResult<IClan>.op_Implicit(val3.ResultCode.ToClanResult());
	}

	public async ValueTask<ClanValueResult<List<ClanInvitation>>> ListInvitations(ulong steamId)
	{
		NexusClanResult<List<ClanInvitation>> val = await _client.ListClanInvitations(NexusClanUtil.GetPlayerId(steamId));
		List<ClanInvitation> source = default(List<ClanInvitation>);
		if (val.IsSuccess && val.TryGetResponse(ref source))
		{
			List<ClanInvitation> list = source.Select(delegate(ClanInvitation i)
			{
				//IL_0002: Unknown result type (might be due to invalid IL or missing references)
				//IL_0037: Unknown result type (might be due to invalid IL or missing references)
				ClanInvitation result = default(ClanInvitation);
				result.ClanId = ((ClanInvitation)(ref i)).ClanId;
				result.Recruiter = NexusClanUtil.GetSteamId(((ClanInvitation)(ref i)).RecruiterPlayerId);
				result.Timestamp = ((ClanInvitation)(ref i)).Timestamp;
				return result;
			}).ToList();
			return new ClanValueResult<List<ClanInvitation>>(list);
		}
		return ClanValueResult<List<ClanInvitation>>.op_Implicit(val.ResultCode.ToClanResult());
	}

	public async ValueTask<ClanValueResult<List<ClanLeaderboardEntry>>> GetLeaderboard(int limit = 100)
	{
		NexusClanResult<List<ClanLeaderboardEntry>> val = await _client.GetClanLeaderboard(limit);
		List<ClanLeaderboardEntry> source = default(List<ClanLeaderboardEntry>);
		if (val.IsSuccess && val.TryGetResponse(ref source))
		{
			List<ClanLeaderboardEntry> list = source.Select(delegate(ClanLeaderboardEntry c)
			{
				//IL_0002: Unknown result type (might be due to invalid IL or missing references)
				//IL_0032: Unknown result type (might be due to invalid IL or missing references)
				ClanLeaderboardEntry result = default(ClanLeaderboardEntry);
				result.ClanId = ((ClanLeaderboardEntry)(ref c)).ClanId;
				result.Name = ((ClanLeaderboardEntry)(ref c)).Name;
				result.Score = ((ClanLeaderboardEntry)(ref c)).Score;
				return result;
			}).ToList();
			return new ClanValueResult<List<ClanLeaderboardEntry>>(list);
		}
		return ClanValueResult<List<ClanLeaderboardEntry>>.op_Implicit(val.ResultCode.ToClanResult());
	}

	public void HandleClanChatBatch(ClanChatBatchRequest request)
	{
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		if (_changeSink == null)
		{
			return;
		}
		foreach (Message message in request.messages)
		{
			_changeSink.ClanChatMessage(message.clanId, new ClanChatEntry
			{
				SteamId = message.userId,
				Message = message.text,
				Name = message.name,
				Time = message.timestamp
			});
		}
	}

	private IEnumerator BroadcastClanChatBatches()
	{
		while (_chatCollector != null && NexusServer.Started)
		{
			List<Message> list = Pool.Get<List<Message>>();
			_chatCollector.TakeMessages(list);
			if (list.Count > 0)
			{
				SendClanChatBatch(list);
			}
			else
			{
				Pool.Free<Message>(ref list, false);
			}
			yield return CoroutineEx.waitForSecondsRealtime(Nexus.clanClatBatchDuration);
		}
		static async void SendClanChatBatch(List<Message> messages)
		{
			Request val = Pool.Get<Request>();
			val.isFireAndForget = true;
			val.clanChatBatch = Pool.Get<ClanChatBatchRequest>();
			val.clanChatBatch.messages = messages;
			try
			{
				(await NexusServer.BroadcastRpc(val))?.Dispose();
			}
			catch (Exception ex)
			{
				Debug.LogException(ex);
			}
		}
	}

	public void UpdateWrapper(long clanId)
	{
		NexusClanWrapper value;
		lock (_clanWrappers)
		{
			if (!_clanWrappers.TryGetValue(clanId, out value))
			{
				return;
			}
		}
		value.UpdateValuesInternal();
	}

	public void RemoveWrapper(long clanId)
	{
		lock (_clanWrappers)
		{
			_clanWrappers.Remove(clanId);
		}
	}

	private NexusClanWrapper Wrap(NexusClan clan)
	{
		lock (_clanWrappers)
		{
			if (_clanWrappers.TryGetValue(clan.ClanId, out var value) && value.Internal == clan)
			{
				return value;
			}
			value = new NexusClanWrapper(clan, _chatCollector);
			_clanWrappers[clan.ClanId] = value;
			return value;
		}
	}
}
