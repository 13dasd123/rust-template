using System;
using System.Collections.Generic;
using UnityEngine;

public class GenerateRiverLayout : ProceduralComponent
{
	public const float Width = 10f;

	public const float InnerPadding = 1f;

	public const float OuterPadding = 1f;

	public const float InnerFade = 8f;

	public const float OuterFade = 64f;

	public const float RandomScale = 0.75f;

	public const float MeshOffset = -0.5f;

	public const float TerrainOffset = -1.5f;

	private static Quaternion rot90 = Quaternion.Euler(0f, 90f, 0f);

	public override void Process(uint seed)
	{
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_055f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0569: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_0539: Unknown result type (might be due to invalid IL or missing references)
		//IL_0543: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00af: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_00db: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Unknown result type (might be due to invalid IL or missing references)
		//IL_010d: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_015d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0162: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0185: Unknown result type (might be due to invalid IL or missing references)
		//IL_0609: Unknown result type (might be due to invalid IL or missing references)
		//IL_060e: Unknown result type (might be due to invalid IL or missing references)
		//IL_084f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0870: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01be: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_06a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_06ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0627: Unknown result type (might be due to invalid IL or missing references)
		//IL_062c: Unknown result type (might be due to invalid IL or missing references)
		//IL_062e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0630: Unknown result type (might be due to invalid IL or missing references)
		//IL_0632: Unknown result type (might be due to invalid IL or missing references)
		//IL_0637: Unknown result type (might be due to invalid IL or missing references)
		//IL_0240: Unknown result type (might be due to invalid IL or missing references)
		//IL_0283: Unknown result type (might be due to invalid IL or missing references)
		//IL_028f: Unknown result type (might be due to invalid IL or missing references)
		//IL_029b: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_030b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0313: Unknown result type (might be due to invalid IL or missing references)
		//IL_0315: Unknown result type (might be due to invalid IL or missing references)
		//IL_0317: Unknown result type (might be due to invalid IL or missing references)
		//IL_0323: Unknown result type (might be due to invalid IL or missing references)
		//IL_0325: Unknown result type (might be due to invalid IL or missing references)
		//IL_0327: Unknown result type (might be due to invalid IL or missing references)
		//IL_0333: Unknown result type (might be due to invalid IL or missing references)
		//IL_0335: Unknown result type (might be due to invalid IL or missing references)
		//IL_0337: Unknown result type (might be due to invalid IL or missing references)
		//IL_0343: Unknown result type (might be due to invalid IL or missing references)
		//IL_0345: Unknown result type (might be due to invalid IL or missing references)
		//IL_0347: Unknown result type (might be due to invalid IL or missing references)
		//IL_0353: Unknown result type (might be due to invalid IL or missing references)
		//IL_0355: Unknown result type (might be due to invalid IL or missing references)
		//IL_0357: Unknown result type (might be due to invalid IL or missing references)
		//IL_0363: Unknown result type (might be due to invalid IL or missing references)
		//IL_0365: Unknown result type (might be due to invalid IL or missing references)
		//IL_0367: Unknown result type (might be due to invalid IL or missing references)
		//IL_0373: Unknown result type (might be due to invalid IL or missing references)
		//IL_0375: Unknown result type (might be due to invalid IL or missing references)
		//IL_0377: Unknown result type (might be due to invalid IL or missing references)
		//IL_0385: Unknown result type (might be due to invalid IL or missing references)
		//IL_0741: Unknown result type (might be due to invalid IL or missing references)
		//IL_0746: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_04da: Unknown result type (might be due to invalid IL or missing references)
		//IL_04dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_04e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0501: Unknown result type (might be due to invalid IL or missing references)
		//IL_0506: Unknown result type (might be due to invalid IL or missing references)
		//IL_050a: Unknown result type (might be due to invalid IL or missing references)
		//IL_050f: Unknown result type (might be due to invalid IL or missing references)
		//IL_04cb: Unknown result type (might be due to invalid IL or missing references)
		if (World.Networked)
		{
			TerrainMeta.Path.Rivers.Clear();
			TerrainMeta.Path.Rivers.AddRange(World.GetPaths("River"));
		}
		else
		{
			if (!World.Config.Rivers)
			{
				return;
			}
			List<PathList> list = new List<PathList>();
			TerrainHeightMap heightMap = TerrainMeta.HeightMap;
			TerrainTopologyMap topologyMap = TerrainMeta.TopologyMap;
			List<Vector3> list2 = new List<Vector3>();
			int num = 3;
			if (World.Size <= 4000)
			{
				num = 2;
			}
			Vector3 val = default(Vector3);
			Line val4 = default(Line);
			Vector3 val6;
			Vector3 val7 = default(Vector3);
			for (float num2 = TerrainMeta.Position.z; num2 < TerrainMeta.Position.z + TerrainMeta.Size.z; num2 += 20f)
			{
				for (float num3 = TerrainMeta.Position.x; num3 < TerrainMeta.Position.x + TerrainMeta.Size.x; num3 += 20f)
				{
					((Vector3)(ref val))..ctor(num3, 0f, num2);
					float num4 = (val.y = heightMap.GetHeight(val));
					if (val.y <= 15f)
					{
						continue;
					}
					Vector3 normal = heightMap.GetNormal(val);
					if (normal.y <= 0.01f || normal.y >= 0.99f)
					{
						continue;
					}
					Vector2 val2 = Vector3Ex.XZ2D(normal);
					Vector2 normalized = ((Vector2)(ref val2)).normalized;
					float num5 = Vector3.Angle(Vector3.up, normal);
					list2.Add(val);
					float baseRadius = 5f;
					int num6 = 0;
					int num7 = 5;
					for (int i = 0; i < 5000; i++)
					{
						int num8 = i * 4;
						Vector2 val3 = Vector2Ex.Rotate(normalized, Mathf.Sin((float)num8 * (MathF.PI / 180f) * 0.5f) * Mathf.InverseLerp(30f, 10f, num5) * 60f);
						val.x += val3.x * 4f;
						val.z += val3.y * 4f;
						bool flag = false;
						for (int j = 0; j < list2.Count - 10; j++)
						{
							((Line)(ref val4))..ctor(list2[j], list2[j + 1]);
							Vector3 val5 = ((Line)(ref val4)).ClosestPoint(val);
							val6 = val - val5;
							if (((Vector3)(ref val6)).sqrMagnitude < 16900f)
							{
								flag = true;
								break;
							}
						}
						if (flag)
						{
							break;
						}
						float height = heightMap.GetHeight(val);
						if (height > num4 + 32f)
						{
							break;
						}
						float num9 = Mathf.Min(height, num4);
						float num10 = Mathf.Lerp(0.15f, 0.95f, Mathf.InverseLerp(10f, 0f, num9));
						val.y = Mathf.Lerp(val.y, num9, num10);
						float radius = PathList.GetRadius(num8, 0f, baseRadius, 0.75f, scaleWidthWithLength: true);
						float radius2 = PathList.GetRadius(num8, num8, baseRadius, 0.75f, scaleWidthWithLength: true);
						((Vector3)(ref val7))..ctor(val3.x, 0f, val3.y);
						Vector3 val8 = val7 * (radius * 1.5f);
						Vector3 val9 = val7 * (radius2 + 1f + 64f);
						Vector3 val10 = rot90 * val7;
						Vector3 val11 = val10 * (radius * 1.5f);
						Vector3 val12 = val10 * (radius2 + 1f + 64f);
						int topology = topologyMap.GetTopology(val, radius + 1f + 64f);
						int num11 = topologyMap.GetTopology(val) & topologyMap.GetTopology(val - val8) & topologyMap.GetTopology(val + val8) & topologyMap.GetTopology(val + val9) & topologyMap.GetTopology(val - val11) & topologyMap.GetTopology(val - val12) & topologyMap.GetTopology(val + val11) & topologyMap.GetTopology(val + val12);
						int topology2 = topologyMap.GetTopology(val);
						int num12 = 3742724;
						int num13 = 128;
						int num14 = 128;
						if ((topology & num12) != 0)
						{
							break;
						}
						if ((num11 & num13) != 0)
						{
							list2.Add(val);
							if (list2.Count >= 62)
							{
								PathList pathList = new PathList("River " + (TerrainMeta.Path.Rivers.Count + list.Count), list2.ToArray());
								pathList.Spline = true;
								pathList.Width = 10f;
								pathList.InnerPadding = 1f;
								pathList.OuterPadding = 1f;
								pathList.InnerFade = 8f;
								pathList.OuterFade = 64f;
								pathList.RandomScale = 0.75f;
								pathList.MeshOffset = -0.5f;
								pathList.TerrainOffset = -1.5f;
								pathList.Topology = 16384;
								pathList.Splat = 128;
								pathList.Start = true;
								pathList.End = true;
								list.Add(pathList);
							}
							break;
						}
						if ((topology2 & num14) != 0 || val.y < 0f)
						{
							if (num6++ >= num7)
							{
								break;
							}
						}
						else if (num6 > 0)
						{
							break;
						}
						if (i % 4 == 0)
						{
							list2.Add(val);
						}
						normal = heightMap.GetNormal(val);
						num5 = Vector3.Angle(Vector3.up, normal);
						Vector2 val13 = normalized;
						val2 = Vector3Ex.XZ2D(normal);
						val2 = Vector2.Lerp(val13, ((Vector2)(ref val2)).normalized, 0.025f);
						normalized = ((Vector2)(ref val2)).normalized;
						num4 = num9;
					}
					list2.Clear();
				}
			}
			list.Sort((PathList a, PathList b) => b.Path.Points.Length.CompareTo(a.Path.Points.Length));
			int num15 = (int)(World.Size / 16);
			bool[,] array = new bool[num15, num15];
			for (int k = 0; k < list.Count; k++)
			{
				if (k >= num)
				{
					list.RemoveAt(k--);
					continue;
				}
				PathList pathList2 = list[k];
				bool flag2 = false;
				for (int l = 0; l < k; l++)
				{
					PathList pathList3 = list[l];
					Vector3[] points = pathList2.Path.Points;
					foreach (Vector3 val14 in points)
					{
						Vector3[] points2 = pathList3.Path.Points;
						foreach (Vector3 val15 in points2)
						{
							val6 = val14 - val15;
							if (((Vector3)(ref val6)).sqrMagnitude < 270400f)
							{
								list.RemoveAt(k--);
								flag2 = true;
							}
							if (flag2)
							{
								break;
							}
						}
						if (flag2)
						{
							break;
						}
					}
					if (flag2)
					{
						break;
					}
				}
				if (flag2)
				{
					continue;
				}
				for (int num16 = 0; num16 < pathList2.Path.Points.Length; num16++)
				{
					Vector3 val16 = pathList2.Path.Points[num16];
					int num17 = Mathf.Clamp((int)(TerrainMeta.NormalizeX(val16.x) * (float)num15), 0, num15 - 1);
					int num18 = Mathf.Clamp((int)(TerrainMeta.NormalizeZ(val16.z) * (float)num15), 0, num15 - 1);
					if (array[num18, num17])
					{
						list.RemoveAt(k--);
						flag2 = true;
						break;
					}
				}
				if (flag2)
				{
					continue;
				}
				int num19 = -1;
				int num20 = -1;
				for (int num21 = 0; num21 < pathList2.Path.Points.Length; num21++)
				{
					Vector3 val17 = pathList2.Path.Points[num21];
					int num22 = Mathf.Clamp((int)(TerrainMeta.NormalizeX(val17.x) * (float)num15), 0, num15 - 1);
					int num23 = Mathf.Clamp((int)(TerrainMeta.NormalizeZ(val17.z) * (float)num15), 0, num15 - 1);
					if (num19 != -1)
					{
						array[num23, num19] = true;
					}
					if (num20 != -1)
					{
						array[num20, num22] = true;
					}
					array[num23, num22] = true;
					num19 = num22;
					num20 = num23;
				}
			}
			for (int num24 = 0; num24 < list.Count; num24++)
			{
				list[num24].Name = "River " + (TerrainMeta.Path.Rivers.Count + num24);
			}
			foreach (PathList item in list)
			{
				item.Path.Smoothen(4, new Vector3(1f, 0f, 1f));
				item.Path.Smoothen(8, new Vector3(0f, 1f, 0f));
				item.Path.Resample(7.5f);
				item.Path.RecalculateTangents();
			}
			TerrainMeta.Path.Rivers.AddRange(list);
		}
	}
}
