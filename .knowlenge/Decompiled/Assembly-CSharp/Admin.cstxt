using System;
using System.Globalization;
using System.Linq;
using ConVar;
using Facepunch;
using Facepunch.Extend;
using Network;
using UnityEngine;

[Factory("global")]
public class Admin : ConsoleSystem
{
	public struct PlayerInfo
	{
		public string SteamID;

		public string OwnerSteamID;

		public string DisplayName;

		public int Ping;

		public string Address;

		public int ConnectedSeconds;

		public float VoiationLevel;

		public float CurrentLevel;

		public float UnspentXp;

		public float Health;
	}

	public struct ServerInfoOutput
	{
		public string Hostname;

		public int MaxPlayers;

		public int Players;

		public int Queued;

		public int Joining;

		public int EntityCount;

		public string GameTime;

		public int Uptime;

		public string Map;

		public float Framerate;

		public int Memory;

		public int Collections;

		public int NetworkIn;

		public int NetworkOut;

		public bool Restarting;

		public string SaveCreatedTime;
	}

	[ServerVar(Help = "Print out currently connected clients")]
	public static void status(Arg arg)
	{
		string @string = arg.GetString(0, string.Empty);
		string text = string.Empty;
		if (@string.Length == 0)
		{
			text = text + "hostname: " + ConVar.Server.hostname + "\n";
			text = text + "version : " + 2137 + " secure (secure mode enabled, connected to Steam3)\n";
			text = text + "map     : " + ConVar.Server.level + "\n";
			string text2 = text;
			text = text2 + "players : " + BasePlayer.activePlayerList.Count() + " (" + ConVar.Server.maxplayers + " max) (" + SingletonComponent<ServerMgr>.Instance.connectionQueue.Queued + " queued) (" + SingletonComponent<ServerMgr>.Instance.connectionQueue.Joining + " joining)\n\n";
		}
		TextTable textTable = new TextTable();
		textTable.AddColumn("id");
		textTable.AddColumn("name");
		textTable.AddColumn("ping");
		textTable.AddColumn("connected");
		textTable.AddColumn("addr");
		textTable.AddColumn("owner");
		textTable.AddColumn("violation");
		textTable.AddColumn("kicks");
		foreach (BasePlayer activePlayer in BasePlayer.activePlayerList)
		{
			try
			{
				if (!activePlayer.IsValid())
				{
					continue;
				}
				string userIDString = activePlayer.UserIDString;
				if (activePlayer.net.connection == null)
				{
					textTable.AddRow(userIDString, "NO CONNECTION");
					continue;
				}
				string text3 = activePlayer.net.connection.ownerid.ToString();
				string text4 = activePlayer.GetSubName().QuoteSafe();
				string text5 = Network.Net.sv.GetAveragePing(activePlayer.net.connection).ToString();
				string text6 = activePlayer.net.connection.ipaddress;
				string text7 = activePlayer.violationLevel.ToString("0.0");
				string text8 = activePlayer.GetAntiHackKicks().ToString();
				if (!arg.IsAdmin && !arg.IsRcon)
				{
					text6 = "xx.xxx.xx.xxx";
				}
				string text9 = activePlayer.net.connection.GetSecondsConnected() + "s";
				if (@string.Length <= 0 || text4.Contains(@string, CompareOptions.IgnoreCase) || userIDString.Contains(@string) || text3.Contains(@string) || text6.Contains(@string))
				{
					textTable.AddRow(userIDString, text4, text5, text9, text6, (!(text3 == userIDString)) ? text3 : string.Empty, text7, text8);
				}
			}
			catch (Exception ex)
			{
				textTable.AddRow(activePlayer.UserIDString, ex.Message.QuoteSafe());
			}
		}
		arg.ReplyWith(text + textTable.ToString());
	}

	[ServerVar(Help = "Print out stats of currently connected clients")]
	public static void stats(Arg arg)
	{
		TextTable table = new TextTable();
		table.AddColumn("id");
		table.AddColumn("name");
		table.AddColumn("time");
		table.AddColumn("kills");
		table.AddColumn("deaths");
		table.AddColumn("suicides");
		table.AddColumn("player");
		table.AddColumn("building");
		table.AddColumn("entity");
		Action<ulong, string> action = delegate(ulong id, string name)
		{
			ServerStatistics.Storage storage = ServerStatistics.Get(id);
			string text = TimeSpanEx.ToShortString(TimeSpan.FromSeconds(storage.Get("time")));
			string text2 = storage.Get("kill_player").ToString();
			string text3 = (storage.Get("deaths") - storage.Get("death_suicide")).ToString();
			string text4 = storage.Get("death_suicide").ToString();
			string text5 = storage.Get("hit_player_direct_los").ToString();
			string text6 = storage.Get("hit_player_indirect_los").ToString();
			string text7 = storage.Get("hit_building_direct_los").ToString();
			string text8 = storage.Get("hit_building_indirect_los").ToString();
			string text9 = storage.Get("hit_entity_direct_los").ToString();
			string text10 = storage.Get("hit_entity_indirect_los").ToString();
			table.AddRow(id.ToString(), name, text, text2, text3, text4, text5 + " / " + text6, text7 + " / " + text8, text9 + " / " + text10);
		};
		ulong filterID = arg.GetUInt64(0, 0uL);
		if (filterID == 0)
		{
			string @string = arg.GetString(0, string.Empty);
			foreach (BasePlayer activePlayer in BasePlayer.activePlayerList)
			{
				try
				{
					if (activePlayer.IsValid())
					{
						string text11 = activePlayer.GetSubName().QuoteSafe();
						if (@string.Length <= 0 || text11.Contains(@string, CompareOptions.IgnoreCase))
						{
							action(activePlayer.userID, text11);
						}
					}
				}
				catch (Exception ex)
				{
					table.AddRow(activePlayer.UserIDString, ex.Message.QuoteSafe());
				}
			}
		}
		else
		{
			string arg2 = "N/A";
			BasePlayer basePlayer = BasePlayer.activePlayerList.Find((BasePlayer p) => p.userID == filterID);
			if ((bool)basePlayer)
			{
				arg2 = basePlayer.GetSubName().QuoteSafe();
			}
			action(filterID, arg2);
		}
		arg.ReplyWith(table.ToString());
	}

	[ServerVar]
	public static void kick(Arg arg)
	{
		BasePlayer player = ArgEx.GetPlayer(arg, 0);
		if (!player || player.net == null || player.net.connection == null)
		{
			arg.ReplyWith("Player not found");
			return;
		}
		string @string = arg.GetString(1, "no reason given");
		arg.ReplyWith("Kicked: " + player.displayName);
		Chat.Broadcast("Kicking " + player.displayName + " (" + @string + ")", "SERVER", "#eee", 0uL);
		player.Kick("Kicked: " + arg.GetString(1, "No Reason Given"));
	}

	[ServerVar]
	public static void kickall(Arg arg)
	{
		BasePlayer[] array = BasePlayer.activePlayerList.ToArray();
		foreach (BasePlayer basePlayer in array)
		{
			basePlayer.Kick("Kicked: " + arg.GetString(1, "No Reason Given"));
		}
	}

	[ServerVar]
	public static void ban(Arg arg)
	{
		BasePlayer player = ArgEx.GetPlayer(arg, 0);
		if (!player || player.net == null || player.net.connection == null)
		{
			arg.ReplyWith("Player not found");
			return;
		}
		ServerUsers.User user = ServerUsers.Get(player.userID);
		if (user != null && user.group == ServerUsers.UserGroup.Banned)
		{
			arg.ReplyWith("User " + player.userID + " is already banned");
			return;
		}
		string @string = arg.GetString(1, "No Reason Given");
		ServerUsers.Set(player.userID, ServerUsers.UserGroup.Banned, player.displayName, @string);
		string text = string.Empty;
		if (player.IsConnected && player.net.connection.ownerid != player.net.connection.userid)
		{
			text = text + " and also banned ownerid " + player.net.connection.ownerid;
			ServerUsers.Set(player.net.connection.ownerid, ServerUsers.UserGroup.Banned, player.displayName, arg.GetString(1, "Family share owner of " + player.net.connection.userid));
		}
		ServerUsers.Save();
		arg.ReplyWith("Kickbanned User: " + player.userID + " - " + player.displayName + text);
		Chat.Broadcast("Kickbanning " + player.displayName + " (" + @string + ")", "SERVER", "#eee", 0uL);
		Network.Net.sv.Kick(player.net.connection, "Banned: " + @string);
	}

	[ServerVar]
	public static void moderatorid(Arg arg)
	{
		ulong uInt = arg.GetUInt64(0, 0uL);
		string @string = arg.GetString(1, "unnamed");
		string string2 = arg.GetString(2, "no reason");
		if (uInt < 70000000000000000L)
		{
			arg.ReplyWith("This doesn't appear to be a 64bit steamid: " + uInt);
			return;
		}
		ServerUsers.User user = ServerUsers.Get(uInt);
		if (user != null && user.group == ServerUsers.UserGroup.Moderator)
		{
			arg.ReplyWith("User " + uInt + " is already a Moderator");
			return;
		}
		ServerUsers.Set(uInt, ServerUsers.UserGroup.Moderator, @string, string2);
		arg.ReplyWith("Added moderator " + @string + ", steamid " + uInt);
	}

	[ServerVar]
	public static void ownerid(Arg arg)
	{
		ulong uInt = arg.GetUInt64(0, 0uL);
		string @string = arg.GetString(1, "unnamed");
		string string2 = arg.GetString(2, "no reason");
		if (uInt < 70000000000000000L)
		{
			arg.ReplyWith("This doesn't appear to be a 64bit steamid: " + uInt);
			return;
		}
		ServerUsers.User user = ServerUsers.Get(uInt);
		if (user != null && user.group == ServerUsers.UserGroup.Owner)
		{
			arg.ReplyWith("User " + uInt + " is already an Owner");
			return;
		}
		ServerUsers.Set(uInt, ServerUsers.UserGroup.Owner, @string, string2);
		arg.ReplyWith("Added owner " + @string + ", steamid " + uInt);
	}

	[ServerVar]
	public static void removemoderator(Arg arg)
	{
		ulong uInt = arg.GetUInt64(0, 0uL);
		if (uInt < 70000000000000000L)
		{
			arg.ReplyWith("This doesn't appear to be a 64bit steamid: " + uInt);
			return;
		}
		ServerUsers.User user = ServerUsers.Get(uInt);
		if (user == null || user.group != ServerUsers.UserGroup.Moderator)
		{
			arg.ReplyWith("User " + uInt + " isn't a moderator");
			return;
		}
		ServerUsers.Remove(uInt);
		arg.ReplyWith("Removed Moderator: " + uInt);
	}

	[ServerVar]
	public static void removeowner(Arg arg)
	{
		ulong uInt = arg.GetUInt64(0, 0uL);
		if (uInt < 70000000000000000L)
		{
			arg.ReplyWith("This doesn't appear to be a 64bit steamid: " + uInt);
			return;
		}
		ServerUsers.User user = ServerUsers.Get(uInt);
		if (user == null || user.group != ServerUsers.UserGroup.Owner)
		{
			arg.ReplyWith("User " + uInt + " isn't an owner");
			return;
		}
		ServerUsers.Remove(uInt);
		arg.ReplyWith("Removed Owner: " + uInt);
	}

	[ServerVar]
	public static void banid(Arg arg)
	{
		ulong uInt = arg.GetUInt64(0, 0uL);
		string @string = arg.GetString(1, "unnamed");
		string string2 = arg.GetString(2, "no reason");
		if (uInt < 70000000000000000L)
		{
			arg.ReplyWith("This doesn't appear to be a 64bit steamid: " + uInt);
			return;
		}
		ServerUsers.User user = ServerUsers.Get(uInt);
		if (user != null && user.group == ServerUsers.UserGroup.Banned)
		{
			arg.ReplyWith("User " + uInt + " is already banned");
			return;
		}
		ServerUsers.Set(uInt, ServerUsers.UserGroup.Banned, @string, string2);
		arg.ReplyWith("Banned User: " + uInt + " - " + @string);
	}

	[ServerVar]
	public static void unban(Arg arg)
	{
		ulong uInt = arg.GetUInt64(0, 0uL);
		if (uInt < 70000000000000000L)
		{
			arg.ReplyWith("This doesn't appear to be a 64bit steamid: " + uInt);
			return;
		}
		ServerUsers.User user = ServerUsers.Get(uInt);
		if (user == null || user.group != ServerUsers.UserGroup.Banned)
		{
			arg.ReplyWith("User " + uInt + " isn't banned");
			return;
		}
		ServerUsers.Remove(uInt);
		arg.ReplyWith("Unbanned User: " + uInt);
	}

	[ServerVar]
	public static void skipqueue(Arg arg)
	{
		ulong uInt = arg.GetUInt64(0, 0uL);
		if (uInt < 70000000000000000L)
		{
			arg.ReplyWith("This doesn't appear to be a 64bit steamid: " + uInt);
		}
		else
		{
			SingletonComponent<ServerMgr>.Instance.connectionQueue.SkipQueue(uInt);
		}
	}

	[ServerVar(Help = "Print out currently connected clients etc")]
	public static void players(Arg arg)
	{
		TextTable textTable = new TextTable();
		textTable.AddColumn("id");
		textTable.AddColumn("name");
		textTable.AddColumn("ping");
		textTable.AddColumn("snap");
		textTable.AddColumn("updt");
		textTable.AddColumn("posi");
		textTable.AddColumn("dist");
		foreach (BasePlayer activePlayer in BasePlayer.activePlayerList)
		{
			string userIDString = activePlayer.UserIDString;
			string text = activePlayer.displayName.ToString();
			if (text.Length >= 14)
			{
				text = text.Substring(0, 14) + "..";
			}
			string text2 = text;
			string text3 = Network.Net.sv.GetAveragePing(activePlayer.net.connection).ToString();
			string text4 = activePlayer.GetQueuedUpdateCount(BasePlayer.NetworkQueue.Update).ToString();
			string text5 = activePlayer.GetQueuedUpdateCount(BasePlayer.NetworkQueue.UpdateDistance).ToString();
			textTable.AddRow(userIDString, text2, text3, string.Empty, text4, string.Empty, text5);
		}
		arg.ReplyWith(textTable.ToString());
	}

	[ServerVar(Help = "Sends a message in chat")]
	public static void say(Arg arg)
	{
		Chat.Broadcast(arg.FullString, "SERVER", "#eee", 0uL);
	}

	[ServerVar(Help = "Show user info for players on server.")]
	public static void users(Arg arg)
	{
		string text = "<slot:userid:\"name\">\n";
		int num = 0;
		foreach (BasePlayer activePlayer in BasePlayer.activePlayerList)
		{
			string text2 = text;
			text = text2 + activePlayer.userID + ":\"" + activePlayer.displayName + "\"\n";
			num++;
		}
		text = text + num + "users\n";
		arg.ReplyWith(text);
	}

	[ServerVar(Help = "List of banned users (sourceds compat)")]
	public static void banlist(Arg arg)
	{
		arg.ReplyWith(ServerUsers.BanListString());
	}

	[ServerVar(Help = "List of banned users - shows reasons and usernames")]
	public static void banlistex(Arg arg)
	{
		arg.ReplyWith(ServerUsers.BanListStringEx());
	}

	[ServerVar(Help = "List of banned users, by ID (sourceds compat)")]
	public static void listid(Arg arg)
	{
		arg.ReplyWith(ServerUsers.BanListString(bHeader: true));
	}

	[ServerVar]
	public static void mutevoice(Arg arg)
	{
		BasePlayer player = ArgEx.GetPlayer(arg, 0);
		if (!player || player.net == null || player.net.connection == null)
		{
			arg.ReplyWith("Player not found");
		}
		else
		{
			player.SetPlayerFlag(BasePlayer.PlayerFlags.VoiceMuted, b: true);
		}
	}

	[ServerVar]
	public static void unmutevoice(Arg arg)
	{
		BasePlayer player = ArgEx.GetPlayer(arg, 0);
		if (!player || player.net == null || player.net.connection == null)
		{
			arg.ReplyWith("Player not found");
		}
		else
		{
			player.SetPlayerFlag(BasePlayer.PlayerFlags.VoiceMuted, b: false);
		}
	}

	[ServerVar]
	public static void mutechat(Arg arg)
	{
		BasePlayer player = ArgEx.GetPlayer(arg, 0);
		if (!player || player.net == null || player.net.connection == null)
		{
			arg.ReplyWith("Player not found");
		}
		else
		{
			player.SetPlayerFlag(BasePlayer.PlayerFlags.ChatMute, b: true);
		}
	}

	[ServerVar]
	public static void unmutechat(Arg arg)
	{
		BasePlayer player = ArgEx.GetPlayer(arg, 0);
		if (!player || player.net == null || player.net.connection == null)
		{
			arg.ReplyWith("Player not found");
		}
		else
		{
			player.SetPlayerFlag(BasePlayer.PlayerFlags.ChatMute, b: false);
		}
	}

	[ServerVar]
	public static void clientperf(Arg arg)
	{
		foreach (BasePlayer activePlayer in BasePlayer.activePlayerList)
		{
			activePlayer.ClientRPCPlayer(null, activePlayer, "GetPerformanceReport");
		}
	}

	[ServerVar]
	public static void entid(Arg arg)
	{
		BaseEntity baseEntity = BaseNetworkable.serverEntities.Find(arg.GetUInt(1)) as BaseEntity;
		if (!(baseEntity == null) && !(baseEntity is BasePlayer))
		{
			string @string = arg.GetString(0, string.Empty);
			if (ArgEx.Player(arg) != null)
			{
				Debug.Log("[ENTCMD] " + ArgEx.Player(arg).displayName + "/" + ArgEx.Player(arg).userID + " used *" + @string + "* on ent: " + baseEntity.name);
			}
			switch (@string)
			{
			case "kill":
				baseEntity.Kill(BaseNetworkable.DestroyMode.Gib);
				break;
			case "lock":
				baseEntity.SetFlag(BaseEntity.Flags.Locked, b: true);
				break;
			case "unlock":
				baseEntity.SetFlag(BaseEntity.Flags.Locked, b: false);
				break;
			case "debug":
				baseEntity.SetFlag(BaseEntity.Flags.Debugging, b: true);
				break;
			case "undebug":
				baseEntity.SetFlag(BaseEntity.Flags.Debugging, b: false);
				break;
			case "who":
				arg.ReplyWith("Owner ID: " + baseEntity.OwnerID);
				break;
			default:
				arg.ReplyWith("Unknown command");
				break;
			}
		}
	}

	[ServerVar(Help = "Get a list of players")]
	public static PlayerInfo[] playerlist()
	{
		return BasePlayer.activePlayerList.Select(delegate(BasePlayer x)
		{
			PlayerInfo result = default(PlayerInfo);
			result.SteamID = x.userID.ToString();
			result.OwnerSteamID = x.OwnerID.ToString();
			result.DisplayName = x.displayName;
			result.Ping = Network.Net.sv.GetAveragePing(x.net.connection);
			result.Address = x.net.connection.ipaddress;
			result.ConnectedSeconds = (int)x.net.connection.GetSecondsConnected();
			result.VoiationLevel = x.violationLevel;
			result.Health = x.Health();
			return result;
		}).ToArray();
	}

	[ServerVar(Help = "List of banned users")]
	public static ServerUsers.User[] Bans()
	{
		return ServerUsers.GetAll(ServerUsers.UserGroup.Banned).ToArray();
	}

	[ServerVar(Help = "Get a list of information about the server")]
	public static ServerInfoOutput ServerInfo()
	{
		ServerInfoOutput result = default(ServerInfoOutput);
		result.Hostname = ConVar.Server.hostname;
		result.MaxPlayers = ConVar.Server.maxplayers;
		result.Players = BasePlayer.activePlayerList.Count;
		result.Queued = SingletonComponent<ServerMgr>.Instance.connectionQueue.Queued;
		result.Joining = SingletonComponent<ServerMgr>.Instance.connectionQueue.Joining;
		result.EntityCount = BaseNetworkable.serverEntities.Count;
		result.GameTime = ((!(TOD_Sky.Instance != null)) ? DateTime.UtcNow.ToString() : TOD_Sky.Instance.Cycle.DateTime.ToString());
		result.Uptime = (int)UnityEngine.Time.realtimeSinceStartup;
		result.Map = ConVar.Server.level;
		result.Framerate = Performance.report.frameRate;
		result.Memory = (int)Performance.report.memoryAllocations;
		result.Collections = (int)Performance.report.memoryCollections;
		result.NetworkIn = (int)((Network.Net.sv != null) ? Network.Net.sv.GetStat(null, NetworkPeer.StatTypeLong.BytesReceived_LastSecond) : 0);
		result.NetworkOut = (int)((Network.Net.sv != null) ? Network.Net.sv.GetStat(null, NetworkPeer.StatTypeLong.BytesSent_LastSecond) : 0);
		result.Restarting = SingletonComponent<ServerMgr>.Instance.Restarting;
		result.SaveCreatedTime = SaveRestore.SaveCreatedTime.ToString();
		return result;
	}

	[ServerVar(Help = "Get information about this build")]
	public static BuildInfo BuildInfo()
	{
		return Facepunch.BuildInfo.Current;
	}
}
