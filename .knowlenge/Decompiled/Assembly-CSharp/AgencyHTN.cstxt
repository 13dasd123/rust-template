using System;
using System.Collections.Generic;
using System.Diagnostics;
using Rust.Ai.HTN;
using Rust.Ai.HTN.ScientistJunkpile;

public class AgencyHTN
{
	private readonly HashSet<IHTNAgent> activeAgents = new HashSet<IHTNAgent>();

	private readonly List<IHTNAgent> dormantAgents = new List<IHTNAgent>();

	private readonly HashSet<IHTNAgent> pendingAddToActive = new HashSet<IHTNAgent>();

	private readonly HashSet<IHTNAgent> pendingAddToDormant = new HashSet<IHTNAgent>();

	private readonly HashSet<IHTNAgent> pendingRemoveFromActive = new HashSet<IHTNAgent>();

	private readonly HashSet<IHTNAgent> pendingRemoveFromDormant = new HashSet<IHTNAgent>();

	private readonly List<HTNPlayer> tickingPlayers = new List<HTNPlayer>();

	private readonly List<HTNPlayer> tickingJunkpilePlayers = new List<HTNPlayer>();

	private readonly List<HTNAnimal> tickingAnimals = new List<HTNAnimal>();

	private int playerTickIndex;

	private int junkpilePlayerTickIndex;

	private int animalTickIndex;

	private Stopwatch watch = new Stopwatch();

	private int lastWakeUpDormantIndex;

	private readonly BasePlayer[] playerVicinityQuery = new BasePlayer[1];

	private readonly Func<BasePlayer, bool> filter = InterestedInPlayersOnly;

	internal void OnEnableAgency()
	{
	}

	internal void OnDisableAgency()
	{
	}

	public void InvokedTick()
	{
		watch.Reset();
		watch.Start();
		int num = playerTickIndex;
		while (tickingPlayers.Count > 0)
		{
			if (playerTickIndex >= tickingPlayers.Count)
			{
				playerTickIndex = 0;
			}
			HTNPlayer hTNPlayer = tickingPlayers[playerTickIndex];
			if (hTNPlayer != null && hTNPlayer.transform != null && !hTNPlayer.IsDestroyed)
			{
				hTNPlayer.Tick();
			}
			playerTickIndex++;
			if (playerTickIndex >= tickingPlayers.Count)
			{
				playerTickIndex = 0;
			}
			if (playerTickIndex == num || watch.Elapsed.TotalMilliseconds > (double)ai_htn_player_tick_budget)
			{
				break;
			}
		}
		watch.Reset();
		watch.Start();
		num = junkpilePlayerTickIndex;
		while (tickingJunkpilePlayers.Count > 0)
		{
			if (junkpilePlayerTickIndex >= tickingJunkpilePlayers.Count)
			{
				junkpilePlayerTickIndex = 0;
			}
			HTNPlayer hTNPlayer2 = tickingJunkpilePlayers[junkpilePlayerTickIndex];
			if (hTNPlayer2 != null && hTNPlayer2.transform != null && !hTNPlayer2.IsDestroyed)
			{
				hTNPlayer2.Tick();
			}
			junkpilePlayerTickIndex++;
			if (junkpilePlayerTickIndex >= tickingJunkpilePlayers.Count)
			{
				junkpilePlayerTickIndex = 0;
			}
			if (junkpilePlayerTickIndex == num || watch.Elapsed.TotalMilliseconds > (double)ai_htn_player_junkpile_tick_budget)
			{
				break;
			}
		}
		watch.Reset();
		watch.Start();
		num = animalTickIndex;
		while (tickingAnimals.Count > 0)
		{
			if (animalTickIndex >= tickingAnimals.Count)
			{
				animalTickIndex = 0;
			}
			HTNAnimal hTNAnimal = tickingAnimals[animalTickIndex];
			if (hTNAnimal != null && hTNAnimal.transform != null && !hTNAnimal.IsDestroyed)
			{
				hTNAnimal.Tick();
			}
			animalTickIndex++;
			if (animalTickIndex >= tickingAnimals.Count)
			{
				animalTickIndex = 0;
			}
			if (animalTickIndex == num || watch.Elapsed.TotalMilliseconds > (double)ai_htn_animal_tick_budget)
			{
				break;
			}
		}
	}

	public void Add(IHTNAgent agent)
	{
		if (ai_dormant)
		{
			if (IsAgentCloseToPlayers(agent))
			{
				AddActiveAgency(agent);
			}
			else
			{
				AddDormantAgency(agent);
			}
		}
		else
		{
			AddActiveAgency(agent);
		}
	}

	public void Remove(IHTNAgent agent)
	{
		RemoveActiveAgency(agent);
		if (ai_dormant)
		{
			RemoveDormantAgency(agent);
		}
	}

	internal void AddActiveAgency(IHTNAgent agent)
	{
		if (!pendingAddToActive.Contains(agent))
		{
			pendingAddToActive.Add(agent);
		}
	}

	internal void AddDormantAgency(IHTNAgent agent)
	{
		if (!pendingAddToDormant.Contains(agent))
		{
			pendingAddToDormant.Add(agent);
		}
	}

	internal void RemoveActiveAgency(IHTNAgent agent)
	{
		if (!pendingRemoveFromActive.Contains(agent))
		{
			pendingRemoveFromActive.Add(agent);
		}
	}

	internal void RemoveDormantAgency(IHTNAgent agent)
	{
		if (!pendingRemoveFromDormant.Contains(agent))
		{
			pendingRemoveFromDormant.Add(agent);
		}
	}

	internal void UpdateAgency()
	{
		AgencyCleanup();
		AgencyAddPending();
		if (ai_dormant)
		{
			TryWakeUpDormantAgents();
			TryMakeAgentsDormant();
		}
	}

	private void AgencyCleanup()
	{
		if (ai_dormant)
		{
			foreach (IHTNAgent item in pendingRemoveFromDormant)
			{
				if (item != null)
				{
					dormantAgents.Remove(item);
				}
			}
			pendingRemoveFromDormant.Clear();
		}
		foreach (IHTNAgent item2 in pendingRemoveFromActive)
		{
			if (item2 == null)
			{
				continue;
			}
			activeAgents.Remove(item2);
			HTNPlayer hTNPlayer = item2 as HTNPlayer;
			if ((bool)hTNPlayer)
			{
				if (hTNPlayer.AiDomain is ScientistJunkpileDomain)
				{
					tickingJunkpilePlayers.Remove(hTNPlayer);
				}
				else
				{
					tickingPlayers.Remove(hTNPlayer);
				}
				continue;
			}
			HTNAnimal hTNAnimal = item2 as HTNAnimal;
			if ((bool)hTNAnimal)
			{
				tickingAnimals.Remove(hTNAnimal);
			}
		}
		pendingRemoveFromActive.Clear();
	}

	private void AgencyAddPending()
	{
		if (ai_dormant)
		{
			foreach (IHTNAgent item in pendingAddToDormant)
			{
				if (item != null && !item.IsDestroyed)
				{
					dormantAgents.Add(item);
					item.IsDormant = true;
				}
			}
			pendingAddToDormant.Clear();
		}
		foreach (IHTNAgent item2 in pendingAddToActive)
		{
			if (item2 == null || item2.IsDestroyed || !activeAgents.Add(item2))
			{
				continue;
			}
			item2.IsDormant = false;
			HTNPlayer hTNPlayer = item2 as HTNPlayer;
			if ((bool)hTNPlayer)
			{
				if (hTNPlayer.AiDomain is ScientistJunkpileDomain)
				{
					tickingJunkpilePlayers.Add(hTNPlayer);
				}
				else
				{
					tickingPlayers.Add(hTNPlayer);
				}
				continue;
			}
			HTNAnimal hTNAnimal = item2 as HTNAnimal;
			if ((bool)hTNAnimal)
			{
				tickingAnimals.Add(hTNAnimal);
			}
		}
		pendingAddToActive.Clear();
	}

	private void TryWakeUpDormantAgents()
	{
		if (!ai_dormant || dormantAgents.Count == 0)
		{
			return;
		}
		if (lastWakeUpDormantIndex >= dormantAgents.Count)
		{
			lastWakeUpDormantIndex = 0;
		}
		int num = lastWakeUpDormantIndex;
		int num2 = 0;
		while (num2 < ai_dormant_max_wakeup_per_tick)
		{
			if (lastWakeUpDormantIndex >= dormantAgents.Count)
			{
				lastWakeUpDormantIndex = 0;
			}
			if (lastWakeUpDormantIndex == num && num2 > 0)
			{
				break;
			}
			IHTNAgent iHTNAgent = dormantAgents[lastWakeUpDormantIndex];
			lastWakeUpDormantIndex++;
			num2++;
			if (iHTNAgent.IsDestroyed)
			{
				RemoveDormantAgency(iHTNAgent);
			}
			else if (IsAgentCloseToPlayers(iHTNAgent))
			{
				AddActiveAgency(iHTNAgent);
				RemoveDormantAgency(iHTNAgent);
			}
		}
	}

	private void TryMakeAgentsDormant()
	{
		if (!ai_dormant)
		{
			return;
		}
		foreach (IHTNAgent activeAgent in activeAgents)
		{
			if (activeAgent.IsDestroyed)
			{
				RemoveActiveAgency(activeAgent);
			}
			else if (!IsAgentCloseToPlayers(activeAgent))
			{
				AddDormantAgency(activeAgent);
				RemoveActiveAgency(activeAgent);
			}
		}
	}

	private bool IsAgentCloseToPlayers(IHTNAgent agent)
	{
		int playersInSphere = BaseEntity.Query.Server.GetPlayersInSphere(agent.transform.position, ai_to_player_distance_wakeup_range, playerVicinityQuery, filter);
		return playersInSphere > 0;
	}
}
