using System;
using UnityEngine;

[Serializable]
private class PathData
{
	public string name;

	public bool spline;

	public bool start;

	public bool end;

	public float width;

	public float innerPadding;

	public float outerPadding;

	public float innerFade;

	public float outerFade;

	public float randomScale;

	public float meshOffset;

	public float terrainOffset;

	public int splat;

	public int topology;

	public VectorData[] nodes;

	public void FromPathList(PathList src)
	{
		name = src.Name;
		spline = src.Spline;
		start = src.Start;
		end = src.End;
		width = src.Width;
		innerPadding = src.InnerPadding;
		outerPadding = src.OuterPadding;
		innerFade = src.InnerFade;
		outerFade = src.OuterFade;
		randomScale = src.RandomScale;
		meshOffset = src.MeshOffset;
		terrainOffset = src.TerrainOffset;
		splat = src.Splat;
		topology = src.Topology;
		nodes = Array.ConvertAll(src.Path.Points, (Converter<Vector3, VectorData>)((Vector3 item) => item));
	}

	public PathList ToPathList()
	{
		PathList pathList = new PathList(name, Array.ConvertAll(nodes, (Converter<VectorData, Vector3>)((VectorData item) => item)));
		pathList.Spline = spline;
		pathList.Start = start;
		pathList.End = end;
		pathList.Width = width;
		pathList.InnerPadding = innerPadding;
		pathList.OuterPadding = outerPadding;
		pathList.InnerFade = innerFade;
		pathList.OuterFade = outerFade;
		pathList.RandomScale = randomScale;
		pathList.MeshOffset = meshOffset;
		pathList.TerrainOffset = terrainOffset;
		pathList.Splat = splat;
		pathList.Topology = topology;
		pathList.Path.RecalculateTangents();
		return pathList;
	}
}
