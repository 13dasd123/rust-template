using System;
using Rust.Ai.Gen2;
using UnityEngine;

[Serializable]
[SoftRequireComponent(typeof(RootMotionPlayer))]
public class State_EatFood : FSMStateBase
{
	[SerializeField]
	protected AnimationClip Animation;

	private const float damageToCorpsesPerLoop = 2.5f;

	private const float timeToForgetSightingWhileEating = 5f;

	private bool isAnimationPlaying;

	public override EFSMStateStatus OnStateEnter()
	{
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		if (!base.Senses.FindFood(out var food))
		{
			return EFSMStateStatus.Failure;
		}
		Vector3 val = ((Component)food).transform.position - ((Component)Owner).transform.position;
		val.y = 0f;
		((Component)Owner).transform.rotation = Quaternion.LookRotation(val);
		base.Senses.timeToForgetSightings.Value = 5f;
		PlayAnimation();
		return base.OnStateEnter();
	}

	private void PlayAnimation()
	{
		isAnimationPlaying = true;
		base.AnimPlayer.PlayServer(Animation, OnAnimationEnd);
	}

	private void OnAnimationEnd()
	{
		isAnimationPlaying = false;
	}

	public override EFSMStateStatus OnStateUpdate(float deltaTime)
	{
		if (!base.Senses.FindFood(out var food))
		{
			return EFSMStateStatus.Failure;
		}
		if (isAnimationPlaying)
		{
			return base.OnStateUpdate(deltaTime);
		}
		if (food is BaseCorpse baseCorpse)
		{
			baseCorpse.Hurt(2.5f);
			if (baseCorpse.IsDead())
			{
				base.Senses.ClearTarget();
				return EFSMStateStatus.Success;
			}
			PlayAnimation();
		}
		else if (food is DroppedItem droppedItem)
		{
			droppedItem.item.amount = Mathf.FloorToInt((float)droppedItem.item.amount * 0.5f);
			if (droppedItem.item.amount <= 0)
			{
				droppedItem.DestroyItem();
				droppedItem.Kill();
				base.Senses.ClearTarget();
				return EFSMStateStatus.Success;
			}
			droppedItem.item.MarkDirty();
			PlayAnimation();
		}
		return base.OnStateUpdate(deltaTime);
	}

	public override void OnStateExit()
	{
		base.Senses.timeToForgetSightings.Reset();
		base.AnimPlayer.StopServer();
	}
}
