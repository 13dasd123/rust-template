using UnityEngine;

public class Query
{
	public struct Input
	{
		public Vector3 position;

		public RadiusSpace radiusSpace;

		public float radius;

		public int sampleCount;

		public float smoothingSpeed;
	}

	public struct Internal
	{
		public int id;

		public void Reset()
		{
			id = -1;
		}
	}

	public struct Result
	{
		public int passed;

		public float coverage;

		public float smoothCoverage;

		public float weightedCoverage;

		public float weightedSmoothCoverage;

		public bool originOccluded;

		public int frame;

		public float originVisibility;

		public float originSmoothVisibility;

		public void Reset()
		{
			passed = 0;
			coverage = 1f;
			smoothCoverage = 1f;
			weightedCoverage = 1f;
			weightedSmoothCoverage = 1f;
			originOccluded = false;
			frame = -1;
			originVisibility = 0f;
			originSmoothVisibility = 0f;
		}
	}

	public Input input = default(Input);

	public Internal intern = default(Internal);

	public Result result = default(Result);

	public bool IsRegistered => intern.id >= 0;

	public Query()
	{
		Reset();
	}

	public Query(Vector3 position, RadiusSpace radiusSpace, float radius, int sampleCount, float smoothingSpeed = 15f)
	{
		Reset();
		input.position = position;
		input.radiusSpace = radiusSpace;
		input.radius = radius;
		input.sampleCount = sampleCount;
		input.smoothingSpeed = smoothingSpeed;
	}

	private void Reset()
	{
		intern.Reset();
		result.Reset();
	}

	public void Register()
	{
		RegisterQuery(this);
	}

	public void Update(Vector3 position, float radius)
	{
		if (intern.id >= 0)
		{
			input.position = position;
			input.radius = radius;
			UpdateQuery(this);
		}
	}

	public void UpdatePosition(Vector3 position)
	{
		input.position = position;
		UpdateQuery(this);
	}

	public void UpdateRadius(float radius)
	{
		input.radius = radius;
		UpdateQuery(this);
	}

	public void Unregister()
	{
		UnregisterQuery(this);
	}
}
