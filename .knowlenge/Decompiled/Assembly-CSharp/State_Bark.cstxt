using System;
using Rust.Ai.Gen2;
using UnityEngine;

[Serializable]
[SoftRequireComponent(typeof(BlackboardComponent))]
public class State_Bark : State_PlayAnimation
{
	[SerializeField]
	public float barkRange = 50f;

	public const string WolfNearbyAlreadyBarked = "WolfNearbyAlreadyBarked";

	public override EFSMStateStatus OnStateEnter()
	{
		if (!Owner.FindTarget(out var targetEntity))
		{
			return EFSMStateStatus.Failure;
		}
		Owner.GetComponent<BlackboardComponent>().Add("WolfNearbyAlreadyBarked");
		foreach (BaseEntity item in base.Senses.AlliesNearby)
		{
			if (item.IsValid() && !(Vector3.Distance(item.transform.position, Owner.transform.position) > barkRange))
			{
				item.GetComponent<BlackboardComponent>().Add("WolfNearbyAlreadyBarked");
				Wolf2FSM otherWolf = item.GetComponent<Wolf2FSM>();
				Owner.Invoke(delegate
				{
					otherWolf.Bark(targetEntity);
				}, Mathf.Max(0f, Animation.length + UnityEngine.Random.Range(-0.5f, 0.5f)));
			}
		}
		return base.OnStateEnter();
	}
}
