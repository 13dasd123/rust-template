using System;
using System.Collections.Generic;
using Facepunch;
using Rust;
using Rust.Ai.Gen2;
using UnityEngine;

[Serializable]
public class State_Hurt : State_PlayAnimationRM, IParametrized<HitInfo>
{
	[SerializeField]
	private RootMotionData StrongHitL;

	[SerializeField]
	private RootMotionData StrongHitR;

	[SerializeField]
	private RootMotionData WeakHit;

	[SerializeField]
	private float StaggerRatio = 0.5f;

	private HitInfo HitInfo;

	public void SetParameter(HitInfo parameter)
	{
		if (HitInfo != null)
		{
			Pool.Free<HitInfo>(ref HitInfo);
		}
		if (parameter == null)
		{
			Debug.LogWarning((object)"No parameter set for hurt state");
		}
		HitInfo = Pool.Get<HitInfo>();
		HitInfo.CopyFrom(parameter);
	}

	public override EFSMStateStatus OnStateEnter()
	{
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		if (HitInfo == null)
		{
			Debug.LogWarning((object)"No hitinfo set for hurt state");
			return base.OnStateEnter();
		}
		if (Object.op_Implicit((Object)(object)HitInfo.InitiatorPlayer) && !HitInfo.damageTypes.IsMeleeType())
		{
			HitInfo.InitiatorPlayer.LifeStoryShotHit(HitInfo.Weapon);
		}
		if (HitInfo.damageTypes.Has(DamageType.Heat))
		{
			base.Blackboard.Add("HitByFire");
		}
		float num = Owner.Health() + HitInfo.damageTypes.Total();
		float num2 = Owner.MaxHealth() * StaggerRatio;
		if (num > num2 && Owner.Health() < num2)
		{
			bool flag = Vector3.Dot(HitInfo.attackNormal, ((Component)Owner).transform.right) > 0f;
			Animation = (flag ? StrongHitL : StrongHitR);
		}
		else
		{
			Animation = WeakHit;
		}
		if (HitInfo.Initiator is BaseCombatEntity baseCombatEntity)
		{
			bool flag2 = true;
			if (base.Senses.FindTarget(out var target))
			{
				bool num3 = Owner.Distance((BaseEntity)baseCombatEntity) < 16f;
				bool flag3 = !target.IsNonNpcPlayer() && baseCombatEntity.IsNonNpcPlayer();
				flag2 = num3 || flag3;
			}
			if (flag2)
			{
				base.Senses.TrySetTarget(baseCombatEntity);
			}
		}
		if (!base.Senses.FindTarget(out var target2))
		{
			Debug.LogWarning((object)"Got attacked but couldn't find a target");
			return base.OnStateEnter();
		}
		PooledList<BaseEntity> val = Pool.Get<PooledList<BaseEntity>>();
		try
		{
			base.Senses.GetInitialAllies((List<BaseEntity>)(object)val);
			foreach (BaseEntity item in (List<BaseEntity>)(object)val)
			{
				((Component)item).GetComponent<Wolf2FSM>().Intimidate(target2);
			}
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
		return base.OnStateEnter();
	}

	public override void OnStateExit()
	{
		Pool.Free<HitInfo>(ref HitInfo);
		base.OnStateExit();
	}
}
