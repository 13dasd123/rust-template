using UnityEngine;

public class NPCMurderer : NPCPlayerApex
{
	public LootContainer.LootSpawnSlot[] LootSpawnSlots;

	public override BaseNpc.AiStatistics.FamilyEnum Family => BaseNpc.AiStatistics.FamilyEnum.Murderer;

	public override string Categorize()
	{
		return "murderer";
	}

	public override float StartHealth()
	{
		return Random.Range(100f, 100f);
	}

	public override float StartMaxHealth()
	{
		return 100f;
	}

	public override float MaxHealth()
	{
		return 100f;
	}

	public override bool ShouldDropActiveItem()
	{
		return false;
	}

	public override void CreateCorpse()
	{
		using (TimeWarning.New("Create corpse"))
		{
			NPCPlayerCorpse nPCPlayerCorpse = DropCorpse("assets/prefabs/npc/murderer/murderer_corpse.prefab") as NPCPlayerCorpse;
			if (!nPCPlayerCorpse)
			{
				return;
			}
			nPCPlayerCorpse.SetLootableIn(2f);
			nPCPlayerCorpse.SetFlag(Flags.Reserved5, HasPlayerFlag(PlayerFlags.DisplaySash));
			nPCPlayerCorpse.SetFlag(Flags.Reserved2, b: true);
			for (int i = 0; i < inventory.containerWear.itemList.Count; i++)
			{
				Item item = inventory.containerWear.itemList[i];
				if (item != null && item.info.shortname == "gloweyes")
				{
					inventory.containerWear.Remove(item);
					break;
				}
			}
			nPCPlayerCorpse.TakeFrom(inventory.containerMain, inventory.containerWear, inventory.containerBelt);
			nPCPlayerCorpse.playerName = base.displayName;
			nPCPlayerCorpse.playerSteamID = userID;
			nPCPlayerCorpse.Spawn();
			nPCPlayerCorpse.TakeChildren(this);
			ItemContainer[] containers = nPCPlayerCorpse.containers;
			foreach (ItemContainer itemContainer in containers)
			{
				itemContainer.Clear();
			}
			if (LootSpawnSlots.Length <= 0)
			{
				return;
			}
			LootContainer.LootSpawnSlot[] lootSpawnSlots = LootSpawnSlots;
			for (int k = 0; k < lootSpawnSlots.Length; k++)
			{
				LootContainer.LootSpawnSlot lootSpawnSlot = lootSpawnSlots[k];
				for (int l = 0; l < lootSpawnSlot.numberToSpawn; l++)
				{
					float num = Random.Range(0f, 1f);
					if (num <= lootSpawnSlot.probability)
					{
						lootSpawnSlot.definition.SpawnIntoContainer(nPCPlayerCorpse.containers[0]);
					}
				}
			}
		}
	}
}
