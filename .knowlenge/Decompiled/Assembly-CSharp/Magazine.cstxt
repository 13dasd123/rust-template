using System;
using Facepunch;
using ProtoBuf;
using Rust;
using UnityEngine;

[Serializable]
public class Magazine
{
	[Serializable]
	public struct Definition
	{
		[Tooltip("Set to 0 to not use inbuilt mag")]
		public int builtInSize;

		[InspectorFlags]
		[Tooltip("If using inbuilt mag, will accept these types of ammo")]
		public AmmoTypes ammoTypes;
	}

	public Definition definition;

	public int capacity;

	public int contents;

	[ItemSelector(ItemCategory.All)]
	public ItemDefinition ammoType;

	public bool allowPlayerReloading = true;

	public bool allowAmmoSwitching = true;

	public void ServerInit()
	{
		if (definition.builtInSize > 0)
		{
			capacity = definition.builtInSize;
		}
	}

	public Magazine Save()
	{
		Magazine val = Pool.Get<Magazine>();
		if ((Object)(object)ammoType == (Object)null)
		{
			val.capacity = capacity;
			val.contents = 0;
			val.ammoType = 0;
		}
		else
		{
			val.capacity = capacity;
			val.contents = contents;
			val.ammoType = ammoType.itemid;
		}
		return val;
	}

	public void Load(Magazine mag)
	{
		contents = mag.contents;
		capacity = mag.capacity;
		ammoType = ItemManager.FindItemDefinition(mag.ammoType);
	}

	public bool CanReload(IAmmoContainer ammoSource)
	{
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		if (contents >= capacity)
		{
			return false;
		}
		return ammoSource.HasAmmo(definition.ammoTypes);
	}
}
