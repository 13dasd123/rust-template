using System;
using System.Collections.Generic;
using System.Linq;
using Facepunch;
using ProtoBuf;
using Rust;
using UnityEngine;

[Serializable]
public class Magazine
{
	[Serializable]
	public struct Definition
	{
		[Tooltip("Set to 0 to not use inbuilt mag")]
		public int builtInSize;

		[Tooltip("If using inbuilt mag, will accept these types of ammo")]
		[InspectorFlags]
		public AmmoTypes ammoTypes;
	}

	public Definition definition;

	public int capacity;

	public int contents;

	[ItemSelector(ItemCategory.All)]
	public ItemDefinition ammoType;

	public void ServerInit()
	{
		if (definition.builtInSize > 0)
		{
			capacity = definition.builtInSize;
		}
	}

	public ProtoBuf.Magazine Save()
	{
		ProtoBuf.Magazine magazine = Pool.Get<ProtoBuf.Magazine>();
		if (ammoType == null)
		{
			magazine.capacity = capacity;
			magazine.contents = 0;
			magazine.ammoType = 0;
		}
		else
		{
			magazine.capacity = capacity;
			magazine.contents = contents;
			magazine.ammoType = ammoType.itemid;
		}
		return magazine;
	}

	public void Load(ProtoBuf.Magazine mag)
	{
		contents = mag.contents;
		capacity = mag.capacity;
		ammoType = ItemManager.FindItemDefinition(mag.ammoType);
	}

	public bool CanReload(BasePlayer owner)
	{
		if (contents >= capacity)
		{
			return false;
		}
		return owner.inventory.HasAmmo(definition.ammoTypes);
	}

	public bool CanAiReload(BasePlayer owner)
	{
		if (contents >= capacity)
		{
			return false;
		}
		return true;
	}

	public void SwitchAmmoTypesIfNeeded(BasePlayer owner)
	{
		List<Item> list = owner.inventory.FindItemIDs(ammoType.itemid).ToList();
		if (list.Count != 0)
		{
			return;
		}
		List<Item> list2 = new List<Item>();
		owner.inventory.FindAmmo(list2, definition.ammoTypes);
		if (list2.Count == 0)
		{
			return;
		}
		list = owner.inventory.FindItemIDs(list2[0].info.itemid).ToList();
		if (list != null && list.Count != 0)
		{
			if (contents > 0)
			{
				owner.GiveItem(ItemManager.CreateByItemID(ammoType.itemid, contents, 0uL));
				contents = 0;
			}
			ammoType = list[0].info;
		}
	}

	public bool Reload(BasePlayer owner, int desiredAmount = -1)
	{
		List<Item> list = owner.inventory.FindItemIDs(ammoType.itemid).ToList();
		if (list.Count == 0)
		{
			List<Item> list2 = new List<Item>();
			owner.inventory.FindAmmo(list2, definition.ammoTypes);
			if (list2.Count == 0)
			{
				return false;
			}
			list = owner.inventory.FindItemIDs(list2[0].info.itemid).ToList();
			if (list == null || list.Count == 0)
			{
				return false;
			}
			if (contents > 0)
			{
				owner.GiveItem(ItemManager.CreateByItemID(ammoType.itemid, contents, 0uL));
				contents = 0;
			}
			ammoType = list[0].info;
		}
		int num = desiredAmount;
		if (num == -1)
		{
			num = capacity - contents;
		}
		foreach (Item item in list)
		{
			_ = item.amount;
			int num2 = Mathf.Min(num, item.amount);
			item.UseItem(num2);
			contents += num2;
			num -= num2;
			if (num <= 0)
			{
				break;
			}
		}
		return false;
	}
}
