using UnityEngine;

public class BaseFollowPathState : BasicAIState
{
	private AIMovePointPath path;

	private StateStatus status;

	private AIMovePoint currentTargetPoint;

	private float currentWaitTime;

	private AIMovePointPath.PathDirection pathDirection;

	private int currentNodeIndex;

	public BaseFollowPathState()
		: base(AIState.FollowPath)
	{
	}

	public override void StateEnter(BaseAIBrain brain, BaseEntity entity)
	{
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		base.StateEnter(brain, entity);
		status = StateStatus.Error;
		brain.Navigator.SetBrakingEnabled(flag: false);
		path = brain.Navigator.Path;
		if ((Object)(object)path == (Object)null)
		{
			AIInformationZone forPoint = AIInformationZone.GetForPoint(entity.ServerPosition);
			if ((Object)(object)forPoint == (Object)null)
			{
				return;
			}
			path = forPoint.GetNearestPath(entity.ServerPosition);
			if ((Object)(object)path == (Object)null)
			{
				return;
			}
		}
		currentNodeIndex = path.FindNearestPointIndex(entity.ServerPosition);
		currentTargetPoint = path.FindNearestPoint(entity.ServerPosition);
		if (!((Object)(object)currentTargetPoint == (Object)null))
		{
			status = StateStatus.Running;
			currentWaitTime = 0f;
			brain.Navigator.SetDestination(((Component)currentTargetPoint).transform.position, BaseNavigator.NavigationSpeed.Slow);
		}
	}

	public override void StateLeave(BaseAIBrain brain, BaseEntity entity)
	{
		base.StateLeave(brain, entity);
		brain.Navigator.ClearFacingDirectionOverride();
		brain.Navigator.SetBrakingEnabled(flag: true);
	}

	public override StateStatus StateThink(float delta, BaseAIBrain brain, BaseEntity entity)
	{
		//IL_0181: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0149: Unknown result type (might be due to invalid IL or missing references)
		base.StateThink(delta, brain, entity);
		if (status == StateStatus.Error)
		{
			return status;
		}
		if (!brain.Navigator.Moving)
		{
			if (currentWaitTime <= 0f && currentTargetPoint.HasLookAtPoints())
			{
				Transform randomLookAtPoint = currentTargetPoint.GetRandomLookAtPoint();
				if ((Object)(object)randomLookAtPoint != (Object)null)
				{
					brain.Navigator.SetFacingDirectionOverride(Vector3Ex.Direction2D(((Component)randomLookAtPoint).transform.position, entity.ServerPosition));
				}
			}
			if (currentTargetPoint.WaitTime > 0f)
			{
				currentWaitTime += delta;
			}
			if (currentTargetPoint.WaitTime <= 0f || currentWaitTime >= currentTargetPoint.WaitTime)
			{
				brain.Navigator.ClearFacingDirectionOverride();
				currentWaitTime = 0f;
				int num = currentNodeIndex;
				currentNodeIndex = path.GetNextPointIndex(currentNodeIndex, ref pathDirection);
				currentTargetPoint = path.GetPointAtIndex(currentNodeIndex);
				if ((!((Object)(object)currentTargetPoint != (Object)null) || currentNodeIndex != num) && ((Object)(object)currentTargetPoint == (Object)null || !brain.Navigator.SetDestination(((Component)currentTargetPoint).transform.position, BaseNavigator.NavigationSpeed.Slow)))
				{
					return StateStatus.Error;
				}
			}
		}
		else if ((Object)(object)currentTargetPoint != (Object)null)
		{
			brain.Navigator.SetDestination(((Component)currentTargetPoint).transform.position, BaseNavigator.NavigationSpeed.Slow, 1f);
		}
		return StateStatus.Running;
	}
}
