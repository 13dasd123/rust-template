using UnityEngine;

public class PlaceDecorValueNoise : ProceduralComponent
{
	public SpawnFilter Filter;

	public string ResourceFolder = string.Empty;

	public NoiseParameters Cluster = new NoiseParameters(2, 0.5f, 1f, 0f);

	public float ObjectDensity = 100f;

	public override void Process(uint seed)
	{
		TerrainHeightMap heightMap = TerrainMeta.HeightMap;
		Prefab[] array = Prefab.Load("assets/bundled/prefabs/autospawn/" + ResourceFolder);
		if (array == null || array.Length == 0)
		{
			return;
		}
		Vector3 position = TerrainMeta.Position;
		Vector3 size = TerrainMeta.Size;
		int num = Mathf.RoundToInt(ObjectDensity * size.x * size.z * 1E-06f);
		float x = position.x;
		float z = position.z;
		float max = position.x + size.x;
		float max2 = position.z + size.z;
		float num2 = SeedRandom.Range(ref seed, -1E+09f, 1E+09f);
		float num3 = SeedRandom.Range(ref seed, -1E+09f, 1E+09f);
		int octaves = Cluster.Octaves;
		float offset = Cluster.Offset;
		float num4 = Cluster.Frequency * 0.01f;
		float amplitude = Cluster.Amplitude;
		for (int i = 0; i < num; i++)
		{
			float num5 = SeedRandom.Range(ref seed, x, max);
			float num6 = SeedRandom.Range(ref seed, z, max2);
			float normX = TerrainMeta.NormalizeX(num5);
			float normZ = TerrainMeta.NormalizeZ(num6);
			float num7 = SeedRandom.Value(ref seed);
			float factor = Filter.GetFactor(normX, normZ);
			Prefab random = ArrayEx.GetRandom(array, ref seed);
			if (factor <= 0f)
			{
				continue;
			}
			float num8 = offset + Noise.Turbulence(num2 + num5, num3 + num6, octaves, num4, amplitude);
			if (!(num8 * factor * factor < num7))
			{
				float height = heightMap.GetHeight(normX, normZ);
				Vector3 pos = new Vector3(num5, height, num6);
				Quaternion rot = random.Object.transform.localRotation;
				Vector3 scale = random.Object.transform.localScale;
				random.ApplyDecorComponents(ref pos, ref rot, ref scale);
				if (random.ApplyTerrainAnchors(ref pos, rot, scale, Filter) && random.ApplyTerrainChecks(pos, rot, scale, Filter) && random.ApplyTerrainFilters(pos, rot, scale))
				{
					random.ApplyTerrainModifiers(pos, rot, scale);
					World.Serialization.AddPrefab("Decor", random.ID, pos, rot, scale);
				}
			}
		}
	}
}
