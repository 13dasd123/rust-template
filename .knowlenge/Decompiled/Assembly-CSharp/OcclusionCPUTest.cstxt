using UnityEngine;

public class OcclusionCPUTest
{
	private static float DistanceToPlane(Vector4 vPlane, Vector4 vPoint)
	{
		return Vector4.Dot(new Vector4(vPoint.x, vPoint.y, vPoint.z, 1f), vPlane);
	}

	private static float FrustumCullSphere(Vector4[] frustumPlanes, Vector3 vCenter, float fRadius)
	{
		float a = Mathf.Min(DistanceToPlane(frustumPlanes[0], vCenter), DistanceToPlane(frustumPlanes[1], vCenter));
		float b = Mathf.Min(DistanceToPlane(frustumPlanes[2], vCenter), DistanceToPlane(frustumPlanes[3], vCenter));
		float b2 = Mathf.Min(DistanceToPlane(frustumPlanes[4], vCenter), DistanceToPlane(frustumPlanes[5], vCenter));
		return Mathf.Min(Mathf.Min(a, b), b2) + fRadius;
	}

	private static Vector4 ToVector4(Vector3 v, float w)
	{
		return new Vector4(v.x, v.y, v.z, w);
	}

	private static Vector4 ToVector4(float x)
	{
		return new Vector4(x, x, x, x);
	}

	private static Vector2 MulVector2(Vector2 v1, Vector2 v2)
	{
		return new Vector2(v1.x * v2.x, v1.y * v2.y);
	}

	public static Vector4 CullSphere(Camera camera, Vector4 Bounds, Matrix4x4 View, Matrix4x4 Projection, Matrix4x4 ViewProjection, Vector4[] frustumPlanes, Vector2 ViewportSize)
	{
		Vector3 vector = new Vector3(Bounds.x, Bounds.y, Bounds.z);
		float w = Bounds.w;
		Debug.DrawLine(vector, vector + Vector3.up, Color.red, 0.25f);
		float num = FrustumCullSphere(frustumPlanes, vector, Bounds.w);
		if (num > 0f)
		{
			Vector3 vector2 = new Vector3(View.m00, View.m01, View.m02);
			Vector3 vector3 = new Vector3(View.m10, View.m11, View.m12);
			float num2 = Vector3.Distance(camera.transform.position, vector);
			if (num2 > w)
			{
				float num3 = num2 * Mathf.Tan(Mathf.Asin(w / num2));
				Vector3 vector4 = vector3 * num3;
				Vector3 vector5 = vector2 * num3;
				Vector4 vector6 = ToVector4(vector + vector4 - vector5, 1f);
				Vector4 vector7 = ToVector4(vector + vector4 + vector5, 1f);
				Vector4 vector8 = ToVector4(vector - vector4 - vector5, 1f);
				Vector4 vector9 = ToVector4(vector - vector4 + vector5, 1f);
				Vector4 vector10 = ViewProjection * vector6;
				Vector4 vector11 = ViewProjection * vector7;
				Vector4 vector12 = ViewProjection * vector8;
				Vector4 vector13 = ViewProjection * vector9;
				Vector2 v = new Vector2(vector10.x, vector10.y) / vector10.w;
				Vector2 v2 = new Vector2(vector11.x, vector11.y) / vector11.w;
				Vector2 v3 = new Vector2(vector12.x, vector12.y) / vector12.w;
				Vector2 v4 = new Vector2(vector13.x, vector13.y) / vector13.w;
				v = MulVector2(new Vector2(0.5f, -0.5f), v) + new Vector2(0.5f, 0.5f);
				v2 = MulVector2(new Vector2(0.5f, -0.5f), v2) + new Vector2(0.5f, 0.5f);
				v3 = MulVector2(new Vector2(0.5f, -0.5f), v3) + new Vector2(0.5f, 0.5f);
				v4 = MulVector2(new Vector2(0.5f, -0.5f), v4) + new Vector2(0.5f, 0.5f);
				float num4 = Vector3.Distance(v, v2);
				Vector3 vector14 = View * ToVector4(vector, 1f);
				Vector3 v5 = vector14 - Vector3.Normalize(vector14) * w;
				Vector4 vector15 = Projection * ToVector4(v5, 1f);
				float f = num4 * Mathf.Max(ViewportSize.x, ViewportSize.y);
				float y = Mathf.Ceil(Mathf.Log(f, 2f));
				float num5 = (vector15.x / vector15.w * 0.5f + 0.5f) * ViewportSize.x;
				float num6 = (float)camera.pixelHeight - (vector15.y / vector15.w * -0.5f + 0.5f) * ViewportSize.y;
				float num7 = Vector3.Distance(v, v2) / 2f * ViewportSize.x;
				float num8 = Vector3.Distance(v, v3) / 2f * ViewportSize.y;
				Vector3 start = camera.ScreenToWorldPoint(new Vector3(num5 - num7, num6 - num8, camera.nearClipPlane));
				Vector3 vector16 = camera.ScreenToWorldPoint(new Vector3(num5 + num7, num6 - num8, camera.nearClipPlane));
				Vector3 vector17 = camera.ScreenToWorldPoint(new Vector3(num5 - num7, num6 + num8, camera.nearClipPlane));
				Vector3 end = camera.ScreenToWorldPoint(new Vector3(num5 + num7, num6 + num8, camera.nearClipPlane));
				Debug.DrawLine(start, vector16, Color.cyan, 0.25f);
				Debug.DrawLine(start, vector17, Color.cyan, 0.25f);
				Debug.DrawLine(vector17, end, Color.cyan, 0.25f);
				Debug.DrawLine(vector16, end, Color.cyan, 0.25f);
				float x = vector15.z / vector15.w;
				return new Vector4(x, y, 0f, 0f);
			}
			return Vector4.one;
		}
		return Vector4.zero;
	}
}
