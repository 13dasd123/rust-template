using System;
using Facepunch;
using UnityEngine;

[Serializable]
public class TargetInfo : IPooled
{
	public float damageReceivedFrom;

	public BaseEntity entity;

	public float lastSeenTime;

	public Vector3 lastSeenPosition;

	public void EnterPool()
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		entity = null;
		lastSeenPosition = Vector3.zero;
		lastSeenTime = 0f;
	}

	public void Setup(BaseEntity ent, float time)
	{
		entity = ent;
		lastSeenTime = time;
	}

	public void LeavePool()
	{
	}

	public float GetPriorityScore(BradleyAPC apc)
	{
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		BasePlayer basePlayer = entity as BasePlayer;
		if (Object.op_Implicit((Object)(object)basePlayer))
		{
			float num = Vector3.Distance(((Component)entity).transform.position, ((Component)apc).transform.position);
			float num2 = (1f - Mathf.InverseLerp(10f, 80f, num)) * 50f;
			float num3 = (((Object)(object)basePlayer.GetHeldEntity() == (Object)null) ? 0f : basePlayer.GetHeldEntity().hostileScore);
			float num4 = Mathf.InverseLerp(4f, 20f, num3) * 100f;
			float num5 = Mathf.InverseLerp(10f, 3f, Time.time - lastSeenTime) * 100f;
			float num6 = Mathf.InverseLerp(0f, 100f, damageReceivedFrom) * 50f;
			return num2 + num4 + num6 + num5;
		}
		return 0f;
	}

	public bool IsVisible()
	{
		if (lastSeenTime != -1f)
		{
			return Time.time - lastSeenTime < sightUpdateRate * 2f;
		}
		return false;
	}

	public bool IsValid()
	{
		return (Object)(object)entity != (Object)null;
	}
}
