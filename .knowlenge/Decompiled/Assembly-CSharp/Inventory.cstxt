using System.Linq;
using ConVar;
using Steamworks;
using UnityEngine;

[Factory("inventory")]
public class Inventory : ConsoleSystem
{
	[ServerUserVar]
	public static void lighttoggle(Arg arg)
	{
		BasePlayer basePlayer = ArgEx.Player(arg);
		if ((bool)basePlayer && !basePlayer.IsDead() && !basePlayer.IsSleeping())
		{
			basePlayer.LightToggle();
		}
	}

	[ServerUserVar]
	public static void endloot(Arg arg)
	{
		BasePlayer basePlayer = ArgEx.Player(arg);
		if ((bool)basePlayer && !basePlayer.IsDead() && !basePlayer.IsSleeping())
		{
			basePlayer.inventory.loot.Clear();
		}
	}

	[ServerVar]
	public static void give(Arg arg)
	{
		BasePlayer basePlayer = ArgEx.Player(arg);
		if (!basePlayer)
		{
			return;
		}
		Item item = ItemManager.CreateByPartialName(arg.GetString(0));
		if (item == null)
		{
			arg.ReplyWith("Invalid Item!");
			return;
		}
		int num = (item.amount = arg.GetInt(1, 1));
		float @float = arg.GetFloat(2, 1f);
		item.conditionNormalized = @float;
		item.OnVirginSpawn();
		if (!basePlayer.inventory.GiveItem(item))
		{
			item.Remove();
			arg.ReplyWith("Couldn't give item (inventory full?)");
			return;
		}
		basePlayer.Command("note.inv", item.info.itemid, num);
		Debug.Log("giving " + basePlayer.displayName + " " + num + " x " + item.info.displayName.english);
		if (basePlayer.IsDeveloper)
		{
			basePlayer.ChatMessage("you silently gave yourself " + num + " x " + item.info.displayName.english);
		}
		else
		{
			Chat.Broadcast(basePlayer.displayName + " gave themselves " + num + " x " + item.info.displayName.english, "SERVER", "#eee", 0uL);
		}
	}

	[ServerVar]
	public static void resetbp(Arg arg)
	{
		BasePlayer basePlayer = ArgEx.Player(arg);
		if ((bool)basePlayer)
		{
			basePlayer.blueprints.Reset();
		}
	}

	[ServerVar]
	public static void unlockall(Arg arg)
	{
		BasePlayer basePlayer = ArgEx.Player(arg);
		if ((bool)basePlayer)
		{
			basePlayer.blueprints.UnlockAll();
		}
	}

	[ServerVar]
	public static void giveall(Arg arg)
	{
		Item item = null;
		string text = "SERVER";
		if (ArgEx.Player(arg) != null)
		{
			text = ArgEx.Player(arg).displayName;
		}
		foreach (BasePlayer activePlayer in BasePlayer.activePlayerList)
		{
			item = ItemManager.CreateByPartialName(arg.GetString(0));
			if (item == null)
			{
				arg.ReplyWith("Invalid Item!");
				return;
			}
			item.amount = arg.GetInt(1, 1);
			item.OnVirginSpawn();
			if (!activePlayer.inventory.GiveItem(item))
			{
				item.Remove();
				arg.ReplyWith("Couldn't give item (inventory full?)");
				continue;
			}
			activePlayer.Command("note.inv", item.info.itemid, item.amount);
			Debug.Log(" [ServerVar] giving " + activePlayer.displayName + " " + item.amount + " x " + item.info.displayName.english);
		}
		if (item != null)
		{
			Chat.Broadcast(text + " gave everyone " + item.amount + " x " + item.info.displayName.english, "SERVER", "#eee", 0uL);
		}
	}

	[ServerVar]
	public static void giveto(Arg arg)
	{
		string text = "SERVER";
		if (ArgEx.Player(arg) != null)
		{
			text = ArgEx.Player(arg).displayName;
		}
		BasePlayer basePlayer = BasePlayer.Find(arg.GetString(0));
		if (basePlayer == null)
		{
			arg.ReplyWith("Couldn't find player!");
			return;
		}
		Item item = ItemManager.CreateByPartialName(arg.GetString(1));
		if (item == null)
		{
			arg.ReplyWith("Invalid Item!");
			return;
		}
		item.amount = arg.GetInt(2, 1);
		item.OnVirginSpawn();
		if (!basePlayer.inventory.GiveItem(item))
		{
			item.Remove();
			arg.ReplyWith("Couldn't give item (inventory full?)");
			return;
		}
		basePlayer.Command("note.inv", item.info.itemid, item.amount);
		Debug.Log(" [ServerVar] giving " + basePlayer.displayName + " " + item.amount + " x " + item.info.displayName.english);
		Chat.Broadcast(text + " gave " + basePlayer.displayName + " " + item.amount + " x " + item.info.displayName.english, "SERVER", "#eee", 0uL);
	}

	[ServerVar]
	public static void giveid(Arg arg)
	{
		BasePlayer basePlayer = ArgEx.Player(arg);
		if (!basePlayer)
		{
			return;
		}
		Item item = ItemManager.CreateByItemID(arg.GetInt(0), 1, 0uL);
		if (item == null)
		{
			arg.ReplyWith("Invalid Item!");
			return;
		}
		item.amount = arg.GetInt(1, 1);
		item.OnVirginSpawn();
		if (!basePlayer.inventory.GiveItem(item))
		{
			item.Remove();
			arg.ReplyWith("Couldn't give item (inventory full?)");
			return;
		}
		basePlayer.Command("note.inv", item.info.itemid, item.amount);
		Debug.Log(" [ServerVar] giving " + basePlayer.displayName + " " + item.amount + " x " + item.info.displayName.english);
		if (basePlayer.IsDeveloper)
		{
			basePlayer.ChatMessage("you silently gave yourself " + item.amount + " x " + item.info.displayName.english);
		}
		else
		{
			Chat.Broadcast(basePlayer.displayName + " gave themselves " + item.amount + " x " + item.info.displayName.english, "SERVER", "#eee", 0uL);
		}
	}

	[ServerVar]
	public static void givearm(Arg arg)
	{
		BasePlayer basePlayer = ArgEx.Player(arg);
		if (!basePlayer)
		{
			return;
		}
		Item item = ItemManager.CreateByItemID(arg.GetInt(0), 1, 0uL);
		if (item == null)
		{
			arg.ReplyWith("Invalid Item!");
			return;
		}
		item.amount = arg.GetInt(1, 1);
		item.OnVirginSpawn();
		if (!basePlayer.inventory.GiveItem(item, basePlayer.inventory.containerBelt))
		{
			item.Remove();
			arg.ReplyWith("Couldn't give item (inventory full?)");
			return;
		}
		basePlayer.Command("note.inv", item.info.itemid, item.amount);
		Debug.Log(" [ServerVar] giving " + basePlayer.displayName + " " + item.amount + " x " + item.info.displayName.english);
		if (basePlayer.IsDeveloper)
		{
			basePlayer.ChatMessage("you silently gave yourself " + item.amount + " x " + item.info.displayName.english);
		}
		else
		{
			Chat.Broadcast(basePlayer.displayName + " gave themselves " + item.amount + " x " + item.info.displayName.english, "SERVER", "#eee", 0uL);
		}
	}

	[ServerVar(Help = "Copies the players inventory to the player in front of them")]
	public static void copyTo(Arg arg)
	{
		BasePlayer basePlayer = ArgEx.Player(arg);
		if (basePlayer == null)
		{
			return;
		}
		BasePlayer lookingAtPlayer = RelationshipManager.GetLookingAtPlayer(basePlayer);
		if (lookingAtPlayer == null)
		{
			return;
		}
		lookingAtPlayer.inventory.containerBelt.Clear();
		lookingAtPlayer.inventory.containerWear.Clear();
		foreach (Item item in basePlayer.inventory.containerBelt.itemList)
		{
			lookingAtPlayer.inventory.containerBelt.AddItem(item.info, 1, item.skin);
		}
		foreach (Item item2 in basePlayer.inventory.containerWear.itemList)
		{
			lookingAtPlayer.inventory.containerWear.AddItem(item2.info, 1, item2.skin);
		}
		if (basePlayer.IsDeveloper)
		{
			basePlayer.ChatMessage("you silently copied items to " + lookingAtPlayer.displayName);
		}
		else
		{
			Chat.Broadcast(basePlayer.displayName + " copied their inventory to " + lookingAtPlayer.displayName, "SERVER", "#eee", 0uL);
		}
	}

	[ClientVar]
	[ServerVar]
	public static void defs(Arg arg)
	{
		if (Steamworks.SteamInventory.Definitions == null)
		{
			arg.ReplyWith("no definitions");
			return;
		}
		if (Steamworks.SteamInventory.Definitions.Length == 0)
		{
			arg.ReplyWith("0 definitions");
			return;
		}
		string[] obj = Steamworks.SteamInventory.Definitions.Select((InventoryDef x) => x.Name).ToArray();
		arg.ReplyWith(obj);
	}

	[ServerVar]
	[ClientVar]
	public static void reloaddefs(Arg arg)
	{
		Steamworks.SteamInventory.LoadItemDefinitions();
	}
}
