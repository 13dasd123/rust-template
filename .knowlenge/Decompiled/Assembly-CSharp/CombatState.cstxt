using UnityEngine;

public class CombatState : BasicAIState
{
	private float nextStrafeTime;

	public override void StateEnter()
	{
		base.StateEnter();
		brain.mainInterestPoint = GetEntity().transform.position;
		GetEntity().SetDesiredSpeed(HumanNPC.SpeedType.Walk);
	}

	public override float GetWeight()
	{
		if (!GetEntity().HasTarget())
		{
			return 0f;
		}
		if (!GetEntity().TargetInRange())
		{
			return 0f;
		}
		float num = 1f - Mathf.InverseLerp(GetEntity().GetIdealDistanceFromTarget(), GetEntity().EngagementRange(), GetEntity().DistanceToTarget());
		float num2 = 0.5f * num;
		if (GetEntity().CanSeeTarget())
		{
			num2 += 1f;
		}
		return num2;
	}

	public override void StateLeave()
	{
		GetEntity().SetDucked(wantsDucked: false);
		base.StateLeave();
	}

	public override void StateThink(float delta)
	{
		base.StateThink(delta);
		if (Time.time > nextStrafeTime)
		{
			if (Random.Range(0, 3) == 1)
			{
				nextStrafeTime = Time.time + Random.Range(2f, 3f);
				GetEntity().SetDucked(wantsDucked: true);
				GetEntity().Stop();
			}
			else
			{
				nextStrafeTime = Time.time + Random.Range(3f, 4f);
				GetEntity().SetDucked(wantsDucked: false);
				GetEntity().SetDesiredSpeed(HumanNPC.SpeedType.Walk);
				GetEntity().SetDestination(GetEntity().GetRandomPositionAround(brain.mainInterestPoint, 1f));
			}
		}
	}
}
