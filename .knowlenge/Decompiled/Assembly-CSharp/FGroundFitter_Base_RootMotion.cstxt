using System;
using FIMSpace.GroundFitter;
using UnityEngine;

public abstract class FGroundFitter_Base_RootMotion : FGroundFitter_Base
{
	[HideInInspector]
	[Tooltip("Making ground fitter translate with root motion")]
	public bool HandleRootMotion;

	[HideInInspector]
	[SerializeField]
	protected Transform parentTransform;

	[SerializeField]
	[HideInInspector]
	protected CharacterController optionalCharContr;

	[SerializeField]
	[HideInInspector]
	protected bool rootMotionRotation = true;

	protected Animator rootMAnimator;

	protected override void Reset()
	{
		base.Reset();
		parentTransform = ((Component)this).transform;
	}

	protected override void Start()
	{
		base.Start();
	}

	protected virtual void HandleRootMotionSupport()
	{
		if (HandleRootMotion)
		{
			if (!Object.op_Implicit((Object)(object)rootMAnimator))
			{
				rootMAnimator = ((Component)this).GetComponentInChildren<Animator>();
			}
			if ((Object)(object)((Component)rootMAnimator).gameObject != (Object)(object)((Component)this).gameObject && !rootMAnimator.applyRootMotion && !Object.op_Implicit((Object)(object)((Component)rootMAnimator).GetComponent<FGroundFitter_RootMotionHelper>()))
			{
				((Component)rootMAnimator).gameObject.AddComponent<FGroundFitter_RootMotionHelper>().OptionalFitter = this;
			}
			rootMAnimator.applyRootMotion = true;
		}
	}

	internal virtual void OnAnimatorMove()
	{
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_0113: Unknown result type (might be due to invalid IL or missing references)
		//IL_0124: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_013d: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0152: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0160: Unknown result type (might be due to invalid IL or missing references)
		//IL_016a: Unknown result type (might be due to invalid IL or missing references)
		if (!Object.op_Implicit((Object)(object)rootMAnimator))
		{
			return;
		}
		if (Object.op_Implicit((Object)(object)optionalCharContr))
		{
			if (rootMAnimator.deltaPosition != Vector3.zero)
			{
				if ((Object)(object)TransformToRotate != (Object)(object)((Component)this).transform)
				{
					optionalCharContr.Move(TransformToRotate.rotation * rootMAnimator.deltaPosition);
				}
				else
				{
					optionalCharContr.Move(rootMAnimator.deltaPosition);
				}
			}
			rootMAnimator.rootPosition = TransformToRotate.position;
		}
		else if ((Object)(object)TransformToRotate != (Object)(object)((Component)this).transform)
		{
			Transform obj = parentTransform;
			obj.position += TransformToRotate.rotation * rootMAnimator.deltaPosition;
		}
		else
		{
			Transform obj2 = parentTransform;
			obj2.position += rootMAnimator.deltaPosition;
		}
		rootMAnimator.rootPosition = TransformToRotate.position;
		rootMAnimator.rootRotation = base.LastRotation;
		if (rootMotionRotation)
		{
			rootMAnimator.rootRotation = base.LastRotation;
			Quaternion deltaRotation = rootMAnimator.deltaRotation;
			float num = default(float);
			Vector3 val = default(Vector3);
			((Quaternion)(ref deltaRotation)).ToAngleAxis(ref num, ref val);
			float y = (val * num * (MathF.PI / 180f)).y;
			UpAxisRotation += y * 57.290154f;
		}
	}
}
