using UnityEngine;

public class ShaderParameters<T>
{
	public string Name;

	public T Arid;

	public T Temperate;

	public T Tundra;

	public T Arctic;

	private T[] climates;

	public float FindBlendParameters(Vector3 pos, int biomeOverride, out T src, out T dst)
	{
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)TerrainMeta.BiomeMap == (Object)null)
		{
			src = Temperate;
			dst = Tundra;
			return 0f;
		}
		if (climates == null || climates.Length == 0)
		{
			climates = new T[4] { Arid, Temperate, Tundra, Arctic };
		}
		int num = ((biomeOverride != 0) ? biomeOverride : TerrainMeta.BiomeMap.GetBiomeMaxType(pos));
		int num2 = ((biomeOverride != 0) ? biomeOverride : TerrainMeta.BiomeMap.GetBiomeMaxType(pos, ~num));
		src = climates[TerrainBiome.TypeToIndex(num)];
		dst = climates[TerrainBiome.TypeToIndex(num2)];
		return TerrainMeta.BiomeMap.GetBiome(pos, num2);
	}

	public T FindBlendParameters(Vector3 pos, int biomeOverride)
	{
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)TerrainMeta.BiomeMap == (Object)null)
		{
			return Temperate;
		}
		if (climates == null || climates.Length == 0)
		{
			climates = new T[4] { Arid, Temperate, Tundra, Arctic };
		}
		int num = ((biomeOverride != 0) ? biomeOverride : TerrainMeta.BiomeMap.GetBiomeMaxType(pos));
		return climates[TerrainBiome.TypeToIndex(num)];
	}
}
