using System.Collections;
using Apex.Ai.HTN;
using Apex.Serialization;
using UnityEngine;

public class MurdererUseThrowableWeapon : OperatorBase<MurdererContext>
{
	[ApexSerialization]
	private NpcOrientation _orientation = NpcOrientation.LastKnownPrimaryTargetLocation;

	public static float LastTimeThrown;

	public override void Execute(MurdererContext context)
	{
		if (context.Memory.PrimaryKnownEnemyPlayer.PlayerInfo.Player != null)
		{
			context.Body.StartCoroutine(UseItem(context));
		}
	}

	public override OperatorStateType Tick(MurdererContext context, PrimitiveTaskSelector task)
	{
		if (context.IsFact(Facts.IsThrowingWeapon))
		{
			return OperatorStateType.Running;
		}
		ApplyExpectedEffects(context, task);
		return OperatorStateType.Complete;
	}

	public override void Abort(MurdererContext context, PrimitiveTaskSelector task)
	{
		context.SetFact(Facts.IsThrowingWeapon, value: false);
		ItemType previousFact = (ItemType)context.GetPreviousFact(Facts.HeldItemType);
		MurdererHoldItemOfType.SwitchToItem(context, previousFact);
	}

	private IEnumerator UseItem(MurdererContext context)
	{
		Item item = context.Body.GetActiveItem();
		if (item != null)
		{
			LastTimeThrown = Time.time;
			ThrownWeapon thrownWeapon = item.GetHeldEntity() as ThrownWeapon;
			if (thrownWeapon != null)
			{
				context.SetFact(Facts.IsThrowingWeapon, value: true);
				yield return CoroutineEx.waitForSeconds(1f + Random.value);
				context.OrientationType = _orientation;
				context.Body.ForceOrientationTick();
				yield return null;
				thrownWeapon.ServerThrow(context.Memory.PrimaryKnownEnemyPlayer.LastKnownPosition);
				MurdererHoldItemOfType.SwitchToItem(context, ItemType.MeleeWeapon);
				yield return CoroutineEx.waitForSeconds(1f);
			}
		}
		else
		{
			LastTimeThrown = Time.time;
		}
		context.SetFact(Facts.IsThrowingWeapon, value: false);
		MurdererHoldItemOfType.SwitchToItem(context, ItemType.MeleeWeapon);
	}
}
