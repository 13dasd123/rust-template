#define UNITY_ASSERTIONS
using System;
using System.Collections.Generic;
using ConVar;
using Facepunch;
using Facepunch.Extend;
using Network;
using Oxide.Core;
using ProtoBuf;
using UnityEngine;
using UnityEngine.Assertions;

public class PlantEntity : BaseCombatEntity, IInstanceDataReceiver
{
	public PlantProperties plantProperty;

	public int water = -1;

	public int consumedWater = -1;

	private PlantProperties.State state;

	private float age;

	private float groundConditions = 1f;

	private float realAge;

	private float lightExposure;

	private int genetics = -1;

	private int seasons;

	private int harvests;

	private PlantProperties.Stage currentStage => plantProperty.stages[(int)state];

	private float ageFraction => age / (currentStage.lifeLength * 60f);

	protected float thinkDeltaTime => ConVar.Server.planttick;

	protected float growDeltaTime => ConVar.Server.planttick * ConVar.Server.planttickscale;

	public override bool OnRpcMessage(BasePlayer player, uint rpc, Message msg)
	{
		using (TimeWarning.New("PlantEntity.OnRpcMessage"))
		{
			if (rpc == 2055322297 && player != null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log(string.Concat("SV_RPCMessage: ", player, " - RPC_PickFruit "));
				}
				using (TimeWarning.New("RPC_PickFruit"))
				{
					using (TimeWarning.New("Conditions"))
					{
						if (!RPC_Server.MaxDistance.Test("RPC_PickFruit", this, player, 3f))
						{
							return true;
						}
					}
					try
					{
						using (TimeWarning.New("Call"))
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage msg2 = rPCMessage;
							RPC_PickFruit(msg2);
						}
					}
					catch (Exception exception)
					{
						player.Kick("RPC Error in RPC_PickFruit");
						Debug.LogException(exception);
					}
				}
				return true;
			}
			if (rpc == 693223260 && player != null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log(string.Concat("SV_RPCMessage: ", player, " - RPC_TakeClone "));
				}
				using (TimeWarning.New("RPC_TakeClone"))
				{
					using (TimeWarning.New("Conditions"))
					{
						if (!RPC_Server.MaxDistance.Test("RPC_TakeClone", this, player, 3f))
						{
							return true;
						}
					}
					try
					{
						using (TimeWarning.New("Call"))
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage msg3 = rPCMessage;
							RPC_TakeClone(msg3);
						}
					}
					catch (Exception exception2)
					{
						player.Kick("RPC Error in RPC_TakeClone");
						Debug.LogException(exception2);
					}
				}
				return true;
			}
		}
		return base.OnRpcMessage(player, rpc, msg);
	}

	public override void ResetState()
	{
		base.ResetState();
		state = PlantProperties.State.Seed;
	}

	public bool CanPick()
	{
		return currentStage.resources > 0f;
	}

	public bool CanClone()
	{
		return currentStage.resources > 0f && plantProperty.cloneItem != null;
	}

	public void ReceiveInstanceData(ProtoBuf.Item.InstanceData data)
	{
		genetics = data.dataInt;
	}

	public float YieldBonusScale()
	{
		return (float)consumedWater / (float)plantProperty.lifetimeWaterConsumption;
	}

	public override void ServerInit()
	{
		if (genetics == -1)
		{
			genetics = UnityEngine.Random.Range(0, 10000);
		}
		groundConditions = WorkoutGroundConditions(base.transform.position);
		base.ServerInit();
		InvokeRandomized(RunUpdate, thinkDeltaTime, thinkDeltaTime, thinkDeltaTime * 0.1f);
		base.health = 10f;
		ResetSeason();
	}

	public override void Save(SaveInfo info)
	{
		base.Save(info);
		info.msg.plantEntity = Facepunch.Pool.Get<ProtoBuf.PlantEntity>();
		info.msg.plantEntity.state = (int)state;
		info.msg.plantEntity.age = age;
		info.msg.plantEntity.genetics = genetics;
		info.msg.plantEntity.water = water;
		if (!info.forDisk)
		{
			info.msg.plantEntity.healthy = (float)consumedWater / (float)plantProperty.lifetimeWaterConsumption;
		}
	}

	[RPC_Server]
	[RPC_Server.MaxDistance(3f)]
	public void RPC_TakeClone(RPCMessage msg)
	{
		if (CanClone())
		{
			int num = 1 + Mathf.Clamp(Mathf.CeilToInt(currentStage.resources * (1f + YieldBonusScale()) / 0.25f), 1, 4);
			for (int i = 0; i < num; i++)
			{
				Item item = ItemManager.Create(plantProperty.cloneItem, 1, 0uL);
				item.instanceData = new ProtoBuf.Item.InstanceData();
				item.instanceData.dataInt = Mathf.CeilToInt((float)genetics * 0.9f);
				item.instanceData.ShouldPool = false;
				msg.player.GiveItem(item, GiveItemReason.PickedUp);
			}
			if (plantProperty.pickEffect.isValid)
			{
				Effect.server.Run(plantProperty.pickEffect.resourcePath, GetEstimatedWorldPosition(), Vector3.up);
			}
			Die();
		}
	}

	[RPC_Server.MaxDistance(3f)]
	[RPC_Server]
	public void RPC_PickFruit(RPCMessage msg)
	{
		if (!CanPick())
		{
			return;
		}
		harvests++;
		float num = YieldBonusScale() * (float)plantProperty.waterYieldBonus;
		int num2 = Mathf.RoundToInt((currentStage.resources + num) * (float)plantProperty.pickupAmount);
		ResetSeason();
		if (plantProperty.pickupItem.condition.enabled)
		{
			for (int i = 0; i < num2; i++)
			{
				Item item = ItemManager.Create(plantProperty.pickupItem, 1, 0uL);
				item.conditionNormalized = plantProperty.fruitCurve.Evaluate(ageFraction);
				Interface.CallHook("OnCropGather", this, item, msg.player);
				msg.player.GiveItem(item, GiveItemReason.PickedUp);
			}
		}
		else
		{
			Item item2 = ItemManager.Create(plantProperty.pickupItem, num2, 0uL);
			Interface.CallHook("OnCropGather", this, item2, msg.player);
			msg.player.GiveItem(item2, GiveItemReason.PickedUp);
		}
		if (plantProperty.pickEffect.isValid)
		{
			Effect.server.Run(plantProperty.pickEffect.resourcePath, GetEstimatedWorldPosition(), Vector3.up);
		}
		if (harvests >= plantProperty.maxHarvests)
		{
			if (plantProperty.disappearAfterHarvest)
			{
				Die();
			}
			else
			{
				BecomeState(PlantProperties.State.Dying);
			}
		}
		else
		{
			BecomeState(PlantProperties.State.Mature);
		}
	}

	public override void Load(LoadInfo info)
	{
		base.Load(info);
		if (info.msg.plantEntity != null)
		{
			genetics = info.msg.plantEntity.genetics;
			age = info.msg.plantEntity.age;
			water = info.msg.plantEntity.water;
			BecomeState((PlantProperties.State)info.msg.plantEntity.state, resetAge: false);
		}
	}

	private void BecomeState(PlantProperties.State state, bool resetAge = true)
	{
		if (base.isServer && this.state == state)
		{
			return;
		}
		this.state = state;
		if (base.isServer)
		{
			SendNetworkUpdate();
			if (resetAge)
			{
				age = 0f;
			}
		}
	}

	public override bool SupportsPooling()
	{
		return true;
	}

	public void ResetSeason()
	{
		consumedWater = 0;
		if (water == -1)
		{
			water = Mathf.CeilToInt((float)plantProperty.maxHeldWater * 0.5f);
		}
	}

	public override string DebugText()
	{
		return $"State: {state}\nGenetics: {genetics:0.00}\nHealth: {base.health:0.00}\nGroundCondition: {groundConditions:0.00}\nHappiness: {Happiness():0.00}\nWater: {water:0.00}\nAge: {((long)realAge).FormatSeconds()}";
	}

	public void RefreshLightExposure()
	{
		if (!ConVar.Server.plantlightdetection)
		{
			lightExposure = plantProperty.timeOfDayHappiness.Evaluate(TOD_Sky.Instance.Cycle.Hour);
			return;
		}
		lightExposure = CalculateSunExposure() * plantProperty.timeOfDayHappiness.Evaluate(TOD_Sky.Instance.Cycle.Hour);
		if (lightExposure <= 0f)
		{
			lightExposure = CalculateArtificialLightExposure() * 2f;
		}
	}

	public float CalculateArtificialLightExposure()
	{
		float num = 0f;
		List<CeilingLight> obj = Facepunch.Pool.GetList<CeilingLight>();
		Vis.Entities(GetEstimatedWorldPosition() + new Vector3(0f, 2f, 0f), 2f, obj, 256);
		foreach (CeilingLight item in obj)
		{
			if (item.IsOn())
			{
				num += 1f;
				break;
			}
		}
		Facepunch.Pool.FreeList(ref obj);
		return num;
	}

	public float CalculateSunExposure()
	{
		if (TOD_Sky.Instance.IsNight)
		{
			return 0f;
		}
		Vector3 origin = GetEstimatedWorldPosition() + new Vector3(0f, 1f, 0f);
		Vector3 position = TOD_Sky.Instance.Components.Sun.transform.position;
		Vector3 direction = position - origin.normalized;
		if (UnityEngine.Physics.Raycast(origin, direction, out var _, 100f, 10551297))
		{
			return 0f;
		}
		return 1f;
	}

	private void RunUpdate()
	{
		if (IsDead())
		{
			return;
		}
		RefreshLightExposure();
		float num = Happiness();
		realAge += thinkDeltaTime;
		age += growDeltaTime * Mathf.Max(num, 0f);
		base.health += num * currentStage.health * growDeltaTime;
		if (base.health <= 0f)
		{
			Die();
			return;
		}
		if (age > currentStage.lifeLength * 60f)
		{
			if (state == PlantProperties.State.Dying)
			{
				Die();
				return;
			}
			if (currentStage.nextState <= state)
			{
				seasons++;
			}
			if (seasons >= plantProperty.maxSeasons)
			{
				BecomeState(PlantProperties.State.Dying);
			}
			else
			{
				BecomeState(currentStage.nextState);
			}
		}
		if (PlacedInPlanter() && consumedWater < plantProperty.lifetimeWaterConsumption && state < PlantProperties.State.Fruiting)
		{
			float num2 = thinkDeltaTime / (plantProperty.waterConsumptionLifetime * 60f) * (float)plantProperty.lifetimeWaterConsumption;
			int num3 = Mathf.CeilToInt(Mathf.Min(water, num2));
			water -= num3;
			consumedWater += num3;
			PlanterBox planterBox = GetParentEntity() as PlanterBox;
			if ((bool)planterBox && planterBox.soilSaturationFraction > 0f)
			{
				int b = plantProperty.maxHeldWater - water;
				int num4 = planterBox.UseWater(Mathf.Min(Mathf.CeilToInt(num2 * 10f), b));
				water += num4;
			}
		}
		else
		{
			water = plantProperty.maxHeldWater;
		}
		water = Mathf.Clamp(water, 0, plantProperty.maxHeldWater);
		SendNetworkUpdate();
	}

	private bool PlacedInPlanter()
	{
		if (GetParentEntity() != null && GetParentEntity() is PlanterBox)
		{
			return true;
		}
		return false;
	}

	private float Happiness()
	{
		bool flag = PlacedInPlanter();
		float num = 0f;
		num += Energy_Light();
		num += Energy_Temperature();
		num += Energy_Water();
		num += ((!flag) ? groundConditions : 2f);
		num /= 4f;
		float num2 = (float)genetics / 10000f;
		num = Mathf.Clamp(num, -1f, 0.25f + num2 * 0.75f);
		if (num > -0.1f && num < 0.1f)
		{
			num = Mathf.Sign(num) * 0.1f;
		}
		return num;
	}

	private float Energy_Light()
	{
		return lightExposure;
	}

	private float Energy_Temperature()
	{
		float num = plantProperty.temperatureHappiness.Evaluate(GetTemperature());
		if (num > 0f)
		{
			return num * 0.2f;
		}
		return num;
	}

	private float Energy_Water()
	{
		return water;
	}

	private float GetTemperature()
	{
		float num = Climate.GetTemperature(GetEstimatedWorldPosition());
		if (PlacedInPlanter() && num < 10f)
		{
			num = 10f;
		}
		return num;
	}

	public static float WorkoutGroundConditions(Vector3 pos)
	{
		if (WaterLevel.Test(pos))
		{
			return -1f;
		}
		return (TerrainSplat.Enum)TerrainMeta.SplatMap.GetSplatMaxType(pos) switch
		{
			TerrainSplat.Enum.Grass => 0.5f, 
			TerrainSplat.Enum.Snow => -1f, 
			TerrainSplat.Enum.Rock => -0.7f, 
			TerrainSplat.Enum.Stones => -0.6f, 
			TerrainSplat.Enum.Dirt => 0.5f, 
			TerrainSplat.Enum.Forest => 0.4f, 
			TerrainSplat.Enum.Sand => -0.3f, 
			TerrainSplat.Enum.Gravel => -0.6f, 
			_ => 0.5f, 
		};
	}
}
