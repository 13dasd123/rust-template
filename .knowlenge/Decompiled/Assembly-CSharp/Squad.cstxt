using System;
using System.Collections.Generic;
using Facepunch;
using Rust.Ai;
using UnityEngine;

[Serializable]
public class Squad : Pool.IPooled
{
	public List<SquadMember> Members = new List<SquadMember>();

	public List<SquadMember> PendingRemoval = new List<SquadMember>();

	public List<BasePlayer> NearbyEnemies = new List<BasePlayer>();

	public BasePlayer PrimaryTarget;

	public float MinSpawnDistanceToEnemy;

	public SquadManager Manager { get; set; }

	public Vector3 Position { get; private set; }

	public Bounds Bounds { get; private set; }

	public void EnterPool()
	{
		Members.Clear();
		PendingRemoval.Clear();
		NearbyEnemies.Clear();
	}

	public void LeavePool()
	{
	}

	public void Tick()
	{
		if (Manager != null)
		{
			SetAvgPositionAndExtents();
		}
	}

	public void SetAvgPositionAndExtents()
	{
		Vector3 zero = Vector3.zero;
		foreach (SquadMember member in Members)
		{
			if (!(member.Entity == null) && member.Entity.enabled && !member.Entity.IsDestroyed)
			{
				zero += member.transform.position;
			}
		}
		zero /= (float)Members.Count;
		Position = zero;
		Bounds = new Bounds(Position, Vector3.one * SquadManager.squad_radius * 2f);
	}

	public void UpdateNearbyEnemies()
	{
		NearbyEnemies.Clear();
		if (Members.Count == 0)
		{
			return;
		}
		NPCPlayerApex nPCPlayerApex = Members[0].Entity as NPCPlayerApex;
		if (nPCPlayerApex == null)
		{
			return;
		}
		float num = nPCPlayerApex.Stats.VisionRange * nPCPlayerApex.Stats.VisionRange;
		foreach (BasePlayer activePlayer in BasePlayer.activePlayerList)
		{
			if (!((activePlayer.ServerPosition - Position).sqrMagnitude > num))
			{
				NearbyEnemies.Add(activePlayer);
			}
		}
		MinSpawnDistanceToEnemy = nPCPlayerApex.Stats.MediumRange;
	}

	public void OnAggro(SquadMember member)
	{
		if (member.Entity != null && !member.Entity.IsDestroyed)
		{
			NPCPlayerApex nPCPlayerApex = member.Entity as NPCPlayerApex;
			if (nPCPlayerApex != null && nPCPlayerApex.AiContext != null && nPCPlayerApex.AiContext.EnemyPlayer != null)
			{
				PrimaryTarget = nPCPlayerApex.AiContext.EnemyPlayer;
				return;
			}
		}
		PrimaryTarget = null;
	}
}
