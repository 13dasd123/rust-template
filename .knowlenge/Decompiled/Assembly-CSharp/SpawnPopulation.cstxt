using System.Linq;
using ConVar;
using UnityEngine;
using UnityEngine.Serialization;

[CreateAssetMenu(menuName = "Rust/Spawn Population")]
public class SpawnPopulation : BaseScriptableObject
{
	[Header("Spawnables")]
	public string ResourceFolder = string.Empty;

	public GameObjectRef[] ResourceList;

	[SerializeField]
	[Tooltip("Usually per square km")]
	[Header("Spawn Info")]
	[FormerlySerializedAs("TargetDensity")]
	private float _targetDensity = 1f;

	public float SpawnRate = 1f;

	public int ClusterSizeMin = 1;

	public int ClusterSizeMax = 1;

	public int ClusterDithering;

	public int SpawnAttemptsInitial = 20;

	public int SpawnAttemptsRepeating = 10;

	public bool EnforcePopulationLimits = true;

	public bool ScaleWithSpawnFilter = true;

	public bool ScaleWithServerPopulation;

	public bool AlignToNormal;

	public SpawnFilter Filter = new SpawnFilter();

	internal Prefab<Spawnable>[] Prefabs;

	public virtual float TargetDensity => _targetDensity;

	public GameObject Spawn(Vector3 pos, Quaternion rot)
	{
		if (Prefabs == null || Prefabs.Length == 0)
		{
			if (!string.IsNullOrEmpty(ResourceFolder))
			{
				Prefabs = Prefab.Load<Spawnable>("assets/bundled/prefabs/autospawn/" + ResourceFolder, GameManager.server, PrefabAttribute.server);
			}
			if (ResourceList != null && ResourceList.Length > 0)
			{
				Prefabs = Prefab.Load<Spawnable>(ResourceList.Select((GameObjectRef x) => x.resourcePath).ToArray(), GameManager.server, PrefabAttribute.server);
			}
			if (Prefabs == null || Prefabs.Length == 0)
			{
				Debug.LogError("No prefabs to spawn in " + ResourceFolder, this);
				return null;
			}
		}
		Prefab<Spawnable> prefab = Prefabs[Random.Range(0, Prefabs.Length)];
		Vector3 scale = Vector3.one;
		DecorComponent[] components = PrefabAttribute.server.FindAll<DecorComponent>(prefab.ID);
		prefab.Object.transform.ApplyDecorComponents(components, ref pos, ref rot, ref scale);
		if (!prefab.ApplyTerrainAnchors(ref pos, rot, scale))
		{
			return null;
		}
		if (!prefab.ApplyTerrainChecks(pos, rot, scale))
		{
			return null;
		}
		if (!prefab.ApplyTerrainFilters(pos, rot, scale))
		{
			return null;
		}
		if (prefab.Component == null)
		{
			Debug.LogError("Missing component 'Spawnable' on " + prefab.Name);
			return null;
		}
		LayerMask layerMask = ((!SingletonComponent<SpawnHandler>.Instance) ? default(LayerMask) : SingletonComponent<SpawnHandler>.Instance.BoundsCheckMask);
		if ((int)layerMask != 0)
		{
			BaseEntity component = prefab.Object.GetComponent<BaseEntity>();
			if (component != null && UnityEngine.Physics.CheckBox(pos + rot * Vector3.Scale(component.bounds.center, scale), Vector3.Scale(component.bounds.extents, scale), rot, layerMask))
			{
				return null;
			}
		}
		if (prefab.Component.Population != this)
		{
			prefab.Component.Population = this;
		}
		if (Global.developer > 1)
		{
			Debug.Log("[Spawn]".PadRight(10) + "Spawning " + prefab.Name);
		}
		BaseEntity baseEntity = prefab.SpawnEntity(pos, rot);
		if (baseEntity == null)
		{
			Debug.LogWarning("SpawnPopulation.Spawn: Couldn't create prefab as entity - " + prefab.Name);
			return null;
		}
		baseEntity.Spawn();
		return baseEntity.gameObject;
	}

	public float GetCurrentSpawnRate()
	{
		if (ScaleWithServerPopulation)
		{
			return SpawnRate * SpawnHandler.PlayerLerp(ConVar.Spawn.min_rate, ConVar.Spawn.max_rate);
		}
		return SpawnRate * ConVar.Spawn.max_rate;
	}

	public float GetCurrentSpawnDensity()
	{
		if (ScaleWithServerPopulation)
		{
			return TargetDensity * SpawnHandler.PlayerLerp(ConVar.Spawn.min_density, ConVar.Spawn.max_density) * 1E-06f;
		}
		return TargetDensity * ConVar.Spawn.max_density * 1E-06f;
	}

	public float GetMaximumSpawnDensity()
	{
		if (ScaleWithServerPopulation)
		{
			return 2f * TargetDensity * SpawnHandler.PlayerLerp(ConVar.Spawn.min_density, ConVar.Spawn.max_density) * 1E-06f;
		}
		return 2f * TargetDensity * ConVar.Spawn.max_density * 1E-06f;
	}
}
