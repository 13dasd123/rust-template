using System.Linq;
using UnityEngine;

public class TriggerVehiclePush : TriggerBase, IServerComponent
{
	public BaseEntity thisEntity;

	public float maxPushVelocity = 10f;

	public float minRadius;

	public float maxRadius;

	public override GameObject InterestedInObject(GameObject obj)
	{
		obj = base.InterestedInObject(obj);
		if (obj == null)
		{
			return null;
		}
		BaseEntity baseEntity = GameObjectEx.ToBaseEntity(obj);
		if (baseEntity == null)
		{
			return null;
		}
		if (baseEntity.isClient)
		{
			return null;
		}
		return baseEntity.gameObject;
	}

	public void FixedUpdate()
	{
		if (thisEntity == null || entityContents == null)
		{
			return;
		}
		BaseEntity[] array = entityContents.ToArray();
		foreach (BaseEntity baseEntity in array)
		{
			if (!baseEntity.IsValid() || baseEntity.EqualNetID(thisEntity))
			{
				continue;
			}
			Rigidbody component = baseEntity.GetComponent<Rigidbody>();
			if ((bool)component && !component.isKinematic)
			{
				float value = Vector3Ex.Distance2D(baseEntity.transform.position, base.transform.position);
				float num = 1f - Mathf.InverseLerp(minRadius, maxRadius, value);
				float num2 = 1f - Mathf.InverseLerp(minRadius - 1f, minRadius, value);
				Vector3 vector = baseEntity.ClosestPoint(base.transform.position);
				Vector3 vector2 = Vector3Ex.Direction2D(vector, base.transform.position);
				component.AddForceAtPosition(vector2 * maxPushVelocity * num, vector, ForceMode.Acceleration);
				if (num2 > 0f)
				{
					component.AddForceAtPosition(vector2 * 1f * num2, vector, ForceMode.VelocityChange);
				}
			}
		}
	}

	public void OnDrawGizmos()
	{
		Gizmos.color = Color.red;
		Gizmos.DrawWireSphere(base.transform.position, minRadius);
		Gizmos.color = new Color(0.5f, 0f, 0f, 1f);
		Gizmos.DrawWireSphere(base.transform.position, maxRadius);
	}
}
