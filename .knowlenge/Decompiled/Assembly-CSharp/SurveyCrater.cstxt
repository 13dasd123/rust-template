#define UNITY_ASSERTIONS
using System;
using ConVar;
using Network;
using UnityEngine;
using UnityEngine.Assertions;

public class SurveyCrater : BaseCombatEntity
{
	private ResourceDispenser resourceDispenser;

	public override bool OnRpcMessage(BasePlayer player, uint rpc, Message msg)
	{
		using (TimeWarning.New("SurveyCrater.OnRpcMessage"))
		{
			if (rpc == 3491246334u && player != null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log(string.Concat("SV_RPCMessage: ", player, " - AnalysisComplete "));
				}
				using (TimeWarning.New("AnalysisComplete"))
				{
					try
					{
						using (TimeWarning.New("Call"))
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage msg2 = rPCMessage;
							AnalysisComplete(msg2);
						}
					}
					catch (Exception exception)
					{
						player.Kick("RPC Error in AnalysisComplete");
						Debug.LogException(exception);
					}
				}
				return true;
			}
		}
		return base.OnRpcMessage(player, rpc, msg);
	}

	public override void ServerInit()
	{
		base.ServerInit();
		Invoke(RemoveMe, 1800f);
	}

	public override void OnAttacked(HitInfo info)
	{
		_ = base.isServer;
		base.OnAttacked(info);
	}

	public void RemoveMe()
	{
		Kill();
	}

	[RPC_Server]
	public void AnalysisComplete(RPCMessage msg)
	{
		ResourceDepositManager.ResourceDeposit orCreate = ResourceDepositManager.GetOrCreate(base.transform.position);
		if (orCreate == null)
		{
			return;
		}
		Item item = ItemManager.CreateByName("note", 1, 0uL);
		item.text = "-Mineral Analysis-\n\n";
		float num = 10f;
		float num2 = 7.5f;
		foreach (ResourceDepositManager.ResourceDeposit.ResourceDepositEntry resource in orCreate._resources)
		{
			float num3 = 60f / num * (num2 / resource.workNeeded);
			Item item2 = item;
			item2.text = item2.text + resource.type.displayName.english + " : " + num3.ToString("0.0") + " pM\n";
		}
		item.MarkDirty();
		msg.player.GiveItem(item, GiveItemReason.PickedUp);
	}

	public override float BoundsPadding()
	{
		return 2f;
	}
}
