using System;
using System.Collections;
using System.Text;

private sealed class Serializer
{
	private StringBuilder builder;

	private Serializer()
	{
		builder = new StringBuilder();
	}

	public static string Serialize(object obj)
	{
		Serializer serializer = new Serializer();
		serializer.SerializeValue(obj);
		return serializer.builder.ToString();
	}

	private void SerializeValue(object value)
	{
		if (value == null)
		{
			builder.Append("null");
		}
		else if (value is string str)
		{
			SerializeString(str);
		}
		else if (value is bool)
		{
			builder.Append((!(bool)value) ? "false" : "true");
		}
		else if (value is IList anArray)
		{
			SerializeArray(anArray);
		}
		else if (value is IDictionary obj)
		{
			SerializeObject(obj);
		}
		else if (value is char)
		{
			SerializeString(new string((char)value, 1));
		}
		else
		{
			SerializeOther(value);
		}
	}

	private void SerializeObject(IDictionary obj)
	{
		bool flag = true;
		builder.Append('{');
		foreach (object key in obj.Keys)
		{
			if (!flag)
			{
				builder.Append(',');
			}
			SerializeString(key.ToString());
			builder.Append(':');
			SerializeValue(obj[key]);
			flag = false;
		}
		builder.Append('}');
	}

	private void SerializeArray(IList anArray)
	{
		builder.Append('[');
		bool flag = true;
		foreach (object item in anArray)
		{
			if (!flag)
			{
				builder.Append(',');
			}
			SerializeValue(item);
			flag = false;
		}
		builder.Append(']');
	}

	private void SerializeString(string str)
	{
		builder.Append('"');
		char[] array = str.ToCharArray();
		char[] array2 = array;
		foreach (char c in array2)
		{
			switch (c)
			{
			case '"':
				builder.Append("\\\"");
				continue;
			case '\\':
				builder.Append("\\\\");
				continue;
			case '\b':
				builder.Append("\\b");
				continue;
			case '\f':
				builder.Append("\\f");
				continue;
			case '\n':
				builder.Append("\\n");
				continue;
			case '\r':
				builder.Append("\\r");
				continue;
			case '\t':
				builder.Append("\\t");
				continue;
			}
			int num = Convert.ToInt32(c);
			if (num >= 32 && num <= 126)
			{
				builder.Append(c);
				continue;
			}
			builder.Append("\\u");
			builder.Append(num.ToString("x4"));
		}
		builder.Append('"');
	}

	private void SerializeOther(object value)
	{
		if (value is float)
		{
			builder.Append(((float)value).ToString("R"));
		}
		else if (value is int || value is uint || value is long || value is sbyte || value is byte || value is short || value is ushort || value is ulong)
		{
			builder.Append(value);
		}
		else if (value is double || value is decimal)
		{
			builder.Append(Convert.ToDouble(value).ToString("R"));
		}
		else
		{
			SerializeString(value.ToString());
		}
	}
}
