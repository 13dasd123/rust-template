using ProtoBuf;
using UnityEngine;

public class ItemModRFListener : ItemMod
{
	public GameObjectRef frequencyPanelPrefab;

	public GameObjectRef entityPrefab;

	public override void OnItemCreated(Item item)
	{
		base.OnItemCreated(item);
		if (item.instanceData == null)
		{
			BaseEntity baseEntity = GameManager.server.CreateEntity(entityPrefab.resourcePath, Vector3.zero);
			baseEntity.Spawn();
			item.instanceData = new ProtoBuf.Item.InstanceData();
			item.instanceData.ShouldPool = false;
			item.instanceData.subEntity = baseEntity.net.ID;
			item.MarkDirty();
		}
	}

	public override void OnRemove(Item item)
	{
		base.OnRemove(item);
		PagerEntity pagerEnt = GetPagerEnt(item);
		if ((bool)pagerEnt)
		{
			pagerEnt.Kill();
		}
	}

	public override void OnChanged(Item item)
	{
		base.OnChanged(item);
	}

	public override void OnMovedToWorld(Item item)
	{
		UpdateParent(item);
		base.OnMovedToWorld(item);
	}

	public override void OnRemovedFromWorld(Item item)
	{
		UpdateParent(item);
		base.OnRemovedFromWorld(item);
	}

	public void UpdateParent(Item item)
	{
		BaseEntity entityForParenting = GetEntityForParenting(item);
		if (!(entityForParenting == null) && entityForParenting.isServer && entityForParenting.IsFullySpawned())
		{
			PagerEntity pagerEnt = GetPagerEnt(item);
			if ((bool)pagerEnt)
			{
				pagerEnt.SetParent(entityForParenting, worldPositionStays: false, sendImmediate: true);
			}
		}
	}

	public override void OnParentChanged(Item item)
	{
		base.OnParentChanged(item);
		UpdateParent(item);
	}

	public BaseEntity GetEntityForParenting(Item item = null)
	{
		if (item != null)
		{
			BasePlayer ownerPlayer = item.GetOwnerPlayer();
			if ((bool)ownerPlayer)
			{
				return ownerPlayer;
			}
			BaseEntity baseEntity = ((item.parent == null) ? null : item.parent.entityOwner);
			if (baseEntity != null)
			{
				return baseEntity;
			}
			BaseEntity worldEntity = item.GetWorldEntity();
			if ((bool)worldEntity)
			{
				return worldEntity;
			}
			return null;
		}
		return null;
	}

	public float GetMaxRange()
	{
		return float.PositiveInfinity;
	}

	public override void ServerCommand(Item item, string command, BasePlayer player)
	{
		base.ServerCommand(item, command, player);
		PagerEntity pagerEnt = GetPagerEnt(item);
		switch (command)
		{
		case "stop":
			pagerEnt.SetOff();
			break;
		case "silenton":
			pagerEnt.SetSilentMode(wantsSilent: true);
			break;
		case "silentoff":
			pagerEnt.SetSilentMode(wantsSilent: false);
			break;
		}
	}

	public PagerEntity GetPagerEnt(Item item, bool isServer = true)
	{
		BaseNetworkable baseNetworkable = null;
		if (item.instanceData == null)
		{
			return null;
		}
		if (isServer)
		{
			baseNetworkable = BaseNetworkable.serverEntities.Find(item.instanceData.subEntity);
		}
		if ((bool)baseNetworkable)
		{
			return baseNetworkable.GetComponent<PagerEntity>();
		}
		return null;
	}
}
