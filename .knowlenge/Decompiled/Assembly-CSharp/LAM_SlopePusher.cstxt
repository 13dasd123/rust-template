using FIMSpace.FProceduralAnimation;
using UnityEngine;

public class LAM_SlopePusher : LegsAnimatorControlModuleBase
{
	private LegsAnimator.Variable _powerV;

	private LegsAnimator.Variable _thresV;

	private LegsAnimator.Variable _rapidV;

	private LegsAnimator.Variable _pushBackV;

	private Vector3 offsetV = Vector3.zero;

	private Vector3 _Sd_offsetV = Vector3.zero;

	public override void OnInit(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		_powerV = helper.RequestVariable("Offset Power", 0.6f);
		_thresV = helper.RequestVariable("Push Threshold", 0.5f);
		_rapidV = helper.RequestVariable("Offset Rapidity", 0.5f);
		_pushBackV = helper.RequestVariable("Push Back", 0f);
	}

	public override void Leg_LateUpdate(LegsAnimator.LegsAnimatorCustomModuleHelper helper, LegsAnimator.Leg leg)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_0178: Unknown result type (might be due to invalid IL or missing references)
		//IL_017d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0124: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0134: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_014e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0170: Unknown result type (might be due to invalid IL or missing references)
		//IL_0175: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = Vector3.zero;
		if (leg.A_WasAligning)
		{
			float num = base.LA.ScaleReferenceNoScale * 0.25f * _thresV.GetFloat();
			if (leg.groundHitRootSpacePos.y > num)
			{
				float num2 = Mathf.InverseLerp(5f, 50f, leg.raycastSlopeAngle);
				float num3 = (leg.groundHitRootSpacePos.y - num) / (num * 1.5f);
				Vector2 val2 = new Vector2(leg.groundHitRootSpacePos.x, leg.groundHitRootSpacePos.z);
				Vector2 normalized = ((Vector2)(ref val2)).normalized;
				val -= new Vector3(normalized.x, -0.033f, normalized.y) * (num3 * num) * _powerV.GetFloat() * 2f * num2;
			}
			if (_pushBackV.GetFloat() > 0f && base.LA.DesiredMovementDirection != Vector3.zero)
			{
				float num4 = _powerV.GetFloat();
				if (num4 <= 0f)
				{
					num4 = 1f;
				}
				Vector3 normalized2 = ((Vector3)(ref val)).normalized;
				Vector3 desiredMovementDirection = base.LA.DesiredMovementDirection;
				float num5 = 0f - Vector3.Dot(normalized2, ((Vector3)(ref desiredMovementDirection)).normalized);
				if (num5 < 0f)
				{
					val *= Mathf.Max(-1f, num5 * 2f) * (_pushBackV.GetFloat() / num4);
				}
			}
		}
		offsetV = Vector3.SmoothDamp(offsetV, val, ref _Sd_offsetV, 0.2f - _rapidV.GetFloat() * 0.199f, 1000000f, base.LA.DeltaTime);
		LegsAnimator lA = base.LA;
		lA._Hips_Modules_ExtraWOffset += base.LA.RootToWorldSpaceVec(offsetV);
	}
}
