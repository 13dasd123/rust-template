using FIMSpace;
using UnityEngine;

public abstract class FImp_ColliderData_Base
{
	public enum EFColliderType
	{
		Box,
		Sphere,
		Capsule,
		Mesh,
		Terrain
	}

	public bool Is2D;

	protected Vector3 previousPosition = Vector3.zero;

	protected Quaternion previousRotation = Quaternion.identity;

	protected Vector3 previousScale = Vector3.one;

	public Transform Transform { get; protected set; }

	public Collider Collider { get; protected set; }

	public Collider2D Collider2D { get; protected set; }

	public bool IsStatic { get; private set; }

	public EFColliderType ColliderType { get; protected set; }

	public static FImp_ColliderData_Base GetColliderDataFor(Collider collider)
	{
		SphereCollider val = (SphereCollider)(object)((collider is SphereCollider) ? collider : null);
		if (Object.op_Implicit((Object)(object)val))
		{
			return new FImp_ColliderData_Sphere(val);
		}
		CapsuleCollider val2 = (CapsuleCollider)(object)((collider is CapsuleCollider) ? collider : null);
		if (Object.op_Implicit((Object)(object)val2))
		{
			return new FImp_ColliderData_Capsule(val2);
		}
		BoxCollider val3 = (BoxCollider)(object)((collider is BoxCollider) ? collider : null);
		if (Object.op_Implicit((Object)(object)val3))
		{
			return new FImp_ColliderData_Box(val3);
		}
		MeshCollider val4 = (MeshCollider)(object)((collider is MeshCollider) ? collider : null);
		if (Object.op_Implicit((Object)(object)val4))
		{
			return new FImp_ColliderData_Mesh(val4);
		}
		TerrainCollider val5 = (TerrainCollider)(object)((collider is TerrainCollider) ? collider : null);
		if (Object.op_Implicit((Object)(object)val5))
		{
			return new FImp_ColliderData_Terrain(val5);
		}
		return null;
	}

	public static FImp_ColliderData_Base GetColliderDataFor(Collider2D collider)
	{
		CircleCollider2D val = (CircleCollider2D)(object)((collider is CircleCollider2D) ? collider : null);
		if (Object.op_Implicit((Object)(object)val))
		{
			return new FImp_ColliderData_Sphere(val);
		}
		CapsuleCollider2D val2 = (CapsuleCollider2D)(object)((collider is CapsuleCollider2D) ? collider : null);
		if (Object.op_Implicit((Object)(object)val2))
		{
			return new FImp_ColliderData_Capsule(val2);
		}
		BoxCollider2D val3 = (BoxCollider2D)(object)((collider is BoxCollider2D) ? collider : null);
		if (Object.op_Implicit((Object)(object)val3))
		{
			return new FImp_ColliderData_Box(val3);
		}
		PolygonCollider2D val4 = (PolygonCollider2D)(object)((collider is PolygonCollider2D) ? collider : null);
		if (Object.op_Implicit((Object)(object)val4))
		{
			return new FImp_ColliderData_Mesh(val4);
		}
		return null;
	}

	public virtual void RefreshColliderData()
	{
		if (((Component)Transform).gameObject.isStatic)
		{
			IsStatic = true;
		}
		else
		{
			IsStatic = false;
		}
	}

	public virtual bool PushIfInside(ref Vector3 point, float pointRadius, Vector3 pointOffset)
	{
		Collider collider = Collider;
		if (Object.op_Implicit((Object)(object)((collider is SphereCollider) ? collider : null)))
		{
			Debug.Log((object)"It shouldn't appear");
		}
		return false;
	}

	public virtual bool PushIfInside2D(ref Vector3 point, float pointRadius, Vector3 pointOffset)
	{
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		return PushIfInside(ref point, pointRadius, pointOffset);
	}

	public static bool VIsSame(Vector3 vec1, Vector3 vec2)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		if (vec1.x != vec2.x)
		{
			return false;
		}
		if (vec1.y != vec2.y)
		{
			return false;
		}
		if (vec1.z != vec2.z)
		{
			return false;
		}
		return true;
	}
}
