using System.Collections.Generic;
using ConVar;
using Rust;
using UnityEngine;

public class SteamStatistics
{
	private BasePlayer player;

	public Dictionary<string, int> intStats = new Dictionary<string, int>();

	private bool hasRefreshed;

	public SteamStatistics(BasePlayer p)
	{
		player = p;
	}

	public void Init()
	{
		if (Rust.Global.SteamServer != null)
		{
			Rust.Global.SteamServer.Stats.Refresh(player.userID, OnStatsRefreshed);
			intStats.Clear();
		}
	}

	public void Save()
	{
		if (Rust.Global.SteamServer != null)
		{
			Rust.Global.SteamServer.Stats.Commit(player.userID);
		}
	}

	public void OnStatsRefreshed(ulong steamid, bool state)
	{
		hasRefreshed = true;
	}

	public void Add(string name, int var)
	{
		if (Rust.Global.SteamServer == null || !hasRefreshed)
		{
			return;
		}
		using (TimeWarning.New("PlayerStats.Add"))
		{
			int value = 0;
			if (intStats.TryGetValue(name, out value))
			{
				intStats[name] += var;
				Rust.Global.SteamServer.Stats.SetInt(player.userID, name, intStats[name]);
				return;
			}
			value = Rust.Global.SteamServer.Stats.GetInt(player.userID, name);
			if (!Rust.Global.SteamServer.Stats.SetInt(player.userID, name, value + var))
			{
				if (ConVar.Global.developer > 0)
				{
					Debug.LogWarning("[STEAMWORKS] Couldn't SetUserStat: " + name);
				}
			}
			else
			{
				intStats.Add(name, value + var);
			}
		}
	}
}
