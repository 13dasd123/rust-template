using System.Collections.Generic;
using ProtoBuf;
using UnityEngine;

public class FoodSpoilingWorkQueue : PersistentObjectWorkQueue<Item>
{
	private Dictionary<Item, TimeSince> lastUpdated = new Dictionary<Item, TimeSince>();

	protected override void RunJob(Item foodItem)
	{
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		float timeToApply = 0f;
		if (lastUpdated.TryGetValue(foodItem, out var value))
		{
			timeToApply = TimeSince.op_Implicit(value);
			lastUpdated[foodItem] = TimeSince.op_Implicit(0f);
		}
		else
		{
			lastUpdated.Add(foodItem, TimeSince.op_Implicit(0f));
		}
		DeductTimeFromFoodItem(foodItem, timeToApply, setDirty: false);
	}

	public static void DeductTimeFromFoodItem(Item foodItem, float timeToApply, bool setDirty)
	{
		//IL_0118: Unknown result type (might be due to invalid IL or missing references)
		//IL_011d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0129: Unknown result type (might be due to invalid IL or missing references)
		if (foodItem.instanceData != null)
		{
			float dataFloat = foodItem.instanceData.dataFloat;
			float num = 1f;
			IFoodSpoilModifier foodSpoilModifier = default(IFoodSpoilModifier);
			if (foodItem.parent != null && (Object)(object)foodItem.parent.entityOwner != (Object)null && ((Component)foodItem.parent.entityOwner).TryGetComponent<IFoodSpoilModifier>(ref foodSpoilModifier))
			{
				num = foodSpoilModifier.GetSpoilMultiplier(foodItem);
			}
			bool flag = num != 1f;
			if (foodItem.HasFlag(Item.Flag.Refrigerated) != flag)
			{
				foodItem.SetFlag(Item.Flag.Refrigerated, flag);
				foodItem.MarkDirty();
				if ((Object)(object)foodItem.GetEntityOwner() != (Object)null)
				{
					foodItem.GetEntityOwner().SendNetworkUpdate();
				}
			}
			InstanceData instanceData = foodItem.instanceData;
			instanceData.dataFloat -= timeToApply * num;
			if (foodItem.instanceData.dataFloat <= 0f && dataFloat > 0f)
			{
				foodItem.Remove();
				Item item = ItemManager.Create(((Component)foodItem.info).GetComponent<ItemModFoodSpoiling>().SpoilItem, 1, 0uL);
				if (foodItem.parent != null)
				{
					foodItem.parent.GiveItem(item);
					return;
				}
				BaseEntity worldEntity = foodItem.GetWorldEntity();
				item.Drop(((Component)worldEntity).transform.position, Vector3.zero, ((Component)worldEntity).transform.rotation);
			}
		}
		else if (setDirty)
		{
			foodItem.MarkDirty();
			if ((Object)(object)foodItem.GetEntityOwner() != (Object)null)
			{
				foodItem.GetEntityOwner().SendNetworkUpdate();
			}
		}
	}
}
