using System;
using Facepunch;
using Rust;
using Rust.Ai.Gen2;
using UnityEngine;
using UnityEngine.Assertions;

[Serializable]
public class State_Attack : State_PlayAnimationRM
{
	[SerializeField]
	public float Damage = 20f;

	[SerializeField]
	public float Delay = 0.5f;

	[SerializeField]
	public DamageType DamageType = DamageType.Bite;

	private Action _doDamageAction;

	private Action DoDamageAction => DoDamage;

	public override EFSMStateStatus OnStateEnter()
	{
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		Assert.IsTrue(Delay < Animation.inPlaceAnimation.length);
		if (!base.Senses.FindTargetPosition(out var targetPosition))
		{
			return EFSMStateStatus.Failure;
		}
		FaceTarget = false;
		Vector3 val = Vector3Ex.NormalizeXZ(((Component)Owner).transform.position - targetPosition);
		Vector3 val2 = Vector3.Cross(Vector3.up, val);
		targetPosition += ((Random.value > 0.5f) ? 1f : (-1f)) * val2;
		Vector3 val3 = Vector3Ex.NormalizeXZ(targetPosition - ((Component)Owner).transform.position);
		((Component)Owner).transform.rotation = Quaternion.LookRotation(val3);
		((FacepunchBehaviour)Owner).Invoke(DoDamageAction, Delay);
		return base.OnStateEnter();
	}

	public override void OnStateExit()
	{
		((FacepunchBehaviour)Owner).CancelInvoke(DoDamageAction);
		base.OnStateExit();
	}

	private void DoDamage()
	{
		if (base.Senses.FindTarget(out var target) && target is BaseCombatEntity baseCombatEntity && TryApplyShieldDamage(Owner, baseCombatEntity, DamageType, Damage))
		{
			baseCombatEntity.Hurt(Damage, DamageType, Owner);
		}
	}

	public static bool TryApplyShieldDamage(BaseEntity attacker, BaseCombatEntity combatTarget, DamageType damageType, float damageAmount)
	{
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		bool result = true;
		if (combatTarget is BasePlayer basePlayer && basePlayer.GetActiveShield(out var foundShield) && foundShield.IsBlocking())
		{
			Vector3 position = ((Component)attacker).transform.position;
			Vector3 val = position - Vector3Ex.WithY(((Component)combatTarget).transform.position, position.y);
			Vector3 val2 = Vector3Ex.WithY(basePlayer.eyes.BodyForward(), 0f);
			if (Vector3.Angle(val, val2) < 90f)
			{
				HitInfo hitInfo = Pool.Get<HitInfo>();
				hitInfo.Initiator = attacker;
				hitInfo.damageTypes.Set(damageType, damageAmount);
				hitInfo.HitEntity = foundShield;
				foundShield.OnAttacked(hitInfo);
				Pool.Free<HitInfo>(ref hitInfo);
				result = false;
			}
		}
		return result;
	}
}
