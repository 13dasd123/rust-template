using System.Collections.Generic;
using ConVar;
using Facepunch;
using UnityEngine;

public class UpdateSurroundingsQueue : ObjectWorkQueue<Bounds>
{
	protected override void RunJob(Bounds bounds)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		NotifyNeighbours(bounds);
	}

	public static void NotifyNeighbours(Bounds bounds)
	{
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		if (!Server.stability)
		{
			return;
		}
		List<BaseEntity> list = Pool.Get<List<BaseEntity>>();
		Vector3 center = ((Bounds)(ref bounds)).center;
		Vector3 extents = ((Bounds)(ref bounds)).extents;
		Vis.Entities(center, ((Vector3)(ref extents)).magnitude + 1f, list, -2144696062, (QueryTriggerInteraction)2);
		foreach (BaseEntity item in list)
		{
			if (!item.IsDestroyed && !item.isClient)
			{
				if (item is StabilityEntity stabilityEntity)
				{
					stabilityEntity.OnPhysicsNeighbourChanged();
				}
				else
				{
					((Component)item).BroadcastMessage("OnPhysicsNeighbourChanged", (SendMessageOptions)1);
				}
			}
		}
		Pool.FreeUnmanaged<BaseEntity>(ref list);
	}
}
