using Apex.Serialization;
using UnityEngine;

public class AStarNavigateToCover : BaseNavigateTo
{
	[ApexSerialization]
	private CoverTactic _preferredTactic;

	public static CoverPoint GetCover(CoverTactic tactic, ScientistAStarContext context)
	{
		switch (tactic)
		{
		case CoverTactic.Retreat:
			if (context.BestRetreatCover != null && context.BestRetreatCover.IsValidFor(context.Body))
			{
				return context.BestRetreatCover;
			}
			if (context.BestFlankCover != null && context.BestFlankCover.IsValidFor(context.Body))
			{
				return context.BestFlankCover;
			}
			if (context.BestAdvanceCover != null && context.BestAdvanceCover.IsValidFor(context.Body))
			{
				return context.BestAdvanceCover;
			}
			break;
		case CoverTactic.Flank:
			if (context.BestFlankCover != null && context.BestFlankCover.IsValidFor(context.Body))
			{
				return context.BestFlankCover;
			}
			if (context.BestRetreatCover != null && context.BestRetreatCover.IsValidFor(context.Body))
			{
				return context.BestRetreatCover;
			}
			if (context.BestAdvanceCover != null && context.BestAdvanceCover.IsValidFor(context.Body))
			{
				return context.BestAdvanceCover;
			}
			break;
		case CoverTactic.Advance:
			if (context.BestAdvanceCover != null && context.BestAdvanceCover.IsValidFor(context.Body))
			{
				return context.BestAdvanceCover;
			}
			if (context.BestFlankCover != null && context.BestFlankCover.IsValidFor(context.Body))
			{
				return context.BestFlankCover;
			}
			if (context.BestRetreatCover != null && context.BestRetreatCover.IsValidFor(context.Body))
			{
				return context.BestRetreatCover;
			}
			break;
		case CoverTactic.Closest:
			if (context.ClosestCover != null && context.ClosestCover.IsValidFor(context.Body))
			{
				return context.ClosestCover;
			}
			break;
		}
		return null;
	}

	private static Vector3 _GetCoverPosition(CoverTactic tactic, ScientistAStarContext context)
	{
		switch (tactic)
		{
		case CoverTactic.Retreat:
			if (context.BestRetreatCover != null && context.BestRetreatCover.IsValidFor(context.Body))
			{
				context.SetFact(Facts.CoverTactic, CoverTactic.Retreat);
				context.ReserveCoverPoint(context.BestRetreatCover);
				return context.BestRetreatCover.Position;
			}
			if (context.BestFlankCover != null && context.BestFlankCover.IsValidFor(context.Body))
			{
				context.SetFact(Facts.CoverTactic, CoverTactic.Flank);
				context.ReserveCoverPoint(context.BestFlankCover);
				return context.BestFlankCover.Position;
			}
			if (context.BestAdvanceCover != null && context.BestAdvanceCover.IsValidFor(context.Body))
			{
				context.SetFact(Facts.CoverTactic, CoverTactic.Advance);
				context.ReserveCoverPoint(context.BestAdvanceCover);
				return context.BestAdvanceCover.Position;
			}
			break;
		case CoverTactic.Flank:
			if (context.BestFlankCover != null && context.BestFlankCover.IsValidFor(context.Body))
			{
				context.SetFact(Facts.CoverTactic, CoverTactic.Flank);
				context.ReserveCoverPoint(context.BestFlankCover);
				return context.BestFlankCover.Position;
			}
			if (context.BestRetreatCover != null && context.BestRetreatCover.IsValidFor(context.Body))
			{
				context.SetFact(Facts.CoverTactic, CoverTactic.Retreat);
				context.ReserveCoverPoint(context.BestRetreatCover);
				return context.BestRetreatCover.Position;
			}
			if (context.BestAdvanceCover != null && context.BestAdvanceCover.IsValidFor(context.Body))
			{
				context.SetFact(Facts.CoverTactic, CoverTactic.Advance);
				context.ReserveCoverPoint(context.BestAdvanceCover);
				return context.BestAdvanceCover.Position;
			}
			break;
		case CoverTactic.Advance:
			if (context.BestAdvanceCover != null && context.BestAdvanceCover.IsValidFor(context.Body))
			{
				context.SetFact(Facts.CoverTactic, CoverTactic.Advance);
				context.ReserveCoverPoint(context.BestAdvanceCover);
				return context.BestAdvanceCover.Position;
			}
			if (context.BestFlankCover != null && context.BestFlankCover.IsValidFor(context.Body))
			{
				context.SetFact(Facts.CoverTactic, CoverTactic.Flank);
				context.ReserveCoverPoint(context.BestFlankCover);
				return context.BestFlankCover.Position;
			}
			if (context.BestRetreatCover != null && context.BestRetreatCover.IsValidFor(context.Body))
			{
				context.SetFact(Facts.CoverTactic, CoverTactic.Retreat);
				context.ReserveCoverPoint(context.BestRetreatCover);
				return context.BestRetreatCover.Position;
			}
			break;
		case CoverTactic.Closest:
			if (context.ClosestCover != null && context.ClosestCover.IsValidFor(context.Body))
			{
				context.SetFact(Facts.CoverTactic, CoverTactic.Closest);
				context.ReserveCoverPoint(context.ClosestCover);
				return context.ClosestCover.Position;
			}
			break;
		}
		return context.BodyPosition;
	}

	public static Vector3 GetCoverPosition(CoverTactic tactic, ScientistAStarContext context)
	{
		return _GetCoverPosition(tactic, context);
	}

	protected override Vector3 _GetDestination(ScientistAStarContext context)
	{
		return GetCoverPosition(_preferredTactic, context);
	}

	protected override void OnPathFailed(ScientistAStarContext context)
	{
		context.SetFact(Facts.CoverTactic, CoverTactic.None);
	}

	protected override void OnPathComplete(ScientistAStarContext context)
	{
		context.SetFact(Facts.CoverTactic, CoverTactic.None);
	}
}
