using Oxide.Core;
using UnityEngine;

public class IsVisible : Conditional
{
	private float maximumDistance;

	public IsVisible(float maxDist)
	{
		maximumDistance = maxDist;
	}

	public override string GetArgs()
	{
		return maximumDistance.ToString("0.00f");
	}

	public static bool Test(uint id, string debugName, BaseEntity ent, BasePlayer player, float maximumDistance)
	{
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)ent == (Object)null || (Object)(object)player == (Object)null)
		{
			return false;
		}
		object obj = Interface.CallHook("OnEntityVisibilityCheck", (object)ent, (object)player, (object)id, (object)debugName, (object)maximumDistance);
		if (obj is bool)
		{
			return (bool)obj;
		}
		if (GamePhysics.LineOfSight(player.eyes.center, player.eyes.position, 1218519041))
		{
			if (!ent.IsVisible(player.eyes.HeadRay(), 1218519041, maximumDistance))
			{
				return ent.IsVisible(player.eyes.position, maximumDistance);
			}
			return true;
		}
		return false;
	}
}
