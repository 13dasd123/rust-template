using System;
using Unity.Collections;
using UnityEngine;

public struct RefCountedSpatialArray : IDisposable
{
	private NativeArray<byte> _array;

	public NativeArray<byte> RawArray => _array;

	public int Length => _array.Length;

	public static RefCountedSpatialArray Init(int length)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		RefCountedSpatialArray result = default(RefCountedSpatialArray);
		result._array = new NativeArray<byte>(length, (Allocator)4, (NativeArrayOptions)1);
		return result;
	}

	public void Add(int index)
	{
		Debug.Assert(_array[index] != byte.MaxValue);
		ref NativeArray<byte> array = ref _array;
		byte b = array[index];
		array[index] = (byte)(b + 1);
	}

	public void Remove(int index)
	{
		Debug.Assert(_array[index] != 0);
		ref NativeArray<byte> array = ref _array;
		byte b = array[index];
		array[index] = (byte)(b - 1);
	}

	public bool Get(int index)
	{
		return _array[index] > 0;
	}

	public void Dispose()
	{
		_array.Dispose();
	}
}
