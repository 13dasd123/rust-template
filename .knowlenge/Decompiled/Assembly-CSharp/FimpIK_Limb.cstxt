using System;
using FIMSpace.FTools;
using UnityEngine;

[Serializable]
public class FimpIK_Limb : FIK_ProcessorBase
{
	public class IKBone : FIK_IKBoneBase
	{
		[SerializeField]
		private Quaternion targetToLocalSpace;

		[SerializeField]
		private Vector3 defaultLocalPoleNormal;

		public Vector3 right { get; private set; }

		public Vector3 up { get; private set; }

		public Vector3 forward { get; private set; }

		public Vector3 srcPosition { get; private set; }

		public Quaternion srcRotation { get; private set; }

		public IKBone(Transform t)
			: base(t)
		{
		}

		public void Init(Transform root, Vector3 childPosition, Vector3 orientationNormal)
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0009: Unknown result type (might be due to invalid IL or missing references)
			//IL_0010: Unknown result type (might be due to invalid IL or missing references)
			//IL_0015: Unknown result type (might be due to invalid IL or missing references)
			//IL_001a: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0033: Unknown result type (might be due to invalid IL or missing references)
			//IL_0040: Unknown result type (might be due to invalid IL or missing references)
			//IL_0045: Unknown result type (might be due to invalid IL or missing references)
			//IL_0057: Unknown result type (might be due to invalid IL or missing references)
			//IL_005c: Unknown result type (might be due to invalid IL or missing references)
			//IL_006e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0073: Unknown result type (might be due to invalid IL or missing references)
			RefreshOrientations(childPosition, orientationNormal);
			Vector3 val = childPosition - base.transform.position;
			sqrMagn = ((Vector3)(ref val)).sqrMagnitude;
			LastKeyLocalRotation = base.transform.localRotation;
			right = base.transform.InverseTransformDirection(root.right);
			up = base.transform.InverseTransformDirection(root.up);
			forward = base.transform.InverseTransformDirection(root.forward);
			CaptureSourceAnimation();
		}

		public void RefreshOrientations(Vector3 childPosition, Vector3 orientationNormal)
		{
			//IL_0000: Unknown result type (might be due to invalid IL or missing references)
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0015: Unknown result type (might be due to invalid IL or missing references)
			//IL_001a: Unknown result type (might be due to invalid IL or missing references)
			//IL_001f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0027: Unknown result type (might be due to invalid IL or missing references)
			//IL_0028: Unknown result type (might be due to invalid IL or missing references)
			//IL_0035: Unknown result type (might be due to invalid IL or missing references)
			//IL_0036: Unknown result type (might be due to invalid IL or missing references)
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_003c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0044: Unknown result type (might be due to invalid IL or missing references)
			//IL_0049: Unknown result type (might be due to invalid IL or missing references)
			//IL_004a: Unknown result type (might be due to invalid IL or missing references)
			//IL_004f: Unknown result type (might be due to invalid IL or missing references)
			//IL_005b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0060: Unknown result type (might be due to invalid IL or missing references)
			//IL_0065: Unknown result type (might be due to invalid IL or missing references)
			//IL_0066: Unknown result type (might be due to invalid IL or missing references)
			//IL_006b: Unknown result type (might be due to invalid IL or missing references)
			if (!(orientationNormal == Vector3.zero))
			{
				Vector3 val = childPosition - base.transform.position;
				((Vector3)(ref val)).Normalize();
				if (!(val == Vector3.zero))
				{
					Quaternion rotation = Quaternion.LookRotation(val, orientationNormal);
					targetToLocalSpace = RotationToLocal(base.transform.rotation, rotation);
					defaultLocalPoleNormal = Quaternion.Inverse(base.transform.rotation) * orientationNormal;
				}
			}
		}

		public void CaptureSourceAnimation()
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_0018: Unknown result type (might be due to invalid IL or missing references)
			srcPosition = base.transform.position;
			srcRotation = base.transform.rotation;
		}

		public static Quaternion RotationToLocal(Quaternion parent, Quaternion rotation)
		{
			//IL_0000: Unknown result type (might be due to invalid IL or missing references)
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000c: Unknown result type (might be due to invalid IL or missing references)
			return Quaternion.Inverse(Quaternion.Inverse(parent) * rotation);
		}

		public Quaternion GetRotation(Vector3 direction, Vector3 orientationNormal)
		{
			//IL_0000: Unknown result type (might be due to invalid IL or missing references)
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0008: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Unknown result type (might be due to invalid IL or missing references)
			return Quaternion.LookRotation(direction, orientationNormal) * targetToLocalSpace;
		}

		public Vector3 GetCurrentOrientationNormal()
		{
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			//IL_000c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0011: Unknown result type (might be due to invalid IL or missing references)
			return base.transform.rotation * defaultLocalPoleNormal;
		}
	}

	public enum FIK_HintMode
	{
		Default,
		MiddleForward,
		MiddleBack,
		OnGoal,
		EndForward,
		Leg,
		UnityHumanoidIK
	}

	[NonSerialized]
	[Tooltip("3-Bones limb array")]
	private IKBone[] IKBones;

	[Range(0f, 1f)]
	[Space(4f)]
	[Tooltip("Blend value for goal position")]
	public float IKPositionWeight = 1f;

	[Tooltip("Blend value for end bone rotation")]
	[Range(0f, 1f)]
	public float FootRotationWeight = 1f;

	[Tooltip("Flex style algorithm for different limbs")]
	public FIK_HintMode AutoHintMode = FIK_HintMode.MiddleForward;

	protected Vector3 targetElbowNormal = Vector3.right;

	protected Quaternion lateEndBoneRotation;

	protected Quaternion postIKAnimatorEndBoneRot;

	public Vector3 ExtraHintAdjustementOffset = Vector3.zero;

	public bool InverseHint;

	[NonSerialized]
	public float FeetStretchWeight = 1f;

	[NonSerialized]
	public float FeetStretchSensitivity = 1f;

	[NonSerialized]
	public float FeetStretchLimit = 1f;

	[NonSerialized]
	public float FeetFadeQuicker = 1f;

	[NonSerialized]
	public bool disableFeet;

	private float maxFeetAngle;

	private float maxFeetAngleFactor;

	private Vector3 ankleToFeet;

	[NonSerialized]
	public Animator HumanoidAnimator;

	[NonSerialized]
	public bool IsRight;

	private bool everyIsChild = true;

	private bool hasFeet;

	private bool hasRoot;

	[HideInInspector]
	[Range(0f, 1f)]
	public float ManualHintPositionWeight;

	[HideInInspector]
	public Vector3 IKManualHintPosition = Vector3.zero;

	[NonSerialized]
	public bool UseEndBoneMapping = true;

	private float internalRotationWeightMul = 1f;

	public Quaternion EndBoneMapping { get; protected set; }

	public IKBone FeetIKBone => IKBones[3];

	public float ScaleReference { get; protected set; }

	public Transform Root { get; protected set; }

	public IKBone StartIKBone => IKBones[0];

	public IKBone MiddleIKBone => IKBones[1];

	public IKBone EndIKBone => IKBones[2];

	public IKBone EndParentIKBone { get; private set; }

	public int BonesCount => IKBones.Length;

	public override void Update()
	{
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00de: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0100: Unknown result type (might be due to invalid IL or missing references)
		//IL_011d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_012e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		//IL_0155: Unknown result type (might be due to invalid IL or missing references)
		//IL_015a: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0223: Unknown result type (might be due to invalid IL or missing references)
		//IL_0228: Unknown result type (might be due to invalid IL or missing references)
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		//IL_0173: Unknown result type (might be due to invalid IL or missing references)
		//IL_0178: Unknown result type (might be due to invalid IL or missing references)
		//IL_017e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0183: Unknown result type (might be due to invalid IL or missing references)
		//IL_0188: Unknown result type (might be due to invalid IL or missing references)
		//IL_01af: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0197: Unknown result type (might be due to invalid IL or missing references)
		//IL_019c: Unknown result type (might be due to invalid IL or missing references)
		//IL_019e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0210: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0203: Unknown result type (might be due to invalid IL or missing references)
		if (!base.Initialized)
		{
			return;
		}
		Refresh();
		float num = IKPositionWeight * IKWeight;
		IKBone startIKBone = StartIKBone;
		Vector3 val = MiddleIKBone.transform.position - StartIKBone.transform.position;
		startIKBone.sqrMagn = ((Vector3)(ref val)).sqrMagnitude;
		IKBone middleIKBone = MiddleIKBone;
		val = EndIKBone.transform.position - MiddleIKBone.transform.position;
		middleIKBone.sqrMagn = ((Vector3)(ref val)).sqrMagnitude;
		targetElbowNormal = GetDefaultFlexNormal();
		if (ExtraHintAdjustementOffset != Vector3.zero)
		{
			val = Vector3.Lerp(targetElbowNormal, CalculateElbowNormalToPosition(EndIKBone.transform.position + EndIKBone.transform.rotation * ExtraHintAdjustementOffset), ((Vector3)(ref ExtraHintAdjustementOffset)).magnitude);
			targetElbowNormal = ((Vector3)(ref val)).normalized;
		}
		Vector3 val2 = GetOrientationDirection(IKTargetPosition, InverseHint ? (-targetElbowNormal) : targetElbowNormal);
		if (val2 == Vector3.zero)
		{
			val2 = MiddleIKBone.transform.position - StartIKBone.transform.position;
		}
		if (num > 0f)
		{
			Quaternion val3 = StartIKBone.GetRotation(val2, targetElbowNormal) * base.StartBoneRotationOffset;
			if (num < 1f)
			{
				val3 = Quaternion.LerpUnclamped(StartIKBone.srcRotation, val3, num);
			}
			StartIKBone.transform.rotation = val3;
			Quaternion val4 = MiddleIKBone.GetRotation(IKTargetPosition - MiddleIKBone.transform.position, MiddleIKBone.GetCurrentOrientationNormal());
			if (num < 1f)
			{
				val4 = Quaternion.LerpUnclamped(MiddleIKBone.srcRotation, val4, num);
			}
			MiddleIKBone.transform.rotation = val4;
		}
		postIKAnimatorEndBoneRot = EndIKBone.transform.rotation;
		EndBoneRotation();
	}

	private Vector3 GetAutomaticFlexNormal()
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0136: Unknown result type (might be due to invalid IL or missing references)
		//IL_0141: Unknown result type (might be due to invalid IL or missing references)
		//IL_014c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0151: Unknown result type (might be due to invalid IL or missing references)
		//IL_015b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_0172: Unknown result type (might be due to invalid IL or missing references)
		//IL_0177: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0209: Unknown result type (might be due to invalid IL or missing references)
		//IL_0188: Unknown result type (might be due to invalid IL or missing references)
		//IL_0193: Unknown result type (might be due to invalid IL or missing references)
		//IL_019e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01be: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01da: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_010f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_0116: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		//IL_0123: Unknown result type (might be due to invalid IL or missing references)
		//IL_0128: Unknown result type (might be due to invalid IL or missing references)
		//IL_012e: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0246: Unknown result type (might be due to invalid IL or missing references)
		//IL_023b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0240: Unknown result type (might be due to invalid IL or missing references)
		Vector3 currentOrientationNormal = StartIKBone.GetCurrentOrientationNormal();
		switch (AutoHintMode)
		{
		case FIK_HintMode.Leg:
		{
			Vector3 val2 = IKTargetRotation * (EndIKBone.forward * internalRotationWeightMul * 2f);
			if (hasRoot)
			{
				val2 += Root.forward * 0.06f;
				Vector3 val3 = Root.InverseTransformPoint(IKTargetPosition);
				val3.y = 0f;
				val2 += (Root.TransformPoint(val3) - Root.position) * 0.025f;
			}
			float num = Vector3.Distance(MiddleIKBone.transform.position, EndIKBone.transform.position) * 0.1f;
			Vector3 val4 = CalculateElbowNormalToPosition(MiddleIKBone.srcPosition + val2 * num);
			return Vector3.LerpUnclamped(((Vector3)(ref currentOrientationNormal)).normalized, val4, 0.85f);
		}
		case FIK_HintMode.MiddleForward:
			return Vector3.LerpUnclamped(((Vector3)(ref currentOrientationNormal)).normalized, MiddleIKBone.srcRotation * MiddleIKBone.right, 0.5f);
		case FIK_HintMode.MiddleBack:
			return MiddleIKBone.srcRotation * -MiddleIKBone.right;
		case FIK_HintMode.EndForward:
		{
			Vector3 val = Vector3.Cross(MiddleIKBone.srcPosition + EndIKBone.srcRotation * EndIKBone.forward - StartIKBone.srcPosition, IKTargetPosition - StartIKBone.srcPosition);
			if (val == Vector3.zero)
			{
				return currentOrientationNormal;
			}
			return val;
		}
		case FIK_HintMode.OnGoal:
			return Vector3.LerpUnclamped(currentOrientationNormal, lateEndBoneRotation * EndIKBone.right, 0.5f);
		case FIK_HintMode.UnityHumanoidIK:
			if (Object.op_Implicit((Object)(object)HumanoidAnimator))
			{
				HumanoidAnimator.logWarnings = false;
				return CalculateElbowNormalToPosition(HumanoidAnimator.GetIKHintPosition((AvatarIKHint)(IsRight ? 1 : 0)));
			}
			break;
		}
		return currentOrientationNormal;
	}

	public void OnDrawGizmos()
	{
		_ = base.Initialized;
	}

	public virtual void SetRootReference(Transform mainParentTransform)
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		Root = mainParentTransform;
		EndBoneMapping = Quaternion.FromToRotation(EndIKBone.right, Vector3.right);
		EndBoneMapping *= Quaternion.FromToRotation(EndIKBone.up, Vector3.up);
		if (Object.op_Implicit((Object)(object)mainParentTransform))
		{
			hasRoot = true;
		}
	}

	public void RefreshLength()
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = StartIKBone.transform.position - MiddleIKBone.transform.position;
		ScaleReference = ((Vector3)(ref val)).magnitude;
	}

	public void RefreshScaleReference()
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = StartIKBone.transform.position - MiddleIKBone.transform.position;
		ScaleReference = ((Vector3)(ref val)).magnitude;
	}

	private float GetCurrentLegToAnkleLength()
	{
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		float epsilon = Mathf.Epsilon;
		Vector3 val = StartIKBone.transform.position - MiddleIKBone.transform.position;
		float num = epsilon + ((Vector3)(ref val)).magnitude;
		val = MiddleIKBone.transform.position - EndIKBone.transform.position;
		return num + ((Vector3)(ref val)).magnitude;
	}

	public float GetStretchValue(Vector3 targetPos)
	{
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = StartIKBone.transform.position - targetPos;
		return ((Vector3)(ref val)).magnitude / GetCurrentLegToAnkleLength();
	}

	public Vector3 GetNotStretchedPositionTowards(Vector3 targetPos, float maxStretch)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = targetPos - StartIKBone.transform.position;
		return StartIKBone.transform.position + ((Vector3)(ref val)).normalized * (GetCurrentLegToAnkleLength() * maxStretch);
	}

	public void ApplyMaxStretchingPreprocessing(float maxStretch, float allowIKRotationFadeout = 2f)
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0271: Unknown result type (might be due to invalid IL or missing references)
		//IL_0277: Unknown result type (might be due to invalid IL or missing references)
		//IL_0287: Unknown result type (might be due to invalid IL or missing references)
		//IL_028c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0291: Unknown result type (might be due to invalid IL or missing references)
		//IL_0294: Unknown result type (might be due to invalid IL or missing references)
		//IL_029b: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0225: Unknown result type (might be due to invalid IL or missing references)
		//IL_022b: Unknown result type (might be due to invalid IL or missing references)
		//IL_023b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0240: Unknown result type (might be due to invalid IL or missing references)
		//IL_0245: Unknown result type (might be due to invalid IL or missing references)
		//IL_0248: Unknown result type (might be due to invalid IL or missing references)
		//IL_024f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0254: Unknown result type (might be due to invalid IL or missing references)
		//IL_0259: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0200: Unknown result type (might be due to invalid IL or missing references)
		if (!(maxStretch < 1.1f))
		{
			return;
		}
		Vector3 val = StartIKBone.transform.position - IKTargetPosition;
		float magnitude = ((Vector3)(ref val)).magnitude;
		float currentLegToAnkleLength = GetCurrentLegToAnkleLength();
		float num = magnitude / currentLegToAnkleLength;
		if (num > maxStretch)
		{
			if (hasFeet && FeetStretchWeight > 0f)
			{
				if (maxFeetAngle > 0f)
				{
					Vector3 val2 = IKTargetPosition - StartIKBone.transform.position;
					((Vector3)(ref val2)).Normalize();
					Vector3 val3 = FeetIKBone.transform.position - EndIKBone.transform.position;
					((Vector3)(ref val3)).Normalize();
					float num2 = Vector3.Dot(val2, val3);
					num2 = Mathf.Clamp01(num2);
					val = FeetIKBone.transform.position - EndIKBone.transform.position;
					float magnitude2 = ((Vector3)(ref val)).magnitude;
					float num3 = magnitude - currentLegToAnkleLength * Mathf.Min(maxStretch, 1f);
					num3 /= magnitude2 * FeetFadeQuicker;
					float num4 = num3;
					num3 *= maxFeetAngleFactor * FeetStretchSensitivity;
					if (num3 > 1f)
					{
						num3 = 1f;
					}
					if (num4 < 1f)
					{
						num4 = 1f;
					}
					else
					{
						if (num4 > 2f)
						{
							num4 = 2f;
						}
						num4 -= 1f;
						num4 *= num4;
						num4 = 1f - num4;
					}
					float num5 = Mathf.Min(FeetStretchLimit, (1f - num2) * (90f / maxFeetAngle) * num3 * FeetStretchWeight);
					if (num > 1.09f)
					{
						num4 *= 1f - Mathf.InverseLerp(1.09f, 1.23f, num);
					}
					if (num5 != 0f)
					{
						OffsetHeel(num5, num4);
					}
					val = StartIKBone.transform.position - IKTargetPosition;
					magnitude = ((Vector3)(ref val)).magnitude;
					num = magnitude / currentLegToAnkleLength;
				}
				if (num > maxStretch)
				{
					float num6 = maxStretch * currentLegToAnkleLength;
					Vector3 position = StartIKBone.transform.position;
					val = IKTargetPosition - StartIKBone.transform.position;
					IKTargetPosition = position + ((Vector3)(ref val)).normalized * num6;
				}
			}
			else
			{
				float num7 = maxStretch * currentLegToAnkleLength;
				Vector3 position2 = StartIKBone.transform.position;
				val = IKTargetPosition - StartIKBone.transform.position;
				IKTargetPosition = position2 + ((Vector3)(ref val)).normalized * num7;
			}
			if (allowIKRotationFadeout > 0f)
			{
				float num8 = num - maxStretch;
				num8 = Mathf.Clamp01(num8 * allowIKRotationFadeout);
				internalRotationWeightMul = 1f - num8;
			}
		}
		else
		{
			internalRotationWeightMul = 1f;
		}
	}

	private void PrepareFeet()
	{
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = EndIKBone.transform.position - MiddleIKBone.transform.position;
		((Vector3)(ref val)).Normalize();
		ankleToFeet = FeetIKBone.transform.position - EndIKBone.transform.position;
		((Vector3)(ref ankleToFeet)).Normalize();
		maxFeetAngle = Vector3.Angle(ankleToFeet, val);
		maxFeetAngleFactor = 90f / maxFeetAngle;
	}

	internal void OffsetHeel(float heelRot, float feetCompensate = 1f)
	{
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		//IL_0121: Unknown result type (might be due to invalid IL or missing references)
		//IL_0126: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		//IL_010c: Unknown result type (might be due to invalid IL or missing references)
		//IL_010f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		if (!hasFeet || disableFeet)
		{
			return;
		}
		Quaternion iKTargetRotation = IKTargetRotation;
		Vector3 val = FeetIKBone.transform.position - EndIKBone.transform.position;
		Vector3 val2 = Quaternion.Inverse(iKTargetRotation) * val;
		Vector3 val3 = ((!UseEndBoneMapping) ? (IKTargetRotation * EndIKBone.right) : (IKTargetRotation * Vector3.right));
		Quaternion val4 = Quaternion.AngleAxis(heelRot * maxFeetAngle, val3);
		val2 = (IKTargetRotation = val4 * iKTargetRotation) * val2 - val;
		if (feetCompensate > 0f)
		{
			Quaternion val5 = Quaternion.Inverse(val4) * FeetIKBone.transform.rotation;
			if (feetCompensate >= 1f)
			{
				FeetIKBone.transform.rotation = val5;
			}
			else
			{
				FeetIKBone.transform.rotation = Quaternion.Lerp(FeetIKBone.transform.rotation, val5, feetCompensate);
			}
		}
		IKTargetPosition -= val2;
	}

	public IKBone GetBone(int index)
	{
		return IKBones[index];
	}

	public override void Init(Transform root)
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_00de: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		if (!base.Initialized)
		{
			Vector3 val = Vector3.Cross(MiddleIKBone.transform.position - StartIKBone.transform.position, EndIKBone.transform.position - MiddleIKBone.transform.position);
			if (val != Vector3.zero)
			{
				targetElbowNormal = val;
			}
			base.fullLength = 0f;
			StartIKBone.Init(root, MiddleIKBone.transform.position, targetElbowNormal);
			MiddleIKBone.Init(root, EndIKBone.transform.position, targetElbowNormal);
			EndIKBone.Init(root, EndIKBone.transform.position + (EndIKBone.transform.position - MiddleIKBone.transform.position), targetElbowNormal);
			base.fullLength = base.Bones[0].BoneLength + base.Bones[1].BoneLength;
			RefreshDefaultFlexNormal();
			if ((Object)(object)EndIKBone.transform.parent != (Object)(object)MiddleIKBone.transform)
			{
				everyIsChild = false;
			}
			else if ((Object)(object)MiddleIKBone.transform.parent != (Object)(object)StartIKBone.transform)
			{
				everyIsChild = false;
			}
			else
			{
				everyIsChild = true;
			}
			SetRootReference(root);
			if (Application.isPlaying)
			{
				base.Initialized = true;
			}
			if (hasFeet)
			{
				PrepareFeet();
			}
			if (everyIsChild)
			{
				EndParentIKBone = MiddleIKBone;
			}
			else
			{
				EndParentIKBone = new IKBone(EndIKBone.transform.parent);
			}
		}
	}

	public void SetBones(Transform startBone, Transform midBone, Transform endBone)
	{
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		IKBones = new IKBone[3];
		IKBones[0] = new IKBone(startBone);
		IKBones[1] = new IKBone(midBone);
		IKBones[2] = new IKBone(endBone);
		base.Bones = new FIK_IKBoneBase[3]
		{
			IKBones[0],
			IKBones[1],
			IKBones[2]
		};
		IKBones[0].SetChild(IKBones[1]);
		IKBones[1].SetChild(IKBones[2]);
		IKTargetPosition = endBone.position;
		IKTargetRotation = endBone.rotation;
	}

	public void SetLegWithFeet(Transform startBone, Transform midBone, Transform endBone, Transform feet)
	{
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		IKBones = new IKBone[4];
		IKBones[0] = new IKBone(startBone);
		IKBones[1] = new IKBone(midBone);
		IKBones[2] = new IKBone(endBone);
		IKBones[3] = new IKBone(feet);
		base.Bones = new FIK_IKBoneBase[4]
		{
			IKBones[0],
			IKBones[1],
			IKBones[2],
			IKBones[3]
		};
		IKBones[0].SetChild(IKBones[1]);
		IKBones[1].SetChild(IKBones[2]);
		IKBones[2].SetChild(IKBones[3]);
		IKTargetPosition = endBone.position;
		IKTargetRotation = endBone.rotation;
		hasFeet = true;
	}

	public void SetBones(Transform startBone, Transform endBone)
	{
		SetBones(startBone, endBone.parent, endBone);
	}

	protected virtual void Refresh()
	{
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		RefreshAnimatorCoords();
		if (!everyIsChild)
		{
			MiddleIKBone.RefreshOrientations(EndIKBone.transform.position, targetElbowNormal);
		}
	}

	protected virtual void EndBoneRotation()
	{
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		float num = FootRotationWeight * IKWeight * internalRotationWeightMul;
		if (num > 0f)
		{
			if (UseEndBoneMapping)
			{
				if (num < 1f)
				{
					EndIKBone.transform.rotation = Quaternion.SlerpUnclamped(postIKAnimatorEndBoneRot, IKTargetRotation * EndBoneMapping, num);
				}
				else
				{
					EndIKBone.transform.rotation = IKTargetRotation * EndBoneMapping;
				}
			}
			else if (num < 1f)
			{
				EndIKBone.transform.rotation = Quaternion.SlerpUnclamped(postIKAnimatorEndBoneRot, IKTargetRotation, num);
			}
			else
			{
				EndIKBone.transform.rotation = IKTargetRotation;
			}
		}
		lateEndBoneRotation = EndIKBone.transform.rotation;
	}

	public override void PreCalibrate()
	{
		base.PreCalibrate();
		RefreshScaleReference();
	}

	public void RefreshAnimatorCoords()
	{
		StartIKBone.CaptureSourceAnimation();
		MiddleIKBone.CaptureSourceAnimation();
		EndIKBone.CaptureSourceAnimation();
		if (!everyIsChild && MiddleIKBone != EndParentIKBone)
		{
			EndParentIKBone.CaptureSourceAnimation();
		}
	}

	protected Vector3 GetDefaultFlexNormal()
	{
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		if (ManualHintPositionWeight > 0f)
		{
			if (ManualHintPositionWeight >= 1f)
			{
				return CalculateElbowNormalToPosition(IKManualHintPosition);
			}
			Vector3 automaticFlexNormal = GetAutomaticFlexNormal();
			return Vector3.LerpUnclamped(((Vector3)(ref automaticFlexNormal)).normalized, CalculateElbowNormalToPosition(IKManualHintPosition), ManualHintPositionWeight);
		}
		return GetAutomaticFlexNormal();
	}

	public Vector3 CalculateElbowNormalToPosition(Vector3 targetElbowPos)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		return Vector3.Cross(targetElbowPos - StartIKBone.transform.position, EndIKBone.transform.position - StartIKBone.transform.position);
	}

	public void RefreshDefaultFlexNormal()
	{
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = Vector3.Cross(MiddleIKBone.transform.position - StartIKBone.transform.position, EndIKBone.transform.position - MiddleIKBone.transform.position);
		if (val != Vector3.zero)
		{
			targetElbowNormal = val;
		}
	}

	protected Vector3 GetOrientationDirection(Vector3 ikPosition, Vector3 orientationNormal)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = ikPosition - StartIKBone.transform.position;
		if (val == Vector3.zero)
		{
			return Vector3.zero;
		}
		float sqrMagnitude = ((Vector3)(ref val)).sqrMagnitude;
		float num = Mathf.Sqrt(sqrMagnitude);
		float num2 = (sqrMagnitude + StartIKBone.sqrMagn - MiddleIKBone.sqrMagn) / 2f / num;
		float num3 = Mathf.Sqrt(Mathf.Clamp(StartIKBone.sqrMagn - num2 * num2, 0f, float.PositiveInfinity));
		Vector3 val2 = Vector3.Cross(val / num, orientationNormal);
		return Quaternion.LookRotation(val, val2) * new Vector3(0f, num3, num2);
	}
}
