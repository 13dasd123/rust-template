using FIMSpace;
using FIMSpace.Basics;
using FIMSpace.GroundFitter;
using UnityEngine;
using UnityEngine.AI;

[RequireComponent(typeof(NavMeshAgent))]
public class FGroundFitter_Demo_NavMesh : MonoBehaviour
{
	public FGroundFitter_Base TargetGroundFitter;

	[Range(0.5f, 50f)]
	public float RotationSpeed = 3f;

	[Tooltip("Moving Accordingly to rotation after acceleration")]
	[Range(0f, 1f)]
	public float DirectMovement = 0.8f;

	public float AnimationSpeedScale = 1f;

	private NavMeshAgent agent;

	private FAnimationClips animationClips;

	private bool reachedDestination;

	private Vector3 lastAgentPosition;

	private string movementClip;

	private float dirMov;

	private float sd_dirMov;

	public bool moving { get; private set; }

	private void Reset()
	{
		TargetGroundFitter = ((Component)this).GetComponent<FGroundFitter_Base>();
		if (Object.op_Implicit((Object)(object)TargetGroundFitter))
		{
			TargetGroundFitter.GlueToGround = false;
		}
		agent = ((Component)this).GetComponent<NavMeshAgent>();
		if (Object.op_Implicit((Object)(object)agent))
		{
			agent.acceleration = 1000f;
			agent.angularSpeed = 100f;
		}
	}

	protected virtual void Start()
	{
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)TargetGroundFitter == (Object)null)
		{
			TargetGroundFitter = ((Component)this).GetComponent<FGroundFitter_Base>();
		}
		if (Object.op_Implicit((Object)(object)TargetGroundFitter))
		{
			TargetGroundFitter.GlueToGround = false;
		}
		agent = ((Component)this).GetComponent<NavMeshAgent>();
		agent.Warp(((Component)this).transform.position);
		agent.SetDestination(((Component)this).transform.position);
		moving = false;
		lastAgentPosition = ((Component)this).transform.position;
		reachedDestination = true;
		animationClips = new FAnimationClips(((Component)this).GetComponentInChildren<Animator>());
		animationClips.AddClip("Idle");
		if (animationClips.Animator.StateExists("Move") || animationClips.Animator.StateExists("move"))
		{
			movementClip = "Move";
		}
		else
		{
			movementClip = "Walk";
		}
		animationClips.AddClip(movementClip);
	}

	protected virtual void Update()
	{
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_0161: Unknown result type (might be due to invalid IL or missing references)
		//IL_0176: Unknown result type (might be due to invalid IL or missing references)
		//IL_020b: Unknown result type (might be due to invalid IL or missing references)
		//IL_020c: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0198: Unknown result type (might be due to invalid IL or missing references)
		//IL_019d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_011d: Unknown result type (might be due to invalid IL or missing references)
		//IL_011e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0126: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		FAnimationClips fAnimationClips = animationClips;
		Vector3 val = agent.desiredVelocity;
		fAnimationClips.SetFloat("AnimationSpeed", ((Vector3)(ref val)).magnitude * AnimationSpeedScale, 8f);
		IsMovingCheck();
		Vector3 val2 = agent.nextPosition - lastAgentPosition;
		val = agent.velocity;
		float magnitude = ((Vector3)(ref val)).magnitude;
		_ = ((Vector3)(ref val2)).normalized;
		Vector3 val3 = agent.nextPosition;
		if (DirectMovement > 0f)
		{
			if (magnitude > 0f)
			{
				Vector3 val4 = lastAgentPosition + ((Component)this).transform.forward * magnitude * Time.deltaTime;
				float num = 0.25f;
				float num2 = 1f;
				if (agent.remainingDistance <= agent.stoppingDistance * 1.1f + 0.1f)
				{
					num = 0.1f;
					num2 = 0f;
				}
				dirMov = Mathf.SmoothDamp(dirMov, num2, ref sd_dirMov, num, 1000f, Time.deltaTime);
				val3 = Vector3.LerpUnclamped(val3, val4, dirMov);
			}
			else
			{
				dirMov = Mathf.SmoothDamp(dirMov, 0f, ref sd_dirMov, 0.1f, 1000f, Time.deltaTime);
			}
		}
		val3.y = agent.nextPosition.y;
		((Component)this).transform.position = val3;
		if (moving)
		{
			Vector3 val5 = agent.nextPosition + agent.desiredVelocity;
			Quaternion val6 = Quaternion.LookRotation(new Vector3(val5.x, 0f, val5.z) - ((Component)this).transform.position);
			float y = ((Quaternion)(ref val6)).eulerAngles.y;
			TargetGroundFitter.UpAxisRotation = Mathf.LerpAngle(TargetGroundFitter.UpAxisRotation, y, Time.deltaTime * RotationSpeed);
		}
		lastAgentPosition = val3;
	}

	private bool IsMovingCheck()
	{
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		bool num = moving;
		moving = true;
		if (!agent.pathPending && agent.remainingDistance <= agent.stoppingDistance)
		{
			if (agent.hasPath)
			{
				Vector3 velocity = agent.velocity;
				if (((Vector3)(ref velocity)).sqrMagnitude != 0f)
				{
					goto IL_006e;
				}
			}
			if (!reachedDestination)
			{
				OnReachDestination();
			}
			moving = false;
		}
		goto IL_006e;
		IL_006e:
		if (num != moving)
		{
			OnStartMoving();
		}
		return moving;
	}

	protected virtual void OnReachDestination()
	{
		reachedDestination = true;
		animationClips.CrossFadeInFixedTime("Idle");
	}

	protected virtual void OnStartMoving()
	{
		reachedDestination = false;
		animationClips.CrossFadeInFixedTime(movementClip);
	}
}
