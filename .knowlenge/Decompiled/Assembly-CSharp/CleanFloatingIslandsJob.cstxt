using System;
using Facepunch.MarchingCubes;
using Unity.Burst;
using Unity.Collections;
using Unity.Jobs;
using Unity.Mathematics;
using Unity.Profiling;

[BurstCompile]
internal struct CleanFloatingIslandsJob : IJob
{
	private struct NativeStack : IDisposable
	{
		public NativeList<int3> arr;

		public NativeStack(Allocator allocator)
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000c: Unknown result type (might be due to invalid IL or missing references)
			arr = new NativeList<int3>(AllocatorHandle.op_Implicit(allocator));
		}

		public void Dispose()
		{
			arr.Dispose();
		}

		public void Push(int3 v)
		{
			arr.Add(ref v);
		}

		public bool TryPop(out int3 v)
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_002a: Unknown result type (might be due to invalid IL or missing references)
			//IL_002f: Unknown result type (might be due to invalid IL or missing references)
			v = default(int3);
			if (arr.Length == 0)
			{
				return false;
			}
			v = arr[arr.Length - 1];
			arr.RemoveAtSwapBack(arr.Length - 1);
			return true;
		}
	}

	public Point3DGrid Sampler;

	public static readonly ProfilerMarker k_Init = new ProfilerMarker("Init");

	public static readonly ProfilerMarker k_Flood = new ProfilerMarker("Flood");

	public static readonly ProfilerMarker k_Copy = new ProfilerMarker("CopyBack");

	public void Execute()
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_011a: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_015c: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		//IL_019c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0200: Unknown result type (might be due to invalid IL or missing references)
		//IL_020f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_014c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0242: Unknown result type (might be due to invalid IL or missing references)
		//IL_0257: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_022b: Unknown result type (might be due to invalid IL or missing references)
		//IL_028b: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d5: Unknown result type (might be due to invalid IL or missing references)
		NativeBitArray other = default(NativeBitArray);
		((NativeBitArray)(ref other))..ctor(Sampler.Length, AllocatorHandle.op_Implicit((Allocator)2), (NativeArrayOptions)1);
		NativeStack nativeStack = new NativeStack((Allocator)2);
		int width = Sampler.Width;
		int depth = Sampler.Depth;
		int3 val = default(int3);
		for (int i = 0; i < width; i++)
		{
			for (int j = 0; j < depth; j++)
			{
				((int3)(ref val))..ctor(i, 1, j);
				int num = Sampler.ToIndex(val);
				if (Sampler[num])
				{
					nativeStack.Push(val);
					((NativeBitArray)(ref other)).Set(num, true);
				}
			}
		}
		int3 v;
		int3 val2 = default(int3);
		while (nativeStack.TryPop(out v))
		{
			int num2 = v.x - 1;
			((int3)(ref val2))..ctor(num2, ((int3)(ref v)).yz);
			int num3 = 0;
			while (Sampler.InBounds(val2) && Sampler[num3 = Sampler.ToIndex(val2)] && !((NativeBitArray)(ref other)).IsSet(num3))
			{
				((NativeBitArray)(ref other)).Set(num3, true);
				((int3)(ref val2))..ctor(--num2, ((int3)(ref v)).yz);
			}
			int num4 = v.x + 1;
			((int3)(ref val2))..ctor(num4, ((int3)(ref v)).yz);
			while (Sampler.InBounds(val2) && Sampler[num3 = Sampler.ToIndex(val2)] && !((NativeBitArray)(ref other)).IsSet(num3))
			{
				((NativeBitArray)(ref other)).Set(num3, true);
				((int3)(ref val2))..ctor(++num4, ((int3)(ref v)).yz);
			}
			int num5 = v.z - 1;
			((int3)(ref val2))..ctor(((int3)(ref v)).xy, num5);
			while (Sampler.InBounds(val2) && Sampler[num3 = Sampler.ToIndex(val2)] && !((NativeBitArray)(ref other)).IsSet(num3))
			{
				((NativeBitArray)(ref other)).Set(num3, true);
				((int3)(ref val2))..ctor(((int3)(ref v)).xy, --num5);
			}
			int num6 = v.z + 1;
			((int3)(ref val2))..ctor(((int3)(ref v)).xy, num6);
			while (Sampler.InBounds(val2) && Sampler[num3 = Sampler.ToIndex(val2)] && !((NativeBitArray)(ref other)).IsSet(num3))
			{
				((NativeBitArray)(ref other)).Set(num3, true);
				((int3)(ref val2))..ctor(((int3)(ref v)).xy, ++num6);
			}
			for (int k = num2; k < num4; k++)
			{
				for (int l = num5; l < num6; l++)
				{
					for (int m = -1; m <= 1; m += 2)
					{
						((int3)(ref val2))..ctor(k, v.y + m, l);
						if (Sampler.InBounds(val2) && Sampler[num3 = Sampler.ToIndex(val2)] && !((NativeBitArray)(ref other)).IsSet(num3))
						{
							nativeStack.Push(val2);
							((NativeBitArray)(ref other)).Set(num3, true);
						}
					}
				}
			}
		}
		Sampler.CopyFromNativeBitArray(ref other);
	}
}
