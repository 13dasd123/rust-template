using UnityEngine;

public class TriggerParentExclusion : TriggerBase, IServerComponent
{
	public override GameObject InterestedInObject(GameObject obj)
	{
		obj = base.InterestedInObject(obj);
		if (obj == null)
		{
			return null;
		}
		BaseEntity baseEntity = GameObjectEx.ToBaseEntity(obj);
		if (baseEntity == null)
		{
			return null;
		}
		if (baseEntity.isClient)
		{
			return null;
		}
		return baseEntity.gameObject;
	}

	internal override void OnEntityEnter(BaseEntity ent)
	{
		BasePlayer basePlayer = ent.ToPlayer();
		if ((!(basePlayer != null) || !basePlayer.isMounted) && ent.HasParent())
		{
			ent.SetParent(null, worldPositionStays: true, sendImmediate: true);
		}
	}

	internal override void OnEntityLeave(BaseEntity ent)
	{
		BasePlayer basePlayer = ent.ToPlayer();
		if (!(basePlayer != null) || !basePlayer.IsSleeping())
		{
			ent.ForceUpdateTriggers(enter: true, exit: false);
		}
	}
}
