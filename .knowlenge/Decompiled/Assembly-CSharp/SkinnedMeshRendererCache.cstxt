using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

public static class SkinnedMeshRendererCache
{
	[Serializable]
	public class RigInfo
	{
		public string root;

		public string[] bones;

		public Matrix4x4[] transforms;

		public Matrix4x4 rootTransform;
	}

	public static Dictionary<Mesh, RigInfo> dictionary = new Dictionary<Mesh, RigInfo>();

	public static void Add(Mesh mesh, RigInfo info)
	{
		if (!dictionary.ContainsKey(mesh))
		{
			dictionary.Add(mesh, info);
		}
	}

	public static RigInfo Get(SkinnedMeshRenderer renderer)
	{
		if (!dictionary.TryGetValue(renderer.sharedMesh, out var value))
		{
			value = new RigInfo();
			Transform rootBone = renderer.rootBone;
			Transform[] bones = renderer.bones;
			if (rootBone == null)
			{
				Debug.LogWarning("Renderer without a valid root bone: " + renderer.name + " " + renderer.sharedMesh.name, renderer.gameObject);
				return value;
			}
			renderer.transform.position = Vector3.zero;
			renderer.transform.rotation = Quaternion.identity;
			renderer.transform.localScale = Vector3.one;
			value.root = rootBone.name;
			value.bones = bones.Select((Transform x) => x.name).ToArray();
			value.transforms = bones.Select((Transform x) => x.transform.localToWorldMatrix).ToArray();
			value.rootTransform = renderer.rootBone.transform.localToWorldMatrix;
			dictionary.Add(renderer.sharedMesh, value);
		}
		return value;
	}
}
