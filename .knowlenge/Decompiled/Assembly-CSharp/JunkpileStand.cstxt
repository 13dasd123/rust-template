using System.Collections;
using Apex.Ai.HTN;
using UnityEngine;

public class JunkpileStand : OperatorBase<ScientistJunkpileContext>
{
	public override void Execute(ScientistJunkpileContext context)
	{
		context.SetFact(Facts.IsStandingUp, value: true);
		context.Body.StartCoroutine(AsyncTimer(context, 0.2f));
	}

	public override OperatorStateType Tick(ScientistJunkpileContext context, PrimitiveTaskSelector task)
	{
		if (context.IsFact(Facts.IsStandingUp))
		{
			return OperatorStateType.Running;
		}
		ApplyExpectedEffects(context, task);
		return OperatorStateType.Complete;
	}

	public override void Abort(ScientistJunkpileContext context, PrimitiveTaskSelector task)
	{
		context.Body.StopCoroutine(AsyncTimer(context, 0f));
		Reset(context);
	}

	private IEnumerator AsyncTimer(ScientistJunkpileContext context, float time)
	{
		yield return CoroutineEx.waitForSeconds(time);
		context.Body.modelState.ducked = false;
		context.SetFact(Facts.IsDucking, value: false);
		yield return CoroutineEx.waitForSeconds(time * 2f);
		context.SetFact(Facts.IsStandingUp, value: false);
	}

	private void Reset(ScientistJunkpileContext context)
	{
		context.Body.modelState.ducked = false;
		context.SetFact(Facts.IsDucking, value: false);
		context.SetFact(Facts.IsStandingUp, value: false);
	}
}
