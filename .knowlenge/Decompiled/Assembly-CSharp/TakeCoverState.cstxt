using UnityEngine;

public class TakeCoverState : BasicAIState
{
	private StateStatus status = StateStatus.Error;

	private BaseEntity coverFromEntity;

	public TakeCoverState()
		: base(AIState.TakeCover)
	{
	}

	public override void StateEnter(BaseAIBrain brain, BaseEntity entity)
	{
		base.StateEnter(brain, entity);
		status = StateStatus.Running;
		if (!StartMovingToCover(entity as HumanNPC))
		{
			status = StateStatus.Error;
		}
	}

	public override void StateLeave(BaseAIBrain brain, BaseEntity entity)
	{
		base.StateLeave(brain, entity);
		brain.Navigator.ClearFacingDirectionOverride();
		ClearCoverPointUsage(entity);
	}

	private void ClearCoverPointUsage(BaseEntity entity)
	{
		AIPoint aIPoint = brain.Events.Memory.AIPoint.Get(4);
		if ((Object)(object)aIPoint != (Object)null)
		{
			aIPoint.ClearIfUsedBy(entity);
		}
	}

	private bool StartMovingToCover(HumanNPC entity)
	{
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		coverFromEntity = brain.Events.Memory.Entity.Get(brain.Events.CurrentInputMemorySlot);
		Vector3 hideFromPosition = (Object.op_Implicit((Object)(object)coverFromEntity) ? ((Component)coverFromEntity).transform.position : (((Component)entity).transform.position + entity.LastAttackedDir * 30f));
		AIInformationZone informationZone = entity.GetInformationZone(((Component)entity).transform.position);
		if ((Object)(object)informationZone == (Object)null)
		{
			return false;
		}
		float minRange = ((entity.SecondsSinceAttacked < 2f) ? 2f : 0f);
		float bestCoverPointMaxDistance = brain.Navigator.BestCoverPointMaxDistance;
		AICoverPoint bestCoverPoint = informationZone.GetBestCoverPoint(((Component)entity).transform.position, hideFromPosition, minRange, bestCoverPointMaxDistance, entity);
		if ((Object)(object)bestCoverPoint == (Object)null)
		{
			return false;
		}
		Vector3 position = ((Component)bestCoverPoint).transform.position;
		if (!brain.Navigator.SetDestination(position, BaseNavigator.NavigationSpeed.Normal))
		{
			return false;
		}
		FaceCoverFromEntity();
		brain.Events.Memory.AIPoint.Set(bestCoverPoint, 4);
		bestCoverPoint.SetUsedBy(entity);
		return true;
	}

	public override void DrawGizmos()
	{
		base.DrawGizmos();
	}

	public override StateStatus StateThink(float delta, BaseAIBrain brain, BaseEntity entity)
	{
		base.StateThink(delta, brain, entity);
		FaceCoverFromEntity();
		if (status == StateStatus.Error)
		{
			return status;
		}
		if (brain.Navigator.Moving)
		{
			return StateStatus.Running;
		}
		return StateStatus.Finished;
	}

	private void FaceCoverFromEntity()
	{
		coverFromEntity = brain.Events.Memory.Entity.Get(brain.Events.CurrentInputMemorySlot);
		if (!((Object)(object)coverFromEntity == (Object)null))
		{
			brain.Navigator.SetFacingDirectionEntity(coverFromEntity);
		}
	}
}
