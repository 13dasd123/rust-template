using System.Collections.Generic;
using Facepunch;
using UnityEngine;

[CreateAssetMenu(menuName = "Rust/Fishing Lookup")]
public class FishLookup : BaseScriptableObject
{
	public ItemModFishable FallbackFish;

	private static FishLookup _instance;

	private static ItemModFishable[] AvailableFish;

	public static ItemDefinition[] BaitItems;

	private static TimeSince lastShuffle;

	public const int ALL_FISH_COUNT = 9;

	public const string ALL_FISH_ACHIEVEMENT_NAME = "PRO_ANGLER";

	public static FishLookup Instance
	{
		get
		{
			if (_instance == null)
			{
				_instance = FileSystem.Load<FishLookup>("assets/prefabs/tools/fishing rod/fishlookup.asset", true);
			}
			return _instance;
		}
	}

	public static void LoadFish()
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		if (AvailableFish != null)
		{
			if (TimeSince.op_Implicit(lastShuffle) > 5f)
			{
				AvailableFish.Shuffle((uint)Random.Range(0, 10000));
			}
			return;
		}
		List<ItemModFishable> list = Pool.Get<List<ItemModFishable>>();
		List<ItemDefinition> list2 = Pool.Get<List<ItemDefinition>>();
		ItemModFishable item = default(ItemModFishable);
		ItemModCompostable itemModCompostable = default(ItemModCompostable);
		foreach (ItemDefinition item2 in ItemManager.itemList)
		{
			if (((Component)item2).TryGetComponent<ItemModFishable>(ref item))
			{
				list.Add(item);
			}
			if (((Component)item2).TryGetComponent<ItemModCompostable>(ref itemModCompostable) && itemModCompostable.BaitValue > 0f)
			{
				list2.Add(item2);
			}
		}
		AvailableFish = list.ToArray();
		BaitItems = list2.ToArray();
		Pool.FreeUnmanaged<ItemModFishable>(ref list);
		Pool.FreeUnmanaged<ItemDefinition>(ref list2);
	}

	public ItemDefinition GetFish(Vector3 worldPos, WaterBody bodyType, Item lure, out ItemModFishable fishable, ItemModFishable ignoreFish, out int usedLureAmount, float overrideDepth = 0f)
	{
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		LoadFish();
		usedLureAmount = 1;
		ItemModCompostable itemModCompostable = default(ItemModCompostable);
		float num = (((Component)lure.info).TryGetComponent<ItemModCompostable>(ref itemModCompostable) ? itemModCompostable.BaitValue : 0f);
		if ((Object)(object)itemModCompostable != (Object)null && itemModCompostable.MaxBaitStack > 0)
		{
			usedLureAmount = Mathf.Min(lure.amount, itemModCompostable.MaxBaitStack);
			num *= (float)usedLureAmount;
		}
		WaterBody.FishingTag fishingTag = (((Object)(object)bodyType != (Object)null) ? bodyType.FishingType : WaterBody.FishingTag.Ocean);
		if (WaterResource.IsFreshWater(worldPos))
		{
			fishingTag |= WaterBody.FishingTag.River;
		}
		float num2 = WaterLevel.GetOverallWaterDepth(worldPos, waves: true, volumes: false);
		if (worldPos.y < -10f)
		{
			num2 = 10f;
		}
		if (overrideDepth != 0f)
		{
			num2 = overrideDepth;
		}
		int num3 = Random.Range(0, AvailableFish.Length);
		for (int i = 0; i < AvailableFish.Length; i++)
		{
			num3++;
			if (num3 >= AvailableFish.Length)
			{
				num3 = 0;
			}
			ItemModFishable itemModFishable = AvailableFish[num3];
			if (itemModFishable.CanBeFished && !(itemModFishable.MinimumBaitLevel > num) && (!(itemModFishable.MaximumBaitLevel > 0f) || !(num > itemModFishable.MaximumBaitLevel)) && !((Object)(object)itemModFishable == (Object)(object)ignoreFish) && (itemModFishable.RequiredTag == (WaterBody.FishingTag)(-1) || (itemModFishable.RequiredTag & fishingTag) != 0) && ((fishingTag & WaterBody.FishingTag.Ocean) != WaterBody.FishingTag.Ocean || ((!(itemModFishable.MinimumWaterDepth > 0f) || !(num2 < itemModFishable.MinimumWaterDepth)) && (!(itemModFishable.MaximumWaterDepth > 0f) || !(num2 > itemModFishable.MaximumWaterDepth)))) && !(Random.Range(0f, 1f) - num * 3f * 0.01f > itemModFishable.Chance))
			{
				fishable = itemModFishable;
				return ((Component)itemModFishable).GetComponent<ItemDefinition>();
			}
		}
		fishable = FallbackFish;
		return ((Component)FallbackFish).GetComponent<ItemDefinition>();
	}

	public void CheckCatchAllAchievement(BasePlayer player)
	{
		LoadFish();
		int num = 0;
		ItemModFishable[] availableFish = AvailableFish;
		foreach (ItemModFishable itemModFishable in availableFish)
		{
			if (!string.IsNullOrEmpty(itemModFishable.SteamStatName) && player.stats.steam.Get(itemModFishable.SteamStatName) > 0)
			{
				num++;
			}
		}
		if (num == 9)
		{
			player.GiveAchievement("PRO_ANGLER");
		}
	}
}
