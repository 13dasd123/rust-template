using System;
using System.Collections.Generic;
using ConVar;
using Facepunch;
using Facepunch.Rust;
using Network;
using Oxide.Core;
using ProtoBuf;
using UnityEngine;
using UnityEngine.Assertions;

public class MixingTable : StorageContainer
{
	public enum Type
	{
		Mixing,
		Cooking
	}

	public GameObject Particles;

	public Type TableType;

	public RecipeList Recipes;

	public bool OnlyAcceptValidIngredients;

	public bool visualFood;

	public float lastTickTimestamp;

	private List<Item> inventoryItems = new List<Item>();

	private const float mixTickInterval = 1f;

	protected Recipe currentRecipe;

	public int currentQuantity;

	public ItemDefinition currentProductionItem;

	private int pendingItemId;

	private static Dictionary<int, int> itemCostCache = new Dictionary<int, int>();

	public float RemainingMixTime { get; set; }

	public float TotalMixTime { get; set; }

	public int CookingItemId { get; private set; }

	public BasePlayer MixStartingPlayer { get; private set; }

	public override bool OnRpcMessage(BasePlayer player, uint rpc, Message msg)
	{
		TimeWarning val = TimeWarning.New("MixingTable.OnRpcMessage", 0);
		try
		{
			if (rpc == 4291077201u && (Object)(object)player != (Object)null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log((object)("SV_RPCMessage: " + ((object)player)?.ToString() + " - SV_FillInventoryForRecipe "));
				}
				TimeWarning val2 = TimeWarning.New("SV_FillInventoryForRecipe", 0);
				try
				{
					TimeWarning val3 = TimeWarning.New("Conditions", 0);
					try
					{
						if (!RPC_Server.CallsPerSecond.Test(4291077201u, "SV_FillInventoryForRecipe", this, player, 5uL))
						{
							return true;
						}
						if (!RPC_Server.IsVisible.Test(4291077201u, "SV_FillInventoryForRecipe", this, player, 3f))
						{
							return true;
						}
						if (!RPC_Server.MaxDistance.Test(4291077201u, "SV_FillInventoryForRecipe", this, player, 3f))
						{
							return true;
						}
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
					try
					{
						val3 = TimeWarning.New("Call", 0);
						try
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage msg2 = rPCMessage;
							SV_FillInventoryForRecipe(msg2);
						}
						finally
						{
							((IDisposable)val3)?.Dispose();
						}
					}
					catch (Exception ex)
					{
						Debug.LogException(ex);
						player.Kick("RPC Error in SV_FillInventoryForRecipe");
					}
				}
				finally
				{
					((IDisposable)val2)?.Dispose();
				}
				return true;
			}
			if (rpc == 4167839872u && (Object)(object)player != (Object)null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log((object)("SV_RPCMessage: " + ((object)player)?.ToString() + " - SVSwitch "));
				}
				TimeWarning val2 = TimeWarning.New("SVSwitch", 0);
				try
				{
					TimeWarning val3 = TimeWarning.New("Conditions", 0);
					try
					{
						if (!RPC_Server.MaxDistance.Test(4167839872u, "SVSwitch", this, player, 3f))
						{
							return true;
						}
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
					try
					{
						val3 = TimeWarning.New("Call", 0);
						try
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage msg3 = rPCMessage;
							SVSwitch(msg3);
						}
						finally
						{
							((IDisposable)val3)?.Dispose();
						}
					}
					catch (Exception ex2)
					{
						Debug.LogException(ex2);
						player.Kick("RPC Error in SVSwitch");
					}
				}
				finally
				{
					((IDisposable)val2)?.Dispose();
				}
				return true;
			}
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
		return base.OnRpcMessage(player, rpc, msg);
	}

	public override void ServerInit()
	{
		base.ServerInit();
		ItemContainer itemContainer = base.inventory;
		itemContainer.canAcceptItem = (Func<Item, int, bool>)Delegate.Combine(itemContainer.canAcceptItem, new Func<Item, int, bool>(CanAcceptItem));
		base.inventory.onItemAddedRemoved = OnItemAddedOrRemoved;
		RecipeDictionary.CacheRecipes(Recipes);
	}

	private bool CanAcceptItem(Item item, int targetSlot)
	{
		if (item == null)
		{
			return false;
		}
		if (!OnlyAcceptValidIngredients)
		{
			return true;
		}
		if (GetItemWaterAmount(item) > 0)
		{
			item = item.contents.itemList[0];
		}
		if (!((Object)(object)item.info == (Object)(object)currentProductionItem))
		{
			return RecipeDictionary.ValidIngredientForARecipe(item, Recipes);
		}
		return true;
	}

	protected override void OnInventoryDirty()
	{
		base.OnInventoryDirty();
		if (IsOn())
		{
			StopMixing();
		}
	}

	[RPC_Server.MaxDistance(3f)]
	[RPC_Server]
	[RPC_Server.CallsPerSecond(5uL)]
	[RPC_Server.IsVisible(3f)]
	private void SV_FillInventoryForRecipe(RPCMessage msg)
	{
		if ((Object)(object)msg.player == (Object)null)
		{
			return;
		}
		int num = msg.read.Int32();
		if (num >= 0 && num < Recipes.AllRecipes.Count)
		{
			Recipe recipe = Recipes.AllRecipes[num];
			if (!((Object)(object)recipe == (Object)null))
			{
				int amount = msg.read.Int32();
				TryFillInventoryForRecipe(recipe, msg.player, amount);
			}
		}
	}

	private void TryFillInventoryForRecipe(Recipe recipe, BasePlayer player, int amount)
	{
		if ((Object)(object)recipe == (Object)null || (Object)(object)player == (Object)null || amount <= 0)
		{
			return;
		}
		Recipe matchingInventoryRecipe = GetMatchingInventoryRecipe(base.inventory);
		ItemContainer tableContainer = (((Object)(object)matchingInventoryRecipe != (Object)(object)recipe) ? base.inventory : null);
		if (!CanPlayerAffordRecipe(player, recipe, tableContainer, amount))
		{
			return;
		}
		if ((Object)(object)matchingInventoryRecipe != (Object)(object)recipe)
		{
			ReturnInventory(player);
		}
		int num = 0;
		Recipe.RecipeIngredient[] ingredients = recipe.Ingredients;
		for (int i = 0; i < ingredients.Length; i++)
		{
			Recipe.RecipeIngredient recipeIngredient = ingredients[i];
			int num2 = base.inventory.GetSlot(num)?.amount ?? 0;
			int num3 = recipeIngredient.Count * amount;
			int num4 = Mathf.Clamp(recipeIngredient.Ingredient.stackable - num2, 0, recipeIngredient.Ingredient.stackable);
			if (num3 > num4)
			{
				int num5 = num4 / recipeIngredient.Count;
				if (num5 < amount)
				{
					amount = num5;
				}
			}
			num++;
		}
		if (amount <= 0)
		{
			return;
		}
		num = 0;
		ingredients = recipe.Ingredients;
		for (int i = 0; i < ingredients.Length; i++)
		{
			Recipe.RecipeIngredient recipeIngredient2 = ingredients[i];
			int num6 = recipeIngredient2.Count * amount;
			if (player.inventory.Take(null, recipeIngredient2.Ingredient.itemid, num6) >= num6)
			{
				ItemManager.CreateByItemID(recipeIngredient2.Ingredient.itemid, num6, 0uL).MoveToContainer(base.inventory, num);
			}
			num++;
		}
		ItemManager.DoRemoves();
	}

	private void ReturnInventory(BasePlayer player)
	{
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)player == (Object)null)
		{
			return;
		}
		for (int i = 0; i < base.inventory.capacity; i++)
		{
			Item slot = base.inventory.GetSlot(i);
			if (slot != null && !slot.MoveToContainer(player.inventory.containerMain) && !slot.MoveToContainer(player.inventory.containerBelt))
			{
				slot.Drop(base.inventory.dropPosition, base.inventory.dropVelocity);
			}
		}
		ItemManager.DoRemoves();
	}

	[RPC_Server.MaxDistance(3f)]
	[RPC_Server]
	private void SVSwitch(RPCMessage msg)
	{
		if (Interface.CallHook("OnMixingTableToggle", (object)this, (object)msg.player) != null)
		{
			return;
		}
		bool flag = msg.read.Bit();
		if (flag != IsOn() && !((Object)(object)msg.player == (Object)null))
		{
			if (flag)
			{
				StartMixing(msg.player);
			}
			else
			{
				StopMixing();
			}
		}
	}

	public void StartMixing(BasePlayer player)
	{
		if (IsOn() || !CanStartMixing(player))
		{
			return;
		}
		MixStartingPlayer = player;
		bool itemsAreContiguous;
		List<Item> orderedContainerItems = GetOrderedContainerItems(base.inventory, out itemsAreContiguous);
		currentRecipe = RecipeDictionary.GetMatchingRecipeAndQuantity(Recipes, orderedContainerItems, out var quantity);
		currentQuantity = quantity;
		if (!((Object)(object)currentRecipe == (Object)null) && itemsAreContiguous && (!currentRecipe.RequiresBlueprint || !((Object)(object)currentRecipe.ProducedItem != (Object)null) || player.blueprints.HasUnlocked(currentRecipe.ProducedItem)))
		{
			if (base.isServer)
			{
				lastTickTimestamp = Time.realtimeSinceStartup;
			}
			RemainingMixTime = currentRecipe.MixingDuration * (float)currentQuantity;
			TotalMixTime = RemainingMixTime;
			ReturnExcessItems(orderedContainerItems, player);
			if (RemainingMixTime == 0f)
			{
				ProduceItem(currentRecipe, currentQuantity);
				return;
			}
			((FacepunchBehaviour)this).InvokeRepeating((Action)TickMix, 1f, 1f);
			SetFlag(Flags.On, b: true, recursive: false, networkupdate: false);
			SendNetworkUpdateImmediate();
		}
	}

	protected virtual bool CanStartMixing(BasePlayer player)
	{
		return true;
	}

	public void StopMixing()
	{
		if (IsOn())
		{
			SetFlag(Flags.On, b: false, recursive: false, networkupdate: false);
			currentRecipe = null;
			currentQuantity = 0;
			RemainingMixTime = 0f;
			((FacepunchBehaviour)this).CancelInvoke((Action)TickMix);
			SendNetworkUpdateImmediate();
		}
	}

	public void TickMix()
	{
		if ((Object)(object)currentRecipe == (Object)null)
		{
			StopMixing();
			return;
		}
		if (base.isServer)
		{
			lastTickTimestamp = Time.realtimeSinceStartup;
			RemainingMixTime -= 1f;
		}
		SendNetworkUpdateImmediate();
		if (RemainingMixTime <= 0f)
		{
			ProduceItem(currentRecipe, currentQuantity);
		}
	}

	public void ProduceItem(Recipe recipe, int quantity)
	{
		pendingItemId = recipe.ProducedItem.itemid;
		StopMixing();
		ConsumeInventory(recipe, quantity);
		CreateRecipeItems(recipe, quantity);
	}

	private void ConsumeInventory(Recipe recipe, int quantity)
	{
		for (int i = 0; i < base.inventory.capacity; i++)
		{
			Item item = base.inventory.GetSlot(i);
			if (item != null)
			{
				if (GetItemWaterAmount(item) > 0)
				{
					item = item.contents.itemList[0];
				}
				int num = recipe.Ingredients[i].Count * quantity;
				if (num > 0)
				{
					Analytics.Azure.OnCraftMaterialConsumed(item.info.shortname, item.amount, MixStartingPlayer, this, inSafezone: false, recipe.ProducedItem?.shortname);
					item.UseItem(num);
				}
			}
		}
		ItemManager.DoRemoves();
	}

	private void ReturnExcessItems(List<Item> orderedContainerItems, BasePlayer player)
	{
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)player == (Object)null || (Object)(object)currentRecipe == (Object)null || orderedContainerItems == null || orderedContainerItems.Count != currentRecipe.Ingredients.Length)
		{
			return;
		}
		for (int i = 0; i < base.inventory.capacity; i++)
		{
			Item slot = base.inventory.GetSlot(i);
			if (slot == null)
			{
				break;
			}
			int num = slot.amount - currentRecipe.Ingredients[i].Count * currentQuantity;
			if (num > 0)
			{
				Item item = slot.SplitItem(num);
				if (!item.MoveToContainer(player.inventory.containerMain) && !item.MoveToContainer(player.inventory.containerBelt))
				{
					item.Drop(base.inventory.dropPosition, base.inventory.dropVelocity);
				}
			}
		}
		ItemManager.DoRemoves();
	}

	public override void OnItemAddedOrRemoved(Item item, bool added)
	{
		base.OnItemAddedOrRemoved(item, added);
		if (!added && item.info.itemid == pendingItemId)
		{
			pendingItemId = 0;
			SendNetworkUpdateImmediate();
		}
	}

	protected virtual void CreateRecipeItems(Recipe recipe, int quantity)
	{
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)recipe == (Object)null || (Object)(object)recipe.ProducedItem == (Object)null)
		{
			return;
		}
		int num = quantity * recipe.ProducedItemCount;
		int stackable = recipe.ProducedItem.stackable;
		int num2 = Mathf.CeilToInt((float)num / (float)stackable);
		currentProductionItem = recipe.ProducedItem;
		for (int i = 0; i < num2; i++)
		{
			int num3 = ((num > stackable) ? stackable : num);
			Item item = ItemManager.Create(recipe.ProducedItem, num3, 0uL);
			if ((Object)(object)MixStartingPlayer != (Object)null && !MixStartingPlayer.IsDestroyed)
			{
				item.SetItemOwnership(MixStartingPlayer, ItemOwnershipPhrases.MixingTable);
			}
			Analytics.Azure.OnCraftItem(item.info.shortname, item.amount, MixStartingPlayer, this, inSafezone: false);
			if (!item.MoveToContainer(base.inventory))
			{
				item.Drop(base.inventory.dropPosition, base.inventory.dropVelocity);
			}
			num -= num3;
			if (num <= 0)
			{
				break;
			}
		}
		currentProductionItem = null;
	}

	public override void Save(SaveInfo info)
	{
		base.Save(info);
		info.msg.mixingTable = Pool.Get<MixingTable>();
		info.msg.mixingTable.pendingItem = pendingItemId;
		if (info.forDisk)
		{
			info.msg.mixingTable.remainingMixTime = RemainingMixTime;
		}
		else
		{
			info.msg.mixingTable.remainingMixTime = RemainingMixTime - Mathf.Max(Time.realtimeSinceStartup - lastTickTimestamp, 0f);
			info.msg.mixingTable.currentRecipe = (((Object)(object)currentRecipe != (Object)null && (Object)(object)currentRecipe.ProducedItem != (Object)null) ? currentRecipe.ProducedItem.itemid : (-1));
		}
		info.msg.mixingTable.totalMixTime = TotalMixTime;
	}

	private int GetItemWaterAmount(Item item)
	{
		if (item == null)
		{
			return 0;
		}
		if (item.contents != null && item.contents.capacity == 1 && item.contents.allowedContents == ItemContainer.ContentsType.Liquid && item.contents.itemList.Count > 0)
		{
			return item.contents.itemList[0].amount;
		}
		return 0;
	}

	public override void Load(LoadInfo info)
	{
		base.Load(info);
		if (info.msg.mixingTable != null)
		{
			RemainingMixTime = info.msg.mixingTable.remainingMixTime;
			TotalMixTime = info.msg.mixingTable.totalMixTime;
			CookingItemId = info.msg.mixingTable.currentRecipe;
			pendingItemId = info.msg.mixingTable.pendingItem;
		}
	}

	public Recipe GetMatchingInventoryRecipe(ItemContainer container)
	{
		bool itemsAreContiguous;
		int quantity;
		Recipe matchingRecipeAndQuantity = RecipeDictionary.GetMatchingRecipeAndQuantity(Recipes, GetOrderedContainerItems(container, out itemsAreContiguous), out quantity);
		if ((Object)(object)matchingRecipeAndQuantity == (Object)null)
		{
			return null;
		}
		if (!itemsAreContiguous)
		{
			return null;
		}
		if (quantity <= 0)
		{
			return null;
		}
		return matchingRecipeAndQuantity;
	}

	public List<Item> GetOrderedContainerItems(ItemContainer container, out bool itemsAreContiguous)
	{
		itemsAreContiguous = true;
		if (container == null)
		{
			return null;
		}
		if (container.itemList == null)
		{
			return null;
		}
		if (container.itemList.Count == 0)
		{
			return null;
		}
		inventoryItems.Clear();
		bool flag = false;
		for (int i = 0; i < container.capacity; i++)
		{
			Item item = container.GetSlot(i);
			if (item != null && flag)
			{
				itemsAreContiguous = false;
				break;
			}
			if (item == null)
			{
				flag = true;
				continue;
			}
			if (GetItemWaterAmount(item) > 0)
			{
				item = item.contents.itemList[0];
			}
			inventoryItems.Add(item);
		}
		return inventoryItems;
	}

	public int GetMaxPlayerCanAfford(BasePlayer player, Recipe recipe, ItemContainer tableContainer)
	{
		if ((Object)(object)player == (Object)null)
		{
			return 0;
		}
		if ((Object)(object)recipe == (Object)null)
		{
			return 0;
		}
		ItemContainer itemContainer = (((Object)(object)GetMatchingInventoryRecipe(tableContainer) != (Object)(object)recipe) ? tableContainer : null);
		itemCostCache.Clear();
		Recipe.RecipeIngredient[] ingredients = recipe.Ingredients;
		for (int i = 0; i < ingredients.Length; i++)
		{
			Recipe.RecipeIngredient recipeIngredient = ingredients[i];
			if (!itemCostCache.ContainsKey(recipeIngredient.Ingredient.itemid))
			{
				itemCostCache[recipeIngredient.Ingredient.itemid] = 0;
			}
			itemCostCache[recipeIngredient.Ingredient.itemid] += recipeIngredient.Count;
		}
		int num = int.MaxValue;
		foreach (KeyValuePair<int, int> item in itemCostCache)
		{
			int amount = player.inventory.GetAmount(item.Key);
			int num2 = itemContainer?.GetAmount(item.Key, onlyUsableAmounts: true) ?? 0;
			int num3 = (amount + num2) / itemCostCache[item.Key];
			if (num3 < num)
			{
				num = num3;
			}
		}
		return num;
	}

	public bool CanPlayerAffordRecipe(BasePlayer player, Recipe recipe, ItemContainer tableContainer, int amount)
	{
		if ((Object)(object)player == (Object)null)
		{
			return false;
		}
		if ((Object)(object)recipe == (Object)null)
		{
			return false;
		}
		itemCostCache.Clear();
		Recipe.RecipeIngredient[] ingredients = recipe.Ingredients;
		for (int i = 0; i < ingredients.Length; i++)
		{
			Recipe.RecipeIngredient recipeIngredient = ingredients[i];
			if (!itemCostCache.ContainsKey(recipeIngredient.Ingredient.itemid))
			{
				itemCostCache[recipeIngredient.Ingredient.itemid] = 0;
			}
			itemCostCache[recipeIngredient.Ingredient.itemid] += recipeIngredient.Count * amount;
		}
		foreach (KeyValuePair<int, int> item in itemCostCache)
		{
			int amount2 = player.inventory.GetAmount(item.Key);
			int num = tableContainer?.GetAmount(item.Key, onlyUsableAmounts: true) ?? 0;
			if (amount2 + num < itemCostCache[item.Key])
			{
				return false;
			}
		}
		return true;
	}
}
