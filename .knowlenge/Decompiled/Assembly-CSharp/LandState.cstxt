using UnityEngine;

public class LandState : BasicAIState
{
	private float landedForSeconds;

	private float lastLandtime;

	private float landingHeight = 20f;

	private float nextDismountTime;

	public override float GetWeight()
	{
		if (!GetEntity().ShouldLand())
		{
			return 0f;
		}
		float num = Time.time - lastLandtime;
		if (IsInState() && landedForSeconds < 12f)
		{
			return 1000f;
		}
		if (!IsInState() && num > 10f)
		{
			return 9000f;
		}
		return 0f;
	}

	public override void StateThink(float delta)
	{
		Vector3 position = brain.GetEntity().transform.position;
		CH47LandingZone closest = CH47LandingZone.GetClosest(brain.GetEntity().landingTarget);
		if (!closest)
		{
			return;
		}
		float magnitude = brain.GetEntity().rigidBody.velocity.magnitude;
		Vector3.Distance(closest.transform.position, position);
		float num = Vector3Ex.Distance2D(closest.transform.position, position);
		Mathf.InverseLerp(1f, 20f, num);
		bool enabled = num < 100f;
		bool altitudeProtection = num > 15f && position.y < closest.transform.position.y + 10f;
		brain.GetEntity().EnableFacingOverride(enabled);
		brain.GetEntity().SetAltitudeProtection(altitudeProtection);
		int num2;
		if (Mathf.Abs(closest.transform.position.y - position.y) < 3f && num <= 5f)
		{
			num2 = ((magnitude < 1f) ? 1 : 0);
			if (num2 != 0)
			{
				landedForSeconds += delta;
				if (lastLandtime == 0f)
				{
					lastLandtime = Time.time;
				}
			}
		}
		else
		{
			num2 = 0;
		}
		float num3 = 1f - Mathf.InverseLerp(0f, 7f, num);
		landingHeight -= 4f * num3 * Time.deltaTime;
		if (landingHeight < -5f)
		{
			landingHeight = -5f;
		}
		brain.GetEntity().SetAimDirection(closest.transform.forward);
		brain.GetEntity().SetMoveTarget(brain.mainInterestPoint + new Vector3(0f, landingHeight, 0f));
		if (num2 == 0)
		{
			return;
		}
		if (landedForSeconds > 1f && Time.time > nextDismountTime)
		{
			BaseVehicle.MountPointInfo[] mountPoints = brain.GetEntity().mountPoints;
			foreach (BaseVehicle.MountPointInfo mountPointInfo in mountPoints)
			{
				if ((bool)mountPointInfo.mountable && mountPointInfo.mountable.IsMounted())
				{
					nextDismountTime = Time.time + 0.5f;
					mountPointInfo.mountable.DismountAllPlayers();
					break;
				}
			}
		}
		if (landedForSeconds > 8f)
		{
			brain.GetComponent<CH47AIBrain>().age = float.PositiveInfinity;
		}
	}

	public override void StateEnter()
	{
		brain.mainInterestPoint = GetEntity().landingTarget;
		landingHeight = 15f;
		base.StateEnter();
	}

	public override void StateLeave()
	{
		brain.GetEntity().EnableFacingOverride(enabled: false);
		brain.GetEntity().SetAltitudeProtection(on: true);
		brain.GetEntity().SetMinHoverHeight(30f);
		landedForSeconds = 0f;
		base.StateLeave();
	}

	public override bool CanInterrupt()
	{
		return true;
	}
}
