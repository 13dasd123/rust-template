using UnityEngine;

public class LandState : BasicAIState
{
	private float landedForSeconds;

	private float lastLandtime;

	private float landingHeight = 20f;

	private float nextDismountTime;

	public LandState()
		: base(AIState.Land)
	{
	}

	public override float GetWeight()
	{
		if (!(brain.GetBrainBaseEntity() as CH47HelicopterAIController).ShouldLand())
		{
			return 0f;
		}
		float num = Time.time - lastLandtime;
		if (IsInState() && landedForSeconds < 12f)
		{
			return 1000f;
		}
		if (!IsInState() && num > 10f)
		{
			return 9000f;
		}
		return 0f;
	}

	public override StateStatus StateThink(float delta, BaseAIBrain brain, BaseEntity entity)
	{
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_0161: Unknown result type (might be due to invalid IL or missing references)
		//IL_016c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0181: Unknown result type (might be due to invalid IL or missing references)
		//IL_0186: Unknown result type (might be due to invalid IL or missing references)
		//IL_018b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01da: Unknown result type (might be due to invalid IL or missing references)
		//IL_01df: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f0: Unknown result type (might be due to invalid IL or missing references)
		base.StateThink(delta, brain, entity);
		CH47HelicopterAIController cH47HelicopterAIController = entity as CH47HelicopterAIController;
		Vector3 position = ((Component)cH47HelicopterAIController).transform.position;
		_ = ((Component)cH47HelicopterAIController).transform.forward;
		CH47LandingZone closest = CH47LandingZone.GetClosest(cH47HelicopterAIController.landingTarget);
		if (!Object.op_Implicit((Object)(object)closest))
		{
			return StateStatus.Error;
		}
		Vector3 velocity = cH47HelicopterAIController.rigidBody.velocity;
		float magnitude = ((Vector3)(ref velocity)).magnitude;
		float num = Vector3Ex.Distance2D(((Component)closest).transform.position, position);
		bool enabled = num < 40f;
		bool altitudeProtection = num > 15f && position.y < ((Component)closest).transform.position.y + 10f;
		cH47HelicopterAIController.EnableFacingOverride(enabled);
		cH47HelicopterAIController.SetAltitudeProtection(altitudeProtection);
		int num2;
		if (Mathf.Abs(((Component)closest).transform.position.y - position.y) < 3f && num <= 5f)
		{
			num2 = ((magnitude < 1f) ? 1 : 0);
			if (num2 != 0)
			{
				landedForSeconds += delta;
				if (lastLandtime == 0f)
				{
					lastLandtime = Time.time;
				}
			}
		}
		else
		{
			num2 = 0;
		}
		float num3 = 1f - Mathf.InverseLerp(0f, 7f, num);
		landingHeight -= 4f * num3 * Time.deltaTime;
		if (landingHeight < -5f)
		{
			landingHeight = -5f;
		}
		cH47HelicopterAIController.SetAimDirection(((Component)closest).transform.forward);
		Vector3 moveTarget = brain.mainInterestPoint + new Vector3(0f, landingHeight, 0f);
		if (num < 100f && num > 15f)
		{
			Vector3 val = Vector3Ex.Direction2D(((Component)closest).transform.position, position);
			RaycastHit val2 = default(RaycastHit);
			if (Physics.SphereCast(position, 15f, val, ref val2, num, 1218511105))
			{
				Vector3 val3 = Vector3.Cross(val, Vector3.up);
				moveTarget = ((RaycastHit)(ref val2)).point + val3 * 50f;
			}
		}
		cH47HelicopterAIController.SetMoveTarget(moveTarget);
		if (num2 != 0)
		{
			if (landedForSeconds > 1f && Time.time > nextDismountTime)
			{
				foreach (BaseVehicle.MountPointInfo mountPoint in cH47HelicopterAIController.mountPoints)
				{
					if (Object.op_Implicit((Object)(object)mountPoint.mountable) && mountPoint.mountable.AnyMounted())
					{
						nextDismountTime = Time.time + 0.5f;
						mountPoint.mountable.DismountAllPlayers();
						break;
					}
				}
			}
			if (landedForSeconds > 8f)
			{
				((Component)brain).GetComponent<CH47AIBrain>().ForceSetAge(float.PositiveInfinity);
			}
		}
		return StateStatus.Running;
	}

	public override void StateEnter(BaseAIBrain brain, BaseEntity entity)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		brain.mainInterestPoint = (entity as CH47HelicopterAIController).landingTarget;
		landingHeight = 15f;
		base.StateEnter(brain, entity);
	}

	public override void StateLeave(BaseAIBrain brain, BaseEntity entity)
	{
		CH47HelicopterAIController obj = entity as CH47HelicopterAIController;
		obj.EnableFacingOverride(enabled: false);
		obj.SetAltitudeProtection(on: true);
		obj.SetMinHoverHeight(30f);
		landedForSeconds = 0f;
		base.StateLeave(brain, entity);
	}

	public override bool CanInterrupt()
	{
		return true;
	}
}
