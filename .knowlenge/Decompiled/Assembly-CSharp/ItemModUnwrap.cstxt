using Oxide.Core;
using UnityEngine;

public class ItemModUnwrap : ItemMod
{
	public static readonly Phrase UnwrapGiftTitle = new Phrase("unwrap_gift", "Unwrap");

	public static readonly Phrase UnwrapGiftDesc = new Phrase("unwrap_gift_desc", "Unwrap the gift");

	public Phrase OwnershipPhrase;

	public LootSpawn revealList;

	public GameObjectRef successEffect;

	public int minTries = 1;

	public int maxTries = 1;

	public override void ServerCommand(Item item, string command, BasePlayer player)
	{
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00df: Unknown result type (might be due to invalid IL or missing references)
		if (command == "unwrap" && item.amount > 0 && Interface.CallHook("OnItemUnwrap", (object)item, (object)player, (object)this) == null)
		{
			item.UseItem();
			int num = Random.Range(minTries, maxTries + 1);
			ItemOwnershipShare ownership = default(ItemOwnershipShare);
			if (OwnershipPhrase != null && !string.IsNullOrEmpty(OwnershipPhrase.token))
			{
				ItemOwnershipShare itemOwnershipShare = default(ItemOwnershipShare);
				itemOwnershipShare.username = player.displayName;
				itemOwnershipShare.reason = OwnershipPhrase.token;
				ownership = itemOwnershipShare;
			}
			for (int i = 0; i < num; i++)
			{
				revealList.SpawnIntoContainer(player.inventory.containerMain, ownership);
			}
			if (successEffect.isValid)
			{
				Effect.server.Run(successEffect.resourcePath, player.eyes.position);
			}
		}
	}
}
