using Apex.Ai.HTN;
using Apex.Serialization;
using UnityEngine;

public class AStarNavigateInDirectionOfLastKnownHeadingOfPrimaryEnemyPlayer : BaseNavigateTo
{
	[ApexSerialization]
	private bool DisableIsSearchingOnComplete = true;

	public static Vector3 GetDestination(ScientistAStarContext context)
	{
		BaseNpcMemory.EnemyPlayerInfo primaryKnownEnemyPlayer = context.Memory.PrimaryKnownEnemyPlayer;
		if (primaryKnownEnemyPlayer.PlayerInfo.Player != null)
		{
			Vector3 point = primaryKnownEnemyPlayer.LastKnownPosition + primaryKnownEnemyPlayer.LastKnownHeading * 2f;
			BasePathNode closestToPoint = context.Domain.Path.GetClosestToPoint(point);
			if (closestToPoint != null && closestToPoint.transform != null)
			{
				return closestToPoint.transform.position;
			}
		}
		return context.BodyPosition;
	}

	public static Vector3 GetContinuousDestinationFromBody(ScientistAStarContext context)
	{
		if (context.Memory.LastClosestEdgeNormal.sqrMagnitude < 0.01f)
		{
			return context.BodyPosition;
		}
		BaseNpcMemory.EnemyPlayerInfo primaryKnownEnemyPlayer = context.Memory.PrimaryKnownEnemyPlayer;
		if (primaryKnownEnemyPlayer.PlayerInfo.Player != null)
		{
			Vector3 vector = context.Body.estimatedVelocity.normalized;
			if (vector.sqrMagnitude < 0.01f)
			{
				vector = context.Body.estimatedVelocity.normalized;
			}
			if (vector.sqrMagnitude < 0.01f)
			{
				vector = primaryKnownEnemyPlayer.LastKnownHeading;
			}
			return context.BodyPosition + vector * 2f;
		}
		return context.BodyPosition;
	}

	public override OperatorStateType Tick(ScientistAStarContext context, PrimitiveTaskSelector task)
	{
		OperatorStateType operatorStateType = base.Tick(context, task);
		if (operatorStateType == OperatorStateType.Running)
		{
			return operatorStateType;
		}
		return operatorStateType;
	}

	private void OnContinuePath(ScientistAStarContext context, PrimitiveTaskSelector task)
	{
		Vector3 continuousDestinationFromBody = GetContinuousDestinationFromBody(context);
		if (!((context.BodyPosition - continuousDestinationFromBody).sqrMagnitude <= 0.2f))
		{
			OnPreStart(context);
			context.Domain.SetDestination(continuousDestinationFromBody);
			OnStart(context);
		}
	}

	protected override Vector3 _GetDestination(ScientistAStarContext context)
	{
		return GetDestination(context);
	}

	protected override void OnPreStart(ScientistAStarContext context)
	{
		context.Domain.StoppingDistance = 0.25f;
	}

	protected override void OnStart(ScientistAStarContext context)
	{
		context.SetFact(Facts.IsSearching, value: true);
	}

	protected override void OnPathFailed(ScientistAStarContext context)
	{
		context.SetFact(Facts.IsSearching, value: false);
		context.Domain.StoppingDistance = 1f;
	}

	protected override void OnPathComplete(ScientistAStarContext context)
	{
		if (DisableIsSearchingOnComplete)
		{
			context.SetFact(Facts.IsSearching, value: false);
		}
		context.Domain.StoppingDistance = 1f;
	}
}
