using UnityEngine;
using UnityEngine.UI;

public class LoadingScreen : SingletonComponent<LoadingScreen>
{
	public CanvasRenderer panel;

	public Text title;

	public Text subtitle;

	public Button skipButton;

	public AudioSource music;

	public static bool isOpen => (bool)SingletonComponent<LoadingScreen>.Instance && (bool)SingletonComponent<LoadingScreen>.Instance.panel && SingletonComponent<LoadingScreen>.Instance.panel.gameObject.activeSelf;

	public static bool WantsSkip { get; private set; }

	public static string Text { get; private set; }

	protected override void Awake()
	{
		base.Awake();
		HideSkip();
		Hide();
	}

	public static void Show()
	{
		if (!SingletonComponent<LoadingScreen>.Instance)
		{
			Debug.LogWarning("Wanted to show loading screen but not ready");
		}
		else if (!SingletonComponent<LoadingScreen>.Instance.panel.gameObject.activeSelf)
		{
			SingletonComponent<LoadingScreen>.Instance.panel.gameObject.SetActive(value: true);
			SingletonComponent<LoadingScreen>.Instance.gameObject.SetActive(value: false);
			SingletonComponent<LoadingScreen>.Instance.gameObject.SetActive(value: true);
			MusicManager.RaiseIntensityTo(0.5f, 999);
		}
	}

	public static void Hide()
	{
		if ((bool)SingletonComponent<LoadingScreen>.Instance && (bool)SingletonComponent<LoadingScreen>.Instance.panel && (bool)SingletonComponent<LoadingScreen>.Instance.panel.gameObject && SingletonComponent<LoadingScreen>.Instance.panel.gameObject.activeSelf)
		{
			SingletonComponent<LoadingScreen>.Instance.panel.gameObject.SetActive(value: false);
			SingletonComponent<LoadingScreen>.Instance.gameObject.SetActive(value: false);
			SingletonComponent<LoadingScreen>.Instance.gameObject.SetActive(value: true);
			if (LevelManager.isLoaded && MusicManager.instance != null)
			{
				MusicManager.instance.StopMusic();
			}
		}
	}

	public static void ShowSkip()
	{
		WantsSkip = false;
		if ((bool)SingletonComponent<LoadingScreen>.Instance && (bool)SingletonComponent<LoadingScreen>.Instance.skipButton)
		{
			SingletonComponent<LoadingScreen>.Instance.skipButton.gameObject.SetActive(value: true);
		}
	}

	public static void HideSkip()
	{
		WantsSkip = false;
		if ((bool)SingletonComponent<LoadingScreen>.Instance && (bool)SingletonComponent<LoadingScreen>.Instance.skipButton)
		{
			SingletonComponent<LoadingScreen>.Instance.skipButton.gameObject.SetActive(value: false);
		}
	}

	public static void Update(string strType)
	{
		if (Text == strType)
		{
			return;
		}
		Text = strType;
		if (!SingletonComponent<LoadingScreen>.Instance)
		{
			return;
		}
		SingletonComponent<LoadingScreen>.Instance.subtitle.text = strType.ToUpper();
		GameObject gameObject = GameObject.Find("MenuMusic");
		if ((bool)gameObject)
		{
			AudioSource component = gameObject.GetComponent<AudioSource>();
			if ((bool)component)
			{
				component.Pause();
			}
		}
	}

	public void UpdateFromServer(string strTitle, string strSubtitle)
	{
		title.text = strTitle;
		subtitle.text = strSubtitle;
	}

	public void CancelLoading()
	{
		ConsoleSystem.Run(ConsoleSystem.Option.Client.Quiet(), "client.disconnect");
	}

	public void SkipLoading()
	{
		WantsSkip = true;
	}
}
