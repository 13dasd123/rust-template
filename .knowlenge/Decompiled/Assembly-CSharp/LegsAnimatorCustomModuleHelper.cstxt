using System;
using System.Collections.Generic;
using UnityEngine;

[Serializable]
public class LegsAnimatorCustomModuleHelper
{
	public bool Enabled = true;

	public LegsAnimator Parent;

	public LegsAnimatorControlModuleBase ModuleReference;

	[SerializeField]
	[HideInInspector]
	public List<string> customStringList;

	[HideInInspector]
	[SerializeField]
	public List<Object> customObjectList;

	[SerializeField]
	private List<Variable> variables = new List<Variable>();

	public LegsAnimatorControlModuleBase PlaymodeModule { get; private set; }

	public LegsAnimatorControlModuleBase CurrentModule => PlaymodeModule;

	public LegsAnimatorCustomModuleHelper(LegsAnimator get)
	{
		Parent = get;
	}

	public void PreparePlaymodeModule(LegsAnimator parent)
	{
		if (!((Object)(object)PlaymodeModule != (Object)null) && !((Object)(object)ModuleReference == (Object)null))
		{
			PlaymodeModule = Object.Instantiate<LegsAnimatorControlModuleBase>(ModuleReference);
			PlaymodeModule.Base_Init(parent, this);
		}
	}

	public void DisposeModule()
	{
		if ((Object)(object)PlaymodeModule != (Object)null)
		{
			Object.Destroy((Object)(object)PlaymodeModule);
		}
		PlaymodeModule = null;
	}

	public Variable RequestVariable(string name, object defaultValue)
	{
		if (variables == null)
		{
			variables = new List<Variable>();
		}
		int hashCode = name.GetHashCode();
		for (int i = 0; i < variables.Count; i++)
		{
			if (variables[i].GetNameHash == hashCode)
			{
				return variables[i];
			}
		}
		Variable variable = new Variable(name, defaultValue);
		variables.Add(variable);
		return variable;
	}
}
