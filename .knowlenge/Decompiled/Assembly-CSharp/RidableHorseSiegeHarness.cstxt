using UnityEngine;

[DefaultExecutionOrder(-1300)]
public class RidableHorseSiegeHarness : EntityComponent<RidableHorse2>, IClientComponent
{
	[SerializeField]
	private Transform[] targetBone;

	[SerializeField]
	private Transform[] constrainedBone;

	[SerializeField]
	private Vector3 rotationOffset;

	private void LookAtBone(int index)
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		if (targetBone != null && constrainedBone != null)
		{
			Vector3 val = targetBone[index].position - constrainedBone[index].position;
			if (!(val == Vector3.zero))
			{
				Quaternion val2 = Quaternion.LookRotation(val);
				Quaternion val3 = Quaternion.Euler(rotationOffset);
				Quaternion rotation = val2 * val3;
				constrainedBone[index].rotation = rotation;
			}
		}
	}

	private void LateUpdate()
	{
		LookAtBone(0);
		LookAtBone(1);
	}
}
