using System;
using UnityEngine;

public class Socket_Base : PrefabAttribute
{
	public bool male = true;

	public bool female;

	public bool dummy;

	public bool monogamous;

	[NonSerialized]
	public Vector3 position;

	[NonSerialized]
	public Quaternion rotation;

	public Vector3 selectSize = new Vector3(2f, 0.1f, 2f);

	public Vector3 selectCenter = new Vector3(0f, 0f, 1f);

	[HideInInspector]
	public string socketName;

	[NonSerialized]
	public SocketMod[] socketMods;

	protected override Type GetIndexedType()
	{
		return typeof(Socket_Base);
	}

	protected override void AttributeSetup(GameObject rootObj, string name, bool serverside, bool clientside, bool bundling)
	{
		base.AttributeSetup(rootObj, name, serverside, clientside, bundling);
		position = base.transform.position;
		rotation = base.transform.rotation;
		socketMods = GetComponentsInChildren<SocketMod>(includeInactive: true);
		SocketMod[] array = socketMods;
		foreach (SocketMod socketMod in array)
		{
			socketMod.baseSocket = this;
		}
	}

	public virtual bool TestTarget(Construction.Target target)
	{
		return target.socket != null;
	}

	public virtual Construction.Placement DoPlacement(Construction.Target target)
	{
		Quaternion quaternion = Quaternion.Euler(target.rotation) * Quaternion.LookRotation(target.normal, Vector3.up);
		Vector3 vector = target.position;
		vector -= quaternion * position;
		Construction.Placement placement = new Construction.Placement();
		placement.rotation = quaternion;
		placement.position = vector;
		return placement;
	}

	public virtual bool CheckSocketMods(Construction.Placement placement)
	{
		SocketMod[] array = socketMods;
		foreach (SocketMod socketMod in array)
		{
			socketMod.ModifyPlacement(placement);
		}
		SocketMod[] array2 = socketMods;
		foreach (SocketMod socketMod2 in array2)
		{
			if (!socketMod2.DoCheck(placement))
			{
				if (socketMod2.FailedPhrase.IsValid())
				{
					Construction.lastPlacementError = "Failed Check: (" + socketMod2.FailedPhrase.translated + ")";
				}
				return false;
			}
		}
		return true;
	}
}
