using System.Collections;
using Apex.Ai.HTN;
using Apex.Serialization;
using UnityEngine;

public class AStarUseMedicalTool : OperatorBase<ScientistAStarContext>
{
	[ApexSerialization]
	public HealthState Health;

	public override void Execute(ScientistAStarContext context)
	{
		context.Body.StartCoroutine(UseItem(context));
	}

	public override OperatorStateType Tick(ScientistAStarContext context, PrimitiveTaskSelector task)
	{
		if (context.IsFact(Facts.IsApplyingMedical))
		{
			return OperatorStateType.Running;
		}
		ApplyExpectedEffects(context, task);
		return OperatorStateType.Complete;
	}

	public override void Abort(ScientistAStarContext context, PrimitiveTaskSelector task)
	{
		context.SetFact(Facts.IsApplyingMedical, value: false);
		ItemType previousFact = (ItemType)context.GetPreviousFact(Facts.HeldItemType);
		AStarHoldItemOfType.SwitchToItem(context, previousFact);
	}

	private IEnumerator UseItem(ScientistAStarContext context)
	{
		Item activeItem = context.Body.GetActiveItem();
		if (activeItem != null)
		{
			MedicalTool medicalTool = activeItem.GetHeldEntity() as MedicalTool;
			if (medicalTool != null)
			{
				context.SetFact(Facts.IsApplyingMedical, value: true);
				medicalTool.ServerUse();
				if (Health == HealthState.FullHealth)
				{
					context.Body.Heal(context.Body.MaxHealth());
				}
				yield return CoroutineEx.waitForSeconds(medicalTool.repeatDelay * 4f);
			}
		}
		context.SetFact(Facts.IsApplyingMedical, value: false);
		ItemType previousFact = (ItemType)context.GetPreviousFact(Facts.HeldItemType);
		AStarHoldItemOfType.SwitchToItem(context, previousFact);
	}
}
