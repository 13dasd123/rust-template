using System;
using System.Collections.Generic;
using ConVar;
using Facepunch;
using Unity.Burst;
using Unity.Collections;
using Unity.Jobs;
using UnityEngine;

public class Hopper : IndustrialEntity, IIndustrialStorage
{
	public enum MountType
	{
		Flat,
		Barrel
	}

	private struct HopperMove : IEqualityComparer<HopperMove>
	{
		public IHopperTarget Target;

		public TimeSince Duration;

		public bool Equals(HopperMove x, HopperMove y)
		{
			return object.Equals(x.Target, y.Target);
		}

		public int GetHashCode(HopperMove obj)
		{
			return HashCode.Combine(obj.Target);
		}
	}

	[BurstCompile]
	private struct FillRaycastJob : IJobParallelFor
	{
		[ReadOnly]
		public NativeArray<Vector3> points;

		public NativeArray<RaycastCommand> commands;

		public Vector3 originPoint;

		public int layerMask;

		public void Execute(int index)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000c: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Unknown result type (might be due to invalid IL or missing references)
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0022: Unknown result type (might be due to invalid IL or missing references)
			//IL_0024: Unknown result type (might be due to invalid IL or missing references)
			//IL_0029: Unknown result type (might be due to invalid IL or missing references)
			//IL_002a: Unknown result type (might be due to invalid IL or missing references)
			//IL_002f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_0039: Unknown result type (might be due to invalid IL or missing references)
			//IL_004a: Unknown result type (might be due to invalid IL or missing references)
			Vector3 val = points[index];
			if (!(val == Vector3.zero))
			{
				ref NativeArray<RaycastCommand> reference = ref commands;
				Vector3 val2 = originPoint - val;
				reference[index] = new RaycastCommand(val, ((Vector3)(ref val2)).normalized, Vector3.Distance(val, originPoint), layerMask, 1);
			}
		}
	}

	public class HopperAnimationWorkQueue : PersistentObjectWorkQueue<Hopper>
	{
		protected override void RunJob(Hopper entity)
		{
			entity.MovingItemsTick();
		}
	}

	public interface IHopperTarget
	{
		BaseEntity ToEntity { get; }

		Rigidbody Rigidbody { get; }

		int NumberOfItemsToTransfer { get; }

		float EndPositionToleranceMultiplier { get; }

		void PrepareForHopper();

		void HopperCancelled();

		void TransferAllItemsToContainer(ItemContainer itemContainer, Vector3 fallbackWorldPos);
	}

	public TriggerEnterTimer ItemTrigger;

	public Transform ItemMoveTarget;

	public float ItemMoveSpeed = 2f;

	public AnimationCurve ItemHeightChangeSpeed;

	private const float MoveRate = 1f / 60f;

	public AnimationCurve ItemHeightCurve;

	public AnimationCurve ItemSpeedMultiplierCurve;

	public AnimationCurve ItemRotationSpeed;

	public GameObjectRef BloodSpray;

	public bool DebugMode;

	public const Flags MovingItems = Flags.Reserved1;

	public const Flags StandardMount = Flags.Reserved2;

	public const Flags BarrelMount = Flags.Reserved3;

	public Transform RaycastOriginPoint;

	private Action queueScanAction;

	private HashSet<HopperMove> movingItems = new HashSet<HopperMove>();

	private BaseEntity _cachedParent;

	private ItemContainer cachedContainer;

	private Predicate<HopperMove> cachedCheckNull;

	private Predicate<HopperMove> cachedRemove;

	private IHopperTarget matchCheck;

	public static HopperAnimationWorkQueue WorkQueue = new HopperAnimationWorkQueue();

	public BaseEntity cachedParent
	{
		get
		{
			if ((Object)(object)_cachedParent == (Object)null)
			{
				_cachedParent = GetParentEntity();
			}
			return _cachedParent;
		}
	}

	public ItemContainer Container
	{
		get
		{
			if (cachedContainer == null)
			{
				cachedContainer = (cachedParent as StorageContainer)?.inventory;
			}
			return cachedContainer;
		}
	}

	public BaseEntity IndustrialEntity => this;

	public override int ConsumptionAmount()
	{
		return 8;
	}

	public override int DesiredPower(int inputIndex = 0)
	{
		return 8;
	}

	public Vector2i InputSlotRange(int slotIndex)
	{
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		if (Container != null)
		{
			return new Vector2i(0, Container.capacity - 1);
		}
		return new Vector2i(0, 0);
	}

	public Vector2i OutputSlotRange(int slotIndex)
	{
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		if (Container != null)
		{
			return new Vector2i(0, Container.capacity - 1);
		}
		return new Vector2i(0, 0);
	}

	public void OnStorageItemTransferBegin()
	{
	}

	public void OnStorageItemTransferEnd()
	{
	}

	private void ScanForItemsTick()
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_01be: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0202: Unknown result type (might be due to invalid IL or missing references)
		//IL_0217: Unknown result type (might be due to invalid IL or missing references)
		//IL_021c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0256: Unknown result type (might be due to invalid IL or missing references)
		//IL_025b: Unknown result type (might be due to invalid IL or missing references)
		//IL_016c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0102: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		//IL_0284: Unknown result type (might be due to invalid IL or missing references)
		//IL_0295: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0124: Unknown result type (might be due to invalid IL or missing references)
		//IL_0128: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		if (ItemTrigger.HasAnyEntityContents && TimeSince.op_Implicit(ItemTrigger.EnterTime) > 0.5f)
		{
			Vector3 position = RaycastOriginPoint.position;
			int num = 128;
			NativeArray<RaycastCommand> val = default(NativeArray<RaycastCommand>);
			val..ctor(num, (Allocator)3, (NativeArrayOptions)1);
			NativeArray<RaycastHit> val2 = default(NativeArray<RaycastHit>);
			val2..ctor(num, (Allocator)3, (NativeArrayOptions)1);
			NativeArray<Vector3> points = default(NativeArray<Vector3>);
			points..ctor(num, (Allocator)3, (NativeArrayOptions)1);
			List<IHopperTarget> list = Pool.Get<List<IHopperTarget>>();
			int num2 = 0;
			int count = movingItems.Count;
			foreach (BaseEntity entityContent in ItemTrigger.entityContents)
			{
				if (entityContent is IHopperTarget hopperTarget && hopperTarget.ToEntity.isServer)
				{
					if (entityContent is DroppedItem droppedItem && !droppedItem.HasFlag(Flags.Reserved3) && Container.QuickIndustrialPreCheck(droppedItem.item, new Vector2i(0, Container.capacity - 1), count, out var _))
					{
						Vector3 val3 = ((Component)droppedItem).transform.position;
						if ((Object)(object)droppedItem.childCollider != (Object)null)
						{
							Bounds val4 = droppedItem.childCollider.bounds;
							val3 = ((Bounds)(ref val4)).center;
						}
						points[num2++] = val3;
						list.Add(hopperTarget);
					}
					else if (entityContent is BaseCorpse baseCorpse && !baseCorpse.HasFlag(Flags.Reserved1))
					{
						Vector3 position2 = ((Component)baseCorpse).transform.position;
						points[num2++] = position2;
						list.Add(hopperTarget);
					}
				}
				if (list.Count == num)
				{
					break;
				}
			}
			FillRaycastJob fillRaycastJob = default(FillRaycastJob);
			fillRaycastJob.originPoint = position;
			fillRaycastJob.points = points;
			fillRaycastJob.commands = val;
			fillRaycastJob.layerMask = 2097152;
			JobHandle val5 = IJobParallelForExtensions.Schedule<FillRaycastJob>(fillRaycastJob, num2, 6, default(JobHandle));
			val5 = RaycastCommand.ScheduleBatch(val, val2, 1, 1, val5);
			((JobHandle)(ref val5)).Complete();
			for (int i = 0; i < num2; i++)
			{
				RaycastHit val6 = val2[i];
				IHopperTarget hopperTarget2 = list[i];
				if ((Object)(object)((RaycastHit)(ref val6)).collider == (Object)null && movingItems.Add(new HopperMove
				{
					Target = hopperTarget2,
					Duration = TimeSince.op_Implicit(0f)
				}))
				{
					hopperTarget2.PrepareForHopper();
					hopperTarget2.Rigidbody.useGravity = false;
					hopperTarget2.Rigidbody.velocity = Vector3.zero;
					hopperTarget2.Rigidbody.angularVelocity = Vector3.zero;
					if (Server.hopperAnimationBudgetMs <= 0f)
					{
						IntakeItem(hopperTarget2);
					}
					break;
				}
			}
			val.Dispose();
			val2.Dispose();
			points.Dispose();
			Pool.FreeUnmanaged<IHopperTarget>(ref list);
		}
		SetFlag(Flags.Reserved1, movingItems.Count > 0);
	}

	public override void OnFlagsChanged(Flags old, Flags next)
	{
		base.OnFlagsChanged(old, next);
		if (base.isServer)
		{
			bool flag = next.HasFlag(Flags.Reserved8) || DebugMode;
			if (!((FacepunchBehaviour)this).IsInvoking(queueScanAction) && flag)
			{
				((FacepunchBehaviour)this).InvokeRepeating(queueScanAction, 0.5f, 0.5f);
			}
			else if (((FacepunchBehaviour)this).IsInvoking(queueScanAction) && !flag)
			{
				((FacepunchBehaviour)this).CancelInvoke(queueScanAction);
			}
			bool flag2 = next.HasFlag(Flags.Reserved1);
			if (!((PersistentObjectWorkQueue<Hopper>)WorkQueue).Contains(this) && flag2)
			{
				((PersistentObjectWorkQueue<Hopper>)WorkQueue).Add(this);
			}
			else if (((PersistentObjectWorkQueue<Hopper>)WorkQueue).Contains(this) && !flag2)
			{
				((PersistentObjectWorkQueue<Hopper>)WorkQueue).Remove(this);
			}
		}
	}

	public override void ServerInit()
	{
		base.ServerInit();
		queueScanAction = QueueScan;
		if (DebugMode)
		{
			OnFlagsChanged(flags, flags);
		}
	}

	internal override void DoServerDestroy()
	{
		if (HasFlag(Flags.Reserved1))
		{
			ResetAllMovingItems();
		}
		base.DoServerDestroy();
	}

	public override void OnPickedUp(Item createdItem, BasePlayer player)
	{
		if (HasFlag(Flags.Reserved1))
		{
			ResetAllMovingItems();
		}
		base.OnPickedUp(createdItem, player);
	}

	private void ResetAllMovingItems()
	{
		((PersistentObjectWorkQueue<Hopper>)WorkQueue).Remove(this);
		SetFlag(Flags.Reserved1, b: false, recursive: false, networkupdate: false);
		Rigidbody val = default(Rigidbody);
		foreach (HopperMove movingItem in movingItems)
		{
			if (movingItem.Target != null && (Object)(object)movingItem.Target.ToEntity != (Object)null)
			{
				if (((Component)movingItem.Target.ToEntity).TryGetComponent<Rigidbody>(ref val))
				{
					val.useGravity = true;
				}
				movingItem.Target.HopperCancelled();
			}
		}
	}

	public override void OnParentChanging(BaseEntity oldParent, BaseEntity newParent)
	{
		base.OnParentChanging(oldParent, newParent);
		MountType mountType = MountType.Flat;
		if ((Object)(object)newParent != (Object)null && newParent is BoxStorage boxStorage)
		{
			mountType = boxStorage.HopperMountType;
		}
		SetFlag(Flags.Reserved3, mountType == MountType.Barrel);
		SetFlag(Flags.Reserved2, mountType == MountType.Flat);
	}

	private void QueueScan()
	{
		((ObjectWorkQueue<IndustrialEntity>)global::IndustrialEntity.Queue).Add((IndustrialEntity)this);
	}

	protected override void RunJob()
	{
		base.RunJob();
		if (IsPowered() || DebugMode)
		{
			ScanForItemsTick();
		}
	}

	public override void IOStateChanged(int inputAmount, int inputSlot)
	{
		base.IOStateChanged(inputAmount, inputSlot);
		if (inputSlot == 0)
		{
			bool b = inputAmount >= ConsumptionAmount() && inputAmount > 0;
			SetFlag(Flags.Reserved8, b);
			currentEnergy = inputAmount;
			ensureOutputsUpdated = true;
			MarkDirty();
		}
	}

	private void MovingItemsTick()
	{
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		//IL_011e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0123: Unknown result type (might be due to invalid IL or missing references)
		//IL_0128: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0133: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0179: Unknown result type (might be due to invalid IL or missing references)
		//IL_017e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0191: Unknown result type (might be due to invalid IL or missing references)
		//IL_0193: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01da: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0235: Unknown result type (might be due to invalid IL or missing references)
		if (movingItems.Count == 0)
		{
			return;
		}
		if (cachedCheckNull == null)
		{
			cachedCheckNull = CheckNull;
		}
		movingItems.RemoveWhere(cachedCheckNull);
		PooledList<IHopperTarget> val = Pool.Get<PooledList<IHopperTarget>>();
		try
		{
			float num = ItemMoveSpeed * (1f / 60f * Time.timeScale);
			Vector3 position = ItemMoveTarget.position;
			Quaternion rotation = ItemMoveTarget.rotation;
			foreach (HopperMove movingItem in movingItems)
			{
				if (movingItem.Target != null && !((Object)(object)movingItem.Target.ToEntity == (Object)null))
				{
					Vector3 position2 = ((Component)movingItem.Target.ToEntity).transform.position;
					Quaternion rotation2 = ((Component)movingItem.Target.ToEntity).transform.rotation;
					float num2 = Mathf.Clamp01(Vector3.Distance(position2, Vector3Ex.WithY(position, position2.y)) / 3f);
					float num3 = ItemHeightCurve.Evaluate(num2);
					float num4 = ItemSpeedMultiplierCurve.Evaluate(1f - num2);
					Vector3 val2 = Vector3.MoveTowards(position2, position, num * num4);
					val2.y = Mathf.MoveTowards(val2.y, position.y + num3, Time.deltaTime * ItemHeightChangeSpeed.Evaluate(1f - num2));
					Quaternion val3 = Quaternion.RotateTowards(rotation2, rotation, Time.deltaTime * ItemRotationSpeed.Evaluate(1f - num2));
					((Component)movingItem.Target.ToEntity).transform.SetPositionAndRotation(val2, val3);
					movingItem.Target.Rigidbody.velocity = Vector3.zero;
					movingItem.Target.Rigidbody.angularVelocity = Vector3.zero;
					float num5 = 0.015f * movingItem.Target.EndPositionToleranceMultiplier;
					Vector3 val4 = val2 - position;
					if (((Vector3)(ref val4)).sqrMagnitude < num5 * num5)
					{
						((List<IHopperTarget>)(object)val).Add(movingItem.Target);
					}
				}
			}
			foreach (HopperMove movingItem2 in movingItems)
			{
				if (TimeSince.op_Implicit(movingItem2.Duration) > 5f)
				{
					((List<IHopperTarget>)(object)val).Add(movingItem2.Target);
				}
			}
			foreach (IHopperTarget item in (List<IHopperTarget>)(object)val)
			{
				IntakeItem(item);
			}
			if (movingItems.Count == 0)
			{
				SetFlag(Flags.Reserved1, b: false);
			}
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
		static bool CheckNull(HopperMove obj)
		{
			if (obj.Target != null)
			{
				return (Object)(object)obj.Target.ToEntity == (Object)null;
			}
			return true;
		}
	}

	private bool Match(HopperMove obj)
	{
		return obj.Target == matchCheck;
	}

	private void IntakeItem(IHopperTarget targetItem)
	{
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		if (cachedRemove == null)
		{
			cachedRemove = Match;
		}
		matchCheck = targetItem;
		movingItems.RemoveWhere(cachedRemove);
		if (BloodSpray.isValid && targetItem.ToEntity is BaseCorpse)
		{
			Effect.server.Run(BloodSpray.resourcePath, ((Component)this).transform.position);
		}
		targetItem.TransferAllItemsToContainer(Container, ItemMoveTarget.position);
	}
}
