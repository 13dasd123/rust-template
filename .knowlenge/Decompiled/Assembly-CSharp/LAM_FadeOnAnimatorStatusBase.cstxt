using System.Collections.Generic;
using FIMSpace.FProceduralAnimation;
using UnityEngine;

public abstract class LAM_FadeOnAnimatorStatusBase : LegsAnimatorControlModuleBase
{
	private enum ELayerSelectMode
	{
		ByIndex,
		Auto
	}

	private LegsAnimator.Variable _fadeSpeedV;

	private LegsAnimator.Variable _layerV;

	private float enabledMultiplier = 1f;

	private float sd_eneMul;

	private List<int> stateHashes;

	private List<int> tagHashes;

	private LegsAnimator.Variable _layerMode;

	private LegsAnimator.Variable _layerSkip;

	private List<int> layersToCheck;

	private int lastAutoWeightIndex;

	private bool InitLayerCheck(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		if ((Object)(object)helper.Parent.Mecanim == (Object)null)
		{
			return false;
		}
		if (_layerMode.GetInt() == 0)
		{
			return false;
		}
		if (_layerMode == null || _layerSkip == null)
		{
			return false;
		}
		layersToCheck = new List<int>();
		string[] array = _layerSkip.GetString().Split(',');
		for (int i = 0; i < helper.Parent.Mecanim.layerCount; i++)
		{
			layersToCheck.Add(i);
		}
		for (int j = 0; j < array.Length; j++)
		{
			if (int.TryParse(array[j], out var result))
			{
				layersToCheck.Remove(result);
				continue;
			}
			int num = -1;
			for (int k = 0; k < helper.Parent.Mecanim.layerCount; k++)
			{
				if (helper.Parent.Mecanim.GetLayerName(k) == array[j])
				{
					num = k;
					break;
				}
			}
			if (num != -1)
			{
				layersToCheck.Remove(num);
			}
		}
		return true;
	}

	public override void OnInit(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		if ((Object)(object)base.LA.Mecanim == (Object)null)
		{
			Debug.Log((object)"[Legs Animator] Fade On Animation Module: Not found animator reference in legs animator Extra/Control!");
			helper.Enabled = false;
			return;
		}
		_layerV = helper.RequestVariable("Animation Layer", 0);
		_fadeSpeedV = helper.RequestVariable("Fade Speed", 0.75f);
		LegsAnimator.Variable variable = helper.RequestVariable("Animation State Tag", "");
		string[] array = helper.RequestVariable("Animation State Name", "").GetString().Split(',');
		stateHashes = new List<int>();
		if (array.Length != 0)
		{
			for (int i = 0; i < array.Length; i++)
			{
				if (!string.IsNullOrWhiteSpace(array[i]))
				{
					stateHashes.Add(Animator.StringToHash(array[i]));
				}
			}
		}
		string[] array2 = variable.GetString().Split(',');
		tagHashes = new List<int>();
		if (array2.Length != 0)
		{
			for (int j = 0; j < array2.Length; j++)
			{
				if (!string.IsNullOrWhiteSpace(array2[j]))
				{
					tagHashes.Add(Animator.StringToHash(array2[j]));
				}
			}
		}
		if (stateHashes.Count == 0 && tagHashes.Count == 0)
		{
			helper.Enabled = false;
			Debug.Log((object)"[Legs Animator] Fade On Animation Module: No assigned animation state names/tags to control module on!");
			return;
		}
		if (_layerV.GetInt() < 0)
		{
			_layerV.SetValue(0);
		}
		if (_layerV.GetInt() > base.LA.Mecanim.layerCount - 1)
		{
			_layerV.SetValue(base.LA.Mecanim.layerCount - 1);
		}
		_layerMode = helper.RequestVariable("Mode", 0);
		_layerSkip = helper.RequestVariable("Skip", "");
		if (_layerMode.GetInt() == 1 && !InitLayerCheck(helper))
		{
			_layerMode.SetValue(0);
		}
	}

	public override void OnAfterAnimatorCaptureUpdate(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		Animator mecanim = base.LA.Mecanim;
		if ((Object)(object)mecanim == (Object)null)
		{
			return;
		}
		int num = _layerV.GetInt();
		if (_layerMode.GetInt() == 1)
		{
			float num2 = 0f;
			int num3 = -1;
			for (int num4 = layersToCheck.Count - 1; num4 >= 0; num4--)
			{
				int num5 = layersToCheck[num4];
				float layerWeight = helper.Parent.Mecanim.GetLayerWeight(num5);
				if (layerWeight > 0.95f)
				{
					num3 = num5;
					break;
				}
				if (layerWeight > num2)
				{
					num2 = layerWeight;
					num3 = num5;
				}
			}
			num = (lastAutoWeightIndex = num3);
		}
		AnimatorStateInfo val = (mecanim.IsInTransition(num) ? mecanim.GetNextAnimatorStateInfo(num) : mecanim.GetCurrentAnimatorStateInfo(num));
		bool flag = false;
		for (int i = 0; i < stateHashes.Count; i++)
		{
			if (((AnimatorStateInfo)(ref val)).shortNameHash == stateHashes[i])
			{
				flag = true;
				break;
			}
		}
		if (!flag)
		{
			for (int j = 0; j < tagHashes.Count; j++)
			{
				if (((AnimatorStateInfo)(ref val)).tagHash == tagHashes[j])
				{
					flag = true;
					break;
				}
			}
		}
		float num6 = 0.3f - _fadeSpeedV.GetFloat() * 0.299f;
		if (flag)
		{
			enabledMultiplier = Mathf.SmoothDamp(enabledMultiplier, -0.001f, ref sd_eneMul, num6 * 0.9f, 100000f, base.LA.DeltaTime);
		}
		else
		{
			enabledMultiplier = Mathf.SmoothDamp(enabledMultiplier, 1.01f, ref sd_eneMul, num6, 100000f, base.LA.DeltaTime);
		}
		enabledMultiplier = Mathf.Clamp01(enabledMultiplier);
		OnFadeAction(helper, enabledMultiplier);
	}

	protected abstract void OnFadeAction(LegsAnimator.LegsAnimatorCustomModuleHelper helper, float fadeValue);
}
