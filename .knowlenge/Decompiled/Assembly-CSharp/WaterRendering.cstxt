using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Rendering;

[Serializable]
public class WaterRendering
{
	private struct RenderState
	{
		public Camera camera;

		public int layer;

		public MaterialPropertyBlock propertyBlock;

		public bool simulation;

		public bool displacement;

		public int reflections;

		public bool caustics;

		public int visibilityMask;

		public List<WaterCullingVolume> cullingVolumes;
	}

	public float MaxDisplacementDistance = 50f;

	public SSRControlParams SSRControl;

	public CausticsAnimation CausticsAnimation = new CausticsAnimation();

	private Water water;

	private Renderer renderer;

	private WaterRadialMesh radialMesh = new WaterRadialMesh();

	private RenderState state = default(RenderState);

	private const int MaxCullingVolumes = 4;

	private const float MaxCullingVolumeDistanceToCamera = 500f;

	private const float MaxCullingVolumeSqrDistanceToCamera = 250000f;

	private static Vector4[] cullingVolumeArray = new Vector4[12];

	private static Plane[] frustumPlanes = new Plane[6];

	private Material backgroundOceanMat;

	private Material backgroundRiverMat;

	private Material backgroundLakeMat;

	private Material reflectionMat;

	private Material underwaterMat;

	private Material multiCopyMat;

	private RenderTexture surfaceTex;

	private RenderTexture preFogBackgroundTex;

	private RenderTexture ssrReflectionTex;

	private Mesh overlayMesh;

	private const CameraEvent waterDepthCBEvent = CameraEvent.BeforeLighting;

	private const int waterDepthCBOrderId = 300;

	private const CameraEvent preFogCBEvent = CameraEvent.BeforeImageEffectsOpaque;

	private const int preFogCBOrderId = 300;

	private const CameraEvent postFogCBEvent = CameraEvent.AfterImageEffectsOpaque;

	private const int postFogCBOrderId = 300;

	private RenderTargetIdentifier[] targets = new RenderTargetIdentifier[2];

	private Camera camera;

	private CommandBufferManager commandBufferManager;

	private bool hasValidCausticsAnims;

	private bool useMRTBlendingFallback = true;

	private bool initializedMaterials;

	private bool initialized;

	public Material BackgroundOceanMaterial => backgroundOceanMat;

	public Material BackgroundRiverMaterial => backgroundRiverMat;

	public Material BackgroundLakeMaterial => backgroundLakeMat;

	public Material ReflectionMaterial => reflectionMat;

	public Material UnderwaterMaterial => underwaterMat;

	public bool IsInitialized => initialized;
}
