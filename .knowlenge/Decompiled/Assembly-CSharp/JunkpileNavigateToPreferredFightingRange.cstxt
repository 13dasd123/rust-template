using ConVar;
using UnityEngine;
using UnityEngine.AI;

public class JunkpileNavigateToPreferredFightingRange : BaseNavigateTo
{
	public static Vector3 GetPreferredFightingPosition(ScientistJunkpileContext context, bool snapToAllowedRange = true)
	{
		if (UnityEngine.Time.time - context.Memory.CachedPreferredDistanceDestinationTime < 0.01f)
		{
			return context.Memory.CachedPreferredDistanceDestination;
		}
		NpcPlayerInfo primaryEnemyPlayerTarget = context.GetPrimaryEnemyPlayerTarget();
		if (primaryEnemyPlayerTarget.Player != null)
		{
			Vector3 bodyPosition = context.BodyPosition;
			if (context.GetFact(Facts.Frustration) <= ConVar.AI.npc_htn_player_frustration_threshold)
			{
				bodyPosition = JunkpileNavigateToCover.GetCoverPosition(CoverTactic.Closest, context);
			}
			else
			{
				AttackEntity firearm = context.Domain.GetFirearm();
				float num = context.Body.AiDefinition.Engagement.CenterOfMediumRangeFirearm(firearm);
				float num2 = num * num;
				Vector3 vector;
				float magnitude;
				if (primaryEnemyPlayerTarget.SqrDistance < num2)
				{
					vector = context.Body.transform.position - primaryEnemyPlayerTarget.Player.transform.position;
					magnitude = vector.magnitude;
					vector.Normalize();
				}
				else
				{
					vector = primaryEnemyPlayerTarget.Player.transform.position - context.Body.transform.position;
					magnitude = vector.magnitude;
					vector.Normalize();
				}
				float num3 = magnitude - num;
				bodyPosition = context.Body.transform.position + vector * num3;
			}
			Vector3 vector2 = bodyPosition;
			for (int i = 0; i < 10; i++)
			{
				if (NavMesh.SamplePosition(vector2 + Vector3.up * 0.1f, out var hit, 2f * context.Domain.NavAgent.height, -1))
				{
					Vector3 position = hit.position;
					if (snapToAllowedRange)
					{
						context.Domain.ToAllowedMovementDestination(position);
					}
					if (context.Memory.IsValid(position))
					{
						context.Memory.CachedPreferredDistanceDestination = position;
						context.Memory.CachedPreferredDistanceDestinationTime = UnityEngine.Time.time;
						return position;
					}
				}
				else
				{
					context.Memory.AddFailedDestination(vector2);
				}
				Vector2 vector3 = Random.insideUnitCircle * 5f;
				vector2 = bodyPosition + new Vector3(vector3.x, 0f, vector3.y);
			}
		}
		return context.Body.transform.position;
	}

	protected override Vector3 _GetDestination(ScientistJunkpileContext context)
	{
		return GetPreferredFightingPosition(context, snapToAllowedRange: false);
	}
}
