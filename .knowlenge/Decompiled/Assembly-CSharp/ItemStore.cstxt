using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Facepunch;
using Steamworks;
using Steamworks.Data;
using TMPro;
using UnityEngine;

public class ItemStore : SingletonComponent<ItemStore>, VirtualScroll.IDataSource
{
	public GameObject ItemPrefab;

	public RectTransform ItemParent;

	public List<InventoryDef> Cart = new List<InventoryDef>();

	public ItemStoreItemInfoModal ItemStoreInfoModal;

	public GameObject BuyingModal;

	public ItemStoreBuyFailedModal ItemStoreBuyFailedModal;

	public ItemStoreBuySuccessModal ItemStoreBuySuccessModal;

	public SoundDefinition AddToCartSound;

	public TextMeshProUGUI TotalValue;

	private Task refreshing;

	protected override void Awake()
	{
		base.Awake();
		GA.DesignEvent("itemstore:open");
		refreshing = RefreshList();
		SteamUser.OnMicroTxnAuthorizationResponse += OnPurchaseFinished;
	}

	private void OnPurchaseFinished(AppId appid, ulong orderid, bool success)
	{
		Debug.Log($"OnPurchaseFinished: appid {appid}");
		Debug.Log($"OnPurchaseFinished: orderid {orderid}");
		Debug.Log($"OnPurchaseFinished: success {success}");
		BuyingModal.SetActive(value: false);
		if (success)
		{
			GA.DesignEvent("itemstore:buysuccess");
			GA.BusinessEvent(Steamworks.SteamInventory.Currency, Cart.Sum((InventoryDef x) => x.LocalPrice), "skins", "skins", "skins");
			ItemStoreBuySuccessModal.Show(orderid);
			EmptyCart();
		}
		else
		{
			GA.DesignEvent("itemstore:buyfailed");
			ItemStoreBuyFailedModal.Show(orderid);
		}
	}

	private async Task RefreshList()
	{
		InventoryDef[] array = await Steamworks.SteamInventory.GetDefinitionsWithPricesAsync();
		if (array != null)
		{
			UpdateShoppingList();
			InventoryDef[] array2 = array;
			foreach (InventoryDef item in array2)
			{
				AddItem(item);
			}
			PlayerPrefs.SetInt("sawSaleItems", array.Sum((InventoryDef x) => x.Id));
		}
	}

	private void AddItem(InventoryDef item)
	{
		GameObject obj = Object.Instantiate(ItemPrefab);
		obj.transform.SetParent(ItemParent, worldPositionStays: false);
		obj.GetComponent<ItemStoreItem>().Init(item);
	}

	internal void ShowModal(InventoryDef item)
	{
		ItemStoreInfoModal.Show(item);
	}

	internal void AddToCart(InventoryDef item)
	{
		Cart.Add(item);
		AddToCartSound.Play();
		UpdateShoppingList();
		GA.DesignEvent("itemstore:addtocart");
	}

	public void EmptyCart()
	{
		Cart.Clear();
		UpdateShoppingList();
	}

	private void UpdateShoppingList()
	{
		int num = Cart.Sum((InventoryDef x) => x.LocalPrice);
		TotalValue.text = Utility.FormatPrice(Steamworks.SteamInventory.Currency, (double)num / 100.0);
		GetComponentInChildren<VirtualScroll>().FullRebuild();
	}

	public void Checkout()
	{
		CheckoutAsync();
	}

	public void RemoveFromCart(int index)
	{
		Cart.RemoveAt(index);
		UpdateShoppingList();
	}

	public async Task CheckoutAsync()
	{
		if (Cart.Count != 0)
		{
			GA.DesignEvent("itemstore:startcheckout");
			BuyingModal.SetActive(value: true);
			InventoryPurchaseResult? inventoryPurchaseResult = await Steamworks.SteamInventory.StartPurchaseAsync(Cart.ToArray());
			if (!inventoryPurchaseResult.HasValue)
			{
				Debug.Log("RESULT IS NULL");
			}
			Debug.Log($"Result: {inventoryPurchaseResult.Value.Result}");
			Debug.Log($"TransID: {inventoryPurchaseResult.Value.TransID}");
			Debug.Log($"OrderID: {inventoryPurchaseResult.Value.OrderID}");
			_ = inventoryPurchaseResult.Value.Result;
			_ = 1;
		}
	}

	public int GetItemCount()
	{
		return Cart.Count;
	}

	public void SetItemData(int i, GameObject obj)
	{
		obj.GetComponent<ItemStoreCartItem>().Init(i, Cart[i]);
	}
}
