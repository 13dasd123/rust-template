using System;
using System.Collections.Generic;
using Facepunch;
using UnityEngine;

[Serializable]
public class PositionGenerator
{
	public enum RelativeType
	{
		Player,
		Provider,
		Position
	}

	public enum PositionType
	{
		MissionPoint,
		WorldPositionGenerator,
		DungeonPoint,
		Radius
	}

	public string identifier;

	public float minDistForMovePoint;

	public float maxDistForMovePoint = 25f;

	public bool allowDoubleDistanceIfNoOptionsAreFound;

	public RelativeType relativeTo;

	public PositionType positionType;

	public string centerOnPositionIdentifier = "";

	[InspectorFlags]
	public MissionPoint.MissionPointEnum Flags = (MissionPoint.MissionPointEnum)(-1);

	[InspectorFlags]
	public MissionPoint.MissionPointEnum ExclusionFlags;

	public WorldPositionGenerator worldPositionGenerator;

	public bool IsDependant()
	{
		return !string.IsNullOrEmpty(centerOnPositionIdentifier);
	}

	public bool Validate(BasePlayer assignee, BaseMission missionDef)
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		Vector3 position;
		if (positionType == PositionType.MissionPoint)
		{
			List<MissionPoint> points = Pool.Get<List<MissionPoint>>();
			bool missionPoints = MissionPoint.GetMissionPoints(ref points, ((Component)assignee).transform.position, minDistForMovePoint, maxDistForMovePoint, (int)Flags, (int)ExclusionFlags);
			if (!missionPoints && allowDoubleDistanceIfNoOptionsAreFound)
			{
				points.Clear();
				missionPoints = MissionPoint.GetMissionPoints(ref points, ((Component)assignee).transform.position, minDistForMovePoint, maxDistForMovePoint * 2f, (int)Flags, (int)ExclusionFlags);
			}
			Pool.FreeUnmanaged<MissionPoint>(ref points);
			if (!missionPoints)
			{
				Debug.Log((object)"FAILED TO FIND MISSION POINTS");
				return false;
			}
		}
		else if (positionType == PositionType.WorldPositionGenerator && (Object)(object)worldPositionGenerator != (Object)null && !worldPositionGenerator.TrySample(((Component)assignee).transform.position, minDistForMovePoint, maxDistForMovePoint, out position, blockedPoints))
		{
			Debug.Log((object)"FAILED TO GENERATE WORLD POSITION!!!!!");
			return false;
		}
		return true;
	}

	public Vector3 GetPosition(MissionInstance instance, BasePlayer assignee, int depth = 0)
	{
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_0155: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_015b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0160: Unknown result type (might be due to invalid IL or missing references)
		//IL_0175: Unknown result type (might be due to invalid IL or missing references)
		//IL_0176: Unknown result type (might be due to invalid IL or missing references)
		//IL_0189: Unknown result type (might be due to invalid IL or missing references)
		//IL_018e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0193: Unknown result type (might be due to invalid IL or missing references)
		//IL_0197: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		if (depth > 10)
		{
			Debug.LogError((object)$"Exceeded max depth while calculating position! missionID={instance.missionID} identifier={identifier}");
			return ((Component)assignee).transform.position;
		}
		Vector3 relativeToPosition = GetRelativeToPosition(instance, assignee, depth);
		Vector3 result;
		if (positionType == PositionType.MissionPoint)
		{
			List<MissionPoint> points = Pool.Get<List<MissionPoint>>();
			bool missionPoints = MissionPoint.GetMissionPoints(ref points, relativeToPosition, minDistForMovePoint, maxDistForMovePoint, (int)Flags, (int)ExclusionFlags);
			if (!missionPoints && allowDoubleDistanceIfNoOptionsAreFound)
			{
				points.Clear();
				missionPoints = MissionPoint.GetMissionPoints(ref points, relativeToPosition, minDistForMovePoint, maxDistForMovePoint * 2f, (int)Flags, (int)ExclusionFlags);
			}
			if (missionPoints)
			{
				result = points[Random.Range(0, points.Count)].GetPosition();
			}
			else
			{
				Debug.LogError((object)"UNABLE TO FIND MISSIONPOINT FOR MISSION!");
				result = relativeToPosition;
			}
			Pool.FreeUnmanaged<MissionPoint>(ref points);
		}
		else if (positionType == PositionType.WorldPositionGenerator && (Object)(object)worldPositionGenerator != (Object)null)
		{
			int num = 0;
			while (true)
			{
				if (worldPositionGenerator.TrySample(relativeToPosition, minDistForMovePoint, maxDistForMovePoint, out var position, blockedPoints) && TryAlignToGround(position, out var correctedPosition))
				{
					result = correctedPosition;
					break;
				}
				if (num >= 10)
				{
					Debug.LogError((object)"UNABLE TO FIND WORLD POINT FOR MISSION!");
					result = relativeToPosition;
					break;
				}
				num++;
			}
		}
		else if (positionType == PositionType.DungeonPoint)
		{
			result = DynamicDungeon.GetNextDungeonPoint();
		}
		else
		{
			int num2 = 0;
			while (true)
			{
				Vector3 onUnitSphere = Random.onUnitSphere;
				onUnitSphere.y = 0f;
				((Vector3)(ref onUnitSphere)).Normalize();
				Vector3 val = relativeToPosition + onUnitSphere * Random.Range(minDistForMovePoint, maxDistForMovePoint);
				val.y = WaterLevel.GetWaterOrTerrainSurface(val, waves: false, volumes: false);
				if (TryAlignToGround(val, out var correctedPosition2))
				{
					result = correctedPosition2;
					break;
				}
				if (num2 >= 10)
				{
					Debug.LogError((object)"UNABLE TO FIND WORLD POINT FOR MISSION!");
					result = relativeToPosition;
					break;
				}
				num2++;
			}
		}
		return result;
	}

	private Vector3 GetRelativeToPosition(MissionInstance instance, BasePlayer assignee, int depth)
	{
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		switch (relativeTo)
		{
		case RelativeType.Position:
			return instance.GetMissionPoint(centerOnPositionIdentifier, assignee, depth + 1);
		case RelativeType.Provider:
		{
			BaseEntity baseEntity = instance.ProviderEntity();
			if ((Object)(object)baseEntity != (Object)null)
			{
				return ((Component)baseEntity).transform.position;
			}
			break;
		}
		}
		if ((Object)(object)assignee != (Object)null)
		{
			return ((Component)assignee).transform.position;
		}
		Debug.LogError((object)$"Cannot get mission point origin - assigne playere is null! missionID={instance.missionID} relativeTo={relativeTo}");
		return Vector3.zero;
	}

	private static bool TryAlignToGround(Vector3 wishPosition, out Vector3 correctedPosition)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = Vector3Ex.WithY(wishPosition, wishPosition.y + 50f);
		RaycastHit hit = default(RaycastHit);
		if (!Physics.Raycast(new Ray(val, Vector3.down), ref hit, 50f, 1218652417, (QueryTriggerInteraction)1))
		{
			correctedPosition = wishPosition;
			return true;
		}
		if ((Object)(object)hit.GetEntity() != (Object)null)
		{
			correctedPosition = wishPosition;
			return false;
		}
		correctedPosition = ((RaycastHit)(ref hit)).point;
		return true;
	}
}
