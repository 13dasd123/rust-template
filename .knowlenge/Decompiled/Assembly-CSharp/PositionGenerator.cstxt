using System;
using System.Collections.Generic;
using Facepunch;
using UnityEngine;

[Serializable]
public class PositionGenerator
{
	public enum PositionType
	{
		MissionPoint,
		WorldPositionGenerator,
		DungeonPoint
	}

	public string identifier;

	public float minDistForMovePoint;

	public float maxDistForMovePoint = 25f;

	public bool centerOnProvider;

	public bool centerOnPlayer;

	public string centerOnPositionIdentifier = "";

	public PositionType positionType;

	[Header("MissionPoint")]
	[InspectorFlags]
	public MissionPoint.MissionPointEnum Flags = (MissionPoint.MissionPointEnum)(-1);

	[InspectorFlags]
	public MissionPoint.MissionPointEnum ExclusionFlags;

	[Header("WorldPositionGenerator")]
	public WorldPositionGenerator worldPositionGenerator;

	public bool IsDependant()
	{
		return !string.IsNullOrEmpty(centerOnPositionIdentifier);
	}

	public string GetIdentifier()
	{
		return identifier;
	}

	public bool Validate(BasePlayer assignee, BaseMission missionDef)
	{
		Vector3 position;
		if (positionType == PositionType.MissionPoint)
		{
			List<MissionPoint> points = Pool.GetList<MissionPoint>();
			bool missionPoints = MissionPoint.GetMissionPoints(ref points, assignee.transform.position, minDistForMovePoint, maxDistForMovePoint, (int)Flags, (int)ExclusionFlags);
			Pool.FreeList(ref points);
			if (!missionPoints)
			{
				Debug.Log("FAILED TO FIND MISSION POINTS");
				return false;
			}
		}
		else if (positionType == PositionType.WorldPositionGenerator && worldPositionGenerator != null && !worldPositionGenerator.TrySample(assignee.transform.position, minDistForMovePoint, maxDistForMovePoint, out position, blockedPoints))
		{
			Debug.Log("FAILED TO GENERATE WORLD POSITION!!!!!");
			return false;
		}
		return true;
	}

	public Vector3 GetPosition(BasePlayer assignee)
	{
		Vector3 position;
		if (positionType == PositionType.MissionPoint)
		{
			List<MissionPoint> points = Pool.GetList<MissionPoint>();
			if (MissionPoint.GetMissionPoints(ref points, assignee.transform.position, minDistForMovePoint, maxDistForMovePoint, (int)Flags, (int)ExclusionFlags))
			{
				position = points[UnityEngine.Random.Range(0, points.Count)].GetPosition();
			}
			else
			{
				Debug.LogError("UNABLE TO FIND MISSIONPOINT FOR MISSION!");
				position = assignee.transform.position;
			}
			Pool.FreeList(ref points);
		}
		else if (positionType == PositionType.WorldPositionGenerator && worldPositionGenerator != null)
		{
			if (!worldPositionGenerator.TrySample(assignee.transform.position, minDistForMovePoint, maxDistForMovePoint, out position, blockedPoints))
			{
				Debug.LogError("UNABLE TO FIND WORLD POINT FOR MISSION!");
				position = assignee.transform.position;
			}
		}
		else if (positionType == PositionType.DungeonPoint)
		{
			position = DynamicDungeon.GetNextDungeonPoint();
		}
		else
		{
			Vector3 onUnitSphere = UnityEngine.Random.onUnitSphere;
			onUnitSphere.y = 0f;
			onUnitSphere.Normalize();
			position = (centerOnPlayer ? assignee.transform.position : assignee.transform.position) + onUnitSphere * UnityEngine.Random.Range(minDistForMovePoint, maxDistForMovePoint);
			float b = position.y;
			float a = position.y;
			if (TerrainMeta.WaterMap != null)
			{
				a = TerrainMeta.WaterMap.GetHeight(position);
			}
			if (TerrainMeta.HeightMap != null)
			{
				b = TerrainMeta.HeightMap.GetHeight(position);
			}
			position.y = Mathf.Max(a, b);
		}
		return position;
	}
}
