using System;
using System.Collections.Generic;
using Facepunch;
using Facepunch.Rust;
using Rust;
using UnityEngine;

public class LargeShredder : BaseEntity
{
	public Transform shredRail;

	public Transform shredRailStartPos;

	public Transform shredRailEndPos;

	public Vector3 shredRailStartRotation;

	public Vector3 shredRailEndRotation;

	public LargeShredderTrigger trigger;

	public float shredDurationRotation = 2f;

	public float shredDurationPosition = 5f;

	public float shredSwayAmount = 1f;

	public float shredSwaySpeed = 3f;

	public BaseEntity currentlyShredding;

	public GameObject[] shreddingWheels;

	public float shredRotorSpeed = 1f;

	public GameObjectRef shredSoundEffect;

	public Transform resourceSpawnPoint;

	private Quaternion entryRotation;

	public const string SHRED_STAT = "cars_shredded";

	public const Flags IsShreddingFlag = Flags.Reserved10;

	public bool isShredding;

	private float shreddingEntityNormalizedHealth = 1f;

	public float shredStartTime;

	private float prevDelta;

	public virtual void OnEntityEnteredTrigger(BaseEntity ent)
	{
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00db: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0141: Unknown result type (might be due to invalid IL or missing references)
		if (ent.IsDestroyed)
		{
			return;
		}
		Rigidbody component = ((Component)ent).GetComponent<Rigidbody>();
		if (isShredding || (Object)(object)currentlyShredding != (Object)null)
		{
			if (!component.isKinematic)
			{
				component.velocity = -component.velocity * 3f;
			}
			return;
		}
		shreddingEntityNormalizedHealth = 1f;
		MagnetLiftable magnetLiftable = default(MagnetLiftable);
		if (((Component)ent).TryGetComponent<MagnetLiftable>(ref magnetLiftable))
		{
			if (magnetLiftable.requireObjectOff && ent.IsOn())
			{
				return;
			}
			if (magnetLiftable.scaleScrapResourcesByHealth && ent is BaseCombatEntity baseCombatEntity)
			{
				shreddingEntityNormalizedHealth = baseCombatEntity.healthFraction;
			}
		}
		((Component)shredRail).transform.position = shredRailStartPos.position;
		((Component)shredRail).transform.rotation = Quaternion.LookRotation(shredRailStartRotation);
		entryRotation = ((Component)ent).transform.rotation;
		Quaternion rotation = ((Component)ent).transform.rotation;
		PooledList<Collider> val = Pool.Get<PooledList<Collider>>();
		try
		{
			((Component)ent).GetComponentsInChildren<Collider>((List<Collider>)(object)val);
			foreach (Collider item in (List<Collider>)(object)val)
			{
				item.enabled = false;
			}
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
		component.isKinematic = true;
		currentlyShredding = ent;
		((Component)ent).transform.rotation = rotation;
		isShredding = true;
		SetShredding(isShredding: true);
		prevDelta = 0f;
		shredStartTime = Time.realtimeSinceStartup;
	}

	public void CreateShredResources()
	{
		//IL_0100: Unknown result type (might be due to invalid IL or missing references)
		//IL_011e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0123: Unknown result type (might be due to invalid IL or missing references)
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		//IL_0259: Unknown result type (might be due to invalid IL or missing references)
		//IL_0277: Unknown result type (might be due to invalid IL or missing references)
		//IL_027c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0283: Unknown result type (might be due to invalid IL or missing references)
		//IL_0289: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)currentlyShredding == (Object)null)
		{
			return;
		}
		MagnetLiftable component = ((Component)currentlyShredding).GetComponent<MagnetLiftable>();
		if ((Object)(object)component == (Object)null)
		{
			return;
		}
		if ((Object)(object)component.associatedPlayer != (Object)null && GameInfo.HasAchievements)
		{
			component.associatedPlayer.stats.Add("cars_shredded", 1);
			component.associatedPlayer.stats.Save(forceSteamSave: true);
		}
		List<Item> list = Pool.Get<List<Item>>();
		if (component.shredResources.Length > list.Capacity)
		{
			list.Capacity = component.shredResources.Length;
		}
		ItemAmount[] shredResources = component.shredResources;
		foreach (ItemAmount itemAmount in shredResources)
		{
			int num = Mathf.RoundToInt(itemAmount.amount * shreddingEntityNormalizedHealth);
			if (num > 0)
			{
				Item item = ItemManager.Create(itemAmount.itemDef, num, 0uL);
				if ((Object)(object)component.associatedPlayer != (Object)null)
				{
					item.SetItemOwnership(component.associatedPlayer, ItemOwnershipPhrases.Shredded);
				}
				float num2 = 0.5f;
				if ((Object)(object)item.CreateWorldObject(((Component)resourceSpawnPoint).transform.position + new Vector3(Random.Range(0f - num2, num2), 1f, Random.Range(0f - num2, num2))) == (Object)null)
				{
					item.Remove();
					continue;
				}
				list.Add(item);
				Analytics.Azure.AddPendingItems(currentlyShredding, item.info.shortname, item.amount, "car_shred", consumed: false);
			}
		}
		Analytics.Azure.OnCarShredded(component, list);
		Pool.Free<Item>(ref list, false);
		BaseModularVehicle component2 = ((Component)currentlyShredding).GetComponent<BaseModularVehicle>();
		if (!Object.op_Implicit((Object)(object)component2))
		{
			return;
		}
		foreach (BaseVehicleModule attachedModuleEntity in component2.AttachedModuleEntities)
		{
			if (!Object.op_Implicit((Object)(object)attachedModuleEntity.AssociatedItemDef) || !Object.op_Implicit((Object)(object)attachedModuleEntity.AssociatedItemDef.Blueprint))
			{
				continue;
			}
			foreach (ItemAmount ingredient in attachedModuleEntity.AssociatedItemDef.Blueprint.GetIngredients())
			{
				int num3 = Mathf.FloorToInt(ingredient.amount * 0.5f);
				if (num3 != 0)
				{
					Item item2 = ItemManager.Create(ingredient.itemDef, num3, 0uL);
					float num4 = 0.5f;
					if ((Object)(object)item2.CreateWorldObject(((Component)resourceSpawnPoint).transform.position + new Vector3(Random.Range(0f - num4, num4), 1f, Random.Range(0f - num4, num4))) == (Object)null)
					{
						item2.Remove();
					}
				}
			}
		}
	}

	public void UpdateBonePosition(float delta)
	{
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		float num = delta / shredDurationPosition;
		float num2 = delta / shredDurationRotation;
		((Component)shredRail).transform.localPosition = Vector3.Lerp(shredRailStartPos.localPosition, shredRailEndPos.localPosition, num);
		((Component)shredRail).transform.rotation = Quaternion.LookRotation(Vector3.Lerp(shredRailStartRotation, shredRailEndRotation, num2));
	}

	public void SetShredding(bool isShredding)
	{
		if (isShredding)
		{
			((FacepunchBehaviour)this).InvokeRandomized((Action)FireShredEffect, 0.25f, 0.75f, 0.25f);
		}
		else
		{
			((FacepunchBehaviour)this).CancelInvoke((Action)FireShredEffect);
		}
	}

	public void FireShredEffect()
	{
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		Effect.server.Run(shredSoundEffect.resourcePath, ((Component)this).transform.position + Vector3.up * 3f, Vector3.up);
	}

	public void ServerUpdate()
	{
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		//IL_0146: Unknown result type (might be due to invalid IL or missing references)
		//IL_0114: Unknown result type (might be due to invalid IL or missing references)
		//IL_0119: Unknown result type (might be due to invalid IL or missing references)
		//IL_011e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0123: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0164: Unknown result type (might be due to invalid IL or missing references)
		//IL_0152: Unknown result type (might be due to invalid IL or missing references)
		//IL_0169: Unknown result type (might be due to invalid IL or missing references)
		//IL_016e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01be: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d9: Unknown result type (might be due to invalid IL or missing references)
		if (base.isClient)
		{
			return;
		}
		SetFlag(Flags.Reserved10, isShredding);
		if (!isShredding)
		{
			return;
		}
		float num = Time.realtimeSinceStartup - shredStartTime;
		float num2 = num / shredDurationPosition;
		float num3 = num / shredDurationRotation;
		((Component)shredRail).transform.localPosition = Vector3.Lerp(shredRailStartPos.localPosition, shredRailEndPos.localPosition, num2);
		((Component)shredRail).transform.rotation = Quaternion.LookRotation(Vector3.Lerp(shredRailStartRotation, shredRailEndRotation, num3));
		MagnetLiftable component = ((Component)currentlyShredding).GetComponent<MagnetLiftable>();
		((Component)currentlyShredding).transform.position = ((Component)shredRail).transform.position;
		Vector3 val = ((Component)this).transform.TransformDirection(component.shredDirection);
		if (Vector3.Dot(-val, ((Component)currentlyShredding).transform.forward) > Vector3.Dot(val, ((Component)currentlyShredding).transform.forward))
		{
			val = ((Component)this).transform.TransformDirection(-component.shredDirection);
		}
		bool flag = Vector3.Dot(((Component)component).transform.up, Vector3.up) >= -0.95f;
		Quaternion val2 = QuaternionEx.LookRotationForcedUp(val, flag ? (-((Component)this).transform.right) : ((Component)this).transform.right);
		float num4 = Time.time * shredSwaySpeed;
		float num5 = Mathf.PerlinNoise(num4, 0f);
		float num6 = Mathf.PerlinNoise(0f, num4 + 150f);
		val2 *= Quaternion.Euler(num5 * shredSwayAmount, 0f, num6 * shredSwayAmount);
		((Component)currentlyShredding).transform.rotation = Quaternion.Lerp(entryRotation, val2, num3);
		if (prevDelta < 1.5f && num > 1.5f)
		{
			if (currentlyShredding is BaseVehicle baseVehicle)
			{
				foreach (BaseVehicle.MountPointInfo mountPoint in baseVehicle.mountPoints)
				{
					if ((Object)(object)mountPoint.mountable != (Object)null && (Object)(object)mountPoint.mountable.GetMounted() != (Object)null)
					{
						mountPoint.mountable.GetMounted().Hurt(999f, DamageType.Blunt, this, useProtection: false);
					}
				}
			}
			if (currentlyShredding is ScrapTransportHelicopter)
			{
				PooledList<BasePlayer> val3 = Pool.Get<PooledList<BasePlayer>>();
				try
				{
					foreach (BaseEntity child in currentlyShredding.children)
					{
						if (child is BasePlayer { isMounted: false } basePlayer)
						{
							((List<BasePlayer>)(object)val3).Add(basePlayer);
						}
					}
					foreach (BasePlayer item in (List<BasePlayer>)(object)val3)
					{
						item.Hurt(999f, DamageType.Blunt, this, useProtection: false);
					}
				}
				finally
				{
					((IDisposable)val3)?.Dispose();
				}
			}
		}
		prevDelta = num;
		if (num > 5f)
		{
			CreateShredResources();
			currentlyShredding.Kill();
			currentlyShredding = null;
			isShredding = false;
			SetShredding(isShredding: false);
		}
	}

	private void Update()
	{
		ServerUpdate();
	}
}
