using Rust.Ai.HTN;
using Rust.Ai.HTN.Reasoning;
using Rust.Ai.HTN.ScientistJunkpile;

public class PreferredFightingRangeReasoner : INpcReasoner
{
	public float TickFrequency { get; set; }

	public float LastTickTime { get; set; }

	public void Tick(IHTNAgent npc, float deltaTime, float time)
	{
		if (!(npc.AiDomain.NpcContext is ScientistJunkpileContext scientistJunkpileContext))
		{
			return;
		}
		NpcPlayerInfo target = scientistJunkpileContext.GetPrimaryEnemyPlayerTarget();
		if (target.Player != null)
		{
			AttackEntity firearm = scientistJunkpileContext.Domain.GetFirearm();
			if (IsAtPreferredRange(scientistJunkpileContext, ref target, firearm))
			{
				scientistJunkpileContext.SetFact(Facts.AtLocationPreferredFightingRange, 1);
			}
			else
			{
				scientistJunkpileContext.SetFact(Facts.AtLocationPreferredFightingRange, 0);
			}
		}
	}

	public static bool IsAtPreferredRange(ScientistJunkpileContext context, ref NpcPlayerInfo target, AttackEntity firearm)
	{
		if (firearm == null)
		{
			return false;
		}
		return firearm.effectiveRangeType switch
		{
			NPCPlayerApex.WeaponTypeEnum.CloseRange => target.SqrDistance <= context.Body.AiDefinition.Engagement.SqrCloseRangeFirearm(firearm), 
			NPCPlayerApex.WeaponTypeEnum.MediumRange => target.SqrDistance <= context.Body.AiDefinition.Engagement.SqrMediumRangeFirearm(firearm) && target.SqrDistance > context.Body.AiDefinition.Engagement.SqrCloseRangeFirearm(firearm), 
			NPCPlayerApex.WeaponTypeEnum.LongRange => target.SqrDistance < context.Body.AiDefinition.Engagement.SqrLongRangeFirearm(firearm) && target.SqrDistance > context.Body.AiDefinition.Engagement.SqrMediumRangeFirearm(firearm), 
			_ => false, 
		};
	}
}
