using UnityEngine;

private class LegRedirectHelper
{
	private LAM_DirectionalMovement parent;

	private LegsAnimator.Leg leg;

	internal LegRedirectHelper oppositeHelper;

	private Vector3 computedPosLocal = Vector3.zero;

	private Quaternion _footRedirCache = Quaternion.identity;

	private LegsAnimator LA => parent.LA;

	public Vector3 LastComputedWorldSpaceLegPos { get; private set; }

	public LegRedirectHelper(LAM_DirectionalMovement parent, LegsAnimator.Leg leg)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		this.parent = parent;
		this.leg = leg;
		LastComputedWorldSpaceLegPos = leg.BoneEnd.position;
		computedPosLocal = leg.Owner.ToRootLocalSpace(LastComputedWorldSpaceLegPos);
	}

	public Vector3 ComputeIKOffset(Vector3 localPos, float smoother = 1f)
	{
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0133: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0172: Unknown result type (might be due to invalid IL or missing references)
		//IL_0188: Unknown result type (might be due to invalid IL or missing references)
		//IL_027a: Unknown result type (might be due to invalid IL or missing references)
		//IL_027f: Unknown result type (might be due to invalid IL or missing references)
		//IL_028a: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		float @float = parent._play_TrDur.GetFloat();
		Vector3 val = parent._calc_LocalRotDir * localPos;
		float num = Vector3.Magnitude(val - computedPosLocal);
		float num2 = num / leg.Owner.ScaleReferenceNoScale;
		float num3 = 0f;
		if (num > 0.2f)
		{
			num3 = Mathf.InverseLerp(0.2f, 1f, num);
			num3 *= 0.1f;
			if (@float < 0.1f)
			{
				num3 *= @float / 0.1f;
			}
		}
		if (parent._calc_toNegativeXProgress > 0f)
		{
			Vector3 val2 = localPos;
			val2.x *= -1f;
			Vector3 val3 = parent._calc_LocalRotDir * val2;
			val = Vector3.Lerp(val, val3, parent._calc_toNegativeXProgress);
		}
		float num4 = 0f;
		if (!(smoother >= 3f))
		{
			if (smoother > 0f)
			{
				if (num2 < 0.1f / smoother)
				{
					computedPosLocal = val;
				}
				else
				{
					num4 = Mathf.InverseLerp(1.5f * smoother, 0.1f / smoother, num2) * 6f;
				}
				num4 = Mathf.Max(0f, num4);
			}
			else
			{
				computedPosLocal = val;
			}
		}
		computedPosLocal = Vector3.Lerp(computedPosLocal, val, LA.DeltaTime * (Mathf.Lerp(20f, 4f, (parent._calc_angleDiffFactor * @float + num3) * 1.5f) + num4));
		computedPosLocal.y = Mathf.Lerp(computedPosLocal.y, val.y, 0.5f);
		if (parent._var_raiseLimit > 0f)
		{
			float c_AnimatedAnkleFlatHeight = leg.C_AnimatedAnkleFlatHeight;
			float num5 = 0f;
			if (leg.Side == LegsAnimator.ELegSide.Left)
			{
				num5 = Mathf.Lerp(0f, 0.5f, parent._calc_sideFactorR);
			}
			else if (leg.Side == LegsAnimator.ELegSide.Right)
			{
				num5 = Mathf.Lerp(0f, 0.5f, parent._calc_sideFactorL);
			}
			if (parent._calc_toNegativeXProgress > 0f)
			{
				num5 = Mathf.Lerp(num5, 1f, parent._calc_toNegativeXProgress);
			}
			computedPosLocal.y = Mathf.Lerp(computedPosLocal.y, c_AnimatedAnkleFlatHeight, num5 * parent._var_raiseLimit);
		}
		LastComputedWorldSpaceLegPos = LA.RootToWorldSpace(computedPosLocal);
		return computedPosLocal;
	}

	internal Quaternion FootRedirectSmoother(Quaternion target)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		_footRedirCache = Quaternion.Lerp(_footRedirCache, target, parent._calc_deltaSpeedSlow);
		return _footRedirCache;
	}
}
