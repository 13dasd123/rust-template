using System;
using System.Collections.Generic;
using UnityEngine;

public static class FEngineering
{
	private static Plane axis2DProjection;

	private static PhysicMaterial _slidingMat;

	private static PhysicMaterial _frictMat;

	private static PhysicsMaterial2D _slidingMat2D;

	private static PhysicsMaterial2D _frictMat2D;

	public static PhysicMaterial PMSliding
	{
		get
		{
			//IL_0017: Unknown result type (might be due to invalid IL or missing references)
			//IL_0021: Expected O, but got Unknown
			if (Object.op_Implicit((Object)(object)_slidingMat))
			{
				return _slidingMat;
			}
			_slidingMat = new PhysicMaterial("Slide");
			_slidingMat.frictionCombine = (PhysicMaterialCombine)2;
			_slidingMat.dynamicFriction = 0f;
			_slidingMat.staticFriction = 0f;
			return _slidingMat;
		}
	}

	public static PhysicMaterial PMFrict
	{
		get
		{
			//IL_0017: Unknown result type (might be due to invalid IL or missing references)
			//IL_0021: Expected O, but got Unknown
			if (Object.op_Implicit((Object)(object)_frictMat))
			{
				return _frictMat;
			}
			_frictMat = new PhysicMaterial("Friction");
			_frictMat.frictionCombine = (PhysicMaterialCombine)3;
			_frictMat.dynamicFriction = 10f;
			_frictMat.staticFriction = 10f;
			return _frictMat;
		}
	}

	public static PhysicsMaterial2D PMSliding2D
	{
		get
		{
			//IL_0017: Unknown result type (might be due to invalid IL or missing references)
			//IL_0021: Expected O, but got Unknown
			if (Object.op_Implicit((Object)(object)_slidingMat2D))
			{
				return _slidingMat2D;
			}
			_slidingMat2D = new PhysicsMaterial2D("Slide2D");
			_slidingMat2D.friction = 0f;
			return _slidingMat2D;
		}
	}

	public static PhysicsMaterial2D PMFrict2D
	{
		get
		{
			//IL_0017: Unknown result type (might be due to invalid IL or missing references)
			//IL_0021: Expected O, but got Unknown
			if (Object.op_Implicit((Object)(object)_frictMat2D))
			{
				return _frictMat2D;
			}
			_frictMat2D = new PhysicsMaterial2D("Friction2D");
			_frictMat2D.friction = 5f;
			return _frictMat2D;
		}
	}

	public static bool VIsZero(this Vector3 vec)
	{
		if (((Vector3)(ref vec)).sqrMagnitude == 0f)
		{
			return true;
		}
		return false;
	}

	public static bool VIsSame(this Vector3 vec1, Vector3 vec2)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		if (vec1.x != vec2.x)
		{
			return false;
		}
		if (vec1.y != vec2.y)
		{
			return false;
		}
		if (vec1.z != vec2.z)
		{
			return false;
		}
		return true;
	}

	public static Vector3 TransformVector(this Quaternion parentRot, Vector3 parentLossyScale, Vector3 childLocalPos)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		return parentRot * Vector3.Scale(childLocalPos, parentLossyScale);
	}

	public static Vector3 TransformInDirection(this Quaternion childRotation, Vector3 parentLossyScale, Vector3 childLocalPos)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		return childRotation * Vector3.Scale(childLocalPos, new Vector3((float)((parentLossyScale.x > 0f) ? 1 : (-1)), (float)((parentLossyScale.y > 0f) ? 1 : (-1)), (float)((parentLossyScale.y > 0f) ? 1 : (-1))));
	}

	public static Vector3 InverseTransformVector(this Quaternion tRotation, Vector3 tLossyScale, Vector3 worldPos)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		worldPos = Quaternion.Inverse(tRotation) * worldPos;
		return new Vector3(worldPos.x / tLossyScale.x, worldPos.y / tLossyScale.y, worldPos.z / tLossyScale.z);
	}

	public static Vector3 VAxis2DLimit(this Transform parent, Vector3 parentPos, Vector3 childPos, int axis = 3)
	{
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		switch (axis)
		{
		case 3:
			((Plane)(ref axis2DProjection)).SetNormalAndPosition(parent.forward, parentPos);
			break;
		case 2:
			((Plane)(ref axis2DProjection)).SetNormalAndPosition(parent.up, parentPos);
			break;
		default:
			((Plane)(ref axis2DProjection)).SetNormalAndPosition(parent.right, parentPos);
			break;
		}
		return ((Plane)(ref axis2DProjection)).normal * ((Plane)(ref axis2DProjection)).GetDistanceToPoint(childPos);
	}

	public static Quaternion QToLocal(this Quaternion parentRotation, Quaternion worldRotation)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		return Quaternion.Inverse(parentRotation) * worldRotation;
	}

	public static Quaternion QToWorld(this Quaternion parentRotation, Quaternion localRotation)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		return parentRotation * localRotation;
	}

	public static Quaternion QRotateChild(this Quaternion offset, Quaternion parentRot, Quaternion childLocalRot)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		return offset * parentRot * childLocalRot;
	}

	public static Quaternion ClampRotation(this Vector3 current, Vector3 bounds)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		WrapVector(current);
		if (current.x < 0f - bounds.x)
		{
			current.x = 0f - bounds.x;
		}
		else if (current.x > bounds.x)
		{
			current.x = bounds.x;
		}
		if (current.y < 0f - bounds.y)
		{
			current.y = 0f - bounds.y;
		}
		else if (current.y > bounds.y)
		{
			current.y = bounds.y;
		}
		if (current.z < 0f - bounds.z)
		{
			current.z = 0f - bounds.z;
		}
		else if (current.z > bounds.z)
		{
			current.z = bounds.z;
		}
		return Quaternion.Euler(current);
	}

	public static Vector3 QToAngularVelocity(this Quaternion deltaRotation, bool fix = false)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		return QToAngularVelocity(deltaRotation, fix ? (1f / Time.fixedDeltaTime) : 1f);
	}

	public static Vector3 QToAngularVelocity(this Quaternion deltaRotation, float multiplyAngle)
	{
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		float num = default(float);
		Vector3 val = default(Vector3);
		((Quaternion)(ref deltaRotation)).ToAngleAxis(ref num, ref val);
		if (num != 0f)
		{
			num = Mathf.DeltaAngle(0f, num);
			val *= num * (MathF.PI / 180f) * multiplyAngle;
			if (float.IsNaN(val.x))
			{
				return Vector3.zero;
			}
			if (float.IsNaN(val.y))
			{
				return Vector3.zero;
			}
			if (float.IsNaN(val.z))
			{
				return Vector3.zero;
			}
			return val;
		}
		return Vector3.zero;
	}

	public static Vector3 QToAngularVelocity(this Quaternion currentRotation, Quaternion targetRotation, bool fix = false)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		return QToAngularVelocity(targetRotation * Quaternion.Inverse(currentRotation), fix);
	}

	public static Vector3 QToAngularVelocity(this Quaternion currentRotation, Quaternion targetRotation, float multiply)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		return QToAngularVelocity(targetRotation * Quaternion.Inverse(currentRotation), multiply);
	}

	public static bool QIsZero(this Quaternion rot)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		if (rot.x != 0f)
		{
			return false;
		}
		if (rot.y != 0f)
		{
			return false;
		}
		if (rot.z != 0f)
		{
			return false;
		}
		return true;
	}

	public static bool QIsSame(this Quaternion rot1, Quaternion rot2)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		if (rot1.x != rot2.x)
		{
			return false;
		}
		if (rot1.y != rot2.y)
		{
			return false;
		}
		if (rot1.z != rot2.z)
		{
			return false;
		}
		if (rot1.w != rot2.w)
		{
			return false;
		}
		return true;
	}

	public static float WrapAngle(float angle)
	{
		angle %= 360f;
		if (angle > 180f)
		{
			return angle - 360f;
		}
		return angle;
	}

	public static Vector3 WrapVector(Vector3 angles)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		return new Vector3(WrapAngle(angles.x), WrapAngle(angles.y), WrapAngle(angles.z));
	}

	public static float UnwrapAngle(float angle)
	{
		if (angle >= 0f)
		{
			return angle;
		}
		angle = (0f - angle) % 360f;
		return 360f - angle;
	}

	public static Vector3 UnwrapVector(Vector3 angles)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		return new Vector3(UnwrapAngle(angles.x), UnwrapAngle(angles.y), UnwrapAngle(angles.z));
	}

	public static Quaternion SmoothDampRotation(this Quaternion current, Quaternion target, ref Quaternion velocityRef, float duration, float delta)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		return SmoothDampRotation(current, target, ref velocityRef, duration, float.PositiveInfinity, delta);
	}

	public static Quaternion SmoothDampRotation(this Quaternion current, Quaternion target, ref Quaternion velocityRef, float duration, float maxSpeed, float delta)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0133: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_013f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		float num = ((Quaternion.Dot(current, target) > 0f) ? 1f : (-1f));
		target.x *= num;
		target.y *= num;
		target.z *= num;
		target.w *= num;
		Vector4 val = new Vector4(Mathf.SmoothDamp(current.x, target.x, ref velocityRef.x, duration, maxSpeed, delta), Mathf.SmoothDamp(current.y, target.y, ref velocityRef.y, duration, maxSpeed, delta), Mathf.SmoothDamp(current.z, target.z, ref velocityRef.z, duration, maxSpeed, delta), Mathf.SmoothDamp(current.w, target.w, ref velocityRef.w, duration, maxSpeed, delta));
		Vector4 normalized = ((Vector4)(ref val)).normalized;
		Vector4 val2 = Vector4.Project(new Vector4(velocityRef.x, velocityRef.y, velocityRef.z, velocityRef.w), normalized);
		velocityRef.x -= val2.x;
		velocityRef.y -= val2.y;
		velocityRef.z -= val2.z;
		velocityRef.w -= val2.w;
		return new Quaternion(normalized.x, normalized.y, normalized.z, normalized.w);
	}

	public static float PerlinNoise3D(float x, float y, float z)
	{
		y += 1f;
		z += 2f;
		float num = Mathf.Sin(MathF.PI * Mathf.PerlinNoise(x, y));
		float num2 = Mathf.Sin(MathF.PI * Mathf.PerlinNoise(x, z));
		float num3 = Mathf.Sin(MathF.PI * Mathf.PerlinNoise(y, z));
		float num4 = Mathf.Sin(MathF.PI * Mathf.PerlinNoise(y, x));
		float num5 = Mathf.Sin(MathF.PI * Mathf.PerlinNoise(z, x));
		float num6 = Mathf.Sin(MathF.PI * Mathf.PerlinNoise(z, y));
		return num * num2 * num3 * num4 * num5 * num6;
	}

	public static float PerlinNoise3D(Vector3 pos)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		return PerlinNoise3D(pos.x, pos.y, pos.z);
	}

	public static bool SameDirection(this float a, float b)
	{
		if (!(a > 0f) || !(b > 0f))
		{
			if (a < 0f)
			{
				return b < 0f;
			}
			return false;
		}
		return true;
	}

	public static float PointDisperse01(int index, int baseV = 2)
	{
		float num = 0f;
		float num2 = 1f / (float)baseV;
		int num3 = index;
		while (num3 > 0)
		{
			num += num2 * (float)(num3 % baseV);
			num3 = Mathf.FloorToInt((float)(num3 / baseV));
			num2 /= (float)baseV;
		}
		return num;
	}

	public static float PointDisperse(int index, int baseV = 2)
	{
		float num = 0f;
		float num2 = 1f / (float)baseV;
		int num3 = index;
		while (num3 > 0)
		{
			num += num2 * (float)(num3 % baseV);
			num3 = Mathf.FloorToInt((float)(num3 / baseV));
			num2 /= (float)baseV;
		}
		return num - 0.5f;
	}

	public static float GetScaler(this Transform transform)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		if (transform.lossyScale.x > transform.lossyScale.y)
		{
			if (transform.lossyScale.y > transform.lossyScale.z)
			{
				return transform.lossyScale.y;
			}
			return transform.lossyScale.z;
		}
		return transform.lossyScale.x;
	}

	public static Vector3 PosFromMatrix(this Matrix4x4 m)
	{
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		return Vector4.op_Implicit(((Matrix4x4)(ref m)).GetColumn(3));
	}

	public static Quaternion RotFromMatrix(this Matrix4x4 m)
	{
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		return Quaternion.LookRotation(Vector4.op_Implicit(((Matrix4x4)(ref m)).GetColumn(2)), Vector4.op_Implicit(((Matrix4x4)(ref m)).GetColumn(1)));
	}

	public static Vector3 ScaleFromMatrix(this Matrix4x4 m)
	{
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		Vector4 column = ((Matrix4x4)(ref m)).GetColumn(0);
		float magnitude = ((Vector4)(ref column)).magnitude;
		column = ((Matrix4x4)(ref m)).GetColumn(1);
		float magnitude2 = ((Vector4)(ref column)).magnitude;
		column = ((Matrix4x4)(ref m)).GetColumn(2);
		return new Vector3(magnitude, magnitude2, ((Vector4)(ref column)).magnitude);
	}

	public static Bounds TransformBounding(Bounds b, Transform by)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		return TransformBounding(b, by.localToWorldMatrix);
	}

	public static Bounds TransformBounding(Bounds b, Matrix4x4 mx)
	{
		//IL_0004: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = ((Matrix4x4)(ref mx)).MultiplyPoint(((Bounds)(ref b)).min);
		Vector3 val2 = ((Matrix4x4)(ref mx)).MultiplyPoint(((Bounds)(ref b)).max);
		Vector3 val3 = ((Matrix4x4)(ref mx)).MultiplyPoint(new Vector3(((Bounds)(ref b)).max.x, ((Bounds)(ref b)).center.y, ((Bounds)(ref b)).min.z));
		Vector3 val4 = ((Matrix4x4)(ref mx)).MultiplyPoint(new Vector3(((Bounds)(ref b)).min.x, ((Bounds)(ref b)).center.y, ((Bounds)(ref b)).max.z));
		((Bounds)(ref b))..ctor(val, Vector3.zero);
		((Bounds)(ref b)).Encapsulate(val);
		((Bounds)(ref b)).Encapsulate(val2);
		((Bounds)(ref b)).Encapsulate(val3);
		((Bounds)(ref b)).Encapsulate(val4);
		return b;
	}

	public static Bounds RotateBoundsByMatrix(this Bounds b, Quaternion rotation)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_011d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0131: Unknown result type (might be due to invalid IL or missing references)
		//IL_0137: Unknown result type (might be due to invalid IL or missing references)
		//IL_0143: Unknown result type (might be due to invalid IL or missing references)
		//IL_014f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_0169: Unknown result type (might be due to invalid IL or missing references)
		//IL_0175: Unknown result type (might be due to invalid IL or missing references)
		//IL_0181: Unknown result type (might be due to invalid IL or missing references)
		//IL_018b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0190: Unknown result type (might be due to invalid IL or missing references)
		//IL_0195: Unknown result type (might be due to invalid IL or missing references)
		//IL_019b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		if (QIsZero(rotation))
		{
			return b;
		}
		Matrix4x4 val = Matrix4x4.Rotate(rotation);
		Bounds result = default(Bounds);
		Vector3 val2 = ((Matrix4x4)(ref val)).MultiplyPoint(new Vector3(((Bounds)(ref b)).max.x, ((Bounds)(ref b)).min.y, ((Bounds)(ref b)).max.z));
		Vector3 val3 = ((Matrix4x4)(ref val)).MultiplyPoint(new Vector3(((Bounds)(ref b)).max.x, ((Bounds)(ref b)).min.y, ((Bounds)(ref b)).min.z));
		Vector3 val4 = ((Matrix4x4)(ref val)).MultiplyPoint(new Vector3(((Bounds)(ref b)).min.x, ((Bounds)(ref b)).min.y, ((Bounds)(ref b)).min.z));
		Vector3 val5 = ((Matrix4x4)(ref val)).MultiplyPoint(new Vector3(((Bounds)(ref b)).min.x, ((Bounds)(ref b)).min.y, ((Bounds)(ref b)).max.z));
		((Bounds)(ref result)).Encapsulate(val2);
		((Bounds)(ref result)).Encapsulate(val3);
		((Bounds)(ref result)).Encapsulate(val4);
		((Bounds)(ref result)).Encapsulate(val5);
		Vector3 val6 = ((Matrix4x4)(ref val)).MultiplyPoint(new Vector3(((Bounds)(ref b)).max.x, ((Bounds)(ref b)).max.y, ((Bounds)(ref b)).max.z));
		Vector3 val7 = ((Matrix4x4)(ref val)).MultiplyPoint(new Vector3(((Bounds)(ref b)).max.x, ((Bounds)(ref b)).max.y, ((Bounds)(ref b)).min.z));
		Vector3 val8 = ((Matrix4x4)(ref val)).MultiplyPoint(new Vector3(((Bounds)(ref b)).min.x, ((Bounds)(ref b)).max.y, ((Bounds)(ref b)).min.z));
		Vector3 val9 = ((Matrix4x4)(ref val)).MultiplyPoint(new Vector3(((Bounds)(ref b)).min.x, ((Bounds)(ref b)).max.y, ((Bounds)(ref b)).max.z));
		((Bounds)(ref result)).Encapsulate(val6);
		((Bounds)(ref result)).Encapsulate(val7);
		((Bounds)(ref result)).Encapsulate(val8);
		((Bounds)(ref result)).Encapsulate(val9);
		return result;
	}

	public static Bounds RotateLocalBounds(this Bounds b, Quaternion rotation)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		float num = Quaternion.Angle(rotation, Quaternion.identity);
		if (num > 45f && num < 135f)
		{
			((Bounds)(ref b)).size = new Vector3(((Bounds)(ref b)).size.z, ((Bounds)(ref b)).size.y, ((Bounds)(ref b)).size.x);
		}
		if (num < 315f && num > 225f)
		{
			((Bounds)(ref b)).size = new Vector3(((Bounds)(ref b)).size.z, ((Bounds)(ref b)).size.y, ((Bounds)(ref b)).size.x);
		}
		return b;
	}

	public static int[] GetLayermaskValues(int mask, int optionsCount)
	{
		List<int> list = new List<int>();
		for (int i = 0; i < optionsCount; i++)
		{
			int num = 1 << i;
			if ((mask & num) != 0)
			{
				list.Add(i);
			}
		}
		return list.ToArray();
	}

	public static LayerMask GetLayerMaskUsingPhysicsProjectSettingsMatrix(int maskForLayer)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		LayerMask val = LayerMask.op_Implicit(0);
		for (int i = 0; i < 32; i++)
		{
			if (!Physics.GetIgnoreLayerCollision(maskForLayer, i))
			{
				val = LayerMask.op_Implicit(LayerMask.op_Implicit(val) | (1 << i));
			}
		}
		return val;
	}

	public static float DistanceTo_2D(Vector3 aPos, Vector3 bPos)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		return Vector2.Distance(new Vector2(aPos.x, aPos.z), new Vector2(bPos.x, bPos.z));
	}

	public static float DistanceTo_2DSqrt(Vector3 aPos, Vector3 bPos)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		return Vector2.SqrMagnitude(new Vector2(aPos.x, aPos.z) - new Vector2(bPos.x, bPos.z));
	}

	public static Vector2 GetAngleDirection2D(float angle)
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		float num = angle * (MathF.PI / 180f);
		return new Vector2(Mathf.Sin(num), Mathf.Cos(num));
	}

	public static Vector3 GetAngleDirection(float angle)
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		float num = angle * (MathF.PI / 180f);
		return new Vector3(Mathf.Sin(num), 0f, Mathf.Cos(num));
	}

	public static Vector3 GetAngleDirectionXZ(float angle)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		return GetAngleDirection(angle);
	}

	public static Vector3 GetAngleDirectionZX(float angle)
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		float num = angle * (MathF.PI / 180f);
		return new Vector3(Mathf.Cos(num), 0f, Mathf.Sin(num));
	}

	public static Vector3 GetAngleDirectionXY(float angle, float radOffset = 0f, float secAxisRadOffset = 0f)
	{
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		float num = angle * (MathF.PI / 180f);
		return new Vector3(Mathf.Sin(num + radOffset), Mathf.Cos(num + secAxisRadOffset), 0f);
	}

	public static Vector3 GetAngleDirectionYX(float angle, float firstAxisRadOffset = 0f, float secAxisRadOffset = 0f)
	{
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		float num = angle * (MathF.PI / 180f);
		return new Vector3(Mathf.Cos(num + secAxisRadOffset), Mathf.Sin(num + firstAxisRadOffset), 0f);
	}

	public static Vector3 GetAngleDirectionYZ(float angle)
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		float num = angle * (MathF.PI / 180f);
		return new Vector3(0f, Mathf.Sin(num), Mathf.Cos(num));
	}

	public static Vector3 GetAngleDirectionZY(float angle)
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		float num = angle * (MathF.PI / 180f);
		return new Vector3(0f, Mathf.Cos(num), Mathf.Sin(num));
	}

	public static Vector3 V2ToV3TopDown(Vector2 v)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		return new Vector3(v.x, 0f, v.y);
	}

	public static Vector2 V3ToV2(Vector3 a)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		return new Vector2(a.x, a.z);
	}

	public static Vector2 V3TopDownDiff(Vector3 target, Vector3 me)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		return V3ToV2(target) - V3ToV2(me);
	}

	public static float GetAngleDeg(Vector3 v)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		return GetAngleDeg(v.x, v.z);
	}

	public static float GetAngleDeg(Vector2 v)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		return GetAngleDeg(v.x, v.y);
	}

	public static float GetAngleDeg(float x, float z)
	{
		return GetAngleRad(x, z) * 57.29578f;
	}

	public static float GetAngleRad(float x, float z)
	{
		return Mathf.Atan2(x, z);
	}

	public static float Rnd(float val, int dec = 0)
	{
		if (dec <= 0)
		{
			return Mathf.Round(val);
		}
		return (float)Math.Round(val, dec);
	}

	internal static float ManhattanTopDown2D(Vector3 probePos, Vector3 worldPosition)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		float num = probePos.x - worldPosition.x;
		if (num < 0f)
		{
			num = 0f - num;
		}
		float num2 = probePos.z - worldPosition.z;
		if (num2 < 0f)
		{
			num2 = 0f - num2;
		}
		return num + num2;
	}

	internal static bool IsInSqureBounds2D(Vector3 probePos, Vector3 boundsPos, float boundsRange)
	{
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		if (boundsRange <= 0f)
		{
			return false;
		}
		if (probePos.x > boundsPos.x - boundsRange && probePos.x < boundsPos.x + boundsRange && probePos.z > boundsPos.z - boundsRange && probePos.z < boundsPos.z + boundsRange)
		{
			return true;
		}
		return false;
	}

	internal static bool IsInSqureBounds2D(Vector3 boundsAPos, float boundsAHalfRange, Vector3 boundsBPos, float boundsBHRange)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		if (boundsAPos.x - boundsAHalfRange <= boundsBPos.x + boundsBHRange && boundsAPos.x + boundsAHalfRange >= boundsBPos.x - boundsBHRange && boundsAPos.z - boundsAHalfRange <= boundsBPos.z + boundsBHRange)
		{
			return boundsAPos.z + boundsAHalfRange >= boundsBPos.z - boundsBHRange;
		}
		return false;
	}

	internal static Vector3 GetDirectionTowards(Vector3 me, Vector3 target)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		return new Vector3(target.x - me.x, 0f, target.z - me.z);
	}
}
