using FIMSpace;
using UnityEngine;

public class FImp_ColliderData_Sphere : FImp_ColliderData_Base
{
	private float SphereRadius;

	public SphereCollider Sphere { get; private set; }

	public CircleCollider2D Sphere2D { get; private set; }

	public FImp_ColliderData_Sphere(SphereCollider collider)
	{
		Is2D = false;
		base.Transform = ((Component)collider).transform;
		base.Collider = (Collider)(object)collider;
		Sphere = collider;
		base.ColliderType = EFColliderType.Sphere;
		RefreshColliderData();
	}

	public FImp_ColliderData_Sphere(CircleCollider2D collider)
	{
		Is2D = true;
		base.Transform = ((Component)collider).transform;
		base.Collider2D = (Collider2D)(object)collider;
		Sphere2D = collider;
		base.ColliderType = EFColliderType.Sphere;
		RefreshColliderData();
	}

	public override void RefreshColliderData()
	{
		if (!base.IsStatic)
		{
			if ((Object)(object)Sphere2D == (Object)null)
			{
				SphereRadius = CalculateTrueRadiusOfSphereCollider(((Component)Sphere).transform, Sphere.radius);
				base.RefreshColliderData();
			}
			else
			{
				SphereRadius = CalculateTrueRadiusOfSphereCollider(((Component)Sphere2D).transform, Sphere2D.radius);
				base.RefreshColliderData();
			}
		}
	}

	public override bool PushIfInside(ref Vector3 point, float pointRadius, Vector3 pointOffset)
	{
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		if (!Is2D)
		{
			return PushOutFromSphereCollider(Sphere, pointRadius, ref point, SphereRadius, pointOffset);
		}
		return PushOutFromSphereCollider(Sphere2D, pointRadius, ref point, SphereRadius, pointOffset);
	}

	public static bool PushOutFromSphereCollider(SphereCollider sphere, float segmentColliderRadius, ref Vector3 segmentPos, Vector3 segmentOffset)
	{
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		return PushOutFromSphereCollider(sphere, segmentColliderRadius, ref segmentPos, CalculateTrueRadiusOfSphereCollider(sphere), segmentOffset);
	}

	public static bool PushOutFromSphereCollider(SphereCollider sphere, float segmentColliderRadius, ref Vector3 segmentPos, float collidingSphereRadius, Vector3 segmentOffset)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = ((Component)sphere).transform.position + ((Component)sphere).transform.TransformVector(sphere.center);
		float num = collidingSphereRadius + segmentColliderRadius;
		Vector3 val2 = segmentPos + segmentOffset - val;
		float sqrMagnitude = ((Vector3)(ref val2)).sqrMagnitude;
		if (sqrMagnitude > 0f && sqrMagnitude < num * num)
		{
			segmentPos = val - segmentOffset + val2 * (num / Mathf.Sqrt(sqrMagnitude));
			return true;
		}
		return false;
	}

	public static bool PushOutFromSphereCollider(CircleCollider2D sphere, float segmentColliderRadius, ref Vector3 segmentPos, float collidingSphereRadius, Vector3 segmentOffset)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = ((Component)sphere).transform.position + ((Component)sphere).transform.TransformVector(Vector2.op_Implicit(((Collider2D)sphere).offset));
		val.z = 0f;
		float num = collidingSphereRadius + segmentColliderRadius;
		Vector3 val2 = segmentPos;
		val2.z = 0f;
		Vector3 val3 = val2 + segmentOffset - val;
		float sqrMagnitude = ((Vector3)(ref val3)).sqrMagnitude;
		if (sqrMagnitude > 0f && sqrMagnitude < num * num)
		{
			segmentPos = val - segmentOffset + val3 * (num / Mathf.Sqrt(sqrMagnitude));
			return true;
		}
		return false;
	}

	public static float CalculateTrueRadiusOfSphereCollider(SphereCollider sphere)
	{
		return CalculateTrueRadiusOfSphereCollider(((Component)sphere).transform, sphere.radius);
	}

	public static float CalculateTrueRadiusOfSphereCollider(CircleCollider2D sphere)
	{
		return CalculateTrueRadiusOfSphereCollider(((Component)sphere).transform, sphere.radius);
	}

	public static float CalculateTrueRadiusOfSphereCollider(Transform transform, float componentRadius)
	{
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		float num = componentRadius;
		if (transform.lossyScale.x > transform.lossyScale.y)
		{
			if (transform.lossyScale.x > transform.lossyScale.z)
			{
				return num * transform.lossyScale.x;
			}
			return num * transform.lossyScale.z;
		}
		if (transform.lossyScale.y > transform.lossyScale.z)
		{
			return num * transform.lossyScale.y;
		}
		return num * transform.lossyScale.z;
	}
}
