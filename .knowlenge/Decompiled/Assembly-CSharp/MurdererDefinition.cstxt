using System.Collections;
using Rust.Ai.HTN;
using Rust.Ai.HTN.Murderer;
using UnityEngine;

[CreateAssetMenu(menuName = "Rust/AI/Murderer Definition")]
public class MurdererDefinition : BaseNpcDefinition
{
	[Header("Aim")]
	public AnimationCurve MissFunction = AnimationCurve.EaseInOut(0f, 0f, 1f, 1f);

	[Header("Equipment")]
	public PlayerInventoryProperties[] loadouts;

	public LootContainer.LootSpawnSlot[] Loot;

	[Header("Audio")]
	public GameObjectRef DeathEffect;

	public override void StartVoices(HTNPlayer target)
	{
	}

	public override void StopVoices(HTNPlayer target)
	{
	}

	public override void Loadout(HTNPlayer target)
	{
		if (target == null || target.IsDestroyed || target.IsDead() || target.IsWounded() || target.inventory == null || target.inventory.containerBelt == null || target.inventory.containerMain == null || target.inventory.containerWear == null)
		{
			return;
		}
		if (loadouts != null && loadouts.Length > 0)
		{
			PlayerInventoryProperties playerInventoryProperties = loadouts[Random.Range(0, loadouts.Length)];
			if (playerInventoryProperties != null)
			{
				playerInventoryProperties.GiveToPlayer(target);
				target.StartCoroutine(EquipWeapon(target));
			}
		}
		else
		{
			Debug.LogWarning($"Loadout for NPC {base.name} was empty.");
		}
	}

	public override void OnlyLoadoutWeapons(HTNPlayer target)
	{
		if (target == null || target.IsDestroyed || target.IsDead() || target.IsWounded() || target.inventory == null || target.inventory.containerBelt == null || target.inventory.containerMain == null || target.inventory.containerWear == null)
		{
			return;
		}
		if (loadouts != null && loadouts.Length > 0)
		{
			PlayerInventoryProperties playerInventoryProperties = loadouts[Random.Range(0, loadouts.Length)];
			if (!(playerInventoryProperties != null))
			{
				return;
			}
			foreach (ItemAmount item in playerInventoryProperties.belt)
			{
				if (item.itemDef.category == ItemCategory.Weapon)
				{
					target.inventory.GiveItem(ItemManager.Create(item.itemDef, (int)item.amount, 0uL), target.inventory.containerBelt);
				}
			}
			target.StartCoroutine(EquipWeapon(target));
		}
		else
		{
			Debug.LogWarning($"Loadout for NPC {base.name} was empty.");
		}
	}

	private IEnumerator EquipWeapon(HTNPlayer target)
	{
		yield return CoroutineEx.waitForSeconds(0.25f);
		if (target == null || target.IsDestroyed || target.IsDead() || target.IsWounded() || target.inventory == null || target.inventory.containerBelt == null)
		{
			yield break;
		}
		Item slot = target.inventory.containerBelt.GetSlot(0);
		if (slot == null)
		{
			yield break;
		}
		target.UpdateActiveItem(slot.uid);
		yield return CoroutineEx.waitForSeconds(0.25f);
		MurdererDomain domain = target.AiDomain as MurdererDomain;
		if (!domain)
		{
			yield break;
		}
		if (slot.info.category == ItemCategory.Weapon)
		{
			BaseEntity heldEntity = slot.GetHeldEntity();
			if (heldEntity is BaseProjectile)
			{
				domain.MurdererContext.SetFact(Facts.HeldItemType, ItemType.ProjectileWeapon);
				domain.ReloadFirearm();
			}
			else if (heldEntity is BaseMelee)
			{
				domain.MurdererContext.SetFact(Facts.HeldItemType, ItemType.MeleeWeapon);
				Chainsaw chainsaw = heldEntity as Chainsaw;
				if ((bool)chainsaw)
				{
					chainsaw.ServerNPCStart();
				}
			}
			else if (heldEntity is ThrownWeapon)
			{
				domain.MurdererContext.SetFact(Facts.HeldItemType, ItemType.ThrowableWeapon);
			}
		}
		else if (slot.info.category == ItemCategory.Medical)
		{
			domain.MurdererContext.SetFact(Facts.HeldItemType, ItemType.HealingItem);
		}
		else
		{
			if (slot.info.category != ItemCategory.Tool)
			{
				yield break;
			}
			BaseEntity heldEntity2 = slot.GetHeldEntity();
			if (heldEntity2 is BaseMelee)
			{
				domain.MurdererContext.SetFact(Facts.HeldItemType, ItemType.MeleeWeapon);
				Chainsaw chainsaw2 = heldEntity2 as Chainsaw;
				if ((bool)chainsaw2)
				{
					chainsaw2.ServerNPCStart();
				}
			}
			else
			{
				domain.MurdererContext.SetFact(Facts.HeldItemType, ItemType.LightSourceItem);
			}
		}
	}

	public override BaseCorpse OnCreateCorpse(HTNPlayer target)
	{
		if (DeathEffect.isValid)
		{
			Effect.server.Run(DeathEffect.resourcePath, target, 0u, Vector3.zero, Vector3.zero);
		}
		using (TimeWarning.New("Create corpse"))
		{
			NPCPlayerCorpse nPCPlayerCorpse = target.DropCorpse("assets/prefabs/npc/murderer/murderer_corpse.prefab") as NPCPlayerCorpse;
			if ((bool)nPCPlayerCorpse)
			{
				if (target.AiDomain != null && target.AiDomain.NavAgent != null && target.AiDomain.NavAgent.isOnNavMesh)
				{
					nPCPlayerCorpse.transform.position = nPCPlayerCorpse.transform.position + Vector3.down * target.AiDomain.NavAgent.baseOffset;
				}
				nPCPlayerCorpse.SetLootableIn(2f);
				nPCPlayerCorpse.SetFlag(BaseEntity.Flags.Reserved5, target.HasPlayerFlag(BasePlayer.PlayerFlags.DisplaySash));
				nPCPlayerCorpse.SetFlag(BaseEntity.Flags.Reserved2, b: true);
				for (int i = 0; i < target.inventory.containerWear.itemList.Count; i++)
				{
					Item item = target.inventory.containerWear.itemList[i];
					if (item != null && item.info.shortname == "gloweyes")
					{
						target.inventory.containerWear.Remove(item);
						break;
					}
				}
				nPCPlayerCorpse.TakeFrom(target.inventory.containerMain, target.inventory.containerWear, target.inventory.containerBelt);
				nPCPlayerCorpse.playerName = target.displayName;
				nPCPlayerCorpse.playerSteamID = target.userID;
				nPCPlayerCorpse.Spawn();
				nPCPlayerCorpse.TakeChildren(target);
				ItemContainer[] containers = nPCPlayerCorpse.containers;
				foreach (ItemContainer itemContainer in containers)
				{
					itemContainer.Clear();
				}
				if (Loot.Length > 0)
				{
					LootContainer.LootSpawnSlot[] loot = Loot;
					for (int k = 0; k < loot.Length; k++)
					{
						LootContainer.LootSpawnSlot lootSpawnSlot = loot[k];
						for (int l = 0; l < lootSpawnSlot.numberToSpawn; l++)
						{
							float num = Random.Range(0f, 1f);
							if (num <= lootSpawnSlot.probability)
							{
								lootSpawnSlot.definition.SpawnIntoContainer(nPCPlayerCorpse.containers[0]);
							}
						}
					}
				}
			}
			return nPCPlayerCorpse;
		}
	}
}
