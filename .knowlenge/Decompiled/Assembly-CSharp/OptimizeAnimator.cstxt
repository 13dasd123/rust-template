using System.Collections.Generic;
using Facepunch;
using UnityEngine;

public class OptimizeAnimator : ArticulatedOccludee
{
	public Bounds fixedLocalBounds = new Bounds(new Vector3(0f, 1f, 0f), new Vector3(1.5f, 2.5f, 1.5f));

	public Transform followBone;

	public Vector3 followBoneOffset = new Vector3(0f, 0f, 0f);

	public bool optimizeOnStart;

	private HashSet<SkinnedMeshRenderer> rendererSet;

	protected override void OnEnable()
	{
		base.OnEnable();
		if (optimizeOnStart)
		{
			List<SkinnedMeshRenderer> obj = Pool.GetList<SkinnedMeshRenderer>();
			GetComponentsInChildren(obj);
			ProcessRootOptimization(obj, base.transform);
			UpdateSkinnedRenderers();
			Pool.FreeList(ref obj);
		}
	}

	public void ClearSkinnedRenderers()
	{
		if (rendererSet != null)
		{
			rendererSet.Clear();
		}
	}

	public void ProcessRootOptimization(List<SkinnedMeshRenderer> skinnedRenderers, Transform reference)
	{
		if (skinnedRenderers == null || skinnedRenderers.Count <= 0)
		{
			return;
		}
		foreach (SkinnedMeshRenderer skinnedRenderer in skinnedRenderers)
		{
			if (skinnedRenderer != null)
			{
				skinnedRenderer.rootBone = null;
				skinnedRenderer.transform.position = reference.position;
				skinnedRenderer.transform.rotation = reference.rotation;
				skinnedRenderer.localBounds = fixedLocalBounds;
				if (rendererSet == null)
				{
					rendererSet = new HashSet<SkinnedMeshRenderer>();
				}
				if (base.FixedBoundsRef == null)
				{
					base.FixedBoundsRef = skinnedRenderer;
				}
				rendererSet.Add(skinnedRenderer);
			}
		}
	}

	public void UpdateSkinnedRenderers()
	{
		if (rendererSet == null || !(followBone != null))
		{
			return;
		}
		Vector3 position = followBone.position + followBoneOffset;
		HashSet<SkinnedMeshRenderer>.Enumerator enumerator = rendererSet.GetEnumerator();
		while (enumerator.MoveNext())
		{
			SkinnedMeshRenderer current = enumerator.Current;
			if (current != null)
			{
				current.transform.position = position;
			}
		}
	}

	public override void TriggerUpdateVisibilityBounds()
	{
		if (base.enabled)
		{
			base.TriggerUpdateVisibilityBounds();
			UpdateSkinnedRenderers();
		}
	}
}
