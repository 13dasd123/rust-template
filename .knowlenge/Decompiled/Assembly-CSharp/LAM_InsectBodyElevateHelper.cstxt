using FIMSpace.FProceduralAnimation;
using UnityEngine;

public class LAM_InsectBodyElevateHelper : LegsAnimatorControlModuleBase
{
	private float currentHeightAdjust;

	private float sd_currentHeightAdjust;

	private LegsAnimator.Variable _AdjustPowerV;

	private LegsAnimator.Variable _AdjustingSpeedV;

	public override void OnInit(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		_AdjustPowerV = helper.RequestVariable("Adjust Power", 1f);
		_AdjustingSpeedV = helper.RequestVariable("Adjusting Speed", 1f);
	}

	public override void OnLateUpdatePreApply(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		float hips_LastHipsOffset = base.LA.HipsSetup._Hips_LastHipsOffset;
		hips_LastHipsOffset = ((!(hips_LastHipsOffset < 0f)) ? 0f : (0f - hips_LastHipsOffset));
		if (_AdjustingSpeedV.GetFloat() >= 1f)
		{
			currentHeightAdjust = hips_LastHipsOffset;
		}
		else
		{
			currentHeightAdjust = Mathf.SmoothDamp(currentHeightAdjust, hips_LastHipsOffset, ref sd_currentHeightAdjust, Mathf.Lerp(0.16f, 0.005f, _AdjustingSpeedV.GetFloat()));
		}
		Transform hips = base.LA.Hips;
		hips.position += base.LA.Up * currentHeightAdjust * base.EffectBlend * _AdjustPowerV.GetFloat();
	}
}
