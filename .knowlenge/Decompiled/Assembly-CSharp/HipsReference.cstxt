using System;
using System.Collections.Generic;
using FIMSpace.FTools;
using UnityEngine;

[Serializable]
public class HipsReference
{
	public class HipsHubBackbone
	{
		public Transform frontBone;

		private Vector3 _dir = Vector3.zero;

		private Vector3 _sd_dir = Vector3.zero;

		private FMuscle_Vector3 _FMuscle;

		public LegsAnimator Owner { get; private set; }

		public Transform bone { get; private set; }

		public Quaternion initialLocalRotation { get; private set; }

		public Vector3 keyframePosition { get; private set; }

		public Quaternion TargetRotation { get; internal set; }

		public HipsHubBackbone(LegsAnimator owner, Transform b)
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			//IL_000c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0011: Unknown result type (might be due to invalid IL or missing references)
			//IL_002c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0047: Unknown result type (might be due to invalid IL or missing references)
			Owner = owner;
			bone = b;
			initialLocalRotation = b.localRotation;
			_FMuscle = new FMuscle_Vector3();
			_FMuscle.Initialize(Vector3.zero);
		}

		public void PreCalibrate()
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			bone.localRotation = initialLocalRotation;
		}

		public void Calibrate()
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			keyframePosition = bone.position;
		}

		public Vector3 AnimateTargetDirection(Vector3 toHubNewB)
		{
			//IL_0012: Unknown result type (might be due to invalid IL or missing references)
			//IL_0062: Unknown result type (might be due to invalid IL or missing references)
			//IL_0074: Unknown result type (might be due to invalid IL or missing references)
			//IL_0075: Unknown result type (might be due to invalid IL or missing references)
			//IL_0085: Unknown result type (might be due to invalid IL or missing references)
			//IL_008a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0028: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0055: Unknown result type (might be due to invalid IL or missing references)
			//IL_005a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0090: Unknown result type (might be due to invalid IL or missing references)
			if (Owner.HubBackBonesElasticity < 0.0001f)
			{
				return toHubNewB;
			}
			if (Owner.HubBackBonesElasticity <= 0.1f)
			{
				_dir = Vector3.SmoothDamp(_dir, toHubNewB, ref _sd_dir, 0.001f + Owner.HubBackBonesElasticity, 10000000f, Owner.DeltaTime);
			}
			else
			{
				_dir = Vector3.LerpUnclamped(toHubNewB, _FMuscle.Update(Owner.DeltaTime, toHubNewB), Owner.HubBackBonesElasticity);
			}
			return _dir;
		}
	}

	[Tooltip("Applying elasticity algorithm on the pelvis bone align motion, to make it look more organic.")]
	[FPD_Suffix(0f, 1f, FPD_SuffixAttribute.SuffixMode.From0to100, "%", true, 0)]
	public float HipsElasticityBlend = 1f;

	public FMuscle_Vector3 HipsMuscle;

	[FPD_Suffix(0f, 1f, FPD_SuffixAttribute.SuffixMode.From0to100, "%", true, 0)]
	public float HipsRotElasticityBlend;

	public FMuscle_Quaternion HipsRotMuscle;

	[NonSerialized]
	public Vector3 LastKeyframePosition;

	[NonSerialized]
	public Vector3 LastKeyframeLocalPosition;

	[NonSerialized]
	public Quaternion LastKeyframeRotation;

	[NonSerialized]
	public Quaternion LastKeyframeLocalRotation;

	[NonSerialized]
	public Vector3 LastRootLocalPos;

	[NonSerialized]
	public float LastHipsHeightDiff;

	[NonSerialized]
	public Vector3 InitHipsPositionRootSpace;

	[NonSerialized]
	public float InitialHipsHeightLocal;

	[NonSerialized]
	internal Quaternion _LastHipsRotationOffsetOutsideInfo = Quaternion.identity;

	private Transform root;

	private Vector3 initLocalPos;

	private Quaternion initLocalRot;

	private Vector3 _Hips_StabilityLocalAdjustement = Vector3.zero;

	private Vector3 _Hips_sd_StabilAdjustm = Vector3.zero;

	private Vector3 _stretchPreventerOff = Vector3.zero;

	private float _sd_Hips_StepHeightAdjustOffset;

	private int _h_lowestHitLeg = -1;

	private Vector3 _reAdjustLocal = Vector3.zero;

	private Vector3 _sd_readj = Vector3.zero;

	private Vector3 _pushSmoothed = Vector3.zero;

	private Vector3 _sd_pushSmoothed = Vector3.zero;

	public LegsAnimator Owner { get; private set; }

	public List<Leg> ChildLegs { get; private set; }

	public Transform bone { get; private set; }

	public UniRotateBone UniRotate { get; private set; }

	public List<HipsHubBackbone> HubBackBones { get; private set; }

	public Vector3 _Get_Hips_StabilityLocalAdjustement => _Hips_StabilityLocalAdjustement;

	public float _Hips_LastHipsOffset { get; private set; }

	public float _Hips_StepHeightAdjustOffset { get; private set; }

	public Vector3 ExtraNonElasticOffset { get; internal set; }

	public Vector3 _PreHipsAdjustPosition { get; internal set; }

	public void Initialize(LegsAnimator owner, Transform bone, Transform root)
	{
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
		Owner = owner;
		this.bone = bone;
		this.root = root;
		initLocalPos = bone.localPosition;
		initLocalRot = bone.localRotation;
		ExtraNonElasticOffset = Vector3.zero;
		_Hips_StabilityLocalAdjustement = Vector3.zero;
		_Hips_sd_StabilAdjustm = Vector3.zero;
		InitHipsPositionRootSpace = root.InverseTransformPoint(bone.position);
		InitialHipsHeightLocal = InitHipsPositionRootSpace.y;
		if (HipsMuscle == null)
		{
			HipsMuscle = new FMuscle_Vector3();
		}
		if (HipsRotMuscle == null)
		{
			HipsRotMuscle = new FMuscle_Quaternion();
		}
		HipsMuscle.Initialize(Vector3.zero);
		HipsRotMuscle.Initialize(Quaternion.identity);
		UniRotate = new UniRotateBone(bone, root);
		Calibrate();
	}

	internal void PrepareLegs()
	{
		ChildLegs = new List<Leg>();
		if (!Owner._hipsHubs_using)
		{
			ChildLegs = Owner.Legs;
		}
		else
		{
			for (int i = 0; i < Owner.Legs.Count; i++)
			{
				bool? flag = IsFirstParent(Owner.Legs[i], bone);
				if (flag == true)
				{
					ChildLegs.Add(Owner.Legs[i]);
				}
				else if (!flag.HasValue && this == Owner.HipsSetup)
				{
					ChildLegs.Add(Owner.Legs[i]);
				}
			}
		}
		for (int j = 0; j < ChildLegs.Count; j++)
		{
			ChildLegs[j].AssignParentHub(this);
		}
	}

	internal void PrepareHubBones()
	{
		PrepareLegs();
		HubBackBones = new List<HipsHubBackbone>();
		Transform frontBone = bone;
		Transform parent = bone.parent;
		while ((Object)(object)parent != (Object)null)
		{
			bool flag = false;
			for (int i = 0; i < Owner.HipsHubs.Count; i++)
			{
				if ((Object)(object)parent == (Object)(object)Owner.HipsHubs[i].bone)
				{
					flag = true;
					break;
				}
			}
			if (!flag)
			{
				HipsHubBackbone hipsHubBackbone = new HipsHubBackbone(Owner, parent);
				hipsHubBackbone.frontBone = frontBone;
				HubBackBones.Add(hipsHubBackbone);
				if (!((Object)(object)parent == (Object)(object)Owner.HipsSetup.bone))
				{
					frontBone = parent;
					parent = parent.parent;
					continue;
				}
				break;
			}
			break;
		}
	}

	private bool? IsFirstParent(Leg leg, Transform hub)
	{
		if ((Object)(object)leg.BoneStart == (Object)null)
		{
			return false;
		}
		Transform val = leg.BoneStart;
		while ((Object)(object)val != (Object)null)
		{
			if ((Object)(object)val == (Object)(object)hub)
			{
				return true;
			}
			if ((Object)(object)val == (Object)(object)Owner.Hips)
			{
				return false;
			}
			for (int i = 0; i < Owner.ExtraHipsHubs.Count; i++)
			{
				if ((Object)(object)val == (Object)(object)Owner.ExtraHipsHubs[i])
				{
					return false;
				}
			}
			val = val.parent;
		}
		return null;
	}

	public void Reset()
	{
		Calibrate();
		_Hips_LastHipsOffset = 0f;
	}

	public void PreCalibrate()
	{
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		UniRotate.PreCalibrate();
		if (Owner.Calibrate != ECalibrateMode.FixedCalibrate)
		{
			UniRotate.PreCalibrate();
		}
		else
		{
			bone.localPosition = LastKeyframeLocalPosition;
			bone.localRotation = LastKeyframeLocalRotation;
		}
		if (HubBackBones != null)
		{
			for (int i = 0; i < HubBackBones.Count; i++)
			{
				HubBackBones[i].PreCalibrate();
			}
		}
	}

	public void Calibrate()
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		LastKeyframePosition = bone.position;
		LastKeyframeLocalPosition = bone.localPosition;
		LastKeyframeLocalRotation = bone.localRotation;
		LastKeyframeRotation = bone.rotation;
		LastRootLocalPos = Owner.ToRootLocalSpace(LastKeyframePosition);
		LastHipsHeightDiff = GetHeightDiff(LastRootLocalPos.y);
		if (HubBackBones != null)
		{
			for (int i = 0; i < HubBackBones.Count; i++)
			{
				HubBackBones[i].Calibrate();
			}
		}
	}

	public float GetHeightDiff(float rootSpaceHeight)
	{
		return Mathf.InverseLerp(0f, InitialHipsHeightLocal, rootSpaceHeight);
	}

	public void CopyMuscleSettingsFrom(HipsReference hipsSetup)
	{
		HipsMuscle.Acceleration = hipsSetup.HipsMuscle.Acceleration;
		HipsMuscle.AccelerationLimit = hipsSetup.HipsMuscle.AccelerationLimit;
		HipsMuscle.Damping = hipsSetup.HipsMuscle.Damping;
		HipsMuscle.BrakePower = hipsSetup.HipsMuscle.BrakePower;
	}

	public Vector3 CalculateCenterOfMassStability(float stabilizingMultiplier)
	{
		//IL_0331: Unknown result type (might be due to invalid IL or missing references)
		//IL_0336: Unknown result type (might be due to invalid IL or missing references)
		//IL_033c: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_018c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0191: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0328: Unknown result type (might be due to invalid IL or missing references)
		//IL_0329: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0317: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0104: Unknown result type (might be due to invalid IL or missing references)
		//IL_0109: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_010d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_0124: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0137: Unknown result type (might be due to invalid IL or missing references)
		//IL_0149: Unknown result type (might be due to invalid IL or missing references)
		//IL_014e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0153: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0207: Unknown result type (might be due to invalid IL or missing references)
		//IL_0217: Unknown result type (might be due to invalid IL or missing references)
		//IL_021c: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_021e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0220: Unknown result type (might be due to invalid IL or missing references)
		//IL_0222: Unknown result type (might be due to invalid IL or missing references)
		//IL_0227: Unknown result type (might be due to invalid IL or missing references)
		//IL_0231: Unknown result type (might be due to invalid IL or missing references)
		//IL_0236: Unknown result type (might be due to invalid IL or missing references)
		//IL_023b: Unknown result type (might be due to invalid IL or missing references)
		//IL_023d: Unknown result type (might be due to invalid IL or missing references)
		//IL_023f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0241: Unknown result type (might be due to invalid IL or missing references)
		//IL_0246: Unknown result type (might be due to invalid IL or missing references)
		//IL_0248: Unknown result type (might be due to invalid IL or missing references)
		//IL_024a: Unknown result type (might be due to invalid IL or missing references)
		//IL_024c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0251: Unknown result type (might be due to invalid IL or missing references)
		//IL_0263: Unknown result type (might be due to invalid IL or missing references)
		//IL_0264: Unknown result type (might be due to invalid IL or missing references)
		//IL_026d: Unknown result type (might be due to invalid IL or missing references)
		//IL_027f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0285: Unknown result type (might be due to invalid IL or missing references)
		//IL_028a: Unknown result type (might be due to invalid IL or missing references)
		//IL_028f: Unknown result type (might be due to invalid IL or missing references)
		if (Owner.StabilizeCenterOfMass > 0f)
		{
			Vector3 val = default(Vector3);
			((Vector3)(ref val))..ctor(0f, 0f, 0f);
			float num = ChildLegs.Count;
			if (Owner.StabilityAlgorithm == EStabilityMode.Biped_Deprecated)
			{
				for (int i = 0; i < ChildLegs.Count; i++)
				{
					Leg leg = ChildLegs[i];
					Vector3 val2 = leg.AnkleH.Bone.TransformVector(leg.AnkleToFeetEnd * 0.6f);
					Vector3 previousFinalIKPosForStability = leg._PreviousFinalIKPosForStability;
					Vector3 val3 = Owner.ToRootLocalSpace(previousFinalIKPosForStability + val2);
					Vector3 initialPosInRootSpace = leg.InitialPosInRootSpace;
					initialPosInRootSpace.y += _Hips_LastHipsOffset;
					Vector3 val4 = ((!(Owner.AnimationIsStablePose >= 1f)) ? ((!(Owner.AnimationIsStablePose <= 0f)) ? Vector3.LerpUnclamped(initialPosInRootSpace, leg.AnkleH.LastKeyframeRootPos, Owner.AnimationIsStablePose) : initialPosInRootSpace) : leg.AnkleH.LastKeyframeRootPos);
					Vector3 val5 = val3 - val4;
					val5.y *= 0.25f;
					val += val5 * leg.BlendWeight * 0.5f * (stabilizingMultiplier * Owner.StabilizeCenterOfMass);
				}
				val.y /= num;
			}
			else if (Owner.StabilityAlgorithm == EStabilityMode.Universal)
			{
				Vector3 lastRootLocalPos = LastRootLocalPos;
				for (int j = 0; j < ChildLegs.Count; j++)
				{
					Leg leg2 = ChildLegs[j];
					Vector3 initialPosInRootSpace2 = leg2.InitialPosInRootSpace;
					initialPosInRootSpace2.y += _Hips_LastHipsOffset;
					Vector3 val6 = ((!(Owner.AnimationIsStablePose >= 1f)) ? ((!(Owner.AnimationIsStablePose <= 0f)) ? Vector3.LerpUnclamped(initialPosInRootSpace2, leg2.AnkleH.LastKeyframeRootPos, Owner.AnimationIsStablePose) : initialPosInRootSpace2) : leg2.AnkleH.LastKeyframeRootPos);
					Vector3 val7 = lastRootLocalPos - val6;
					Vector3 val8 = Owner.ToRootLocalSpace(leg2._PreviousFinalIKPosForStability);
					Vector3 val9 = lastRootLocalPos - val8;
					Vector3 val10 = val7 - val9;
					val10.y *= 0.25f;
					val += val10 * leg2.BlendWeight * (stabilizingMultiplier * Owner.StabilizeCenterOfMass) / num;
				}
			}
			if (val.y > 0f)
			{
				val.y = 0f;
			}
			if (Owner.StabilizingSpeed < 1f)
			{
				float duration = 0f;
				if (Owner.StabilizingSpeed < 1f)
				{
					duration = 0.001f + (1f - Owner.StabilizingSpeed) * 0.4f;
				}
				Owner.ValueTowards(ref _Hips_StabilityLocalAdjustement, val, ref _Hips_sd_StabilAdjustm, duration);
			}
			else
			{
				_Hips_StabilityLocalAdjustement = val;
			}
		}
		else
		{
			_Hips_StabilityLocalAdjustement = Vector3.zero;
		}
		return _Hips_StabilityLocalAdjustement;
	}

	public Vector3 CalculateStretchPreventerOffset()
	{
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_0102: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_019b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_017f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0184: Unknown result type (might be due to invalid IL or missing references)
		//IL_0186: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0192: Unknown result type (might be due to invalid IL or missing references)
		if (Owner.HipsStretchPreventer < 0.0001f)
		{
			return Vector3.zero;
		}
		Vector3 val = Vector3.zero;
		float num = 0f;
		Vector3 lastRootLocalPos = LastRootLocalPos;
		lastRootLocalPos.y = 0f;
		lastRootLocalPos = Owner.baseTransform.TransformPoint(lastRootLocalPos);
		for (int i = 0; i < ChildLegs.Count; i++)
		{
			Leg leg = ChildLegs[i];
			float stretchValue = leg.IKProcessor.GetStretchValue(leg._PreviousFinalIKPosForStability);
			if (stretchValue > Owner.LimitLegStretch * 0.975f)
			{
				num += 1f;
				float num2 = stretchValue - Owner.LimitLegStretch * 0.975f;
				Vector3 vec = lastRootLocalPos - leg._PreviousFinalIKPosForStability;
				vec = Owner.ToRootLocalSpaceVec(vec);
				if (vec.y > 0f)
				{
					vec.y = 0f;
				}
				vec.x *= -0.6f;
				vec.z *= -0.6f;
				val += vec * Mathf.Clamp(num2 * 3f, 0f, 0.5f);
			}
		}
		if (Owner.StretchPreventerSpeed < 1f)
		{
			float num3 = Mathf.Lerp(8f, 40f, Owner.StretchPreventerSpeed) * Owner.DeltaTime;
			if (num > 0f)
			{
				_stretchPreventerOff = Vector3.Lerp(_stretchPreventerOff, val / num, num3);
			}
			else
			{
				_stretchPreventerOff = Vector3.Lerp(_stretchPreventerOff, Vector3.zero, num3 * 0.7f);
			}
		}
		else
		{
			_stretchPreventerOff = val;
		}
		return _stretchPreventerOff;
	}

	public Vector3 CalculateGlueMovePush()
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_017d: Unknown result type (might be due to invalid IL or missing references)
		//IL_017f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0153: Unknown result type (might be due to invalid IL or missing references)
		//IL_0163: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0174: Unknown result type (might be due to invalid IL or missing references)
		//IL_0179: Unknown result type (might be due to invalid IL or missing references)
		//IL_0197: Unknown result type (might be due to invalid IL or missing references)
		//IL_0198: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01aa: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = Vector3.zero;
		if (Owner.GlueBlend < 0.0001f)
		{
			return val;
		}
		for (int i = 0; i < ChildLegs.Count; i++)
		{
			Leg leg = ChildLegs[i];
			if ((leg.G_Attached || leg.G_DuringLegAdjustMovement) && leg.G_LastLegMoveDistanceFactor > 0.055f && leg.G_GlueInternalTransition > 0f && leg.G_GlueInternalTransition < 1f && leg.G_HandlerExecutingLegAnimationMode == EGlueMode.Idle)
			{
				Vector3 val2 = leg.AnkleH.Bone.TransformVector(leg.AnkleToFeetEnd);
				Vector3 val3 = Owner.ToRootLocalSpace(leg._PreviousFinalIKPosForStability + val2);
				val3.z = 0f - val3.z;
				float num = Owner.BaseLegAnimating.PushHipsOnMoveCurve.Evaluate(leg.G_GlueInternalTransition);
				Vector3 val4 = -val3 * num * 1f;
				val4.y -= num * leg.G_LastLegMoveDistanceFactor * Owner.ScaleReferenceNoScale * 0.75f;
				Vector3 val5;
				if (Owner.NormalizePush)
				{
					float num2 = Mathf.Min(1f, ((Vector3)(ref val4)).magnitude / (Owner.ScaleReferenceNoScale * 0.33f));
					num2 *= num2;
					val5 = ((Vector3)(ref val4)).normalized * Owner.ScaleReferenceNoScale * 0.33f * num2;
				}
				else
				{
					val5 = val4;
				}
				val5.y *= Owner.PushYBlend;
				val += val5 * leg.BlendWeight;
			}
		}
		return val;
	}

	private void AnimateStepAdjustTo(float yOffset)
	{
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		if (Owner.HipsHeightStepSpeed >= 1f)
		{
			_Hips_StepHeightAdjustOffset = yOffset;
			return;
		}
		float landingBoost = Owner.GetLandingBoost();
		if (Owner.HipsAdjustStyle == EHipsAdjustStyle.FollowLegHeight && yOffset < _Hips_StepHeightAdjustOffset && _h_lowestHitLeg != -1)
		{
			Vector3 previousFinalIKPos = Owner.Legs[_h_lowestHitLeg]._PreviousFinalIKPos;
			previousFinalIKPos = Owner.ToRootLocalSpace(previousFinalIKPos);
			previousFinalIKPos.y -= Owner.ScaleReferenceNoScale * 0.325f;
			if (previousFinalIKPos.y > yOffset)
			{
				yOffset = previousFinalIKPos.y;
			}
		}
		_Hips_StepHeightAdjustOffset = Mathf.SmoothDamp(_Hips_StepHeightAdjustOffset, yOffset, ref _sd_Hips_StepHeightAdjustOffset, Mathf.LerpUnclamped(0.4f, 0.01f, landingBoost), 1000000f, Owner.DeltaTime);
		_h_lowestHitLeg = -1;
	}

	public float CalculateBodyAdjust()
	{
		//IL_0201: Unknown result type (might be due to invalid IL or missing references)
		//IL_013a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_010e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0189: Unknown result type (might be due to invalid IL or missing references)
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_011d: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0197: Unknown result type (might be due to invalid IL or missing references)
		_Hips_LastHipsOffset = 0f;
		if (Owner.HipsHeightStepBlend <= 0f)
		{
			return 0f;
		}
		if (Owner.IsGrounded)
		{
			Vector3 val = default(Vector3);
			((Vector3)(ref val))..ctor(float.MaxValue, float.MaxValue, float.MaxValue);
			Vector3 val2 = default(Vector3);
			((Vector3)(ref val2))..ctor(float.MaxValue, float.MaxValue, float.MaxValue);
			for (int i = 0; i < ChildLegs.Count; i++)
			{
				Leg leg = ChildLegs[i];
				if (!leg.RaycastHitted)
				{
					continue;
				}
				RaycastHit lastGroundHit = leg.LastGroundHit;
				Vector3 point = ((RaycastHit)(ref lastGroundHit)).point;
				point = Owner.ToRootLocalSpace(point);
				if (point.y <= 0f)
				{
					if (0f - point.y < Owner.BodyStepDown * Owner.ScaleReferenceNoScale && point.y < val.y)
					{
						val = point;
						_h_lowestHitLeg = i;
					}
				}
				else if (point.y < Owner.MaxBodyStepUp * Owner.ScaleReferenceNoScale && point.y < val.y)
				{
					val2 = point;
				}
			}
			bool flag = false;
			if (val.x != float.MaxValue && Owner.BodyStepDown > 0f && val.y <= 0f)
			{
				AnimateStepAdjustTo(val.y);
				flag = true;
			}
			if (!flag && Owner.MaxBodyStepUp > 0f && val2.x != float.MaxValue)
			{
				AnimateStepAdjustTo(val2.y);
				flag = true;
			}
			if (!flag)
			{
				AnimateStepAdjustTo(0f);
			}
		}
		else
		{
			AnimateStepAdjustTo(0f);
		}
		float num = Owner.HipsBlendWeight * Owner._MainBlend * Owner.IsGroundedBlend * Owner.RagdolledDisablerBlend;
		_Hips_LastHipsOffset = _Hips_StepHeightAdjustOffset * Owner.baseTransform.lossyScale.y * num;
		return _Hips_LastHipsOffset;
	}

	public Vector3 CalculateStretchReadjust()
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = Vector3.zero;
		for (int i = 0; i < ChildLegs.Count; i++)
		{
			Leg leg = ChildLegs[i];
			Vector3 val2 = leg._FinalIKPos - val;
			if (leg.IKProcessor.GetStretchValue(val2) > Owner.LimitLegStretch)
			{
				Vector3 notStretchedPositionTowards = leg.IKProcessor.GetNotStretchedPositionTowards(val2, Owner.LimitLegStretch);
				Vector3 val3 = val2 - notStretchedPositionTowards;
				val += val3;
			}
		}
		val = Owner.ToRootLocalSpaceVec(val);
		_reAdjustLocal = Vector3.SmoothDamp(_reAdjustLocal, val, ref _sd_readj, 0.1f, 10000000f, Owner.DeltaTime);
		return _reAdjustLocal;
	}

	public Vector3 SmoothPushOffset(Vector3 pushLocalOffset, float pushDuration)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		Owner.ValueTowards(ref _pushSmoothed, pushLocalOffset, ref _sd_pushSmoothed, pushDuration);
		return _pushSmoothed;
	}

	public Vector3 AnimateOffset(Vector3 hubOffset)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		return hubOffset;
	}
}
