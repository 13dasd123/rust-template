using Unity.Burst;
using Unity.Collections;
using Unity.Jobs;
using Unity.Mathematics;

[BurstCompile]
internal struct CleanupDuplicateVerticesJob : IJob
{
	[ReadOnly]
	public NativeList<float3> inputVertices;

	[ReadOnly]
	public NativeList<int> inputIndices;

	[WriteOnly]
	public NativeList<float3> outputVertices;

	[WriteOnly]
	public NativeList<int> outputIndices;

	public NativeHashMap<int, int> indexToIndices;

	public float3 vertexOffset;

	public float invScale;

	public int width;

	public int widthHeight;

	public void Execute()
	{
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		indexToIndices.Clear();
		outputVertices.Clear();
		outputIndices.Clear();
		int num = 0;
		for (int i = 0; i < inputVertices.Length; i++)
		{
			int3 val = (int3)(inputVertices[i] * invScale + vertexOffset);
			int num2 = inputIndices[i];
			int num3 = val.x + val.y * width + val.z * widthHeight;
			if (indexToIndices.TryGetValue(num3, ref num2))
			{
				outputIndices.Add(ref num2);
				continue;
			}
			indexToIndices.Add(num3, num);
			ref NativeList<float3> reference = ref outputVertices;
			float3 val2 = inputVertices[i];
			reference.Add(ref val2);
			outputIndices.Add(ref num);
			num++;
		}
	}
}
