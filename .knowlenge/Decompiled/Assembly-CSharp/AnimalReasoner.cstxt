using Rust.Ai.HTN;
using Rust.Ai.HTN.Bear;
using Rust.Ai.HTN.Reasoning;

public class AnimalReasoner : INpcReasoner
{
	public float TickFrequency { get; set; }

	public float LastTickTime { get; set; }

	public void Tick(IHTNAgent npc, float deltaTime, float time)
	{
		if (!(npc.AiDomain.NpcContext is BearContext bearContext))
		{
			return;
		}
		BaseNpc baseNpc = null;
		float num = float.MaxValue;
		for (int i = 0; i < bearContext.AnimalsInRange.Count; i++)
		{
			AnimalInfo animalInfo = bearContext.AnimalsInRange[i];
			if (animalInfo.Animal != null && animalInfo.SqrDistance < num)
			{
				num = animalInfo.SqrDistance;
				baseNpc = animalInfo.Animal;
			}
		}
		if (baseNpc != null && num < npc.AiDefinition.Engagement.SqrMediumRange)
		{
			bearContext.Memory.RememberPrimaryAnimal(baseNpc);
			bearContext.SetFact(Facts.NearbyAnimal, value: true);
		}
		else
		{
			bearContext.SetFact(Facts.NearbyAnimal, value: false);
		}
	}
}
