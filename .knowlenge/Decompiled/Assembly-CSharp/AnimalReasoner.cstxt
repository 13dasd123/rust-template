using Rust.Ai.HTN;
using Rust.Ai.HTN.Reasoning;
using Rust.Ai.HTN.ScientistJunkpile;

public class AnimalReasoner : INpcReasoner
{
	public float TickFrequency { get; set; }

	public float LastTickTime { get; set; }

	public void Tick(IHTNAgent npc, float deltaTime, float time)
	{
		if (!(npc.AiDomain.NpcContext is ScientistJunkpileContext scientistJunkpileContext))
		{
			return;
		}
		BaseNpc baseNpc = null;
		float num = float.MaxValue;
		for (int i = 0; i < scientistJunkpileContext.AnimalsInRange.Count; i++)
		{
			AnimalInfo animalInfo = scientistJunkpileContext.AnimalsInRange[i];
			if (animalInfo.Animal != null && animalInfo.SqrDistance < num)
			{
				num = animalInfo.SqrDistance;
				baseNpc = animalInfo.Animal;
			}
		}
		if (baseNpc != null && IsNearby(scientistJunkpileContext.Domain, num))
		{
			scientistJunkpileContext.Memory.RememberPrimaryAnimal(baseNpc);
			scientistJunkpileContext.SetFact(Facts.NearbyAnimal, value: true);
		}
		else
		{
			scientistJunkpileContext.SetFact(Facts.NearbyAnimal, value: false);
		}
	}

	public static bool IsNearby(ScientistJunkpileDomain domain, float sqrDistance)
	{
		AttackEntity firearm = domain.GetFirearm();
		return sqrDistance < domain.ScientistDefinition.Engagement.SqrCloseRangeFirearm(firearm) + 4f;
	}
}
