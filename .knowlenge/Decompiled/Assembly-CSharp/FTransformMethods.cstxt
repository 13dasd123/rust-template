using System.Collections.Generic;
using UnityEngine;

public static class FTransformMethods
{
	public static Transform FindChildByNameInDepth(string name, Transform transform, bool findInDeactivated = true, string[] additionalContains = null)
	{
		if (((Object)transform).name == name)
		{
			return transform;
		}
		Transform[] componentsInChildren = ((Component)transform).GetComponentsInChildren<Transform>(findInDeactivated);
		foreach (Transform val in componentsInChildren)
		{
			if (!((Object)val).name.ToLower().Contains(name.ToLower()))
			{
				continue;
			}
			bool flag = false;
			if (additionalContains == null || additionalContains.Length == 0)
			{
				flag = true;
			}
			else
			{
				for (int j = 0; j < additionalContains.Length; j++)
				{
					if (((Object)val).name.ToLower().Contains(additionalContains[j].ToLower()))
					{
						flag = true;
						break;
					}
				}
			}
			if (flag)
			{
				return val;
			}
		}
		return null;
	}

	public static List<T> FindComponentsInAllChildren<T>(Transform transformToSearchIn, bool includeInactive = false, bool tryGetMultipleOutOfSingleObject = false) where T : Component
	{
		List<T> list = new List<T>();
		T[] components = ((Component)transformToSearchIn).GetComponents<T>();
		foreach (T val in components)
		{
			if (Object.op_Implicit((Object)(object)val))
			{
				list.Add(val);
			}
		}
		Transform[] componentsInChildren = ((Component)transformToSearchIn).GetComponentsInChildren<Transform>(includeInactive);
		foreach (Transform val2 in componentsInChildren)
		{
			if (!tryGetMultipleOutOfSingleObject)
			{
				T component = ((Component)val2).GetComponent<T>();
				if (Object.op_Implicit((Object)(object)component) && !list.Contains(component))
				{
					list.Add(component);
				}
				continue;
			}
			components = ((Component)val2).GetComponents<T>();
			foreach (T val3 in components)
			{
				if (Object.op_Implicit((Object)(object)val3) && !list.Contains(val3))
				{
					list.Add(val3);
				}
			}
		}
		return list;
	}

	public static T FindComponentInAllChildren<T>(Transform transformToSearchIn) where T : Component
	{
		Transform[] componentsInChildren = ((Component)transformToSearchIn).GetComponentsInChildren<Transform>();
		for (int i = 0; i < componentsInChildren.Length; i++)
		{
			T component = ((Component)componentsInChildren[i]).GetComponent<T>();
			if (Object.op_Implicit((Object)(object)component))
			{
				return component;
			}
		}
		return default(T);
	}

	public static T FindComponentInAllParents<T>(Transform transformToSearchIn) where T : Component
	{
		Transform parent = transformToSearchIn.parent;
		for (int i = 0; i < 100; i++)
		{
			T component = ((Component)parent).GetComponent<T>();
			if (Object.op_Implicit((Object)(object)component))
			{
				return component;
			}
			parent = parent.parent;
			if ((Object)(object)parent == (Object)null)
			{
				return default(T);
			}
		}
		return default(T);
	}

	public static void ChangeActiveChildrenInside(Transform parentOfThem, bool active)
	{
		for (int i = 0; i < parentOfThem.childCount; i++)
		{
			((Component)parentOfThem.GetChild(i)).gameObject.SetActive(active);
		}
	}

	public static void ChangeActiveThroughParentTo(Transform start, Transform end, bool active, bool changeParentsChildrenActivation = false)
	{
		((Component)start).gameObject.SetActive(active);
		Transform parent = start.parent;
		for (int i = 0; i < 100; i++)
		{
			if ((Object)(object)parent == (Object)(object)end)
			{
				break;
			}
			if ((Object)(object)parent == (Object)null)
			{
				break;
			}
			if (changeParentsChildrenActivation)
			{
				ChangeActiveChildrenInside(parent, active);
			}
			parent = parent.parent;
		}
	}

	public static Transform GetObjectByPath(Transform root, string path)
	{
		if ((Object)(object)root == (Object)null)
		{
			return null;
		}
		string[] array = path.Split('/');
		Transform val = root;
		for (int i = 0; i < array.Length; i++)
		{
			Transform val2 = val.Find(array[i]);
			if ((Object)(object)val2 == (Object)null)
			{
				return null;
			}
			val = val2;
		}
		return val;
	}

	public static string CalculateTransformPath(Transform child, Transform root)
	{
		if ((Object)(object)child.parent == (Object)null)
		{
			return "";
		}
		string text = "";
		bool flag = true;
		while ((Object)(object)child != (Object)(object)root)
		{
			if ((Object)(object)child == (Object)null)
			{
				return "";
			}
			text = ((!flag) ? (((Object)child).name + "/" + text) : ((Object)child).name);
			flag = false;
			child = child.parent;
		}
		return text;
	}
}
