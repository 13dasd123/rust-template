using System.Collections.Generic;
using Facepunch;
using UnityEngine;

public class PlayerRelationships : IPooled
{
	public bool dirty;

	public ulong ownerPlayer;

	public Dictionary<ulong, PlayerRelationshipInfo> relations;

	public bool Forget(ulong player)
	{
		if (relations.TryGetValue(player, out var value))
		{
			relations.Remove(player);
			if (value.mugshotCrc != 0)
			{
				ServerInstance.DeleteMugshot(ownerPlayer, player, value.mugshotCrc);
			}
			return true;
		}
		return false;
	}

	public PlayerRelationshipInfo GetRelations(ulong player)
	{
		BasePlayer basePlayer = FindByID(player);
		if (relations.TryGetValue(player, out var value))
		{
			if ((Object)(object)basePlayer != (Object)null)
			{
				value.displayName = basePlayer.displayName;
			}
			return value;
		}
		PlayerRelationshipInfo playerRelationshipInfo = Pool.Get<PlayerRelationshipInfo>();
		if ((Object)(object)basePlayer != (Object)null)
		{
			playerRelationshipInfo.displayName = basePlayer.displayName;
		}
		playerRelationshipInfo.player = player;
		relations.Add(player, playerRelationshipInfo);
		return playerRelationshipInfo;
	}

	public PlayerRelationships()
	{
		LeavePool();
	}

	public void EnterPool()
	{
		ownerPlayer = 0uL;
		if (relations != null)
		{
			relations.Clear();
			Pool.Free<ulong, PlayerRelationshipInfo>(ref relations, false);
		}
	}

	public void LeavePool()
	{
		ownerPlayer = 0uL;
		relations = Pool.Get<Dictionary<ulong, PlayerRelationshipInfo>>();
		relations.Clear();
	}
}
