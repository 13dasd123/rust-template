using System.Collections.Generic;
using Facepunch;
using Rust;
using UnityEngine;

public class ItemModProjectileRadialDamage : ItemModProjectileMod
{
	public float radius = 0.5f;

	public DamageTypeEntry damage;

	public override void ServerProjectileHit(HitInfo info)
	{
		List<BaseCombatEntity> obj = Pool.GetList<BaseCombatEntity>();
		List<BaseCombatEntity> obj2 = Pool.GetList<BaseCombatEntity>();
		Vis.Entities(info.HitPositionWorld, radius, obj2, 1101212417);
		foreach (BaseCombatEntity item in obj2)
		{
			if (!item.isServer || obj.Contains(item) || item == info.HitEntity)
			{
				continue;
			}
			Vector3 a = item.ClosestPoint(info.HitPositionWorld);
			float num = Vector3.Distance(a, info.HitPositionWorld);
			float num2 = num / radius;
			if (!(num2 > 1f))
			{
				float num3 = 1f - num2;
				Vector3 normalized = (item.transform.position + new Vector3(0f, 0.25f, 0f) - info.HitPositionWorld).normalized;
				if (!Physics.Raycast(info.HitPositionWorld + info.HitNormalWorld * 0.1f, normalized, out var hitInfo, radius * 2f, 1101212417) || !(GameObjectEx.ToBaseEntity(hitInfo.collider.gameObject) != item))
				{
					obj.Add(item);
					item.Hurt(damage.amount * num3, damage.type, info.Initiator);
				}
			}
		}
		Pool.FreeList(ref obj);
		Pool.FreeList(ref obj2);
	}
}
