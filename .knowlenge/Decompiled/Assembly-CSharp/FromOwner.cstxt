using Oxide.Core;
using UnityEngine;

public class FromOwner : Conditional
{
	private bool includeMounted;

	public FromOwner(bool includeMounted = false)
	{
		this.includeMounted = includeMounted;
	}

	public override string GetArgs()
	{
		return includeMounted.ToString().ToLower();
	}

	public static bool Test(uint id, string debugName, BaseEntity ent, BasePlayer player, bool includeMounted)
	{
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		//IL_0135: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_0155: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)ent == (Object)null || (Object)(object)player == (Object)null)
		{
			return false;
		}
		if (ent.net == null || player.net == null)
		{
			return false;
		}
		object obj = Interface.CallHook("OnEntityFromOwnerCheck", (object)ent, (object)player, (object)id, (object)debugName, (object)includeMounted);
		if (obj is bool)
		{
			return (bool)obj;
		}
		if (ent.net.ID == player.net.ID)
		{
			return true;
		}
		if (ent.parentEntity.uid != player.net.ID)
		{
			BaseEntity parentEntity = ent.GetParentEntity();
			if ((Object)(object)parentEntity != (Object)null && parentEntity.parentEntity.uid == player.net.ID)
			{
				return true;
			}
			if (includeMounted)
			{
				BaseMountable baseMountable = ent as BaseMountable;
				if ((Object)(object)baseMountable == (Object)null)
				{
					baseMountable = ent.parentEntity.Get(serverside: true) as BaseMountable;
				}
				if ((Object)(object)baseMountable != (Object)null)
				{
					NetworkableId? val = baseMountable.GetMounted()?.net?.ID;
					NetworkableId iD = player.net.ID;
					if (val.HasValue && (!val.HasValue || val.GetValueOrDefault() == iD))
					{
						return true;
					}
				}
			}
			return false;
		}
		return true;
	}
}
