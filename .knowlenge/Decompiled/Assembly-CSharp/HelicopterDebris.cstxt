using System.Collections.Generic;
using Rust;
using UnityEngine;

public class HelicopterDebris : ServerGib
{
	public ItemDefinition metalFragments;

	public ItemDefinition hqMetal;

	public ItemDefinition charcoal;

	private ResourceDispenser resourceDispenser;

	private float tooHotUntil;

	public override void ServerInit()
	{
		base.ServerInit();
		tooHotUntil = Time.realtimeSinceStartup + 480f;
	}

	public override void PhysicsInit(Mesh mesh)
	{
		base.PhysicsInit(mesh);
		if (base.isServer)
		{
			resourceDispenser = GetComponent<ResourceDispenser>();
			Rigidbody component = GetComponent<Rigidbody>();
			float num = Mathf.Clamp01(component.mass / 5f);
			resourceDispenser.containedItems = new List<ItemAmount>();
			if (num > 0.75f)
			{
				resourceDispenser.containedItems.Add(new ItemAmount(hqMetal, 7f * num));
			}
			if (num > 0f)
			{
				resourceDispenser.containedItems.Add(new ItemAmount(metalFragments, 150f * num));
				resourceDispenser.containedItems.Add(new ItemAmount(charcoal, 80f * num));
			}
			resourceDispenser.Initialize();
		}
	}

	public bool IsTooHot()
	{
		return tooHotUntil > Time.realtimeSinceStartup;
	}

	public override void OnAttacked(HitInfo info)
	{
		if (IsTooHot() && info.WeaponPrefab is BaseMelee)
		{
			if (info.Initiator is BasePlayer)
			{
				HitInfo hitInfo = new HitInfo();
				hitInfo.damageTypes.Add(DamageType.Heat, 5f);
				hitInfo.DoHitEffects = true;
				hitInfo.DidHit = true;
				hitInfo.HitBone = 0u;
				hitInfo.Initiator = this;
				hitInfo.PointStart = base.transform.position;
				Effect.server.Run("assets/bundled/prefabs/fx/impacts/additive/fire.prefab", info.Initiator, 0u, new Vector3(0f, 1f, 0f), Vector3.up);
			}
		}
		else
		{
			if ((bool)resourceDispenser)
			{
				resourceDispenser.OnAttacked(info);
			}
			base.OnAttacked(info);
		}
	}
}
