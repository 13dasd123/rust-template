using System.Collections.Generic;
using Facepunch;

private class CellPartition : IPooled
{
	public List<CellId> PackedCells;

	public List<CellId> CellsWithSpace;

	public bool IsEmpty()
	{
		if (PackedCells.IsNullOrEmpty())
		{
			return CellsWithSpace.IsNullOrEmpty();
		}
		return false;
	}

	public void AddPackedCell(CellId cell)
	{
		if (PackedCells == null)
		{
			PackedCells = Pool.Get<List<CellId>>();
		}
		PackedCells.Add(cell);
	}

	public void RemovePackedCell(CellId cell)
	{
		if (PackedCells != null)
		{
			PackedCells.Remove(cell);
			if (PackedCells.Count == 0)
			{
				Pool.FreeUnmanaged<CellId>(ref PackedCells);
			}
		}
	}

	public void AddCellWithSpace(CellId cell)
	{
		if (CellsWithSpace == null)
		{
			CellsWithSpace = Pool.Get<List<CellId>>();
		}
		CellsWithSpace.Add(cell);
	}

	public void RemoveCellWithSpace(CellId cell)
	{
		if (CellsWithSpace != null)
		{
			CellsWithSpace.Remove(cell);
			if (CellsWithSpace.Count == 0)
			{
				Pool.FreeUnmanaged<CellId>(ref CellsWithSpace);
			}
		}
	}

	public void EnterPool()
	{
		if (PackedCells != null)
		{
			Pool.FreeUnmanaged<CellId>(ref PackedCells);
		}
		if (CellsWithSpace != null)
		{
			Pool.FreeUnmanaged<CellId>(ref CellsWithSpace);
		}
	}

	public void LeavePool()
	{
	}
}
