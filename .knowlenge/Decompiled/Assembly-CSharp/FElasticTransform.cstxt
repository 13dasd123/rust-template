using FIMSpace.FTools;
using UnityEngine;

public class FElasticTransform
{
	public Transform transform;

	private FElasticTransform elChild;

	private FElasticTransform elParent;

	[FPD_Suffix(0f, 1f, FPD_SuffixAttribute.SuffixMode.From0to100, "%", true, 0)]
	public float RotationRapidness = 0.1f;

	private Quaternion proceduralRotation;

	private float delta = 0.01f;

	public FMuscle_Vector3 PositionMuscle { get; private set; }

	public Vector3 ProceduralPosition { get; private set; }

	public Vector3 sourceAnimationPosition { get; private set; }

	public void Initialize(Transform transform)
	{
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		if (!((Object)(object)transform == (Object)null))
		{
			this.transform = transform;
			ProceduralPosition = transform.position;
			proceduralRotation = transform.rotation;
			sourceAnimationPosition = transform.position;
			PositionMuscle = new FMuscle_Vector3();
			PositionMuscle.Initialize(transform.position);
		}
	}

	public void OverrideProceduralPosition(Vector3 newPos)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		ProceduralPosition = newPos;
	}

	public void OverrideProceduralPositionHard(Vector3 newPos)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		ProceduralPosition = newPos;
		PositionMuscle.OverrideProceduralPosition(newPos);
		sourceAnimationPosition = newPos;
	}

	public void OverrideProceduralRotation(Quaternion newRot)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		proceduralRotation = newRot;
	}

	public void CaptureSourceAnimation()
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		sourceAnimationPosition = transform.position;
	}

	public void SetChild(FElasticTransform child)
	{
		elChild = child;
	}

	public FElasticTransform GetElasticChild()
	{
		return elChild;
	}

	public void SetParent(FElasticTransform parent)
	{
		elParent = parent;
	}

	public void UpdateElasticPosition(float delta)
	{
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		this.delta = delta;
		if (elParent != null)
		{
			FElasticTransform obj = (((Object)(object)elParent.transform == (Object)null) ? elParent.elParent : elParent);
			Quaternion rotation = obj.transform.rotation;
			Vector3 desired = obj.ProceduralPosition + rotation * transform.localPosition;
			PositionMuscle.Update(delta, desired);
			ProceduralPosition = PositionMuscle.ProceduralPosition;
		}
		else
		{
			ProceduralPosition = transform.position;
		}
	}

	public void UpdateElasticPosition(float delta, Vector3 influenceOffset)
	{
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		this.delta = delta;
		if (elParent != null)
		{
			PositionMuscle.MotionInfluence(influenceOffset);
			UpdateElasticPosition(delta);
		}
		else
		{
			ProceduralPosition = transform.position;
		}
	}

	public void UpdateElasticRotation(float blending)
	{
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		if (elChild != null)
		{
			Quaternion val = ((!(blending < 1f)) ? GetTargetRotation(elChild.ProceduralPosition, transform.TransformDirection(elChild.transform.localPosition), ProceduralPosition) : GetTargetRotation(elChild.BlendVector(elChild.ProceduralPosition, blending), transform.TransformDirection(elChild.transform.localPosition), blending));
			if (RotationRapidness < 1f)
			{
				proceduralRotation = Quaternion.Lerp(proceduralRotation, val, Mathf.Min(1f, delta * (10f + RotationRapidness * 50f)));
				transform.rotation = proceduralRotation;
			}
			else
			{
				transform.rotation = val;
			}
		}
	}

	public Vector3 BlendVector(Vector3 target, float blend)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		return Vector3.LerpUnclamped(sourceAnimationPosition, target, blend);
	}

	public Quaternion GetTargetRotation(Vector3 lookPos, Vector3 localOffset, float blending)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0004: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = lookPos - BlendVector(ProceduralPosition, blending);
		return Quaternion.FromToRotation(localOffset, ((Vector3)(ref val)).normalized) * transform.rotation;
	}

	public Quaternion GetTargetRotation(Vector3 lookPos, Vector3 localOffset, Vector3 pos)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = lookPos - pos;
		return Quaternion.FromToRotation(localOffset, ((Vector3)(ref val)).normalized) * transform.rotation;
	}
}
