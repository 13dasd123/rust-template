using System;
using ProtoBuf;
using UnityEngine;

[Serializable]
public struct TrophyRoot
{
	public GameObjectRef SourceEntity;

	public GameObject Root;

	public uint GetSourcePrefabId()
	{
		BaseEntity entity = SourceEntity.GetEntity();
		if ((Object)(object)entity != (Object)null)
		{
			return entity.prefabID;
		}
		return 0u;
	}

	public bool Matches(HeadEntity headEnt)
	{
		BaseEntity entity = SourceEntity.GetEntity();
		bool flag = (Object)(object)entity != (Object)null && headEnt.CurrentTrophyData != null && entity.prefabID == headEnt.CurrentTrophyData.entitySource;
		if (!flag)
		{
			GameObject headSource = headEnt.GetHeadSource();
			BasePlayer basePlayer = default(BasePlayer);
			if ((Object)(object)headSource != (Object)null && headSource.TryGetComponent<BasePlayer>(ref basePlayer) && ((Component)entity).TryGetComponent<BasePlayer>(ref basePlayer))
			{
				flag = true;
			}
		}
		return flag;
	}

	public bool Matches(HeadData data)
	{
		if (data == null)
		{
			return false;
		}
		BaseEntity entity = SourceEntity.GetEntity();
		bool flag = (Object)(object)entity != (Object)null && entity.prefabID == data.entitySource;
		if (!flag)
		{
			GameObject val = null;
			val = GameManager.server.FindPrefab(data.entitySource);
			BasePlayer basePlayer = default(BasePlayer);
			if ((Object)(object)val != (Object)null && val.TryGetComponent<BasePlayer>(ref basePlayer) && ((Component)entity).TryGetComponent<BasePlayer>(ref basePlayer))
			{
				flag = true;
			}
		}
		return flag;
	}
}
