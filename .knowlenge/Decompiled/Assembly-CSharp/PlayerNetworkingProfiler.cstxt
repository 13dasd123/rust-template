using System;
using System.Runtime.CompilerServices;
using ConVar;
using Facepunch.Network.Raknet;
using Facepunch.Rust;
using Network;

public static class PlayerNetworkingProfiler
{
	public static int level = 0;

	public static TimeSpan MinFlushInterval = TimeSpan.FromSeconds(1.0);

	public static int ConnectionsPerFrame = 30;

	private static int currentIndex;

	private static DateTime flushCooldown;

	public static void Serialize(AzureAnalyticsUploader uploader, int frameIndex, DateTime timestamp)
	{
		if (level == 0)
		{
			return;
		}
		if (currentIndex >= Net.sv.connections.Count)
		{
			if (flushCooldown > DateTime.UtcNow)
			{
				return;
			}
			flushCooldown = DateTime.UtcNow + MinFlushInterval;
			currentIndex = 0;
		}
		Server sv = Net.sv;
		Server val = (Server)(object)((sv is Server) ? sv : null);
		if (val != null)
		{
			SerializeRaknet(uploader, frameIndex, timestamp, val);
		}
	}

	private static void SerializeRaknet(AzureAnalyticsUploader uploader, int frameIndex, DateTime timestamp, Server server)
	{
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0109: Unknown result type (might be due to invalid IL or missing references)
		//IL_0119: Unknown result type (might be due to invalid IL or missing references)
		//IL_0129: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_0149: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		int num = Math.Min(((Server)server).connections.Count, currentIndex + ConnectionsPerFrame);
		RaknetStats val2 = default(RaknetStats);
		while (currentIndex < num)
		{
			Connection val = ((Server)server).connections[currentIndex];
			if (server.TryGetConnectionStats(val, ref val2))
			{
				string ipaddress = val.ipaddress;
				string value = ipaddress.Split(':')[0];
				string value2 = ipaddress.Split(':')[1];
				int latestPing = server.GetLatestPing(val);
				EventRecord eventRecord = EventRecord.CSV().AddField("", timestamp).AddField("", frameIndex)
					.AddField("", Server.server_id)
					.AddField("", val.guid)
					.AddField("", val.userid)
					.AddField("", value)
					.AddField("", value2)
					.AddField("", latestPing)
					.AddField("", val2.connectionStartTime)
					.AddField("", val2.isLimitedByCongestionControl)
					.AddField("", val2.isLimitedByOutgoingBandwidthLimit)
					.AddField("", val2.BPSLimitByCongestionControl)
					.AddField("", val2.BPSLimitByOutgoingBandwidthLimit)
					.AddField("", val2.messagesInResendBuffer)
					.AddField("", val2.bytesInResendBuffer)
					.AddField("", val2.packetlossLastSecond)
					.AddField("", val2.packetlossTotal);
				for (int i = 0; i < 4; i++)
				{
					eventRecord.AddField("", (ulong)Unsafe.Add(ref val2.bytesInSendBuffer.FixedElementField, i));
				}
				for (int j = 0; j < 4; j++)
				{
					eventRecord.AddField("", (ulong)Unsafe.Add(ref val2.messageInSendBuffer.FixedElementField, j));
				}
				eventRecord.AddField("", val2.runningTotal.FixedElementField);
				eventRecord.AddField("", Unsafe.Add(ref val2.runningTotal.FixedElementField, 1));
				eventRecord.AddField("", Unsafe.Add(ref val2.runningTotal.FixedElementField, 2));
				eventRecord.AddField("", Unsafe.Add(ref val2.runningTotal.FixedElementField, 3));
				eventRecord.AddField("", Unsafe.Add(ref val2.runningTotal.FixedElementField, 4));
				eventRecord.AddField("", Unsafe.Add(ref val2.runningTotal.FixedElementField, 5));
				eventRecord.AddField("", Unsafe.Add(ref val2.runningTotal.FixedElementField, 6));
				uploader.Append(eventRecord);
			}
			currentIndex++;
		}
	}
}
