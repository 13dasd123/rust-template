using UnityEngine;

public static class AnimationGenerateUtils
{
	public static AnimationCurve ReduceKeyframes(AnimationCurve curve, float maxError)
	{
		//IL_0160: Unknown result type (might be due to invalid IL or missing references)
		//IL_0166: Expected O, but got Unknown
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0108: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		Keyframe[] array = curve.keys;
		int num = 1;
		while (array.Length > 2 && num < array.Length - 1)
		{
			Keyframe[] array2 = (Keyframe[])(object)new Keyframe[array.Length - 1];
			int num2 = 0;
			for (int i = 0; i < array.Length; i++)
			{
				if (num != i)
				{
					array2[num2] = new Keyframe(((Keyframe)(ref array[i])).time, ((Keyframe)(ref array[i])).value, ((Keyframe)(ref array[i])).inTangent, ((Keyframe)(ref array[i])).outTangent);
					num2++;
				}
			}
			AnimationCurve val = new AnimationCurve
			{
				keys = array2
			};
			float num3 = Mathf.Abs(val.Evaluate(((Keyframe)(ref array[num])).time) - ((Keyframe)(ref array[num])).value);
			float num4 = ((Keyframe)(ref array[num])).time + (((Keyframe)(ref array[num - 1])).time - ((Keyframe)(ref array[num])).time) * 0.5f;
			float num5 = ((Keyframe)(ref array[num])).time + (((Keyframe)(ref array[num + 1])).time - ((Keyframe)(ref array[num])).time) * 0.5f;
			float num6 = Mathf.Abs(val.Evaluate(num4) - curve.Evaluate(num4));
			float num7 = Mathf.Abs(val.Evaluate(num5) - curve.Evaluate(num5));
			if (num3 < maxError && num6 < maxError && num7 < maxError)
			{
				array = array2;
			}
			else
			{
				num++;
			}
		}
		return new AnimationCurve(array);
	}

	public static void LoopCurve(ref AnimationCurve curve, bool averageBoth = false, float? endTime = null)
	{
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_014a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0166: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_020c: Unknown result type (might be due to invalid IL or missing references)
		float num = 0f;
		if (curve.keys.Length != 0)
		{
			num = ((Keyframe)(ref curve.keys[0])).value;
		}
		if (!endTime.HasValue)
		{
			if (curve.keys.Length == 0)
			{
				curve.AddKey(new Keyframe(0f, num));
				curve.AddKey(new Keyframe(1f, num));
				return;
			}
			if (curve.keys.Length == 1)
			{
				curve.AddKey(new Keyframe(Mathf.Max(1f, ((Keyframe)(ref curve.keys[0])).time + 0.5f), num));
				return;
			}
			float num2 = num;
			if (averageBoth)
			{
				num2 = Mathf.Lerp(num, ((Keyframe)(ref curve.keys[curve.keys.Length - 1])).value, 0.5f);
			}
			curve.MoveKey(0, new Keyframe(((Keyframe)(ref curve.keys[0])).time, num2));
			curve.MoveKey(curve.keys.Length - 1, new Keyframe(((Keyframe)(ref curve.keys[curve.keys.Length - 1])).time, num2));
			return;
		}
		float value = endTime.Value;
		if (curve.keys.Length == 0)
		{
			curve.AddKey(new Keyframe(0f, num));
			curve.AddKey(new Keyframe(value, num));
			return;
		}
		if (curve.keys.Length == 1)
		{
			curve.AddKey(new Keyframe(value, num));
			return;
		}
		float num3 = num;
		if (averageBoth)
		{
			num3 = Mathf.Lerp(num, ((Keyframe)(ref curve.keys[curve.keys.Length - 1])).value, 0.5f);
		}
		Keyframe val = curve.keys[curve.keys.Length - 1];
		float num4 = ((Keyframe)(ref val)).time;
		if (num4 != value && num4 < value && value - num4 < value * 0.1f)
		{
			num4 = value;
		}
		curve.MoveKey(0, new Keyframe(((Keyframe)(ref curve.keys[0])).time, num3));
		curve.MoveKey(curve.keys.Length - 1, new Keyframe(num4, num3));
	}

	public static void DistrubuteCurveOnTime(ref AnimationCurve curve, float startTime, float endTime)
	{
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Expected O, but got Unknown
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
		float time = ((Keyframe)(ref curve.keys[0])).time;
		float time2 = ((Keyframe)(ref curve.keys[curve.keys.Length - 1])).time;
		Keyframe[] array = (Keyframe[])(object)new Keyframe[curve.keys.Length];
		curve.keys.CopyTo(array, 0);
		AnimationCurve val = new AnimationCurve(array);
		while (curve.keys.Length != 0)
		{
			curve.RemoveKey(curve.keys.Length - 1);
		}
		for (int i = 0; i < val.keys.Length; i++)
		{
			Keyframe val2 = val.keys[i];
			Keyframe val3 = val2;
			((Keyframe)(ref val3)).time = Mathf.Lerp(startTime, endTime, Mathf.InverseLerp(time, time2, ((Keyframe)(ref val2)).time));
			curve.AddKey(val3);
		}
	}

	public static Quaternion EnsureQuaternionContinuity(Quaternion latestRot, Quaternion targetRot, bool normalize = false)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_010f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0104: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		Quaternion val = default(Quaternion);
		((Quaternion)(ref val))..ctor(0f - targetRot.x, 0f - targetRot.y, 0f - targetRot.z, 0f - targetRot.w);
		Quaternion val2 = default(Quaternion);
		((Quaternion)(ref val2))..ctor(Mathf.LerpUnclamped(latestRot.x, targetRot.x, 0.5f), Mathf.LerpUnclamped(latestRot.y, targetRot.y, 0.5f), Mathf.LerpUnclamped(latestRot.z, targetRot.z, 0.5f), Mathf.LerpUnclamped(latestRot.w, targetRot.w, 0.5f));
		Quaternion val3 = default(Quaternion);
		((Quaternion)(ref val3))..ctor(Mathf.LerpUnclamped(latestRot.x, val.x, 0.5f), Mathf.LerpUnclamped(latestRot.y, val.y, 0.5f), Mathf.LerpUnclamped(latestRot.z, val.z, 0.5f), Mathf.LerpUnclamped(latestRot.w, val.w, 0.5f));
		float num = Quaternion.Angle(latestRot, val2);
		float num2 = Quaternion.Angle(latestRot, val3);
		if (normalize)
		{
			if (!(num2 < num))
			{
				return ((Quaternion)(ref targetRot)).normalized;
			}
			return ((Quaternion)(ref val)).normalized;
		}
		if (!(num2 < num))
		{
			return targetRot;
		}
		return val;
	}

	public static void UpdateHumanoidIKPreview(Animator mecanim, AnimationClip clip, float time, bool restoreAnimator = true)
	{
	}
}
