using UnityEngine;

public class ImpostorInstanceData
{
	public ImpostorBatch Batch;

	public int BatchIndex;

	private int hash;

	public Renderer Renderer { get; private set; }

	public Mesh Mesh { get; private set; }

	public Material Material { get; private set; }

	public ImpostorInstanceData(Renderer renderer, Mesh mesh, Material material)
	{
		Renderer = renderer;
		Mesh = mesh;
		Material = material;
		hash = GenerateHashCode();
		Update();
	}

	private int GenerateHashCode()
	{
		int num = 17;
		num = num * 31 + Material.GetHashCode();
		return num * 31 + Mesh.GetHashCode();
	}

	public override bool Equals(object obj)
	{
		ImpostorInstanceData impostorInstanceData = obj as ImpostorInstanceData;
		return impostorInstanceData.Material == Material && impostorInstanceData.Mesh == Mesh;
	}

	public override int GetHashCode()
	{
		return hash;
	}

	public Vector4 PositionAndScale()
	{
		Transform transform = Renderer.transform;
		Vector3 position = transform.position;
		Vector3 lossyScale = transform.lossyScale;
		float w = ((!Renderer.enabled) ? (0f - lossyScale.x) : lossyScale.x);
		return new Vector4(position.x, position.y, position.z, w);
	}

	public void Update()
	{
		if (Batch != null)
		{
			Batch.Positions[BatchIndex] = PositionAndScale();
		}
	}
}
