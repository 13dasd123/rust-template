using System;
using System.Collections.Generic;
using ConVar;
using Facepunch;
using ProtoBuf;
using UnityEngine;

public class BaseCorpse : BaseCombatEntity, Hopper.IHopperTarget
{
	public GameObjectRef prefabRagdoll;

	public BaseEntity parentEnt;

	[NonSerialized]
	public ResourceDispenser resourceDispenser;

	public const float CORPSE_SLEEP_THRESHOLD = 0.05f;

	protected Rigidbody rigidBody;

	public bool blockDamageIfNotGather;

	public const Flags FLAG_HOPPERANIMATING = Flags.Reserved1;

	[NonSerialized]
	public SpawnGroup spawnGroup;

	private const float RAGDOLL_PUSH_DIST = 0.5f;

	private const float RAGDOLL_PUSH_FORCE = 2.5f;

	public virtual bool CorpseIsRagdoll => false;

	public bool IsSleeping
	{
		get
		{
			if ((Object)(object)rigidBody != (Object)null)
			{
				return rigidBody.IsSleeping();
			}
			return false;
		}
	}

	public override TraitFlag Traits => base.Traits | TraitFlag.Food | TraitFlag.Meat;

	public BaseEntity ToEntity => this;

	public Rigidbody Rigidbody => rigidBody;

	public virtual int NumberOfItemsToTransfer
	{
		get
		{
			int num = 0;
			ResourceDispenser resourceDispenser = default(ResourceDispenser);
			if (((Component)this).TryGetComponent<ResourceDispenser>(ref resourceDispenser))
			{
				num += resourceDispenser.containedItems.Count;
			}
			return num;
		}
	}

	public float EndPositionToleranceMultiplier => 2f;

	public override void ResetState()
	{
		spawnGroup = null;
		base.ResetState();
	}

	public override void ServerInit()
	{
		base.ServerInit();
		rigidBody = SetupRigidBody();
		ResetRemovalTime();
		resourceDispenser = ((Component)this).GetComponent<ResourceDispenser>();
		SingletonComponent<NpcFoodManager>.Instance.Add(this);
	}

	public virtual void ServerInitCorpse(BaseEntity pr, Vector3 posOnDeah, Quaternion rotOnDeath, BasePlayer.PlayerFlags playerFlagsOnDeath, ModelState modelState)
	{
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		parentEnt = pr;
		((Component)this).transform.SetPositionAndRotation(parentEnt.CenterPoint(), ((Component)parentEnt).transform.rotation);
		SpawnPointInstance component = ((Component)this).GetComponent<SpawnPointInstance>();
		if ((Object)(object)component != (Object)null)
		{
			spawnGroup = component.parentSpawnPointUser as SpawnGroup;
		}
	}

	public virtual bool CanRemove()
	{
		return true;
	}

	public void RemoveCorpse()
	{
		if (!CanRemove())
		{
			ResetRemovalTime();
		}
		else
		{
			Kill();
		}
	}

	public override void DestroyShared()
	{
		base.DestroyShared();
		if (base.isServer)
		{
			SingletonComponent<NpcFoodManager>.Instance.Remove(this);
		}
	}

	public void ResetRemovalTime(float dur)
	{
		TimeWarning val = TimeWarning.New("ResetRemovalTime", 0);
		try
		{
			if (((FacepunchBehaviour)this).IsInvoking((Action)RemoveCorpse))
			{
				((FacepunchBehaviour)this).CancelInvoke((Action)RemoveCorpse);
			}
			((FacepunchBehaviour)this).Invoke((Action)RemoveCorpse, dur);
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public virtual float GetRemovalTime()
	{
		BaseGameMode activeGameMode = BaseGameMode.GetActiveGameMode(serverside: true);
		if ((Object)(object)activeGameMode != (Object)null)
		{
			return activeGameMode.CorpseRemovalTime(this);
		}
		return Server.corpsedespawn;
	}

	public void ResetRemovalTime()
	{
		ResetRemovalTime(GetRemovalTime());
	}

	public override void Save(SaveInfo info)
	{
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		base.Save(info);
		info.msg.corpse = Pool.Get<Corpse>();
		if (parentEnt.IsValid())
		{
			info.msg.corpse.parentID = parentEnt.net.ID;
		}
	}

	public void TakeChildren(BaseEntity takeChildrenFrom)
	{
		if (takeChildrenFrom.children == null)
		{
			return;
		}
		TimeWarning val = TimeWarning.New("Corpse.TakeChildren", 0);
		try
		{
			BaseEntity[] array = takeChildrenFrom.children.ToArray();
			for (int i = 0; i < array.Length; i++)
			{
				array[i].SwitchParent(this);
			}
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public override void ApplyInheritedVelocity(Vector3 velocity)
	{
	}

	private Rigidbody SetupRigidBody()
	{
		//IL_0176: Unknown result type (might be due to invalid IL or missing references)
		//IL_017b: Unknown result type (might be due to invalid IL or missing references)
		//IL_018e: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		if (!prefabRagdoll.isValid)
		{
			return ((Component)this).GetComponent<Rigidbody>();
		}
		if (base.isServer)
		{
			GameObject val = base.gameManager.FindPrefab(prefabRagdoll.resourcePath);
			if ((Object)(object)val == (Object)null)
			{
				return null;
			}
			Ragdoll component = val.GetComponent<Ragdoll>();
			if ((Object)(object)component == (Object)null)
			{
				return null;
			}
			if ((Object)(object)component.primaryBody == (Object)null)
			{
				Debug.LogError((object)("[BaseCorpse] ragdoll.primaryBody isn't set!" + ((Object)((Component)component).gameObject).name));
				return null;
			}
			if ((Object)(object)((Component)this).gameObject.GetComponent<Collider>() == (Object)null)
			{
				BoxCollider component2 = ((Component)component.primaryBody).GetComponent<BoxCollider>();
				if ((Object)(object)component2 == (Object)null)
				{
					Debug.LogError((object)"Ragdoll has unsupported primary collider (make it supported) ", (Object)(object)component);
					return null;
				}
				BoxCollider obj = ((Component)this).gameObject.AddComponent<BoxCollider>();
				obj.size = component2.size * 2f;
				obj.center = component2.center;
				((Collider)obj).sharedMaterial = ((Collider)component2).sharedMaterial;
			}
		}
		Rigidbody val2 = ((Component)this).GetComponent<Rigidbody>();
		if ((Object)(object)val2 == (Object)null)
		{
			val2 = ((Component)this).gameObject.AddComponent<Rigidbody>();
			val2.mass = 10f;
			val2.drag = 0.5f;
			val2.angularDrag = 0.5f;
		}
		val2.useGravity = true;
		val2.collisionDetectionMode = (CollisionDetectionMode)0;
		val2.sleepThreshold = Mathf.Max(0.05f, Physics.sleepThreshold);
		if (base.isServer)
		{
			Buoyancy component3 = ((Component)this).GetComponent<Buoyancy>();
			if ((Object)(object)component3 != (Object)null)
			{
				component3.rigidBody = val2;
			}
			Vector3 velocity = Vector3Ex.Range(-1f, 1f);
			velocity.y += 1f;
			val2.velocity = velocity;
			val2.collisionDetectionMode = (CollisionDetectionMode)3;
			val2.angularVelocity = Vector3Ex.Range(-10f, 10f);
		}
		return val2;
	}

	public override void Load(LoadInfo info)
	{
		base.Load(info);
		if (info.msg.corpse != null)
		{
			Load(info.msg.corpse);
		}
	}

	private void Load(Corpse corpse)
	{
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		if (base.isServer)
		{
			parentEnt = BaseNetworkable.serverEntities.Find(corpse.parentID) as BaseEntity;
		}
		_ = base.isClient;
	}

	public override void OnAttacked(HitInfo info)
	{
		if (!base.isServer)
		{
			return;
		}
		ResetRemovalTime();
		if (!blockDamageIfNotGather || !(info.Weapon is BaseMelee baseMelee) || baseMelee.GetGatherInfoFromIndex(ResourceDispenser.GatherType.Flesh).gatherDamage != 0f)
		{
			if (Object.op_Implicit((Object)(object)resourceDispenser))
			{
				resourceDispenser.DoGather(info, this);
			}
			if (!info.DidGather)
			{
				base.OnAttacked(info);
			}
			if (CorpseIsRagdoll)
			{
				PushRagdoll(info);
			}
		}
	}

	protected virtual void PushRagdoll(HitInfo info)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		List<Rigidbody> list = Pool.Get<List<Rigidbody>>();
		Vis.Components<Rigidbody>(info.HitPositionWorld, 0.5f, list, 512, (QueryTriggerInteraction)2);
		PushRigidbodies(list, info.HitPositionWorld, info.attackNormal);
		Pool.FreeUnmanaged<Rigidbody>(ref list);
	}

	protected void PushRigidbodies(List<Rigidbody> rbs, Vector3 hitPos, Vector3 hitNormal)
	{
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		foreach (Rigidbody rb in rbs)
		{
			float num = Vector3.Distance(hitPos, rb.position);
			float num2 = 1f - Mathf.InverseLerp(0f, 0.5f, num);
			if (!(num2 <= 0f))
			{
				if (num2 < 0.5f)
				{
					num2 = 0.5f;
				}
				rb.AddForceAtPosition(hitNormal * 2.5f * num2, hitPos, (ForceMode)1);
			}
		}
	}

	public override string Categorize()
	{
		return "corpse";
	}

	public override void Eat(BaseNpc baseNpc, float timeSpent)
	{
		ResetRemovalTime();
		Hurt(timeSpent * 5f);
		baseNpc.AddCalories(timeSpent * 2f);
	}

	public void PrepareForHopper()
	{
		SetFlag(Flags.Reserved1, b: true);
		Collider val = default(Collider);
		if (((Component)this).TryGetComponent<Collider>(ref val))
		{
			val.enabled = false;
		}
	}

	public void HopperCancelled()
	{
		SetFlag(Flags.Reserved1, b: false);
		Collider val = default(Collider);
		if (((Component)this).TryGetComponent<Collider>(ref val))
		{
			val.enabled = true;
		}
	}

	public virtual void TransferAllItemsToContainer(ItemContainer itemContainer, Vector3 fallbackWorldPos)
	{
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		ResourceDispenser resourceDispenser = default(ResourceDispenser);
		if (((Component)this).TryGetComponent<ResourceDispenser>(ref resourceDispenser))
		{
			foreach (ItemAmount containedItem in resourceDispenser.containedItems)
			{
				Item item = ItemManager.Create(containedItem.itemDef, (int)containedItem.amount, 0uL);
				resourceDispenser.OverrideOwnership(item, null);
				if (!item.MoveToContainer(itemContainer))
				{
					item.Drop(fallbackWorldPos, Vector3.zero, Quaternion.identity);
				}
			}
		}
		Kill();
	}

	public override bool ShouldInheritNetworkGroup()
	{
		return false;
	}
}
