using TAA;
using UnityEngine;

[ExecuteInEditMode]
[RequireComponent(typeof(Camera))]
[AddComponentMenu("Image Effects/Temporal Anti-aliasing")]
public class TemporalAntiAliasing : MonoBehaviour
{
	public TemporalFrustumJitter.Pattern jitterPattern = TemporalFrustumJitter.Pattern.Halton_2_3_X8;

	[Range(0f, 5f)]
	public float patternScale = 1f;

	[Range(4f, 128f)]
	public int haltonSequenceLength = 16;

	[Range(0f, 1f)]
	public float sharpeningAmount = 0.25f;

	[Range(0f, 2f)]
	public float sharpenFilterWidth = 1f;

	[Range(0.9f, 1f)]
	public float staticBlurAmount = 0.98f;

	[Range(0.6f, 0.9f)]
	public float motionBlurAmount = 0.8f;

	[Range(3000f, 10000f)]
	public float motionAmplificationAmount = 6000f;

	private Shader m_Shader;

	private Material m_Material;

	private Camera m_Camera;

	private Matrix4x4 m_PreviousViewProjectionMatrix;

	private RenderTexture m_History;

	private int m_SampleIndex;

	private TemporalFrustumJitter frustumJitter = new TemporalFrustumJitter();

	public Shader shader
	{
		get
		{
			if (m_Shader == null)
			{
				m_Shader = Shader.Find("Hidden/Temporal Anti-aliasing");
			}
			return m_Shader;
		}
	}

	public Material material
	{
		get
		{
			if (m_Material == null)
			{
				if (shader == null || !shader.isSupported)
				{
					return null;
				}
				m_Material = new Material(shader);
			}
			return m_Material;
		}
	}

	public Camera camera_
	{
		get
		{
			if (m_Camera == null)
			{
				m_Camera = GetComponent<Camera>();
			}
			return m_Camera;
		}
	}

	public int SampleCount => frustumJitter.ActiveCount;
}
