using System;
using Rust.Ai.Gen2;
using UnityEngine;

[Serializable]
public class State_Roam : FSMStateBase
{
	[SerializeField]
	private Vector2 distanceRange = new Vector2(10f, 20f);

	[SerializeField]
	private float homeRadius = 50f;

	private Vector3? homePosition;

	public override EFSMStateStatus OnStateEnter()
	{
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		Reset();
		if (!homePosition.HasValue)
		{
			homePosition = ((Component)Owner).transform.position;
		}
		float num = Random.Range(distanceRange.x, distanceRange.y);
		Vector3 val;
		if (!(Vector3.Distance(homePosition.Value, ((Component)Owner).transform.position) > homeRadius))
		{
			val = Random.insideUnitSphere;
		}
		else
		{
			Vector3 val2 = homePosition.Value - ((Component)Owner).transform.position;
			val = ((Vector3)(ref val2)).normalized;
		}
		Vector3 val3 = val;
		float ratio = Mathf.InverseLerp(0f, distanceRange.y, num);
		base.Agent.SetSpeed(ratio);
		if (!base.Agent.SetDestinationFromDirection(Vector3Ex.XZ3D(val3), num, restrictTerrain: true))
		{
			return EFSMStateStatus.Failure;
		}
		return base.OnStateEnter();
	}

	public override EFSMStateStatus OnStateUpdate(float deltaTime)
	{
		if (!base.Agent.IsFollowingPath)
		{
			return EFSMStateStatus.Success;
		}
		return base.OnStateUpdate(deltaTime);
	}

	public override void OnStateExit()
	{
		base.Agent.ResetPath();
		base.OnStateExit();
	}

	private void Reset()
	{
		base.Senses.ClearTarget();
		base.Blackboard.Clear();
		if (Owner is BaseCombatEntity { healthFraction: <1f, SecondsSinceAttacked: >120f } baseCombatEntity)
		{
			baseCombatEntity.SetHealth(Owner.MaxHealth());
		}
	}
}
