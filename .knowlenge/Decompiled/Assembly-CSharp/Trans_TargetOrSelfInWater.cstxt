using System;
using Rust.Ai.Gen2;

[Serializable]
[SoftRequireComponent(typeof(SenseComponent))]
internal class Trans_TargetOrSelfInWater : FSMTransitionBase
{
	protected override bool EvaluateInternal()
	{
		using (TimeWarning.New("Trans_TargetOrSelfInWater"))
		{
			BaseEntity target = base.Senses.GetTarget();
			if (target != null && target.ToNonNpcPlayer(out var _) && !NavHelpers.IsAcceptableWaterDepth(Owner, target.transform.position, Owner.bounds.extents.y))
			{
				return true;
			}
			return !NavHelpers.IsAcceptableWaterDepth(Owner, Owner.transform.position, Owner.bounds.extents.y);
		}
	}
}
