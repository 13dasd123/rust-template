using System;
using Rust.Ai.Gen2;
using UnityEngine;

[Serializable]
internal class Trans_TargetOrSelfInWater : FSMTransitionBase
{
	protected override bool EvaluateInternal()
	{
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		TimeWarning val = TimeWarning.New("Trans_TargetOrSelfInWater", 0);
		try
		{
			if (base.Senses.FindTarget(out var target) && target.ToNonNpcPlayer(out var _) && !LimitedTurnNavAgent.IsAcceptableWaterDepth(Owner, ((Component)target).transform.position, ((Bounds)(ref Owner.bounds)).extents.y))
			{
				return true;
			}
			return !LimitedTurnNavAgent.IsAcceptableWaterDepth(Owner, ((Component)Owner).transform.position, ((Bounds)(ref Owner.bounds)).extents.y);
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}
}
