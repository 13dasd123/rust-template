using System.Collections.Generic;
using Facepunch;

public abstract class EntityLink : Pool.IPooled
{
	public enum Gender
	{
		Male = 1,
		Female
	}

	public BaseEntity owner;

	public Socket_Base socket;

	public Gender gender;

	public List<EntityLink> connections = new List<EntityLink>(8);

	public int capacity = int.MaxValue;

	public string name => socket.socketName;

	public void Setup(BaseEntity owner, Socket_Base socket)
	{
		this.owner = owner;
		this.socket = socket;
		if (socket.male)
		{
			gender |= Gender.Male;
		}
		if (socket.female)
		{
			gender |= Gender.Female;
		}
		if (socket.monogamous)
		{
			capacity = 1;
		}
		Initialize();
	}

	public void EnterPool()
	{
		owner = null;
		socket = null;
		gender = (Gender)0;
		capacity = int.MaxValue;
	}

	public void LeavePool()
	{
	}

	public bool Contains(EntityLink entity)
	{
		return connections.Contains(entity);
	}

	public void Add(EntityLink entity)
	{
		connections.Add(entity);
	}

	public void Remove(EntityLink entity)
	{
		connections.Remove(entity);
	}

	public void Clear()
	{
		for (int i = 0; i < connections.Count; i++)
		{
			connections[i].Remove(this);
		}
		connections.Clear();
	}

	public bool IsEmpty()
	{
		return connections.Count == 0;
	}

	public bool IsOccupied()
	{
		return connections.Count >= capacity;
	}

	public bool IsMale()
	{
		return (gender & Gender.Male) != 0;
	}

	public bool IsFemale()
	{
		return (gender & Gender.Female) != 0;
	}

	public abstract void Initialize();

	public abstract bool CanConnect(EntityLink link);
}
