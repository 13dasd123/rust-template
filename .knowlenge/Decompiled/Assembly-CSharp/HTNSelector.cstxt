using System.Collections.Generic;
using Apex.AI;
using Rust.Ai.HTN;

public class HTNSelector : Selector
{
	private List<TaskQualifier> _tasks = new List<TaskQualifier>(2);

	private List<PrimitiveTaskSelector> _plan = new List<PrimitiveTaskSelector>(2);

	public override IQualifier Select(IAIContext context, IList<IQualifier> qualifiers, IDefaultQualifier defaultQualifier)
	{
		if (!_UpdateTaskQualifiers())
		{
			return defaultQualifier;
		}
		foreach (TaskQualifier task in _tasks)
		{
			task.Reset();
		}
		_plan.Clear();
		foreach (TaskQualifier task2 in _tasks)
		{
			float num = task2.Decompose(context, ref _plan);
			if (num > 0f)
			{
				break;
			}
		}
		if (_plan.Count > 0 && context is IHTNContext iHTNContext)
		{
			iHTNContext.HtnPlan.Clear();
			foreach (PrimitiveTaskSelector item in _plan)
			{
				iHTNContext.HtnPlan.Add(item);
			}
			iHTNContext.PlanState = PlanStateType.Running;
		}
		return defaultQualifier;
	}

	private bool _UpdateTaskQualifiers()
	{
		if (base.qualifiers.Count == 0)
		{
			return false;
		}
		if (_tasks.Count == 0)
		{
			foreach (IQualifier qualifier in base.qualifiers)
			{
				TaskQualifier item = qualifier as TaskQualifier;
				_tasks.Add(item);
			}
		}
		return true;
	}
}
