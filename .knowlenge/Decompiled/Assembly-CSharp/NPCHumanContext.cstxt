using System.Collections.Generic;
using Rust.Ai;

public class NPCHumanContext : BaseNPCContext
{
	private CoverPoint reservedCoverPoint;

	private CoverPoint.CoverType activeCoverType;

	public NPCPlayerApex Human { get; private set; }

	public BaseEntity LastAttacker { get; set; }

	public CoverPointVolume CurrentCoverVolume { get; set; }

	public List<CoverPoint> sampledCoverPoints { get; private set; }

	public List<CoverPoint.CoverType> sampledCoverPointTypes { get; private set; }

	public CoverPoint ReservedCoverPoint
	{
		get
		{
			return reservedCoverPoint;
		}
		set
		{
			if (value == reservedCoverPoint && value == null)
			{
				Human.modelState.ducked = false;
			}
			reservedCoverPoint = value;
		}
	}

	public CoverPoint.CoverType ActiveCoverType
	{
		get
		{
			return activeCoverType;
		}
		set
		{
			switch (value)
			{
			case CoverPoint.CoverType.Full:
				Human.modelState.ducked = false;
				break;
			case CoverPoint.CoverType.Partial:
				Human.modelState.ducked = true;
				break;
			}
			activeCoverType = value;
		}
	}

	public NPCHumanContext(NPCPlayerApex human)
		: base(human)
	{
		Human = human;
		sampledCoverPoints = new List<CoverPoint>();
		sampledCoverPointTypes = new List<CoverPoint.CoverType>();
	}

	~NPCHumanContext()
	{
		if (ReservedCoverPoint != null)
		{
			ReservedCoverPoint.ReservedFor = null;
		}
	}
}
