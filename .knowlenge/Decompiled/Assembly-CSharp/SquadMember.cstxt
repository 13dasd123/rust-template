using System;
using Rust;
using Rust.Ai;
using UnityEngine;

public class SquadMember : FacepunchBehaviour
{
	private float NextSpeakTime;

	public SquadManager Manager { get; set; }

	public Squad Squad { get; set; }

	public BaseEntity Entity { get; set; }

	private void OnDisable()
	{
		if (!Rust.Application.isQuitting && Manager != null)
		{
			Manager.Remove(this);
		}
	}

	public void SetupCallbacks(NPCPlayerApex agent)
	{
		agent.AiContext.SquadMember = this;
		agent.OnFleeExplosive = (NPCPlayerApex.ActionCallback)Delegate.Combine(agent.OnFleeExplosive, new NPCPlayerApex.ActionCallback(OnFleeExplosive));
		agent.OnTakeCover = (NPCPlayerApex.ActionCallback)Delegate.Combine(agent.OnTakeCover, new NPCPlayerApex.ActionCallback(OnTakeCover));
		agent.OnAggro = (NPCPlayerApex.ActionCallback)Delegate.Combine(agent.OnAggro, new NPCPlayerApex.ActionCallback(OnAggro));
		agent.OnChatter = (NPCPlayerApex.ActionCallback)Delegate.Combine(agent.OnChatter, new NPCPlayerApex.ActionCallback(OnChatter));
		agent.OnDeath = (NPCPlayerApex.ActionCallback)Delegate.Combine(agent.OnDeath, new NPCPlayerApex.ActionCallback(OnDeath));
		agent.OnReload = (NPCPlayerApex.ActionCallback)Delegate.Combine(agent.OnReload, new NPCPlayerApex.ActionCallback(OnReload));
	}

	private void OnFleeExplosive()
	{
		if (Manager != null && !(NextSpeakTime > Time.realtimeSinceStartup))
		{
			NextSpeakTime = Time.realtimeSinceStartup + SquadManager.squad_min_delay_individual_speak;
			Manager.OnActionCallback(SquadManager.ActionCallbackEnum.FleeExplosion, Squad, this);
		}
	}

	private void OnTakeCover()
	{
		if (Manager != null && !(NextSpeakTime > Time.realtimeSinceStartup))
		{
			NextSpeakTime = Time.realtimeSinceStartup + SquadManager.squad_min_delay_individual_speak;
			Manager.OnActionCallback(SquadManager.ActionCallbackEnum.TakeCover, Squad, this);
		}
	}

	private void OnAggro()
	{
		if (Squad != null)
		{
			Squad.OnAggro(this);
		}
		if (Manager != null && !(NextSpeakTime > Time.realtimeSinceStartup))
		{
			NextSpeakTime = Time.realtimeSinceStartup + SquadManager.squad_min_delay_individual_speak;
			Manager.OnActionCallback(SquadManager.ActionCallbackEnum.Aggro, Squad, this);
		}
	}

	private void OnChatter()
	{
		if (Manager != null && !(NextSpeakTime > Time.realtimeSinceStartup))
		{
			NextSpeakTime = Time.realtimeSinceStartup + SquadManager.squad_min_delay_individual_speak;
			Manager.OnActionCallback(SquadManager.ActionCallbackEnum.Chatter, Squad, this);
		}
	}

	private void OnDeath()
	{
		if (Manager != null)
		{
			NextSpeakTime = Time.realtimeSinceStartup + SquadManager.squad_min_delay_individual_speak;
			Manager.OnActionCallback(SquadManager.ActionCallbackEnum.Death, Squad, this);
		}
	}

	private void OnReload()
	{
		if (Manager != null && !(NextSpeakTime > Time.realtimeSinceStartup))
		{
			NextSpeakTime = Time.realtimeSinceStartup + SquadManager.squad_min_delay_individual_speak;
			Manager.OnActionCallback(SquadManager.ActionCallbackEnum.Reload, Squad, this);
		}
	}
}
