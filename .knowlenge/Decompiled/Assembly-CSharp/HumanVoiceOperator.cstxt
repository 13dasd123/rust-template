using Apex.Serialization;
using Rust.Ai;

public class HumanVoiceOperator : BaseAction
{
	[ApexSerialization]
	public SquadManager.ActionCallbackEnum Voice;

	public override void DoExecute(BaseContext ctx)
	{
		if (!(ctx is NPCHumanContext nPCHumanContext))
		{
			return;
		}
		switch (Voice)
		{
		case SquadManager.ActionCallbackEnum.Aggro:
			if (nPCHumanContext.Human.OnAggro != null)
			{
				nPCHumanContext.Human.OnAggro();
			}
			break;
		case SquadManager.ActionCallbackEnum.Chatter:
			if (nPCHumanContext.Human.OnChatter != null)
			{
				nPCHumanContext.Human.OnChatter();
			}
			break;
		case SquadManager.ActionCallbackEnum.Death:
			if (nPCHumanContext.Human.OnDeath != null)
			{
				nPCHumanContext.Human.OnDeath();
			}
			break;
		case SquadManager.ActionCallbackEnum.FleeExplosion:
			if (nPCHumanContext.Human.OnFleeExplosive != null)
			{
				nPCHumanContext.Human.OnFleeExplosive();
			}
			break;
		case SquadManager.ActionCallbackEnum.Reload:
			if (nPCHumanContext.Human.OnReload != null)
			{
				nPCHumanContext.Human.OnReload();
			}
			break;
		case SquadManager.ActionCallbackEnum.TakeCover:
			if (nPCHumanContext.Human.OnTakeCover != null)
			{
				nPCHumanContext.Human.OnTakeCover();
			}
			break;
		case SquadManager.ActionCallbackEnum.RespondDeath:
		case SquadManager.ActionCallbackEnum.RespondOk:
			break;
		}
	}
}
