#define UNITY_ASSERTIONS
using System;
using System.Collections.Generic;
using System.Linq;
using ConVar;
using Facepunch;
using Network;
using Oxide.Core;
using ProtoBuf;
using UnityEngine;
using UnityEngine.Assertions;

public class BuildingPrivlidge : DecayEntity
{
	public BuildPrivilegeTrigger privilegeTrigger;

	public List<PlayerNameID> authorizedPlayers = new List<PlayerNameID>();

	public override bool OnRpcMessage(BasePlayer player, uint rpc, Message msg)
	{
		using (TimeWarning.New("BuildingPrivlidge.OnRpcMessage"))
		{
			if (rpc == 2017592092 && player != null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log(string.Concat("SV_RPCMessage: ", player, " - AddSelfAuthorize "));
				}
				using (TimeWarning.New("AddSelfAuthorize"))
				{
					using (TimeWarning.New("Conditions"))
					{
						if (!RPC_Server.IsVisible.Test("AddSelfAuthorize", this, player, 3f))
						{
							return true;
						}
					}
					try
					{
						using (TimeWarning.New("Call"))
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage rpc2 = rPCMessage;
							AddSelfAuthorize(rpc2);
						}
					}
					catch (Exception exception)
					{
						player.Kick("RPC Error in AddSelfAuthorize");
						Debug.LogException(exception);
					}
				}
				return true;
			}
			if (rpc == 3024779371u && player != null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log(string.Concat("SV_RPCMessage: ", player, " - ClearList "));
				}
				using (TimeWarning.New("ClearList"))
				{
					using (TimeWarning.New("Conditions"))
					{
						if (!RPC_Server.IsVisible.Test("ClearList", this, player, 3f))
						{
							return true;
						}
					}
					try
					{
						using (TimeWarning.New("Call"))
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage rpc3 = rPCMessage;
							ClearList(rpc3);
						}
					}
					catch (Exception exception2)
					{
						player.Kick("RPC Error in ClearList");
						Debug.LogException(exception2);
					}
				}
				return true;
			}
			if (rpc == 2101914649 && player != null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log(string.Concat("SV_RPCMessage: ", player, " - RemoveSelfAuthorize "));
				}
				using (TimeWarning.New("RemoveSelfAuthorize"))
				{
					using (TimeWarning.New("Conditions"))
					{
						if (!RPC_Server.IsVisible.Test("RemoveSelfAuthorize", this, player, 3f))
						{
							return true;
						}
					}
					try
					{
						using (TimeWarning.New("Call"))
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage rpc4 = rPCMessage;
							RemoveSelfAuthorize(rpc4);
						}
					}
					catch (Exception exception3)
					{
						player.Kick("RPC Error in RemoveSelfAuthorize");
						Debug.LogException(exception3);
					}
				}
				return true;
			}
		}
		return base.OnRpcMessage(player, rpc, msg);
	}

	public override void ResetState()
	{
		base.ResetState();
		authorizedPlayers.Clear();
	}

	public static BuildingPrivlidge Get(Vector3 position, Quaternion rotation, Bounds bounds)
	{
		BuildingPrivlidge buildingPrivlidge = null;
		OBB obb = new OBB(position, rotation, bounds);
		List<Collider> obj = Facepunch.Pool.GetList<Collider>();
		GamePhysics.OverlapOBB(obb, obj, 262144, QueryTriggerInteraction.Collide);
		for (int i = 0; i < obj.Count; i++)
		{
			BuildingPrivlidge buildingPrivlidge2 = GameObjectEx.ToBaseEntity(obj[i].gameObject) as BuildingPrivlidge;
			if (!(buildingPrivlidge2 == null) && buildingPrivlidge2.Dominates(buildingPrivlidge))
			{
				buildingPrivlidge = buildingPrivlidge2;
			}
		}
		Facepunch.Pool.FreeList(ref obj);
		return buildingPrivlidge;
	}

	public static bool IsAuthed(BasePlayer player, Vector3 position, Quaternion rotation, Bounds bounds)
	{
		BuildingPrivlidge buildingPrivlidge = Get(position, rotation, bounds);
		return buildingPrivlidge != null && buildingPrivlidge.IsAuthed(player);
	}

	public static bool IsBlocked(BasePlayer player, Vector3 position, Quaternion rotation, Bounds bounds)
	{
		BuildingPrivlidge buildingPrivlidge = Get(position, rotation, bounds);
		return buildingPrivlidge != null && !buildingPrivlidge.IsAuthed(player);
	}

	public bool IsAuthed(BasePlayer player)
	{
		return authorizedPlayers.Any((PlayerNameID x) => x.userid == player.userID);
	}

	public bool AnyAuthed()
	{
		return authorizedPlayers.Count > 0;
	}

	public bool CheckEntity(BaseEntity ent)
	{
		return !privilegeTrigger || privilegeTrigger.CheckEntity(ent);
	}

	public bool Dominates(BuildingPrivlidge other)
	{
		if (other == null)
		{
			return true;
		}
		uint num = ((net != null) ? net.ID : 0u);
		uint num2 = ((other.net != null) ? other.net.ID : 0u);
		return num < num2;
	}

	public override void Save(SaveInfo info)
	{
		base.Save(info);
		info.msg.buildingPrivilege = Facepunch.Pool.Get<BuildingPrivilege>();
		info.msg.buildingPrivilege.users = authorizedPlayers;
	}

	public override void PostSave(SaveInfo info)
	{
		info.msg.buildingPrivilege.users = null;
	}

	public override void Load(LoadInfo info)
	{
		base.Load(info);
		authorizedPlayers.Clear();
		if (info.msg.buildingPrivilege != null && info.msg.buildingPrivilege.users != null)
		{
			authorizedPlayers = info.msg.buildingPrivilege.users;
			info.msg.buildingPrivilege.users = null;
		}
		if (base.isServer)
		{
			UpdateAllPlayers();
		}
	}

	public void PlayerEnterInfluence(BasePlayer ply)
	{
		ply.SetInsideBuildingPrivilege(this, inside: true);
	}

	public void PlayerLeaveInfluence(BasePlayer ply)
	{
		ply.SetInsideBuildingPrivilege(this, inside: false);
	}

	private bool CanAdministrate(BasePlayer player)
	{
		BaseLock baseLock = GetSlot(Slot.Lock) as BaseLock;
		if (baseLock == null)
		{
			return true;
		}
		return baseLock.OnTryToOpen(player);
	}

	[RPC_Server.IsVisible(3f)]
	[RPC_Server]
	private void AddSelfAuthorize(RPCMessage rpc)
	{
		RPCMessage rpc2 = rpc;
		if (rpc2.player.CanInteract() && CanAdministrate(rpc2.player) && Interface.CallHook("OnCupboardAuthorize", this, rpc.player) == null)
		{
			authorizedPlayers.RemoveAll((PlayerNameID x) => x.userid == rpc2.player.userID);
			PlayerNameID playerNameID = new PlayerNameID();
			playerNameID.userid = rpc2.player.userID;
			playerNameID.username = rpc2.player.displayName;
			authorizedPlayers.Add(playerNameID);
			UpdateAllPlayers();
			SendNetworkUpdate();
		}
	}

	[RPC_Server.IsVisible(3f)]
	[RPC_Server]
	private void RemoveSelfAuthorize(RPCMessage rpc)
	{
		RPCMessage rpc2 = rpc;
		if (rpc2.player.CanInteract() && CanAdministrate(rpc2.player) && Interface.CallHook("OnCupboardDeauthorize", this, rpc.player) == null)
		{
			authorizedPlayers.RemoveAll((PlayerNameID x) => x.userid == rpc2.player.userID);
			UpdateAllPlayers();
			SendNetworkUpdate();
		}
	}

	[RPC_Server]
	[RPC_Server.IsVisible(3f)]
	private void ClearList(RPCMessage rpc)
	{
		if (rpc.player.CanInteract() && Interface.CallHook("OnCupboardClearList", this, rpc.player) == null && CanAdministrate(rpc.player))
		{
			authorizedPlayers.Clear();
			UpdateAllPlayers();
			SendNetworkUpdate();
		}
	}

	private void UpdateAllPlayers()
	{
		TriggerBase[] componentsInChildren = GetComponentsInChildren<TriggerBase>();
		foreach (TriggerBase triggerBase in componentsInChildren)
		{
			if (triggerBase.entityContents == null)
			{
				continue;
			}
			foreach (BaseEntity entityContent in triggerBase.entityContents)
			{
				if (!(entityContent.ToPlayer() == null))
				{
					entityContent.ToPlayer().SetInsideBuildingPrivilege(this, inside: true);
				}
			}
		}
	}

	public override bool HasSlot(Slot slot)
	{
		if (slot == Slot.Lock)
		{
			return true;
		}
		return base.HasSlot(slot);
	}

	public override bool SupportsPooling()
	{
		return true;
	}
}
