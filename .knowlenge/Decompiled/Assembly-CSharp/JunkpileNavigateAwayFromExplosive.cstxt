using Apex.Serialization;
using UnityEngine;
using UnityEngine.AI;

public class JunkpileNavigateAwayFromExplosive : BaseNavigateTo
{
	[ApexSerialization]
	private bool DisableIsAvoidingExplosiveOnComplete = true;

	public static Vector3 GetDestination(ScientistJunkpileContext context)
	{
		BaseEntity baseEntity = null;
		Vector3 vector = Vector3.zero;
		float num = float.MaxValue;
		for (int i = 0; i < context.Memory.KnownTimedExplosives.Count; i++)
		{
			BaseNpcMemory.EntityOfInterestInfo entityOfInterestInfo = context.Memory.KnownTimedExplosives[i];
			if (entityOfInterestInfo.Entity != null)
			{
				Vector3 vector2 = context.BodyPosition - entityOfInterestInfo.Entity.transform.position;
				float sqrMagnitude = vector2.sqrMagnitude;
				if (sqrMagnitude < num)
				{
					vector = vector2;
					num = sqrMagnitude;
					baseEntity = entityOfInterestInfo.Entity;
				}
			}
		}
		if (baseEntity != null)
		{
			vector.Normalize();
			if (NavMesh.FindClosestEdge(context.BodyPosition + vector * 10f, out var hit, context.Domain.NavAgent.areaMask))
			{
				context.Memory.LastClosestEdgeNormal = hit.normal;
				return hit.position;
			}
		}
		return context.Body.transform.position;
	}

	protected override Vector3 _GetDestination(ScientistJunkpileContext context)
	{
		return GetDestination(context);
	}

	protected override void OnPreStart(ScientistJunkpileContext context)
	{
		context.Domain.NavAgent.stoppingDistance = 0.5f;
	}

	protected override void OnStart(ScientistJunkpileContext context)
	{
		context.SetFact(Facts.IsAvoidingExplosive, value: true);
	}

	protected override void OnPathFailed(ScientistJunkpileContext context)
	{
		context.SetFact(Facts.IsAvoidingExplosive, value: false);
		context.Domain.NavAgent.stoppingDistance = 1f;
	}

	protected override void OnPathComplete(ScientistJunkpileContext context)
	{
		if (DisableIsAvoidingExplosiveOnComplete)
		{
			context.SetFact(Facts.IsAvoidingExplosive, value: false);
		}
		context.Domain.NavAgent.stoppingDistance = 1f;
	}
}
