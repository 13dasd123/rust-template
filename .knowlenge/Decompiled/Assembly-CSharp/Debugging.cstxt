using System.Globalization;
using Facepunch.Unity;
using Rust;
using UnityEngine;

[Factory("debug")]
public class Debugging : ConsoleSystem
{
	[ClientVar]
	[ServerVar]
	public static bool checktriggers;

	[ServerVar(Help = "Do not damage any items")]
	public static bool disablecondition;

	[ServerVar]
	[ClientVar]
	public static void renderinfo(Arg arg)
	{
		RenderInfo.GenerateReport();
	}

	[ServerVar(Help = "Takes you in and out of your current network group, causing you to delete and then download all entities in your PVS again")]
	public static void flushgroup(Arg arg)
	{
		BasePlayer basePlayer = ArgEx.Player(arg);
		if (!(basePlayer == null))
		{
			basePlayer.net.SwitchGroup(BaseNetworkable.LimboNetworkGroup);
			basePlayer.UpdateNetworkGroup();
		}
	}

	[ServerVar(Help = "Break the current held object")]
	public static void breakheld(Arg arg)
	{
		Item activeItem = ArgEx.Player(arg).GetActiveItem();
		activeItem?.LoseCondition(activeItem.condition * 2f);
	}

	[ServerVar(Help = "Break all the items in your inventory whose name match the passed string")]
	public static void breakitem(Arg arg)
	{
		string @string = arg.GetString(0, string.Empty);
		foreach (Item item in ArgEx.Player(arg).inventory.containerMain.itemList)
		{
			if (StringEx.Contains(item.info.shortname, @string, CompareOptions.IgnoreCase) && item.hasCondition)
			{
				item.LoseCondition(item.condition * 2f);
			}
		}
	}

	[ServerVar]
	public static void hurt(Arg arg)
	{
		BasePlayer basePlayer = ArgEx.Player(arg);
		HitInfo hitInfo = new HitInfo(basePlayer, basePlayer, DamageType.Bullet, arg.GetInt(0, 1));
		string @string = arg.GetString(1, string.Empty);
		if (!string.IsNullOrEmpty(@string))
		{
			hitInfo.HitBone = StringPool.Get(@string);
		}
		basePlayer.OnAttacked(hitInfo);
	}
}
