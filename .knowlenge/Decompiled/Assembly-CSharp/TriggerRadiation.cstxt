using UnityEngine;
using UnityEngine.Serialization;

public class TriggerRadiation : TriggerBase
{
	public Radiation.Tier radiationTier = Radiation.Tier.LOW;

	public bool BypassArmor;

	public float RadiationAmountOverride;

	public float falloff = 0.1f;

	[FormerlySerializedAs("UseColliderRadius")]
	public bool DontScaleRadiationSize;

	public bool UseLOSCheck;

	public bool ApplyLocalHeightCheck;

	public float MinLocalHeight;

	private SphereCollider sphereCollider;

	private BoxCollider boxCollider;

	private float GetRadiationSize()
	{
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
		if (!Object.op_Implicit((Object)(object)sphereCollider))
		{
			sphereCollider = ((Component)this).GetComponent<SphereCollider>();
		}
		if ((Object)(object)sphereCollider != (Object)null)
		{
			if (!DontScaleRadiationSize)
			{
				return sphereCollider.radius * Vector3Ex.Max(((Component)this).transform.localScale);
			}
			return sphereCollider.radius;
		}
		if (!Object.op_Implicit((Object)(object)boxCollider))
		{
			boxCollider = ((Component)this).GetComponent<BoxCollider>();
		}
		if ((Object)(object)boxCollider != (Object)null)
		{
			Vector3 size = boxCollider.size;
			if (!DontScaleRadiationSize)
			{
				return Mathf.Max(new float[3] { size.x, size.y, size.z }) * 0.5f * Vector3Ex.Max(((Component)this).transform.localScale);
			}
			return Mathf.Max(new float[3] { size.x, size.y, size.z }) * 0.5f;
		}
		return 0f;
	}

	private float GetTriggerRadiation()
	{
		if (RadiationAmountOverride > 0f)
		{
			return RadiationAmountOverride;
		}
		return Radiation.GetRadiation(radiationTier);
	}

	public float GetRadiation(Vector3 position, float radProtection)
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		if (ApplyLocalHeightCheck && ((Component)this).transform.InverseTransformPoint(position).y < MinLocalHeight)
		{
			return 0f;
		}
		if (UseLOSCheck && !GamePhysics.LineOfSight(((Component)this).gameObject.transform.position, position, 2097152))
		{
			return 0f;
		}
		float radiationSize = GetRadiationSize();
		float triggerRadiation = GetTriggerRadiation();
		float num = Vector3.Distance(((Component)this).gameObject.transform.position, position);
		float num2 = Mathf.InverseLerp(radiationSize, radiationSize * (1f - falloff), num);
		float num3 = triggerRadiation;
		if (!BypassArmor)
		{
			num3 = Radiation.GetRadiationAfterProtection(triggerRadiation, radProtection);
		}
		return num3 * num2;
	}

	public override GameObject InterestedInObject(GameObject obj)
	{
		obj = base.InterestedInObject(obj);
		if ((Object)(object)obj == (Object)null)
		{
			return null;
		}
		BaseEntity baseEntity = obj.ToBaseEntity();
		if ((Object)(object)baseEntity == (Object)null)
		{
			return null;
		}
		if (baseEntity.isClient)
		{
			return null;
		}
		if (!(baseEntity is BaseCombatEntity))
		{
			return null;
		}
		return ((Component)baseEntity).gameObject;
	}

	public void OnDrawGizmosSelected()
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		float radiationSize = GetRadiationSize();
		Gizmos.color = Color.green;
		if (Object.op_Implicit((Object)(object)sphereCollider))
		{
			Gizmos.DrawWireSphere(((Component)this).transform.position, radiationSize);
		}
		else if (Object.op_Implicit((Object)(object)boxCollider))
		{
			Vector3 val = default(Vector3);
			((Vector3)(ref val))..ctor(radiationSize, radiationSize, radiationSize);
			val *= 2f;
			Gizmos.DrawWireCube(((Component)this).transform.position, val);
		}
		Gizmos.color = Color.red;
		if (Object.op_Implicit((Object)(object)sphereCollider))
		{
			Gizmos.DrawWireSphere(((Component)this).transform.position, radiationSize * (1f - falloff));
		}
		else if (Object.op_Implicit((Object)(object)boxCollider))
		{
			Vector3 val2 = default(Vector3);
			((Vector3)(ref val2))..ctor(radiationSize, radiationSize, radiationSize);
			val2 *= 2f;
			Gizmos.DrawWireCube(((Component)this).transform.position, val2 * (1f - falloff));
		}
	}
}
