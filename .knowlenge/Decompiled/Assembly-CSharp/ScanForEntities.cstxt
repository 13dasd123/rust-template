using Apex.AI;
using Apex.Serialization;
using ConVar;
using Rust.Ai;
using UnityEngine;

[FriendlyName("Scan for Entities", "Update Context.Entities")]
public sealed class ScanForEntities : BaseAction
{
	public BaseEntity[] Results = new BaseEntity[64];

	[ApexSerialization]
	public int forgetTime = 10;

	public override void DoExecute(BaseContext c)
	{
		if (BaseEntity.Query.Server == null)
		{
			return;
		}
		int inSphere = BaseEntity.Query.Server.GetInSphere(c.Position, c.AIAgent.GetStats.VisionRange, Results, AiCaresAbout);
		if (inSphere == 0)
		{
			return;
		}
		for (int i = 0; i < inSphere; i++)
		{
			BaseEntity baseEntity = Results[i];
			if (!(baseEntity == null) && !(baseEntity == c.Entity) && baseEntity.isServer && WithinVisionCone(c.AIAgent, baseEntity) && (!(baseEntity is BasePlayer) || baseEntity is NPCPlayer || (!AI.ignoreplayers && baseEntity.IsVisible(c.Entity.CenterPoint()))))
			{
				c.Memory.Update(baseEntity);
			}
		}
		c.Memory.Forget(forgetTime);
	}

	private static bool WithinVisionCone(IAIAgent agent, BaseEntity other)
	{
		if (agent.GetStats.VisionCone == -1f)
		{
			return true;
		}
		BaseCombatEntity entity = agent.Entity;
		Vector3 forward = entity.transform.forward;
		BasePlayer basePlayer = entity as BasePlayer;
		if (basePlayer != null)
		{
			forward = basePlayer.eyes.BodyForward();
		}
		Vector3 normalized = (other.transform.position - entity.transform.position).normalized;
		float num = Vector3.Dot(entity.transform.forward, normalized);
		if (num < agent.GetStats.VisionCone)
		{
			return false;
		}
		return true;
	}

	private static bool AiCaresAbout(BaseEntity ent)
	{
		if (ent is BasePlayer)
		{
			return true;
		}
		if (ent is BaseNpc)
		{
			return true;
		}
		if (ent is WorldItem)
		{
			return true;
		}
		if (ent is BaseCorpse)
		{
			return true;
		}
		return false;
	}
}
