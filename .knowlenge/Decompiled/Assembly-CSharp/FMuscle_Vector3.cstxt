using System;
using System.Collections;
using FIMSpace.FTools;
using UnityEngine;

[Serializable]
public class FMuscle_Vector3
{
	[HideInInspector]
	public Vector3 DesiredPosition;

	private FMuscle_Float x;

	private FMuscle_Float y;

	private FMuscle_Float z;

	[FPD_Suffix(0f, 10000f, FPD_SuffixAttribute.SuffixMode.From0to100, "%", true, 0)]
	public float Acceleration = 10000f;

	[FPD_Suffix(0f, 10000f, FPD_SuffixAttribute.SuffixMode.From0to100, "%", true, 0)]
	public float AccelerationLimit = 5000f;

	[FPD_Suffix(0f, 50f, FPD_SuffixAttribute.SuffixMode.From0to100, "%", true, 0)]
	public float Damping = 10f;

	[FPD_Suffix(0f, 1f, FPD_SuffixAttribute.SuffixMode.From0to100, "%", true, 0)]
	public float BrakePower = 0.2f;

	public Vector3 ProceduralPosition { get; private set; }

	public bool Initialized { get; private set; }

	public void Initialize(Vector3 initPosition)
	{
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		x = new FMuscle_Float();
		y = new FMuscle_Float();
		z = new FMuscle_Float();
		x.Initialize(initPosition.x);
		y.Initialize(initPosition.y);
		z.Initialize(initPosition.z);
		ProceduralPosition = initPosition;
		Initialized = true;
	}

	public bool IsWorking()
	{
		if (!x.IsWorking() && !y.IsWorking())
		{
			return z.IsWorking();
		}
		return true;
	}

	public void Push(Vector3 value)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		x.Push(value.x);
		y.Push(value.y);
		z.Push(value.z);
	}

	public void Reset(Vector3 value)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		x.Initialize(value.x);
		y.Initialize(value.y);
		z.Initialize(value.z);
	}

	public void Push(float v)
	{
		x.Push(v);
		y.Push(v);
		z.Push(v);
	}

	public void MotionInfluence(Vector3 offset)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		x.OffsetValue(offset.x);
		y.OffsetValue(offset.y);
		z.OffsetValue(offset.z);
		ProceduralPosition += offset;
	}

	public void Update(float delta, Vector3 desired, float acceleration, float accelerationLimit, float damping, float brakePower)
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		x.Update(delta, ProceduralPosition.x, desired.x, acceleration, accelerationLimit, damping, brakePower);
		y.Update(delta, ProceduralPosition.y, desired.y, acceleration, accelerationLimit, damping, brakePower);
		z.Update(delta, ProceduralPosition.z, desired.z, acceleration, accelerationLimit, damping, brakePower);
		ProceduralPosition = new Vector3(x.OutValue, y.OutValue, z.OutValue);
	}

	public Vector3 Update(float delta, Vector3 desired)
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		x.Update(delta, ProceduralPosition.x, desired.x, Acceleration, AccelerationLimit, Damping, BrakePower);
		y.Update(delta, ProceduralPosition.y, desired.y, Acceleration, AccelerationLimit, Damping, BrakePower);
		z.Update(delta, ProceduralPosition.z, desired.z, Acceleration, AccelerationLimit, Damping, BrakePower);
		ProceduralPosition = new Vector3(x.OutValue, y.OutValue, z.OutValue);
		return ProceduralPosition;
	}

	public IEnumerator PushImpulseCoroutine(Vector3 power, float duration, bool fadeOutPower = false, float delay = 0f)
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		if (delay > 0f)
		{
			yield return (object)new WaitForSeconds(delay);
		}
		float elapsed = 0f;
		Push(0.0001f);
		while (elapsed / duration < 1f)
		{
			if (!fadeOutPower)
			{
				Push(power * Time.deltaTime * 60f);
			}
			else
			{
				Push(power * (1f - elapsed / duration) * Time.deltaTime * 60f);
			}
			elapsed += Time.deltaTime;
			yield return null;
		}
	}

	public static void Lerp(ref FMuscle_Vector3 source, FMuscle_Vector3 a, FMuscle_Vector3 b, float t)
	{
		if (a != null && b != null && source != null)
		{
			source.Acceleration = Mathf.LerpUnclamped(a.Acceleration, b.Acceleration, t);
			source.AccelerationLimit = Mathf.LerpUnclamped(a.AccelerationLimit, b.AccelerationLimit, t);
			source.BrakePower = Mathf.LerpUnclamped(a.BrakePower, b.BrakePower, t);
			source.Damping = Mathf.LerpUnclamped(a.Damping, b.Damping, t);
		}
	}

	public void OverrideProceduralPosition(Vector3 newPos)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		ProceduralPosition = newPos;
		DesiredPosition = newPos;
		x.OverrideValue(newPos.x);
		y.OverrideValue(newPos.y);
		z.OverrideValue(newPos.z);
	}
}
