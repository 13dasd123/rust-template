using System;
using System.Collections.Generic;
using Facepunch;
using ProtoBuf;
using UnityEngine;

public class Beehive : StorageContainer, IHeatSourceListener, ISplashable
{
	[Header("Beehive Settings")]
	public ItemDefinition HoneyCombDefinition;

	public float growthRate = 0.05f;

	public float beeStingTime = 2f;

	[Header("References")]
	public TriggerHurtEx hurtTrigger;

	public const Flags HasNucleus = Flags.Reserved12;

	public const Flags HasBees = Flags.Reserved13;

	public const Flags AngryBees = Flags.Reserved14;

	[ServerVar(Help = "How long before a Beehive will update")]
	public static float updateHiveInterval = 120f;

	[ServerVar(Help = "How long before the Beehive will perform temperature and inside checks")]
	public static float updateHiveStatsInterval = 120f;

	[ServerVar(Help = "How much the Nucleus's XP should be increased per honeycomb generated")]
	public static int xpIncreasePerHoneycomb = 2;

	private bool hasNucleus;

	private float createNewCombAccumulator;

	private float honeyCombProductionMultiplier = 2f;

	private TimeSince timeSinceAngryBees;

	private TimeCachedValue<float> temperatureExposure;

	private TimeCachedValue<float> humidityExposure;

	private TimeCachedValue<bool> outsideCheck;

	private float serverHumidity;

	private float serverTemperature;

	private bool serverOutside;

	private bool CanPickupHive()
	{
		if (!HasFlag(Flags.Reserved12))
		{
			return !HasFlag(Flags.Reserved13);
		}
		return false;
	}

	public override bool CanPickup(BasePlayer player)
	{
		if (base.CanPickup(player))
		{
			return CanPickupHive();
		}
		return false;
	}

	public bool IsOutsideAccurate()
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		return SocketMod_Inside.IsOutside(((Component)this).transform.position, ((Component)this).transform);
	}

	public override void Load(LoadInfo info)
	{
		base.Load(info);
		if (base.isServer && info.fromDisk && info.msg.beehive != null)
		{
			createNewCombAccumulator = info.msg.beehive.currentProgress;
		}
	}

	public override void Save(SaveInfo info)
	{
		base.Save(info);
		info.msg.beehive = Pool.Get<Beehive>();
		info.msg.beehive.currentProgress = createNewCombAccumulator;
		if (!info.forDisk)
		{
			info.msg.beehive.temperature = serverTemperature;
			info.msg.beehive.inside = serverOutside;
			info.msg.beehive.humidity = serverHumidity;
		}
	}

	public override void OnItemAddedOrRemoved(Item item, bool added)
	{
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		base.OnItemAddedOrRemoved(item, added);
		CheckNucleus();
		float num = base.inventory.GetAmount(HoneyCombDefinition.itemid, onlyUsableAmounts: false);
		SetFlag(Flags.Reserved13, num > 0f && hasNucleus);
		if (!added && (Object)(object)item.info == (Object)(object)HoneyCombDefinition)
		{
			BasePlayer basePlayer = BasePlayer.FindByID(base.LastLootedBy);
			if ((Object)(object)basePlayer != (Object)null && basePlayer.IsAlive() && !basePlayer.IsNpc && basePlayer.isServer)
			{
				timeSinceAngryBees = TimeSince.op_Implicit(0f);
				SetFlag(Flags.Reserved14, b: true);
			}
		}
	}

	private void OnPhysicsNeighbourChanged()
	{
		TimeWarning val = TimeWarning.New("Beehive.OnPhysicsNeighbourChanged", 0);
		try
		{
			CalculateQualifiers(force: true);
			SendNetworkUpdate();
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public override void OnDeployed(BaseEntity parent, BasePlayer deployedBy, Item fromItem)
	{
		base.OnDeployed(parent, deployedBy, fromItem);
		if (!base.isClient)
		{
			CheckNucleus();
		}
	}

	public override void ServerInit()
	{
		base.ServerInit();
		CalculateQualifiers(force: true);
		CheckNucleus();
		((FacepunchBehaviour)this).InvokeRepeating((Action)HiveUpdateTick, 0f, 1f);
	}

	public void OnHeatSourceChanged()
	{
		CalculateQualifiers(force: true);
		SendNetworkUpdate();
	}

	private void HiveUpdateTick()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		if (TimeSince.op_Implicit(timeSinceAngryBees) > beeStingTime)
		{
			SetFlag(Flags.Reserved14, b: false);
		}
	}

	private void GenerateHoneyComb()
	{
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00db: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		float num = base.inventory.GetAmount(HoneyCombDefinition.itemid, onlyUsableAmounts: false);
		SetFlag(Flags.Reserved13, num > 0f && hasNucleus);
		createNewCombAccumulator += growthRate * honeyCombProductionMultiplier;
		if (!(createNewCombAccumulator >= 1f))
		{
			return;
		}
		createNewCombAccumulator = 0f;
		if (hasNucleus)
		{
			Item slot = base.inventory.GetSlot(0);
			if (slot != null)
			{
				int dataInt = slot.instanceData.dataInt;
				dataInt += xpIncreasePerHoneycomb;
				SetNucleusData(slot, dataInt);
			}
		}
		Item item = ItemManager.Create(HoneyCombDefinition, 1, 0uL);
		if (!item.MoveToContainer(base.inventory))
		{
			StopHive();
			item.Drop(base.inventory.dropPosition, base.inventory.dropVelocity);
		}
	}

	public override bool ItemFilter(Item item, int targetSlot)
	{
		if (targetSlot == 0)
		{
			return item.info.shortname.Equals(allowedItem.shortname);
		}
		if (targetSlot > 0)
		{
			return item.info.shortname.Equals(allowedItem2.shortname);
		}
		return base.ItemFilter(item, targetSlot);
	}

	public bool WantsSplash(ItemDefinition splashType, int amount)
	{
		return (Object)(object)splashType == (Object)(object)WaterTypes.RadioactiveWaterItemDef;
	}

	public int DoSplash(ItemDefinition splashType, int amount)
	{
		if ((Object)(object)splashType == (Object)(object)WaterTypes.RadioactiveWaterItemDef)
		{
			Item slot = base.inventory.GetSlot(0);
			if (slot != null)
			{
				hasNucleus = (Object)(object)((Component)slot.info).GetComponent<ItemModBeehiveNucleus>() != (Object)null;
				if (hasNucleus)
				{
					base.inventory.Remove(slot);
					slot.Remove();
				}
			}
			return amount;
		}
		return amount;
	}

	private void SetNucleusData(Item targetItem, int xp)
	{
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Expected O, but got Unknown
		if (targetItem != null)
		{
			targetItem.instanceData = new InstanceData
			{
				ShouldPool = false,
				dataInt = xp
			};
		}
	}

	private void CheckNucleus()
	{
		if (base.inventory == null)
		{
			return;
		}
		Item slot = base.inventory.GetSlot(0);
		if (slot != null)
		{
			hasNucleus = (Object)(object)((Component)slot.info).GetComponent<ItemModBeehiveNucleus>() != (Object)null;
			if (slot == null || slot.instanceData == null || (slot.instanceData.dataInt == 0 && slot.instanceData.dataFloat == 0f))
			{
				SetNucleusData(slot, 0);
			}
			createNewCombAccumulator = 0f;
		}
		else
		{
			hasNucleus = false;
		}
		SetFlag(Flags.Reserved12, hasNucleus);
		if (hasNucleus)
		{
			StartHive();
		}
		else
		{
			StopHive();
		}
	}

	private void StartHive()
	{
		if (!((FacepunchBehaviour)this).IsInvoking((Action)UpdateGrowthRate))
		{
			((FacepunchBehaviour)this).InvokeRepeating((Action)UpdateGrowthRate, 0f, updateHiveInterval);
		}
		if (!((FacepunchBehaviour)this).IsInvoking((Action)GenerateHoneyComb))
		{
			((FacepunchBehaviour)this).InvokeRepeating((Action)GenerateHoneyComb, updateHiveInterval, updateHiveInterval);
		}
		CalculateQualifiers(force: true);
	}

	private void StopHive()
	{
		if (((FacepunchBehaviour)this).IsInvoking((Action)UpdateGrowthRate))
		{
			((FacepunchBehaviour)this).CancelInvoke((Action)UpdateGrowthRate);
		}
		if (((FacepunchBehaviour)this).IsInvoking((Action)GenerateHoneyComb))
		{
			((FacepunchBehaviour)this).CancelInvoke((Action)GenerateHoneyComb);
		}
	}

	public float CalculateRain()
	{
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		PooledList<BaseEntity> val = Pool.Get<PooledList<BaseEntity>>();
		try
		{
			SingletonComponent<NpcFireManager>.Instance.GetFiresAround(((Component)this).transform.position, 2f, (List<BaseEntity>)(object)val);
			if (((List<BaseEntity>)(object)val).Count > 0)
			{
				return 0f;
			}
			if (!IsOutside())
			{
				return 0f;
			}
			return Climate.GetRain(((Component)this).transform.position);
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public float CalculateTemperature()
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		float temperature = Climate.GetTemperature(((Component)this).transform.position);
		float num = GrowableEntity.CalculateArtificialTemperature(((Component)this).transform);
		num *= 2f;
		return temperature + num;
	}

	private void CalculateQualifiers(bool force = false)
	{
		TimeWarning val = TimeWarning.New("Beehive.CalculateQualifiers", 0);
		try
		{
			if (temperatureExposure == null)
			{
				temperatureExposure = new TimeCachedValue<float>
				{
					refreshCooldown = updateHiveStatsInterval,
					refreshRandomRange = 5f,
					updateValue = CalculateTemperature
				};
			}
			if (outsideCheck == null)
			{
				outsideCheck = new TimeCachedValue<bool>
				{
					refreshCooldown = updateHiveStatsInterval,
					refreshRandomRange = 5f,
					updateValue = IsOutsideAccurate
				};
			}
			if (humidityExposure == null)
			{
				humidityExposure = new TimeCachedValue<float>
				{
					refreshCooldown = updateHiveStatsInterval,
					refreshRandomRange = 5f,
					updateValue = CalculateRain
				};
			}
			serverHumidity = humidityExposure.Get(force);
			serverTemperature = temperatureExposure.Get(force);
			serverOutside = outsideCheck.Get(force);
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	private void UpdateGrowthRate()
	{
		TimeWarning val = TimeWarning.New("Beehive.UpdateGrowthRate", 0);
		try
		{
			CalculateQualifiers();
			float num = serverTemperature;
			float num2 = ((num < 25f) ? ((num < 10f) ? 0.010000001f : ((!(num < 16f)) ? 0.2f : 0.05f)) : ((!(num < 40f)) ? 0.010000001f : 0.030000001f));
			growthRate = num2;
			Item slot = base.inventory.GetSlot(0);
			if (slot != null)
			{
				switch (NucleusGrading.XpToGrade(slot.instanceData.dataInt))
				{
				case NucleusGrading.NucleusGrade.Grade2:
					growthRate *= 2f;
					break;
				case NucleusGrading.NucleusGrade.Grade1:
					growthRate *= 3f;
					break;
				}
			}
			if (serverHumidity >= 0.5f)
			{
				growthRate *= 0.5f;
			}
			if (!serverOutside)
			{
				growthRate = 0f;
			}
			SendNetworkUpdate();
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}
}
