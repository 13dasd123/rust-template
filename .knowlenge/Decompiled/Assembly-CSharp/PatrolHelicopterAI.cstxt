using System;
using System.Collections.Generic;
using System.Text;
using ConVar;
using Facepunch;
using Oxide.Core;
using Rust;
using Rust.Ai;
using UnityEngine;

public class PatrolHelicopterAI : BaseMonoBehaviour
{
	public class targetinfo
	{
		public BasePlayer ply;

		public BaseEntity ent;

		public float lastSeenTime = float.PositiveInfinity;

		public float visibleFor;

		public float nextLOSCheck;

		public targetinfo(BaseEntity initEnt, BasePlayer initPly = null)
		{
			ply = initPly;
			ent = initEnt;
			lastSeenTime = float.PositiveInfinity;
			nextLOSCheck = Time.realtimeSinceStartup + 1.5f;
		}

		public bool IsVisible()
		{
			return TimeSinceSeen() < 1.5f;
		}

		public float TimeSinceSeen()
		{
			return Time.realtimeSinceStartup - lastSeenTime;
		}
	}

	public class DangerZone
	{
		public float Radius;

		private float score;

		private float lastActiveTime = Time.realtimeSinceStartup;

		private const float isStaleTime = 5f;

		private Vector3 centre;

		private BaseEntity parent;

		public Vector3 Centre
		{
			get
			{
				//IL_0021: Unknown result type (might be due to invalid IL or missing references)
				//IL_0026: Unknown result type (might be due to invalid IL or missing references)
				//IL_000f: Unknown result type (might be due to invalid IL or missing references)
				if ((Object)(object)parent == (Object)null)
				{
					return centre;
				}
				return ((Component)parent).transform.TransformPoint(centre);
			}
		}

		public float Score
		{
			get
			{
				return score;
			}
			set
			{
				score = value;
				lastActiveTime = Time.realtimeSinceStartup;
			}
		}

		public float LastActiveTime => lastActiveTime;

		public DangerZone(Vector3 centre, float radius = 20f, BaseEntity parent = null)
		{
			//IL_002a: Unknown result type (might be due to invalid IL or missing references)
			//IL_002b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0030: Unknown result type (might be due to invalid IL or missing references)
			//IL_001b: Unknown result type (might be due to invalid IL or missing references)
			//IL_001c: Unknown result type (might be due to invalid IL or missing references)
			if ((Object)(object)parent == (Object)null)
			{
				this.centre = centre;
			}
			else
			{
				this.centre = ((Component)parent).transform.InverseTransformPoint(centre);
			}
			this.parent = parent;
			Radius = radius;
		}

		public bool IsPointInside(Vector3 point)
		{
			//IL_0000: Unknown result type (might be due to invalid IL or missing references)
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			return Vector3.Distance(point, Centre) <= Radius;
		}

		public bool IsStale()
		{
			return Time.realtimeSinceStartup - lastActiveTime > 5f;
		}

		public Vector3 GetNearestEdge(Vector3 point)
		{
			//IL_0000: Unknown result type (might be due to invalid IL or missing references)
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000c: Unknown result type (might be due to invalid IL or missing references)
			//IL_000f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0022: Unknown result type (might be due to invalid IL or missing references)
			//IL_0027: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0033: Unknown result type (might be due to invalid IL or missing references)
			Vector3 val = point - Centre;
			Vector3 normalized = ((Vector3)(ref val)).normalized;
			normalized.y = 0f;
			return Centre + normalized * Radius;
		}
	}

	public enum aiState
	{
		IDLE,
		MOVE,
		ORBIT,
		STRAFE,
		PATROL,
		ORBITSTRAFE,
		GUARD,
		FLEE,
		DEATH
	}

	public Vector3 interestZoneOrigin;

	public Vector3 destination;

	public bool hasInterestZone;

	public float moveSpeed;

	public float maxSpeed = 25f;

	public float courseAdjustLerpTime = 2f;

	public Quaternion targetRotation;

	public Vector3 windVec;

	public Vector3 targetWindVec;

	public float windForce = 5f;

	public float windFrequency = 1f;

	public float targetThrottleSpeed;

	public float throttleSpeed;

	public float maxRotationSpeed = 90f;

	public float rotationSpeed;

	public float terrainPushForce = 100f;

	public float obstaclePushForce = 100f;

	public HelicopterTurret leftGun;

	public HelicopterTurret rightGun;

	public static PatrolHelicopterAI heliInstance;

	public PatrolHelicopter helicopterBase;

	public aiState _currentState;

	public float oceanDepthTargetCutoff = 3f;

	public AIHelicopterAnimation anim;

	private Vector3 _aimTarget;

	private bool movementLockingAiming;

	private bool hasAimTarget;

	private bool aimDoorSide;

	private Vector3 pushVec = Vector3.zero;

	private Vector3 _lastPos;

	private Vector3 _lastMoveDir;

	public bool isDead;

	public bool isRetiring;

	public float spawnTime;

	public float lastDamageTime;

	private bool forceTerrainPushback;

	[ServerVar]
	public static float flee_damage_percentage = 0.35f;

	[ServerVar]
	public static bool use_danger_zones = true;

	[ServerVar]
	public static bool monument_crash = true;

	private bool shouldDebug;

	public List<targetinfo> _targetList = new List<targetinfo>();

	private HashSet<BasePlayer> _targetSet = new HashSet<BasePlayer>();

	public List<DangerZone> dangerZones = new List<DangerZone>();

	public List<DangerZone> noGoZones = new List<DangerZone>();

	private const int max_zones = 20;

	private const float no_go_zone_size = 250f;

	private const float danger_zone_size = 20f;

	private DangerZone leastActiveZone;

	private float deathTimeout;

	private bool didImpact;

	private Collider[] collisions;

	private bool reachedSpinoutLocation;

	private float destination_min_dist = 2f;

	private float currentOrbitDistance;

	private float currentOrbitTime;

	private bool hasEnteredOrbit;

	private float orbitStartTime;

	public float maxOrbitDuration = 30f;

	private bool breakingOrbit;

	private float timeBetweenRocketsOrbit = 0.5f;

	private bool didGetToDesination;

	public List<MonumentInfo> _visitedMonuments;

	public float arrivalTime;

	public GameObjectRef rocketProjectile;

	public GameObjectRef rocketProjectile_Napalm;

	public bool leftTubeFiredLast;

	public float lastRocketTime;

	public float timeBetweenRockets = 0.2f;

	public int numRocketsLeft = 12;

	public const int maxRockets = 12;

	public Vector3 strafe_target_position;

	[NonSerialized]
	public BasePlayer strafe_target;

	public bool puttingDistance;

	public const float strafe_approach_range = 175f;

	public const float strafe_firing_range = 150f;

	private float get_out_of_strafe_distance = 15f;

	private bool passNapalm;

	private Vector3 cached_strafe_pos;

	private TimeSince timeSinceRefreshed;

	private bool useNapalm;

	[NonSerialized]
	public float lastNapalmTime = float.NegativeInfinity;

	[NonSerialized]
	public float lastStrafeTime = float.NegativeInfinity;

	private float _lastThinkTime;

	public bool IsDead => isDead;

	[ServerVar]
	private void dumpstate()
	{
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		StringBuilder stringBuilder = new StringBuilder();
		stringBuilder.AppendLine("[State] " + _currentState);
		stringBuilder.AppendLine($"[Has Interest Zone] {hasInterestZone}");
		stringBuilder.AppendLine($"[Interest Zone] {interestZoneOrigin}");
		stringBuilder.AppendLine($"[Target Count] {_targetList.Count}");
		stringBuilder.AppendLine($"[Retiring] {isRetiring}");
		stringBuilder.AppendLine($"[Has Entered Orbit] {hasEnteredOrbit}");
		stringBuilder.AppendLine($"[Breaking Orbit] {breakingOrbit}");
		stringBuilder.AppendLine($"[Orbit Distance] {currentOrbitDistance}");
		Debug.Log((object)stringBuilder.ToString());
	}

	public void Awake()
	{
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		if (ConVar.PatrolHelicopter.lifetimeMinutes == 0f)
		{
			((FacepunchBehaviour)this).Invoke((Action)DestroyMe, 1f);
			return;
		}
		((FacepunchBehaviour)this).InvokeRepeating((Action)UpdateWind, 0f, 1f / windFrequency);
		_lastPos = ((Component)this).transform.position;
		spawnTime = Time.realtimeSinceStartup;
		InitializeAI();
	}

	public void SetInitialDestination(Vector3 dest, float mapScaleDistance = 0.25f)
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		hasInterestZone = true;
		interestZoneOrigin = dest;
		float x = TerrainMeta.Size.x;
		float y = dest.y + 25f;
		Vector3 val = Vector3Ex.Range(-1f, 1f);
		val.y = 0f;
		((Vector3)(ref val)).Normalize();
		val *= x * mapScaleDistance;
		val.y = y;
		if (mapScaleDistance == 0f)
		{
			val = interestZoneOrigin + new Vector3(0f, 10f, 0f);
		}
		((Component)this).transform.position = val;
		ExitCurrentState();
		State_Move_Enter(dest);
	}

	public void Retire()
	{
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		if (!isRetiring && Interface.CallHook("OnHelicopterRetire", (object)this) == null)
		{
			((FacepunchBehaviour)this).Invoke((Action)DestroyMe, 240f);
			float x = TerrainMeta.Size.x;
			float y = 200f;
			Vector3 val = Vector3Ex.Range(-1f, 1f);
			val.y = 0f;
			((Vector3)(ref val)).Normalize();
			val *= x * 20f;
			val.y = y;
			ExitCurrentState();
			isRetiring = true;
			State_Move_Enter(val);
		}
	}

	public void SetIdealRotation(Quaternion newTargetRot, float rotationSpeedOverride = -1f)
	{
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		float num = ((rotationSpeedOverride == -1f) ? Mathf.Clamp01(moveSpeed / (maxSpeed * 0.5f)) : rotationSpeedOverride);
		rotationSpeed = num * maxRotationSpeed;
		targetRotation = newTargetRot;
	}

	public Quaternion GetYawRotationTo(Vector3 targetDest)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = targetDest;
		val.y = 0f;
		Vector3 position = ((Component)this).transform.position;
		position.y = 0f;
		Vector3 val2 = val - position;
		Vector3 normalized = ((Vector3)(ref val2)).normalized;
		if (!(normalized != Vector3.zero))
		{
			return Quaternion.identity;
		}
		return Quaternion.LookRotation(normalized);
	}

	public void SetTargetDestination(Vector3 targetDest, float minDist = 5f, float minDistForFacingRotation = 30f)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		destination = targetDest;
		destination_min_dist = minDist;
		float num = Vector3.Distance(targetDest, ((Component)this).transform.position);
		if (num > minDistForFacingRotation && !IsTargeting())
		{
			SetIdealRotation(GetYawRotationTo(destination));
		}
		targetThrottleSpeed = GetThrottleForDistance(num);
	}

	public bool AtDestination()
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		return Vector3Ex.Distance2D(((Component)this).transform.position, destination) < destination_min_dist;
	}

	public bool AtRotation()
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		return Quaternion.Angle(((Component)this).transform.rotation, targetRotation) <= 8f;
	}

	private void NoGoZoneAdded(DangerZone zone)
	{
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		if (use_danger_zones && Interface.CallHook("OnNoGoZoneAdded", (object)this, (object)zone) == null && zone.IsPointInside(((Component)this).transform.position))
		{
			ClearTargets();
			ExitCurrentState();
			Vector3 nearestEdge = zone.GetNearestEdge(((Component)this).transform.position);
			nearestEdge.y = Random.Range(35f, 45f);
			State_Flee_Enter(nearestEdge);
		}
	}

	public void MoveToDestination()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00af: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Unknown result type (might be due to invalid IL or missing references)
		Vector3 lastMoveDir = _lastMoveDir;
		Vector3 val = destination - ((Component)this).transform.position;
		Vector3 val2 = (_lastMoveDir = Vector3.Lerp(lastMoveDir, ((Vector3)(ref val)).normalized, Time.deltaTime / courseAdjustLerpTime));
		throttleSpeed = Mathf.Lerp(throttleSpeed, targetThrottleSpeed, Time.deltaTime / 3f);
		float num = throttleSpeed * maxSpeed;
		TerrainPushback();
		Vector3 val3 = windVec * windForce * Time.deltaTime;
		Vector3 val4 = val2 * num * Time.deltaTime;
		Transform transform = ((Component)this).transform;
		transform.position += val4 + val3;
		moveSpeed = Mathf.Lerp(moveSpeed, Vector3.Distance(_lastPos, ((Component)this).transform.position) / Time.deltaTime, Time.deltaTime * 2f);
		_lastPos = ((Component)this).transform.position;
	}

	public void TerrainPushback()
	{
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_017a: Unknown result type (might be due to invalid IL or missing references)
		//IL_013f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_0149: Unknown result type (might be due to invalid IL or missing references)
		//IL_0153: Unknown result type (might be due to invalid IL or missing references)
		//IL_0158: Unknown result type (might be due to invalid IL or missing references)
		//IL_015d: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0161: Unknown result type (might be due to invalid IL or missing references)
		//IL_0168: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0172: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_01af: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c0: Unknown result type (might be due to invalid IL or missing references)
		if (_currentState != aiState.DEATH || forceTerrainPushback)
		{
			Vector3 val = ((Component)this).transform.position + new Vector3(0f, 2f, 0f);
			Vector3 val2 = destination - val;
			Vector3 normalized = ((Vector3)(ref val2)).normalized;
			float num = Vector3.Distance(destination, ((Component)this).transform.position);
			Ray val3 = default(Ray);
			((Ray)(ref val3))..ctor(val, normalized);
			float num2 = 5f;
			float num3 = Mathf.Min(100f, num);
			int mask = LayerMask.GetMask(new string[3] { "Terrain", "World", "Construction" });
			Vector3 val4 = Vector3.zero;
			RaycastHit val5 = default(RaycastHit);
			if (Physics.SphereCast(val3, num2, ref val5, num3 - num2 * 0.5f, mask))
			{
				float num4 = 1f - ((RaycastHit)(ref val5)).distance / num3;
				float num5 = terrainPushForce * num4;
				val4 = Vector3.up * num5;
			}
			Ray val6 = new Ray(val, _lastMoveDir);
			float num6 = Mathf.Min(10f, num);
			RaycastHit val7 = default(RaycastHit);
			if (Physics.SphereCast(val6, num2, ref val7, num6 - num2 * 0.5f, mask))
			{
				float num7 = 1f - ((RaycastHit)(ref val7)).distance / num6;
				float num8 = obstaclePushForce * num7;
				val4 += _lastMoveDir * num8 * -1f;
				val4 += Vector3.up * num8;
			}
			float num9 = ((Component)this).transform.position.y - WaterSystem.OceanLevel;
			if (num9 < num6)
			{
				float num10 = 1f - num9 / num6;
				float num11 = terrainPushForce * num9 * num10;
				val4 += Vector3.up * num11;
			}
			pushVec = Vector3.Lerp(pushVec, val4, Time.deltaTime);
			Transform transform = ((Component)this).transform;
			transform.position += pushVec * Time.deltaTime;
		}
	}

	public void UpdateRotation()
	{
		//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00af: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		if (hasAimTarget)
		{
			Vector3 position = ((Component)this).transform.position;
			position.y = 0f;
			Vector3 aimTarget = _aimTarget;
			aimTarget.y = 0f;
			Vector3 val = aimTarget - position;
			Vector3 normalized = ((Vector3)(ref val)).normalized;
			Vector3 val2 = Vector3.Cross(normalized, Vector3.up);
			float num = Vector3.Angle(normalized, ((Component)this).transform.right);
			float num2 = Vector3.Angle(normalized, -((Component)this).transform.right);
			if (aimDoorSide)
			{
				if (num < num2)
				{
					targetRotation = Quaternion.LookRotation(val2);
				}
				else
				{
					targetRotation = Quaternion.LookRotation(-val2);
				}
			}
			else
			{
				targetRotation = Quaternion.LookRotation(normalized);
			}
		}
		rotationSpeed = Mathf.Lerp(rotationSpeed, maxRotationSpeed, Time.deltaTime / 2f);
		((Component)this).transform.rotation = Quaternion.Lerp(((Component)this).transform.rotation, targetRotation, rotationSpeed * Time.deltaTime);
	}

	public void UpdateSpotlight()
	{
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		if (hasInterestZone)
		{
			helicopterBase.spotlightTarget = new Vector3(interestZoneOrigin.x, TerrainMeta.HeightMap.GetHeight(interestZoneOrigin), interestZoneOrigin.z);
		}
		else
		{
			helicopterBase.spotlightTarget = Vector3.zero;
		}
	}

	public void Update()
	{
		if (helicopterBase.isClient)
		{
			return;
		}
		heliInstance = this;
		UpdateTargetList();
		MoveToDestination();
		UpdateRotation();
		UpdateSpotlight();
		anim.UpdateAnimation();
		anim.UpdateLastPosition();
		AIThink();
		DoMachineGuns();
		if (!isRetiring && !isDead)
		{
			float num = Mathf.Max(spawnTime + ConVar.PatrolHelicopter.lifetimeMinutes * 60f, lastDamageTime + 180f);
			if (Time.realtimeSinceStartup > num)
			{
				Retire();
			}
		}
	}

	public void FixedUpdate()
	{
		if (_currentState == aiState.DEATH)
		{
			PhysicsDeathCheck();
		}
	}

	public void OtherDamaged(HitInfo info)
	{
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		BasePlayer basePlayer = info.Initiator as BasePlayer;
		if (!((Object)(object)basePlayer == (Object)null) && use_danger_zones)
		{
			UpdateDangerZones(((Component)basePlayer).transform.position, info.damageTypes.Total(), basePlayer);
		}
	}

	public void WeakspotDamaged(PatrolHelicopter.weakspot weak, HitInfo info)
	{
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		BasePlayer basePlayer = info.Initiator as BasePlayer;
		if (!((Object)(object)basePlayer == (Object)null))
		{
			if (use_danger_zones)
			{
				UpdateDangerZones(((Component)basePlayer).transform.position, info.damageTypes.Total(), basePlayer, weak);
			}
			else
			{
				TryStrafePlayer(info, 5f);
			}
		}
	}

	public void TryStrafePlayer(HitInfo info, float timeSinceDamagedThreshold)
	{
		if (!isRetiring && IsAlive() && _currentState != aiState.FLEE)
		{
			BasePlayer basePlayer = info.Initiator as BasePlayer;
			bool num = ValidRocketTarget(basePlayer);
			bool flag = num && CanStrafe();
			bool flag2 = !num && CanUseNapalm();
			float num2 = Time.realtimeSinceStartup - lastDamageTime;
			lastDamageTime = Time.realtimeSinceStartup;
			if (num2 < timeSinceDamagedThreshold && (Object)(object)basePlayer != (Object)null && (flag || flag2))
			{
				ExitCurrentState();
				State_Strafe_Enter(basePlayer, flag2);
			}
		}
	}

	public void CriticalDamage()
	{
		isDead = true;
		ExitCurrentState();
		State_Death_Enter();
	}

	public void DoMachineGuns()
	{
		if (_targetList.Count > 0)
		{
			if (leftGun.NeedsNewTarget())
			{
				leftGun.UpdateTargetFromList(_targetList);
			}
			if (rightGun.NeedsNewTarget())
			{
				rightGun.UpdateTargetFromList(_targetList);
			}
		}
		leftGun.TurretThink();
		rightGun.TurretThink();
	}

	public void FireGun(Vector3 targetPos, float aimCone, bool left)
	{
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_0161: Unknown result type (might be due to invalid IL or missing references)
		//IL_0162: Unknown result type (might be due to invalid IL or missing references)
		//IL_0168: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0172: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0185: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0118: Unknown result type (might be due to invalid IL or missing references)
		//IL_011d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0123: Unknown result type (might be due to invalid IL or missing references)
		//IL_0128: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0133: Unknown result type (might be due to invalid IL or missing references)
		//IL_0134: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		if (ConVar.PatrolHelicopter.guns == 0)
		{
			return;
		}
		Vector3 position = (left ? helicopterBase.left_gun_muzzle.transform : helicopterBase.right_gun_muzzle.transform).position;
		Vector3 val = targetPos - position;
		Vector3 normalized = ((Vector3)(ref val)).normalized;
		position += normalized * 2f;
		Vector3 modifiedAimConeDirection = AimConeUtil.GetModifiedAimConeDirection(aimCone, normalized);
		if (GamePhysics.Trace(new Ray(position, modifiedAimConeDirection), 0f, out var hitInfo, 300f, 1220225809, (QueryTriggerInteraction)0))
		{
			targetPos = ((RaycastHit)(ref hitInfo)).point;
			if (Object.op_Implicit((Object)(object)((RaycastHit)(ref hitInfo)).collider))
			{
				BaseEntity entity = hitInfo.GetEntity();
				if (Object.op_Implicit((Object)(object)entity) && (Object)(object)entity != (Object)(object)helicopterBase)
				{
					BaseCombatEntity baseCombatEntity = entity as BaseCombatEntity;
					HitInfo info = new HitInfo(helicopterBase, entity, DamageType.Bullet, helicopterBase.bulletDamage * ConVar.PatrolHelicopter.bulletDamageScale, ((RaycastHit)(ref hitInfo)).point);
					if (Object.op_Implicit((Object)(object)baseCombatEntity))
					{
						baseCombatEntity.OnAttacked(info);
						if (baseCombatEntity is BasePlayer)
						{
							Effect.server.ImpactEffect(new HitInfo
							{
								HitPositionWorld = ((RaycastHit)(ref hitInfo)).point - modifiedAimConeDirection * 0.25f,
								HitNormalWorld = -modifiedAimConeDirection,
								HitMaterial = StringPool.Get("Flesh")
							});
						}
					}
					else
					{
						entity.OnAttacked(info);
					}
				}
			}
		}
		else
		{
			targetPos = position + modifiedAimConeDirection * 300f;
		}
		helicopterBase.ClientRPC<bool, Vector3>(RpcTarget.NetworkGroup("FireGun"), left, targetPos);
	}

	public bool CanInterruptState()
	{
		aiState currentState = _currentState;
		return currentState == aiState.IDLE || currentState == aiState.MOVE || currentState == aiState.PATROL;
	}

	public bool IsAlive()
	{
		if (!isDead)
		{
			return _currentState != aiState.DEATH;
		}
		return false;
	}

	public void DestroyMe()
	{
		if (dangerZones != null)
		{
			helicopterBase.Kill();
		}
	}

	public Vector3 GetLastMoveDir()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		return _lastMoveDir;
	}

	public Vector3 GetMoveDirection()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = destination - ((Component)this).transform.position;
		return ((Vector3)(ref val)).normalized;
	}

	public float GetMoveSpeed()
	{
		return moveSpeed;
	}

	public float GetMaxRotationSpeed()
	{
		return maxRotationSpeed;
	}

	public bool IsTargeting()
	{
		return hasAimTarget;
	}

	public void UpdateWind()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		targetWindVec = Random.onUnitSphere;
	}

	public void SetAimTarget(Vector3 aimTarg, bool isDoorSide)
	{
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		if (!movementLockingAiming)
		{
			hasAimTarget = true;
			_aimTarget = aimTarg;
			aimDoorSide = isDoorSide;
		}
	}

	public void ClearAimTarget()
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		hasAimTarget = false;
		_aimTarget = Vector3.zero;
	}

	public void UpdateTargetList()
	{
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_0249: Unknown result type (might be due to invalid IL or missing references)
		BasePlayer strafeTarget = null;
		bool flag = false;
		bool shouldUseNapalm = false;
		float num = 0f;
		targetinfo targetinfo = null;
		for (int num2 = _targetList.Count - 1; num2 >= 0; num2--)
		{
			targetinfo targetinfo2 = _targetList[num2];
			if (targetinfo2 == null || !targetinfo2.ent.IsValid())
			{
				RemoveTargetAt(num2);
			}
			else if (use_danger_zones && IsInNoGoZone(((Component)targetinfo2.ply).transform.position))
			{
				RemoveTargetAt(num2);
			}
			else if (AI.ignoreplayers || SimpleAIMemory.PlayerIgnoreList.Contains(targetinfo2.ply))
			{
				RemoveTargetAt(num2);
			}
			else
			{
				UpdateTargetLineOfSightTime(targetinfo2);
				bool flag2 = (Object.op_Implicit((Object)(object)targetinfo2.ply) ? targetinfo2.ply.IsDead() : (targetinfo2.ent.Health() <= 0f));
				if (targetinfo2.TimeSinceSeen() >= 6f || flag2)
				{
					bool flag3 = Random.Range(0f, 1f) >= 0f;
					if ((CanStrafe() || CanUseNapalm()) && IsAlive() && !flag && !flag2 && ((Object)(object)targetinfo2.ply == (Object)(object)leftGun._target || (Object)(object)targetinfo2.ply == (Object)(object)rightGun._target) && flag3)
					{
						shouldUseNapalm = !ValidRocketTarget(targetinfo2.ply) || Random.Range(0f, 1f) > 0.75f;
						flag = true;
						strafeTarget = targetinfo2.ply;
					}
					RemoveTargetAt(num2);
					if ((Object)(object)leftGun._target == (Object)(object)targetinfo2.ply)
					{
						leftGun._target = null;
					}
					if ((Object)(object)rightGun._target == (Object)(object)targetinfo2.ply)
					{
						rightGun._target = null;
					}
				}
				if (use_danger_zones && !flag && (CanStrafe() || CanUseNapalm()) && IsAlive() && (Time.realtimeSinceStartup - lastNapalmTime > 20f || Time.realtimeSinceStartup - lastStrafeTime > 15f) && IsInDangerZone(((Component)targetinfo2.ply).transform.position, out var dangerZone) && dangerZone != null && dangerZone.Score > num)
				{
					num = dangerZone.Score;
					targetinfo = targetinfo2;
				}
			}
		}
		if (use_danger_zones && !flag && targetinfo != null)
		{
			shouldUseNapalm = !ValidRocketTarget(targetinfo.ply) || Random.Range(0f, 1f) > 0.75f;
			flag = true;
			strafeTarget = targetinfo.ply;
			targetinfo = null;
		}
		AddNewTargetsToList();
		if (flag && !isRetiring && !isDead)
		{
			ExitCurrentState();
			State_Strafe_Enter(strafeTarget, shouldUseNapalm);
		}
	}

	private void UpdateTargetLineOfSightTime(targetinfo targ)
	{
		if (Time.realtimeSinceStartup > targ.nextLOSCheck)
		{
			targ.nextLOSCheck = Time.realtimeSinceStartup + 1f;
			if (PlayerVisible(targ.ply))
			{
				targ.lastSeenTime = Time.realtimeSinceStartup;
				targ.visibleFor += 1f;
			}
			else
			{
				targ.visibleFor = 0f;
			}
		}
	}

	private void AddNewTargetsToList()
	{
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		TimeWarning val = TimeWarning.New("PatrolHelicoperAI.AddNewTargetsToList", 0);
		try
		{
			if (AI.ignoreplayers)
			{
				return;
			}
			PooledList<BasePlayer> val2 = Pool.Get<PooledList<BasePlayer>>();
			try
			{
				BaseEntity.Query.Server.GetPlayersInSphere(((Component)this).transform.position, 150f, (List<BasePlayer>)(object)val2, BaseEntity.Query.DistanceCheckType.None);
				foreach (BasePlayer item in (List<BasePlayer>)(object)val2)
				{
					if (SimpleAIMemory.PlayerIgnoreList.Contains(item))
					{
						continue;
					}
					TimeWarning val3 = TimeWarning.New("PatrolHelicoperAI.SafeZone", 0);
					try
					{
						if (item.InSafeZone())
						{
							continue;
						}
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
					if (item.IsInTutorial)
					{
						continue;
					}
					TimeWarning val4 = TimeWarning.New("PatrolHelicoperAI.NoGoZone", 0);
					try
					{
						if (use_danger_zones && IsInNoGoZone(((Component)item).transform.position))
						{
							continue;
						}
					}
					finally
					{
						((IDisposable)val4)?.Dispose();
					}
					if (!IsAlreadyInTargets(item) && item.GetThreatLevel() > 0.5f && PlayerVisible(item))
					{
						TryAddTarget(item);
					}
				}
			}
			finally
			{
				((IDisposable)val2)?.Dispose();
			}
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	private bool TryAddTarget(BasePlayer ply)
	{
		if (IsAlreadyInTargets(ply))
		{
			return false;
		}
		_targetList.Add(new targetinfo(ply, ply));
		_targetSet.Add(ply);
		return true;
	}

	private void RemoveTargetAt(int i)
	{
		BasePlayer ply = _targetList[i].ply;
		_targetSet.Remove(ply);
		_targetList.RemoveAt(i);
	}

	private void ClearTargets()
	{
		_targetList.Clear();
		_targetSet.Clear();
	}

	private bool IsAlreadyInTargets(BasePlayer ply)
	{
		return _targetSet.Contains(ply);
	}

	private Vector3? FindTargetWithZones(bool withOffset = true)
	{
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		int num = -1;
		float num2 = 0f;
		for (int i = 0; i < _targetList.Count; i++)
		{
			if (use_danger_zones)
			{
				Vector3 position = ((Component)_targetList[i].ply).transform.position;
				if (!IsInNoGoZone(position) && IsInDangerZone(position, out var dangerZone) && dangerZone != null && dangerZone.Score > num2)
				{
					num2 = dangerZone.Score;
					num = i;
				}
			}
		}
		if (num == -1)
		{
			return null;
		}
		Vector3 val = Vector3.zero;
		if (withOffset)
		{
			val = GetTargetOffset();
		}
		return ((Component)_targetList[num].ply).transform.position + val;
	}

	private Vector3 FindDefaultTarget(bool withOffset = true)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = Vector3.zero;
		if (withOffset)
		{
			val = GetTargetOffset();
		}
		return ((Component)_targetList[0].ply).transform.position + val;
	}

	private Vector3 GetTargetOffset()
	{
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		return new Vector3(0f, 20f, 0f);
	}

	public bool PlayerVisible(BasePlayer ply)
	{
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		object obj = Interface.CallHook("CanHelicopterTarget", (object)this, (object)ply);
		if (obj is bool)
		{
			return (bool)obj;
		}
		TimeWarning val = TimeWarning.New("PatrolHelicoperAI.PlayerVisible", 0);
		try
		{
			Vector3 position = ply.eyes.position;
			if (ply.eyes.position.y < WaterSystem.OceanLevel && Mathf.Abs(WaterSystem.OceanLevel - ply.eyes.position.y) > oceanDepthTargetCutoff)
			{
				return false;
			}
			if (TOD_Sky.Instance.IsNight && Vector3.Distance(position, interestZoneOrigin) > 40f)
			{
				return false;
			}
			Vector3 val2 = ((Component)this).transform.position - Vector3.up * 6f;
			float num = Vector3.Distance(position, val2);
			Vector3 val3 = position - val2;
			Vector3 normalized = ((Vector3)(ref val3)).normalized;
			if (GamePhysics.Trace(new Ray(val2 + normalized * 5f, normalized), 0f, out var hitInfo, num * 1.1f, 1218652417, (QueryTriggerInteraction)0) && (Object)(object)((Component)((RaycastHit)(ref hitInfo)).collider).gameObject.ToBaseEntity() == (Object)(object)ply)
			{
				return true;
			}
			return false;
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public void WasAttacked(HitInfo info)
	{
		BasePlayer basePlayer = info.Initiator as BasePlayer;
		if (!(basePlayer is ScientistNPC) && basePlayer.IsValid())
		{
			TryAddTarget(basePlayer);
		}
	}

	public void UpdateDangerZones(Vector3 position, float damage, BasePlayer ply, PatrolHelicopter.weakspot weak = null)
	{
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_01df: Unknown result type (might be due to invalid IL or missing references)
		if (!use_danger_zones)
		{
			return;
		}
		if (IsInNoGoZone(position))
		{
			if (shouldDebug)
			{
				Debug.Log((object)"Inside no go zone - ignoring damage");
			}
			return;
		}
		float num = damage;
		if (weak != null)
		{
			if (shouldDebug)
			{
				Debug.Log((object)("Hit weakspot: " + num));
			}
			num = weak.body.MaxHealth() * weak.healthFractionOnDestroyed * (damage / weak.maxHealth);
			if (shouldDebug)
			{
				Debug.Log((object)("Potential Damage: " + num));
			}
		}
		if (dangerZones.Count == 0)
		{
			MakeZone(position, num, ply.GetParentEntity());
			return;
		}
		DangerZone dangerZone = null;
		bool flag = false;
		for (int num2 = dangerZones.Count - 1; num2 >= 0; num2--)
		{
			dangerZone = dangerZones[num2];
			if (dangerZone.IsStale())
			{
				if (shouldDebug)
				{
					Debug.Log((object)"zone is stale");
				}
				dangerZones.RemoveAt(num2);
			}
			else if (dangerZone.IsPointInside(position))
			{
				if (shouldDebug)
				{
					Debug.Log((object)("zone has " + dangerZone.Score + " score"));
				}
				if (leastActiveZone == null || dangerZone.LastActiveTime < leastActiveZone.LastActiveTime)
				{
					leastActiveZone = dangerZone;
				}
				dangerZone.Score += num;
				flag = true;
				UpdateNoGoZones(dangerZone);
				break;
			}
		}
		if (flag && shouldDebug)
		{
			Debug.Log((object)"We found a zone");
		}
		if (flag)
		{
			return;
		}
		if (shouldDebug)
		{
			Debug.Log((object)"making a new zone ");
		}
		if (dangerZones.Count + 1 > 20)
		{
			if (leastActiveZone != null && dangerZones.Contains(leastActiveZone))
			{
				dangerZones.Remove(leastActiveZone);
			}
			else
			{
				dangerZones.RemoveAt(0);
			}
		}
		MakeZone(position, num, ply.GetParentEntity());
	}

	public void MakeZone(Vector3 position, float damage, BaseEntity parent = null)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		DangerZone dangerZone = new DangerZone(position, 20f, parent);
		dangerZone.Score += damage;
		dangerZones.Add(dangerZone);
	}

	private void UpdateNoGoZones(DangerZone zone)
	{
		if (zone.Score >= helicopterBase.startHealth * flee_damage_percentage)
		{
			dangerZones.Remove(zone);
			zone.Radius = 250f;
			noGoZones.Add(zone);
			NoGoZoneAdded(zone);
		}
	}

	public void ClearStaleZones()
	{
		for (int num = dangerZones.Count - 1; num >= 0; num--)
		{
			if (dangerZones[num].IsStale())
			{
				dangerZones.RemoveAt(num);
			}
		}
	}

	private void RemoveLeastSignificantZone()
	{
		dangerZones.Sort((DangerZone a, DangerZone b) => a.Score.CompareTo(b.Score));
		dangerZones.RemoveAt(0);
	}

	public bool IsInNoGoZone(Vector3 position)
	{
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		TimeWarning val = TimeWarning.New("PatrolHelicoperAI.IsInNoGoZone", 0);
		try
		{
			bool result = false;
			foreach (DangerZone noGoZone in noGoZones)
			{
				if (noGoZone.IsPointInside(position))
				{
					result = true;
				}
			}
			return result;
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public bool IsInDangerZone(Vector3 position, out DangerZone dangerZone)
	{
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		bool result = false;
		dangerZone = null;
		foreach (DangerZone dangerZone2 in dangerZones)
		{
			if (dangerZone2.IsPointInside(position))
			{
				dangerZone = dangerZone2;
				result = true;
			}
		}
		return result;
	}

	public void State_Death_Think(float timePassed)
	{
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		if (!reachedSpinoutLocation)
		{
			if (AtDestination())
			{
				forceTerrainPushback = false;
				reachedSpinoutLocation = true;
				StartSpinout();
			}
			return;
		}
		float num = Time.realtimeSinceStartup * 0.25f;
		float num2 = Mathf.Sin(MathF.PI * 2f * num) * 10f;
		float num3 = Mathf.Cos(MathF.PI * 2f * num) * 10f;
		Vector3 val = default(Vector3);
		((Vector3)(ref val))..ctor(num2, 0f, num3);
		SetAimTarget(((Component)this).transform.position + val, isDoorSide: true);
		if (((Component)this).transform.position.y - WaterSystem.OceanLevel <= 0f)
		{
			didImpact = true;
		}
		if (reachedSpinoutLocation && (didImpact || Time.realtimeSinceStartup > deathTimeout))
		{
			KillOfNaturalCauses();
		}
	}

	public void State_Death_Enter()
	{
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		_currentState = aiState.DEATH;
		if (collisions == null)
		{
			collisions = (Collider[])(object)new Collider[10];
		}
		MonumentInfo monumentInfo = null;
		if (monument_crash)
		{
			monumentInfo = GetCloseMonument(800f);
		}
		if ((Object)(object)monumentInfo == (Object)null)
		{
			reachedSpinoutLocation = true;
			StartSpinout();
			return;
		}
		forceTerrainPushback = true;
		Vector3 position = ((Component)monumentInfo).transform.position;
		position.y = TerrainMeta.HeightMap.GetHeight(position) + 200f;
		if (TransformUtil.GetGroundInfo(position, out var hitOut, 300f, LayerMask.op_Implicit(1235288065)))
		{
			position.y = ((RaycastHit)(ref hitOut)).point.y;
		}
		position.y += 30f;
		float distToTarget = Vector3.Distance(((Component)this).transform.position, destination);
		targetThrottleSpeed = GetThrottleForDistance(distToTarget);
		SetTargetDestination(position, 15f);
	}

	public void State_Death_Leave()
	{
	}

	private MonumentInfo GetCloseMonument(float maxDistance)
	{
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		MonumentInfo result = null;
		if ((Object)(object)TerrainMeta.Path != (Object)null && TerrainMeta.Path.Monuments != null && TerrainMeta.Path.Monuments.Count > 0)
		{
			float num = float.MaxValue;
			foreach (MonumentInfo monument in TerrainMeta.Path.Monuments)
			{
				if (monument.IsSafeZone)
				{
					continue;
				}
				MonumentType type = monument.Type;
				if (type == MonumentType.Mountain || type == MonumentType.Lighthouse || type == MonumentType.Lake || type == MonumentType.WaterWell || type == MonumentType.Cave || type == MonumentType.Building || monument.Tier == (MonumentTier)0 || ((Component)monument).transform.position.y < WaterSystem.OceanLevel || !monument.AllowPatrolHeliCrash)
				{
					continue;
				}
				float num2 = Vector3Ex.Distance2D(((Component)this).transform.position, ((Component)monument).transform.position);
				if (num2 < num)
				{
					num = num2;
					if (num <= maxDistance)
					{
						result = monument;
					}
				}
			}
		}
		return result;
	}

	private void PhysicsDeathCheck()
	{
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		if (!reachedSpinoutLocation)
		{
			return;
		}
		int mask = LayerMask.GetMask(new string[4] { "Terrain", "World", "Construction", "Water" });
		didImpact = false;
		Physics.OverlapSphereNonAlloc(((Component)this).transform.position, 5f, collisions, mask);
		Collider[] array = collisions;
		foreach (Collider val in array)
		{
			if (!((Object)(object)val == (Object)null) && !((Object)(object)((Component)val).gameObject == (Object)(object)((Component)this).gameObject))
			{
				didImpact = true;
				break;
			}
		}
	}

	private void KillOfNaturalCauses()
	{
		helicopterBase.Hurt(helicopterBase.health * 2f, DamageType.Generic, null, useProtection: false);
	}

	private void StartSpinout()
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		maxRotationSpeed *= 8f;
		Vector3 randomOffset = GetRandomOffset(((Component)this).transform.position, 20f, 60f, 0f, 0f);
		int num = 1237003025;
		TransformUtil.GetGroundInfo(randomOffset - Vector3.up * 2f, out var pos, out var _, 500f, LayerMask.op_Implicit(num));
		SetTargetDestination(pos);
		targetThrottleSpeed = 0.5f;
		deathTimeout = Time.realtimeSinceStartup + 10f;
	}

	public void State_Flee_Think(float timePassed)
	{
		UpdateMove(timePassed);
	}

	public void State_Flee_Enter(Vector3 newPos)
	{
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		_currentState = aiState.FLEE;
		helicopterBase.DoFlare();
		TryMove(newPos);
	}

	public void State_Flee_Leave()
	{
	}

	public void State_Idle_Think(float timePassed)
	{
		ExitCurrentState();
		State_Patrol_Enter();
	}

	public void State_Idle_Enter()
	{
		_currentState = aiState.IDLE;
	}

	public void State_Idle_Leave()
	{
	}

	public void State_Move_Think(float timePassed)
	{
		UpdateMove(timePassed);
	}

	public void State_Move_Enter(Vector3 newPos)
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		_currentState = aiState.MOVE;
		TryMove(newPos);
	}

	public void State_Move_Leave()
	{
	}

	private void TryMove(Vector3 newPos)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		destination_min_dist = 10f;
		SetTargetDestination(newPos);
		float distToTarget = Vector3.Distance(((Component)this).transform.position, destination);
		targetThrottleSpeed = GetThrottleForDistance(distToTarget);
	}

	private void UpdateMove(float timePassed)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		float distToTarget = Vector3.Distance(((Component)this).transform.position, destination);
		targetThrottleSpeed = GetThrottleForDistance(distToTarget);
		if (AtDestination())
		{
			ExitCurrentState();
			State_Idle_Enter();
		}
	}

	public void State_Orbit_Think(float timePassed)
	{
		OrbitUpdate(timePassed);
	}

	public Vector3 GetOrbitPosition(float rate)
	{
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		float num = Mathf.Sin(rate) * currentOrbitDistance;
		float num2 = Mathf.Cos(rate) * currentOrbitDistance;
		Vector3 val = default(Vector3);
		((Vector3)(ref val))..ctor(num, 20f, num2);
		val = interestZoneOrigin + val;
		return val;
	}

	public void State_Orbit_Enter(float orbitDistance)
	{
		_currentState = aiState.ORBIT;
		OrbitInit(orbitDistance);
	}

	public void State_Orbit_Leave()
	{
		breakingOrbit = false;
		hasEnteredOrbit = false;
		currentOrbitTime = 0f;
		ClearAimTarget();
	}

	private void OrbitInit(float orbitDistance, float minDistForFacingRotation = 0f)
	{
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		breakingOrbit = false;
		hasEnteredOrbit = false;
		orbitStartTime = Time.realtimeSinceStartup;
		Vector3 val = ((Component)this).transform.position - interestZoneOrigin;
		currentOrbitTime = Mathf.Atan2(val.x, val.z);
		currentOrbitDistance = orbitDistance;
		ClearAimTarget();
		float num = Vector3Ex.Distance2D(((Component)this).transform.position, interestZoneOrigin);
		if (num > orbitDistance && num < 120f)
		{
			currentOrbitDistance = num;
		}
		SetTargetDestination(GetOrbitPosition(currentOrbitTime), 20f, minDistForFacingRotation);
		if (shouldDebug)
		{
			DebugOrbit();
		}
	}

	private void OrbitUpdate(float timePassed, float minDistForFacingRotation = 1f, bool canBreak = true)
	{
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		if (breakingOrbit)
		{
			if (AtDestination())
			{
				ExitCurrentState();
				State_Idle_Enter();
			}
		}
		else
		{
			if (Vector3Ex.Distance2D(((Component)this).transform.position, destination) > 15f)
			{
				return;
			}
			if (!hasEnteredOrbit)
			{
				hasEnteredOrbit = true;
				orbitStartTime = Time.realtimeSinceStartup;
			}
			if (_targetList.Count == 0 && !isRetiring && canBreak)
			{
				StartBreakOrbit();
				return;
			}
			float num = MathF.PI * 2f * currentOrbitDistance;
			float num2 = 0.5f * maxSpeed;
			float num3 = num / num2;
			currentOrbitTime += timePassed / num3;
			float rate = currentOrbitTime * 30f;
			Vector3 orbitPosition = GetOrbitPosition(rate);
			ClearAimTarget();
			SetTargetDestination(orbitPosition, 2f, minDistForFacingRotation);
			targetThrottleSpeed = 0.5f;
		}
		if (Time.realtimeSinceStartup - orbitStartTime > maxOrbitDuration && !breakingOrbit && canBreak)
		{
			StartBreakOrbit();
		}
	}

	private void StartBreakOrbit()
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		breakingOrbit = true;
		Vector3 appropriatePosition = GetAppropriatePosition(((Component)this).transform.position + ((Component)this).transform.forward * 75f, 40f, 50f);
		SetTargetDestination(appropriatePosition, 15f, 0f);
	}

	private void DebugOrbit()
	{
	}

	public void State_OrbitStrafe_Enter()
	{
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		_currentState = aiState.ORBITSTRAFE;
		if ((Object)(object)strafe_target == (Object)null)
		{
			ExitCurrentState();
			State_Patrol_Enter();
		}
		if ((Object)(object)strafe_target.GetParentEntity() != (Object)null)
		{
			ExitCurrentState();
			State_Patrol_Enter();
		}
		interestZoneOrigin = strafe_target_position;
		puttingDistance = true;
		didGetToDesination = false;
		Vector3 targetDest = interestZoneOrigin + ((Component)this).transform.forward * 95f;
		targetDest.y = ((Component)this).transform.position.y;
		SetTargetDestination(targetDest);
		if (strafe_target.IsNearEnemyBase() || Random.Range(0f, 1f) > 0.75f)
		{
			useNapalm = true;
			lastNapalmTime = Time.realtimeSinceStartup;
		}
		numRocketsLeft = 12 + Random.Range(-3, 16);
		lastRocketTime = 0f;
	}

	public void State_OrbitStrafe_Think(float timePassed)
	{
		//IL_0110: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f4: Unknown result type (might be due to invalid IL or missing references)
		if (puttingDistance)
		{
			if (AtDestination())
			{
				didGetToDesination = true;
			}
			if (didGetToDesination)
			{
				SetIdealRotation(Quaternion.LookRotation(interestZoneOrigin - ((Component)this).transform.position), 0.8f);
				if (AtRotation())
				{
					puttingDistance = false;
					float num = Vector3Ex.Distance2D(((Component)this).transform.position, interestZoneOrigin);
					num = Mathf.Max(70f, num);
					OrbitInit(num, 1000f);
				}
			}
			return;
		}
		OrbitUpdate(timePassed, 1000f, canBreak: false);
		if (hasEnteredOrbit && !breakingOrbit)
		{
			SetIdealRotation(Quaternion.LookRotation(interestZoneOrigin - ((Component)this).transform.position), 3.5f);
			if (ClipRocketsLeft() > 0 && Time.realtimeSinceStartup - lastRocketTime > timeBetweenRocketsOrbit && CanSeeForStrafe(interestZoneOrigin))
			{
				FireRocket(interestZoneOrigin);
			}
		}
		if (ClipRocketsLeft() <= 0)
		{
			ExitCurrentState();
			State_Move_Enter(GetAppropriatePosition(strafe_target_position + ((Component)this).transform.forward * 120f));
		}
	}

	public void State_OrbitStrafe_Leave()
	{
		breakingOrbit = false;
		hasEnteredOrbit = false;
		currentOrbitTime = 0f;
		ClearAimTarget();
		lastStrafeTime = Time.realtimeSinceStartup;
		strafe_target = null;
	}

	public Vector3 GetRandomPatrolDestination()
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		return FindValidDestination();
	}

	private Vector3 FindValidDestination(int maxAttempts = 5)
	{
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		if (use_danger_zones)
		{
			for (int i = 0; i < maxAttempts; i++)
			{
				Vector3 val = GenerateRandomDestination();
				if (!IsInNoGoZone(val))
				{
					return val;
				}
			}
			Vector3 val2 = GenerateRandomDestination(forceMonument: true);
			if (IsInNoGoZone(val2))
			{
				noGoZones?.Clear();
			}
			return val2;
		}
		return GenerateRandomDestination();
	}

	public Vector3 GenerateRandomDestination(bool forceMonument = false)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0172: Unknown result type (might be due to invalid IL or missing references)
		//IL_0183: Unknown result type (might be due to invalid IL or missing references)
		//IL_0190: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a1: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = Vector3.zero;
		bool flag = Random.Range(0f, 1f) >= 0.6f;
		if (forceMonument)
		{
			flag = true;
		}
		if (flag)
		{
			if ((Object)(object)TerrainMeta.Path != (Object)null && TerrainMeta.Path.Monuments != null && TerrainMeta.Path.Monuments.Count > 0)
			{
				MonumentInfo monumentInfo = null;
				if (_visitedMonuments.Count > 0)
				{
					foreach (MonumentInfo monument in TerrainMeta.Path.Monuments)
					{
						if (monument.IsSafeZone)
						{
							continue;
						}
						bool flag2 = false;
						foreach (MonumentInfo visitedMonument in _visitedMonuments)
						{
							if ((Object)(object)monument == (Object)(object)visitedMonument)
							{
								flag2 = true;
							}
						}
						if (!flag2)
						{
							monumentInfo = monument;
							break;
						}
					}
				}
				if ((Object)(object)monumentInfo == (Object)null)
				{
					_visitedMonuments.Clear();
					for (int i = 0; i < 5; i++)
					{
						monumentInfo = TerrainMeta.Path.Monuments[Random.Range(0, TerrainMeta.Path.Monuments.Count)];
						if (!monumentInfo.IsSafeZone)
						{
							break;
						}
					}
				}
				if (Object.op_Implicit((Object)(object)monumentInfo))
				{
					val = ((Component)monumentInfo).transform.position;
					_visitedMonuments.Add(monumentInfo);
					val.y = TerrainMeta.HeightMap.GetHeight(val) + 200f;
					if (TransformUtil.GetGroundInfo(val, out var hitOut, 300f, LayerMask.op_Implicit(1235288065)))
					{
						val.y = ((RaycastHit)(ref hitOut)).point.y;
					}
					val.y += 30f;
				}
			}
			else
			{
				val = GetRandomMapPosition();
			}
		}
		else
		{
			val = GetRandomMapPosition();
		}
		return val;
	}

	public void State_Patrol_Think(float timePassed)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		float num = Vector3Ex.Distance2D(((Component)this).transform.position, destination);
		if (num <= 25f)
		{
			targetThrottleSpeed = GetThrottleForDistance(num);
		}
		else
		{
			targetThrottleSpeed = 0.5f;
		}
		if (AtDestination() && arrivalTime == 0f)
		{
			arrivalTime = Time.realtimeSinceStartup;
			ExitCurrentState();
			maxOrbitDuration = 20f;
			State_Orbit_Enter(75f);
		}
		if (_targetList.Count <= 0)
		{
			return;
		}
		if (use_danger_zones)
		{
			Vector3? val = FindTargetWithZones();
			if (val.HasValue)
			{
				interestZoneOrigin = val.Value;
				OrbitInterestZone();
			}
		}
		else
		{
			interestZoneOrigin = FindDefaultTarget();
			OrbitInterestZone();
		}
	}

	private void OrbitInterestZone()
	{
		ExitCurrentState();
		maxOrbitDuration = 10f;
		State_Orbit_Enter(80f);
	}

	public void State_Patrol_Enter()
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		_currentState = aiState.PATROL;
		Vector3 randomPatrolDestination = GetRandomPatrolDestination();
		SetTargetDestination(randomPatrolDestination, 10f);
		interestZoneOrigin = randomPatrolDestination;
		arrivalTime = 0f;
	}

	public void State_Patrol_Leave()
	{
	}

	private Vector3 GetRandomMapPosition()
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		float x = TerrainMeta.Size.x;
		float y = 30f;
		Vector3 val = Vector3Ex.Range(-0.7f, 0.7f);
		val.y = 0f;
		((Vector3)(ref val)).Normalize();
		val *= x * Random.Range(0f, 0.75f);
		val.y = y;
		return val;
	}

	public int ClipRocketsLeft()
	{
		return numRocketsLeft;
	}

	public bool CanStrafe()
	{
		object obj = Interface.CallHook("CanHelicopterStrafe", (object)this);
		if (obj is bool)
		{
			return (bool)obj;
		}
		if (Time.realtimeSinceStartup - lastStrafeTime >= Random.Range(15f, 25f))
		{
			return CanInterruptState();
		}
		return false;
	}

	public bool CanUseNapalm()
	{
		object obj = Interface.CallHook("CanHelicopterUseNapalm", (object)this);
		if (obj is bool)
		{
			return (bool)obj;
		}
		return Time.realtimeSinceStartup - lastNapalmTime >= Random.Range(25f, 35f);
	}

	public void State_Strafe_Enter(BasePlayer strafeTarget, bool shouldUseNapalm = false)
	{
		StartStrafe(strafeTarget, shouldUseNapalm);
	}

	public void State_Strafe_Think(float timePassed)
	{
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_0133: Unknown result type (might be due to invalid IL or missing references)
		//IL_013e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0148: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_015c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		if (puttingDistance)
		{
			if (AtDestination())
			{
				RefreshTargetPosition();
				SetIdealRotation(GetYawRotationTo(strafe_target_position), 1.2f);
				if (AtRotation())
				{
					puttingDistance = false;
					cached_strafe_pos = strafe_target_position;
					SetTargetDestination(strafe_target_position + new Vector3(0f, 40f, 0f), 10f);
				}
			}
			return;
		}
		RefreshTargetPosition();
		SetIdealRotation(GetYawRotationTo(strafe_target_position));
		float num = Vector3Ex.Distance2D(cached_strafe_pos, ((Component)this).transform.position);
		if (num <= 150f && ClipRocketsLeft() > 0 && Time.realtimeSinceStartup - lastRocketTime > timeBetweenRockets && CanSeeForStrafe(strafe_target_position))
		{
			FireRocket(strafe_target_position);
		}
		if (num <= get_out_of_strafe_distance || ClipRocketsLeft() <= 0)
		{
			if (Random.value > 0.6f && (Object)(object)strafe_target != (Object)null)
			{
				ExitCurrentState();
				State_OrbitStrafe_Enter();
			}
			else
			{
				ExitCurrentState();
				State_Move_Enter(GetAppropriatePosition(strafe_target_position + ((Component)this).transform.forward * 120f));
			}
		}
	}

	private Vector3 GetPredictedPosition()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = strafe_target_position;
		float num = TimeSince.op_Implicit(timeSinceRefreshed);
		RefreshTargetPosition();
		Vector3 val2 = strafe_target_position;
		return val2 + (val2 - val) * (num / Time.deltaTime);
	}

	private bool CanSeeForStrafe(Vector3 targetPos)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		float num = Vector3.Distance(targetPos, ((Component)this).transform.position) - 10f;
		if (num < 0f)
		{
			num = 0f;
		}
		Vector3 position = ((Component)this).transform.position;
		Vector3 val = targetPos - ((Component)this).transform.position;
		return !Physics.Raycast(position, ((Vector3)(ref val)).normalized, num, LayerMask.GetMask(new string[2] { "Terrain", "World" }));
	}

	public bool ValidRocketTarget(BasePlayer ply)
	{
		object obj = Interface.CallHook("CanHelicopterStrafeTarget", (object)this, (object)ply);
		if (obj is bool)
		{
			return (bool)obj;
		}
		if ((Object)(object)ply == (Object)null)
		{
			return false;
		}
		return !ply.IsNearEnemyBase();
	}

	public void State_Strafe_Leave()
	{
		lastStrafeTime = Time.realtimeSinceStartup;
		if (useNapalm)
		{
			lastNapalmTime = Time.realtimeSinceStartup;
		}
		useNapalm = false;
		movementLockingAiming = false;
	}

	private void StartStrafe(BasePlayer strafeTarget, bool shouldUseNapalm = false)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		if (Interface.CallHook("OnHelicopterStrafeEnter", (object)this, (object)((Component)strafeTarget).transform.position, (object)strafeTarget) == null)
		{
			strafe_target = strafeTarget;
			get_out_of_strafe_distance = Random.Range(13f, 17f);
			if (CanUseNapalm() && shouldUseNapalm)
			{
				passNapalm = shouldUseNapalm;
				useNapalm = true;
				lastNapalmTime = Time.realtimeSinceStartup;
			}
			lastStrafeTime = Time.realtimeSinceStartup;
			_currentState = aiState.STRAFE;
			RefreshTargetPosition();
			numRocketsLeft = 12 + Random.Range(-1, 1);
			lastRocketTime = 0f;
			movementLockingAiming = true;
			Vector3 randomOffset = GetRandomOffset(strafe_target_position, 175f, 192.5f);
			SetTargetDestination(randomOffset, 10f);
			SetIdealRotation(GetYawRotationTo(randomOffset));
			puttingDistance = true;
		}
	}

	public void FireRocket(Vector3 targetPos)
	{
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0110: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		numRocketsLeft--;
		lastRocketTime = Time.realtimeSinceStartup;
		float num = Random.Range(3.9f, 4.1f);
		bool flag = leftTubeFiredLast;
		leftTubeFiredLast = !leftTubeFiredLast;
		Transform val = (flag ? helicopterBase.rocket_tube_left.transform : helicopterBase.rocket_tube_right.transform);
		Vector3 val2 = val.position + val.forward * 1f;
		Vector3 val3 = targetPos - val2;
		Vector3 val4 = ((Vector3)(ref val3)).normalized;
		if (num > 0f)
		{
			val4 = AimConeUtil.GetModifiedAimConeDirection(num, val4);
		}
		Effect.server.Run(helicopterBase.rocket_fire_effect.resourcePath, helicopterBase, StringPool.Get(flag ? "rocket_tube_left" : "rocket_tube_right"), Vector3.zero, Vector3.forward, null, broadcast: true);
		BaseEntity baseEntity = GameManager.server.CreateEntity(useNapalm ? rocketProjectile_Napalm.resourcePath : rocketProjectile.resourcePath, val2);
		if (!((Object)(object)baseEntity == (Object)null))
		{
			ServerProjectile component = ((Component)baseEntity).GetComponent<ServerProjectile>();
			if (Object.op_Implicit((Object)(object)component))
			{
				component.InitializeVelocity(val4 * component.speed);
			}
			baseEntity.Spawn();
		}
	}

	private void RefreshTargetPosition()
	{
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		if (!((Object)(object)strafe_target == (Object)null))
		{
			timeSinceRefreshed = TimeSince.op_Implicit(0f);
			int mask = LayerMask.GetMask(new string[5] { "Terrain", "World", "Construction", "Water", "Vehicle Large" });
			if (TransformUtil.GetGroundInfo(((Component)strafe_target).transform.position, out var pos, out var _, 100f, LayerMask.op_Implicit(mask), ((Component)this).transform))
			{
				strafe_target_position = pos;
			}
			else
			{
				strafe_target_position = ((Component)strafe_target).transform.position;
			}
		}
	}

	public void InitializeAI()
	{
		_lastThinkTime = Time.realtimeSinceStartup;
	}

	public void OnCurrentStateExit()
	{
		switch (_currentState)
		{
		default:
			State_Idle_Leave();
			break;
		case aiState.MOVE:
			State_Move_Leave();
			break;
		case aiState.STRAFE:
			State_Strafe_Leave();
			break;
		case aiState.ORBIT:
			State_Orbit_Leave();
			break;
		case aiState.ORBITSTRAFE:
			State_OrbitStrafe_Leave();
			break;
		case aiState.FLEE:
			State_Flee_Leave();
			break;
		case aiState.PATROL:
			State_Patrol_Leave();
			break;
		}
	}

	public void ExitCurrentState()
	{
		if (isRetiring || isDead)
		{
			if (shouldDebug)
			{
				Debug.Log((object)"Patrol Helicopter attempting to exit state whilst retiring/dying.");
			}
		}
		else
		{
			OnCurrentStateExit();
			_currentState = aiState.IDLE;
		}
	}

	public float GetTime()
	{
		return Time.realtimeSinceStartup;
	}

	public void AIThink()
	{
		float time = GetTime();
		float timePassed = time - _lastThinkTime;
		_lastThinkTime = time;
		switch (_currentState)
		{
		default:
			State_Idle_Think(timePassed);
			break;
		case aiState.MOVE:
			State_Move_Think(timePassed);
			break;
		case aiState.STRAFE:
			State_Strafe_Think(timePassed);
			break;
		case aiState.ORBIT:
			State_Orbit_Think(timePassed);
			break;
		case aiState.PATROL:
			State_Patrol_Think(timePassed);
			break;
		case aiState.ORBITSTRAFE:
			State_OrbitStrafe_Think(timePassed);
			break;
		case aiState.FLEE:
			State_Flee_Think(timePassed);
			break;
		case aiState.DEATH:
			State_Death_Think(timePassed);
			break;
		}
	}

	public Vector3 GetRandomOffset(Vector3 origin, float minRange, float maxRange = 0f, float minHeight = 20f, float maxHeight = 30f)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		Vector3 onUnitSphere = Random.onUnitSphere;
		onUnitSphere.y = 0f;
		((Vector3)(ref onUnitSphere)).Normalize();
		maxRange = Mathf.Max(minRange, maxRange);
		Vector3 origin2 = origin + onUnitSphere * Random.Range(minRange, maxRange);
		return GetAppropriatePosition(origin2, minHeight, maxHeight);
	}

	public Vector3 GetAppropriatePosition(Vector3 origin, float minHeight = 20f, float maxHeight = 30f)
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		float num = 100f;
		Ray val = default(Ray);
		((Ray)(ref val))..ctor(origin + new Vector3(0f, num, 0f), Vector3.down);
		float num2 = 5f;
		int mask = LayerMask.GetMask(new string[4] { "Terrain", "World", "Construction", "Water" });
		RaycastHit val2 = default(RaycastHit);
		if (Physics.SphereCast(val, num2, ref val2, num * 2f - num2, mask))
		{
			origin = ((RaycastHit)(ref val2)).point;
		}
		origin.y += Random.Range(minHeight, maxHeight);
		return origin;
	}

	public float GetThrottleForDistance(float distToTarget)
	{
		float num = 0f;
		if (distToTarget >= 75f)
		{
			return 1f;
		}
		if (distToTarget >= 50f)
		{
			return 0.75f;
		}
		if (distToTarget >= 25f)
		{
			return 0.33f;
		}
		if (distToTarget >= 5f)
		{
			return 0.05f;
		}
		return 0.05f * (1f - distToTarget / 5f);
	}
}
