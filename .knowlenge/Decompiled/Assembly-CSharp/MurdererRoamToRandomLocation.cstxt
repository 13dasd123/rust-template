using UnityEngine;
using UnityEngine.AI;

public class MurdererRoamToRandomLocation : MurdererBaseNavigateTo
{
	public static Vector3 GetDestination(MurdererContext context)
	{
		if (Time.time - context.Memory.CachedRoamDestinationTime < 0.01f)
		{
			return context.Memory.CachedRoamDestination;
		}
		uint seed = (uint)((float)Mathf.Abs(context.Body.GetInstanceID()) + Time.time);
		for (int i = 0; i < 10; i++)
		{
			Vector2 vector = SeedRandom.Value2D(seed) * 20f;
			if (vector.x < 0f)
			{
				vector.x -= 10f;
			}
			if (vector.x > 0f)
			{
				vector.x += 10f;
			}
			if (vector.y < 0f)
			{
				vector.y -= 10f;
			}
			if (vector.y > 0f)
			{
				vector.y += 10f;
			}
			Vector3 vector2 = context.BodyPosition + new Vector3(vector.x, 0f, vector.y);
			if (TerrainMeta.HeightMap != null)
			{
				vector2.y = TerrainMeta.HeightMap.GetHeight(vector2);
			}
			if (NavMesh.FindClosestEdge(vector2, out var hit, context.Domain.NavAgent.areaMask))
			{
				vector2 = hit.position;
				if (!(WaterLevel.GetWaterDepth(vector2) > 0.01f))
				{
					context.Memory.CachedRoamDestination = vector2;
					context.Memory.CachedRoamDestinationTime = Time.time;
					return vector2;
				}
			}
			else if (NavMesh.SamplePosition(vector2, out hit, 5f, context.Domain.NavAgent.areaMask))
			{
				vector2 = hit.position;
				if (!(WaterLevel.GetWaterDepth(vector2) > 0.01f))
				{
					context.Memory.CachedRoamDestination = vector2;
					context.Memory.CachedRoamDestinationTime = Time.time;
					return vector2;
				}
			}
		}
		return context.Body.transform.position;
	}

	protected override Vector3 _GetDestination(MurdererContext context)
	{
		return GetDestination(context);
	}

	protected override void OnStart(MurdererContext context)
	{
		context.SetFact(Facts.IsRoaming, 1);
	}
}
