using System.Linq;
using UnityEngine;

public abstract class Definition<T> : BaseScriptableObject where T : Definition<T>
{
	private static T[] _all;

	[ReadOnly]
	public int Id;

	[Tooltip("The shortname should be unique. A hash will be generated from it to identify the item type. If this name changes at any point it will make all saves incompatible")]
	public string shortname;

	[Header("Appearance")]
	public Translate.Phrase displayName;

	public static T[] All
	{
		get
		{
			if (_all != null && !Definitions.Refresh)
			{
				return _all;
			}
			Definitions.Refresh = false;
			_all = FileSystem.Load<ObjectList>($"Assets/{typeof(T).Name}s.asset").objects.Where((Object n) => n != null).Cast<T>().ToArray();
			return _all;
		}
	}

	public static T GetById(int forId)
	{
		for (int i = 0; i < All.Length; i++)
		{
			if (All[i].Id == forId)
			{
				return All[i];
			}
		}
		return (T)null;
	}
}
