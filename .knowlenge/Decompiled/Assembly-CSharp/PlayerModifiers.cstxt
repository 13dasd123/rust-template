using System;
using System.Collections.Generic;
using Facepunch;
using Network;
using ProtoBuf;
using UnityEngine;

public class PlayerModifiers : BaseModifiers<BasePlayer>
{
	public override bool OnRpcMessage(BasePlayer player, uint rpc, Message msg)
	{
		TimeWarning val = TimeWarning.New("PlayerModifiers.OnRpcMessage", 0);
		try
		{
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
		return base.OnRpcMessage(player, rpc, msg);
	}

	public static void AddToPlayer(BasePlayer player, List<ModifierDefintion> modifiers)
	{
		if (!((Object)(object)player == (Object)null) && !((Object)(object)player.modifiers == (Object)null) && modifiers != null)
		{
			player.modifiers.Add(modifiers);
		}
	}

	protected override bool IsCompatible(Modifier.ModifierType modType)
	{
		if ((uint)(modType - 20) <= 1u)
		{
			return false;
		}
		return true;
	}

	public override void ServerUpdate(BaseCombatEntity ownerEntity)
	{
		base.ServerUpdate(ownerEntity);
		SendChangesToClient();
	}

	public PlayerModifiers Save(bool forDisk)
	{
		PlayerModifiers val = Pool.Get<PlayerModifiers>();
		val.modifiers = Pool.Get<List<Modifier>>();
		float value = GetValue(Modifier.ModifierType.DigestionBoost, 1f);
		foreach (Modifier item in All)
		{
			if (item != null && (!forDisk || item.Source != Modifier.ModifierSource.Interaction))
			{
				Modifier val2 = item.Save();
				if (!forDisk && value > 1f && IsModifierCompatibleWithDigestionBoost(item.Type))
				{
					val2.duration *= value - 1f;
					val2.timeRemaing *= value - 1f;
					val2.value *= value;
				}
				val.modifiers.Add(val2);
			}
		}
		return val;
	}

	public void Load(PlayerModifiers m, bool fromDisk)
	{
		RemoveAll();
		if (m == null || m.modifiers == null)
		{
			return;
		}
		foreach (Modifier modifier2 in m.modifiers)
		{
			if (modifier2 != null && (!fromDisk || modifier2.source != 2))
			{
				Modifier modifier = new Modifier();
				modifier.Init((Modifier.ModifierType)modifier2.type, (Modifier.ModifierSource)modifier2.source, modifier2.value, modifier2.duration, modifier2.timeRemaing);
				Add(modifier);
			}
		}
	}

	public void SendChangesToClient()
	{
		if (!dirty)
		{
			return;
		}
		SetDirty(flag: false);
		PlayerModifiers val = Save(forDisk: false);
		try
		{
			base.baseEntity.ClientRPC<PlayerModifiers>(RpcTarget.Player("UpdateModifiers", base.baseEntity), val);
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}
}
