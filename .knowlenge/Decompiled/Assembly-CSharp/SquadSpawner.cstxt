using Rust.Ai;
using UnityEngine;

public class SquadSpawner : SpawnGroup
{
	public enum SquadSpawnerLocation
	{
		MilitaryTunnels
	}

	public SquadSpawnerLocation Location;

	public SquadManager Manager;

	public bool IsMainSpawner = true;

	private int defaultMaxPopulation;

	private int defaultNumToSpawnPerTickMax;

	private int defaultNumToSpawnPerTickMin;

	private const float DefaultAggroDistSqr = 400f;

	private const int MaxRejectsInRow = 10;

	private int numRejectsInRow;

	public override void SpawnInitial()
	{
		if (IsMainSpawner)
		{
			if (Location == SquadSpawnerLocation.MilitaryTunnels)
			{
				maxPopulation = SquadManager.squad_max_population_military_tunnels;
				numToSpawnPerTickMax = SquadManager.squad_spawn_per_tick_max_military_tunnels;
				numToSpawnPerTickMin = SquadManager.squad_spawn_per_tick_min_military_tunnels;
				respawnDelayMax = SquadManager.squad_respawn_delay_max_military_tunnels;
				respawnDelayMin = SquadManager.squad_respawn_delay_min_military_tunnels;
			}
		}
		else
		{
			defaultMaxPopulation = maxPopulation;
			defaultNumToSpawnPerTickMax = numToSpawnPerTickMax;
			defaultNumToSpawnPerTickMin = numToSpawnPerTickMin;
		}
		base.SpawnInitial();
	}

	protected override void Spawn(int numToSpawn)
	{
		if (SquadManager.squad_disable)
		{
			maxPopulation = 0;
			numToSpawnPerTickMax = 0;
			numToSpawnPerTickMin = 0;
			return;
		}
		if (numToSpawn == 0)
		{
			if (IsMainSpawner)
			{
				maxPopulation = SquadManager.squad_max_population_military_tunnels;
				numToSpawnPerTickMax = SquadManager.squad_spawn_per_tick_max_military_tunnels;
				numToSpawnPerTickMin = SquadManager.squad_spawn_per_tick_min_military_tunnels;
				numToSpawn = Random.Range(numToSpawnPerTickMin, numToSpawnPerTickMax + 1);
			}
			else
			{
				maxPopulation = defaultMaxPopulation;
				numToSpawnPerTickMax = defaultNumToSpawnPerTickMax;
				numToSpawnPerTickMin = defaultNumToSpawnPerTickMin;
				numToSpawn = Random.Range(numToSpawnPerTickMin, numToSpawnPerTickMax + 1);
			}
		}
		numToSpawn = Mathf.Min(numToSpawn, maxPopulation - base.currentPopulation);
		for (int i = 0; i < numToSpawn; i++)
		{
			Vector3 pos;
			Quaternion rot;
			BaseSpawnPoint spawnPoint = GetSpawnPoint(out pos, out rot);
			if (!spawnPoint)
			{
				continue;
			}
			BaseEntity baseEntity = GameManager.server.CreateEntity(GetPrefab(), pos, rot);
			if (!baseEntity)
			{
				continue;
			}
			baseEntity.Spawn();
			SpawnPointInstance spawnPointInstance = baseEntity.gameObject.AddComponent<SpawnPointInstance>();
			spawnPointInstance.parentSpawnGroup = this;
			spawnPointInstance.parentSpawnPoint = spawnPoint;
			spawnPointInstance.Notify();
			if (Manager != null)
			{
				SquadMember squadMember = baseEntity.gameObject.AddComponent<SquadMember>();
				squadMember.Manager = Manager;
				squadMember.Entity = baseEntity;
				Manager.Add(squadMember);
				NPCPlayerApex nPCPlayerApex = baseEntity as NPCPlayerApex;
				if (nPCPlayerApex != null)
				{
					squadMember.SetupCallbacks(nPCPlayerApex);
				}
			}
		}
	}

	protected override BaseSpawnPoint GetSpawnPoint(out Vector3 pos, out Quaternion rot)
	{
		BaseSpawnPoint baseSpawnPoint = null;
		pos = Vector3.zero;
		rot = Quaternion.identity;
		int num = Random.Range(0, spawnPoints.Length);
		for (int i = 0; i < spawnPoints.Length; i++)
		{
			baseSpawnPoint = spawnPoints[(num + i) % spawnPoints.Length];
			if (!baseSpawnPoint || !baseSpawnPoint.gameObject.activeSelf)
			{
				continue;
			}
			baseSpawnPoint.GetLocation(out var pos2, out var rot2);
			bool flag = true;
			if (SquadManager.squad_try_spawn_intelligently && numRejectsInRow < 10)
			{
				float distSqr;
				Squad squadClosestToPoint = Manager.GetSquadClosestToPoint(pos2, out distSqr);
				if (squadClosestToPoint != null)
				{
					float num2 = squadClosestToPoint.MinSpawnDistanceToEnemy * squadClosestToPoint.MinSpawnDistanceToEnemy;
					foreach (BasePlayer nearbyEnemy in squadClosestToPoint.NearbyEnemies)
					{
						if ((nearbyEnemy.ServerPosition - pos2).sqrMagnitude < num2)
						{
							flag = false;
							break;
						}
					}
				}
				else
				{
					foreach (BasePlayer activePlayer in BasePlayer.activePlayerList)
					{
						if ((activePlayer.ServerPosition - pos2).sqrMagnitude < 400f)
						{
							flag = false;
							break;
						}
					}
				}
			}
			if (flag)
			{
				numRejectsInRow = 0;
				pos = pos2;
				rot = rot2;
				break;
			}
			numRejectsInRow++;
		}
		if ((bool)baseSpawnPoint)
		{
			baseSpawnPoint.GetLocation(out pos, out rot);
		}
		return baseSpawnPoint;
	}
}
