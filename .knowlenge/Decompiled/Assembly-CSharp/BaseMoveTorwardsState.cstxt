using UnityEngine;

public class BaseMoveTorwardsState : BasicAIState
{
	public BaseMoveTorwardsState()
		: base(AIState.MoveTowards)
	{
	}

	public override void StateLeave(BaseAIBrain brain, BaseEntity entity)
	{
		base.StateLeave(brain, entity);
		Stop();
	}

	private void Stop()
	{
		brain.Navigator.Stop();
	}

	public override StateStatus StateThink(float delta, BaseAIBrain brain, BaseEntity entity)
	{
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		base.StateThink(delta, brain, entity);
		BaseEntity baseEntity = brain.Events.Memory.Entity.Get(brain.Events.CurrentInputMemorySlot);
		if ((Object)(object)baseEntity == (Object)null)
		{
			Stop();
			return StateStatus.Error;
		}
		FaceTarget();
		if (!brain.Navigator.SetDestination(((Component)baseEntity).transform.position, brain.Navigator.MoveTowardsSpeed, 0.25f))
		{
			return StateStatus.Error;
		}
		if (!brain.Navigator.Moving)
		{
			return StateStatus.Finished;
		}
		return StateStatus.Running;
	}

	private void FaceTarget()
	{
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		if (brain.Navigator.FaceMoveTowardsTarget)
		{
			BaseEntity baseEntity = brain.Events.Memory.Entity.Get(brain.Events.CurrentInputMemorySlot);
			if ((Object)(object)baseEntity == (Object)null)
			{
				brain.Navigator.ClearFacingDirectionOverride();
			}
			else if (Vector3.Distance(((Component)baseEntity).transform.position, ((Component)brain).transform.position) <= 1.5f)
			{
				brain.Navigator.SetFacingDirectionEntity(baseEntity);
			}
		}
	}
}
