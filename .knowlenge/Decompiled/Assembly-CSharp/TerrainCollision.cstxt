using System;
using System.Collections.Generic;
using Facepunch;
using Unity.Collections;
using UnityEngine;

public class TerrainCollision : TerrainExtension
{
	public TerrainIgnoreGrid TerrainIgnoreGrid;

	public ListDictionary<Collider, List<Collider>> ignoredColliders;

	public TerrainCollider terrainCollider;

	public const float IgnoreRadius = 0.01f;

	public override void Setup()
	{
		ignoredColliders = new ListDictionary<Collider, List<Collider>>();
		terrainCollider = ((Component)terrain).GetComponent<TerrainCollider>();
		TerrainIgnoreGrid = new TerrainIgnoreGrid();
	}

	private void OnDestroy()
	{
		TerrainIgnoreGrid.Dispose();
	}

	public void Clear()
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		if (!Object.op_Implicit((Object)(object)terrainCollider))
		{
			return;
		}
		Enumerator<Collider> enumerator = ignoredColliders.Keys.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				Physics.IgnoreCollision(enumerator.Current, (Collider)(object)terrainCollider, false);
			}
		}
		finally
		{
			((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
		}
		ignoredColliders.Clear();
	}

	public void Reset(Collider collider)
	{
		if (Object.op_Implicit((Object)(object)terrainCollider) && Object.op_Implicit((Object)(object)collider))
		{
			Physics.IgnoreCollision(collider, (Collider)(object)terrainCollider, false);
			ignoredColliders.Remove(collider);
		}
	}

	public bool GetIgnore(Vector3 pos, float radius = 0.01f)
	{
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		TimeWarning val = TimeWarning.New("TerrainCollision.GetIgnore", 0);
		try
		{
			if (!TerrainIgnoreGrid.Check(pos, radius))
			{
				return false;
			}
			return GamePhysics.CheckSphere<TerrainCollisionTrigger>(pos, radius, 262144, (QueryTriggerInteraction)2);
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public void GetIgnore(Span<bool> results, ReadOnlySpan<Vector3> positions, ReadOnlySpan<float> radii)
	{
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		BufferList<int> val = Pool.Get<BufferList<int>>();
		for (int i = 0; i < positions.Length; i++)
		{
			if (TerrainIgnoreGrid.Check(positions[i], radii[i]))
			{
				val.Add(i);
			}
			else
			{
				results[i] = false;
			}
		}
		NativeArray<Vector3> val2 = default(NativeArray<Vector3>);
		val2..ctor(val.Count, (Allocator)2, (NativeArrayOptions)0);
		NativeArray<float> val3 = default(NativeArray<float>);
		val3..ctor(val.Count, (Allocator)2, (NativeArrayOptions)0);
		for (int j = 0; j < val.Count; j++)
		{
			int index = val[j];
			val2[j] = positions[index];
			val3[j] = radii[index];
		}
		GamePhysics.CheckSphere<TerrainCollisionTrigger>(results, NativeArray<Vector3>.op_Implicit(ref val2), NativeArray<float>.op_Implicit(ref val3), 262144, (QueryTriggerInteraction)2);
		CollectionUtil.ScatterOutInplace(results, val.ContentReadOnlySpan(), defValue: false);
		Pool.FreeUnmanaged<int>(ref val);
	}

	public bool GetIgnore(RaycastHit hit)
	{
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		TimeWarning val = TimeWarning.New("TerrainCollision.GetIgnore", 0);
		try
		{
			if (!(((RaycastHit)(ref hit)).collider is TerrainCollider))
			{
				return false;
			}
			if (!TerrainIgnoreGrid.Check(((RaycastHit)(ref hit)).point))
			{
				return false;
			}
			return ((RaycastHit)(ref hit)).collider is TerrainCollider && GetIgnore(((RaycastHit)(ref hit)).point);
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public bool GetIgnore(Collider collider)
	{
		if (!Object.op_Implicit((Object)(object)terrainCollider) || !Object.op_Implicit((Object)(object)collider))
		{
			return false;
		}
		return ignoredColliders.Contains(collider);
	}

	public void SetIgnore(Collider collider, Collider trigger, bool ignore = true)
	{
		if (!Object.op_Implicit((Object)(object)terrainCollider) || !Object.op_Implicit((Object)(object)collider))
		{
			return;
		}
		if (!GetIgnore(collider))
		{
			if (ignore)
			{
				List<Collider> list = new List<Collider> { trigger };
				Physics.IgnoreCollision(collider, (Collider)(object)terrainCollider, true);
				ignoredColliders.Add(collider, list);
			}
			return;
		}
		List<Collider> list2 = ignoredColliders[collider];
		if (ignore)
		{
			if (!list2.Contains(trigger))
			{
				list2.Add(trigger);
			}
		}
		else if (list2.Contains(trigger))
		{
			list2.Remove(trigger);
		}
	}

	protected void LateUpdate()
	{
		if (ignoredColliders == null)
		{
			return;
		}
		for (int i = 0; i < ignoredColliders.Count; i++)
		{
			KeyValuePair<Collider, List<Collider>> byIndex = ignoredColliders.GetByIndex(i);
			Collider key = byIndex.Key;
			List<Collider> value = byIndex.Value;
			if ((Object)(object)key == (Object)null)
			{
				ignoredColliders.RemoveAt(i--);
			}
			else if (value.Count == 0)
			{
				Physics.IgnoreCollision(key, (Collider)(object)terrainCollider, false);
				ignoredColliders.RemoveAt(i--);
			}
		}
	}
}
