using UnityEngine;
using UnityEngine.Rendering;

public class SkinnedMeshRendererInfo : ComponentInfo<SkinnedMeshRenderer>
{
	public ShadowCastingMode shadows;

	public Material material;

	public Mesh mesh;

	public Bounds bounds;

	public Mesh cachedMesh;

	public SkinnedMeshRendererCache.RigInfo cachedRig;

	private Transform root;

	private Transform[] bones;

	public override void Reset()
	{
		if (!(component == null))
		{
			component.shadowCastingMode = shadows;
			if ((bool)material)
			{
				component.sharedMaterial = material;
			}
			component.sharedMesh = mesh;
			component.localBounds = bounds;
		}
	}

	public override void Setup()
	{
		shadows = component.shadowCastingMode;
		material = component.sharedMaterial;
		mesh = component.sharedMesh;
		bounds = component.localBounds;
		RefreshCache();
	}

	private void RefreshCache()
	{
		if (cachedMesh != component.sharedMesh)
		{
			if (cachedMesh != null)
			{
				SkinnedMeshRendererCache.Add(cachedMesh, cachedRig);
			}
			cachedMesh = component.sharedMesh;
			cachedRig = SkinnedMeshRendererCache.Get(component);
		}
	}

	public void BuildRig()
	{
		RefreshCache();
		Vector3 position = base.transform.position;
		Quaternion rotation = base.transform.rotation;
		base.transform.rotation = Quaternion.identity;
		base.transform.position = Vector3.zero;
		Transform[] array = new Transform[cachedRig.transforms.Length];
		for (int i = 0; i < cachedRig.transforms.Length; i++)
		{
			GameObject gameObject = new GameObject(cachedRig.bones[i]);
			gameObject.transform.position = cachedRig.transforms[i].MultiplyPoint(Vector3.zero);
			gameObject.transform.rotation = Quaternion.LookRotation(cachedRig.transforms[i].GetColumn(2), cachedRig.transforms[i].GetColumn(1));
			gameObject.transform.SetParent(base.transform, worldPositionStays: true);
			array[i] = gameObject.transform;
		}
		GameObject gameObject2 = new GameObject("root");
		gameObject2.transform.position = cachedRig.rootTransform.MultiplyPoint(Vector3.zero);
		gameObject2.transform.rotation = Quaternion.LookRotation(cachedRig.rootTransform.GetColumn(2), cachedRig.rootTransform.GetColumn(1));
		gameObject2.transform.SetParent(base.transform, worldPositionStays: true);
		component.rootBone = gameObject2.transform;
		component.bones = array;
		base.transform.rotation = rotation;
		base.transform.position = position;
	}
}
