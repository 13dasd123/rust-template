using System.Collections.Generic;
using ConVar;
using Facepunch;
using Rust;
using UnityEngine;

public class ItemModSwap : ItemMod
{
	public GameObjectRef actionEffect;

	public ItemAmount[] becomeItem;

	public bool sendPlayerPickupNotification;

	public bool sendPlayerDropNotification;

	public float xpScale = 1f;

	public List<ItemAmount> RandomOptions;

	public override void DoAction(Item item, BasePlayer player)
	{
		if (item.amount < 1)
		{
			return;
		}
		ItemAmount[] array = becomeItem;
		foreach (ItemAmount itemAmount in array)
		{
			if (!itemAmount.itemDef.IsAllowedInEra(EraRestriction.Default))
			{
				continue;
			}
			Item item2 = ItemManager.Create(itemAmount.itemDef, (int)itemAmount.amount, 0uL);
			if (item2 != null)
			{
				if (!item2.MoveToContainer(item.parent))
				{
					player.GiveItem(item2);
				}
				if (sendPlayerPickupNotification)
				{
					player.Command("note.inv", item2.info.itemid, itemAmount.amount);
				}
			}
		}
		if (RandomOptions.Count > 0)
		{
			List<ItemAmount> obj = null;
			List<ItemAmount> list = RandomOptions;
			if (ConVar.Server.Era != 0)
			{
				obj = Facepunch.Pool.Get<List<ItemAmount>>();
				list = obj;
				foreach (ItemAmount randomOption in RandomOptions)
				{
					if (randomOption.itemDef.IsAllowedInEra(EraRestriction.Default))
					{
						obj.Add(randomOption);
					}
				}
			}
			if (list.Count > 0)
			{
				int index = Random.Range(0, list.Count);
				Item item3 = ItemManager.Create(list[index].itemDef, (int)list[index].amount, 0uL);
				if (item3 != null)
				{
					if (!item3.MoveToContainer(item.parent))
					{
						player.GiveItem(item3);
					}
					if (sendPlayerPickupNotification)
					{
						player.Command("note.inv", item3.info.itemid, item3.amount);
					}
				}
			}
			if (obj != null)
			{
				Facepunch.Pool.FreeUnmanaged(ref obj);
			}
		}
		if (sendPlayerDropNotification)
		{
			player.Command("note.inv", item.info.itemid, -1);
		}
		if (actionEffect.isValid)
		{
			Effect.server.Run(actionEffect.resourcePath, player.transform.position, Vector3.up);
		}
		item.UseItem();
	}
}
