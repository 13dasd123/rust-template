using System.Collections.Generic;
using ConVar;
using Facepunch;
using Rust;
using UnityEngine;

public class ItemModSwap : ItemMod
{
	public GameObjectRef actionEffect;

	public ItemAmount[] becomeItem;

	public bool sendPlayerPickupNotification;

	public bool sendPlayerDropNotification;

	public float xpScale = 1f;

	public List<ItemAmount> RandomOptions;

	public List<float> RandomWeights;

	public Phrase OwnershipPhrase;

	public override void DoAction(Item item, BasePlayer player)
	{
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01da: Unknown result type (might be due to invalid IL or missing references)
		//IL_01df: Unknown result type (might be due to invalid IL or missing references)
		if (item.amount < 1 && RandomWeights.Count == 0 && RandomOptions.Count == 0)
		{
			return;
		}
		ItemAmount[] array = becomeItem;
		foreach (ItemAmount itemAmount in array)
		{
			if (itemAmount.itemDef.IsAllowedInEra((EraRestriction)0))
			{
				SpawnItem(itemAmount, player, item.parent);
			}
		}
		if (RandomOptions.Count > 0)
		{
			List<ItemAmount> list = null;
			List<float> list2 = null;
			List<ItemAmount> options = RandomOptions;
			List<float> weights = RandomWeights;
			if ((int)ConVar.Server.Era != 0)
			{
				list = Pool.Get<List<ItemAmount>>();
				list2 = Pool.Get<List<float>>();
				options = list;
				if (RandomWeights.Count != 0 && RandomWeights.Count == RandomOptions.Count)
				{
					weights = list2;
				}
				for (int j = 0; j < RandomOptions.Count; j++)
				{
					ItemAmount itemAmount2 = RandomOptions[j];
					if (itemAmount2.itemDef.IsAllowedInEra((EraRestriction)0))
					{
						if (j < RandomWeights.Count)
						{
							list2.Add(RandomWeights.Count);
						}
						list.Add(itemAmount2);
					}
				}
			}
			ItemAmount itemAmount3 = ((RandomWeights.Count == 0 || RandomWeights.Count != RandomOptions.Count) ? PickRandomChoice(options) : PickWeightedRandomChoice(options, weights));
			if (itemAmount3 != null)
			{
				SpawnItem(itemAmount3, player, item.parent);
			}
			if (list != null)
			{
				Pool.FreeUnmanaged<ItemAmount>(ref list);
			}
			if (list2 != null)
			{
				Pool.FreeUnmanaged<float>(ref list2);
			}
		}
		if (sendPlayerDropNotification)
		{
			player.Command("note.inv", item.info.itemid, -1);
		}
		if (actionEffect.isValid)
		{
			Effect.server.Run(actionEffect.resourcePath, ((Component)player).transform.position, Vector3.up);
		}
		item.UseItem();
	}

	private void SpawnItem(ItemAmount itemAmount, BasePlayer player, ItemContainer container)
	{
		Item item = ItemManager.Create(itemAmount.itemDef, (int)itemAmount.amount, 0uL);
		if (item != null)
		{
			if (OwnershipPhrase != null && !string.IsNullOrEmpty(OwnershipPhrase.token))
			{
				item.SetItemOwnership(player, OwnershipPhrase);
			}
			else
			{
				item.SetItemOwnership(player, ItemOwnershipPhrases.GenericPhrase);
			}
			AugmentItem(item);
			if (!item.MoveToContainer(container))
			{
				player.GiveItem(item);
			}
			if (sendPlayerPickupNotification)
			{
				player.Command("note.inv", item.info.itemid, item.amount);
			}
		}
	}

	protected virtual void AugmentItem(Item item)
	{
	}

	private ItemAmount PickRandomChoice(List<ItemAmount> options)
	{
		int index = Random.Range(0, options.Count);
		return options[index];
	}

	private ItemAmount PickWeightedRandomChoice(List<ItemAmount> options, List<float> weights)
	{
		float num = 0f;
		foreach (float weight in weights)
		{
			num += weight;
		}
		float num2 = Random.Range(0f, num);
		float num3 = 0f;
		for (int i = 0; i < options.Count; i++)
		{
			num3 += weights[i];
			if (num2 <= num3)
			{
				return options[i];
			}
		}
		return options[options.Count - 1];
	}
}
