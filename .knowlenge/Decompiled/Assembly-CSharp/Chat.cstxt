using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Runtime.InteropServices;
using ConVar;
using Facepunch;
using Facepunch.Math;
using Oxide.Core;
using UnityEngine;

[Factory("chat")]
public class Chat : ConsoleSystem
{
	[StructLayout(LayoutKind.Sequential, Size = 1)]
	public struct ChatEntry
	{
		public string Message { get; set; }

		public ulong UserId { get; set; }

		public string Username { get; set; }

		public string Color { get; set; }

		public int Time { get; set; }
	}

	private const float textRange = 50f;

	private const float textVolumeBoost = 0.2f;

	[ServerVar]
	[ClientVar]
	public static bool enabled = true;

	private static List<ChatEntry> History = new List<ChatEntry>();

	[ServerVar]
	public static bool serverlog = true;

	public static void Broadcast(string message, string username = "SERVER", string color = "#eee", ulong userid = 0uL)
	{
		if (Interface.CallHook("OnServerMessage", message, username, color, userid) == null)
		{
			ConsoleNetwork.BroadcastToAllClients("chat.add", 0, "<color=" + color + ">" + username + "</color> " + message);
			ChatEntry chatEntry = default(ChatEntry);
			chatEntry.Message = message;
			chatEntry.UserId = userid;
			chatEntry.Username = username;
			chatEntry.Color = color;
			chatEntry.Time = Epoch.Current;
			ChatEntry chatEntry2 = chatEntry;
			History.Add(chatEntry2);
			RCon.Broadcast(RCon.LogType.Chat, chatEntry2);
		}
	}

	[ServerUserVar]
	public static void say(Arg arg)
	{
		if (!enabled)
		{
			arg.ReplyWith("Chat is disabled.");
			return;
		}
		BasePlayer basePlayer = ArgEx.Player(arg);
		if (!basePlayer || basePlayer.HasPlayerFlag(BasePlayer.PlayerFlags.ChatMute))
		{
			return;
		}
		if (!basePlayer.IsAdmin && !basePlayer.IsDeveloper)
		{
			if (basePlayer.NextChatTime == 0f)
			{
				basePlayer.NextChatTime = UnityEngine.Time.realtimeSinceStartup - 30f;
			}
			if (basePlayer.NextChatTime > UnityEngine.Time.realtimeSinceStartup)
			{
				basePlayer.NextChatTime += 2f;
				float num = basePlayer.NextChatTime - UnityEngine.Time.realtimeSinceStartup;
				ConsoleNetwork.SendClientCommand(basePlayer.net.connection, "chat.add", 0, "You're chatting too fast - try again in " + (num + 0.5f).ToString("0") + " seconds");
				if (num > 120f)
				{
					basePlayer.Kick("Chatting too fast");
				}
				return;
			}
		}
		string text = arg.GetString(0, "text").Trim();
		if (text.Length > 128)
		{
			text = text.Substring(0, 128);
		}
		if (text.Length <= 0 || Interface.CallHook("IOnPlayerChat", arg) != null || text.StartsWith("/") || text.StartsWith("\\") || (text.Contains("<") && (StringEx.Contains(text, "<size", CompareOptions.IgnoreCase) || StringEx.Contains(text, "<color", CompareOptions.IgnoreCase) || StringEx.Contains(text, "<material", CompareOptions.IgnoreCase) || StringEx.Contains(text, "<quad", CompareOptions.IgnoreCase) || StringEx.Contains(text, "<b>", CompareOptions.IgnoreCase) || StringEx.Contains(text, "<i>", CompareOptions.IgnoreCase))))
		{
			return;
		}
		if (serverlog)
		{
			ServerConsole.PrintColoured(ConsoleColor.DarkYellow, basePlayer.displayName + ": ", ConsoleColor.DarkGreen, text);
			DebugEx.Log($"[CHAT] {basePlayer.ToString()} : {text}", StackTraceLogType.None);
		}
		string text2 = "#5af";
		if (basePlayer.IsAdmin)
		{
			text2 = "#af5";
		}
		if (basePlayer.IsDeveloper)
		{
			text2 = "#fa5";
		}
		string displayName = basePlayer.displayName;
		displayName = displayName.Replace('<', '[').Replace('>', ']');
		basePlayer.NextChatTime = UnityEngine.Time.realtimeSinceStartup + 1.5f;
		ChatEntry chatEntry = default(ChatEntry);
		chatEntry.Message = text;
		chatEntry.UserId = basePlayer.userID;
		chatEntry.Username = basePlayer.displayName;
		chatEntry.Color = text2;
		chatEntry.Time = Epoch.Current;
		ChatEntry chatEntry2 = chatEntry;
		History.Add(chatEntry2);
		RCon.Broadcast(RCon.LogType.Chat, chatEntry2);
		if (Server.globalchat)
		{
			ConsoleNetwork.BroadcastToAllClients("chat.add2", basePlayer.userID, text, displayName, text2, 1f);
			arg.ReplyWith(string.Empty);
			return;
		}
		float num2 = 2500f;
		foreach (BasePlayer activePlayer in BasePlayer.activePlayerList)
		{
			float sqrMagnitude = (activePlayer.transform.position - basePlayer.transform.position).sqrMagnitude;
			if (!(sqrMagnitude > num2))
			{
				ConsoleNetwork.SendClientCommand(activePlayer.net.connection, "chat.add2", basePlayer.userID, text, displayName, text2, Mathf.Clamp01(num2 - sqrMagnitude + 0.2f));
			}
		}
		arg.ReplyWith(string.Empty);
	}

	[ServerVar]
	[Help("Return the last x lines of the console. Default is 200")]
	public static IEnumerable<ChatEntry> tail(Arg arg)
	{
		int @int = arg.GetInt(0, 200);
		int num = History.Count - @int;
		if (num < 0)
		{
			num = 0;
		}
		return History.Skip(num);
	}

	[ServerVar]
	[Help("Search the console for a particular string")]
	public static IEnumerable<ChatEntry> search(Arg arg)
	{
		string search = arg.GetString(0, null);
		if (search == null)
		{
			return Enumerable.Empty<ChatEntry>();
		}
		return History.Where((ChatEntry x) => x.Message.Length < 4096 && StringEx.Contains(x.Message, search, CompareOptions.IgnoreCase));
	}
}
