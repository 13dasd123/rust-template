using UnityEngine;

public class DangerZone
{
	public float Radius;

	private float score;

	private float lastActiveTime = Time.realtimeSinceStartup;

	private const float isStaleTime = 5f;

	private Vector3 centre;

	private BaseEntity parent;

	public Vector3 Centre
	{
		get
		{
			//IL_0021: Unknown result type (might be due to invalid IL or missing references)
			//IL_0026: Unknown result type (might be due to invalid IL or missing references)
			//IL_000f: Unknown result type (might be due to invalid IL or missing references)
			if ((Object)(object)parent == (Object)null)
			{
				return centre;
			}
			return ((Component)parent).transform.TransformPoint(centre);
		}
	}

	public float Score
	{
		get
		{
			return score;
		}
		set
		{
			score = value;
			lastActiveTime = Time.realtimeSinceStartup;
		}
	}

	public float LastActiveTime => lastActiveTime;

	public DangerZone(Vector3 centre, float radius = 20f, BaseEntity parent = null)
	{
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)parent == (Object)null)
		{
			this.centre = centre;
		}
		else
		{
			this.centre = ((Component)parent).transform.InverseTransformPoint(centre);
		}
		this.parent = parent;
		Radius = radius;
	}

	public bool IsPointInside(Vector3 point)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		return Vector3.Distance(point, Centre) <= Radius;
	}

	public bool IsStale()
	{
		return Time.realtimeSinceStartup - lastActiveTime > 5f;
	}

	public Vector3 GetNearestEdge(Vector3 point)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = point - Centre;
		Vector3 normalized = ((Vector3)(ref val)).normalized;
		normalized.y = 0f;
		return Centre + normalized * Radius;
	}
}
