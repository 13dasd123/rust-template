using System.Text.RegularExpressions;
using UnityEngine;

public static class MapHelper
{
	public static Vector2i? StringToGrid(string text)
	{
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		Match match = new Regex("^([a-zA-Z]+)(\\d+)$").Match(text);
		if (!match.Success)
		{
			return null;
		}
		int num = 0;
		string text2 = match.Groups[1].Value.ToLower();
		foreach (char c in text2)
		{
			num = num * 26 + c - 97 + 1;
		}
		num--;
		if (!int.TryParse(match.Groups[2].Value, out var result))
		{
			return null;
		}
		return new Vector2i(num, result);
	}

	public static Vector3 GridToPosition(Vector2i grid)
	{
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		float num = 146.28572f;
		int num2 = Mathf.FloorToInt((float)World.Size / num + 0.001f);
		float num3 = World.Size / num2;
		Vector2 val = default(Vector2);
		((Vector2)(ref val))..ctor((float)(0L - (long)World.Size) / 2f, (float)World.Size / 2f);
		Vector2 val2 = default(Vector2);
		((Vector2)(ref val2))..ctor((float)grid.x * num3, (float)grid.y * num3);
		return new Vector3(val.x + val2.x, 0f, val.y - val2.y) + new Vector3(num3 / 2f, 0f, num3 / -2f);
	}

	public static Vector3? StringToPosition(string text)
	{
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		Vector2i? val = StringToGrid(text);
		if (!val.HasValue)
		{
			return null;
		}
		return GridToPosition(val.Value);
	}

	public static string PositionToString(Vector3 position)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		return GridToString(PositionToGrid(position));
	}

	public static Vector2i PositionToGrid(Vector3 position)
	{
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		float num = 146.28572f;
		int num2 = Mathf.FloorToInt((float)World.Size / num + 0.001f);
		float num3 = World.Size / num2;
		Vector2 val = default(Vector2);
		((Vector2)(ref val))..ctor((float)(0L - (long)World.Size) / 2f, (float)World.Size / 2f);
		Vector2 val2 = new Vector2(position.x - val.x, val.y - position.z);
		int num4 = Mathf.FloorToInt(val2.x / num3);
		int num5 = Mathf.FloorToInt(val2.y / num3);
		return new Vector2i(num4, num5);
	}

	public static string GridToString(Vector2i grid)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		grid.x = Mathf.Max(grid.x, 0);
		int num = grid.x + 1;
		string text = "";
		while (num > 0)
		{
			num--;
			text = (char)(65 + num % 26) + text;
			num /= 26;
		}
		return $"{text}{grid.y}";
	}
}
