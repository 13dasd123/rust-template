using FIMSpace.GroundFitter;
using UnityEngine;

public class FGroundFitter_MovementLook : FGroundFitter_Movement
{
	[Header("Movement Look Options")]
	public Transform targetOfLook;

	[Range(0f, 1f)]
	public float FollowSpeed = 1f;

	public bool localOffset;

	private Vector3 targetPos;

	protected override void HandleTransforming()
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
		base.HandleTransforming();
		if (MoveVector != Vector3.zero)
		{
			SetLookAtPosition(((Component)this).transform.position + Quaternion.Euler(0f, ((Component)Camera.main).transform.eulerAngles.y + RotationOffset, 0f) * Vector3.forward * 10f);
		}
		if (Object.op_Implicit((Object)(object)targetOfLook))
		{
			Vector3 val = targetPos;
			if (localOffset)
			{
				val = ((Component)this).transform.TransformPoint(targetPos);
			}
			if (FollowSpeed >= 1f)
			{
				targetOfLook.position = val;
			}
			else
			{
				targetOfLook.position = Vector3.Lerp(targetOfLook.position, val, Mathf.Lerp(1f, 30f, FollowSpeed) * Time.deltaTime);
			}
		}
	}

	private void SetLookAtPosition(Vector3 tPos)
	{
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		if (!localOffset)
		{
			targetPos = tPos + Vector3.up;
		}
		else
		{
			targetPos = ((Component)this).transform.InverseTransformPoint(tPos + Vector3.up);
		}
	}
}
