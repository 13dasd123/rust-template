#define UNITY_ASSERTIONS
using System;
using ConVar;
using Network;
using UnityEngine;
using UnityEngine.Assertions;

public class BaseMountable : BaseCombatEntity
{
	private BasePlayer _mounted;

	public bool mountedPlayerVisible;

	public bool mountedPlayerFrozen;

	public Transform mountAnchor;

	public Transform dismountAnchor;

	public override bool OnRpcMessage(BasePlayer player, uint rpc, Message msg)
	{
		using (TimeWarning.New("BaseMountable.OnRpcMessage"))
		{
			if (rpc == 1291113684 && player != null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log(string.Concat("SV_RPCMessage: ", player, " - RPC_WantsDismount "));
				}
				using (TimeWarning.New("RPC_WantsDismount"))
				{
					try
					{
						using (TimeWarning.New("Call"))
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage msg2 = rPCMessage;
							RPC_WantsDismount(msg2);
						}
					}
					catch (Exception exception)
					{
						player.Kick("RPC Error in RPC_WantsDismount");
						Debug.LogException(exception);
					}
				}
				return true;
			}
			if (rpc == 1245658160 && player != null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log(string.Concat("SV_RPCMessage: ", player, " - RPC_WantsMount "));
				}
				using (TimeWarning.New("RPC_WantsMount"))
				{
					try
					{
						using (TimeWarning.New("Call"))
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage msg3 = rPCMessage;
							RPC_WantsMount(msg3);
						}
					}
					catch (Exception exception2)
					{
						player.Kick("RPC Error in RPC_WantsMount");
						Debug.LogException(exception2);
					}
				}
				return true;
			}
		}
		return base.OnRpcMessage(player, rpc, msg);
	}

	public bool IsMounted()
	{
		return false;
	}

	public override bool CanPickup(BasePlayer player)
	{
		return !IsMounted();
	}

	public override void OnKilled(HitInfo info)
	{
		DismountPlayer();
		base.OnKilled(info);
	}

	[RPC_Server]
	public void RPC_WantsMount(RPCMessage msg)
	{
		BasePlayer player = msg.player;
		if (!(_mounted != null))
		{
			MountPlayer(player);
		}
	}

	[RPC_Server]
	public void RPC_WantsDismount(RPCMessage msg)
	{
		BasePlayer player = msg.player;
		if (!(player != _mounted))
		{
			DismountPlayer();
		}
	}

	public void MountPlayer(BasePlayer player)
	{
	}

	public void DismountPlayer()
	{
	}
}
