using System.Collections;
using Apex.Ai.HTN;
using Apex.Serialization;
using UnityEngine;

public class MurdererLookAround : OperatorBase<MurdererContext>
{
	[ApexSerialization]
	private float _lookAroundTime = 1f;

	public override void Execute(MurdererContext context)
	{
		context.SetFact(Facts.IsLookingAround, value: true);
		context.Body.StartCoroutine(LookAroundAsync(context));
	}

	public override OperatorStateType Tick(MurdererContext context, PrimitiveTaskSelector task)
	{
		if (context.IsFact(Facts.IsLookingAround))
		{
			return OperatorStateType.Running;
		}
		ApplyExpectedEffects(context, task);
		return OperatorStateType.Complete;
	}

	private IEnumerator LookAroundAsync(MurdererContext context)
	{
		yield return CoroutineEx.waitForSeconds(_lookAroundTime);
		if (context.IsFact(Facts.CanSeeEnemy))
		{
			context.SetFact(Facts.IsSearching, value: false);
		}
		context.SetFact(Facts.IsLookingAround, value: false);
	}

	public override void Abort(MurdererContext context, PrimitiveTaskSelector task)
	{
		context.SetFact(Facts.IsSearching, value: false);
		context.SetFact(Facts.IsLookingAround, value: false);
	}
}
