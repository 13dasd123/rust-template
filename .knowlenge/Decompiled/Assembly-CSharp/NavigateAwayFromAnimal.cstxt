using Apex.Serialization;
using UnityEngine;
using UnityEngine.AI;

public class NavigateAwayFromAnimal : BaseNavigateTo
{
	[ApexSerialization]
	private bool DisableIsAvoidingAnimalOnComplete = true;

	public static Vector3 GetDestination(ScientistContext context)
	{
		if (context.Memory.PrimaryKnownAnimal.Animal != null)
		{
			Vector3 normalized = (context.BodyPosition - context.Memory.PrimaryKnownAnimal.Animal.transform.position).normalized;
			if (NavMesh.FindClosestEdge(context.BodyPosition + normalized * 10f, out var hit, context.Domain.NavAgent.areaMask))
			{
				context.Memory.LastClosestEdgeNormal = hit.normal;
				return hit.position;
			}
		}
		return context.Body.transform.position;
	}

	protected override Vector3 _GetDestination(ScientistContext context)
	{
		return GetDestination(context);
	}

	protected override void OnPreStart(ScientistContext context)
	{
		context.Domain.NavAgent.stoppingDistance = 0.1f;
	}

	protected override void OnStart(ScientistContext context)
	{
		context.SetFact(Facts.IsAvoidingAnimal, value: true);
	}

	protected override void OnPathFailed(ScientistContext context)
	{
		context.SetFact(Facts.IsAvoidingAnimal, value: false);
		context.Domain.NavAgent.stoppingDistance = 1f;
	}

	protected override void OnPathComplete(ScientistContext context)
	{
		if (DisableIsAvoidingAnimalOnComplete)
		{
			context.SetFact(Facts.IsAvoidingAnimal, value: false);
		}
		context.Domain.NavAgent.stoppingDistance = 1f;
	}
}
