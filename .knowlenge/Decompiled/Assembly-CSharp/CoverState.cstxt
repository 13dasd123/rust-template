using UnityEngine;

public class CoverState : BasicAIState
{
	public CoverState()
		: base(AIState.Cover)
	{
	}

	public override void StateEnter(BaseAIBrain brain, BaseEntity entity)
	{
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		base.StateEnter(brain, entity);
		HumanNPC humanNPC = entity as HumanNPC;
		humanNPC.SetDucked(flag: true);
		AIPoint aIPoint = brain.Events.Memory.AIPoint.Get(4);
		if ((Object)(object)aIPoint != (Object)null)
		{
			aIPoint.SetUsedBy(entity);
		}
		if (!(humanNPC.healthFraction <= brain.HealBelowHealthFraction) || !(Random.Range(0f, 1f) <= brain.HealChance))
		{
			return;
		}
		Item item = humanNPC.FindHealingItem();
		if (item != null)
		{
			BaseEntity baseEntity = brain.Events.Memory.Entity.Get(brain.Events.CurrentInputMemorySlot);
			if ((Object)(object)baseEntity == (Object)null || (!brain.Senses.Memory.IsLOS(baseEntity) && Vector3.Distance(((Component)entity).transform.position, ((Component)baseEntity).transform.position) >= 5f))
			{
				humanNPC.UseHealingItem(item);
			}
		}
	}

	public override void StateLeave(BaseAIBrain brain, BaseEntity entity)
	{
		base.StateLeave(brain, entity);
		(entity as HumanNPC).SetDucked(flag: false);
		brain.Navigator.ClearFacingDirectionOverride();
		AIPoint aIPoint = brain.Events.Memory.AIPoint.Get(4);
		if ((Object)(object)aIPoint != (Object)null)
		{
			aIPoint.ClearIfUsedBy(entity);
		}
	}

	public override StateStatus StateThink(float delta, BaseAIBrain brain, BaseEntity entity)
	{
		base.StateThink(delta, brain, entity);
		HumanNPC humanNPC = entity as HumanNPC;
		BaseEntity baseEntity = brain.Events.Memory.Entity.Get(brain.Events.CurrentInputMemorySlot);
		float num = humanNPC.AmmoFractionRemaining();
		if (num == 0f || ((Object)(object)baseEntity != (Object)null && !brain.Senses.Memory.IsLOS(baseEntity) && num < 0.25f))
		{
			humanNPC.AttemptReload();
		}
		if ((Object)(object)baseEntity != (Object)null)
		{
			brain.Navigator.SetFacingDirectionEntity(baseEntity);
		}
		return StateStatus.Running;
	}
}
