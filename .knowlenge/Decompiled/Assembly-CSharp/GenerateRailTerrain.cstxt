using System.Linq;
using UnityEngine;

public class GenerateRailTerrain : ProceduralComponent
{
	public const int SmoothenLoops = 8;

	public const int SmoothenIterations = 8;

	public const int SmoothenY = 64;

	public const int SmoothenXZ = 32;

	public const int TransitionSteps = 8;

	private float AdjustTerrainFade(float xn, float zn)
	{
		int topology = TerrainMeta.TopologyMap.GetTopology(xn, zn);
		if ((topology & 0x4000) != 0)
		{
			return 0f;
		}
		if ((topology & 0x8000) != 0)
		{
			return 0.5f;
		}
		return 1f;
	}

	private float SmoothenFilter(PathList path, int index)
	{
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		float num = (path.Start ? Mathf.SmoothStep(0f, 1f, Mathf.InverseLerp(0f, 8f, (float)index)) : 1f);
		int topology = TerrainMeta.TopologyMap.GetTopology(path.Path.Points[index]);
		if ((topology & 0x4000) != 0)
		{
			return 0.1f * num;
		}
		if ((topology & 0x8000) != 0)
		{
			return 0.3f * num;
		}
		return num;
	}

	public override void Process(uint seed)
	{
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0226: Unknown result type (might be due to invalid IL or missing references)
		//IL_022b: Unknown result type (might be due to invalid IL or missing references)
		//IL_022e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0242: Unknown result type (might be due to invalid IL or missing references)
		//IL_026e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0270: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		TerrainHeightMap heightMap = TerrainMeta.HeightMap;
		TerrainTopologyMap topologyMap = TerrainMeta.TopologyMap;
		for (int j = 0; j < 8; j++)
		{
			foreach (PathList rail in TerrainMeta.Path.Rails.AsEnumerable().Reverse())
			{
				PathInterpolator path = rail.Path;
				Vector3[] points = path.Points;
				for (int k = 0; k < points.Length; k++)
				{
					Vector3 val = points[k];
					float num = heightMap.GetHeight(val);
					int topology = topologyMap.GetTopology(val);
					if ((topology & 0x4000) != 0)
					{
						num += 0.1875f;
					}
					if ((topology & 0x8000) != 0)
					{
						num += 0.125f;
					}
					if (rail.Start)
					{
						val.y = Mathf.SmoothStep(val.y, num, SmoothenFilter(rail, k));
					}
					else
					{
						val.y = num;
					}
					points[k] = val;
				}
				path.Smoothen(8, Vector3.up, (int i) => SmoothenFilter(rail, i));
				path.RecalculateTangents();
			}
			foreach (PathList item in TerrainMeta.Path.Rails.AsEnumerable().Reverse())
			{
				heightMap.Push();
				float intensity = 1f;
				float fademin = 0.125f;
				float fademax = Mathf.InverseLerp(8f, 0f, (float)j);
				item.AdjustTerrainHeight((float xn, float zn) => intensity, (float xn, float zn) => Mathf.Lerp(fademin, fademax, AdjustTerrainFade(xn, zn)));
				heightMap.Pop();
			}
		}
		foreach (PathList rail2 in TerrainMeta.Path.Rails)
		{
			PathInterpolator path2 = rail2.Path;
			Vector3[] points2 = path2.Points;
			for (int l = 0; l < points2.Length; l++)
			{
				Vector3 val2 = points2[l];
				float height = heightMap.GetHeight(val2);
				if (rail2.Start)
				{
					val2.y = Mathf.SmoothStep(val2.y, height, SmoothenFilter(rail2, l));
				}
				else
				{
					val2.y = height;
				}
				points2[l] = val2;
			}
			path2.RecalculateTangents();
		}
	}
}
