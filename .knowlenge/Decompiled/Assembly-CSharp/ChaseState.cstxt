using UnityEngine;

public class ChaseState : BasicAIState
{
	private float nextPositionUpdateTime;

	public override float GetWeight()
	{
		float num = 0f;
		if (!GetEntity().HasTarget())
		{
			return 0f;
		}
		if (GetEntity().AmmoFractionRemaining() < 0.3f || GetEntity().IsReloading())
		{
			num -= 1f;
		}
		if (GetEntity().HasTarget())
		{
			num += 0.5f;
		}
		num = (GetEntity().CanSeeTarget() ? (num - 0.5f) : (num + 1f));
		if (GetEntity().DistanceToTarget() > GetEntity().GetIdealDistanceFromTarget())
		{
			num += 1f;
		}
		return num;
	}

	public override void StateEnter()
	{
		base.StateEnter();
		GetEntity().SetDesiredSpeed(HumanNPC.SpeedType.Walk);
	}

	public override void StateLeave()
	{
		base.StateLeave();
	}

	public override void StateThink(float delta)
	{
		base.StateThink(delta);
		if (GetEntity().currentTarget == null)
		{
			return;
		}
		float num = Vector3.Distance(GetEntity().currentTarget.transform.position, GetEntity().transform.position);
		if (num < 5f)
		{
			GetEntity().SetDesiredSpeed(HumanNPC.SpeedType.SlowWalk);
		}
		else if (num < 10f)
		{
			GetEntity().SetDesiredSpeed(HumanNPC.SpeedType.Walk);
		}
		else
		{
			GetEntity().SetDesiredSpeed(HumanNPC.SpeedType.Sprint);
		}
		if (!(Time.time > nextPositionUpdateTime))
		{
			return;
		}
		Random.Range(1f, 2f);
		Vector3 destination = GetEntity().transform.position;
		if (!(GetEntity().GetInformationZone() == null))
		{
			AIMovePoint bestMovePointNear = GetEntity().GetInformationZone().GetBestMovePointNear(GetEntity().currentTarget.transform.position, GetEntity().transform.position, 0f, 35f, checkLOS: true);
			if ((bool)bestMovePointNear)
			{
				bestMovePointNear.MarkUsedForEngagement(5f, GetEntity());
				destination = bestMovePointNear.transform.position;
				destination = GetEntity().GetRandomPositionAround(destination, 0f, bestMovePointNear.radius - 0.3f);
			}
			else
			{
				GetEntity().GetRandomPositionAround(GetEntity().currentTarget.transform.position, 1f);
			}
			GetEntity().SetDestination(destination);
		}
	}
}
