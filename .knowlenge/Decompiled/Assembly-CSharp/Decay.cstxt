using System;
using System.Collections.Generic;
using Facepunch;
using UnityEngine;

public abstract class Decay : PrefabAttribute, IServerComponent
{
	public static void BuildingDecayTouch(BuildingBlock buildingBlock)
	{
		List<DecayEntity> obj = Pool.GetList<DecayEntity>();
		Vis.Entities(buildingBlock.transform.position, 40f, obj, 2097408);
		for (int i = 0; i < obj.Count; i++)
		{
			DecayEntity decayEntity = obj[i];
			BuildingBlock buildingBlock2 = decayEntity as BuildingBlock;
			if (!buildingBlock2 || buildingBlock2.buildingID == buildingBlock.buildingID)
			{
				decayEntity.DecayTouch();
			}
		}
		Pool.FreeList(ref obj);
	}

	public static void EntityLinkDecayTouch(BaseEntity ent)
	{
		ent.EntityLinkBroadcast(delegate(DecayEntity decayEnt)
		{
			decayEnt.DecayTouch();
		});
	}

	public static void RadialDecayTouch(Vector3 pos, float radius, int mask)
	{
		List<DecayEntity> obj = Pool.GetList<DecayEntity>();
		Vis.Entities(pos, radius, obj, mask);
		for (int i = 0; i < obj.Count; i++)
		{
			obj[i].DecayTouch();
		}
		Pool.FreeList(ref obj);
	}

	public virtual bool ShouldDecay(BaseEntity entity)
	{
		return true;
	}

	public abstract float GetDecayDelay(BaseEntity entity);

	public abstract float GetDecayDuration(BaseEntity entity);

	protected override Type GetIndexedType()
	{
		return typeof(Decay);
	}
}
