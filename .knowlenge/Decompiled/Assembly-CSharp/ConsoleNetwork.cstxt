using System.Collections.Generic;
using Network;
using UnityEngine;

public static class ConsoleNetwork
{
	internal static void Init()
	{
	}

	internal static void OnClientCommand(Message packet)
	{
		string text = packet.read.String();
		if (packet.connection == null || !packet.connection.connected)
		{
			Debug.LogWarning("Client without connection tried to run command: " + text);
			return;
		}
		string text2 = ConsoleSystem.Run(ConsoleSystem.Option.Server.FromConnection(packet.connection).Quiet(), text);
		if (!string.IsNullOrEmpty(text2))
		{
			SendClientReply(packet.connection, text2);
		}
	}

	internal static void SendClientReply(Connection cn, string strCommand)
	{
		if (Net.sv.IsConnected())
		{
			Net.sv.write.Start();
			Net.sv.write.PacketID(Message.Type.ConsoleMessage);
			Net.sv.write.String(strCommand);
			Net.sv.write.Send(new SendInfo(cn));
		}
	}

	public static void SendClientCommand(Connection cn, string strCommand, params object[] args)
	{
		if (Net.sv.IsConnected())
		{
			Net.sv.write.Start();
			Net.sv.write.PacketID(Message.Type.ConsoleCommand);
			Net.sv.write.String(ConsoleSystem.BuildCommand(strCommand, args));
			Net.sv.write.Send(new SendInfo(cn));
		}
	}

	public static void SendClientCommand(List<Connection> cn, string strCommand, params object[] args)
	{
		if (Net.sv.IsConnected())
		{
			Net.sv.write.Start();
			Net.sv.write.PacketID(Message.Type.ConsoleCommand);
			Net.sv.write.String(ConsoleSystem.BuildCommand(strCommand, args));
			Net.sv.write.Send(new SendInfo(cn));
		}
	}

	public static void BroadcastToAllClients(string strCommand, params object[] args)
	{
		if (Net.sv.IsConnected())
		{
			Net.sv.write.Start();
			Net.sv.write.PacketID(Message.Type.ConsoleCommand);
			Net.sv.write.String(ConsoleSystem.BuildCommand(strCommand, args));
			Net.sv.write.Send(new SendInfo(Net.sv.connections));
		}
	}
}
