using UnityEngine;

public class MoveToPointState : BasicAIState
{
	private float originalStopDistance;

	public MoveToPointState()
		: base(AIState.MoveToPoint)
	{
	}

	public override void StateEnter(BaseAIBrain brain, BaseEntity entity)
	{
		base.StateEnter(brain, entity);
		BaseNavigator navigator = brain.Navigator;
		originalStopDistance = navigator.StoppingDistance;
		navigator.StoppingDistance = 0.5f;
	}

	public override void StateLeave(BaseAIBrain brain, BaseEntity entity)
	{
		base.StateLeave(brain, entity);
		brain.Navigator.StoppingDistance = originalStopDistance;
		Stop();
	}

	private void Stop()
	{
		brain.Navigator.Stop();
	}

	public override StateStatus StateThink(float delta, BaseAIBrain brain, BaseEntity entity)
	{
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		base.StateThink(delta, brain, entity);
		Vector3 pos = brain.Events.Memory.Position.Get(6);
		if (!brain.Navigator.SetDestination(pos, BaseNavigator.NavigationSpeed.Normal, MoveTowardsRate))
		{
			return StateStatus.Error;
		}
		if (!brain.Navigator.Moving)
		{
			brain.LoadDefaultAIDesign();
		}
		if (!brain.Navigator.Moving)
		{
			return StateStatus.Finished;
		}
		return StateStatus.Running;
	}
}
