using System;
using System.Collections.Generic;
using Facepunch;
using Network.Visibility;
using UnityEngine;

private class NetworkQueueList
{
	public HashSet<BaseNetworkable> queueInternal = new HashSet<BaseNetworkable>();

	public int MaxLength;

	public int Length => queueInternal.Count;

	public bool Contains(BaseNetworkable ent)
	{
		return queueInternal.Contains(ent);
	}

	public void Add(BaseNetworkable ent)
	{
		if (!Contains(ent))
		{
			queueInternal.Add(ent);
		}
		MaxLength = Mathf.Max(MaxLength, queueInternal.Count);
	}

	public void Add(BaseNetworkable[] ent)
	{
		foreach (BaseNetworkable ent2 in ent)
		{
			Add(ent2);
		}
	}

	public void Clear(Group group)
	{
		TimeWarning val = TimeWarning.New("NetworkQueueList.Clear", 0);
		try
		{
			if (group != null)
			{
				if (group.isGlobal)
				{
					return;
				}
				List<BaseNetworkable> list = Pool.Get<List<BaseNetworkable>>();
				foreach (BaseNetworkable item in queueInternal)
				{
					if ((Object)(object)item == (Object)null || item.net?.group == null || item.net.group == group)
					{
						list.Add(item);
					}
				}
				foreach (BaseNetworkable item2 in list)
				{
					queueInternal.Remove(item2);
				}
				Pool.FreeUnmanaged<BaseNetworkable>(ref list);
			}
			else
			{
				queueInternal.RemoveWhere((BaseNetworkable x) => (Object)(object)x == (Object)null || x.net?.group == null || !x.net.group.isGlobal);
			}
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}
}
