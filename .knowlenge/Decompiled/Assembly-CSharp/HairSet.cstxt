using System;
using System.Collections.Generic;
using Facepunch;
using UnityEngine;

[CreateAssetMenu(menuName = "Rust/Hair Set")]
public class HairSet : ScriptableObject
{
	[Serializable]
	public class MeshReplace
	{
		[HideInInspector]
		public string FindName;

		public Mesh Find;

		public SkinnedMeshRenderer Replace;

		private Transform[] bones;

		public bool Test(string materialName)
		{
			return FindName == materialName;
		}

		public Transform[] GetBones()
		{
			if (bones == null)
			{
				bones = Replace.bones;
			}
			return bones;
		}
	}

	[Serializable]
	public class MaterialReplace
	{
		[HideInInspector]
		public string FindName;

		public Material Find;

		public Material Replace;

		public bool Test(string materialName)
		{
			return FindName == materialName;
		}
	}

	public MeshReplace[] MeshReplacements;

	public MaterialReplace[] MaterialReplacements;

	public void Process(PlayerModelHair playerModelHair, HairDyeCollection dyeCollection, HairDye dye, MaterialPropertyBlock block)
	{
		List<SkinnedMeshRenderer> obj = Pool.GetList<SkinnedMeshRenderer>();
		playerModelHair.gameObject.GetComponentsInChildren(includeInactive: true, obj);
		foreach (SkinnedMeshRenderer item in obj)
		{
			if (item.sharedMesh == null || item.sharedMaterial == null)
			{
				continue;
			}
			string materialName = item.sharedMesh.name;
			string text = item.sharedMaterial.name;
			if (!item.gameObject.activeSelf)
			{
				item.gameObject.SetActive(value: true);
			}
			for (int i = 0; i < MeshReplacements.Length; i++)
			{
				if (MeshReplacements[i].Test(materialName))
				{
					SkinnedMeshRenderer replace = MeshReplacements[i].Replace;
					if (replace == null)
					{
						item.gameObject.SetActive(value: false);
						continue;
					}
					item.sharedMesh = replace.sharedMesh;
					item.rootBone = replace.rootBone;
					item.bones = MeshReplacements[i].GetBones();
				}
			}
			if (playerModelHair.Materials.TryGetValue(item, out var value))
			{
				Array.Copy(value.original, value.replacement, value.original.Length);
				for (int j = 0; j < value.original.Length; j++)
				{
					for (int k = 0; k < MaterialReplacements.Length; k++)
					{
						if (MaterialReplacements[k].Test(value.names[j]))
						{
							value.replacement[j] = MaterialReplacements[k].Replace;
						}
					}
				}
				item.sharedMaterials = value.replacement;
			}
			else
			{
				Debug.LogWarning("[HairSet.Process] Missing cached renderer materials in " + playerModelHair.name);
			}
			if (dye != null && item.gameObject.activeSelf)
			{
				dye.Apply(dyeCollection, block);
			}
		}
		Pool.FreeList(ref obj);
	}

	public void ProcessMorphs(GameObject obj, int blendShapeIndex = -1)
	{
	}
}
