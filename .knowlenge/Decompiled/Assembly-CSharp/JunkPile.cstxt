using System.Collections.Generic;
using Facepunch;
using Network;
using UnityEngine;

public class JunkPile : BaseEntity
{
	public GameObjectRef sinkEffect;

	public SpawnGroup[] spawngroups;

	private const float lifetimeMinutes = 30f;

	public override bool OnRpcMessage(BasePlayer player, uint rpc, Message msg)
	{
		using (TimeWarning.New("JunkPile.OnRpcMessage"))
		{
		}
		return base.OnRpcMessage(player, rpc, msg);
	}

	public override void ServerInit()
	{
		base.ServerInit();
		Invoke(TimeOut, 1800f);
		InvokeRepeating(CheckEmpty, 10f, 30f);
		SpawnGroup[] array = spawngroups;
		foreach (SpawnGroup spawnGroup in array)
		{
			spawnGroup.SpawnInitial();
		}
	}

	public bool SpawnGroupsEmpty()
	{
		SpawnGroup[] array = spawngroups;
		foreach (SpawnGroup spawnGroup in array)
		{
			if (spawnGroup.currentPopulation > 0)
			{
				return false;
			}
		}
		return true;
	}

	public void CheckEmpty()
	{
		if (SpawnGroupsEmpty())
		{
			CancelInvoke(CheckEmpty);
			SinkAndDestroy();
		}
	}

	public void TimeOut()
	{
		if (SpawnGroupsEmpty())
		{
			SinkAndDestroy();
			return;
		}
		List<BasePlayer> obj = Pool.GetList<BasePlayer>();
		Vis.Entities(base.transform.position, 15f, obj, 131072);
		bool flag = false;
		foreach (BasePlayer item in obj)
		{
			if (!item.IsSleeping() && item.IsAlive())
			{
				flag = true;
				break;
			}
		}
		if (flag)
		{
			Invoke(TimeOut, 300f);
		}
		else
		{
			SinkAndDestroy();
		}
		Pool.FreeList(ref obj);
	}

	public void SinkAndDestroy()
	{
		CancelInvoke(SinkAndDestroy);
		SpawnGroup[] array = spawngroups;
		foreach (SpawnGroup spawnGroup in array)
		{
			spawnGroup.Clear();
		}
		ClientRPC(null, "CLIENT_StartSink");
		base.transform.position -= new Vector3(0f, 5f, 0f);
		Invoke(KillMe, 22f);
	}

	public void KillMe()
	{
		Kill();
	}
}
