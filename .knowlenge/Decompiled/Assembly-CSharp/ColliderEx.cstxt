using System;
using System.Collections.Generic;
using Facepunch;
using Rust;
using UnityEngine;
using VLB;

public static class ColliderEx
{
	public static PhysicMaterial GetMaterialAt(this Collider obj, Vector3 pos)
	{
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)obj == (Object)null)
		{
			return TerrainMeta.Config.WaterMaterial;
		}
		if (obj is TerrainCollider)
		{
			return TerrainMeta.Physics.GetMaterial(pos);
		}
		return obj.sharedMaterial;
	}

	public static float EstimateVolume(this Collider collider)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_0108: Unknown result type (might be due to invalid IL or missing references)
		Vector3 lossyScale = ((Component)collider).transform.lossyScale;
		SphereCollider val = (SphereCollider)(object)((collider is SphereCollider) ? collider : null);
		if (val != null)
		{
			return val.radius * lossyScale.x * val.radius * lossyScale.y * val.radius * lossyScale.z * 4.1887903f;
		}
		BoxCollider val2 = (BoxCollider)(object)((collider is BoxCollider) ? collider : null);
		if (val2 != null)
		{
			return val2.size.x * lossyScale.x * val2.size.y * lossyScale.y * val2.size.z * lossyScale.z;
		}
		MeshCollider val3 = (MeshCollider)(object)((collider is MeshCollider) ? collider : null);
		if (val3 != null)
		{
			Bounds bounds = ((Collider)val3).bounds;
			Vector3 size = ((Bounds)(ref bounds)).size;
			return size.x * lossyScale.x * size.y * lossyScale.y * size.z * lossyScale.z;
		}
		CapsuleCollider val4 = (CapsuleCollider)(object)((collider is CapsuleCollider) ? collider : null);
		if (val4 != null)
		{
			float num = val4.radius * Mathf.Max(lossyScale.x, lossyScale.z);
			float num2 = (val4.height - num * 2f) * lossyScale.y;
			return MathF.PI * num * num * num2 + 4.1887903f * num * num * num;
		}
		return 0f;
	}

	public static bool IsOnLayer(this Collider col, Layer rustLayer)
	{
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)col != (Object)null)
		{
			return ((Component)col).gameObject.IsOnLayer(rustLayer);
		}
		return false;
	}

	public static bool IsOnLayer(this Collider col, int layer)
	{
		if ((Object)(object)col != (Object)null)
		{
			return ((Component)col).gameObject.IsOnLayer(layer);
		}
		return false;
	}

	public static float GetRadius(this Collider col, Vector3 transformScale)
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		float result = 1f;
		SphereCollider val = (SphereCollider)(object)((col is SphereCollider) ? col : null);
		if (val != null)
		{
			result = val.radius * Vector3Ex.Max(transformScale);
		}
		else
		{
			BoxCollider val2 = (BoxCollider)(object)((col is BoxCollider) ? col : null);
			if (val2 != null)
			{
				result = Vector3Ex.Max(Vector3.Scale(val2.size, transformScale)) * 0.5f;
			}
			else
			{
				CapsuleCollider val3 = (CapsuleCollider)(object)((col is CapsuleCollider) ? col : null);
				if (val3 != null)
				{
					float num = val3.direction switch
					{
						0 => transformScale.y, 
						1 => transformScale.x, 
						_ => transformScale.x, 
					};
					result = val3.radius * num;
				}
				else
				{
					MeshCollider val4 = (MeshCollider)(object)((col is MeshCollider) ? col : null);
					if (val4 != null)
					{
						Bounds bounds = ((Collider)val4).bounds;
						result = Vector3Ex.Max(Vector3.Scale(((Bounds)(ref bounds)).size, transformScale)) * 0.5f;
					}
				}
			}
		}
		return result;
	}

	public static MonumentInfo GetMonument(this Collider collider, bool ignoreEntity = true)
	{
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)collider == (Object)null)
		{
			return null;
		}
		if (ignoreEntity && (Object)(object)collider.ToBaseEntity() != (Object)null)
		{
			return null;
		}
		CachedMonumentComponent cachedMonumentComponent = ((Component)collider).GetComponent<CachedMonumentComponent>();
		if ((Object)(object)cachedMonumentComponent == (Object)null || cachedMonumentComponent.LastPosition != ((Component)collider).transform.position)
		{
			cachedMonumentComponent = ((Component)collider).gameObject.GetOrAddComponent<CachedMonumentComponent>();
			PreventBuildingMonumentTag component = ((Component)collider).GetComponent<PreventBuildingMonumentTag>();
			if ((Object)(object)component != (Object)null)
			{
				cachedMonumentComponent.UpdateMonument(component.GetAttachedMonument(), collider);
				return cachedMonumentComponent.Monument;
			}
			List<Collider> list = Pool.Get<List<Collider>>();
			GamePhysics.OverlapBounds(collider.bounds, list, 536870912, (QueryTriggerInteraction)2);
			foreach (Collider item in list)
			{
				component = ((Component)item).GetComponent<PreventBuildingMonumentTag>();
				if ((Object)(object)component != (Object)null)
				{
					cachedMonumentComponent.UpdateMonument(component.GetAttachedMonument(), collider);
				}
			}
			Pool.FreeUnmanaged<Collider>(ref list);
		}
		return cachedMonumentComponent?.Monument;
	}
}
