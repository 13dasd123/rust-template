using Apex.AI;
using Apex.Serialization;
using Rust.Ai;
using UnityEngine;

public class BestPlayerHostileBanditAct : OptionScorerBase<BasePlayer>
{
	[ApexSerialization]
	private float score = 10f;

	[ApexSerialization]
	public float Timeout = 10f;

	public override float Score(IAIContext context, BasePlayer option)
	{
		if (context is PlayerTargetContext playerTargetContext)
		{
			Scientist scientist = playerTargetContext.Self as Scientist;
			if ((bool)scientist)
			{
				Memory.ExtendedInfo extendedInfo = scientist.AiContext.Memory.GetExtendedInfo(option);
				if (extendedInfo.Entity != null)
				{
					if (Time.time < extendedInfo.LastHurtUsTime + Timeout)
					{
						return score;
					}
					return (!scientist.HostilityConsideration(option)) ? 0f : score;
				}
				return (!scientist.HostilityConsideration(option)) ? 0f : score;
			}
		}
		return 0f;
	}
}
