using System;
using ConVar;
using Facepunch;
using UnityEngine;

public class ServerConsole : SingletonComponent<ServerConsole>
{
	private DateTime currentGameTime
	{
		get
		{
			if (!TOD_Sky.Instance)
			{
				return DateTime.Now;
			}
			return TOD_Sky.Instance.Cycle.DateTime;
		}
	}

	private int currentPlayerCount => BasePlayer.activePlayerList.Count;

	private int maxPlayerCount => Server.maxplayers;

	private int currentEntityCount => BaseNetworkable.serverEntities.Count;

	private int currentSleeperCount => BasePlayer.sleepingPlayerList.Count;

	public void OnEnable()
	{
	}

	private void OnDisable()
	{
		Output.OnMessage -= HandleLog;
	}

	private void OnInputText(string obj)
	{
		ConsoleSystem.Run(ConsoleSystem.Option.Server, obj);
	}

	public static void PrintColoured(params object[] objects)
	{
	}

	private void HandleLog(string message, string stackTrace, LogType type)
	{
		if (message.StartsWith("[CHAT]") || message.StartsWith("[TEAM CHAT]") || message.StartsWith("[CARDS CHAT]"))
		{
			return;
		}
		switch (type)
		{
		case LogType.Warning:
			if (!message.StartsWith("HDR RenderTexture format is not") && !message.StartsWith("The image effect") && !message.StartsWith("Image Effects are not supported on this platform") && !message.StartsWith("[AmplifyColor]") && !message.StartsWith("Skipping profile frame.") && !message.StartsWith("Kinematic body only supports Speculative Continuous collision detection"))
			{
				System.Console.ForegroundColor = ConsoleColor.Yellow;
			}
			break;
		case LogType.Error:
			System.Console.ForegroundColor = ConsoleColor.Red;
			break;
		case LogType.Exception:
			System.Console.ForegroundColor = ConsoleColor.Red;
			break;
		case LogType.Assert:
			System.Console.ForegroundColor = ConsoleColor.Red;
			break;
		default:
			System.Console.ForegroundColor = ConsoleColor.Gray;
			break;
		}
	}
}
