using System.Collections.Generic;
using ConVar;
using UnityEngine;

public class CombatLog
{
	public struct Event
	{
		public float time;

		public uint attacker_id;

		public uint target_id;

		public string attacker;

		public string target;

		public string weapon;

		public string ammo;

		public string bone;

		public HitArea area;

		public float distance;

		public float health_old;

		public float health_new;

		public string info;
	}

	private const string selfname = "you";

	private const string noname = "N/A";

	private BasePlayer player;

	private Queue<Event> storage;

	private static Dictionary<ulong, Queue<Event>> players = new Dictionary<ulong, Queue<Event>>();

	public CombatLog(BasePlayer player)
	{
		this.player = player;
	}

	public void Init()
	{
		storage = Get(player.userID);
	}

	public void Save()
	{
	}

	public void Log(AttackEntity weapon, string description = null)
	{
		Log(weapon, null, description);
	}

	public void Log(AttackEntity weapon, Projectile projectile, string description = null)
	{
		Event val = default(Event);
		val.time = UnityEngine.Time.realtimeSinceStartup;
		val.attacker_id = (((bool)player && player.net != null) ? player.net.ID : 0u);
		val.target_id = 0u;
		val.attacker = "you";
		val.target = "N/A";
		val.weapon = ((!weapon) ? "N/A" : weapon.name);
		val.ammo = ((!projectile) ? "N/A" : projectile.name);
		val.bone = "N/A";
		val.area = (HitArea)0;
		val.distance = 0f;
		val.health_old = 0f;
		val.health_new = 0f;
		val.info = ((description == null) ? string.Empty : description);
		Log(val);
	}

	public void Log(HitInfo info, string description = null)
	{
		float num = ((!info.HitEntity) ? 0f : info.HitEntity.Health());
		Log(info, num, num, description);
	}

	public void Log(HitInfo info, float health_old, float health_new, string description = null)
	{
		Event val = default(Event);
		val.time = UnityEngine.Time.realtimeSinceStartup;
		val.attacker_id = (((bool)info.Initiator && info.Initiator.net != null) ? info.Initiator.net.ID : 0u);
		val.target_id = (((bool)info.HitEntity && info.HitEntity.net != null) ? info.HitEntity.net.ID : 0u);
		val.attacker = ((player == info.Initiator) ? "you" : ((!info.Initiator) ? "N/A" : info.Initiator.ShortPrefabName));
		val.target = ((player == info.HitEntity) ? "you" : ((!info.HitEntity) ? "N/A" : info.HitEntity.ShortPrefabName));
		val.weapon = ((!info.WeaponPrefab) ? "N/A" : info.WeaponPrefab.name);
		val.ammo = ((!info.ProjectilePrefab) ? "N/A" : info.ProjectilePrefab.name);
		val.bone = info.boneName;
		val.area = info.boneArea;
		val.distance = ((!info.IsProjectile()) ? Vector3.Distance(info.PointStart, info.HitPositionWorld) : info.ProjectileDistance);
		val.health_old = health_old;
		val.health_new = health_new;
		val.info = ((description == null) ? string.Empty : description);
		Log(val);
	}

	public void Log(Event val)
	{
		if (storage != null)
		{
			storage.Enqueue(val);
			int num = Mathf.Max(0, Server.combatlogsize);
			while (storage.Count > num)
			{
				storage.Dequeue();
			}
		}
	}

	public string Get(int count)
	{
		if (storage == null)
		{
			return string.Empty;
		}
		if (storage.Count == 0)
		{
			return "Combat log empty.";
		}
		TextTable textTable = new TextTable();
		textTable.AddColumn("time");
		textTable.AddColumn("attacker");
		textTable.AddColumn("id");
		textTable.AddColumn("target");
		textTable.AddColumn("id");
		textTable.AddColumn("weapon");
		textTable.AddColumn("ammo");
		textTable.AddColumn("area");
		textTable.AddColumn("distance");
		textTable.AddColumn("old_hp");
		textTable.AddColumn("new_hp");
		textTable.AddColumn("info");
		int num = storage.Count - count;
		int combatlogdelay = Server.combatlogdelay;
		int num2 = 0;
		foreach (Event item in storage)
		{
			if (num > 0)
			{
				num--;
				continue;
			}
			float num3 = UnityEngine.Time.realtimeSinceStartup - item.time;
			if (num3 >= (float)combatlogdelay)
			{
				string text = num3.ToString("0.0s");
				string attacker = item.attacker;
				string text2 = item.attacker_id.ToString();
				string target = item.target;
				string text3 = item.target_id.ToString();
				string weapon = item.weapon;
				string ammo = item.ammo;
				string text4 = HitAreaUtil.Format(item.area).ToLower();
				string text5 = item.distance.ToString("0.0m");
				string text6 = item.health_old.ToString("0.0");
				string text7 = item.health_new.ToString("0.0");
				string info = item.info;
				textTable.AddRow(text, attacker, text2, target, text3, weapon, ammo, text4, text5, text6, text7, info);
			}
			else
			{
				num2++;
			}
		}
		string text8 = textTable.ToString();
		if (num2 > 0)
		{
			string text9 = text8;
			text8 = text9 + "+ " + num2 + " " + ((num2 <= 1) ? "event" : "events");
			text9 = text8;
			text8 = text9 + " in the last " + combatlogdelay + " " + ((combatlogdelay <= 1) ? "second" : "seconds");
		}
		return text8;
	}

	public static Queue<Event> Get(ulong id)
	{
		if (players.TryGetValue(id, out var value))
		{
			return value;
		}
		value = new Queue<Event>();
		players.Add(id, value);
		return value;
	}
}
