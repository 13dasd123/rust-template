using System;
using System.Collections.Generic;
using ConVar;
using Facepunch;
using Network;
using ProtoBuf;
using Rust;
using UnityEngine;
using UnityEngine.Assertions;

public class ChickenCoop : StorageContainer
{
	public struct AnimalStatus
	{
		public EntityRef<FarmableAnimal> SpawnedAnimal;

		public TimeUntil TimeUntilHatch;

		public void CopyTo(ChickenStatus status)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0013: Unknown result type (might be due to invalid IL or missing references)
			status.spawnedChicken = SpawnedAnimal.uid;
			status.timeUntilHatch = TimeUntil.op_Implicit(TimeUntilHatch);
		}

		public void CopyFrom(ChickenStatus status)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_0018: Unknown result type (might be due to invalid IL or missing references)
			//IL_001d: Unknown result type (might be due to invalid IL or missing references)
			SpawnedAnimal.uid = status.spawnedChicken;
			TimeUntilHatch = TimeUntil.op_Implicit(status.timeUntilHatch);
		}
	}

	public class ChickenCoopWorkQueue : ObjectWorkQueue<ChickenCoop>
	{
		protected override void RunJob(ChickenCoop entity)
		{
			entity.QueuedWorkJob();
		}
	}

	public Transform[] SpawnPoints;

	public GameObjectRef ChickenPrefab;

	public int MaxChickens = 4;

	public float ChickenHatchTimeMinutes = 30f;

	public float SunCheckRate = 10f;

	public Transform SunSampler;

	public List<AnimalStatus> Animals = new List<AnimalStatus>();

	public const Flags Hatching = Flags.Reserved1;

	public const Flags Full = Flags.Reserved2;

	public const int EggInsertSlot = 0;

	public const int FoodSlot = 1;

	public const int WaterSlot = 2;

	public const int FoodProductionSlot = 3;

	public GameObjectRef hatchEffect;

	private float currentSunValue;

	public Plane MovementPlane;

	public static ChickenCoopWorkQueue CoopWorkQueue = new ChickenCoopWorkQueue();

	public bool IsInSun => currentSunValue > 0f;

	public bool IsOnTerrain { get; private set; }

	public Item CurrentFoodItem => base.inventory?.GetSlot(1);

	public Item CurrentWaterItem => base.inventory?.GetSlot(2);

	public override bool OnRpcMessage(BasePlayer player, uint rpc, Message msg)
	{
		TimeWarning val = TimeWarning.New("ChickenCoop.OnRpcMessage", 0);
		try
		{
			if (rpc == 3418655327u && (Object)(object)player != (Object)null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log((object)("SV_RPCMessage: " + ((object)player)?.ToString() + " - RequestAnimalStats "));
				}
				TimeWarning val2 = TimeWarning.New("RequestAnimalStats", 0);
				try
				{
					TimeWarning val3 = TimeWarning.New("Conditions", 0);
					try
					{
						if (!RPC_Server.CallsPerSecond.Test(3418655327u, "RequestAnimalStats", this, player, 1uL))
						{
							return true;
						}
						if (!RPC_Server.IsVisible.Test(3418655327u, "RequestAnimalStats", this, player, 3f))
						{
							return true;
						}
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
					try
					{
						val3 = TimeWarning.New("Call", 0);
						try
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage msg2 = rPCMessage;
							RequestAnimalStats(msg2);
						}
						finally
						{
							((IDisposable)val3)?.Dispose();
						}
					}
					catch (Exception ex)
					{
						Debug.LogException(ex);
						player.Kick("RPC Error in RequestAnimalStats");
					}
				}
				finally
				{
					((IDisposable)val2)?.Dispose();
				}
				return true;
			}
			if (rpc == 1409078750 && (Object)(object)player != (Object)null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log((object)("SV_RPCMessage: " + ((object)player)?.ToString() + " - SubmitEggForHatching "));
				}
				TimeWarning val2 = TimeWarning.New("SubmitEggForHatching", 0);
				try
				{
					TimeWarning val3 = TimeWarning.New("Conditions", 0);
					try
					{
						if (!RPC_Server.IsVisible.Test(1409078750u, "SubmitEggForHatching", this, player, 3f))
						{
							return true;
						}
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
					try
					{
						val3 = TimeWarning.New("Call", 0);
						try
						{
							SubmitEggForHatching();
						}
						finally
						{
							((IDisposable)val3)?.Dispose();
						}
					}
					catch (Exception ex2)
					{
						Debug.LogException(ex2);
						player.Kick("RPC Error in SubmitEggForHatching");
					}
				}
				finally
				{
					((IDisposable)val2)?.Dispose();
				}
				return true;
			}
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
		return base.OnRpcMessage(player, rpc, msg);
	}

	public override void ServerInit()
	{
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		base.ServerInit();
		((FacepunchBehaviour)this).InvokeRepeating((Action)ScheduleWorkQueue, Random.Range(0f, SunCheckRate), SunCheckRate);
		if (GamePhysics.Trace(new Ray(((Component)this).transform.position + ((Component)this).transform.up, -((Component)this).transform.up), 0f, out var hitInfo, 1.1f, 10485760, (QueryTriggerInteraction)0))
		{
			IsOnTerrain = ((RaycastHit)(ref hitInfo)).collider.IsOnLayer((Layer)23);
			if (!IsOnTerrain)
			{
				MovementPlane = new Plane(((Component)this).transform.up, ((Component)this).transform.position);
			}
		}
	}

	private void ScheduleWorkQueue()
	{
		((ObjectWorkQueue<ChickenCoop>)CoopWorkQueue).Add(this);
	}

	[RPC_Server]
	[RPC_Server.IsVisible(3f)]
	private void SubmitEggForHatching()
	{
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		if (HasFlag(Flags.Reserved2) || HasFlag(Flags.Reserved1))
		{
			return;
		}
		Item slot = base.inventory.GetSlot(0);
		if (slot != null && !(slot.info.shortname != "egg"))
		{
			slot.UseItem();
			Animals.Add(new AnimalStatus
			{
				TimeUntilHatch = TimeUntil.op_Implicit(ChickenHatchTimeMinutes * 60f)
			});
			SetFlag(Flags.Reserved1, b: true);
			SetFlag(Flags.Reserved2, Animals.Count >= MaxChickens);
			if (!((FacepunchBehaviour)this).IsInvoking((Action)CheckEggHatchState))
			{
				((FacepunchBehaviour)this).InvokeRepeating((Action)CheckEggHatchState, 10f, 10f);
			}
			SendNetworkUpdate();
		}
	}

	private void CheckEggHatchState()
	{
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		bool flag = false;
		for (int i = 0; i < Animals.Count; i++)
		{
			AnimalStatus value = Animals[i];
			if (!value.SpawnedAnimal.IsSet && TimeUntil.op_Implicit(value.TimeUntilHatch) <= 0f)
			{
				FarmableAnimal farmableAnimal = SpawnChicken(i);
				value.SpawnedAnimal.Set(farmableAnimal);
				flag = true;
				Animals[i] = value;
				if (hatchEffect != null && hatchEffect.isValid)
				{
					Effect.server.Run(hatchEffect.resourcePath, ((Component)farmableAnimal).transform.position);
				}
			}
		}
		if (flag)
		{
			SetFlag(Flags.Reserved1, b: false);
			((FacepunchBehaviour)this).CancelInvoke((Action)CheckEggHatchState);
			SendNetworkUpdate();
		}
	}

	private FarmableAnimal SpawnChicken(int index)
	{
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		FarmableAnimal obj = base.gameManager.CreateEntity(ChickenPrefab.resourcePath, GetRandomMovePoint(), Quaternion.Euler(0f, Random.Range(0f, 360f), 0f)) as FarmableAnimal;
		obj.SetParent(this, worldPositionStays: true);
		string text = RandomUsernames.Get(Random.Range(0, 1000));
		text = text[0].ToString().ToUpper() + text.Substring(1);
		obj.ApplyStartingStats(text);
		obj.Spawn();
		return obj;
	}

	public Vector3 GetRandomMovePoint()
	{
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		if (ConVar.Server.farmChickenLocalAvoidance)
		{
			int num = 10;
			for (int i = 0; i < num; i++)
			{
				Vector3 position = SpawnPoints[Random.Range(0, SpawnPoints.Length)].position;
				if (IsLocationClear(position, 0.25f))
				{
					return position;
				}
			}
		}
		return SpawnPoints[Random.Range(0, SpawnPoints.Length)].position;
	}

	public override void Save(SaveInfo info)
	{
		base.Save(info);
		info.msg.chickenCoop = Pool.Get<ChickenCoop>();
		info.msg.chickenCoop.chickens = Pool.Get<List<ChickenStatus>>();
		foreach (AnimalStatus animal in Animals)
		{
			ChickenStatus val = Pool.Get<ChickenStatus>();
			animal.CopyTo(val);
			info.msg.chickenCoop.chickens.Add(val);
		}
	}

	public override bool ItemFilter(Item item, int targetSlot)
	{
		if (targetSlot == 0 && item.info.shortname != "egg")
		{
			return false;
		}
		if (targetSlot == 1 && !IsValidFoodItem(item))
		{
			return false;
		}
		switch (targetSlot)
		{
		case 2:
			return item.info.shortname == "water";
		case 3:
			if (item.info.shortname != "egg")
			{
				return false;
			}
			break;
		}
		return base.ItemFilter(item, targetSlot);
	}

	private void QueuedWorkJob()
	{
		if (Animals.Count != 0)
		{
			UpdateSunValue();
		}
	}

	private void UpdateSunValue()
	{
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		if (TOD_Sky.Instance.IsNight)
		{
			currentSunValue = 0f;
			return;
		}
		Vector3 sunDirection = TOD_Sky.Instance.SunDirection;
		float num = Vector3.Dot(SunSampler.forward, sunDirection);
		currentSunValue = Mathf.InverseLerp(0.1f, 0.6f, num);
		if (currentSunValue > 0f && !IsVisible(SunSampler.position + sunDirection * 100f, 101f))
		{
			currentSunValue = 0f;
		}
	}

	public void DebugFillCoop()
	{
		while (Animals.Count < MaxChickens)
		{
			AnimalStatus item = default(AnimalStatus);
			FarmableAnimal entity = SpawnChicken(Animals.Count);
			item.SpawnedAnimal.Set(entity);
			Animals.Add(item);
		}
		SetFlag(Flags.Reserved2, b: true);
	}

	[RPC_Server.CallsPerSecond(1uL)]
	[RPC_Server.IsVisible(3f)]
	[RPC_Server]
	private void RequestAnimalStats(RPCMessage msg)
	{
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		BasePlayer player = msg.player;
		ChickenCoopStatusUpdate val = Pool.Get<ChickenCoopStatusUpdate>();
		try
		{
			val.animals = Pool.Get<List<FarmableAnimalStatus>>();
			foreach (AnimalStatus animal in Animals)
			{
				FarmableAnimalStatus val2 = Pool.Get<FarmableAnimalStatus>();
				val2.data = Pool.Get<FarmableAnimal>();
				EntityRef<FarmableAnimal> spawnedAnimal = animal.SpawnedAnimal;
				if ((Object)(object)spawnedAnimal.Get(serverside: true) != (Object)null)
				{
					spawnedAnimal = animal.SpawnedAnimal;
					spawnedAnimal.Get(serverside: true).SaveToData(val2.data);
					spawnedAnimal = animal.SpawnedAnimal;
					val2.animal = spawnedAnimal.uid;
					val.animals.Add(val2);
				}
			}
			ClientRPC<ChickenCoopStatusUpdate>(RpcTarget.Player("OnReceivedChickenStats", player), val);
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public void OnAnimalDied(FarmableAnimal animal)
	{
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		for (int i = 0; i < Animals.Count; i++)
		{
			if (Animals[i].SpawnedAnimal.uid == animal.net.ID)
			{
				Animals.RemoveAt(i);
				break;
			}
		}
		SetFlag(Flags.Reserved2, Animals.Count >= MaxChickens, recursive: false, networkupdate: false);
		SendNetworkUpdate();
	}

	public override void DropItems(BaseEntity initiator = null)
	{
		base.inventory.GetSlot(2)?.Remove();
		base.DropItems(initiator);
	}

	public bool IsLocationClear(Vector3 pos, float radius, FarmableAnimal ignoreAnimal = null)
	{
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		foreach (AnimalStatus animal in Animals)
		{
			FarmableAnimal farmableAnimal = animal.SpawnedAnimal.Get(serverside: true);
			if ((Object)(object)farmableAnimal != (Object)null && (Object)(object)farmableAnimal != (Object)(object)ignoreAnimal)
			{
				Vector3 val = ((Component)farmableAnimal).transform.position - pos;
				if (((Vector3)(ref val)).sqrMagnitude < radius * radius)
				{
					return false;
				}
			}
		}
		return true;
	}

	private bool IsValidFoodItem(Item item)
	{
		ItemModConsumable itemModConsumable = default(ItemModConsumable);
		if (item != null && ((Component)item.info).TryGetComponent<ItemModConsumable>(ref itemModConsumable))
		{
			return itemModConsumable.chickenCoopFood;
		}
		return false;
	}

	public override void Load(LoadInfo info)
	{
		base.Load(info);
		Animals.Clear();
		if (info.msg.chickenCoop == null || info.msg.chickenCoop.chickens == null)
		{
			return;
		}
		foreach (ChickenStatus chicken in info.msg.chickenCoop.chickens)
		{
			AnimalStatus item = default(AnimalStatus);
			item.CopyFrom(chicken);
			Animals.Add(item);
		}
	}

	public override bool CanPickup(BasePlayer player)
	{
		if (base.CanPickup(player))
		{
			return Animals.Count == 0;
		}
		return false;
	}
}
