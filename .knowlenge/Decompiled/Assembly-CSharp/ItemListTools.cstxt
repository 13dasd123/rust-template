using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using UnityEngine.UI;

public class ItemListTools : MonoBehaviour
{
	public GameObject categoryButton;

	public GameObject itemButton;

	internal Button lastCategory;

	public void OnPanelOpened()
	{
		Refresh();
	}

	public void Refresh()
	{
		RebuildCategories();
	}

	private void RebuildCategories()
	{
		for (int i = 0; i < categoryButton.transform.parent.childCount; i++)
		{
			Transform child = categoryButton.transform.parent.GetChild(i);
			if (!(child == categoryButton.transform))
			{
				GameManager.Destroy(child.gameObject);
			}
		}
		categoryButton.SetActive(value: true);
		IEnumerable<IGrouping<ItemCategory, ItemDefinition>> source = from x in ItemManager.GetItemDefinitions()
			group x by x.category;
		foreach (IGrouping<ItemCategory, ItemDefinition> item in source.OrderBy((IGrouping<ItemCategory, ItemDefinition> x) => x.First().category))
		{
			GameObject gameObject = Object.Instantiate(categoryButton);
			gameObject.transform.SetParent(categoryButton.transform.parent, worldPositionStays: false);
			Text componentInChildren = gameObject.GetComponentInChildren<Text>();
			componentInChildren.text = item.First().category.ToString();
			Button btn = gameObject.GetComponentInChildren<Button>();
			ItemDefinition[] itemArray = item.ToArray();
			btn.onClick.AddListener(delegate
			{
				if ((bool)lastCategory)
				{
					lastCategory.interactable = true;
				}
				lastCategory = btn;
				lastCategory.interactable = false;
				SwitchItemCategory(itemArray);
			});
			if (lastCategory == null)
			{
				lastCategory = btn;
				lastCategory.interactable = false;
				SwitchItemCategory(itemArray);
			}
		}
		categoryButton.SetActive(value: false);
	}

	private void SwitchItemCategory(ItemDefinition[] defs)
	{
		for (int i = 0; i < itemButton.transform.parent.childCount; i++)
		{
			Transform child = itemButton.transform.parent.GetChild(i);
			if (!(child == itemButton.transform))
			{
				GameManager.Destroy(child.gameObject);
			}
		}
		itemButton.SetActive(value: true);
		foreach (ItemDefinition item in defs.OrderBy((ItemDefinition x) => x.displayName.translated))
		{
			if (!item.hidden)
			{
				GameObject gameObject = Object.Instantiate(itemButton);
				gameObject.transform.SetParent(itemButton.transform.parent, worldPositionStays: false);
				Text componentInChildren = gameObject.GetComponentInChildren<Text>();
				componentInChildren.text = item.displayName.translated;
				gameObject.GetComponentInChildren<ItemButtonTools>().itemDef = item;
				gameObject.GetComponentInChildren<ItemButtonTools>().image.sprite = item.iconSprite;
			}
		}
		itemButton.SetActive(value: false);
	}
}
