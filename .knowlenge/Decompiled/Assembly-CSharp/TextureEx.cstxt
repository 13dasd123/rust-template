using UnityEngine;

public static class TextureEx
{
	private static Color32[] buffer = new Color32[8192];

	public static void Clear(this Texture2D tex, Color32 color)
	{
		if (tex.width > buffer.Length)
		{
			Debug.LogError("Trying to clear texture that is too big: " + tex.width);
			return;
		}
		for (int i = 0; i < tex.width; i++)
		{
			buffer[i] = color;
		}
		for (int j = 0; j < tex.height; j++)
		{
			tex.SetPixels32(0, j, tex.width, 1, buffer);
		}
		tex.Apply();
	}

	public static int GetSizeInBytes(this Texture texture)
	{
		int num = texture.width;
		int num2 = texture.height;
		if (texture is Texture2D)
		{
			Texture2D texture2D = texture as Texture2D;
			int bitsPerPixel = GetBitsPerPixel(texture2D.format);
			int mipmapCount = texture2D.mipmapCount;
			int i = 1;
			int num3 = 0;
			for (; i <= mipmapCount; i++)
			{
				num3 += num * num2 * bitsPerPixel / 8;
				num /= 2;
				num2 /= 2;
			}
			return num3;
		}
		if (texture is Texture2DArray)
		{
			Texture2DArray texture2DArray = texture as Texture2DArray;
			int bitsPerPixel2 = GetBitsPerPixel(texture2DArray.format);
			int num4 = 10;
			int j = 1;
			int num5 = 0;
			int depth = texture2DArray.depth;
			for (; j <= num4; j++)
			{
				num5 += num * num2 * bitsPerPixel2 / 8;
				num /= 2;
				num2 /= 2;
			}
			return num5 * depth;
		}
		if (texture is Cubemap)
		{
			Cubemap cubemap = texture as Cubemap;
			int bitsPerPixel3 = GetBitsPerPixel(cubemap.format);
			int num6 = num * num2 * bitsPerPixel3 / 8;
			int num7 = 6;
			return num6 * num7;
		}
		return 0;
	}

	public static int GetBitsPerPixel(TextureFormat format)
	{
		return format switch
		{
			TextureFormat.Alpha8 => 8, 
			TextureFormat.ARGB4444 => 16, 
			TextureFormat.RGBA4444 => 16, 
			TextureFormat.RGB24 => 24, 
			TextureFormat.RGBA32 => 32, 
			TextureFormat.ARGB32 => 32, 
			TextureFormat.RGB565 => 16, 
			TextureFormat.DXT1 => 4, 
			TextureFormat.DXT5 => 8, 
			TextureFormat.PVRTC_RGB2 => 2, 
			TextureFormat.PVRTC_RGBA2 => 2, 
			TextureFormat.PVRTC_RGB4 => 4, 
			TextureFormat.PVRTC_RGBA4 => 4, 
			TextureFormat.ETC_RGB4 => 4, 
			TextureFormat.ATC_RGB4 => 4, 
			TextureFormat.ATC_RGBA8 => 8, 
			TextureFormat.BGRA32 => 32, 
			_ => 0, 
		};
	}
}
