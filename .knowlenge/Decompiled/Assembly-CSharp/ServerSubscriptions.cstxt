using System;
using System.Collections.Generic;
using System.Text;
using ConVar;
using Facepunch;
using UnityEngine;

public static class ServerSubscriptions
{
	private static readonly Memoized<string, string> FoundationGrade = new Memoized<string, string>((Func<string, string>)((string s) => s.Replace("Block", "").ToLower()));

	private static readonly Memoized<string, string> FoundationType = new Memoized<string, string>((Func<string, string>)((string s) => (!s.Contains("foundation.triangle")) ? "s" : "t"));

	public static void StartSubscribeFeed()
	{
		InvokeHandler.InvokeRepeating((Behaviour)(object)SingletonComponent<InvokeHandler>.Instance, (Action)SendPlayerPositions, 0f, 0.2f);
		InvokeHandler.InvokeRepeating((Behaviour)(object)SingletonComponent<InvokeHandler>.Instance, (Action)SendFoundations, 0f, 5f);
	}

	public static void StopSubscribeFeed()
	{
		InvokeHandler.CancelInvoke((Behaviour)(object)SingletonComponent<InvokeHandler>.Instance, (Action)SendPlayerPositions);
		InvokeHandler.CancelInvoke((Behaviour)(object)SingletonComponent<InvokeHandler>.Instance, (Action)SendFoundations);
	}

	private static void SendFoundations()
	{
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0113: Unknown result type (might be due to invalid IL or missing references)
		if (!RCon.HasSubscribers)
		{
			return;
		}
		ListDictionary<uint, BuildingManager.Building> buildingDictionary = BuildingManager.server.buildingDictionary;
		StringBuilder stringBuilder = Pool.Get<StringBuilder>();
		Vector3 val = default(Vector3);
		Quaternion val2 = default(Quaternion);
		foreach (KeyValuePair<uint, BuildingManager.Building> item in buildingDictionary)
		{
			Enumerator<BuildingBlock> enumerator2 = item.Value.buildingBlocks.GetEnumerator();
			try
			{
				while (enumerator2.MoveNext())
				{
					BuildingBlock current = enumerator2.Current;
					if (((Object)current).name.Contains("foundation"))
					{
						((Component)current).gameObject.transform.GetPositionAndRotation(ref val, ref val2);
						stringBuilder.AppendJoin(',', FoundationGrade.Get(current.grade.ToString()), FoundationType.Get(((Object)current).name), val.x.ToString("0.00"), val.y.ToString("0.00"), val.z.ToString("0.00"), ((Quaternion)(ref val2)).eulerAngles.y.ToString("0.0"), ((Bounds)(ref current.bounds)).size.x);
						stringBuilder.Append("\n");
					}
				}
			}
			finally
			{
				((IDisposable)enumerator2/*cast due to .constrained prefix*/).Dispose();
			}
		}
		try
		{
			if (stringBuilder.Length > 0)
			{
				stringBuilder.Remove(stringBuilder.Length - 1, 1);
			}
			RCon.SendMessageToSubscribers(stringBuilder.ToString(), -64002);
		}
		catch (Exception ex)
		{
			Debug.LogException(ex);
		}
		Pool.FreeUnmanaged(ref stringBuilder);
	}

	private static void SendPlayerPositions()
	{
		if (!RCon.HasSubscribers)
		{
			return;
		}
		try
		{
			RCon.SendMessageToSubscribers(Server.GetPlayerListPosTable().ToJson(), -64001);
		}
		catch (Exception ex)
		{
			Debug.LogException(ex);
		}
	}
}
