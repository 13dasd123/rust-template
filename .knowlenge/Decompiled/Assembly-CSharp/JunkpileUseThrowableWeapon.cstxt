using System.Collections;
using Apex.Ai.HTN;
using Apex.Serialization;
using UnityEngine;

public class JunkpileUseThrowableWeapon : OperatorBase<ScientistJunkpileContext>
{
	[ApexSerialization]
	private NpcOrientation _orientation = NpcOrientation.LastKnownPrimaryTargetLocation;

	public static float LastTimeThrown;

	public override void Execute(ScientistJunkpileContext context)
	{
		if (context.Memory.PrimaryKnownEnemyPlayer.PlayerInfo.Player != null)
		{
			context.Body.StartCoroutine(UseItem(context));
		}
	}

	public override OperatorStateType Tick(ScientistJunkpileContext context, PrimitiveTaskSelector task)
	{
		if (context.IsFact(Facts.IsThrowingWeapon))
		{
			return OperatorStateType.Running;
		}
		ApplyExpectedEffects(context, task);
		return OperatorStateType.Complete;
	}

	public override void Abort(ScientistJunkpileContext context, PrimitiveTaskSelector task)
	{
		context.SetFact(Facts.IsThrowingWeapon, value: false);
		ItemType previousFact = (ItemType)context.GetPreviousFact(Facts.HeldItemType);
		JunkpileHoldItemOfType.SwitchToItem(context, previousFact);
	}

	private IEnumerator UseItem(ScientistJunkpileContext context)
	{
		Item item = context.Body.GetActiveItem();
		if (item != null)
		{
			ThrownWeapon thrownWeapon = item.GetHeldEntity() as ThrownWeapon;
			if (thrownWeapon != null)
			{
				context.SetFact(Facts.IsThrowingWeapon, value: true);
				LastTimeThrown = Time.time;
				context.OrientationType = _orientation;
				context.Body.ForceOrientationTick();
				yield return null;
				thrownWeapon.ServerThrow(context.Memory.PrimaryKnownEnemyPlayer.LastKnownPosition);
				yield return null;
			}
		}
		context.SetFact(Facts.IsThrowingWeapon, value: false);
		JunkpileHoldItemOfType.SwitchToItem(context, ItemType.ProjectileWeapon);
	}
}
