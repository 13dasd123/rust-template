#define UNITY_ASSERTIONS
using System;
using System.Collections;
using System.IO;
using ConVar;
using Facepunch.Steamworks;
using Network;
using Rust;
using UnityEngine;
using UnityEngine.Assertions;

public class SteamInventory : EntityComponent<BasePlayer>
{
	private Facepunch.Steamworks.Inventory.Item[] Items;

	public override bool OnRpcMessage(BasePlayer player, uint rpc, Message msg)
	{
		using (TimeWarning.New("SteamInventory.OnRpcMessage"))
		{
			if (rpc == 643458331 && player != null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (ConVar.Global.developer > 2)
				{
					Debug.Log(string.Concat("SV_RPCMessage: ", player, " - UpdateSteamInventory "));
				}
				using (TimeWarning.New("UpdateSteamInventory"))
				{
					using (TimeWarning.New("Conditions"))
					{
						if (!BaseEntity.RPC_Server.FromOwner.Test("UpdateSteamInventory", GetBaseEntity(), player))
						{
							return true;
						}
					}
					try
					{
						using (TimeWarning.New("Call"))
						{
							BaseEntity.RPCMessage rPCMessage = default(BaseEntity.RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							BaseEntity.RPCMessage msg2 = rPCMessage;
							UpdateSteamInventory(msg2);
						}
					}
					catch (Exception exception)
					{
						player.Kick("RPC Error in UpdateSteamInventory");
						Debug.LogException(exception);
					}
				}
				return true;
			}
		}
		return base.OnRpcMessage(player, rpc, msg);
	}

	public bool HasItem(int itemid)
	{
		if (Items == null)
		{
			return false;
		}
		Facepunch.Steamworks.Inventory.Item[] items = Items;
		foreach (Facepunch.Steamworks.Inventory.Item item in items)
		{
			if (item.DefinitionId == itemid)
			{
				return true;
			}
		}
		return false;
	}

	[BaseEntity.RPC_Server]
	[BaseEntity.RPC_Server.FromOwner]
	private void UpdateSteamInventory(BaseEntity.RPCMessage msg)
	{
		MemoryStream memoryStream = msg.read.MemoryStreamWithSize();
		if (memoryStream == null)
		{
			Debug.LogWarning("UpdateSteamInventory: Data is null");
			return;
		}
		Facepunch.Steamworks.Inventory.Result result = Rust.Global.SteamServer.Inventory.Deserialize(memoryStream.GetBuffer(), (int)memoryStream.Length);
		if (result == null)
		{
			Debug.LogWarning("UpdateSteamInventory: result is null");
			return;
		}
		StopAllCoroutines();
		StartCoroutine(ProcessInventoryResult(result));
	}

	private IEnumerator ProcessInventoryResult(Facepunch.Steamworks.Inventory.Result result)
	{
		float count = 0f;
		while (result.IsPending)
		{
			count += 1f;
			yield return CoroutineEx.waitForSeconds(1f);
			if (count > 30f)
			{
				Debug.LogFormat("Steam Inventory result timed out for {0}", base.baseEntity.displayName);
			}
		}
		if (result.Items != null)
		{
			Items = result.Items;
		}
		result.Dispose();
	}
}
