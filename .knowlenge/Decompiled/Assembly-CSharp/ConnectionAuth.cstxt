using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Network;
using Oxide.Core;
using UnityEngine;

public class ConnectionAuth : MonoBehaviour
{
	[NonSerialized]
	public static List<Connection> m_AuthConnection = new List<Connection>();

	public bool IsConnected(ulong iSteamID)
	{
		if ((bool)BasePlayer.FindByID(iSteamID))
		{
			return true;
		}
		return m_AuthConnection.Any((Connection item) => item.userid == iSteamID);
	}

	public static void Reject(Connection connection, string strReason)
	{
		Debug.Log(connection.ToString() + " Rejecting connection - " + strReason);
		Net.sv.Kick(connection, strReason);
		m_AuthConnection.Remove(connection);
	}

	public static void OnDisconnect(Connection connection)
	{
		m_AuthConnection.Remove(connection);
	}

	public void Approve(Connection connection)
	{
		m_AuthConnection.Remove(connection);
		SingletonComponent<ServerMgr>.Instance.connectionQueue.Join(connection);
	}

	public void OnNewConnection(Connection connection)
	{
		connection.connected = false;
		if (connection.token == null || connection.token.Length < 32)
		{
			Reject(connection, "Invalid Token");
			return;
		}
		if (connection.userid == 0)
		{
			Reject(connection, "Invalid SteamID");
			return;
		}
		if (connection.protocol != 2013)
		{
			if (!DeveloperList.Contains(connection.userid))
			{
				Reject(connection, "Incompatible Version");
				return;
			}
			Debug.Log("Not kicking " + connection.userid + " for incompatible protocol (is a developer)");
		}
		if (ServerUsers.Is(connection.userid, ServerUsers.UserGroup.Banned))
		{
			Reject(connection, "You are banned from this server");
			return;
		}
		if (ServerUsers.Is(connection.userid, ServerUsers.UserGroup.Moderator))
		{
			Debug.Log(connection.ToString() + " has auth level 1");
			connection.authLevel = 1;
		}
		if (ServerUsers.Is(connection.userid, ServerUsers.UserGroup.Owner))
		{
			Debug.Log(connection.ToString() + " has auth level 2");
			connection.authLevel = 2;
		}
		if (DeveloperList.Contains(connection.userid))
		{
			Debug.Log(connection.ToString() + " is a developer");
			connection.authLevel = 1;
		}
		if (IsConnected(connection.userid))
		{
			Reject(connection, "You are already connected!");
		}
		else if (Interface.CallHook("IOnUserApprove", connection) == null)
		{
			m_AuthConnection.Add(connection);
			StartCoroutine(AuthorisationRoutine(connection));
		}
	}

	public IEnumerator AuthorisationRoutine(Connection connection)
	{
		yield return StartCoroutine(Auth_Steam.Run(connection));
		yield return StartCoroutine(Auth_EAC.Run(connection));
		if (!connection.rejected && connection.active)
		{
			BasePlayer playerBody = BasePlayer.FindByID(connection.userid);
			if ((bool)playerBody && playerBody.net.connection != null)
			{
				Reject(connection, "You are already connected as a player!");
			}
			else
			{
				Approve(connection);
			}
		}
	}
}
