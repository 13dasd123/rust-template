using UnityEngine;
using UnityEngine.AI;

public class MurdererNavigateToPreferredFightingRange : MurdererBaseNavigateTo
{
	public static Vector3 GetPreferredFightingPosition(MurdererContext context)
	{
		if (Time.time - context.Memory.CachedPreferredDistanceDestinationTime < 0.01f)
		{
			return context.Memory.CachedPreferredDistanceDestination;
		}
		NpcPlayerInfo primaryEnemyPlayerTarget = context.GetPrimaryEnemyPlayerTarget();
		if (primaryEnemyPlayerTarget.Player != null)
		{
			float num = 1.5f;
			AttackEntity firearm = context.Domain.GetFirearm();
			if (firearm != null)
			{
				NPCPlayerApex.WeaponTypeEnum effectiveRangeType = firearm.effectiveRangeType;
				num = ((effectiveRangeType != NPCPlayerApex.WeaponTypeEnum.CloseRange) ? context.Body.AiDefinition.Engagement.CenterOfMediumRangeFirearm(firearm) : context.Body.AiDefinition.Engagement.CenterOfCloseRangeFirearm(firearm));
			}
			float num2 = num * num;
			Vector3 vector;
			if (primaryEnemyPlayerTarget.Player.estimatedSpeed2D > 5f)
			{
				num += 1.5f;
				vector = ((!(primaryEnemyPlayerTarget.SqrDistance <= num2)) ? (primaryEnemyPlayerTarget.Player.transform.position - context.Body.transform.position).normalized : (context.Body.transform.position - primaryEnemyPlayerTarget.Player.transform.position).normalized);
				if (Vector3.Dot(primaryEnemyPlayerTarget.Player.estimatedVelocity, vector) < 0f)
				{
					vector = ((!(primaryEnemyPlayerTarget.SqrDistance <= num2)) ? (context.Body.transform.position - primaryEnemyPlayerTarget.Player.transform.position).normalized : (primaryEnemyPlayerTarget.Player.transform.position - context.Body.transform.position).normalized);
				}
			}
			else
			{
				num -= 0.1f;
				vector = ((!(primaryEnemyPlayerTarget.SqrDistance <= num2)) ? (context.Body.transform.position - primaryEnemyPlayerTarget.Player.transform.position).normalized : (primaryEnemyPlayerTarget.Player.transform.position - context.Body.transform.position).normalized);
			}
			Vector3 vector2 = primaryEnemyPlayerTarget.Player.transform.position + vector * num;
			if (NavMesh.SamplePosition(vector2 + Vector3.up * 0.1f, out var hit, 2f * context.Domain.NavAgent.height, -1))
			{
				Vector3 vector3 = context.Domain.ToAllowedMovementDestination(hit.position);
				if (context.Memory.IsValid(vector3))
				{
					context.Memory.CachedPreferredDistanceDestination = vector3;
					context.Memory.CachedPreferredDistanceDestinationTime = Time.time;
					return vector3;
				}
			}
			else
			{
				context.Memory.AddFailedDestination(vector2);
			}
		}
		return context.Body.transform.position;
	}

	protected override Vector3 _GetDestination(MurdererContext context)
	{
		return GetPreferredFightingPosition(context);
	}
}
