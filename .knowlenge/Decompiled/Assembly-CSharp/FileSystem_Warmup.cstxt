using System;
using System.Collections;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using ConVar;
using UnityEngine;

public class FileSystem_Warmup : MonoBehaviour
{
	private static bool run = true;

	private static bool running = false;

	private static string[] includeFilter = new string[1] { ".prefab" };

	private static string[] excludeFilter = new string[8] { "/bundled/prefabs/autospawn/monument", "/bundled/prefabs/autospawn/mountain", "/bundled/prefabs/autospawn/canyon", "/bundled/prefabs/autospawn/decor", "/bundled/prefabs/navmesh", "/prefabs/world/", "/prefabs/system/", "/third party/" };

	private static string[] noPreProcessing = new string[2] { "/content/ui/", "/prefabs/ui/" };

	public static void Run()
	{
		if (run && !running)
		{
			running = true;
			string[] assetList = GetAssetList();
			for (int i = 0; i < assetList.Length; i++)
			{
				FileSystem.Load<UnityEngine.Object>(assetList[i], bComplain: false);
				PrefabWarmup(assetList[i]);
			}
			running = (run = false);
		}
	}

	public static IEnumerator Run(float deltaTime, Action<string> statusFunction = null)
	{
		if (!run || running)
		{
			yield break;
		}
		running = true;
		string[] prewarmAssets = GetAssetList();
		Stopwatch sw = Stopwatch.StartNew();
		for (int i = 0; i < prewarmAssets.Length; i++)
		{
			if (sw.Elapsed.TotalSeconds > (double)deltaTime || i == 0 || i == prewarmAssets.Length - 1)
			{
				Status(statusFunction, "Asset Warmup ({0}/{1})", i + 1, prewarmAssets.Length);
				yield return CoroutineEx.waitForEndOfFrame;
				sw.Reset();
				sw.Start();
			}
			if (Global.assetwarmup > 0)
			{
				FileSystem.Load<UnityEngine.Object>(prewarmAssets[i], bComplain: false);
			}
			if (Global.prefabwarmup > 0)
			{
				PrefabWarmup(prewarmAssets[i]);
			}
		}
		run = false;
		running = false;
	}

	private static bool ShouldPreProcess(string path)
	{
		for (int i = 0; i < noPreProcessing.Length; i++)
		{
			if (StringEx.Contains(path, noPreProcessing[i], CompareOptions.IgnoreCase))
			{
				return false;
			}
		}
		return true;
	}

	private static bool ShouldIgnore(string path)
	{
		for (int i = 0; i < excludeFilter.Length; i++)
		{
			if (StringEx.Contains(path, excludeFilter[i], CompareOptions.IgnoreCase))
			{
				return true;
			}
		}
		return false;
	}

	private static string[] GetAssetList()
	{
		return (from x in includeFilter.SelectMany((string x) => FileSystem.FindAll("assets", x))
			where !ShouldIgnore(x)
			select x).ToArray();
	}

	private static void PrefabWarmup(string path)
	{
		if (ShouldPreProcess(path))
		{
			GameManager.server.FindPrefab(path);
		}
	}

	private static void Status(Action<string> statusFunction, string status, object obj1)
	{
		statusFunction?.Invoke(string.Format(status, obj1));
	}

	private static void Status(Action<string> statusFunction, string status, object obj1, object obj2)
	{
		statusFunction?.Invoke(string.Format(status, obj1, obj2));
	}

	private static void Status(Action<string> statusFunction, string status, object obj1, object obj2, object obj3)
	{
		statusFunction?.Invoke(string.Format(status, obj1, obj2, obj3));
	}

	private static void Status(Action<string> statusFunction, string status, params object[] objs)
	{
		statusFunction?.Invoke(string.Format(status, objs));
	}
}
