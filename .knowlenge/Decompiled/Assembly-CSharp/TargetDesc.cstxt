using System.Runtime.InteropServices;
using UnityEngine;

[StructLayout(LayoutKind.Sequential, Pack = 1)]
public struct TargetDesc
{
	public int size;

	public int maxSize;

	public int maxSizeSubStep;

	public Vector2 areaOffset;

	public Vector2 areaToMapUV;

	public Vector2 areaToMapXY;

	public int tileSize;

	public int tileSizeShift;

	public int tileCount;

	public int tileMaxCount;

	public TargetDesc(Vector3 areaPosition, Vector3 areaSize)
	{
		size = 512;
		maxSize = size - 1;
		maxSizeSubStep = maxSize * 256;
		areaOffset = new Vector2(areaPosition.x, areaPosition.z);
		areaToMapUV = new Vector2(1f / areaSize.x, 1f / areaSize.z);
		areaToMapXY = areaToMapUV * size;
		tileSize = Mathf.NextPowerOfTwo(Mathf.Max(size, 4096)) / 256;
		tileSizeShift = (int)Mathf.Log(tileSize, 2f);
		tileCount = Mathf.CeilToInt((float)size / (float)tileSize);
		tileMaxCount = tileCount - 1;
	}

	public void Clear()
	{
		areaOffset = Vector2.zero;
		areaToMapUV = Vector2.zero;
		areaToMapXY = Vector2.zero;
		size = 0;
		maxSize = 0;
		maxSizeSubStep = 0;
		tileSize = 0;
		tileSizeShift = 0;
		tileCount = 0;
		tileMaxCount = 0;
	}

	public ushort TileOffsetToXYOffset(ushort tileOffset, out int x, out int y, out int offset)
	{
		int num = tileOffset % tileCount;
		int num2 = tileOffset / tileCount;
		x = num * tileSize;
		y = num2 * tileSize;
		offset = y * size + x;
		return tileOffset;
	}

	public ushort TileOffsetToTileXYIndex(ushort tileOffset, out int tileX, out int tileY, out ushort tileIndex)
	{
		tileX = tileOffset % tileCount;
		tileY = tileOffset / tileCount;
		tileIndex = (ushort)(tileY * tileCount + tileX);
		return tileOffset;
	}

	public Vector2 WorldToRaster(Vector2 pos)
	{
		Vector2 result = default(Vector2);
		result.x = (pos.x - areaOffset.x) * areaToMapXY.x;
		result.y = (pos.y - areaOffset.y) * areaToMapXY.y;
		return result;
	}

	public Vector3 WorldToRaster(Vector3 pos)
	{
		Vector2 vector = default(Vector2);
		vector.x = (pos.x - areaOffset.x) * areaToMapXY.x;
		vector.y = (pos.z - areaOffset.y) * areaToMapXY.y;
		return vector;
	}
}
