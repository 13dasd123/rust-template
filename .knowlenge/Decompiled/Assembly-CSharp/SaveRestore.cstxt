using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;
using ConVar;
using Facepunch;
using Facepunch.Math;
using Facepunch.Rust;
using Network;
using Newtonsoft.Json;
using Oxide.Core;
using ProtoBuf;
using Rust;
using UnityEngine;
using UnityEngine.Assertions;

public class SaveRestore : SingletonComponent<SaveRestore>
{
	[JsonModel]
	public class SaveExtraData
	{
		public string WipeId;
	}

	[CompilerGenerated]
	private sealed class <DoAutomatedSave>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		private int <>1__state;

		private object <>2__current;

		public bool AndWait;

		public SaveRestore <>4__this;

		private string <folder>5__2;

		object IEnumerator<object>.Current
		{
			[DebuggerHidden]
			get
			{
				return <>2__current;
			}
		}

		object IEnumerator.Current
		{
			[DebuggerHidden]
			get
			{
				return <>2__current;
			}
		}

		[DebuggerHidden]
		public <DoAutomatedSave>d__20(int <>1__state)
		{
			this.<>1__state = <>1__state;
		}

		[DebuggerHidden]
		void IDisposable.Dispose()
		{
		}

		private bool MoveNext()
		{
			int num = <>1__state;
			SaveRestore saveRestore = <>4__this;
			switch (num)
			{
			default:
				return false;
			case 0:
				<>1__state = -1;
				IsSaving = true;
				<folder>5__2 = ConVar.Server.rootFolder;
				if (!AndWait)
				{
					<>2__current = CoroutineEx.waitForEndOfFrame;
					<>1__state = 1;
					return true;
				}
				goto IL_0061;
			case 1:
				<>1__state = -1;
				goto IL_0061;
			case 2:
				<>1__state = -1;
				goto IL_00d0;
			case 3:
				{
					<>1__state = -1;
					break;
				}
				IL_0061:
				if (AndWait)
				{
					IEnumerator enumerator = Save(<folder>5__2 + "/" + World.SaveFileName, AndWait);
					while (enumerator.MoveNext())
					{
					}
					goto IL_00d0;
				}
				<>2__current = ((MonoBehaviour)saveRestore).StartCoroutine(Save(<folder>5__2 + "/" + World.SaveFileName, AndWait));
				<>1__state = 2;
				return true;
				IL_00d0:
				if (!AndWait)
				{
					<>2__current = CoroutineEx.waitForEndOfFrame;
					<>1__state = 3;
					return true;
				}
				break;
			}
			Debug.Log((object)"Saving complete");
			IsSaving = false;
			return false;
		}

		bool IEnumerator.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in MoveNext
			return this.MoveNext();
		}

		[DebuggerHidden]
		void IEnumerator.Reset()
		{
			throw new NotSupportedException();
		}
	}

	public static bool IsSaving = false;

	public static DateTime SaveCreatedTime;

	private static RealTimeSince TimeSinceLastSave;

	private static MemoryStream SaveBuffer = new MemoryStream(33554432);

	private static Action<Stream> onSaveComplete;

	private static object callbackLock = new object();

	private static Queue<Stream> saveQueue = new Queue<Stream>();

	private static object saveQueueLock = new object();

	public static string WipeId { get; private set; }

	public static void AddOnSaveCallback(Action<Stream> callback)
	{
		lock (callbackLock)
		{
			onSaveComplete = (Action<Stream>)Delegate.Combine(onSaveComplete, callback);
		}
	}

	public static void RemoveOnSaveCallback(Action<Stream> callback)
	{
		lock (callbackLock)
		{
			onSaveComplete = (Action<Stream>)Delegate.Remove(onSaveComplete, callback);
		}
	}

	public static IEnumerator Save(string strFilename, bool AndWait = false)
	{
		if (Application.isQuitting)
		{
			yield break;
		}
		Stopwatch timerCache = new Stopwatch();
		Stopwatch timerWrite = new Stopwatch();
		Stopwatch timerDisk = new Stopwatch();
		SaveBuffer.Position = 0L;
		SaveBuffer.SetLength(0L);
		InitializeWipeId();
		if (AndWait)
		{
			IEnumerator enumerator = WarmUpEntityCaches(AndWait, timerCache);
			while (enumerator.MoveNext())
			{
			}
		}
		else
		{
			yield return ((MonoBehaviour)SingletonComponent<SaveRestore>.Instance).StartCoroutine(WarmUpEntityCaches(AndWait, timerCache));
		}
		timerWrite.Start();
		int iEnts = 0;
		TimeWarning val = TimeWarning.New("SaveWrite", 100);
		try
		{
			BinaryWriter writer = new BinaryWriter(SaveBuffer);
			WriteHeader(writer);
			if (!AndWait)
			{
				yield return CoroutineEx.waitForEndOfFrame;
			}
			iEnts = WriteEntities(writer);
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
		timerWrite.Stop();
		if (!AndWait)
		{
			yield return CoroutineEx.waitForEndOfFrame;
		}
		timerDisk.Start();
		TimeWarning val2 = TimeWarning.New("SaveBackup", 100);
		try
		{
			ShiftSaveBackups(strFilename);
		}
		finally
		{
			((IDisposable)val2)?.Dispose();
		}
		val2 = TimeWarning.New("SaveDisk", 100);
		try
		{
			string text = strFilename + ".new";
			if (File.Exists(text))
			{
				File.Delete(text);
			}
			try
			{
				using FileStream destination = File.OpenWrite(text);
				SaveBuffer.Position = 0L;
				SaveBuffer.CopyTo(destination);
			}
			catch (Exception ex)
			{
				Debug.LogError((object)("Couldn't write save file! We got an exception: " + ex));
				if (File.Exists(text))
				{
					File.Delete(text);
				}
				yield break;
			}
			File.Copy(text, strFilename, overwrite: true);
			File.Delete(text);
		}
		catch (Exception ex2)
		{
			Debug.LogError((object)("Error when saving to disk: " + ex2));
			yield break;
		}
		finally
		{
			((IDisposable)val2)?.Dispose();
		}
		timerDisk.Stop();
		Debug.LogFormat("Saved {0} ents, cache({1}), write({2}), disk({3}).", new object[4]
		{
			iEnts.ToString("N0"),
			timerCache.Elapsed.TotalSeconds.ToString("0.00"),
			timerWrite.Elapsed.TotalSeconds.ToString("0.00"),
			timerDisk.Elapsed.TotalSeconds.ToString("0.00")
		});
		PerformanceLogging.server?.SetTiming("save.cache", timerCache.Elapsed);
		PerformanceLogging.server?.SetTiming("save.write", timerWrite.Elapsed);
		PerformanceLogging.server?.SetTiming("save.disk", timerDisk.Elapsed);
		NexusServer.PostGameSaved();
	}

	private static IEnumerator SaveToStream(Stream stream)
	{
		InitializeWipeId();
		yield return ((MonoBehaviour)SingletonComponent<SaveRestore>.Instance).StartCoroutine(WarmUpEntityCaches());
		TimeWarning val = TimeWarning.New("SaveWrite", 100);
		try
		{
			BinaryWriter writer = new BinaryWriter(stream);
			WriteHeader(writer);
			yield return CoroutineEx.waitForEndOfFrame;
			WriteEntities(writer);
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
		Action<Stream> action;
		lock (callbackLock)
		{
			action = onSaveComplete;
		}
		action(stream);
	}

	private static void ShiftSaveBackups(string fileName)
	{
		int num = Mathf.Max(ConVar.Server.saveBackupCount, 2);
		if (!File.Exists(fileName))
		{
			return;
		}
		try
		{
			int num2 = 0;
			for (int j = 1; j <= num; j++)
			{
				if (!File.Exists(fileName + "." + j))
				{
					break;
				}
				num2++;
			}
			string text = GetBackupName(num2 + 1);
			for (int num3 = num2; num3 > 0; num3--)
			{
				string text2 = GetBackupName(num3);
				if (num3 == num)
				{
					File.Delete(text2);
				}
				else if (File.Exists(text2))
				{
					if (File.Exists(text))
					{
						File.Delete(text);
					}
					File.Move(text2, text);
				}
				text = text2;
			}
			File.Copy(fileName, text, overwrite: true);
		}
		catch (Exception ex)
		{
			Debug.LogError((object)("Error while backing up old saves: " + ex.Message));
			Debug.LogException(ex);
			throw;
		}
		string GetBackupName(int i)
		{
			return $"{fileName}.{i}";
		}
	}

	private void Start()
	{
		((MonoBehaviour)this).StartCoroutine(SaveRegularly());
		((MonoBehaviour)this).StartCoroutine(ProcessStreamRequests());
	}

	private IEnumerator SaveRegularly()
	{
		while (true)
		{
			yield return CoroutineEx.waitForSeconds(1f);
			if (RealTimeSince.op_Implicit(TimeSinceLastSave) >= (float)ConVar.Server.saveinterval || NexusServer.NeedsJournalFlush || NexusServer.NeedTransferFlush)
			{
				yield return ((MonoBehaviour)this).StartCoroutine(DoAutomatedSave());
				TimeSinceLastSave = RealTimeSince.op_Implicit(0f);
			}
		}
	}

	private IEnumerator ProcessStreamRequests()
	{
		while (true)
		{
			yield return CoroutineEx.waitForEndOfFrame;
			bool flag = false;
			Stream result = null;
			lock (saveQueueLock)
			{
				flag = saveQueue.TryDequeue(out result);
			}
			if (flag)
			{
				((MonoBehaviour)this).StartCoroutine(SaveToStream(result));
			}
		}
	}

	[IteratorStateMachine(typeof(<DoAutomatedSave>d__20))]
	private IEnumerator DoAutomatedSave(bool AndWait = false)
	{
		Interface.CallHook("OnServerSave");
		return new <DoAutomatedSave>d__20(0)
		{
			<>4__this = this,
			AndWait = AndWait
		};
	}

	public static bool Save(bool AndWait)
	{
		if ((Object)(object)SingletonComponent<SaveRestore>.Instance == (Object)null)
		{
			return false;
		}
		if (IsSaving)
		{
			return false;
		}
		IEnumerator enumerator = SingletonComponent<SaveRestore>.Instance.DoAutomatedSave(AndWait: true);
		while (enumerator.MoveNext())
		{
		}
		return true;
	}

	public static void RequestSave(Stream stream)
	{
		lock (saveQueueLock)
		{
			saveQueue.Enqueue(stream);
		}
	}

	private static IEnumerator WarmUpEntityCaches(bool isBlocking = false, Stopwatch cacheTimer = null)
	{
		cacheTimer?.Start();
		TimeWarning val = TimeWarning.New("SaveCache", 100);
		try
		{
			Stopwatch sw = Stopwatch.StartNew();
			BaseEntity[] array = BaseEntity.saveList.ToArray();
			foreach (BaseEntity baseEntity in array)
			{
				if ((Object)(object)baseEntity == (Object)null || !baseEntity.IsValid())
				{
					continue;
				}
				try
				{
					baseEntity.GetSaveCache();
				}
				catch (Exception ex)
				{
					Debug.LogException(ex);
				}
				if (sw.Elapsed.TotalMilliseconds > 5.0)
				{
					if (!isBlocking)
					{
						yield return CoroutineEx.waitForEndOfFrame;
					}
					sw.Reset();
					sw.Start();
				}
			}
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
		cacheTimer?.Stop();
	}

	private static void WriteHeader(BinaryWriter writer)
	{
		writer.Write((sbyte)83);
		writer.Write((sbyte)65);
		writer.Write((sbyte)86);
		writer.Write((sbyte)82);
		SaveExtraData saveExtraData = new SaveExtraData();
		saveExtraData.WipeId = WipeId;
		writer.Write((sbyte)74);
		writer.Write(JsonConvert.SerializeObject((object)saveExtraData));
		writer.Write((sbyte)68);
		writer.Write(Epoch.FromDateTime(SaveCreatedTime));
		writer.Write(265u);
	}

	private static int WriteEntities(BinaryWriter writer)
	{
		int num = 0;
		foreach (BaseEntity save in BaseEntity.saveList)
		{
			if ((Object)(object)save == (Object)null || save.IsDestroyed)
			{
				Debug.LogWarning((object)("Entity is NULL but is still in saveList - not destroyed properly? " + (object)save), (Object)(object)save);
				continue;
			}
			MemoryStream memoryStream = null;
			try
			{
				memoryStream = save.GetSaveCache();
			}
			catch (Exception ex)
			{
				Debug.LogException(ex);
			}
			if (memoryStream == null || memoryStream.Length <= 0)
			{
				Debug.LogWarningFormat("Skipping saving entity {0} - because {1}", new object[2]
				{
					save,
					(memoryStream == null) ? "savecache is null" : "savecache is 0"
				});
			}
			else
			{
				writer.Write((uint)memoryStream.Length);
				writer.Write(memoryStream.GetBuffer(), 0, (int)memoryStream.Length);
				num++;
			}
		}
		return num;
	}

	public static List<BaseEntity> FindMapEntities()
	{
		return new List<BaseEntity>(Object.FindObjectsOfType<BaseEntity>());
	}

	public static void ClearMapEntities(List<BaseEntity> entities)
	{
		int count = entities.Count;
		DebugEx.Log((object)("Destroying " + count + " old entities"), (StackTraceLogType)0);
		Stopwatch stopwatch = Stopwatch.StartNew();
		for (int num = count - 1; num >= 0; num--)
		{
			BaseEntity baseEntity = entities[num];
			if (baseEntity.enableSaving || !((Object)(object)((Component)baseEntity).GetComponent<DisableSave>() != (Object)null))
			{
				baseEntity.KillAsMapEntity();
				if (stopwatch.Elapsed.TotalMilliseconds > 2000.0)
				{
					stopwatch.Reset();
					stopwatch.Start();
					DebugEx.Log((object)("\t" + (count - num) + " / " + count), (StackTraceLogType)0);
				}
				entities.RemoveAt(num);
			}
		}
		ItemManager.Heartbeat();
		DebugEx.Log((object)"\tdone.", (StackTraceLogType)0);
	}

	public static void SpawnMapEntities(List<BaseEntity> entities)
	{
		DebugEx.Log((object)("Spawning " + entities.Count + " entities from map"), (StackTraceLogType)0);
		foreach (BaseEntity entity in entities)
		{
			if (!((Object)(object)entity == (Object)null))
			{
				entity.SpawnAsMapEntity();
			}
		}
		DebugEx.Log((object)"\tdone.", (StackTraceLogType)0);
		DebugEx.Log((object)("Postprocessing " + entities.Count + " entities from map"), (StackTraceLogType)0);
		foreach (BaseEntity entity2 in entities)
		{
			if (!((Object)(object)entity2 == (Object)null))
			{
				entity2.PostMapEntitySpawn();
			}
		}
		DebugEx.Log((object)"\tdone.", (StackTraceLogType)0);
	}

	public static bool Load(string strFilename = "", bool allowOutOfDateSaves = false)
	{
		//IL_02b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0243: Unknown result type (might be due to invalid IL or missing references)
		//IL_0248: Unknown result type (might be due to invalid IL or missing references)
		//IL_0386: Unknown result type (might be due to invalid IL or missing references)
		//IL_0397: Unknown result type (might be due to invalid IL or missing references)
		//IL_039c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0354: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_03c0: Unknown result type (might be due to invalid IL or missing references)
		SaveCreatedTime = DateTime.UtcNow;
		try
		{
			if (strFilename == "")
			{
				strFilename = World.SaveFolderName + "/" + World.SaveFileName;
			}
			if (!File.Exists(strFilename))
			{
				Interface.CallHook("OnNewSave", (object)strFilename);
				if (!File.Exists("TestSaves/" + strFilename))
				{
					Debug.LogWarning((object)("Couldn't load " + strFilename + " - file doesn't exist"));
					return false;
				}
				strFilename = "TestSaves/" + strFilename;
			}
			List<BaseEntity> list = FindMapEntities();
			Dictionary<BaseEntity, Entity> dictionary = new Dictionary<BaseEntity, Entity>();
			using (FileStream fileStream = File.OpenRead(strFilename))
			{
				using BinaryReader binaryReader = new BinaryReader(fileStream);
				SaveCreatedTime = File.GetCreationTime(strFilename);
				if (binaryReader.ReadSByte() != 83 || binaryReader.ReadSByte() != 65 || binaryReader.ReadSByte() != 86 || binaryReader.ReadSByte() != 82)
				{
					Debug.LogWarning((object)"Invalid save (missing header)");
					return false;
				}
				if (binaryReader.PeekChar() == 74)
				{
					binaryReader.ReadChar();
					WipeId = JsonConvert.DeserializeObject<SaveExtraData>(binaryReader.ReadString()).WipeId;
				}
				if (binaryReader.PeekChar() == 68)
				{
					binaryReader.ReadChar();
					SaveCreatedTime = Epoch.ToDateTime((long)binaryReader.ReadInt32());
				}
				if (binaryReader.ReadUInt32() != 265)
				{
					if (allowOutOfDateSaves)
					{
						Debug.LogWarning((object)"This save is from an older (possibly incompatible) version!");
					}
					else
					{
						Debug.LogWarning((object)"This save is from an older version. It might not load properly.");
					}
				}
				ClearMapEntities(list);
				Assert.IsTrue(BaseEntity.saveList.Count == 0, "BaseEntity.saveList isn't empty!");
				Net.sv.Reset();
				Application.isLoadingSave = true;
				HashSet<NetworkableId> hashSet = new HashSet<NetworkableId>();
				while (fileStream.Position < fileStream.Length)
				{
					RCon.Update();
					uint num = binaryReader.ReadUInt32();
					long position = fileStream.Position;
					Entity entData = null;
					try
					{
						entData = Entity.DeserializeLength((Stream)fileStream, (int)num);
					}
					catch (Exception ex)
					{
						Debug.LogWarning((object)("Skipping entity since it could not be deserialized - stream position: " + position + " size: " + num));
						Debug.LogException(ex);
						fileStream.Position = position + num;
						continue;
					}
					NetworkableId uid;
					if (entData.basePlayer != null && dictionary.Any((KeyValuePair<BaseEntity, Entity> x) => x.Value.basePlayer != null && x.Value.basePlayer.userid == entData.basePlayer.userid))
					{
						string[] obj = new string[5] { "Skipping entity ", null, null, null, null };
						uid = entData.baseNetworkable.uid;
						obj[1] = ((object)(NetworkableId)(ref uid)/*cast due to .constrained prefix*/).ToString();
						obj[2] = " - it's a player ";
						obj[3] = entData.basePlayer.userid.ToString();
						obj[4] = " who is in the save multiple times";
						Debug.LogWarning((object)string.Concat(obj));
					}
					else if (((NetworkableId)(ref entData.baseNetworkable.uid)).IsValid && hashSet.Contains(entData.baseNetworkable.uid))
					{
						string[] obj2 = new string[5] { "Skipping entity ", null, null, null, null };
						uid = entData.baseNetworkable.uid;
						obj2[1] = ((object)(NetworkableId)(ref uid)/*cast due to .constrained prefix*/).ToString();
						obj2[2] = " ";
						obj2[3] = StringPool.Get(entData.baseNetworkable.prefabID);
						obj2[4] = " - uid is used multiple times";
						Debug.LogWarning((object)string.Concat(obj2));
					}
					else
					{
						if (((NetworkableId)(ref entData.baseNetworkable.uid)).IsValid)
						{
							hashSet.Add(entData.baseNetworkable.uid);
						}
						BaseEntity baseEntity = GameManager.server.CreateEntity(StringPool.Get(entData.baseNetworkable.prefabID), entData.baseEntity.pos, Quaternion.Euler(entData.baseEntity.rot));
						if (Object.op_Implicit((Object)(object)baseEntity))
						{
							baseEntity.InitLoad(entData.baseNetworkable.uid);
							baseEntity.PreServerLoad();
							dictionary.Add(baseEntity, entData);
						}
					}
				}
			}
			DebugEx.Log((object)("Spawning " + list.Count + " entities from map"), (StackTraceLogType)0);
			foreach (BaseEntity item in list)
			{
				if (!((Object)(object)item == (Object)null))
				{
					item.SpawnAsMapEntity();
				}
			}
			DebugEx.Log((object)"\tdone.", (StackTraceLogType)0);
			DebugEx.Log((object)("Spawning " + dictionary.Count + " entities from save"), (StackTraceLogType)0);
			object obj3 = Interface.CallHook("OnSaveLoad", (object)dictionary);
			if (obj3 is bool)
			{
				return (bool)obj3;
			}
			BaseNetworkable.LoadInfo info = default(BaseNetworkable.LoadInfo);
			info.fromDisk = true;
			Stopwatch stopwatch = Stopwatch.StartNew();
			int num2 = 0;
			foreach (KeyValuePair<BaseEntity, Entity> item2 in dictionary)
			{
				BaseEntity key = item2.Key;
				if ((Object)(object)key == (Object)null)
				{
					continue;
				}
				RCon.Update();
				info.msg = item2.Value;
				key.Spawn();
				key.Load(info);
				if (key.IsValid())
				{
					num2++;
					if (stopwatch.Elapsed.TotalMilliseconds > 2000.0)
					{
						stopwatch.Reset();
						stopwatch.Start();
						DebugEx.Log((object)("\t" + num2 + " / " + dictionary.Count), (StackTraceLogType)0);
					}
				}
			}
			DebugEx.Log((object)"\tdone.", (StackTraceLogType)0);
			DebugEx.Log((object)("Postprocessing " + list.Count + " entities from map"), (StackTraceLogType)0);
			foreach (BaseEntity item3 in list)
			{
				if (!((Object)(object)item3 == (Object)null))
				{
					item3.PostMapEntitySpawn();
				}
			}
			DebugEx.Log((object)"\tdone.", (StackTraceLogType)0);
			DebugEx.Log((object)("Postprocessing " + list.Count + " entities from save"), (StackTraceLogType)0);
			foreach (KeyValuePair<BaseEntity, Entity> item4 in dictionary)
			{
				BaseEntity key2 = item4.Key;
				if (!((Object)(object)key2 == (Object)null))
				{
					RCon.Update();
					if (key2.IsValid())
					{
						key2.UpdateNetworkGroup();
						key2.PostServerLoad();
					}
				}
			}
			DebugEx.Log((object)"\tdone.", (StackTraceLogType)0);
			if (Object.op_Implicit((Object)(object)SingletonComponent<SpawnHandler>.Instance))
			{
				DebugEx.Log((object)"Enforcing SpawnPopulation Limits", (StackTraceLogType)0);
				SingletonComponent<SpawnHandler>.Instance.EnforceLimits();
				DebugEx.Log((object)"\tdone.", (StackTraceLogType)0);
			}
			InitializeWipeId();
			Application.isLoadingSave = false;
			return true;
		}
		catch (Exception ex2)
		{
			Debug.LogWarning((object)("Error loading save (" + strFilename + ")"));
			Debug.LogException(ex2);
			return false;
		}
	}

	public static void GetSaveCache()
	{
		BaseEntity[] array = BaseEntity.saveList.ToArray();
		if (array.Length == 0)
		{
			return;
		}
		DebugEx.Log((object)("Initializing " + array.Length + " entity save caches"), (StackTraceLogType)0);
		Stopwatch stopwatch = Stopwatch.StartNew();
		for (int i = 0; i < array.Length; i++)
		{
			BaseEntity baseEntity = array[i];
			if (baseEntity.IsValid())
			{
				baseEntity.GetSaveCache();
				if (stopwatch.Elapsed.TotalMilliseconds > 2000.0)
				{
					stopwatch.Reset();
					stopwatch.Start();
					DebugEx.Log((object)("\t" + (i + 1) + " / " + array.Length), (StackTraceLogType)0);
				}
			}
		}
		DebugEx.Log((object)"\tdone.", (StackTraceLogType)0);
	}

	public static void InitializeEntityLinks()
	{
		BaseEntity[] array = (from x in BaseNetworkable.serverEntities
			where x is BaseEntity
			select x as BaseEntity).ToArray();
		if (array.Length == 0)
		{
			return;
		}
		DebugEx.Log((object)("Initializing " + array.Length + " entity links"), (StackTraceLogType)0);
		Stopwatch stopwatch = Stopwatch.StartNew();
		for (int i = 0; i < array.Length; i++)
		{
			RCon.Update();
			array[i].RefreshEntityLinks();
			if (stopwatch.Elapsed.TotalMilliseconds > 2000.0)
			{
				stopwatch.Reset();
				stopwatch.Start();
				DebugEx.Log((object)("\t" + (i + 1) + " / " + array.Length), (StackTraceLogType)0);
			}
		}
		DebugEx.Log((object)"\tdone.", (StackTraceLogType)0);
	}

	public static void InitializeEntitySupports()
	{
		if (!ConVar.Server.stability)
		{
			return;
		}
		StabilityEntity[] array = (from x in BaseNetworkable.serverEntities
			where x is StabilityEntity
			select x as StabilityEntity).ToArray();
		if (array.Length == 0)
		{
			return;
		}
		DebugEx.Log((object)("Initializing " + array.Length + " stability supports"), (StackTraceLogType)0);
		Stopwatch stopwatch = Stopwatch.StartNew();
		for (int i = 0; i < array.Length; i++)
		{
			RCon.Update();
			array[i].InitializeSupports();
			if (stopwatch.Elapsed.TotalMilliseconds > 2000.0)
			{
				stopwatch.Reset();
				stopwatch.Start();
				DebugEx.Log((object)("\t" + (i + 1) + " / " + array.Length), (StackTraceLogType)0);
			}
		}
		DebugEx.Log((object)"\tdone.", (StackTraceLogType)0);
	}

	public static void InitializeEntityConditionals()
	{
		BuildingBlock[] array = (from x in BaseNetworkable.serverEntities
			where x is BuildingBlock
			select x as BuildingBlock).ToArray();
		if (array.Length == 0)
		{
			return;
		}
		DebugEx.Log((object)("Initializing " + array.Length + " conditional models"), (StackTraceLogType)0);
		Stopwatch stopwatch = Stopwatch.StartNew();
		for (int i = 0; i < array.Length; i++)
		{
			RCon.Update();
			array[i].UpdateSkin(force: true);
			if (stopwatch.Elapsed.TotalMilliseconds > 2000.0)
			{
				stopwatch.Reset();
				stopwatch.Start();
				DebugEx.Log((object)("\t" + (i + 1) + " / " + array.Length), (StackTraceLogType)0);
			}
		}
		DebugEx.Log((object)"\tdone.", (StackTraceLogType)0);
	}

	public static void InitializeWipeId()
	{
		if (WipeId == null)
		{
			WipeId = Guid.NewGuid().ToString("N");
		}
	}
}
