using System;
using System.Collections.Generic;
using Facepunch;
using ProtoBuf;
using UnityEngine;

public class VendingMachineMapMarker : MapMarker
{
	public string markerShopName;

	public VendingMachine server_vendingMachine;

	public VendingMachine client_vendingMachine;

	[NonSerialized]
	public NetworkableId client_vendingMachineNetworkID;

	public GameObjectRef clusterMarkerObj;

	private UIMapVendingMachineMarker myUIMarker;

	private RectTransform markerTransform;

	public void SetVendingMachine(VendingMachine vm, string shopName)
	{
		_ = (Object)(object)vm == (Object)null;
		server_vendingMachine = vm;
		markerShopName = shopName;
		if (!((FacepunchBehaviour)this).IsInvoking((Action)TryUpdatePosition))
		{
			((FacepunchBehaviour)this).InvokeRandomized((Action)TryUpdatePosition, 30f, 30f, 10f);
		}
	}

	public void TryUpdatePosition()
	{
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)server_vendingMachine != (Object)null && (Object)(object)server_vendingMachine.GetParentEntity() != (Object)null)
		{
			((Component)this).transform.position = ((Component)server_vendingMachine).transform.position;
			try
			{
				syncPosition = true;
				NetworkPositionTick();
			}
			finally
			{
				syncPosition = false;
			}
		}
	}

	public override void Save(SaveInfo info)
	{
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		base.Save(info);
		info.msg.vendingMachine = Pool.Get<VendingMachine>();
		info.msg.vendingMachine.shopName = markerShopName;
		if ((Object)(object)server_vendingMachine != (Object)null)
		{
			if (server_vendingMachine is NPCVendingMachine { IsLocalized: not false } nPCVendingMachine)
			{
				info.msg.vendingMachine.translationToken = nPCVendingMachine.GetTranslationToken();
			}
			info.msg.vendingMachine.networkID = server_vendingMachine.net.ID;
			info.msg.vendingMachine.sellOrderContainer = server_vendingMachine.sellOrders.Copy();
			info.msg.vendingMachine.sellOrderContainer.sellOrders.RemoveAll(delegate(SellOrder x)
			{
				//IL_001d: Unknown result type (might be due to invalid IL or missing references)
				//IL_0030: Unknown result type (might be due to invalid IL or missing references)
				ItemDefinition itemDefinition = ItemManager.FindItemDefinition(x.itemToSellID);
				return !ItemManager.FindItemDefinition(x.currencyID).IsAllowedInEra(server_vendingMachine.CurrentEraRestriction) || !itemDefinition.IsAllowedInEra(server_vendingMachine.CurrentEraRestriction);
			});
		}
	}

	public override AppMarker GetAppMarkerData()
	{
		AppMarker appMarkerData = base.GetAppMarkerData();
		appMarkerData.name = markerShopName ?? "";
		appMarkerData.outOfStock = !HasFlag(Flags.Busy);
		if ((Object)(object)server_vendingMachine != (Object)null)
		{
			appMarkerData.sellOrders = Pool.Get<List<SellOrder>>();
			foreach (SellOrder sellOrder in server_vendingMachine.sellOrders.sellOrders)
			{
				if (server_vendingMachine.CanSellOrBuyItem(sellOrder.itemToSellID, sellOrder.currencyID))
				{
					SellOrder val = Pool.Get<SellOrder>();
					val.itemId = sellOrder.itemToSellID;
					val.quantity = sellOrder.itemToSellAmount;
					val.currencyId = sellOrder.currencyID;
					val.costPerItem = sellOrder.currencyAmountPerItem;
					val.amountInStock = sellOrder.inStock;
					val.itemIsBlueprint = sellOrder.itemToSellIsBP;
					val.currencyIsBlueprint = sellOrder.currencyIsBP;
					val.itemCondition = sellOrder.itemCondition;
					val.itemConditionMax = sellOrder.itemConditionMax;
					val.priceMultiplier = sellOrder.priceMultiplier;
					appMarkerData.sellOrders.Add(val);
				}
			}
		}
		return appMarkerData;
	}
}
