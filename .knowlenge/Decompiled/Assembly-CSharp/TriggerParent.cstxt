using UnityEngine;

public class TriggerParent : TriggerBase, IServerComponent
{
	public override GameObject InterestedInObject(GameObject obj)
	{
		obj = base.InterestedInObject(obj);
		if (obj == null)
		{
			return null;
		}
		BaseEntity baseEntity = GameObjectEx.ToBaseEntity(obj);
		if (baseEntity == null)
		{
			return null;
		}
		if (baseEntity.isClient)
		{
			return null;
		}
		return baseEntity.gameObject;
	}

	public override void OnEntityEnter(BaseEntity ent)
	{
		BasePlayer basePlayer = ent.ToPlayer();
		if ((!(basePlayer != null) || !basePlayer.isMounted) && !(ent is NPCPlayer) && !ent.HasParent() && !(ent.FindTrigger<TriggerParentExclusion>() != null))
		{
			ent.SetParent(GameObjectEx.ToBaseEntity(base.gameObject), worldPositionStays: true, sendImmediate: true);
		}
	}

	public override void OnEntityLeave(BaseEntity ent)
	{
		BasePlayer basePlayer = ent.ToPlayer();
		if ((!(basePlayer != null) || !basePlayer.IsSleeping()) && !(ent.GetParentEntity() != GameObjectEx.ToBaseEntity(base.gameObject)))
		{
			ent.SetParent(null, worldPositionStays: true, sendImmediate: true);
			ent.ForceUpdateTriggers(enter: true, exit: false);
			if (basePlayer != null)
			{
				basePlayer.PauseFlyHackDetection(5f);
				basePlayer.PauseSpeedHackDetection(5f);
				basePlayer.PauseVehicleNoClipDetection(5f);
			}
		}
	}
}
