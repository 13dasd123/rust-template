using System;
using System.Collections.Generic;
using FIMSpace;
using UnityEngine;

public abstract class FGroundFitter_Base : MonoBehaviour
{
	[Space(4f, order = 1)]
	[Tooltip("How quick rotation should be corrected to target")]
	[Range(1f, 30f)]
	[Header("> Main Variables <", order = 0)]
	public float FittingSpeed = 6f;

	[Tooltip("Smoothing whole rotation motion")]
	[Range(0f, 1f)]
	public float TotalSmoother;

	[Space(3f)]
	[HideInInspector]
	[Tooltip("Transform which will be rotated by script, usually it can be the same transform as component's")]
	public Transform TransformToRotate;

	[Space(3f)]
	[Tooltip("If you want this script only to change your object's rotation and do nothing with position, untoggle this")]
	public bool GlueToGround;

	[Header("> Tweaking Settings <", order = 0)]
	[Space(4f, order = 1)]
	[Tooltip("If forward/pitch rotation value should go in lighter value than real normal hit direction")]
	[Range(0f, 1f)]
	public float MildForwardValue;

	[Range(0f, 90f)]
	[Tooltip("Maximum rotation angle in rotation of x/pitch axis, so rotating forward - degrees value of maximum rotation")]
	public float MaxForwardRotation = 90f;

	[Space(5f)]
	[Range(0f, 1f)]
	[Tooltip("If side rotation value/roll should go in lighter value than real normal hit direction")]
	public float MildHorizontalValue;

	[Range(0f, 90f)]
	[Tooltip("Max roll rotation. If rotation should work on also on x axis - good for spiders, can look wrong on quadropeds etc.")]
	public float MaxHorizontalRotation = 90f;

	[Header("> Advanced settings <", order = 0)]
	[Space(4f, order = 1)]
	[Tooltip("We should cast raycast from position little higher than foots of your game object")]
	public float RaycastHeightOffset = 0.5f;

	[Tooltip("How far ray should cast to check if ground is under feet")]
	public float RaycastCheckRange = 5f;

	[Tooltip("If value is not equal 0 there will be casted second ray in front or back of gameObject")]
	public float LookAheadRaycast;

	[Tooltip("Blending with predicted forward raycast rotation")]
	public float AheadBlend = 0.5f;

	[HideInInspector]
	[Tooltip("Offset over ground")]
	public float UpOffset;

	[Space(8f)]
	[Tooltip("What collision layers should be included by algorithm")]
	public LayerMask GroundLayerMask = LayerMask.op_Implicit(1);

	[Tooltip("When casting down vector should adjust with transform's rotation")]
	public bool RelativeLookUp;

	[Range(0f, 1f)]
	public float RelativeLookUpBias;

	internal Vector3 WorldUp = Vector3.up;

	[Tooltip("Casting more raycsts under object to detect ground more precisely, then we use average from all casts to set new rotation")]
	[Space(8f)]
	public bool ZoneCast;

	public Vector2 ZoneCastDimensions = new Vector2(0.3f, 0.5f);

	public Vector3 ZoneCastOffset = Vector3.zero;

	[Range(0f, 10f)]
	public float ZoneCastBias;

	[Range(0f, 1f)]
	[Tooltip("More precision = more raycasts = lower performance")]
	public float ZoneCastPrecision = 0.25f;

	[NonSerialized]
	public float UpAxisRotation;

	protected Quaternion helperRotation = Quaternion.identity;

	protected Collider selfCollider;

	protected Vector3 castOffset = Vector3.zero;

	protected float deltaTime;

	internal bool ApplyRotation = true;

	internal Quaternion targetRotationToApply = Quaternion.identity;

	public RaycastHit LastRaycast { get; protected set; }

	public Vector3 LastRaycastOrigin { get; protected set; }

	public RaycastHit LastTransformRaycast { get; protected set; }

	public Quaternion LastRotation { get; protected set; }

	protected virtual void Start()
	{
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		selfCollider = ((Component)this).GetComponent<Collider>();
		if ((Object)(object)TransformToRotate == (Object)null)
		{
			TransformToRotate = ((Component)this).transform;
		}
		UpAxisRotation = ((Component)this).transform.localEulerAngles.y;
	}

	protected virtual void Reset()
	{
		TransformToRotate = ((Component)this).transform;
	}

	protected virtual void FitToGround()
	{
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0114: Unknown result type (might be due to invalid IL or missing references)
		//IL_0119: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0144: Unknown result type (might be due to invalid IL or missing references)
		//IL_0149: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0164: Unknown result type (might be due to invalid IL or missing references)
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_016c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0177: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		if (Object.op_Implicit((Object)(object)selfCollider))
		{
			selfCollider.enabled = false;
		}
		RaycastHit val = default(RaycastHit);
		if (LookAheadRaycast != 0f)
		{
			Physics.Raycast(TransformToRotate.position + GetUpVector(RaycastHeightOffset) + TransformToRotate.forward * LookAheadRaycast, -GetUpVector(), ref val, RaycastCheckRange, LayerMask.op_Implicit(GroundLayerMask), (QueryTriggerInteraction)1);
		}
		RefreshLastRaycast();
		RaycastHit lastRaycast = LastRaycast;
		if (Object.op_Implicit((Object)(object)((RaycastHit)(ref lastRaycast)).transform))
		{
			Vector3 up = Vector3.up;
			lastRaycast = LastRaycast;
			Quaternion val2 = Quaternion.FromToRotation(up, ((RaycastHit)(ref lastRaycast)).normal);
			if (Object.op_Implicit((Object)(object)((RaycastHit)(ref val)).transform))
			{
				Quaternion val3 = Quaternion.FromToRotation(Vector3.up, ((RaycastHit)(ref val)).normal);
				val2 = Quaternion.Lerp(val2, val3, AheadBlend);
			}
			helperRotation = Quaternion.Slerp(helperRotation, val2, deltaTime * FittingSpeed);
		}
		else
		{
			helperRotation = Quaternion.Slerp(helperRotation, Quaternion.identity, deltaTime * FittingSpeed);
		}
		RotationCalculations();
		if (GlueToGround)
		{
			lastRaycast = LastRaycast;
			if (Object.op_Implicit((Object)(object)((RaycastHit)(ref lastRaycast)).transform))
			{
				Transform transformToRotate = TransformToRotate;
				lastRaycast = LastRaycast;
				transformToRotate.position = ((RaycastHit)(ref lastRaycast)).point + Vector3.up * UpOffset;
			}
		}
		if (Object.op_Implicit((Object)(object)selfCollider))
		{
			selfCollider.enabled = true;
		}
	}

	internal virtual void RotationCalculations()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00af: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_0102: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		Quaternion val = helperRotation;
		val = Quaternion.Euler(Mathf.Clamp(FLogicMethods.WrapAngle(((Quaternion)(ref val)).eulerAngles.x), 0f - MaxForwardRotation, MaxForwardRotation) * (1f - MildForwardValue), ((Quaternion)(ref val)).eulerAngles.y, Mathf.Clamp(FLogicMethods.WrapAngle(((Quaternion)(ref val)).eulerAngles.z), 0f - MaxHorizontalRotation, MaxHorizontalRotation) * (1f - MildHorizontalValue));
		if (TotalSmoother == 0f)
		{
			targetRotationToApply = val * Quaternion.AngleAxis(UpAxisRotation, Vector3.up);
		}
		else
		{
			Quaternion val2 = Quaternion.AngleAxis(UpAxisRotation, Vector3.up);
			targetRotationToApply *= Quaternion.Inverse(val2);
			targetRotationToApply = Quaternion.Slerp(targetRotationToApply, val, deltaTime * Mathf.Lerp(50f, 1f, TotalSmoother));
			targetRotationToApply *= val2;
		}
		if (ApplyRotation)
		{
			TransformToRotate.rotation = targetRotationToApply;
		}
		LastRotation = TransformToRotate.rotation;
	}

	internal virtual RaycastHit CastRay()
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		//IL_010c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		//IL_0146: Unknown result type (might be due to invalid IL or missing references)
		//IL_014a: Unknown result type (might be due to invalid IL or missing references)
		//IL_014f: Unknown result type (might be due to invalid IL or missing references)
		//IL_015a: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0164: Unknown result type (might be due to invalid IL or missing references)
		//IL_016c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		//IL_0177: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0196: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0200: Unknown result type (might be due to invalid IL or missing references)
		//IL_0205: Unknown result type (might be due to invalid IL or missing references)
		//IL_0209: Unknown result type (might be due to invalid IL or missing references)
		//IL_020e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0213: Unknown result type (might be due to invalid IL or missing references)
		//IL_0215: Unknown result type (might be due to invalid IL or missing references)
		//IL_021b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0220: Unknown result type (might be due to invalid IL or missing references)
		//IL_0224: Unknown result type (might be due to invalid IL or missing references)
		//IL_0229: Unknown result type (might be due to invalid IL or missing references)
		//IL_022e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0241: Unknown result type (might be due to invalid IL or missing references)
		//IL_024b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0250: Unknown result type (might be due to invalid IL or missing references)
		//IL_0252: Unknown result type (might be due to invalid IL or missing references)
		//IL_025c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0261: Unknown result type (might be due to invalid IL or missing references)
		//IL_0265: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_0116: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0121: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_027c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0289: Unknown result type (might be due to invalid IL or missing references)
		//IL_0293: Unknown result type (might be due to invalid IL or missing references)
		//IL_029a: Unknown result type (might be due to invalid IL or missing references)
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		//IL_0131: Unknown result type (might be due to invalid IL or missing references)
		//IL_0136: Unknown result type (might be due to invalid IL or missing references)
		LastRaycastOrigin = GetRaycastOrigin() + castOffset;
		RaycastHit val = default(RaycastHit);
		Physics.Raycast(LastRaycastOrigin, -GetUpVector(), ref val, RaycastCheckRange + Mathf.Abs(UpOffset), LayerMask.op_Implicit(GroundLayerMask), (QueryTriggerInteraction)1);
		if (ZoneCast)
		{
			Vector3 val2 = TransformToRotate.position + GetRotation() * ZoneCastOffset + GetUpVector(RaycastHeightOffset);
			Vector3 val3 = TransformToRotate.right * ZoneCastDimensions.x;
			Vector3 val4 = TransformToRotate.forward * ZoneCastDimensions.y;
			List<RaycastHit> list = new List<RaycastHit>();
			list.Add(val);
			int num = 0;
			float num2 = 1f;
			RaycastHit item = default(RaycastHit);
			for (int i = 0; (float)i < Mathf.Lerp(4f, 24f, ZoneCastPrecision); i++)
			{
				Vector3 val5 = Vector3.zero;
				switch (num)
				{
				case 0:
					val5 = val3 - val4;
					break;
				case 1:
					val5 = val3 + val4;
					break;
				case 2:
					val5 = -val3 + val4;
					break;
				case 3:
					val5 = -val3 - val4;
					num2 += 0.75f;
					num = -1;
					break;
				}
				Physics.Raycast(val2 + val5 / num2, -GetUpVector() + val5 * ZoneCastBias + castOffset, ref item, RaycastCheckRange + Mathf.Abs(UpOffset), LayerMask.op_Implicit(GroundLayerMask), (QueryTriggerInteraction)1);
				if (Object.op_Implicit((Object)(object)((RaycastHit)(ref item)).transform))
				{
					list.Add(item);
				}
				num++;
			}
			Vector3 val6 = Vector3.zero;
			Vector3 val7 = Vector3.zero;
			for (int j = 0; j < list.Count; j++)
			{
				Vector3 val8 = val7;
				RaycastHit val9 = list[j];
				val7 = val8 + ((RaycastHit)(ref val9)).normal;
				Vector3 val10 = val6;
				val9 = list[j];
				val6 = val10 + ((RaycastHit)(ref val9)).point;
			}
			val6 /= (float)list.Count;
			val7 /= (float)list.Count;
			((RaycastHit)(ref val)).normal = val7;
			if (!Object.op_Implicit((Object)(object)((RaycastHit)(ref val)).transform))
			{
				((RaycastHit)(ref val)).point = new Vector3(val6.x, TransformToRotate.position.y, val6.z);
			}
		}
		return val;
	}

	internal Vector3 GetRaycastOrigin()
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		return TransformToRotate.position + GetUpVector() * RaycastHeightOffset;
	}

	protected virtual Quaternion GetRotation()
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		return TransformToRotate.rotation;
	}

	protected virtual Vector3 GetUpVector(float mulRange = 1f)
	{
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		if (RelativeLookUp)
		{
			Vector3 worldUp = WorldUp;
			Vector3 val = TransformToRotate.TransformDirection(Vector3.up);
			return Vector3.Lerp(worldUp, ((Vector3)(ref val)).normalized, RelativeLookUpBias) * mulRange;
		}
		return WorldUp * mulRange;
	}

	internal void RotateBack(float speed = 5f)
	{
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		if (!(speed <= 0f))
		{
			helperRotation = Quaternion.Slerp(helperRotation, Quaternion.identity, deltaTime * speed);
		}
	}

	internal void RefreshLastRaycast()
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		LastRaycast = CastRay();
		RaycastHit lastRaycast = LastRaycast;
		if (Object.op_Implicit((Object)(object)((RaycastHit)(ref lastRaycast)).transform))
		{
			LastTransformRaycast = LastRaycast;
		}
	}

	internal void BackRaycast()
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		LastRaycast = LastTransformRaycast;
	}
}
