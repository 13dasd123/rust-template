using UnityEngine;

public class BaseAttackState : BasicAIState
{
	private IAIAttack attack;

	public BaseAttackState()
		: base(AIState.Attack)
	{
		base.AgrresiveState = true;
	}

	public override void StateEnter(BaseAIBrain brain, BaseEntity entity)
	{
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		base.StateEnter(brain, entity);
		attack = entity as IAIAttack;
		BaseEntity baseEntity = brain.Events.Memory.Entity.Get(brain.Events.CurrentInputMemorySlot);
		if ((Object)(object)baseEntity != (Object)null)
		{
			Vector3 aimDirection = GetAimDirection(((Component)brain.Navigator).transform.position, ((Component)baseEntity).transform.position);
			brain.Navigator.SetFacingDirectionOverride(aimDirection);
			if (attack.CanAttack(baseEntity))
			{
				StartAttacking(baseEntity);
			}
			brain.Navigator.SetDestination(((Component)baseEntity).transform.position, BaseNavigator.NavigationSpeed.Fast);
		}
	}

	public override void StateLeave(BaseAIBrain brain, BaseEntity entity)
	{
		base.StateLeave(brain, entity);
		brain.Navigator.ClearFacingDirectionOverride();
		brain.Navigator.Stop();
		StopAttacking();
	}

	private void StopAttacking()
	{
		attack.StopAttacking();
	}

	public override StateStatus StateThink(float delta, BaseAIBrain brain, BaseEntity entity)
	{
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		base.StateThink(delta, brain, entity);
		BaseEntity baseEntity = brain.Events.Memory.Entity.Get(brain.Events.CurrentInputMemorySlot);
		if (attack == null)
		{
			return StateStatus.Error;
		}
		if ((Object)(object)baseEntity == (Object)null)
		{
			brain.Navigator.ClearFacingDirectionOverride();
			StopAttacking();
			return StateStatus.Finished;
		}
		if (brain.Senses.ignoreSafeZonePlayers)
		{
			BasePlayer basePlayer = baseEntity as BasePlayer;
			if ((Object)(object)basePlayer != (Object)null && basePlayer.InSafeZone())
			{
				return StateStatus.Error;
			}
		}
		if (!brain.Navigator.SetDestination(((Component)baseEntity).transform.position, BaseNavigator.NavigationSpeed.Fast, 0.25f))
		{
			return StateStatus.Error;
		}
		Vector3 aimDirection = GetAimDirection(((Component)brain.Navigator).transform.position, ((Component)baseEntity).transform.position);
		brain.Navigator.SetFacingDirectionOverride(aimDirection);
		if (attack.CanAttack(baseEntity))
		{
			StartAttacking(baseEntity);
		}
		else
		{
			StopAttacking();
		}
		return StateStatus.Running;
	}

	private static Vector3 GetAimDirection(Vector3 from, Vector3 target)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		return Vector3Ex.Direction2D(target, from);
	}

	private void StartAttacking(BaseEntity entity)
	{
		attack.StartAttacking(entity);
	}
}
