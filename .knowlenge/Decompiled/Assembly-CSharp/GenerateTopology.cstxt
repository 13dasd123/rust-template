using UnityEngine;

public class GenerateTopology : ProceduralComponent
{
	public override void Process(uint seed)
	{
		int res = TerrainMeta.TopologyMap.res;
		int[,] map = TerrainMeta.TopologyMap.dst;
		TerrainTopologyMap topomap = TerrainMeta.TopologyMap;
		TerrainBiomeMap biomemap = TerrainMeta.BiomeMap;
		TerrainHeightMap heightmap = TerrainMeta.HeightMap;
		float noiseX = SeedRandom.Range(ref seed, -1E+09f, 1E+09f);
		float noiseZ = SeedRandom.Range(ref seed, -1E+09f, 1E+09f);
		float lootAngle = TerrainMeta.LootAxisAngle;
		Parallel.For(0, res, delegate(int z)
		{
			for (int i = 0; i < res; i++)
			{
				float num = topomap.Coordinate(i);
				float num2 = topomap.Coordinate(z);
				float height = heightmap.GetHeight01(num, num2);
				float slope = heightmap.GetSlope(num, num2);
				Vector2 v2 = new Vector2(num * 2f - 1f, num2 * 2f - 1f);
				float num3 = (v2.Rotate(lootAngle).y + 1f) * 0.5f;
				int num4 = map[z, i];
				if (height < 0.475f)
				{
					num4 |= 0x10000;
					float num5 = num * 2f - 1f;
					float num6 = num2 * 2f - 1f;
					float a = (num5 * num5 + num6 * num6) * 0.75f;
					float b = Mathf.Max(Mathf.Abs(num5), Mathf.Abs(num6));
					float num7 = Mathf.Max(a, b);
					if (num7 > 0.8f)
					{
						num4 |= 0x40000;
					}
					if (num7 > 0.95f)
					{
						num4 |= 0x2000000;
					}
				}
				else if (height < 0.5f)
				{
					num4 |= 0x10000;
				}
				else if (height < 0.502f)
				{
					num4 |= 0x10;
				}
				else if (height < 0.6f)
				{
					switch (biomemap.GetBiomeMaxIndex(num, num2))
					{
					case 0:
					{
						float num10 = Noise.Ridge((float)i * 0.75f + noiseX, (float)z + noiseZ, 6, 0.006000000052154064);
						num4 |= ((!(num10 > 1.4f)) ? 1 : 32);
						break;
					}
					case 1:
					{
						float num9 = Noise.Ridge((float)i * 0.75f + noiseX, (float)z + noiseZ, 6, 0.003000000026077032);
						num4 |= ((!(num9 > 1.3f)) ? 1 : 32);
						break;
					}
					case 2:
					{
						float num11 = Noise.Ridge((float)i * 0.75f + noiseX, (float)z + noiseZ, 6, 0.003000000026077032);
						num4 |= ((!(num11 > 1.4f)) ? 1 : 32);
						break;
					}
					default:
					{
						float num8 = Noise.Ridge((float)i * 0.75f + noiseX, (float)z + noiseZ, 6, 0.006000000052154064);
						num4 |= ((!(num8 > 1.4f)) ? 1 : 32);
						break;
					}
					}
				}
				if (height >= 0.6f)
				{
					num4 |= 4;
				}
				else if (height >= 0.56f)
				{
					num4 |= 0x40000000;
				}
				num4 = ((num3 < 0.3f) ? (num4 | 0x4000000) : ((!(num3 < 0.6f)) ? (num4 | 0x10000000) : (num4 | 0x8000000)));
				if ((num4 & 0x30198) != 0)
				{
					if (slope > 35f)
					{
						num4 |= 2;
					}
				}
				else if (slope > 40f)
				{
					num4 |= 2;
				}
				map[z, i] = num4;
			}
		});
		ImageProcessing.FloodFill2D(0, 0, map, 65536, 128, (int v) => (v & -65537) | 0x80);
		ImageProcessing.FloodFill2D(res / 2, res / 2, map, 65589, 536870912, (int v) => v | 0x20000000);
		ImageProcessing.Dilate2D(map, 24, 2, delegate(int x, int y)
		{
			if ((map[x, y] & 0x21) != 0)
			{
				map[x, y] |= 8;
			}
		});
		ImageProcessing.Dilate2D(map, 41, 2, delegate(int x, int y)
		{
			if ((map[x, y] & 0x10) != 0)
			{
				map[x, y] |= 8;
			}
		});
		ImageProcessing.Dilate2D(map, 384, 4, delegate(int x, int y)
		{
			if ((map[x, y] & 0x10) != 0)
			{
				map[x, y] |= 256;
			}
		});
		ImageProcessing.Dilate2D(map, 272, 4, delegate(int x, int y)
		{
			if ((map[x, y] & 0x80) != 0)
			{
				map[x, y] |= 256;
			}
		});
		ImageProcessing.Dilate2D(map, 196608, 4, delegate(int x, int y)
		{
			if ((map[x, y] & 0x10) != 0)
			{
				map[x, y] |= 131072;
			}
		});
		ImageProcessing.Dilate2D(map, 131088, 4, delegate(int x, int y)
		{
			if ((map[x, y] & 0x10000) != 0)
			{
				map[x, y] |= 131072;
			}
		});
		ImageProcessing.Dilate2D(map, 96, 4, delegate(int x, int y)
		{
			if ((map[x, y] & 1) != 0)
			{
				map[x, y] |= 64;
			}
		});
		Parallel.For(0, res, delegate(int z)
		{
			for (int j = 0; j < res; j++)
			{
				float normX = topomap.Coordinate(j);
				float normZ = topomap.Coordinate(z);
				float height2 = heightmap.GetHeight01(normX, normZ);
				if (height2 > 0.495f && height2 < 0.5f)
				{
					int num12 = map[z, j];
					if ((num12 & 0x80) != 0)
					{
						num12 |= 0x100;
					}
					if ((num12 & 0x10000) != 0)
					{
						num12 |= 0x20000;
					}
					map[z, j] = num12;
				}
			}
		});
	}
}
