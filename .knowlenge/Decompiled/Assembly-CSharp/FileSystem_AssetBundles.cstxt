using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using ConVar;
using UnityEngine;

public class FileSystem_AssetBundles : IFileSystem
{
	public static bool isError;

	public static string loadingError = string.Empty;

	private AssetBundle rootBundle;

	private AssetBundleManifest manifest;

	private Dictionary<string, AssetBundle> bundles = new Dictionary<string, AssetBundle>(StringComparer.OrdinalIgnoreCase);

	private Dictionary<string, AssetBundle> files = new Dictionary<string, AssetBundle>(StringComparer.OrdinalIgnoreCase);

	private string assetPath;

	public FileSystem_AssetBundles(string assetRoot)
	{
		isError = false;
		assetPath = Path.GetDirectoryName(assetRoot) + Path.DirectorySeparatorChar;
		rootBundle = AssetBundle.LoadFromFile(assetRoot);
		if (rootBundle == null)
		{
			LoadError("Couldn't load root AssetBundle - " + assetRoot);
			return;
		}
		AssetBundleManifest[] array = rootBundle.LoadAllAssets<AssetBundleManifest>();
		if (array.Length != 1)
		{
			LoadError("Couldn't find AssetBundleManifest - " + array.Length);
			return;
		}
		manifest = array[0];
		string[] allAssetBundles = manifest.GetAllAssetBundles();
		foreach (string bundleName in allAssetBundles)
		{
			LoadBundle(bundleName);
			if (isError)
			{
				return;
			}
		}
		BuildFileIndex();
	}

	public void UnloadBundles()
	{
		manifest = null;
		foreach (KeyValuePair<string, AssetBundle> bundle in bundles)
		{
			bundle.Value.Unload(unloadAllLoadedObjects: false);
			UnityEngine.Object.DestroyImmediate(bundle.Value);
		}
		bundles.Clear();
		if ((bool)rootBundle)
		{
			rootBundle.Unload(unloadAllLoadedObjects: false);
			UnityEngine.Object.DestroyImmediate(rootBundle);
			rootBundle = null;
		}
	}

	private void LoadError(string err)
	{
		UnityEngine.Debug.LogError(err);
		loadingError = err;
		isError = true;
	}

	private void LoadBundle(string bundleName)
	{
		if (!bundles.ContainsKey(bundleName))
		{
			string text = assetPath + bundleName;
			AssetBundle assetBundle = AssetBundle.LoadFromFile(text);
			if (assetBundle == null)
			{
				LoadError("Couldn't load AssetBundle - " + text);
			}
			else
			{
				bundles.Add(bundleName, assetBundle);
			}
		}
	}

	private void BuildFileIndex()
	{
		files.Clear();
		foreach (KeyValuePair<string, AssetBundle> bundle in bundles)
		{
			if (!bundle.Key.StartsWith("content", StringComparison.InvariantCultureIgnoreCase))
			{
				string[] allAssetNames = bundle.Value.GetAllAssetNames();
				foreach (string key in allAssetNames)
				{
					files.Add(key, bundle.Value);
				}
			}
		}
	}

	public T[] LoadAll<T>(string folder, string search) where T : UnityEngine.Object
	{
		List<T> list = new List<T>();
		foreach (KeyValuePair<string, AssetBundle> item in files.Where((KeyValuePair<string, AssetBundle> x) => x.Key.StartsWith(folder, StringComparison.InvariantCultureIgnoreCase)))
		{
			if (string.IsNullOrEmpty(search) || StringEx.Contains(item.Key, search, CompareOptions.IgnoreCase))
			{
				Stopwatch stopwatch = Stopwatch.StartNew();
				T val = item.Value.LoadAsset<T>(item.Key);
				if (FileConVar.time)
				{
					File.AppendAllText("filesystem.csv", $"LoadAll,{item.Key},{stopwatch.Elapsed.TotalMilliseconds}\n");
				}
				if (!(val == null))
				{
					list.Add(val);
				}
			}
		}
		return list.ToArray();
	}

	public T Load<T>(string filePath, bool bComplain = true) where T : UnityEngine.Object
	{
		AssetBundle value = null;
		if (!files.TryGetValue(filePath, out value))
		{
			UnityEngine.Debug.LogWarning("[BUNDLE] Not found: " + filePath);
			return (T)null;
		}
		Stopwatch stopwatch = Stopwatch.StartNew();
		T val = value.LoadAsset<T>(filePath);
		if (FileConVar.time)
		{
			File.AppendAllText("filesystem.csv", $"Load,{filePath},{stopwatch.Elapsed.TotalMilliseconds}\n");
		}
		if (val == null && bComplain)
		{
			UnityEngine.Debug.LogWarning("[BUNDLE] Not found in bundle: " + filePath);
		}
		return val;
	}

	public AsyncOperation LoadAsync(string filePath)
	{
		AssetBundle value = null;
		if (!files.TryGetValue(filePath, out value))
		{
			UnityEngine.Debug.LogWarning("[BUNDLE] Not found: " + filePath);
			return null;
		}
		AssetBundleRequest assetBundleRequest = value.LoadAssetAsync<UnityEngine.Object>(filePath);
		if (assetBundleRequest == null)
		{
			UnityEngine.Debug.LogWarning("[BUNDLE] Not found in bundle: " + filePath);
		}
		return assetBundleRequest;
	}

	public string[] FindAll(string folder, string search)
	{
		List<string> list = new List<string>();
		foreach (KeyValuePair<string, AssetBundle> item in files.Where((KeyValuePair<string, AssetBundle> x) => x.Key.StartsWith(folder, StringComparison.InvariantCultureIgnoreCase)))
		{
			if (string.IsNullOrEmpty(search) || StringEx.Contains(item.Key, search, CompareOptions.IgnoreCase))
			{
				list.Add(item.Key);
			}
		}
		return list.ToArray();
	}
}
