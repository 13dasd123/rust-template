using System.Collections.Generic;
using Facepunch;
using ProtoBuf;

public class PlayerBlueprints : EntityComponent<BasePlayer>
{
	public SteamInventory steamInventory;

	internal void Reset()
	{
		PersistantPlayer playerInfo = SingletonComponent<ServerMgr>.Instance.persistance.GetPlayerInfo(base.baseEntity.userID);
		playerInfo.unlockedItems = Pool.Get<List<int>>();
		SingletonComponent<ServerMgr>.Instance.persistance.SetPlayerInfo(base.baseEntity.userID, playerInfo);
		base.baseEntity.SendNetworkUpdate();
	}

	public bool IsUnlocked(ItemDefinition itemDef)
	{
		PersistantPlayer playerInfo = SingletonComponent<ServerMgr>.Instance.persistance.GetPlayerInfo(base.baseEntity.userID);
		return playerInfo.unlockedItems.Contains(itemDef.itemid);
	}

	public void Unlock(ItemDefinition itemDef)
	{
		PersistantPlayer playerInfo = SingletonComponent<ServerMgr>.Instance.persistance.GetPlayerInfo(base.baseEntity.userID);
		if (!playerInfo.unlockedItems.Contains(itemDef.itemid))
		{
			playerInfo.unlockedItems.Add(itemDef.itemid);
			SingletonComponent<ServerMgr>.Instance.persistance.SetPlayerInfo(base.baseEntity.userID, playerInfo);
			base.baseEntity.SendNetworkUpdate();
			base.baseEntity.ClientRPCPlayer(null, base.baseEntity, "UnlockedBlueprint", itemDef.itemid);
			base.baseEntity.stats.Add("blueprint_studied", 1);
		}
	}

	public bool HasUnlocked(ItemDefinition targetItem)
	{
		return true;
	}

	public bool IsParentUnlocked(ItemDefinition targetItem)
	{
		return true;
	}

	public bool CanCraft(int itemid, int skinItemId)
	{
		ItemDefinition itemDefinition = ItemManager.FindItemDefinition(itemid);
		if (itemDefinition == null)
		{
			return false;
		}
		if (skinItemId != 0 && !steamInventory.HasItem(skinItemId))
		{
			return false;
		}
		if (!IsParentUnlocked(itemDefinition))
		{
			return false;
		}
		if (HasUnlocked(itemDefinition))
		{
			return true;
		}
		return false;
	}
}
