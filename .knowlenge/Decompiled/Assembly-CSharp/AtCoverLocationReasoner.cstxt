using Rust.Ai;
using Rust.Ai.HTN;
using Rust.Ai.HTN.Reasoning;
using Rust.Ai.HTN.Scientist;

public class AtCoverLocationReasoner : INpcReasoner
{
	public float TickFrequency { get; set; }

	public float LastTickTime { get; set; }

	public void Tick(IHTNAgent npc, float deltaTime, float time)
	{
		if (npc.AiDomain.NpcContext is ScientistContext scientistContext)
		{
			if (scientistContext.ReservedCoverPoint == null)
			{
				scientistContext.SetFact(Facts.AtLocationCover, value: false);
				scientistContext.SetFact(Facts.CoverState, CoverState.None);
			}
			else if ((scientistContext.ReservedCoverPoint.Position - scientistContext.Body.transform.position).sqrMagnitude < 1f)
			{
				scientistContext.SetFact(Facts.AtLocationCover, value: true);
				scientistContext.SetFact(Facts.CoverState, (scientistContext.ReservedCoverPoint.NormalCoverType == CoverPoint.CoverType.Partial) ? CoverState.Partial : CoverState.Full);
			}
			else
			{
				scientistContext.SetFact(Facts.AtLocationCover, value: false);
				scientistContext.SetFact(Facts.CoverState, CoverState.None);
			}
		}
	}
}
