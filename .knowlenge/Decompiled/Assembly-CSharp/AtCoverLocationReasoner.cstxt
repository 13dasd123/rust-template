using Rust.Ai;
using Rust.Ai.HTN;
using Rust.Ai.HTN.Reasoning;
using Rust.Ai.HTN.ScientistJunkpile;
using UnityEngine;

public class AtCoverLocationReasoner : INpcReasoner
{
	public float TickFrequency { get; set; }

	public float LastTickTime { get; set; }

	public void Tick(IHTNAgent npc, float deltaTime, float time)
	{
		if (!(npc.AiDomain.NpcContext is ScientistJunkpileContext scientistJunkpileContext))
		{
			return;
		}
		if (scientistJunkpileContext.ReservedCoverPoint == null)
		{
			scientistJunkpileContext.SetFact(Facts.AtLocationCover, value: false);
			scientistJunkpileContext.SetFact(Facts.CoverState, CoverState.None);
			return;
		}
		Vector3 position = scientistJunkpileContext.ReservedCoverPoint.Position;
		float sqrMagnitude = (position - scientistJunkpileContext.Body.transform.position).sqrMagnitude;
		if (sqrMagnitude < 1f)
		{
			scientistJunkpileContext.SetFact(Facts.AtLocationCover, value: true);
			scientistJunkpileContext.SetFact(Facts.CoverState, (scientistJunkpileContext.ReservedCoverPoint.NormalCoverType == CoverPoint.CoverType.Partial) ? CoverState.Partial : CoverState.Full);
		}
		else
		{
			scientistJunkpileContext.SetFact(Facts.AtLocationCover, value: false);
			scientistJunkpileContext.SetFact(Facts.CoverState, CoverState.None);
		}
	}
}
