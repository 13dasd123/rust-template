using UnityEngine;

[RequireComponent(typeof(Camera))]
[AddComponentMenu("Image Effects/Other/Supersampling")]
internal class Supersampling : MonoBehaviour
{
	public float Sampling = 1f;

	private Camera sceneCamera;

	private Camera screenCamera;

	private RenderTexture rt;

	public bool CheckEnabled()
	{
		return base.enabled = Sampling > 0f && Sampling != 1f;
	}

	protected void Awake()
	{
		if (Application.isPlaying)
		{
			CheckEnabled();
		}
	}

	protected void OnEnable()
	{
		if (Application.isPlaying)
		{
			if (!sceneCamera)
			{
				sceneCamera = GetComponent<Camera>();
			}
			if (!screenCamera)
			{
				GameObject gameObject = new GameObject("Supersampling Camera");
				screenCamera = gameObject.AddComponent<Camera>();
				global::SupersamplingCamera supersamplingCamera = gameObject.AddComponent<global::SupersamplingCamera>();
				supersamplingCamera.sceneCamera = sceneCamera;
			}
		}
	}

	protected void OnDisable()
	{
		if (Application.isPlaying)
		{
			if ((bool)sceneCamera)
			{
				sceneCamera.targetTexture = null;
			}
			if ((bool)rt)
			{
				RenderTexture.ReleaseTemporary(rt);
				rt = null;
			}
			if ((bool)screenCamera)
			{
				Object.Destroy(screenCamera.gameObject);
			}
		}
	}

	protected void OnPreCull()
	{
		if (!Application.isPlaying || !CheckEnabled())
		{
			return;
		}
		int num = (int)((float)Screen.width * Sampling);
		int num2 = (int)((float)Screen.height * Sampling);
		int num3 = 24;
		RenderTextureFormat renderTextureFormat = ((!sceneCamera.hdr) ? RenderTextureFormat.Default : RenderTextureFormat.DefaultHDR);
		if (!rt || rt.width != num || rt.height != num2 || rt.depth != num3 || rt.format != renderTextureFormat)
		{
			if ((bool)rt)
			{
				RenderTexture.ReleaseTemporary(rt);
			}
			rt = RenderTexture.GetTemporary(num, num2, num3, renderTextureFormat);
		}
		if ((bool)sceneCamera)
		{
			sceneCamera.targetTexture = rt;
		}
		if ((bool)screenCamera)
		{
			screenCamera.cullingMask = 0;
			screenCamera.depth = sceneCamera.depth + 1f;
		}
	}
}
