using ConVar;
using Facepunch;
using ProtoBuf;
using Rust;
using UnityEngine;

public class DecayEntity : BaseCombatEntity
{
	private float decayTimer;

	private Decay decay;

	private DecayPoint[] decayPoints;

	private float lastDecayTick;

	public override void ResetState()
	{
		base.ResetState();
		decayTimer = 0f;
	}

	public override void ServerInit()
	{
		base.ServerInit();
		decay = PrefabAttribute.server.Find<Decay>(prefabID);
		if (!(decay == null))
		{
			decayPoints = PrefabAttribute.server.FindAll<DecayPoint>(prefabID);
			BuildingManager.DecayEntities.Add(this);
			lastDecayTick = UnityEngine.Time.time;
		}
	}

	internal override void DoServerDestroy()
	{
		base.DoServerDestroy();
		BuildingManager.DecayEntities.Remove(this);
	}

	public void DecayTouch()
	{
		decayTimer = 0f;
	}

	public void DecayTick()
	{
		float num = UnityEngine.Time.time - lastDecayTick;
		if (num < ConVar.Decay.tick)
		{
			return;
		}
		lastDecayTick = UnityEngine.Time.time;
		if (!decay.ShouldDecay(this))
		{
			return;
		}
		float num2 = num * ConVar.Decay.scale;
		decayTimer += num2;
		if (decayTimer < decay.GetDecayDelay(this))
		{
			return;
		}
		using (TimeWarning.New("DecayTick"))
		{
			float num3 = 1f;
			for (int i = 0; i < decayPoints.Length; i++)
			{
				DecayPoint decayPoint = decayPoints[i];
				if (decayPoint.IsOccupied(this))
				{
					num3 -= decayPoint.protection;
				}
			}
			if (num3 > 0f)
			{
				float num4 = num2 / decay.GetDecayDuration(this);
				float num5 = num4 * MaxHealth();
				Hurt(num5 * num3, DamageType.Decay);
			}
		}
	}

	public override void OnRepairFinished()
	{
		base.OnRepairFinished();
		DecayTouch();
	}

	public override void Save(SaveInfo info)
	{
		base.Save(info);
		info.msg.decayEntity = Facepunch.Pool.Get<ProtoBuf.DecayEntity>();
		info.msg.decayEntity.decayTimer = decayTimer;
	}

	public override void Load(LoadInfo info)
	{
		base.Load(info);
		if (info.msg.decayEntity != null)
		{
			decayTimer = info.msg.decayEntity.decayTimer;
		}
	}
}
