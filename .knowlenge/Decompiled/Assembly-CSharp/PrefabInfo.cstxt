using ConVar;
using UnityEngine;

public class PrefabInfo : MonoBehaviour
{
	internal uint prefabID;

	internal Behaviour[] behaviours;

	internal Rigidbody[] rigidbodies;

	internal Collider[] colliders;

	internal LODGroup[] lodgroups;

	internal Renderer[] renderers;

	internal ParticleSystem[] particles;

	internal bool[] behaviourStates;

	internal bool[] rigidbodyStates;

	internal bool[] colliderStates;

	internal bool[] lodgroupStates;

	internal bool[] rendererStates;

	public void EnterPool()
	{
		if (base.transform.parent != null)
		{
			base.transform.SetParent(null, worldPositionStays: false);
		}
		if (Pool.mode <= 1)
		{
			if (base.gameObject.activeSelf)
			{
				base.gameObject.SetActive(value: false);
			}
			return;
		}
		SetBehaviourEnabled(state: false);
		SetComponentEnabled(state: false);
		if (!base.gameObject.activeSelf)
		{
			base.gameObject.SetActive(value: true);
		}
	}

	public void LeavePool()
	{
		if (Pool.mode > 1)
		{
			SetComponentEnabled(state: true);
		}
	}

	public void Initialize()
	{
		behaviourStates = new bool[behaviours.Length];
		rigidbodyStates = new bool[rigidbodies.Length];
		colliderStates = new bool[colliders.Length];
		lodgroupStates = new bool[lodgroups.Length];
		rendererStates = new bool[renderers.Length];
	}

	public void SetBehaviourEnabled(bool state)
	{
		if (!state)
		{
			for (int i = 0; i < behaviours.Length; i++)
			{
				Behaviour behaviour = behaviours[i];
				behaviourStates[i] = behaviour.enabled;
				behaviour.enabled = false;
			}
			for (int j = 0; j < particles.Length; j++)
			{
				ParticleSystem particleSystem = particles[j];
				particleSystem.Stop();
				particleSystem.Clear();
			}
			return;
		}
		for (int k = 0; k < particles.Length; k++)
		{
			ParticleSystem particleSystem2 = particles[k];
			if (particleSystem2.playOnAwake)
			{
				particleSystem2.Play();
			}
		}
		for (int l = 0; l < behaviours.Length; l++)
		{
			Behaviour behaviour2 = behaviours[l];
			behaviour2.enabled = behaviourStates[l];
		}
	}

	public void SetComponentEnabled(bool state)
	{
		if (!state)
		{
			for (int i = 0; i < renderers.Length; i++)
			{
				Renderer renderer = renderers[i];
				rendererStates[i] = renderer.enabled;
				renderer.enabled = false;
			}
			for (int j = 0; j < lodgroups.Length; j++)
			{
				LODGroup lODGroup = lodgroups[j];
				lodgroupStates[j] = lODGroup.enabled;
				lODGroup.enabled = false;
			}
			for (int k = 0; k < colliders.Length; k++)
			{
				Collider collider = colliders[k];
				colliderStates[k] = collider.enabled;
				collider.enabled = false;
			}
			for (int l = 0; l < rigidbodies.Length; l++)
			{
				Rigidbody rigidbody = rigidbodies[l];
				rigidbodyStates[l] = rigidbody.isKinematic;
				rigidbody.isKinematic = true;
				rigidbody.detectCollisions = false;
			}
		}
		else
		{
			for (int m = 0; m < renderers.Length; m++)
			{
				Renderer renderer2 = renderers[m];
				renderer2.enabled = rendererStates[m];
			}
			for (int n = 0; n < lodgroups.Length; n++)
			{
				LODGroup lODGroup2 = lodgroups[n];
				lODGroup2.enabled = lodgroupStates[n];
			}
			for (int num = 0; num < colliders.Length; num++)
			{
				Collider collider2 = colliders[num];
				collider2.enabled = colliderStates[num];
			}
			for (int num2 = 0; num2 < rigidbodies.Length; num2++)
			{
				Rigidbody rigidbody2 = rigidbodies[num2];
				rigidbody2.isKinematic = rigidbodyStates[num2];
				rigidbody2.detectCollisions = true;
			}
		}
	}
}
