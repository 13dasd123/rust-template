using System;
using System.Collections.Generic;
using Facepunch;
using Unity.Collections;
using Unity.Mathematics;
using UnityEngine;

public static class WaterLevel
{
	public struct WaterInfo
	{
		public bool isValid;

		public float currentDepth;

		public float overallDepth;

		public float surfaceLevel;

		public float terrainHeight;

		public bool artificalWater;

		public int topology;
	}

	public static float Factor(Vector3 start, Vector3 end, float radius, bool waves, bool volumes, BaseEntity forEntity = null)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		TimeWarning val = TimeWarning.New("WaterLevel.Factor", 0);
		try
		{
			return Factor(GetWaterInfo(start, end, radius, waves, volumes, forEntity), start, end, radius);
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public static float Factor(in WaterInfo info, Vector3 start, Vector3 end, float radius)
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		if (!info.isValid)
		{
			return 0f;
		}
		return Mathf.InverseLerp(Mathf.Min(start.y, end.y) - radius, Mathf.Max(start.y, end.y) + radius, info.surfaceLevel);
	}

	public static float Factor(Bounds bounds, bool waves, bool volumes, BaseEntity forEntity = null)
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		TimeWarning val = TimeWarning.New("WaterLevel.Factor", 0);
		try
		{
			if (((Bounds)(ref bounds)).size == Vector3.zero)
			{
				((Bounds)(ref bounds)).size = new Vector3(0.1f, 0.1f, 0.1f);
			}
			WaterInfo waterInfo = GetWaterInfo(bounds, waves, volumes, forEntity);
			return waterInfo.isValid ? Mathf.InverseLerp(((Bounds)(ref bounds)).min.y, ((Bounds)(ref bounds)).max.y, waterInfo.surfaceLevel) : 0f;
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public static float Factor(in WaterInfo info, Bounds bounds)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		if (((Bounds)(ref bounds)).size == Vector3.zero)
		{
			((Bounds)(ref bounds)).size = new Vector3(0.1f, 0.1f, 0.1f);
		}
		if (!info.isValid)
		{
			return 0f;
		}
		return Mathf.InverseLerp(((Bounds)(ref bounds)).min.y, ((Bounds)(ref bounds)).max.y, info.surfaceLevel);
	}

	public static bool Test(Vector3 pos, bool waves, bool volumes, BaseEntity forEntity = null)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		TimeWarning val = TimeWarning.New("WaterLevel.Test", 0);
		try
		{
			return GetWaterInfo(pos, waves, volumes, forEntity).isValid;
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public static bool Test(in WaterInfo info, bool volumes, Vector3 pos, BaseEntity forEntity = null)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		bool flag = pos.y >= info.terrainHeight - 1f && pos.y <= info.surfaceLevel;
		if (!flag && volumes)
		{
			flag = GetWaterInfoFromVolumes(pos, forEntity).isValid;
		}
		return flag;
	}

	public static (float, float) GetWaterAndTerrainSurface(Vector3 pos, bool waves, bool volumes, BaseEntity forEntity = null)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		TimeWarning val = TimeWarning.New("WaterLevel.GetWaterDepth", 0);
		try
		{
			WaterInfo waterInfo = GetWaterInfo(pos, waves, volumes, forEntity);
			return (waterInfo.surfaceLevel, waterInfo.terrainHeight);
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public static float GetWaterOrTerrainSurface(Vector3 pos, bool waves, bool volumes, BaseEntity forEntity = null)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		TimeWarning val = TimeWarning.New("WaterLevel.GetWaterDepth", 0);
		try
		{
			WaterInfo waterInfo = GetWaterInfo(pos, waves, volumes, forEntity);
			return Mathf.Max(waterInfo.surfaceLevel, waterInfo.terrainHeight);
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public static float GetWaterSurface(Vector3 pos, bool waves, bool volumes, BaseEntity forEntity = null)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		TimeWarning val = TimeWarning.New("WaterLevel.GetWaterDepth", 0);
		try
		{
			return GetWaterInfo(pos, waves, volumes, forEntity).surfaceLevel;
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public static float GetWaterDepth(Vector3 pos, bool waves, bool volumes, BaseEntity forEntity = null)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		TimeWarning val = TimeWarning.New("WaterLevel.GetWaterDepth", 0);
		try
		{
			return GetWaterInfo(pos, waves, volumes, forEntity).currentDepth;
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public static float GetOverallWaterDepth(Vector3 pos, bool waves, bool volumes, BaseEntity forEntity = null)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		TimeWarning val = TimeWarning.New("WaterLevel.GetOverallWaterDepth", 0);
		try
		{
			return GetWaterInfo(pos, waves, volumes, forEntity).overallDepth;
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public static Vector3 GetWaterFlowDirection(Vector3 worldPosition)
	{
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)TerrainMeta.WaterFlowMap == (Object)null)
		{
			return Vector3.zero;
		}
		return TerrainMeta.WaterFlowMap.GetFlowDirection(worldPosition);
	}

	public static Vector3 GetWaterNormal(Vector3 pos)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		return Vector3.up;
	}

	public static WaterInfo GetBuoyancyWaterInfo(Vector3 pos, Vector2 posUV, float terrainHeight, float waterHeight, bool doDeepwaterChecks, BaseEntity forEntity)
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		TimeWarning val = TimeWarning.New("WaterLevel.GetWaterInfo", 0);
		try
		{
			WaterInfo result = default(WaterInfo);
			if (pos.y > waterHeight)
			{
				return GetWaterInfoFromVolumes(pos, forEntity);
			}
			bool flag = pos.y < terrainHeight - 1f;
			if (flag)
			{
				return GetWaterInfoFromVolumes(pos, forEntity);
			}
			bool flag2 = doDeepwaterChecks && (pos.y < waterHeight - 10f || TerrainMeta.OutOfBounds(pos));
			int num = (Object.op_Implicit((Object)(object)TerrainMeta.TopologyMap) ? TerrainMeta.TopologyMap.GetTopologyFast(posUV) : 0);
			if ((flag || flag2 || (num & 0x3C180) == 0) && Object.op_Implicit((Object)(object)WaterSystem.Collision) && WaterSystem.Collision.GetIgnore(pos))
			{
				return result;
			}
			RaycastHit val2 = default(RaycastHit);
			if (flag2 && Physics.Raycast(pos, Vector3.up, ref val2, 5f, 16, (QueryTriggerInteraction)2))
			{
				float num2 = waterHeight;
				Bounds bounds = ((RaycastHit)(ref val2)).collider.bounds;
				waterHeight = Mathf.Min(num2, ((Bounds)(ref bounds)).max.y);
			}
			result.isValid = true;
			result.currentDepth = Mathf.Max(0f, waterHeight - pos.y);
			result.overallDepth = Mathf.Max(0f, waterHeight - terrainHeight);
			result.surfaceLevel = waterHeight;
			result.terrainHeight = terrainHeight;
			result.topology = num;
			return result;
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public static WaterInfo GetWaterInfo(Vector3 pos, bool waves, bool volumes, BaseEntity forEntity = null)
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_00df: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		TimeWarning val = TimeWarning.New("WaterLevel.GetWaterInfo", 0);
		try
		{
			WaterInfo result = default(WaterInfo);
			float num = GetWaterLevel(pos, waves);
			float num2 = ((Object.op_Implicit((Object)(object)TerrainMeta.HeightMap) && TerrainMeta.HeightMap.isInitialized) ? TerrainMeta.HeightMap.GetHeight(pos) : 0f);
			result.isValid = true;
			if (pos.y > num)
			{
				result.isValid = false;
			}
			else if (pos.y < num2 - 1f)
			{
				result.isValid = false;
			}
			bool flag = false;
			if (!result.isValid && volumes)
			{
				result = GetWaterInfoFromVolumes(pos, forEntity);
				if (result.isValid)
				{
					flag = true;
					num = result.surfaceLevel;
				}
			}
			if (result.isValid && Object.op_Implicit((Object)(object)WaterSystem.Collision) && WaterSystem.Collision.GetIgnore(pos))
			{
				result.isValid = false;
				num = -1000f;
			}
			result.currentDepth = Mathf.Max(0f, num - pos.y);
			if (!flag)
			{
				result.overallDepth = Mathf.Max(0f, num - num2);
			}
			result.surfaceLevel = num;
			result.terrainHeight = num2;
			return result;
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public static WaterInfo GetWaterInfo(Bounds bounds, bool waves, bool volumes, BaseEntity forEntity = null)
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		TimeWarning val = TimeWarning.New("WaterLevel.GetWaterInfo", 0);
		try
		{
			WaterInfo result = default(WaterInfo);
			float num = GetWaterLevel(((Bounds)(ref bounds)).center, waves);
			float num2 = (Object.op_Implicit((Object)(object)TerrainMeta.HeightMap) ? TerrainMeta.HeightMap.GetHeight(((Bounds)(ref bounds)).center) : 0f);
			result.isValid = true;
			if (((Bounds)(ref bounds)).min.y > num)
			{
				result.isValid = false;
			}
			else if (((Bounds)(ref bounds)).max.y < num2 - 1f)
			{
				result.isValid = false;
			}
			if (!result.isValid && volumes)
			{
				result = GetWaterInfoFromVolumes(bounds, forEntity);
				if (result.isValid)
				{
					num = result.surfaceLevel;
				}
			}
			if (result.isValid && Object.op_Implicit((Object)(object)WaterSystem.Collision) && WaterSystem.Collision.GetIgnore(bounds))
			{
				result.isValid = false;
				num = -1000f;
			}
			result.currentDepth = Mathf.Max(0f, num - ((Bounds)(ref bounds)).min.y);
			result.overallDepth = Mathf.Max(0f, num - num2);
			result.surfaceLevel = num;
			result.terrainHeight = num2;
			return result;
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public static void GetWaterInfos(ReadOnlySpan<Vector3> starts, ReadOnlySpan<Vector3> ends, ReadOnlySpan<float> radii, ReadOnlySpan<BaseEntity> entities, bool waves, bool volumes, Span<WaterInfo> results)
	{
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_013d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0152: Unknown result type (might be due to invalid IL or missing references)
		//IL_0160: Unknown result type (might be due to invalid IL or missing references)
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_0176: Unknown result type (might be due to invalid IL or missing references)
		//IL_017d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01de: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_057a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0588: Unknown result type (might be due to invalid IL or missing references)
		//IL_058d: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_034a: Unknown result type (might be due to invalid IL or missing references)
		//IL_035f: Unknown result type (might be due to invalid IL or missing references)
		//IL_040a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0418: Unknown result type (might be due to invalid IL or missing references)
		//IL_041d: Unknown result type (might be due to invalid IL or missing references)
		//IL_042b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0431: Unknown result type (might be due to invalid IL or missing references)
		//IL_0447: Unknown result type (might be due to invalid IL or missing references)
		//IL_045c: Unknown result type (might be due to invalid IL or missing references)
		//IL_046f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0474: Unknown result type (might be due to invalid IL or missing references)
		//IL_0481: Unknown result type (might be due to invalid IL or missing references)
		//IL_0510: Unknown result type (might be due to invalid IL or missing references)
		TimeWarning val = TimeWarning.New("WaterLevel.GetWaterInfos", 0);
		try
		{
			NativeArray<Vector3> val2 = new NativeArray<Vector3>(starts.Length, (Allocator)2, (NativeArrayOptions)0);
			for (int i = 0; i < starts.Length; i++)
			{
				Vector3 val3 = (starts[i] + ends[i]) * 0.5f;
				val2[i] = val3;
			}
			NativeArray<float> heights = new NativeArray<float>(starts.Length, (Allocator)2, (NativeArrayOptions)0);
			GetWaterLevels(NativeArray<Vector3>.op_Implicit(ref val2), waves, heights);
			NativeArray<float> val4 = new NativeArray<float>(starts.Length, (Allocator)2, (NativeArrayOptions)(!Object.op_Implicit((Object)(object)TerrainMeta.HeightMap)));
			if (Object.op_Implicit((Object)(object)TerrainMeta.HeightMap))
			{
				for (int j = 0; j < starts.Length; j++)
				{
					val4[j] = TerrainMeta.HeightMap.GetHeight(val2[j]);
				}
			}
			BufferList<int> val5 = null;
			BufferList<Vector3> val6 = null;
			BufferList<Vector3> val7 = null;
			BufferList<float> val8 = null;
			BufferList<BaseEntity> val9 = null;
			if (volumes)
			{
				val5 = Pool.Get<BufferList<int>>();
				val6 = Pool.Get<BufferList<Vector3>>();
				val7 = Pool.Get<BufferList<Vector3>>();
				val8 = Pool.Get<BufferList<float>>();
				val9 = Pool.Get<BufferList<BaseEntity>>();
			}
			for (int k = 0; k < starts.Length; k++)
			{
				ref WaterInfo reference = ref results[k];
				reference.isValid = true;
				Vector3 val10 = starts[k];
				Vector3 val11 = ends[k];
				float num = radii[k];
				float num2 = Mathf.Min(val10.y, val11.y) - num;
				float num3 = Mathf.Max(val10.y, val11.y) + num;
				float num4 = heights[k];
				float num5 = val4[k];
				if (num2 > num4)
				{
					reference.isValid = false;
				}
				else if (num3 < num5 - 1f)
				{
					reference.isValid = false;
				}
				if (volumes && !reference.isValid)
				{
					val5.Add(k);
					val6.Add(val10);
					val7.Add(val11);
					val8.Add(num);
					val9.Add(entities[k]);
				}
			}
			if (volumes && val9 != null && val9.Count > 0)
			{
				BufferList<WaterInfo> val12 = new BufferList<WaterInfo>();
				val12.Resize(val9.Count);
				BaseEntity.WaterTestFromVolumes(val9.ContentReadOnlySpan(), val6.ContentReadOnlySpan(), val7.ContentReadOnlySpan(), val8.ContentReadOnlySpan(), val12.Buffer);
				for (int l = 0; l < val5.Count; l++)
				{
					int num6 = val5[l];
					WaterInfo waterInfo = val12[l];
					results[num6] = waterInfo;
					if (waterInfo.isValid)
					{
						heights[num6] = waterInfo.surfaceLevel;
					}
				}
				Pool.FreeUnmanaged<int>(ref val5);
				Pool.FreeUnmanaged<Vector3>(ref val6);
				Pool.FreeUnmanaged<Vector3>(ref val7);
				Pool.FreeUnmanaged<float>(ref val8);
				Pool.FreeUnmanaged<BaseEntity>(ref val9);
			}
			if (Object.op_Implicit((Object)(object)WaterSystem.Collision))
			{
				val5 = Pool.Get<BufferList<int>>();
				val6 = Pool.Get<BufferList<Vector3>>();
				val7 = Pool.Get<BufferList<Vector3>>();
				val8 = Pool.Get<BufferList<float>>();
				for (int m = 0; m < starts.Length; m++)
				{
					if (results[m].isValid)
					{
						val5.Add(m);
						val6.Add(starts[m]);
						val7.Add(ends[m]);
						val8.Add(radii[m]);
					}
				}
				BufferList<bool> val13 = Pool.Get<BufferList<bool>>();
				val13.Resize(val5.Count);
				WaterSystem.Collision.GetIgnore(val13.Buffer, val6.ContentReadOnlySpan(), val7.ContentReadOnlySpan(), val8.ContentReadOnlySpan());
				BufferList<int> val14 = Pool.Get<BufferList<int>>();
				val6.Clear();
				val8.Clear();
				for (int n = 0; n < val5.Count; n++)
				{
					if (val13[n])
					{
						int num7 = val5[n];
						Vector3 val15 = starts[num7];
						Vector3 val16 = ends[num7];
						float num8 = radii[num7];
						float num9 = Mathf.Min(val15.y, val16.y) - num8;
						float num10 = Mathf.Max(val15.y, val16.y) + num8;
						Vector3 val17 = Vector3Ex.WithY(val2[num7], Mathf.Lerp(num9, num10, 0.75f));
						val14.Add(num7);
						val6.Add(val17);
						val8.Add(0.01f);
					}
				}
				WaterSystem.Collision.GetIgnore(val13.Buffer, val6.ContentReadOnlySpan(), val8.ContentReadOnlySpan());
				for (int num11 = 0; num11 < val14.Count; num11++)
				{
					int num12 = val14[num11];
					float num13 = heights[num12];
					if (val13[num11])
					{
						results[num12].isValid = false;
						num13 = -1000f;
					}
					else
					{
						num13 = Mathf.Min(num13, val6[num11].y);
					}
					heights[num12] = num13;
				}
				Pool.FreeUnmanaged<int>(ref val14);
				Pool.FreeUnmanaged<int>(ref val5);
				Pool.FreeUnmanaged<Vector3>(ref val6);
				Pool.FreeUnmanaged<Vector3>(ref val7);
				Pool.FreeUnmanaged<float>(ref val8);
			}
			for (int num14 = 0; num14 < starts.Length; num14++)
			{
				ref WaterInfo reference2 = ref results[num14];
				Vector3 val18 = starts[num14];
				Vector3 val19 = ends[num14];
				float num15 = radii[num14];
				float num16 = Mathf.Min(val18.y, val19.y) - num15;
				float num17 = heights[num14];
				float num18 = val4[num14];
				reference2.currentDepth = Mathf.Max(0f, num17 - num16);
				reference2.overallDepth = Mathf.Max(0f, num17 - num18);
				reference2.surfaceLevel = num17;
				reference2.terrainHeight = num18;
			}
			val4.Dispose();
			heights.Dispose();
			val2.Dispose();
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public static WaterInfo GetWaterInfo(Vector3 start, Vector3 end, float radius, bool waves, bool volumes, BaseEntity forEntity = null)
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0102: Unknown result type (might be due to invalid IL or missing references)
		//IL_0109: Unknown result type (might be due to invalid IL or missing references)
		//IL_0119: Unknown result type (might be due to invalid IL or missing references)
		TimeWarning val = TimeWarning.New("WaterLevel.GetWaterInfo", 0);
		try
		{
			WaterInfo result = default(WaterInfo);
			Vector3 val2 = (start + end) * 0.5f;
			float num = Mathf.Min(start.y, end.y) - radius;
			float num2 = Mathf.Max(start.y, end.y) + radius;
			float num3 = GetWaterLevel(val2, waves);
			float num4 = (Object.op_Implicit((Object)(object)TerrainMeta.HeightMap) ? TerrainMeta.HeightMap.GetHeight(val2) : 0f);
			result.isValid = true;
			if (num > num3)
			{
				result.isValid = false;
			}
			else if (num2 < num4 - 1f)
			{
				result.isValid = false;
			}
			if (!result.isValid && volumes)
			{
				result = GetWaterInfoFromVolumes(start, end, radius, forEntity);
				if (result.isValid)
				{
					num3 = result.surfaceLevel;
				}
			}
			if (result.isValid && Object.op_Implicit((Object)(object)WaterSystem.Collision) && WaterSystem.Collision.GetIgnore(start, end, radius))
			{
				Vector3 val3 = Vector3Ex.WithY(val2, Mathf.Lerp(num, num2, 0.75f));
				if (!WaterSystem.Collision.GetIgnore(val3))
				{
					num3 = Mathf.Min(num3, val3.y);
				}
				else
				{
					result.isValid = false;
					num3 = -1000f;
				}
			}
			result.currentDepth = Mathf.Max(0f, num3 - num);
			result.overallDepth = Mathf.Max(0f, num3 - num4);
			result.surfaceLevel = num3;
			result.terrainHeight = num4;
			return result;
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public static WaterInfo GetWaterInfo(Camera cam, bool waves, bool volumes, BaseEntity forEntity = null)
	{
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		TimeWarning val = TimeWarning.New("WaterLevel.GetWaterInfo", 0);
		try
		{
			waves = waves && (Object)(object)WaterSystem.Instance != (Object)null;
			float num = WaterSystem.OceanLevel;
			if (waves)
			{
				num += WaterSystem.Instance.oceanSimulation.MinLevel();
			}
			if (((Component)cam).transform.position.y < num - 1f)
			{
				return GetWaterInfo(((Component)cam).transform.position, waves, volumes, forEntity);
			}
			return GetWaterInfo(((Component)cam).transform.position - Vector3.up, waves, volumes, forEntity);
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public static float GetWaterLevel(Vector3 pos, bool waves)
	{
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		waves = waves && (Object)(object)WaterSystem.Instance != (Object)null;
		float normX = TerrainMeta.NormalizeX(pos.x);
		float normZ = TerrainMeta.NormalizeZ(pos.z);
		float num = (Object.op_Implicit((Object)(object)TerrainMeta.WaterMap) ? TerrainMeta.WaterMap.GetHeight(normX, normZ) : TerrainMeta.Position.y);
		float num2 = WaterSystem.OceanLevel;
		if (waves)
		{
			num2 += WaterSystem.Instance.oceanSimulation.MaxLevel();
		}
		if (num < num2 && (!Object.op_Implicit((Object)(object)TerrainMeta.TopologyMap) || TerrainMeta.TopologyMap.GetTopology(normX, normZ, 384)))
		{
			float num3 = WaterSystem.OceanLevel;
			if (waves)
			{
				num3 += WaterSystem.Instance.oceanSimulation.GetHeight(pos);
			}
			return Mathf.Max(num, num3);
		}
		return num;
	}

	public static void GetWaterLevels(ReadOnlySpan<Vector3> positions, bool waves, NativeArray<float> heights)
	{
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_019c: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0215: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f1: Unknown result type (might be due to invalid IL or missing references)
		waves = waves && (Object)(object)WaterSystem.Instance != (Object)null;
		float num = WaterSystem.OceanLevel;
		if (waves)
		{
			num += WaterSystem.Instance.oceanSimulation.MaxLevel();
		}
		int num2 = 0;
		NativeArray<int> val = default(NativeArray<int>);
		val..ctor(positions.Length, (Allocator)2, (NativeArrayOptions)0);
		for (int i = 0; i < positions.Length; i++)
		{
			float normX = TerrainMeta.NormalizeX(positions[i].x);
			float normZ = TerrainMeta.NormalizeZ(positions[i].z);
			heights[i] = (Object.op_Implicit((Object)(object)TerrainMeta.WaterMap) ? TerrainMeta.WaterMap.GetHeight(normX, normZ) : TerrainMeta.Position.y);
			if (heights[i] < num && (!Object.op_Implicit((Object)(object)TerrainMeta.TopologyMap) || TerrainMeta.TopologyMap.GetTopology(normX, normZ, 384)))
			{
				if (waves)
				{
					val[num2++] = i;
				}
				else
				{
					heights[i] = Mathf.Max(heights[i], WaterSystem.OceanLevel);
				}
			}
		}
		if (num2 == 0)
		{
			val.Dispose();
			return;
		}
		NativeArray<float> val2 = default(NativeArray<float>);
		val2..ctor(num2, (Allocator)2, (NativeArrayOptions)0);
		NativeArray<float3> positions2 = default(NativeArray<float3>);
		positions2..ctor(num2, (Allocator)3, (NativeArrayOptions)0);
		NativeArray<float> val3 = default(NativeArray<float>);
		val3..ctor(num2, (Allocator)2, (NativeArrayOptions)0);
		NativeArray<float> val4 = default(NativeArray<float>);
		val4..ctor(num2, (Allocator)2, (NativeArrayOptions)0);
		Vector2 uv = default(Vector2);
		for (int j = 0; j < num2; j++)
		{
			int index = val[j];
			float num3 = TerrainMeta.NormalizeX(positions[index].x);
			float num4 = TerrainMeta.NormalizeZ(positions[index].z);
			((Vector2)(ref uv))..ctor(num3, num4);
			positions2[j] = float3.op_Implicit(positions[index]);
			val3[j] = (((Object)(object)TerrainMeta.HeightMap != (Object)null) ? TerrainMeta.HeightMap.GetHeightFast(uv) : 0f);
			val4[j] = (((Object)(object)TerrainTexturing.Instance != (Object)null) ? TerrainTexturing.Instance.GetCoarseDistanceToShore(uv) : 0f);
		}
		WaterSystem.Instance.oceanSimulation.GetHeightBatch(positions2, val2.AsSpan(), val4.AsReadOnlySpan(), val3.AsReadOnlySpan());
		for (int k = 0; k < num2; k++)
		{
			int num5 = val[k];
			float num6 = WaterSystem.OceanLevel + val2[k];
			heights[num5] = Mathf.Max(heights[num5], num6);
		}
		val.Dispose();
		val4.Dispose();
		val3.Dispose();
		positions2.Dispose();
		val2.Dispose();
	}

	private static WaterInfo GetWaterInfoFromVolumes(Bounds bounds, BaseEntity forEntity)
	{
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		WaterInfo info = default(WaterInfo);
		if ((Object)(object)forEntity == (Object)null)
		{
			List<WaterVolume> list = Pool.Get<List<WaterVolume>>();
			Vis.Components<WaterVolume>(new OBB(bounds), list, 262144, (QueryTriggerInteraction)2);
			using (List<WaterVolume>.Enumerator enumerator = list.GetEnumerator())
			{
				while (enumerator.MoveNext() && !enumerator.Current.Test(bounds, out info))
				{
				}
			}
			Pool.FreeUnmanaged<WaterVolume>(ref list);
			return info;
		}
		forEntity.WaterTestFromVolumes(bounds, out info);
		return info;
	}

	private static WaterInfo GetWaterInfoFromVolumes(Vector3 pos, BaseEntity forEntity)
	{
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		WaterInfo info = default(WaterInfo);
		if ((Object)(object)forEntity == (Object)null)
		{
			List<WaterVolume> list = Pool.Get<List<WaterVolume>>();
			Vis.Components<WaterVolume>(pos, 0.1f, list, 262144, (QueryTriggerInteraction)2);
			foreach (WaterVolume item in list)
			{
				if (item.Test(pos, out info))
				{
					info.artificalWater = !item.naturalSource;
					break;
				}
			}
			Pool.FreeUnmanaged<WaterVolume>(ref list);
			return info;
		}
		forEntity.WaterTestFromVolumes(pos, out info);
		return info;
	}

	private static WaterInfo GetWaterInfoFromVolumes(Vector3 start, Vector3 end, float radius, BaseEntity forEntity)
	{
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		WaterInfo info = default(WaterInfo);
		if ((Object)(object)forEntity == (Object)null)
		{
			List<WaterVolume> list = Pool.Get<List<WaterVolume>>();
			Vis.Components<WaterVolume>(start, end, radius, list, 262144, (QueryTriggerInteraction)2);
			using (List<WaterVolume>.Enumerator enumerator = list.GetEnumerator())
			{
				while (enumerator.MoveNext() && !enumerator.Current.Test(start, end, radius, out info))
				{
				}
			}
			Pool.FreeUnmanaged<WaterVolume>(ref list);
			return info;
		}
		forEntity.WaterTestFromVolumes(start, end, radius, out info);
		return info;
	}

	private static void GetWaterInfoFromVolumes(ReadOnlySpan<Vector3> starts, ReadOnlySpan<Vector3> ends, ReadOnlySpan<float> radii, ReadOnlySpan<BaseEntity> entities, Span<WaterInfo> results)
	{
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0220: Unknown result type (might be due to invalid IL or missing references)
		//IL_0225: Unknown result type (might be due to invalid IL or missing references)
		//IL_0230: Unknown result type (might be due to invalid IL or missing references)
		//IL_0235: Unknown result type (might be due to invalid IL or missing references)
		//IL_0277: Unknown result type (might be due to invalid IL or missing references)
		//IL_0279: Unknown result type (might be due to invalid IL or missing references)
		BufferList<int> val = Pool.Get<BufferList<int>>();
		BufferList<int> val2 = Pool.Get<BufferList<int>>();
		BufferList<Vector3> val3 = Pool.Get<BufferList<Vector3>>();
		BufferList<Vector3> val4 = Pool.Get<BufferList<Vector3>>();
		BufferList<float> val5 = Pool.Get<BufferList<float>>();
		BufferList<BaseEntity> val6 = Pool.Get<BufferList<BaseEntity>>();
		for (int i = 0; i < entities.Length; i++)
		{
			BaseEntity baseEntity = entities[i];
			if ((Object)(object)baseEntity != (Object)null)
			{
				val3.Add(starts[i]);
				val4.Add(ends[i]);
				val5.Add(radii[i]);
				val6.Add(baseEntity);
				val.Add(i);
			}
			else
			{
				val2.Add(i);
			}
		}
		for (int j = 0; j < val2.Count; j++)
		{
			int num = val2[j];
			val3.Add(starts[num]);
			val4.Add(ends[num]);
			val5.Add(radii[num]);
			val.Add(num);
		}
		int num2 = entities.Length - val2.Count;
		int count = val2.Count;
		if (num2 > 0)
		{
			BaseEntity.WaterTestFromVolumes(starts: new ReadOnlySpan<Vector3>(val3.Buffer, 0, num2), ends: new ReadOnlySpan<Vector3>(val4.Buffer, 0, num2), radii: new ReadOnlySpan<float>(val5.Buffer, 0, num2), entities: val6.ContentReadOnlySpan(), results: results);
		}
		if (count > 0)
		{
			ReadOnlySpan<Vector3> starts3 = new ReadOnlySpan<Vector3>(val3.Buffer, num2, count);
			ReadOnlySpan<Vector3> ends3 = new ReadOnlySpan<Vector3>(val4.Buffer, num2, count);
			ReadOnlySpan<float> radii3 = new ReadOnlySpan<float>(val5.Buffer, num2, count);
			NativeArray<int> val7 = default(NativeArray<int>);
			val7..ctor(starts3.Length, (Allocator)2, (NativeArrayOptions)0);
			for (int k = 0; k < starts3.Length; k++)
			{
				val7[k] = 262144;
			}
			BufferList<WaterVolume> val8 = Pool.Get<BufferList<WaterVolume>>();
			val8.Resize(starts3.Length * 32);
			Vis.Components<WaterVolume>(starts3, ends3, radii3, NativeArray<int>.op_Implicit(ref val7), (Span<WaterVolume>)val8.Buffer, (QueryTriggerInteraction)2);
			for (int l = 0; l < starts3.Length; l++)
			{
				Vector3 start = starts3[l];
				Vector3 end = ends3[l];
				float radius = radii3[l];
				ref WaterInfo reference = ref results[num2 + l];
				for (int m = 0; m < 32; m++)
				{
					int num3 = l * 32 + m;
					WaterVolume waterVolume = val8[num3];
					if ((Object)(object)waterVolume != (Object)null)
					{
						if (waterVolume.Test(start, end, radius, out reference))
						{
							break;
						}
						continue;
					}
					reference.isValid = false;
					break;
				}
			}
			Pool.FreeUnmanaged<WaterVolume>(ref val8);
		}
		if (num2 > 0 && count > 0)
		{
			CollectionUtil.SortInplace(results, val.ContentSpan());
		}
		Pool.FreeUnmanaged<int>(ref val);
		Pool.FreeUnmanaged<int>(ref val2);
		Pool.FreeUnmanaged<Vector3>(ref val3);
		Pool.FreeUnmanaged<Vector3>(ref val4);
		Pool.FreeUnmanaged<float>(ref val5);
		Pool.FreeUnmanaged<BaseEntity>(ref val6);
	}
}
