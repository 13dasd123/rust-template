using UnityEngine;

public static class WaterLevel
{
	public struct WaterInfo
	{
		public bool isValid;

		public float currentDepth;

		public float overallDepth;

		public float surfaceLevel;
	}

	public static float Factor(Bounds bounds)
	{
		using (TimeWarning.New("WaterLevel.Factor"))
		{
			if (bounds.size == Vector3.zero)
			{
				bounds.size = new Vector3(0.1f, 0.1f, 0.1f);
			}
			WaterInfo waterInfo = GetWaterInfo(bounds);
			return (!waterInfo.isValid) ? 0f : Mathf.InverseLerp(bounds.min.y, bounds.max.y, waterInfo.surfaceLevel);
		}
	}

	public static bool Test(Vector3 pos)
	{
		using (TimeWarning.New("WaterLevel.Test"))
		{
			return GetWaterInfo(pos).isValid;
		}
	}

	public static float GetWaterDepth(Vector3 pos)
	{
		using (TimeWarning.New("WaterLevel.GetWaterDepth"))
		{
			return GetWaterInfo(pos).currentDepth;
		}
	}

	public static float GetOverallWaterDepth(Vector3 pos)
	{
		using (TimeWarning.New("WaterLevel.GetOverallWaterDepth"))
		{
			return GetWaterInfo(pos).overallDepth;
		}
	}

	public static WaterInfo GetWaterInfo(Vector3 pos)
	{
		using (TimeWarning.New("WaterLevel.GetWaterInfo"))
		{
			WaterInfo result = default(WaterInfo);
			float num = ((!TerrainMeta.WaterMap) ? 0f : TerrainMeta.WaterMap.GetHeight(pos));
			if (pos.y > num)
			{
				return result;
			}
			float num2 = ((!TerrainMeta.HeightMap) ? 0f : TerrainMeta.HeightMap.GetHeight(pos));
			if (pos.y < num2 - 1f)
			{
				num = 0f;
				if (pos.y > num)
				{
					return result;
				}
			}
			if ((bool)WaterSystem.Collision && WaterSystem.Collision.GetIgnore(pos))
			{
				return result;
			}
			result.isValid = true;
			result.currentDepth = Mathf.Max(0f, num - pos.y);
			result.overallDepth = Mathf.Max(0f, num - num2);
			result.surfaceLevel = num;
			return result;
		}
	}

	public static WaterInfo GetWaterInfo(Bounds bounds)
	{
		using (TimeWarning.New("WaterLevel.GetWaterInfo"))
		{
			WaterInfo result = default(WaterInfo);
			float num = ((!TerrainMeta.WaterMap) ? 0f : TerrainMeta.WaterMap.GetHeight(bounds.center));
			if (bounds.min.y > num)
			{
				return result;
			}
			float num2 = ((!TerrainMeta.HeightMap) ? 0f : TerrainMeta.HeightMap.GetHeight(bounds.center));
			if (bounds.max.y < num2 - 1f)
			{
				num = 0f;
				if (bounds.min.y > num)
				{
					return result;
				}
			}
			if ((bool)WaterSystem.Collision && WaterSystem.Collision.GetIgnore(bounds))
			{
				return result;
			}
			result.isValid = true;
			result.currentDepth = Mathf.Max(0f, num - bounds.min.y);
			result.overallDepth = Mathf.Max(0f, num - num2);
			result.surfaceLevel = num;
			return result;
		}
	}
}
