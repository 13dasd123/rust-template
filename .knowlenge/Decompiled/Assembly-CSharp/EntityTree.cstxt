using System;
using System.Collections.Generic;
using Spatial;
using UnityEngine;

public class EntityTree
{
	public Grid<BaseEntity> Grid;

	public Grid<BasePlayer> PlayerGrid;

	public Grid<BaseEntity> BrainGrid;

	public EntityTree(float worldSize)
	{
		Grid = new Grid<BaseEntity>(32, worldSize);
		PlayerGrid = new Grid<BasePlayer>(32, worldSize);
		BrainGrid = new Grid<BaseEntity>(32, worldSize);
	}

	public void Add(BaseEntity ent)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		Vector3 position = ((Component)ent).transform.position;
		Grid.Add(ent, position.x, position.z);
	}

	public void AddPlayer(BasePlayer player)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		Vector3 position = ((Component)player).transform.position;
		PlayerGrid.Add(player, position.x, position.z);
	}

	public void AddBrain(BaseEntity entity)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		Vector3 position = ((Component)entity).transform.position;
		BrainGrid.Add(entity, position.x, position.z);
	}

	public void Remove(BaseEntity ent, bool isPlayer = false)
	{
		Grid.Remove(ent);
		if (isPlayer)
		{
			BasePlayer basePlayer = ent as BasePlayer;
			if ((Object)(object)basePlayer != (Object)null)
			{
				PlayerGrid.Remove(basePlayer);
			}
		}
	}

	public void RemovePlayer(BasePlayer player)
	{
		PlayerGrid.Remove(player);
	}

	public void RemoveBrain(BaseEntity entity)
	{
		if (!((Object)(object)entity == (Object)null))
		{
			BrainGrid.Remove(entity);
		}
	}

	public void Move(BaseEntity ent)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		Vector3 position = ((Component)ent).transform.position;
		Grid.Move(ent, position.x, position.z);
		BasePlayer basePlayer = ent as BasePlayer;
		if ((Object)(object)basePlayer != (Object)null)
		{
			MovePlayer(basePlayer);
		}
		if (ent.HasBrain)
		{
			MoveBrain(ent);
		}
	}

	public void MovePlayer(BasePlayer player)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		Vector3 position = ((Component)player).transform.position;
		PlayerGrid.Move(player, position.x, position.z);
	}

	public void MoveBrain(BaseEntity entity)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		Vector3 position = ((Component)entity).transform.position;
		BrainGrid.Move(entity, position.x, position.z);
	}

	public void GetInSphere<T>(Vector3 position, float distance, List<T> results, DistanceCheckType distanceCheckType = DistanceCheckType.OnlyCenter) where T : BaseEntity
	{
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		TimeWarning val = TimeWarning.New("GetInSphereList", 0);
		try
		{
			Grid.Query<T>(position.x, position.z, distance, results);
			if (distanceCheckType != 0)
			{
				NarrowPhaseReduce(position, distance, results, distanceCheckType == DistanceCheckType.OnlyCenter);
			}
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public int GetInSphere(Vector3 position, float distance, BaseEntity[] results, Func<BaseEntity, bool> filter = null)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		int broadCount = Grid.Query(position.x, position.z, distance, results, filter);
		return NarrowPhaseReduce(position, distance, results, broadCount);
	}

	public int GetInSphereFast(Vector3 position, float distance, BaseEntity[] results, Func<BaseEntity, bool> filter = null)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		return Grid.Query(position.x, position.z, distance, results, filter);
	}

	public void GetPlayersInSphere(Vector3 position, float distance, List<BasePlayer> results, DistanceCheckType distanceCheckType = DistanceCheckType.OnlyCenter, bool includeHumanoidNpcs = false)
	{
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		TimeWarning val = TimeWarning.New("GetPlayersInSphereList", 0);
		try
		{
			PlayerGrid.Query<BasePlayer>(position.x, position.z, distance, results);
			if (!includeHumanoidNpcs)
			{
				for (int num = results.Count - 1; num >= 0; num--)
				{
					if (results[num].IsNpc)
					{
						results.RemoveAt(num);
					}
				}
			}
			if (distanceCheckType != 0)
			{
				NarrowPhaseReduce(position, distance, results, distanceCheckType == DistanceCheckType.OnlyCenter);
			}
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public int GetPlayersInSphere(Vector3 position, float distance, BasePlayer[] results, Func<BasePlayer, bool> filter = null)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		int broadCount = PlayerGrid.Query(position.x, position.z, distance, results, filter);
		return NarrowPhaseReduce(position, distance, results, broadCount);
	}

	public int GetPlayersInSphereFast(Vector3 position, float distance, BasePlayer[] results, Func<BasePlayer, bool> filter = null)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		return PlayerGrid.Query(position.x, position.z, distance, results, filter);
	}

	public void GetBrainsInSphere<T>(Vector3 position, float distance, List<T> results, bool filterPastDistance = true) where T : BaseEntity
	{
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		TimeWarning val = TimeWarning.New("GetBrainsInSphereList", 0);
		try
		{
			BrainGrid.Query<T>(position.x, position.z, distance, results);
			if (filterPastDistance)
			{
				NarrowPhaseReduce(position, distance, results);
			}
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public int GetBrainsInSphere(Vector3 position, float distance, BaseEntity[] results, Func<BaseEntity, bool> filter = null)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		int broadCount = BrainGrid.Query(position.x, position.z, distance, results, filter);
		return NarrowPhaseReduce(position, distance, results, broadCount);
	}

	public int GetBrainsInSphereFast(Vector3 position, float distance, BaseEntity[] results, Func<BaseEntity, bool> filter = null)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		return BrainGrid.Query(position.x, position.z, distance, results, filter);
	}

	public void GetPlayersAndBrainsInSphere(Vector3 position, float distance, List<BaseEntity> results, DistanceCheckType distanceCheckType = DistanceCheckType.OnlyCenter)
	{
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		TimeWarning val = TimeWarning.New("GetPlayersAndBrainsInSphereList", 0);
		try
		{
			PlayerGrid.Query<BaseEntity>(position.x, position.z, distance, results);
			BrainGrid.Query<BaseEntity>(position.x, position.z, distance, results);
			if (distanceCheckType != 0)
			{
				NarrowPhaseReduce(position, distance, results, distanceCheckType == DistanceCheckType.OnlyCenter);
			}
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	private int NarrowPhaseReduce<T>(Vector3 position, float radius, T[] results, int broadCount) where T : BaseEntity
	{
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		TimeWarning val = TimeWarning.New("NarrowPhaseReduce", 0);
		try
		{
			int num = broadCount;
			float num2 = radius * radius;
			for (int i = 0; i < num; i++)
			{
				OBB val2 = results[i].WorldSpaceBounds();
				Vector3 val3 = ((OBB)(ref val2)).ClosestPoint(position) - position;
				if (((Vector3)(ref val3)).sqrMagnitude > num2)
				{
					results[i] = results[num - 1];
					num--;
					i--;
				}
			}
			return num;
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	private static void NarrowPhaseReduce<T>(Vector3 position, float radius, List<T> results, bool onlyConsiderCenter = true) where T : BaseEntity
	{
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		TimeWarning val = TimeWarning.New("NarrowPhaseReduceList", 0);
		try
		{
			float num = radius * radius;
			for (int num2 = results.Count - 1; num2 >= 0; num2--)
			{
				T val2 = results[num2];
				Vector3 val4;
				if (!onlyConsiderCenter)
				{
					OBB val3 = val2.WorldSpaceBounds();
					val4 = ((OBB)(ref val3)).ClosestPoint(position);
				}
				else
				{
					val4 = ((Component)val2).transform.position;
				}
				Vector3 val5 = val4 - position;
				if (((Vector3)(ref val5)).sqrMagnitude > num)
				{
					results.RemoveAt(num2);
				}
			}
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	private static bool IsEntityInRadius<T>(Vector3 position, float radiusSq, T entity) where T : BaseEntity
	{
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		TimeWarning val = TimeWarning.New("IsEntityInRadius", 0);
		try
		{
			OBB val2 = entity.WorldSpaceBounds();
			Vector3 val3 = ((OBB)(ref val2)).ClosestPoint(position) - position;
			return ((Vector3)(ref val3)).sqrMagnitude < radiusSq;
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}
}
