using System;
using Spatial;
using UnityEngine;

public class EntityTree
{
	private Grid<BaseEntity> Grid;

	private Grid<BasePlayer> PlayerGrid;

	public EntityTree(float worldSize)
	{
		Grid = new Grid<BaseEntity>(32, worldSize);
		PlayerGrid = new Grid<BasePlayer>(32, worldSize);
	}

	public void Add(BaseEntity ent)
	{
		Vector3 localPosition = ent.transform.localPosition;
		Grid.Add(ent, localPosition.x, localPosition.z);
	}

	public void AddPlayer(BasePlayer player)
	{
		Vector3 localPosition = player.transform.localPosition;
		PlayerGrid.Add(player, localPosition.x, localPosition.z);
	}

	public void Remove(BaseEntity ent, bool isPlayer = false)
	{
		Grid.Remove(ent);
		if (isPlayer)
		{
			BasePlayer basePlayer = ent as BasePlayer;
			if (basePlayer != null)
			{
				PlayerGrid.Remove(basePlayer);
			}
		}
	}

	public void RemovePlayer(BasePlayer player)
	{
		PlayerGrid.Remove(player);
	}

	public void Move(BaseEntity ent)
	{
		Vector3 localPosition = ent.transform.localPosition;
		Grid.Move(ent, localPosition.x, localPosition.z);
		BasePlayer basePlayer = ent as BasePlayer;
		if (basePlayer != null)
		{
			MovePlayer(basePlayer);
		}
	}

	public void MovePlayer(BasePlayer player)
	{
		Vector3 localPosition = player.transform.localPosition;
		PlayerGrid.Move(player, localPosition.x, localPosition.z);
	}

	public int GetInSphere(Vector3 position, float distance, BaseEntity[] results, Func<BaseEntity, bool> filter = null)
	{
		return Grid.Query(position.x, position.z, distance, results, filter);
	}

	public int GetPlayersInSphere(Vector3 position, float distance, BasePlayer[] results, Func<BasePlayer, bool> filter = null)
	{
		return PlayerGrid.Query(position.x, position.z, distance, results, filter);
	}
}
