using UnityEngine;

public class FBasic_FreeCameraBehaviour : MonoBehaviour
{
	[Tooltip("How fast camera should fly")]
	[Header("> Hold right mouse button to rotate camera <")]
	public float SpeedMultiplier = 10f;

	[Tooltip("Value of acceleration smoothness")]
	public float AccelerationSmothnessValue = 10f;

	[Tooltip("Value of rotation smoothness")]
	public float RotationSmothnessValue = 10f;

	public float MouseSensitivity = 5f;

	private float turboModeMultiply = 5f;

	private Vector3 speeds;

	private float ySpeed;

	private Vector3 rotation;

	private float turbo = 1f;

	private void Start()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		speeds = Vector3.zero;
		ySpeed = 0f;
		Quaternion val = ((Component)this).transform.rotation;
		rotation = ((Quaternion)(ref val)).eulerAngles;
	}

	private void Update()
	{
		//IL_0140: Unknown result type (might be due to invalid IL or missing references)
		//IL_014b: Unknown result type (might be due to invalid IL or missing references)
		//IL_015b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0160: Unknown result type (might be due to invalid IL or missing references)
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_018c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0191: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01de: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0287: Unknown result type (might be due to invalid IL or missing references)
		//IL_028c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0297: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bc: Unknown result type (might be due to invalid IL or missing references)
		float axis = Input.GetAxis("Vertical");
		float axis2 = Input.GetAxis("Horizontal");
		float num = axis * Time.smoothDeltaTime * SpeedMultiplier;
		float num2 = axis2 * Time.smoothDeltaTime * SpeedMultiplier;
		if (Input.GetKey((KeyCode)304))
		{
			turbo = Mathf.Lerp(turbo, turboModeMultiply, Time.smoothDeltaTime * 5f);
		}
		else
		{
			turbo = Mathf.Lerp(turbo, 1f, Time.smoothDeltaTime * 5f);
		}
		num *= turbo;
		num2 *= turbo;
		if (Input.GetMouseButton(1))
		{
			rotation.x -= Input.GetAxis("Mouse Y") * 1f * MouseSensitivity;
			rotation.y += Input.GetAxis("Mouse X") * 1f * MouseSensitivity;
		}
		speeds.z = Mathf.Lerp(speeds.z, num, Time.smoothDeltaTime * AccelerationSmothnessValue);
		speeds.x = Mathf.Lerp(speeds.x, num2, Time.smoothDeltaTime * AccelerationSmothnessValue);
		Transform transform = ((Component)this).transform;
		transform.position += ((Component)this).transform.forward * speeds.z;
		Transform transform2 = ((Component)this).transform;
		transform2.position += ((Component)this).transform.right * speeds.x;
		Transform transform3 = ((Component)this).transform;
		transform3.position += ((Component)this).transform.up * speeds.y;
		((Component)this).transform.rotation = Quaternion.Slerp(((Component)this).transform.rotation, Quaternion.Euler(rotation), Time.smoothDeltaTime * RotationSmothnessValue);
		if (Input.GetKey((KeyCode)306))
		{
			ySpeed = Mathf.Lerp(ySpeed, 1f, Time.smoothDeltaTime * AccelerationSmothnessValue);
		}
		else if (Input.GetButton("Jump"))
		{
			ySpeed = Mathf.Lerp(ySpeed, -1f, Time.smoothDeltaTime * AccelerationSmothnessValue);
		}
		else
		{
			ySpeed = Mathf.Lerp(ySpeed, 0f, Time.smoothDeltaTime * AccelerationSmothnessValue);
		}
		Transform transform4 = ((Component)this).transform;
		transform4.position += Vector3.down * ySpeed * turbo * Time.smoothDeltaTime * SpeedMultiplier;
	}

	public void FixedUpdate()
	{
		if (Input.GetMouseButton(1))
		{
			Cursor.lockState = (CursorLockMode)1;
			Cursor.visible = false;
		}
		else
		{
			Cursor.lockState = (CursorLockMode)0;
			Cursor.visible = true;
		}
	}
}
