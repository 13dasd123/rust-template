using UnityEngine;

private struct EntityInfo
{
	public BaseNetworkable entity;

	public NetworkableId entityID;

	public uint groupID;

	public NetworkableId parentID;

	public string status;

	public EntityInfo(BaseNetworkable src)
	{
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		entity = src;
		BaseEntity baseEntity = entity as BaseEntity;
		BaseEntity baseEntity2 = (((Object)(object)baseEntity != (Object)null) ? baseEntity.GetParentEntity() : null);
		NetworkableId val;
		NetworkableId val2;
		if (!((Object)(object)entity != (Object)null) || entity.net == null)
		{
			val = default(NetworkableId);
			val2 = val;
		}
		else
		{
			val2 = entity.net.ID;
		}
		entityID = val2;
		groupID = (((Object)(object)entity != (Object)null && entity.net != null && entity.net.group != null) ? entity.net.group.ID : 0u);
		NetworkableId val3;
		if (!((Object)(object)baseEntity != (Object)null))
		{
			val = default(NetworkableId);
			val3 = val;
		}
		else
		{
			val3 = baseEntity.parentEntity.uid;
		}
		parentID = val3;
		if ((Object)(object)baseEntity != (Object)null)
		{
			val = baseEntity.parentEntity.uid;
			if (((NetworkableId)(ref val)).IsValid)
			{
				if ((Object)(object)baseEntity2 == (Object)null)
				{
					status = "orphan";
				}
				else
				{
					status = "child";
				}
				return;
			}
		}
		status = string.Empty;
	}
}
