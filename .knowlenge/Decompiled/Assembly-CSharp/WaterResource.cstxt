using UnityEngine;

public class WaterResource
{
	public static ItemDefinition SV_GetAtPoint(Vector3 pos)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		if (IsRadioactive(pos))
		{
			return WaterTypes.RadioactiveWaterItemDef;
		}
		if (!IsFreshWater(pos))
		{
			return WaterTypes.SaltWaterItemDef;
		}
		return WaterTypes.WaterItemDef;
	}

	public static WaterBody FindWaterBodyAtPos(Vector3 pos)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		float num = 1.5f;
		RaycastHit hitInfo;
		bool num2 = GamePhysics.Trace(new Ray(pos + Vector3.up * num, Vector3.down), 0f, out hitInfo, 3f, 16, (QueryTriggerInteraction)0);
		WaterBody result = null;
		if (num2)
		{
			result = hitInfo.GetWaterBody();
		}
		return result;
	}

	public static bool IsRadioactive(WaterBody body)
	{
		return body.Type == WaterBodyType.Radioactive;
	}

	public static bool IsRadioactive(Vector3 pos)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		WaterBody waterBody = FindWaterBodyAtPos(pos);
		if (Object.op_Implicit((Object)(object)waterBody))
		{
			return waterBody.Type == WaterBodyType.Radioactive;
		}
		return false;
	}

	public static bool IsFreshWater(Vector3 pos)
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)TerrainMeta.TopologyMap == (Object)null)
		{
			return false;
		}
		return TerrainMeta.TopologyMap.GetTopology(pos, 245760);
	}

	public static ItemDefinition Merge(ItemDefinition first, ItemDefinition second)
	{
		if ((Object)(object)first == (Object)(object)second)
		{
			return first;
		}
		if ((Object)(object)first == (Object)(object)WaterTypes.RadioactiveWaterItemDef || (Object)(object)second == (Object)(object)WaterTypes.RadioactiveWaterItemDef)
		{
			return WaterTypes.RadioactiveWaterItemDef;
		}
		if ((Object)(object)first == (Object)(object)WaterTypes.SaltWaterItemDef || (Object)(object)second == (Object)(object)WaterTypes.SaltWaterItemDef)
		{
			return WaterTypes.SaltWaterItemDef;
		}
		return WaterTypes.WaterItemDef;
	}
}
