using System;
using System.Collections.Generic;
using ConVar;
using Rust;
using UnityEngine;

[CreateAssetMenu(menuName = "Rust/DiggableLoot Spawn")]
public class DiggableEntityLoot : ScriptableObject
{
	[Serializable]
	public struct ItemEntry
	{
		public ItemDefinition Item;

		public int Weight;

		public int Min;

		public int Max;
	}

	public List<ItemEntry> Items = new List<ItemEntry>();

	private List<ItemEntry> allowedItems;

	private Era cachedEra;

	[InspectorFlags]
	public Enum Biomes = (Enum)(-1);

	[InspectorFlags]
	public Enum Topology = (Enum)(-1);

	public IList<ItemEntry> GetItems()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		if (cachedEra != ConVar.Server.Era)
		{
			allowedItems = null;
			cachedEra = ConVar.Server.Era;
		}
		if (allowedItems == null)
		{
			allowedItems = new List<ItemEntry>();
			foreach (ItemEntry item in Items)
			{
				if (item.Item.IsAllowedInEra((EraRestriction)32))
				{
					allowedItems.Add(item);
				}
			}
		}
		return allowedItems;
	}

	public bool VerifyLootListForWorldPosition(Vector3 worldPos)
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		int num = (Object.op_Implicit((Object)(object)TerrainMeta.BiomeMap) ? TerrainMeta.BiomeMap.GetBiomeMaxType(worldPos) : 2);
		int num2 = ((!Object.op_Implicit((Object)(object)TerrainMeta.TopologyMap)) ? 1 : TerrainMeta.TopologyMap.GetTopology(worldPos));
		if ((num & Biomes) == 0)
		{
			return false;
		}
		if ((num2 & Topology) == 0)
		{
			return false;
		}
		return true;
	}
}
