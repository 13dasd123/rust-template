using UnityEngine;
using UnityEngine.AI;

public class BearNavigateToPreferredFightingRange : BaseNavigateTo
{
	public static Vector3 GetPreferredFightingPosition(BearContext context)
	{
		if (Time.time - context.Memory.CachedPreferredDistanceDestinationTime < 0.01f)
		{
			return context.Memory.CachedPreferredDistanceDestination;
		}
		NpcPlayerInfo primaryEnemyPlayerTarget = context.GetPrimaryEnemyPlayerTarget();
		if (primaryEnemyPlayerTarget.Player != null)
		{
			float closeRange = context.Body.AiDefinition.Engagement.CloseRange;
			float num = closeRange * closeRange;
			Vector3 vector = ((!(primaryEnemyPlayerTarget.SqrDistance < num)) ? (primaryEnemyPlayerTarget.Player.transform.position - context.Body.transform.position).normalized : (context.Body.transform.position - primaryEnemyPlayerTarget.Player.transform.position).normalized);
			Vector3 vector2 = context.Body.transform.position + vector * closeRange;
			Vector3 vector3 = vector2;
			for (int i = 0; i < 10; i++)
			{
				if (NavMesh.SamplePosition(vector3 + Vector3.up * 0.1f, out var hit, 2f * context.Domain.NavAgent.height, -1))
				{
					Vector3 vector4 = context.Domain.ToAllowedMovementDestination(hit.position);
					if (context.Memory.IsValid(vector4))
					{
						context.Memory.CachedPreferredDistanceDestination = vector4;
						context.Memory.CachedPreferredDistanceDestinationTime = Time.time;
						return vector4;
					}
				}
				else
				{
					context.Memory.AddFailedDestination(vector3);
				}
				Vector2 vector5 = Random.insideUnitCircle * 5f;
				vector3 = vector2 + new Vector3(vector5.x, 0f, vector5.y);
			}
		}
		return context.Body.transform.position;
	}

	protected override Vector3 _GetDestination(BearContext context)
	{
		return GetPreferredFightingPosition(context);
	}
}
