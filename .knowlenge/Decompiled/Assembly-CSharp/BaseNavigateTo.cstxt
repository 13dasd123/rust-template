using System;
using Apex.Ai.HTN;
using Apex.Serialization;
using UnityEngine;

public abstract class BaseNavigateTo : OperatorBase<ScientistJunkpileContext>
{
	[ApexSerialization]
	public bool RunUntilArrival = true;

	protected abstract Vector3 _GetDestination(ScientistJunkpileContext context);

	protected virtual void OnPreStart(ScientistJunkpileContext context)
	{
	}

	protected virtual void OnStart(ScientistJunkpileContext context)
	{
	}

	protected virtual void OnPathFailed(ScientistJunkpileContext context)
	{
	}

	protected virtual void OnPathComplete(ScientistJunkpileContext context)
	{
	}

	public override void Execute(ScientistJunkpileContext context)
	{
		OnPreStart(context);
		context.ReserveCoverPoint(null);
		context.Domain.SetDestination(_GetDestination(context));
		if (!RunUntilArrival)
		{
			context.OnWorldStateChangedEvent = (ScientistJunkpileContext.WorldStateChangedEvent)Delegate.Combine(context.OnWorldStateChangedEvent, new ScientistJunkpileContext.WorldStateChangedEvent(TrackWorldState));
		}
		OnStart(context);
	}

	private void TrackWorldState(ScientistJunkpileContext context, Facts fact, byte oldValue, byte newValue)
	{
		if (fact == Facts.PathStatus)
		{
			switch (newValue)
			{
			case 2:
				context.OnWorldStateChangedEvent = (ScientistJunkpileContext.WorldStateChangedEvent)Delegate.Remove(context.OnWorldStateChangedEvent, new ScientistJunkpileContext.WorldStateChangedEvent(TrackWorldState));
				JunkpileIsNotNavigatingEffect.ApplyStatic(context, fromPlanner: false, temporary: false);
				ApplyExpectedEffects(context, context.CurrentTask);
				context.Domain.StopNavigating();
				OnPathComplete(context);
				break;
			case 3:
				context.OnWorldStateChangedEvent = (ScientistJunkpileContext.WorldStateChangedEvent)Delegate.Remove(context.OnWorldStateChangedEvent, new ScientistJunkpileContext.WorldStateChangedEvent(TrackWorldState));
				JunkpileIsNotNavigatingEffect.ApplyStatic(context, fromPlanner: false, temporary: false);
				context.Domain.StopNavigating();
				OnPathFailed(context);
				break;
			}
		}
	}

	public override OperatorStateType Tick(ScientistJunkpileContext context, PrimitiveTaskSelector task)
	{
		switch ((PathStatus)context.GetFact(Facts.PathStatus))
		{
		default:
			context.Domain.StopNavigating();
			OnPathFailed(context);
			return OperatorStateType.Aborted;
		case PathStatus.NoPath:
		case PathStatus.PathComplete:
			JunkpileIsNotNavigatingEffect.ApplyStatic(context, fromPlanner: false, temporary: false);
			ApplyExpectedEffects(context, task);
			context.Domain.StopNavigating();
			OnPathComplete(context);
			return OperatorStateType.Complete;
		case PathStatus.PathRunning:
			if (RunUntilArrival)
			{
				return OperatorStateType.Running;
			}
			return OperatorStateType.Complete;
		}
	}

	public override void Abort(ScientistJunkpileContext context, PrimitiveTaskSelector task)
	{
		JunkpileIsNotNavigatingEffect.ApplyStatic(context, fromPlanner: false, temporary: false);
		context.Domain.StopNavigating();
	}
}
