using System.Collections.Generic;
using System.IO;
using ConVar;
using Facepunch.Extend;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Oxide.Core;
using UnityEngine;

public static class ServerUsers
{
	public enum UserGroup
	{
		None,
		Owner,
		Moderator,
		Banned
	}

	public class User
	{
		public ulong steamid;

		[JsonConverter(typeof(StringEnumConverter))]
		public UserGroup group;

		public string username;

		public string notes;
	}

	private static List<User> users = new List<User>();

	public static void Remove(ulong uID)
	{
		Interface.CallHook("IOnServerUsersRemove", uID);
		ulong uID2 = uID;
		users.RemoveAll((User x) => x.steamid == uID2);
	}

	public static void Set(ulong iUID, UserGroup group, string username, string notes)
	{
		Interface.CallHook("IOnServerUsersSet", iUID, group, username, notes);
		ulong iUID2 = iUID;
		users.RemoveAll((User x) => x.steamid == iUID2);
		User user = new User();
		user.steamid = iUID2;
		user.group = group;
		user.username = username;
		user.notes = notes;
		users.Add(user);
	}

	public static void Clear(ulong iUID)
	{
		users.RemoveAll((User x) => x.steamid == iUID);
	}

	public static User Get(ulong iUID)
	{
		return users.Find((User x) => x.steamid == iUID);
	}

	public static bool Is(ulong iUID, UserGroup group)
	{
		User user = Get(iUID);
		if (user == null)
		{
			return false;
		}
		return user.group == group;
	}

	public static List<User> GetAll(UserGroup group)
	{
		return users.FindAll((User x) => x.group == group);
	}

	public static void Clear()
	{
		users.Clear();
	}

	public static void Load()
	{
		Clear();
		string serverFolder = Server.GetServerFolder("cfg");
		if (File.Exists(serverFolder + "/bans.cfg"))
		{
			string text = File.ReadAllText(serverFolder + "/bans.cfg");
			if (!string.IsNullOrEmpty(text))
			{
				Debug.Log("Running " + serverFolder + "/bans.cfg");
				ConsoleSystem.RunFile(ConsoleSystem.Option.Server.Quiet(), text);
			}
		}
		if (File.Exists(serverFolder + "/users.cfg"))
		{
			string text2 = File.ReadAllText(serverFolder + "/users.cfg");
			if (!string.IsNullOrEmpty(text2))
			{
				Debug.Log("Running " + serverFolder + "/users.cfg");
				ConsoleSystem.RunFile(ConsoleSystem.Option.Server.Quiet(), text2);
			}
		}
		users.RemoveAll((User x) => x.notes == "EAC");
	}

	public static void Save()
	{
		string serverFolder = Server.GetServerFolder("cfg");
		users.RemoveAll((User x) => x.notes == "EAC");
		string text = string.Empty;
		List<User> all = GetAll(UserGroup.Banned);
		foreach (User item in all)
		{
			string text2 = text;
			text = text2 + "banid " + item.steamid + " " + Facepunch.Extend.StringExtensions.QuoteSafe(item.username) + " " + Facepunch.Extend.StringExtensions.QuoteSafe(item.notes) + "\r\n";
		}
		File.WriteAllText(serverFolder + "/bans.cfg", text);
		string text3 = string.Empty;
		foreach (User item2 in GetAll(UserGroup.Owner))
		{
			string text2 = text3;
			text3 = text2 + "ownerid " + item2.steamid + " " + Facepunch.Extend.StringExtensions.QuoteSafe(item2.username) + " " + Facepunch.Extend.StringExtensions.QuoteSafe(item2.notes) + "\r\n";
		}
		foreach (User item3 in GetAll(UserGroup.Moderator))
		{
			string text2 = text3;
			text3 = text2 + "moderatorid " + item3.steamid + " " + Facepunch.Extend.StringExtensions.QuoteSafe(item3.username) + " " + Facepunch.Extend.StringExtensions.QuoteSafe(item3.notes) + "\r\n";
		}
		File.WriteAllText(serverFolder + "/users.cfg", text3);
	}

	public static string BanListString(bool bHeader = false)
	{
		List<User> all = GetAll(UserGroup.Banned);
		string text = string.Empty;
		if (bHeader)
		{
			if (all.Count == 0)
			{
				return "ID filter list: empty\n";
			}
			text = ((all.Count != 1) ? ("ID filter list: " + all.Count + " entries\n") : "ID filter list: 1 entry\n");
		}
		int num = 1;
		foreach (User item in all)
		{
			string text2 = text;
			text = text2 + num + " " + item.steamid + " : permanent\n";
			num++;
		}
		return text;
	}

	public static string BanListStringEx()
	{
		List<User> all = GetAll(UserGroup.Banned);
		string text = string.Empty;
		int num = 1;
		foreach (User item in all)
		{
			string text2 = text;
			text = text2 + num + " " + item.steamid + " " + Facepunch.Extend.StringExtensions.QuoteSafe(item.username) + " " + Facepunch.Extend.StringExtensions.QuoteSafe(item.notes) + "\n";
			num++;
		}
		return text;
	}
}
