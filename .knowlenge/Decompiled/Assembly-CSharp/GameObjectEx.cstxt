using Rust;
using Rust.Registry;
using UnityEngine;

public static class GameObjectEx
{
	public static BaseEntity ToBaseEntity(this GameObject go)
	{
		IEntity entity = GetEntityFromRegistry(go);
		if (entity == null && !go.transform.gameObject.activeSelf)
		{
			entity = GetEntityFromComponent(go);
		}
		return entity as BaseEntity;
	}

	private static IEntity GetEntityFromRegistry(GameObject go)
	{
		Transform transform = go.transform;
		IEntity entity = Entity.Get(transform.gameObject);
		while (entity == null && transform.parent != null)
		{
			transform = transform.parent;
			entity = Entity.Get(transform.gameObject);
		}
		return entity;
	}

	private static IEntity GetEntityFromComponent(GameObject go)
	{
		Transform transform = go.transform;
		IEntity component = transform.GetComponent<IEntity>();
		while (component == null && transform.parent != null)
		{
			transform = transform.parent;
			component = transform.GetComponent<IEntity>();
		}
		return component;
	}

	public static void SetHierarchyGroup(this GameObject obj, string strRoot, bool groupActive = true, bool persistant = false)
	{
		obj.transform.SetParent(HierarchyUtil.GetRoot(strRoot, groupActive, persistant).transform, worldPositionStays: true);
	}
}
