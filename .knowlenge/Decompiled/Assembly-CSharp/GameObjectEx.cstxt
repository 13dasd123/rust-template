using Rust;
using Rust.Registry;
using UnityEngine;

public static class GameObjectEx
{
	public static BaseEntity ToBaseEntity(this GameObject go)
	{
		IEntity entity = Entity.Get(go);
		if (entity != null)
		{
			return entity as BaseEntity;
		}
		entity = Entity.Get(go.transform.root.gameObject);
		if (entity != null)
		{
			return entity as BaseEntity;
		}
		if (!go.transform.root.gameObject.activeSelf)
		{
			entity = go.transform.root.GetComponent<IEntity>();
			return entity as BaseEntity;
		}
		return null;
	}

	public static void SetHierarchyGroup(this GameObject obj, string strRoot, bool groupActive = true, bool persistant = false)
	{
		obj.transform.SetParent(HierarchyUtil.GetRoot(strRoot, groupActive, persistant).transform, worldPositionStays: true);
	}
}
