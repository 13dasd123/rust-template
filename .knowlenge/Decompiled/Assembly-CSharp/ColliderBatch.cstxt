using ConVar;
using Rust;
using UnityEngine;

public class ColliderBatch : MonoBehaviour, IServerComponent
{
	private ColliderGroup batchGroup;

	private MeshColliderInstance batchInstance;

	public Transform BatchTransform { get; set; }

	public MeshCollider BatchCollider { get; set; }

	public Rigidbody BatchRigidbody { get; set; }

	protected void OnEnable()
	{
		BatchTransform = base.transform;
		BatchCollider = GetComponent<MeshCollider>();
		BatchRigidbody = GetComponent<Rigidbody>();
		Add();
	}

	protected void OnDisable()
	{
		Remove();
	}

	public void Add()
	{
		if (batchGroup != null)
		{
			Remove();
		}
		if (Batching.colliders && !(BatchTransform == null) && !(BatchCollider == null) && BatchCollider.sharedMesh.subMeshCount <= Batching.collider_submeshes && BatchCollider.sharedMesh.vertexCount <= Batching.collider_vertices)
		{
			ColliderCell colliderCell = SingletonComponent<ColliderGrid>.Instance[BatchTransform.position];
			batchGroup = colliderCell.FindBatchGroup(this);
			batchGroup.Add(this);
			batchInstance.mesh = BatchCollider.sharedMesh;
			batchInstance.position = BatchTransform.position;
			batchInstance.rotation = BatchTransform.rotation;
			batchInstance.scale = BatchTransform.lossyScale;
			batchInstance.transform = BatchTransform;
			batchInstance.rigidbody = BatchRigidbody;
			batchInstance.collider = BatchCollider;
			batchInstance.bounds = new OBB(BatchTransform, BatchCollider.sharedMesh.bounds);
			if (Rust.Application.isLoading)
			{
				BatchCollider.enabled = false;
			}
		}
	}

	public void Remove()
	{
		if (batchGroup != null)
		{
			batchGroup.Invalidate();
			batchGroup.Remove(this);
			batchGroup = null;
		}
	}

	public void Refresh()
	{
		Remove();
		Add();
	}

	public void AddBatch(ColliderGroup batchGroup)
	{
		batchGroup.Add(batchInstance);
	}
}
