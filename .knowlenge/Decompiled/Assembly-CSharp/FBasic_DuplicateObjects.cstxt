using FIMSpace.Basics;
using UnityEngine;

public class FBasic_DuplicateObjects : MonoBehaviour
{
	public enum FEDuplicateDirection
	{
		GoIterative,
		GoFromCenter
	}

	public enum FEDuplicateOrigin
	{
		FromToDuplicate,
		FromComponent
	}

	[Tooltip("Put here object which you want duplicate")]
	public GameObject ToDuplicate;

	[Tooltip("How many copies in which axis")]
	public Vector3 DuplicatesCount = new Vector3(3f, 1f, 3f);

	[Tooltip("How far from each other should be created copies")]
	public Vector3 Offsets = new Vector3(3f, 0f, 3f);

	public Vector3 Randomize = new Vector3(0f, 0f, 0f);

	public Vector3 RandomRotate = new Vector3(0f, 0f, 0f);

	public Vector3 RandomScale = new Vector3(0f, 0f, 0f);

	public int Seed;

	[Tooltip("If you want raycast from up and put objects for example on terrain")]
	public bool PlaceOnGround;

	[Tooltip("Duplicates will be created when entered playmode")]
	public bool DuplicateAtStart;

	public float GizmosSize = 1f;

	public FEDuplicateDirection DuplicationType;

	public FEDuplicateOrigin DuplicationOrigin;

	private void Start()
	{
		if (DuplicateAtStart)
		{
			Duplicate();
		}
	}

	private void Reset()
	{
		Seed = Random.Range(-2147483646, 2147483646);
	}

	public void Duplicate()
	{
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00db: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_014b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_0161: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0225: Unknown result type (might be due to invalid IL or missing references)
		//IL_0315: Unknown result type (might be due to invalid IL or missing references)
		//IL_0316: Unknown result type (might be due to invalid IL or missing references)
		//IL_0321: Unknown result type (might be due to invalid IL or missing references)
		//IL_0342: Unknown result type (might be due to invalid IL or missing references)
		//IL_0363: Unknown result type (might be due to invalid IL or missing references)
		//IL_038f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0392: Unknown result type (might be due to invalid IL or missing references)
		//IL_0397: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0402: Unknown result type (might be due to invalid IL or missing references)
		//IL_0407: Unknown result type (might be due to invalid IL or missing references)
		//IL_0418: Unknown result type (might be due to invalid IL or missing references)
		//IL_0471: Unknown result type (might be due to invalid IL or missing references)
		//IL_0476: Unknown result type (might be due to invalid IL or missing references)
		//IL_047b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0484: Unknown result type (might be due to invalid IL or missing references)
		//IL_049a: Unknown result type (might be due to invalid IL or missing references)
		//IL_049f: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_04b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_04dc: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)ToDuplicate == (Object)null)
		{
			return;
		}
		Random.InitState(Seed);
		Vector3 val = ((DuplicationOrigin != FEDuplicateOrigin.FromComponent) ? ToDuplicate.transform.position : ((Component)this).transform.position);
		if (DuplicationType == FEDuplicateDirection.GoIterative)
		{
			RaycastHit val4 = default(RaycastHit);
			for (int i = 0; (float)i < DuplicatesCount.x; i++)
			{
				for (int j = 0; (float)j < DuplicatesCount.y; j++)
				{
					for (int k = 0; (float)k < DuplicatesCount.z; k++)
					{
						if (DuplicationOrigin == FEDuplicateOrigin.FromToDuplicate && i == 0 && j == 0 && k == 0)
						{
							continue;
						}
						Vector3 val2 = val;
						val2.x += (float)i * Offsets.x;
						val2.y += (float)j * Offsets.y;
						val2.z += (float)k * Offsets.z;
						GameObject val3 = Object.Instantiate<GameObject>(ToDuplicate);
						val3.transform.position = val2 + GetRandomVector();
						Transform transform = val3.transform;
						transform.rotation *= Quaternion.Euler(Random.Range(0f - RandomRotate.x, RandomRotate.x), Random.Range(0f - RandomRotate.y, RandomRotate.y), Random.Range(0f - RandomRotate.z, RandomRotate.z));
						Vector3 localScale = val3.transform.localScale + new Vector3(Random.Range(0f - RandomScale.x, RandomScale.x), Random.Range(0f - RandomScale.y, RandomScale.y), Random.Range(0f - RandomScale.z, RandomScale.z));
						val3.transform.localScale = localScale;
						if (PlaceOnGround)
						{
							Physics.Raycast(val3.transform.position + Vector3.up * 100f, Vector3.down, ref val4, 200f);
							if (Object.op_Implicit((Object)(object)((RaycastHit)(ref val4)).transform))
							{
								val3.transform.position = ((RaycastHit)(ref val4)).point;
							}
						}
					}
				}
			}
		}
		else
		{
			if (DuplicationType != FEDuplicateDirection.GoFromCenter)
			{
				return;
			}
			Vector3 val5 = default(Vector3);
			RaycastHit val8 = default(RaycastHit);
			for (int l = 0; (float)l < DuplicatesCount.x; l++)
			{
				for (int m = 0; (float)m < DuplicatesCount.y; m++)
				{
					for (int n = 0; (float)n < DuplicatesCount.z; n++)
					{
						float num = 1f;
						float num2 = 1f;
						float num3 = 1f;
						if (l % 2 == 1)
						{
							num = -1f;
						}
						if (m % 2 == 1)
						{
							num2 = -1f;
						}
						if (n % 2 == 1)
						{
							num3 = -1f;
						}
						((Vector3)(ref val5))..ctor((float)l, (float)m, (float)n);
						if (l == 0)
						{
							val5.x = 0.5f;
						}
						if (m == 0)
						{
							val5.y = 0.5f;
						}
						if (n == 0)
						{
							val5.z = 0.5f;
						}
						Vector3 val6 = val;
						val6.x += val5.x * Offsets.x * num;
						val6.y += val5.y * Offsets.y * num2;
						val6.z += val5.z * Offsets.z * num3;
						GameObject val7 = Object.Instantiate<GameObject>(ToDuplicate);
						val7.transform.position = val6 + GetRandomVector();
						Transform transform2 = val7.transform;
						transform2.rotation *= Quaternion.Euler(Random.Range(0f - RandomRotate.x, RandomRotate.x), Random.Range(0f - RandomRotate.y, RandomRotate.y), Random.Range(0f - RandomRotate.z, RandomRotate.z));
						Vector3 localScale2 = val7.transform.localScale + new Vector3(Random.Range(0f - RandomScale.x, RandomScale.x), Random.Range(0f - RandomScale.y, RandomScale.y), Random.Range(0f - RandomScale.z, RandomScale.z));
						val7.transform.localScale = localScale2;
						if (PlaceOnGround)
						{
							Physics.Raycast(val7.transform.position + Vector3.up * 100f, Vector3.down, ref val8, 200f);
							if (Object.op_Implicit((Object)(object)((RaycastHit)(ref val8)).transform))
							{
								val7.transform.position = ((RaycastHit)(ref val8)).point;
							}
						}
					}
				}
			}
		}
	}

	private void OnDrawGizmos()
	{
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01de: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_020a: Unknown result type (might be due to invalid IL or missing references)
		//IL_022b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0243: Unknown result type (might be due to invalid IL or missing references)
		//IL_0246: Unknown result type (might be due to invalid IL or missing references)
		//IL_024b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0250: Unknown result type (might be due to invalid IL or missing references)
		//IL_025a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0265: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)ToDuplicate == (Object)null)
		{
			return;
		}
		Random.InitState(Seed);
		Vector3 val = ((DuplicationOrigin != FEDuplicateOrigin.FromComponent) ? ToDuplicate.transform.position : ((Component)this).transform.position);
		Gizmos.color = new Color(0.2f, 0.7f, 0.2f, 0.6f);
		if (DuplicationType == FEDuplicateDirection.GoIterative)
		{
			for (int i = 0; (float)i < DuplicatesCount.x; i++)
			{
				for (int j = 0; (float)j < DuplicatesCount.y; j++)
				{
					for (int k = 0; (float)k < DuplicatesCount.z; k++)
					{
						Vector3 val2 = val;
						val2.x += (float)i * Offsets.x;
						val2.y += (float)j * Offsets.y;
						val2.z += (float)k * Offsets.z;
						Gizmos.DrawCube(val2 + GetRandomVector(), Vector3.one * 0.25f * GizmosSize);
					}
				}
			}
		}
		else
		{
			if (DuplicationType != FEDuplicateDirection.GoFromCenter)
			{
				return;
			}
			Vector3 val3 = default(Vector3);
			for (int l = 0; (float)l < DuplicatesCount.x; l++)
			{
				for (int m = 0; (float)m < DuplicatesCount.y; m++)
				{
					for (int n = 0; (float)n < DuplicatesCount.z; n++)
					{
						float num = 1f;
						float num2 = 1f;
						float num3 = 1f;
						if (l % 2 == 1)
						{
							num = -1f;
						}
						if (m % 2 == 1)
						{
							num2 = -1f;
						}
						if (n % 2 == 1)
						{
							num3 = -1f;
						}
						((Vector3)(ref val3))..ctor((float)l, (float)m, (float)n);
						if (l == 0)
						{
							val3.x = 0.5f;
						}
						if (m == 0)
						{
							val3.y = 0.5f;
						}
						if (n == 0)
						{
							val3.z = 0.5f;
						}
						Vector3 val4 = val;
						val4.x += val3.x * Offsets.x * num;
						val4.y += val3.y * Offsets.y * num2;
						val4.z += val3.z * Offsets.z * num3;
						Gizmos.DrawCube(val4 + GetRandomVector(), Vector3.one * 0.25f * GizmosSize);
					}
				}
			}
		}
	}

	private Vector3 GetRandomVector()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		if (Randomize == Vector3.zero)
		{
			return Randomize;
		}
		return new Vector3(Random.Range(0f - Randomize.x, Randomize.x), Random.Range(0f - Randomize.y, Randomize.y), Random.Range(0f - Randomize.z, Randomize.z));
	}
}
