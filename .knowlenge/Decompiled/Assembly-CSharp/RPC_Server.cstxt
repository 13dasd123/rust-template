using System;
using Oxide.Core;
using UnityEngine;

public class RPC_Server : RPC_Shared
{
	public abstract class Conditional : Attribute
	{
		public virtual string GetArgs()
		{
			return null;
		}
	}

	public class MaxDistance : Conditional
	{
		private float maximumDistance;

		public bool CheckParent { get; set; }

		public MaxDistance(float maxDist)
		{
			maximumDistance = maxDist;
		}

		public override string GetArgs()
		{
			return maximumDistance.ToString("0.00f") + (CheckParent ? ", true" : "");
		}

		public static bool Test(uint id, string debugName, BaseEntity ent, BasePlayer player, float maximumDistance, bool checkParent = false)
		{
			//IL_004d: Unknown result type (might be due to invalid IL or missing references)
			//IL_007d: Unknown result type (might be due to invalid IL or missing references)
			if ((Object)(object)ent == (Object)null || (Object)(object)player == (Object)null)
			{
				return false;
			}
			object obj = Interface.CallHook("OnEntityDistanceCheck", (object)ent, (object)player, (object)id, (object)debugName, (object)maximumDistance, (object)checkParent);
			if (obj is bool)
			{
				return (bool)obj;
			}
			bool flag = ent.Distance(player.eyes.position) <= maximumDistance;
			if (checkParent && !flag)
			{
				BaseEntity parentEntity = ent.GetParentEntity();
				flag = (Object)(object)parentEntity != (Object)null && parentEntity.Distance(player.eyes.position) <= maximumDistance;
			}
			return flag;
		}
	}

	public class IsVisible : Conditional
	{
		private float maximumDistance;

		public IsVisible(float maxDist)
		{
			maximumDistance = maxDist;
		}

		public override string GetArgs()
		{
			return maximumDistance.ToString("0.00f");
		}

		public static bool Test(uint id, string debugName, BaseEntity ent, BasePlayer player, float maximumDistance)
		{
			//IL_0045: Unknown result type (might be due to invalid IL or missing references)
			//IL_0050: Unknown result type (might be due to invalid IL or missing references)
			//IL_0069: Unknown result type (might be due to invalid IL or missing references)
			//IL_0083: Unknown result type (might be due to invalid IL or missing references)
			if ((Object)(object)ent == (Object)null || (Object)(object)player == (Object)null)
			{
				return false;
			}
			object obj = Interface.CallHook("OnEntityVisibilityCheck", (object)ent, (object)player, (object)id, (object)debugName, (object)maximumDistance);
			if (obj is bool)
			{
				return (bool)obj;
			}
			if (GamePhysics.LineOfSight(player.eyes.center, player.eyes.position, 1218519041))
			{
				if (!ent.IsVisible(player.eyes.HeadRay(), 1218519041, maximumDistance))
				{
					return ent.IsVisible(player.eyes.position, maximumDistance);
				}
				return true;
			}
			return false;
		}
	}

	public class FromOwner : Conditional
	{
		private bool includeMounted;

		public FromOwner(bool includeMounted = false)
		{
			this.includeMounted = includeMounted;
		}

		public override string GetArgs()
		{
			return includeMounted.ToString().ToLower();
		}

		public static bool Test(uint id, string debugName, BaseEntity ent, BasePlayer player, bool includeMounted)
		{
			//IL_005a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0065: Unknown result type (might be due to invalid IL or missing references)
			//IL_0079: Unknown result type (might be due to invalid IL or missing references)
			//IL_0084: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
			//IL_011f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0130: Unknown result type (might be due to invalid IL or missing references)
			//IL_0135: Unknown result type (might be due to invalid IL or missing references)
			//IL_0150: Unknown result type (might be due to invalid IL or missing references)
			//IL_0155: Unknown result type (might be due to invalid IL or missing references)
			if ((Object)(object)ent == (Object)null || (Object)(object)player == (Object)null)
			{
				return false;
			}
			if (ent.net == null || player.net == null)
			{
				return false;
			}
			object obj = Interface.CallHook("OnEntityFromOwnerCheck", (object)ent, (object)player, (object)id, (object)debugName, (object)includeMounted);
			if (obj is bool)
			{
				return (bool)obj;
			}
			if (ent.net.ID == player.net.ID)
			{
				return true;
			}
			if (ent.parentEntity.uid != player.net.ID)
			{
				BaseEntity parentEntity = ent.GetParentEntity();
				if ((Object)(object)parentEntity != (Object)null && parentEntity.parentEntity.uid == player.net.ID)
				{
					return true;
				}
				if (includeMounted)
				{
					BaseMountable baseMountable = ent as BaseMountable;
					if ((Object)(object)baseMountable == (Object)null)
					{
						baseMountable = ent.parentEntity.Get(serverside: true) as BaseMountable;
					}
					if ((Object)(object)baseMountable != (Object)null)
					{
						NetworkableId? val = baseMountable.GetMounted()?.net?.ID;
						NetworkableId iD = player.net.ID;
						if (val.HasValue && (!val.HasValue || val.GetValueOrDefault() == iD))
						{
							return true;
						}
					}
				}
				return false;
			}
			return true;
		}
	}

	public class IsActiveItem : Conditional
	{
		public static bool Test(uint id, string debugName, BaseEntity ent, BasePlayer player)
		{
			//IL_0050: Unknown result type (might be due to invalid IL or missing references)
			//IL_005b: Unknown result type (might be due to invalid IL or missing references)
			//IL_006f: Unknown result type (might be due to invalid IL or missing references)
			//IL_007a: Unknown result type (might be due to invalid IL or missing references)
			if ((Object)(object)ent == (Object)null || (Object)(object)player == (Object)null)
			{
				return false;
			}
			if (ent.net == null || player.net == null)
			{
				return false;
			}
			object obj = Interface.CallHook("OnEntityActiveCheck", (object)ent, (object)player, (object)id, (object)debugName);
			if (obj is bool)
			{
				return (bool)obj;
			}
			if (ent.net.ID == player.net.ID)
			{
				return true;
			}
			if (ent.parentEntity.uid != player.net.ID)
			{
				return false;
			}
			Item activeItem = player.GetActiveItem();
			if (activeItem == null)
			{
				return false;
			}
			if ((Object)(object)activeItem.GetHeldEntity() != (Object)(object)ent)
			{
				return false;
			}
			return true;
		}
	}

	public class CallsPerSecond : Conditional
	{
		private ulong callsPerSecond;

		public CallsPerSecond(ulong limit)
		{
			callsPerSecond = limit;
		}

		public override string GetArgs()
		{
			return callsPerSecond.ToString();
		}

		public static bool Test(uint id, string debugName, BaseEntity ent, BasePlayer player, ulong callsPerSecond)
		{
			if ((Object)(object)ent == (Object)null || (Object)(object)player == (Object)null)
			{
				return false;
			}
			return player.rpcHistory.TryIncrement(id, callsPerSecond);
		}
	}
}
