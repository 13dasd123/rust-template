using System;
using Oxide.Core;

public class RPC_Server : RPC_Shared
{
	public abstract class Conditional : Attribute
	{
		public virtual string GetArgs()
		{
			return null;
		}
	}

	public class MaxDistance : Conditional
	{
		private float maximumDistance;

		public MaxDistance(float maxDist)
		{
			maximumDistance = maxDist;
		}

		public override string GetArgs()
		{
			return maximumDistance.ToString("0.00f");
		}

		public static bool Test(uint id, string debugName, BaseEntity ent, BasePlayer player, float maximumDistance)
		{
			if (ent == null || player == null)
			{
				return false;
			}
			object obj = Interface.CallHook("OnEntityDistanceCheck", ent, player, id, debugName, maximumDistance);
			if (obj is bool)
			{
				return (bool)obj;
			}
			return ent.Distance(player.eyes.position) <= maximumDistance;
		}
	}

	public class IsVisible : Conditional
	{
		private float maximumDistance;

		public IsVisible(float maxDist)
		{
			maximumDistance = maxDist;
		}

		public override string GetArgs()
		{
			return maximumDistance.ToString("0.00f");
		}

		public static bool Test(uint id, string debugName, BaseEntity ent, BasePlayer player, float maximumDistance)
		{
			if (ent == null || player == null)
			{
				return false;
			}
			object obj = Interface.CallHook("OnEntityVisibilityCheck", ent, player, id, debugName, maximumDistance);
			if (obj is bool)
			{
				return (bool)obj;
			}
			if (GamePhysics.LineOfSight(player.eyes.center, player.eyes.position, 2162688))
			{
				if (!ent.IsVisible(player.eyes.HeadRay(), 1218519041, maximumDistance))
				{
					return ent.IsVisible(player.eyes.position, maximumDistance);
				}
				return true;
			}
			return false;
		}
	}

	public class FromOwner : Conditional
	{
		public static bool Test(uint id, string debugName, BaseEntity ent, BasePlayer player)
		{
			if (ent == null || player == null)
			{
				return false;
			}
			if (ent.net == null || player.net == null)
			{
				return false;
			}
			object obj = Interface.CallHook("OnEntityFromOwnerCheck", ent, player, id, debugName);
			if (obj is bool)
			{
				return (bool)obj;
			}
			if (ent.net.ID == player.net.ID)
			{
				return true;
			}
			if (ent.parentEntity.uid != player.net.ID)
			{
				return false;
			}
			return true;
		}
	}

	public class IsActiveItem : Conditional
	{
		public static bool Test(uint id, string debugName, BaseEntity ent, BasePlayer player)
		{
			if (ent == null || player == null)
			{
				return false;
			}
			if (ent.net == null || player.net == null)
			{
				return false;
			}
			object obj = Interface.CallHook("OnEntityActiveCheck", ent, player, id, debugName);
			if (obj is bool)
			{
				return (bool)obj;
			}
			if (ent.net.ID == player.net.ID)
			{
				return true;
			}
			if (ent.parentEntity.uid != player.net.ID)
			{
				return false;
			}
			Item activeItem = player.GetActiveItem();
			if (activeItem == null)
			{
				return false;
			}
			if (activeItem.GetHeldEntity() != ent)
			{
				return false;
			}
			return true;
		}
	}

	public class CallsPerSecond : Conditional
	{
		private ulong callsPerSecond;

		public CallsPerSecond(ulong limit)
		{
			callsPerSecond = limit;
		}

		public override string GetArgs()
		{
			return callsPerSecond.ToString();
		}

		public static bool Test(uint id, string debugName, BaseEntity ent, BasePlayer player, ulong callsPerSecond)
		{
			if (ent == null || player == null)
			{
				return false;
			}
			return player.rpcHistory.TryIncrement(id, callsPerSecond);
		}
	}
}
