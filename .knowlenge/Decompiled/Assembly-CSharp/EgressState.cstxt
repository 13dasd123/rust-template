using System;
using UnityEngine;

public class EgressState : BasicAIState
{
	private bool killing;

	private bool egressAltitueAchieved;

	public EgressState()
		: base(AIState.Egress)
	{
	}

	public override bool CanInterrupt()
	{
		return false;
	}

	public override float GetWeight()
	{
		CH47HelicopterAIController cH47HelicopterAIController = brain.GetBrainBaseEntity() as CH47HelicopterAIController;
		if (cH47HelicopterAIController.OutOfCrates() && !cH47HelicopterAIController.ShouldLand())
		{
			return 10000f;
		}
		CH47AIBrain component = ((Component)brain).GetComponent<CH47AIBrain>();
		if ((Object)(object)component != (Object)null)
		{
			if (!(component.Age > 1800f))
			{
				return 0f;
			}
			return 10000f;
		}
		return 0f;
	}

	public override void StateEnter(BaseAIBrain brain, BaseEntity entity)
	{
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		CH47HelicopterAIController obj = entity as CH47HelicopterAIController;
		obj.EnableFacingOverride(enabled: false);
		Transform transform = ((Component)obj).transform;
		Rigidbody rigidBody = obj.rigidBody;
		Vector3 velocity = rigidBody.velocity;
		Vector3 val;
		if (!(((Vector3)(ref velocity)).magnitude < 0.1f))
		{
			velocity = rigidBody.velocity;
			val = ((Vector3)(ref velocity)).normalized;
		}
		else
		{
			val = transform.forward;
		}
		Vector3 val2 = val;
		Vector3 val3 = Vector3.Cross(Vector3.Cross(transform.up, val2), Vector3.up);
		brain.mainInterestPoint = transform.position + val3 * 8000f;
		brain.mainInterestPoint.y = 100f;
		obj.SetMoveTarget(brain.mainInterestPoint);
		base.StateEnter(brain, entity);
	}

	public override StateStatus StateThink(float delta, BaseAIBrain brain, BaseEntity entity)
	{
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		base.StateThink(delta, brain, entity);
		if (killing)
		{
			return StateStatus.Running;
		}
		CH47HelicopterAIController cH47HelicopterAIController = entity as CH47HelicopterAIController;
		Vector3 position = ((Component)cH47HelicopterAIController).transform.position;
		if (position.y < 85f && !egressAltitueAchieved)
		{
			CH47LandingZone closest = CH47LandingZone.GetClosest(position);
			if ((Object)(object)closest != (Object)null && Vector3Ex.Distance2D(((Component)closest).transform.position, position) < 20f)
			{
				float waterOrTerrainSurface = WaterLevel.GetWaterOrTerrainSurface(position, waves: false, volumes: false);
				waterOrTerrainSurface += 100f;
				Vector3 moveTarget = position;
				moveTarget.y = waterOrTerrainSurface;
				cH47HelicopterAIController.SetMoveTarget(moveTarget);
				return StateStatus.Running;
			}
		}
		egressAltitueAchieved = true;
		cH47HelicopterAIController.SetMoveTarget(brain.mainInterestPoint);
		if (base.TimeInState > 300f)
		{
			((FacepunchBehaviour)SingletonComponent<InvokeHandler>.Instance).Invoke((Action)cH47HelicopterAIController.DelayedKill, 2f);
			killing = true;
		}
		return StateStatus.Running;
	}
}
