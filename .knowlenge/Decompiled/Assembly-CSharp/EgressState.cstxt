using UnityEngine;

public class EgressState : BasicAIState
{
	private bool killing;

	public override bool CanInterrupt()
	{
		return false;
	}

	public override float GetWeight()
	{
		if (brain.GetEntity().OutOfCrates() && !brain.GetEntity().ShouldLand())
		{
			return 10000f;
		}
		CH47AIBrain component = brain.GetComponent<CH47AIBrain>();
		if (component != null)
		{
			if (!(component.age > 600f))
			{
				return 0f;
			}
			return 10000f;
		}
		return 0f;
	}

	public override void StateEnter()
	{
		brain.GetEntity().EnableFacingOverride(enabled: false);
		Transform transform = brain.GetEntity().transform;
		Rigidbody rigidBody = brain.GetEntity().rigidBody;
		Vector3 rhs = ((rigidBody.velocity.magnitude < 0.1f) ? transform.forward : rigidBody.velocity.normalized);
		Vector3 vector = Vector3.Cross(Vector3.Cross(transform.up, rhs), Vector3.up);
		brain.mainInterestPoint = transform.position + vector * 8000f;
		brain.mainInterestPoint.y = 90f;
		brain.GetEntity().SetMoveTarget(brain.mainInterestPoint);
		base.StateEnter();
	}

	public override void StateThink(float delta)
	{
		base.StateThink(delta);
		if (!killing)
		{
			brain.GetEntity().SetMoveTarget(brain.mainInterestPoint);
			if (TimeInState() > 300f)
			{
				brain.GetEntity().Invoke("DelayedKill", 2f);
				killing = true;
			}
		}
	}

	public override void StateLeave()
	{
		base.StateLeave();
	}
}
