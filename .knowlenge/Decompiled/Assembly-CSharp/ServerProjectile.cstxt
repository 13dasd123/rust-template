using UnityEngine;

public class ServerProjectile : EntityComponent<BaseEntity>, IServerComponent
{
	public Vector3 initialVelocity;

	public float drag;

	public float gravityModifier = 1f;

	public float speed = 15f;

	public float scanRange;

	private Vector3 _currentVelocity = Vector3.zero;

	private void Update()
	{
		if (base.baseEntity.isServer)
		{
			DoMovement();
		}
	}

	public void DoMovement()
	{
		_currentVelocity += Physics.gravity * gravityModifier * Time.deltaTime * Time.timeScale;
		float num = _currentVelocity.magnitude * Time.deltaTime;
		if (GamePhysics.Trace(new Ray(base.transform.position, _currentVelocity.normalized), 0f, out var hitInfo, num + scanRange, 1101212417))
		{
			BaseEntity entity = RaycastHitEx.GetEntity(hitInfo);
			if (!entity.IsValid() || !base.baseEntity.creatorEntity.IsValid() || entity.net.ID != base.baseEntity.creatorEntity.net.ID)
			{
				base.transform.position += base.transform.forward * hitInfo.distance;
				SendMessage("ProjectileImpact", hitInfo, SendMessageOptions.DontRequireReceiver);
				return;
			}
		}
		base.transform.position += base.transform.forward * num;
		base.transform.rotation = Quaternion.LookRotation(_currentVelocity.normalized);
	}

	public void InitializeVelocity(Vector3 overrideVel)
	{
		Vector3 normalized = overrideVel.normalized;
		base.transform.rotation = Quaternion.LookRotation(normalized);
		initialVelocity = normalized * speed;
		_currentVelocity = normalized * speed;
	}
}
