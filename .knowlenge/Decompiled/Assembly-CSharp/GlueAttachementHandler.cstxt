using UnityEngine;

private class GlueAttachementHandler
{
	public class LegTransitionAnimation
	{
		private enum EMoveType
		{
			FromAnimation,
			FromLastAttachement
		}

		private GlueAttachementHandler handler;

		public float LegAdjustementYOffset;

		public float LegAdjustementFootAngleOffset;

		private Vector3 _legSpherizeLocalVector = Vector3.zero;

		private float _legMoveDurMul = 1f;

		private Quaternion baseRotationOnStepUp;

		public float legMoveDistanceFactor;

		private float sd_trProgress;

		private Vector3 previousPositionLocal;

		private Vector3 previousPositionWorld;

		private Quaternion previousRotationWorld;

		private Vector3 lastAppliedGluePosition;

		private Vector3 lastAppliedGluePositionLocal;

		private Quaternion lastAppliedGlueRotation;

		private float lastSpeedup;

		private EMoveType animationMoveType;

		private bool _instantTransition;

		private bool _wasAnimatingLeg;

		private LegsAnimator Owner => handler.Owner;

		private Leg leg => handler.leg;

		public bool duringLegAdjustMovement { get; private set; }

		public bool wasAttaching { get; private set; }

		public bool attached { get; private set; }

		public float transitionProgress { get; private set; }

		public float lastAttachCompleteTime { get; private set; }

		public float transitionProgressLastFrame { get; private set; }

		public EGlueMode LastAnimationGlueMode
		{
			get
			{
				if (animationMoveType != 0)
				{
					return EGlueMode.Idle;
				}
				return EGlueMode.Moving;
			}
		}

		public LegTransitionAnimation(GlueAttachementHandler glueTransitionHelper)
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			handler = glueTransitionHelper;
			Reset();
		}

		public void Reset()
		{
			//IL_0029: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0049: Unknown result type (might be due to invalid IL or missing references)
			//IL_004e: Unknown result type (might be due to invalid IL or missing references)
			animationMoveType = EMoveType.FromAnimation;
			transitionProgress = 0f;
			transitionProgressLastFrame = 0f;
			baseRotationOnStepUp = Owner.BaseTransform.rotation;
			duringLegAdjustMovement = false;
			wasAttaching = false;
			attached = false;
			_legSpherizeLocalVector = Vector3.zero;
			ReInitialize();
		}

		public void ReInitialize()
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0018: Unknown result type (might be due to invalid IL or missing references)
			//IL_001d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0029: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_003a: Unknown result type (might be due to invalid IL or missing references)
			//IL_003f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0051: Unknown result type (might be due to invalid IL or missing references)
			//IL_0056: Unknown result type (might be due to invalid IL or missing references)
			//IL_005b: Unknown result type (might be due to invalid IL or missing references)
			lastAppliedGluePosition = leg._SourceIKPos;
			lastAppliedGlueRotation = leg._SourceIKRot;
			previousPositionWorld = leg._SourceIKPos;
			previousRotationWorld = leg._SourceIKRot;
			previousPositionLocal = leg.ToRootLocalSpace(leg._SourceIKPos);
		}

		internal void ScheduleInstantTransition()
		{
			_instantTransition = true;
		}

		internal void DoAttaching(bool canAttach)
		{
			if (canAttach != wasAttaching)
			{
				wasAttaching = canAttach;
				if (canAttach)
				{
					OnChangeTargetPosition();
				}
				else
				{
					attached = false;
					if (transitionProgress != 0f)
					{
						OnChangeTargetPosition();
					}
				}
			}
			if (duringLegAdjustMovement && transitionProgress >= 1f)
			{
				duringLegAdjustMovement = false;
			}
		}

		internal Vector3 EnsureAnkleNotOverlappingGroundLevel(Vector3 legAnimPos)
		{
			//IL_0099: Unknown result type (might be due to invalid IL or missing references)
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_0024: Unknown result type (might be due to invalid IL or missing references)
			//IL_0029: Unknown result type (might be due to invalid IL or missing references)
			//IL_0042: Unknown result type (might be due to invalid IL or missing references)
			//IL_0047: Unknown result type (might be due to invalid IL or missing references)
			//IL_006a: Unknown result type (might be due to invalid IL or missing references)
			//IL_005d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0070: Unknown result type (might be due to invalid IL or missing references)
			//IL_0076: Unknown result type (might be due to invalid IL or missing references)
			//IL_006f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0080: Unknown result type (might be due to invalid IL or missing references)
			//IL_0091: Unknown result type (might be due to invalid IL or missing references)
			//IL_0092: Unknown result type (might be due to invalid IL or missing references)
			//IL_0097: Unknown result type (might be due to invalid IL or missing references)
			if (leg.A_PreWasAligning && leg.A_WasAligningFrameBack)
			{
				Vector3 val = Owner.ToRootLocalSpace(legAnimPos);
				Vector3 val2 = ((!(Owner.SmoothSuddenSteps < 0.0001f)) ? (leg.A_WasSmoothing ? leg.A_LastSmoothTargetedPosLocal : leg.ankleAlignedOnGroundHitRootLocal) : leg.ankleAlignedOnGroundHitRootLocal);
				if (val.y < val2.y)
				{
					val.y = val2.y;
					legAnimPos = Owner.RootToWorldSpace(val);
				}
			}
			return legAnimPos;
		}

		public Vector3 CalculateAnimatedLegPosition(Vector3 a, Vector3 b)
		{
			//IL_000c: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Unknown result type (might be due to invalid IL or missing references)
			//IL_001f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0024: Unknown result type (might be due to invalid IL or missing references)
			//IL_0056: Unknown result type (might be due to invalid IL or missing references)
			//IL_0063: Unknown result type (might be due to invalid IL or missing references)
			//IL_006b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0078: Unknown result type (might be due to invalid IL or missing references)
			//IL_007d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0082: Unknown result type (might be due to invalid IL or missing references)
			//IL_0087: Unknown result type (might be due to invalid IL or missing references)
			//IL_012a: Unknown result type (might be due to invalid IL or missing references)
			LegStepAnimatingParameters legAnimatingSettings = leg.LegAnimatingSettings;
			Vector3 val = Vector3.LerpUnclamped(a, b, legAnimatingSettings.MoveToGoalCurve.Evaluate(transitionProgress));
			if (legAnimatingSettings.SpherizeTrack.length > 1)
			{
				float num = legAnimatingSettings.SpherizeTrack.Evaluate(transitionProgress) * legAnimatingSettings.SpherizePower * Owner.BaseTransform.lossyScale.x;
				val += leg.RootSpaceToWorldVec(_legSpherizeLocalVector * (num * 12f));
			}
			if (Owner.AnimateFeet)
			{
				LegAdjustementFootAngleOffset = legAnimatingSettings.FootRotationCurve.Evaluate(transitionProgress) * 90f * Mathf.Min(0.5f, legMoveDistanceFactor * 1.1f);
				LegAdjustementFootAngleOffset /= lastSpeedup;
			}
			float num2 = Owner.ScaleReferenceNoScale * 0.75f;
			float num3 = Mathf.Lerp(legAnimatingSettings.MinFootRaise, legAnimatingSettings.MaxFootRaise, legMoveDistanceFactor);
			num3 *= num2;
			LegAdjustementYOffset = num3 * legAnimatingSettings.RaiseYAxisCurve.Evaluate(transitionProgress);
			_wasAnimatingLeg = true;
			return val;
		}

		internal Vector3 GetTargetPosition()
		{
			//IL_0122: Unknown result type (might be due to invalid IL or missing references)
			//IL_0127: Unknown result type (might be due to invalid IL or missing references)
			//IL_0107: Unknown result type (might be due to invalid IL or missing references)
			//IL_010c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0111: Unknown result type (might be due to invalid IL or missing references)
			//IL_0038: Unknown result type (might be due to invalid IL or missing references)
			//IL_003d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0042: Unknown result type (might be due to invalid IL or missing references)
			//IL_0026: Unknown result type (might be due to invalid IL or missing references)
			//IL_002b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0138: Unknown result type (might be due to invalid IL or missing references)
			//IL_0144: Unknown result type (might be due to invalid IL or missing references)
			//IL_0149: Unknown result type (might be due to invalid IL or missing references)
			//IL_0154: Unknown result type (might be due to invalid IL or missing references)
			//IL_0159: Unknown result type (might be due to invalid IL or missing references)
			//IL_0135: Unknown result type (might be due to invalid IL or missing references)
			//IL_011f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0050: Unknown result type (might be due to invalid IL or missing references)
			//IL_0177: Unknown result type (might be due to invalid IL or missing references)
			//IL_017e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0183: Unknown result type (might be due to invalid IL or missing references)
			//IL_0188: Unknown result type (might be due to invalid IL or missing references)
			//IL_016d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0172: Unknown result type (might be due to invalid IL or missing references)
			//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
			//IL_0068: Unknown result type (might be due to invalid IL or missing references)
			//IL_006d: Unknown result type (might be due to invalid IL or missing references)
			//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
			//IL_01a9: Unknown result type (might be due to invalid IL or missing references)
			//IL_01b6: Unknown result type (might be due to invalid IL or missing references)
			//IL_01bb: Unknown result type (might be due to invalid IL or missing references)
			//IL_01bd: Unknown result type (might be due to invalid IL or missing references)
			//IL_0197: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e0: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
			//IL_00de: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
			//IL_008e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0093: Unknown result type (might be due to invalid IL or missing references)
			//IL_0098: Unknown result type (might be due to invalid IL or missing references)
			float glueAnimationBlend = handler.glueAnimationBlend;
			if (animationMoveType == EMoveType.FromAnimation)
			{
				if (glueAnimationBlend < 0.0001f)
				{
					return Owner.RootToWorldSpace(previousPositionLocal);
				}
				Vector3 val = Owner.RootToWorldSpace(previousPositionLocal);
				if (transitionProgress < 0.0001f)
				{
					return val;
				}
				Vector3 val2 = ((!attached) ? leg.ankleAlignedOnGroundHitWorldPos : ((glueAnimationBlend > 0.9995f) ? leg._GlueLastAttachPosition : ((!leg.Owner.OnlyLocalAnimation) ? Vector3.LerpUnclamped(leg.RootSpaceToWorld(leg._GlueLastAttachPositionRootLocal), leg._GlueLastAttachPosition, glueAnimationBlend) : leg.RootSpaceToWorld(leg._GlueLastAttachPositionRootLocal))));
				if (transitionProgress > 0.9995f)
				{
					return val2;
				}
				return Vector3.LerpUnclamped(val, val2, transitionProgress);
			}
			Vector3 val3;
			if (leg.Owner.OnlyLocalAnimation)
			{
				val3 = Owner.RootToWorldSpace(previousPositionLocal);
				if (transitionProgress < 0.0001f)
				{
					return val3;
				}
			}
			else
			{
				val3 = previousPositionWorld;
				if (transitionProgress < 0.0001f)
				{
					return val3;
				}
				val3 = Vector3.LerpUnclamped(previousPositionWorld, Owner.RootToWorldSpace(previousPositionLocal), transitionProgress);
			}
			Vector3 val4 = ((!(transitionProgress > 0.9995f)) ? CalculateAnimatedLegPosition(val3, leg.ankleAlignedOnGroundHitWorldPos) : leg._GlueLastAttachPosition);
			if (transitionProgress >= 1f)
			{
				return val4;
			}
			float num = 1f - transitionProgress;
			return Vector3.LerpUnclamped(val3, val4, 1f - num * num);
		}

		internal void RequireRepose()
		{
			if (attached)
			{
				attached = false;
				OnChangeTargetPosition();
			}
		}

		internal Quaternion GetTargetRotation()
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0015: Unknown result type (might be due to invalid IL or missing references)
			//IL_0016: Unknown result type (might be due to invalid IL or missing references)
			//IL_0034: Unknown result type (might be due to invalid IL or missing references)
			//IL_0039: Unknown result type (might be due to invalid IL or missing references)
			//IL_0026: Unknown result type (might be due to invalid IL or missing references)
			//IL_002b: Unknown result type (might be due to invalid IL or missing references)
			//IL_004b: Unknown result type (might be due to invalid IL or missing references)
			//IL_004c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0053: Unknown result type (might be due to invalid IL or missing references)
			//IL_0058: Unknown result type (might be due to invalid IL or missing references)
			//IL_0047: Unknown result type (might be due to invalid IL or missing references)
			//IL_0048: Unknown result type (might be due to invalid IL or missing references)
			//IL_0059: Unknown result type (might be due to invalid IL or missing references)
			Quaternion val = previousRotationWorld;
			if (transitionProgress < 0.001f)
			{
				return val;
			}
			Quaternion val2 = ((!attached) ? leg.ankleAlignedOnGroundHitRotation : leg._GlueLastAttachRotation);
			if (transitionProgress > 0.9995f)
			{
				return val2;
			}
			return Quaternion.LerpUnclamped(val, val2, transitionProgress);
		}

		internal void OnChangeTargetPosition()
		{
			//IL_0022: Unknown result type (might be due to invalid IL or missing references)
			//IL_0027: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ee: Unknown result type (might be due to invalid IL or missing references)
			//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
			//IL_0100: Unknown result type (might be due to invalid IL or missing references)
			//IL_0105: Unknown result type (might be due to invalid IL or missing references)
			//IL_010a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0141: Unknown result type (might be due to invalid IL or missing references)
			//IL_0146: Unknown result type (might be due to invalid IL or missing references)
			//IL_014d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0152: Unknown result type (might be due to invalid IL or missing references)
			//IL_0153: Unknown result type (might be due to invalid IL or missing references)
			//IL_0158: Unknown result type (might be due to invalid IL or missing references)
			//IL_0197: Unknown result type (might be due to invalid IL or missing references)
			//IL_019c: Unknown result type (might be due to invalid IL or missing references)
			//IL_019d: Unknown result type (might be due to invalid IL or missing references)
			//IL_01a4: Unknown result type (might be due to invalid IL or missing references)
			//IL_01a9: Unknown result type (might be due to invalid IL or missing references)
			//IL_01ae: Unknown result type (might be due to invalid IL or missing references)
			//IL_0247: Unknown result type (might be due to invalid IL or missing references)
			//IL_024c: Unknown result type (might be due to invalid IL or missing references)
			//IL_01f0: Unknown result type (might be due to invalid IL or missing references)
			//IL_01f7: Unknown result type (might be due to invalid IL or missing references)
			//IL_01fc: Unknown result type (might be due to invalid IL or missing references)
			//IL_0201: Unknown result type (might be due to invalid IL or missing references)
			//IL_0211: Unknown result type (might be due to invalid IL or missing references)
			//IL_0213: Unknown result type (might be due to invalid IL or missing references)
			//IL_0223: Unknown result type (might be due to invalid IL or missing references)
			//IL_022d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0232: Unknown result type (might be due to invalid IL or missing references)
			handler.lasGlueModeOnAttaching = Owner._glueModeExecuted;
			baseRotationOnStepUp = Owner.BaseTransform.rotation;
			if (handler.glueAnimationBlend < 0.2f)
			{
				animationMoveType = EMoveType.FromAnimation;
			}
			else if (handler.lasGlueModeOnAttaching == EGlueMode.Moving)
			{
				animationMoveType = EMoveType.FromAnimation;
			}
			else if (animationMoveType == EMoveType.FromLastAttachement)
			{
				animationMoveType = EMoveType.FromLastAttachement;
			}
			else if (handler.glueAnimationBlend > 0.75f)
			{
				if (transitionProgress < 0.1f || transitionProgress > 0.9f)
				{
					animationMoveType = EMoveType.FromLastAttachement;
				}
				else
				{
					animationMoveType = EMoveType.FromAnimation;
				}
			}
			else
			{
				animationMoveType = EMoveType.FromAnimation;
			}
			if (leg.Owner.OnlyLocalAnimation)
			{
				previousPositionWorld = leg.RootSpaceToWorld(lastAppliedGluePositionLocal);
			}
			else
			{
				previousPositionWorld = lastAppliedGluePosition;
			}
			previousRotationWorld = lastAppliedGlueRotation;
			previousPositionLocal = Owner.ToRootLocalSpace(previousPositionWorld);
			if (animationMoveType == EMoveType.FromLastAttachement)
			{
				if (!(transitionProgress > 0.1f) || !(transitionProgress < 0.9f))
				{
					transitionProgress = 0f;
				}
				Vector3 val = previousPositionWorld;
				Vector3 val2 = leg.ankleAlignedOnGroundHitWorldPos - val;
				float magnitude = ((Vector3)(ref val2)).magnitude;
				legMoveDistanceFactor = magnitude / (Owner.ScaleReference * 0.6f);
				legMoveDistanceFactor = Mathf.Clamp(legMoveDistanceFactor, 0.05f, 1f);
				Vector3 val3 = ((Vector3)(ref val2)).normalized;
				val3 = Vector3.ProjectOnPlane(val3, Owner.Up);
				((Vector3)(ref val3)).Normalize();
				leg.SendRaiseEvent(magnitude);
				if (legMoveDistanceFactor > 0.0401f)
				{
					_legMoveDurMul = Mathf.Lerp(1.55f, 0.85f, legMoveDistanceFactor * 2f);
					Vector3 worldDir = Vector3.Cross(val3, Owner.Up);
					((Vector3)(ref worldDir)).Normalize();
					_legSpherizeLocalVector = leg.ToRootLocalSpaceDir(worldDir) * Owner.ScaleReferenceNoScale * -0.03f;
					duringLegAdjustMovement = true;
				}
				else
				{
					animationMoveType = EMoveType.FromAnimation;
					_legSpherizeLocalVector = Vector3.zero;
					duringLegAdjustMovement = false;
				}
			}
			else
			{
				duringLegAdjustMovement = false;
				transitionProgress = 0f;
			}
		}

		public void UpdateAnimation()
		{
			//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
			//IL_00eb: Unknown result type (might be due to invalid IL or missing references)
			//IL_0201: Unknown result type (might be due to invalid IL or missing references)
			//IL_0211: Unknown result type (might be due to invalid IL or missing references)
			//IL_011a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0107: Unknown result type (might be due to invalid IL or missing references)
			//IL_010c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0111: Unknown result type (might be due to invalid IL or missing references)
			//IL_0192: Unknown result type (might be due to invalid IL or missing references)
			//IL_0197: Unknown result type (might be due to invalid IL or missing references)
			//IL_01a3: Unknown result type (might be due to invalid IL or missing references)
			//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
			//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
			float num = (Owner.JustGrounded ? 0.2f : 1f);
			float num2 = (Owner.JustGrounded ? 5f : 1f);
			transitionProgressLastFrame = transitionProgress;
			if (_instantTransition)
			{
				_instantTransition = false;
				transitionProgress = 1f;
				lastAttachCompleteTime = Time.time;
			}
			if (!Owner.IsGrounded)
			{
				return;
			}
			if (animationMoveType == EMoveType.FromLastAttachement)
			{
				float num3 = 1f / (leg.LegAnimatingSettings.StepMoveDuration * 0.8f);
				float num4 = 1f;
				lastSpeedup = 1f;
				if (leg.LegAnimatingSettings.AllowSpeedups > 0f)
				{
					if (leg.hasOppositeleg)
					{
						Leg oppositeLeg = leg.GetOppositeLeg();
						Vector3 targetPos = oppositeLeg._PreviousFinalIKPos;
						if (leg.Owner.OnlyLocalAnimation)
						{
							targetPos = leg.RootSpaceToWorld(oppositeLeg._PreviousFinalIKPosRootLocal);
						}
						float stretchValue = oppositeLeg.IKProcessor.GetStretchValue(targetPos);
						if (stretchValue > leg.LegStretchLimit * 0.95f)
						{
							float num5 = (stretchValue - leg.LegStretchLimit * 0.95f) * 2f;
							if (num5 < 0f)
							{
								num5 = 0f;
							}
							num4 += num5;
						}
						if (!oppositeLeg._UsingCustomRaycast && oppositeLeg.G_AttachementHandler.legMoveAnimation.attached)
						{
							Vector3 val = leg.RootSpaceToWorld(oppositeLeg.AnkleH.LastKeyframeRootPos) - oppositeLeg.G_Attachement.GetRelevantHitPoint();
							float magnitude = ((Vector3)(ref val)).magnitude;
							float num6 = Owner.ScaleReference * 0.4f;
							if (magnitude > num6)
							{
								float num7 = magnitude - num6;
								num4 += num7 / num6 * 2f;
							}
						}
					}
					if (leg.LegAnimatingSettings.AllowSpeedups > 0.25f)
					{
						float num8 = Quaternion.Angle(baseRotationOnStepUp, Owner.BaseTransform.rotation);
						if (num8 > 12f)
						{
							float num9 = Mathf.InverseLerp(30f, 135f, num8);
							num9 = Mathf.LerpUnclamped(0.5f, 2f, num9) * (0.4f + leg.LegAnimatingSettings.AllowSpeedups * 0.6f);
							transitionProgress += Owner.DeltaTime * num9 * num2;
						}
					}
					num4 = Mathf.LerpUnclamped(1f, num4, leg.LegAnimatingSettings.AllowSpeedups);
				}
				lastSpeedup = num4;
				transitionProgress = Mathf.MoveTowards(transitionProgress, 1f, num3 * num4 * _legMoveDurMul * leg.LegMoveSpeedMultiplier * Owner.DeltaTime * num2);
				if (transitionProgress > 0.9995f && duringLegAdjustMovement)
				{
					TriggerAttach();
				}
			}
			else if (transitionProgress > 0.9995f && handler.glueAnimationBlend > 0.95f)
			{
				TriggerAttach();
			}
			else
			{
				transitionProgress = Mathf.SmoothDamp(transitionProgress, 1.001f, ref sd_trProgress, (0.01f + Mathf.LerpUnclamped(0.225f, 0.01f, wasAttaching ? Owner.GlueFadeInSpeed : Owner.GlueFadeOutSpeed)) * num, 10000000f, Owner.DeltaTime);
			}
		}

		private void TriggerAttach()
		{
			if (!attached)
			{
				transitionProgress = 1f;
				lastAttachCompleteTime = Time.time;
				attached = leg.Glue_TriggerFinalAttach();
				duringLegAdjustMovement = false;
			}
		}

		public void PostUpdate()
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0019: Unknown result type (might be due to invalid IL or missing references)
			//IL_001e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_002f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0034: Unknown result type (might be due to invalid IL or missing references)
			lastAppliedGluePosition = leg._GluePosition;
			lastAppliedGluePositionLocal = leg.ToRootLocalSpace(lastAppliedGluePosition);
			lastAppliedGlueRotation = leg._GlueRotation;
			if (!_wasAnimatingLeg)
			{
				LegAdjustementFootAngleOffset = Mathf.MoveTowards(LegAdjustementFootAngleOffset, 0f, leg.DeltaTime * 20f);
				LegAdjustementYOffset = Mathf.MoveTowards(LegAdjustementYOffset, 0f, leg.DeltaTime * 20f);
			}
			else
			{
				_wasAnimatingLeg = false;
			}
		}
	}

	private LegsAnimator Owner;

	private Leg ParentLeg;

	private float _sd_glueAnimationBlend;

	private bool _instantTransition;

	private Vector3 lastGluePosition = Vector3.zero;

	private Quaternion lastGlueRotation = Quaternion.identity;

	public LegTransitionAnimation legMoveAnimation { get; private set; }

	private Leg leg => ParentLeg;

	public float glueAnimationBlend { get; private set; }

	public float attachTransitionProgress => legMoveAnimation.transitionProgress;

	public float attachTransitionProgressLastFrame => legMoveAnimation.transitionProgressLastFrame;

	public float legMoveDistanceFactor => legMoveAnimation.legMoveDistanceFactor;

	public EGlueMode lasGlueModeOnAttaching { get; private set; }

	public GlueAttachementHandler(Leg leg)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		ParentLeg = leg;
		Owner = leg.Owner;
		legMoveAnimation = new LegTransitionAnimation(this);
		lasGlueModeOnAttaching = Owner._glueModeExecuted;
		Reset(initializing: true);
	}

	public void Reset(bool initializing)
	{
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		glueAnimationBlend = 0f;
		_sd_glueAnimationBlend = 0f;
		if (initializing)
		{
			lastGluePosition = leg.BoneEnd.position;
			lastGlueRotation = leg.BoneEnd.rotation;
		}
		legMoveAnimation.Reset();
	}

	public void SheduleInstantTransition()
	{
		_instantTransition = true;
		legMoveAnimation.ScheduleInstantTransition();
	}

	public void TransitionToGlueAnimation()
	{
		legMoveAnimation.DoAttaching(canAttach: true);
		ChangeGlueAnimationBlendTo(1f, Owner.GlueFadeInSpeed);
	}

	public void TransitionToDisableGlueAnimation()
	{
		legMoveAnimation.DoAttaching(canAttach: false);
		ChangeGlueAnimationBlendTo(0f, Owner.GlueFadeOutSpeed);
	}

	public Vector3 GetGluePosition()
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		if (glueAnimationBlend > 0.9995f)
		{
			lastGluePosition = legMoveAnimation.GetTargetPosition();
		}
		else if (glueAnimationBlend < 0.0001f)
		{
			lastGluePosition = leg.A_PreIKPosForGluing;
		}
		else
		{
			lastGluePosition = Vector3.LerpUnclamped(leg.A_PreIKPosForGluing, legMoveAnimation.GetTargetPosition(), glueAnimationBlend);
		}
		return lastGluePosition;
	}

	public Quaternion GetGlueRotation()
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		if (glueAnimationBlend > 0.999f)
		{
			lastGlueRotation = legMoveAnimation.GetTargetRotation();
		}
		else if (glueAnimationBlend < 0f)
		{
			lastGlueRotation = leg._FinalIKRot;
		}
		else
		{
			lastGlueRotation = Quaternion.LerpUnclamped(leg._FinalIKRot, legMoveAnimation.GetTargetRotation(), glueAnimationBlend);
		}
		return lastGlueRotation;
	}

	public void UpdateTransitioning(bool attaching)
	{
		legMoveAnimation.UpdateAnimation();
	}

	public void PostUpdate()
	{
		legMoveAnimation.PostUpdate();
	}

	internal void OnLegRequireRepose()
	{
		legMoveAnimation.RequireRepose();
	}

	private void ChangeGlueAnimationBlendTo(float target, float speed)
	{
		if (Owner.GroundedTime < 0f)
		{
			speed = 0.99f;
		}
		if (_instantTransition && target > 0f)
		{
			glueAnimationBlend = target;
			_instantTransition = false;
			return;
		}
		if (speed >= 1f)
		{
			glueAnimationBlend = target;
			return;
		}
		if (leg.G_JustLanded)
		{
			glueAnimationBlend = Mathf.MoveTowards(glueAnimationBlend, target, Owner.DeltaTime * 3f);
		}
		glueAnimationBlend = Mathf.SmoothDamp(glueAnimationBlend, target, ref _sd_glueAnimationBlend, Mathf.LerpUnclamped(0.2f, 0.005f, speed), 100000f, Owner.DeltaTime);
		if (float.IsNaN(_sd_glueAnimationBlend))
		{
			_sd_glueAnimationBlend = 0f;
		}
	}
}
