using System.Collections;
using Apex.Ai.HTN;
using Apex.Serialization;
using UnityEngine;

public class NPCTurretHoldItemOfType : OperatorBase<NPCTurretContext>
{
	[ApexSerialization]
	private ItemType _item;

	[ApexSerialization]
	private float _switchTime = 0.2f;

	public override void Execute(NPCTurretContext context)
	{
		SwitchToItem(context, _item);
		context.Body.StartCoroutine(WaitAsync(context));
	}

	public override OperatorStateType Tick(NPCTurretContext context, PrimitiveTaskSelector task)
	{
		if (context.IsFact(Facts.IsWaiting))
		{
			return OperatorStateType.Running;
		}
		ApplyExpectedEffects(context, task);
		return OperatorStateType.Complete;
	}

	private IEnumerator WaitAsync(NPCTurretContext context)
	{
		context.SetFact(Facts.IsWaiting, value: true);
		yield return CoroutineEx.waitForSeconds(_switchTime);
		context.SetFact(Facts.IsWaiting, value: false);
	}

	public override void Abort(NPCTurretContext context, PrimitiveTaskSelector task)
	{
		_item = (ItemType)context.GetPreviousFact(Facts.HeldItemType);
		SwitchToItem(context, _item);
		context.SetFact(Facts.IsWaiting, value: false);
	}

	public static void SwitchToItem(NPCTurretContext context, ItemType _item)
	{
		context.Body.inventory.AllItemsNoAlloc(ref BaseNpcContext.InventoryLookupCache);
		foreach (Item item in BaseNpcContext.InventoryLookupCache)
		{
			if (_item == ItemType.HealingItem && item.info.category == ItemCategory.Medical && item.CanBeHeld())
			{
				context.Body.UpdateActiveItem(item.uid);
				context.SetFact(Facts.HeldItemType, _item);
				break;
			}
			if (_item == ItemType.MeleeWeapon && item.info.category == ItemCategory.Weapon && item.GetHeldEntity() is BaseMelee)
			{
				context.Body.UpdateActiveItem(item.uid);
				context.SetFact(Facts.HeldItemType, _item);
				break;
			}
			if (_item == ItemType.ProjectileWeapon && item.info.category == ItemCategory.Weapon && item.GetHeldEntity() is BaseProjectile)
			{
				context.Body.UpdateActiveItem(item.uid);
				context.SetFact(Facts.HeldItemType, _item);
				break;
			}
			if (_item == ItemType.ThrowableWeapon && item.info.category == ItemCategory.Weapon && item.GetHeldEntity() is ThrownWeapon)
			{
				context.Body.UpdateActiveItem(item.uid);
				context.SetFact(Facts.HeldItemType, _item);
				break;
			}
			if (_item == ItemType.LightSourceItem && item.info.category == ItemCategory.Tool && item.CanBeHeld())
			{
				context.Body.UpdateActiveItem(item.uid);
				context.SetFact(Facts.HeldItemType, _item);
				break;
			}
			if (_item == ItemType.ResearchItem && item.info.category == ItemCategory.Tool && item.CanBeHeld())
			{
				context.Body.UpdateActiveItem(item.uid);
				context.SetFact(Facts.HeldItemType, _item);
				break;
			}
		}
	}
}
