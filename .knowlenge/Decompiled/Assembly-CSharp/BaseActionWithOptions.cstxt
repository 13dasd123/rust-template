using System.Collections.Generic;
using Apex.AI;
using Rust.Ai;

public abstract class BaseActionWithOptions<T> : ActionWithOptions<T>
{
	private string DebugName;

	public BaseActionWithOptions()
	{
		DebugName = GetType().Name;
	}

	public override void Execute(IAIContext context)
	{
		if (context is BaseContext context2)
		{
			DoExecute(context2);
		}
	}

	public abstract void DoExecute(BaseContext context);

	public bool TryGetBest(BaseContext context, IList<T> options, bool allScorersMustScoreAboveZero, out T best, out float bestScore)
	{
		bestScore = float.MinValue;
		best = default(T);
		foreach (T option in options)
		{
			float num = 0f;
			bool flag = true;
			foreach (IOptionScorer<T> scorer in base.scorers)
			{
				if (!scorer.isDisabled)
				{
					float num2 = scorer.Score(context, option);
					if (allScorersMustScoreAboveZero && num2 <= 0f)
					{
						flag = false;
						break;
					}
					num += num2;
				}
			}
			if (flag && num > bestScore)
			{
				bestScore = num;
				best = option;
			}
		}
		return best != null;
	}
}
