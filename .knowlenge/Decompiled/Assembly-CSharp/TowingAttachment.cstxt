using ConVar;
using UnityEngine;

public class TowingAttachment<TEntity> : TowingAttachment where TEntity : BaseEntity, ITowing
{
	private readonly TEntity _entity;

	private readonly TowConfig _towingConfig;

	private ConfigurableJoint _towingJoint;

	private EntityRef<BaseEntity> _otherEntity;

	private float _lastBreakingForce;

	private float _idealBreakingForce;

	public TowingAttachment(TEntity entity)
	{
		_entity = entity;
		_towingConfig = PrefabAttribute.server.Find<TowConfig>(_entity.prefabID);
	}

	public void FixedUpdate()
	{
		BaseEntity baseEntity = _otherEntity.Get(serverside: true);
		if (_entity.IsTowing && (!baseEntity.IsValid() || baseEntity.IsDestroyed || (Object)(object)_towingJoint == (Object)null))
		{
			Detach();
		}
		if (_entity.IsTowing)
		{
			MoveToNormalBreakForce();
		}
	}

	public void AttachTo<TTowableEntity>(TTowableEntity other) where TTowableEntity : ITowing
	{
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0109: Unknown result type (might be due to invalid IL or missing references)
		//IL_010e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0113: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0134: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_013d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0159: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0175: Unknown result type (might be due to invalid IL or missing references)
		//IL_017a: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_022e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0237: Unknown result type (might be due to invalid IL or missing references)
		//IL_0246: Unknown result type (might be due to invalid IL or missing references)
		//IL_0255: Unknown result type (might be due to invalid IL or missing references)
		//IL_025e: Unknown result type (might be due to invalid IL or missing references)
		//IL_026d: Unknown result type (might be due to invalid IL or missing references)
		//IL_027c: Unknown result type (might be due to invalid IL or missing references)
		//IL_028f: Unknown result type (might be due to invalid IL or missing references)
		//IL_029e: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02be: Unknown result type (might be due to invalid IL or missing references)
		if (_entity.IsTowing)
		{
			Detach();
		}
		if ((Object)(object)_towingJoint != (Object)null)
		{
			Object.Destroy((Object)(object)_towingJoint);
		}
		Rigidbody towBody = other.TowBody;
		BaseEntity towEntity = other.TowEntity;
		TowConfig towConfig = PrefabAttribute.server.Find<TowConfig>(towEntity.prefabID);
		if (towConfig == null)
		{
			Debug.LogError((object)"Attaching to towable without TowConfig", (Object)(object)towEntity);
			return;
		}
		TowConfig.Configuration configuration = _towingConfig.Combine(towConfig);
		_towingJoint = ((Component)_entity.TowBody).gameObject.AddComponent<ConfigurableJoint>();
		((Joint)_towingJoint).connectedBody = towBody;
		Matrix4x4 worldToLocalMatrix = ((Component)_entity.TowBody).transform.worldToLocalMatrix;
		((Joint)_towingJoint).autoConfigureConnectedAnchor = false;
		((Joint)_towingJoint).anchor = ((Matrix4x4)(ref worldToLocalMatrix)).MultiplyPoint3x4(_entity.TowAnchor.position);
		ConfigurableJoint towingJoint = _towingJoint;
		Vector3 val = ((Matrix4x4)(ref worldToLocalMatrix)).MultiplyVector(((Component)towBody).transform.right);
		((Joint)towingJoint).axis = ((Vector3)(ref val)).normalized;
		ConfigurableJoint towingJoint2 = _towingJoint;
		val = ((Matrix4x4)(ref worldToLocalMatrix)).MultiplyVector(((Component)towBody).transform.up);
		towingJoint2.secondaryAxis = ((Vector3)(ref val)).normalized;
		_towingJoint.swapBodies = false;
		Matrix4x4 worldToLocalMatrix2 = ((Component)towBody).transform.worldToLocalMatrix;
		((Joint)_towingJoint).connectedAnchor = ((Matrix4x4)(ref worldToLocalMatrix2)).MultiplyPoint3x4(other.TowAnchor.position);
		_towingJoint.xMotion = (ConfigurableJointMotion)1;
		_towingJoint.yMotion = (ConfigurableJointMotion)1;
		_towingJoint.zMotion = (ConfigurableJointMotion)1;
		ConfigurableJoint towingJoint3 = _towingJoint;
		SoftJointLimitSpring linearLimitSpring = default(SoftJointLimitSpring);
		((SoftJointLimitSpring)(ref linearLimitSpring)).spring = 100000f;
		((SoftJointLimitSpring)(ref linearLimitSpring)).damper = 100f;
		towingJoint3.linearLimitSpring = linearLimitSpring;
		ConfigurableJoint towingJoint4 = _towingJoint;
		SoftJointLimit val2 = default(SoftJointLimit);
		((SoftJointLimit)(ref val2)).limit = 0.2f;
		towingJoint4.linearLimit = val2;
		((Joint)_towingJoint).enableCollision = true;
		_towingJoint.angularXMotion = (ConfigurableJointMotion)1;
		_towingJoint.angularYMotion = (ConfigurableJointMotion)1;
		_towingJoint.angularZMotion = (ConfigurableJointMotion)1;
		ConfigurableJoint towingJoint5 = _towingJoint;
		val2 = default(SoftJointLimit);
		((SoftJointLimit)(ref val2)).limit = configuration.AngularLimitsX.x;
		towingJoint5.lowAngularXLimit = val2;
		ConfigurableJoint towingJoint6 = _towingJoint;
		val2 = default(SoftJointLimit);
		((SoftJointLimit)(ref val2)).limit = configuration.AngularLimitsX.y;
		towingJoint6.highAngularXLimit = val2;
		ConfigurableJoint towingJoint7 = _towingJoint;
		val2 = default(SoftJointLimit);
		((SoftJointLimit)(ref val2)).limit = configuration.AngularLimitY;
		towingJoint7.angularYLimit = val2;
		ConfigurableJoint towingJoint8 = _towingJoint;
		val2 = default(SoftJointLimit);
		((SoftJointLimit)(ref val2)).limit = configuration.AngularLimitZ;
		towingJoint8.angularZLimit = val2;
		_towingJoint.targetRotation = Quaternion.identity;
		_towingJoint.projectionMode = (JointProjectionMode)1;
		((Joint)_towingJoint).breakForce = 1E+20f;
		_lastBreakingForce = ((Joint)_towingJoint).breakForce;
		float num = Mathf.Min(_entity.TowBody.isKinematic ? 10000f : _entity.TowBody.mass, towBody.isKinematic ? 10000f : towBody.mass);
		_idealBreakingForce = num * Physics.towingmaxlinearaccelfromjoint;
		_otherEntity.Set(towEntity);
		_entity.SetFlag(BaseEntity.Flags.Reserved14, b: true);
		towEntity.SetFlag(BaseEntity.Flags.Reserved14, b: true);
		_entity.OnTowAttach();
		other.OnTowAttach();
	}

	public void Detach()
	{
		if ((Object)(object)_towingJoint != (Object)null)
		{
			Object.Destroy((Object)(object)_towingJoint);
		}
		_entity.SetFlag(BaseEntity.Flags.Reserved14, b: false);
		BaseEntity baseEntity = _otherEntity.Get(serverside: true);
		bool num = (Object)(object)baseEntity == (Object)null;
		if (!num)
		{
			baseEntity.SetFlag(BaseEntity.Flags.Reserved14, b: false);
		}
		_otherEntity = default(EntityRef<BaseEntity>);
		_entity.OnTowDetach();
		if (!num && baseEntity is ITowing towing)
		{
			towing.OnTowDetach();
		}
	}

	private void MoveToNormalBreakForce()
	{
		if (Mathf.Approximately(_lastBreakingForce, _idealBreakingForce))
		{
			if (!_towingJoint.swapBodies)
			{
				_towingJoint.swapBodies = true;
			}
		}
		else
		{
			float num = Mathf.Lerp(((Joint)_towingJoint).breakForce, _idealBreakingForce, Time.fixedDeltaTime * 10f);
			((Joint)_towingJoint).breakForce = num;
			_lastBreakingForce = num;
		}
	}
}
