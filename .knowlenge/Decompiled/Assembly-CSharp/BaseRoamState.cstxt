using UnityEngine;

public class BaseRoamState : BasicAIState
{
	private float nextRoamPositionTime = -1f;

	private float lastDestinationTime;

	public BaseRoamState()
		: base(AIState.Roam)
	{
	}

	public override float GetWeight()
	{
		return 0f;
	}

	public override void StateEnter(BaseAIBrain brain, BaseEntity entity)
	{
		base.StateEnter(brain, entity);
		nextRoamPositionTime = -1f;
		lastDestinationTime = Time.time;
	}

	public virtual Vector3 GetDestination()
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		return Vector3.zero;
	}

	public virtual Vector3 GetForwardDirection()
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		return Vector3.forward;
	}

	public virtual void SetDestination(Vector3 destination)
	{
	}

	public override void DrawGizmos()
	{
		base.DrawGizmos();
		brain.PathFinder.DebugDraw();
	}

	public virtual Vector3 GetRoamAnchorPosition()
	{
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		if (brain.Navigator.MaxRoamDistanceFromHome > -1f)
		{
			return brain.Events.Memory.Position.Get(4);
		}
		return ((Component)brain.GetBaseEntity()).transform.position;
	}

	public override StateStatus StateThink(float delta, BaseAIBrain brain, BaseEntity entity)
	{
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0100: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0146: Unknown result type (might be due to invalid IL or missing references)
		//IL_0128: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0134: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_014b: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		base.StateThink(delta, brain, entity);
		bool flag = Time.time - lastDestinationTime > 25f;
		if ((Vector3.Distance(GetDestination(), ((Component)entity).transform.position) < 2f || flag) && nextRoamPositionTime == -1f)
		{
			nextRoamPositionTime = Time.time + Random.Range(5f, 10f);
		}
		if (nextRoamPositionTime != -1f && Time.time > nextRoamPositionTime)
		{
			AIMovePoint bestRoamPoint = brain.PathFinder.GetBestRoamPoint(GetRoamAnchorPosition(), entity.ServerPosition, GetForwardDirection(), brain.Navigator.MaxRoamDistanceFromHome, brain.Navigator.BestRoamPointMaxDistance);
			if (Object.op_Implicit((Object)(object)bestRoamPoint))
			{
				float num = Vector3.Distance(((Component)bestRoamPoint).transform.position, ((Component)entity).transform.position) / 1.5f;
				bestRoamPoint.SetUsedBy(entity, num + 11f);
			}
			lastDestinationTime = Time.time;
			Vector3 insideUnitSphere = Random.insideUnitSphere;
			insideUnitSphere.y = 0f;
			((Vector3)(ref insideUnitSphere)).Normalize();
			Vector3 destination = (((Object)(object)bestRoamPoint == (Object)null) ? ((Component)entity).transform.position : (((Component)bestRoamPoint).transform.position + insideUnitSphere * bestRoamPoint.radius));
			SetDestination(destination);
			nextRoamPositionTime = -1f;
		}
		return StateStatus.Running;
	}
}
