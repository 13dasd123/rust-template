using System.Collections.Generic;
using Apex.AI;
using Apex.Serialization;
using Rust.Ai.HTN;

public class PrimitiveTaskSelector : Selector, ITask
{
	[ApexSerialization]
	public string Name;

	[FriendlyName("Preconditions", "Requirements of state that must be in place for this task to be valid")]
	[ApexSerialization]
	private List<ICompositeScorer> _preconditions = new List<ICompositeScorer>(2);

	[MemberCategory(null, 10000)]
	[ApexSerialization]
	[FriendlyName("Effects", "The impact running this task will have on the world")]
	private List<ICompositeScorer> _effects = new List<ICompositeScorer>(2);

	public List<ICompositeScorer> Preconditions => _preconditions;

	public PrimitiveTaskAction PrimitiveTaskAction => base.defaultQualifier.action as PrimitiveTaskAction;

	public void Reset()
	{
	}

	public float Decompose(IAIContext context, ref List<PrimitiveTaskSelector> plan)
	{
		plan.Add(this);
		return 1f;
	}

	public override IQualifier Select(IAIContext context, IList<IQualifier> qualifiers, IDefaultQualifier defaultQualifier)
	{
		return defaultQualifier;
	}
}
