using System;
using System.Collections.Generic;
using Facepunch;
using Rust;
using UnityEngine;

public class DeployableSiegeExplosive : BaseCombatEntity, IIgniteable, ISplashable
{
	public GameObjectRef ExplosionEffect;

	public GameObjectRef ExplosionImpact;

	public Vector3 EffectOffset;

	public Transform ExplosionSpawnPoint;

	public const Flags Lit = Flags.Reserved1;

	public float MinimumFuseTime = 3f;

	public float MaximumFuseTime = 10f;

	public float NeighbourExplodeRadius = 2f;

	public override void OnDeployed(BaseEntity parent, BasePlayer deployedBy, Item fromItem)
	{
		base.OnDeployed(parent, deployedBy, fromItem);
		creatorEntity = deployedBy;
	}

	public override void Hurt(HitInfo info)
	{
		if (!base.isClient && !HasFlag(Flags.Reserved1))
		{
			info.damageTypes.ScaleAll(0f);
			base.Hurt(info);
			SetFlag(Flags.Reserved1, b: true);
			((FacepunchBehaviour)this).Invoke((Action)ActuallyExplode, Random.Range(MinimumFuseTime, MaximumFuseTime));
		}
	}

	public override void PostServerLoad()
	{
		base.PostServerLoad();
		if (HasFlag(Flags.Reserved1))
		{
			((FacepunchBehaviour)this).Invoke((Action)ActuallyExplode, Random.Range(MinimumFuseTime, MaximumFuseTime));
		}
	}

	private void ActuallyExplode()
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f4: Unknown result type (might be due to invalid IL or missing references)
		if (ExplosionEffect.isValid)
		{
			Vector3 position = ExplosionSpawnPoint.position;
			BaseEntity baseEntity = GameManager.server.CreateEntity(ExplosionEffect.resourcePath, position);
			ServerProjectile component = ((Component)baseEntity).GetComponent<ServerProjectile>();
			component.InitializeVelocity(Vector3.up);
			baseEntity.Spawn();
			TimedExplosive timedExplosive = default(TimedExplosive);
			if (((Component)component).TryGetComponent<TimedExplosive>(ref timedExplosive))
			{
				timedExplosive.creatorEntity = creatorEntity;
				timedExplosive.Explode();
			}
			if (ExplosionImpact.isValid)
			{
				Effect.server.Run(ExplosionImpact.resourcePath, position + EffectOffset);
			}
			PooledList<DeployableSiegeExplosive> val = Pool.Get<PooledList<DeployableSiegeExplosive>>();
			try
			{
				Vis.Entities(position, NeighbourExplodeRadius, (List<DeployableSiegeExplosive>)(object)val, 256, (QueryTriggerInteraction)2);
				foreach (DeployableSiegeExplosive item in (List<DeployableSiegeExplosive>)(object)val)
				{
					if (item.isServer && !item.HasFlag(Flags.Reserved1) && CanSee(position, item.ExplosionSpawnPoint.position))
					{
						item.Hurt(3f, DamageType.Heat, this);
					}
				}
			}
			finally
			{
				((IDisposable)val)?.Dispose();
			}
		}
		Kill();
	}

	public void Ignite(Vector3 fromPos)
	{
		SetFlag(Flags.Reserved1, b: true);
		((FacepunchBehaviour)this).Invoke((Action)ActuallyExplode, Random.Range(MinimumFuseTime, MaximumFuseTime));
	}

	public bool CanIgnite()
	{
		return !HasFlag(Flags.Reserved1);
	}

	public bool WantsSplash(ItemDefinition splashType, int amount)
	{
		return HasFlag(Flags.Reserved1);
	}

	public int DoSplash(ItemDefinition splashType, int amount)
	{
		SetFlag(Flags.Reserved1, b: false);
		((FacepunchBehaviour)this).CancelInvoke((Action)ActuallyExplode);
		return 0;
	}

	private void OnGroundMissing()
	{
		ActuallyExplode();
	}

	public override bool CanPickup(BasePlayer player)
	{
		if (!HasFlag(Flags.Reserved1))
		{
			return base.CanPickup(player);
		}
		return false;
	}
}
