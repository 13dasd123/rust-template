using System;
using ConVar;
using Network;
using Oxide.Core;
using UnityEngine;
using UnityEngine.Assertions;

public class Handcuffs : BaseMelee
{
	public static int PrisonerHoodItemID = -892718768;

	[ServerVar]
	public static float restrainedPushDamage = 5f;

	[ServerVar]
	public static float maxConditionRepairLossOnPush = 0.4f;

	[Header("Handcuffs")]
	public AnimatorOverrideController CaptiveHoldAnimationOverride;

	public GameObjectRef lockEffect;

	public GameObjectRef escapeEffect;

	[Header("Handcuff Behaviour")]
	public bool BlockInventory = true;

	public bool BlockSuicide = true;

	public bool BlockUse = true;

	public bool BlockCrafting = true;

	public float UnlockMiniGameDuration = 60f;

	public float UseDistance = 1.8f;

	public float ConditionLossPerSecond = 1f;

	private float unlockStartTime;

	private float startCondition;

	public bool Locked
	{
		get
		{
			if (GetItem() != null)
			{
				return GetItem().IsOn();
			}
			return false;
		}
	}

	public override bool OnRpcMessage(BasePlayer player, uint rpc, Message msg)
	{
		TimeWarning val = TimeWarning.New("Handcuffs.OnRpcMessage", 0);
		try
		{
			if (rpc == 695796023 && (Object)(object)player != (Object)null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log((object)("SV_RPCMessage: " + ((object)player)?.ToString() + " - RPC_ReqCancelUnlockMiniGame "));
				}
				TimeWarning val2 = TimeWarning.New("RPC_ReqCancelUnlockMiniGame", 0);
				try
				{
					TimeWarning val3 = TimeWarning.New("Conditions", 0);
					try
					{
						if (!RPC_Server.CallsPerSecond.Test(695796023u, "RPC_ReqCancelUnlockMiniGame", this, player, 5uL))
						{
							return true;
						}
						if (!RPC_Server.FromOwner.Test(695796023u, "RPC_ReqCancelUnlockMiniGame", this, player, includeMounted: false))
						{
							return true;
						}
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
					try
					{
						val3 = TimeWarning.New("Call", 0);
						try
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage rpc2 = rPCMessage;
							RPC_ReqCancelUnlockMiniGame(rpc2);
						}
						finally
						{
							((IDisposable)val3)?.Dispose();
						}
					}
					catch (Exception ex)
					{
						Debug.LogException(ex);
						player.Kick("RPC Error in RPC_ReqCancelUnlockMiniGame");
					}
				}
				finally
				{
					((IDisposable)val2)?.Dispose();
				}
				return true;
			}
			if (rpc == 3883360127u && (Object)(object)player != (Object)null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log((object)("SV_RPCMessage: " + ((object)player)?.ToString() + " - RPC_ReqCompleteUnlockMiniGame "));
				}
				TimeWarning val2 = TimeWarning.New("RPC_ReqCompleteUnlockMiniGame", 0);
				try
				{
					TimeWarning val3 = TimeWarning.New("Conditions", 0);
					try
					{
						if (!RPC_Server.CallsPerSecond.Test(3883360127u, "RPC_ReqCompleteUnlockMiniGame", this, player, 5uL))
						{
							return true;
						}
						if (!RPC_Server.FromOwner.Test(3883360127u, "RPC_ReqCompleteUnlockMiniGame", this, player, includeMounted: false))
						{
							return true;
						}
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
					try
					{
						val3 = TimeWarning.New("Call", 0);
						try
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage rpc3 = rPCMessage;
							RPC_ReqCompleteUnlockMiniGame(rpc3);
						}
						finally
						{
							((IDisposable)val3)?.Dispose();
						}
					}
					catch (Exception ex2)
					{
						Debug.LogException(ex2);
						player.Kick("RPC Error in RPC_ReqCompleteUnlockMiniGame");
					}
				}
				finally
				{
					((IDisposable)val2)?.Dispose();
				}
				return true;
			}
			if (rpc == 1571851761 && (Object)(object)player != (Object)null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log((object)("SV_RPCMessage: " + ((object)player)?.ToString() + " - RPC_ReqLock "));
				}
				TimeWarning val2 = TimeWarning.New("RPC_ReqLock", 0);
				try
				{
					TimeWarning val3 = TimeWarning.New("Conditions", 0);
					try
					{
						if (!RPC_Server.CallsPerSecond.Test(1571851761u, "RPC_ReqLock", this, player, 5uL))
						{
							return true;
						}
						if (!RPC_Server.FromOwner.Test(1571851761u, "RPC_ReqLock", this, player, includeMounted: false))
						{
							return true;
						}
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
					try
					{
						val3 = TimeWarning.New("Call", 0);
						try
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage rpc4 = rPCMessage;
							RPC_ReqLock(rpc4);
						}
						finally
						{
							((IDisposable)val3)?.Dispose();
						}
					}
					catch (Exception ex3)
					{
						Debug.LogException(ex3);
						player.Kick("RPC Error in RPC_ReqLock");
					}
				}
				finally
				{
					((IDisposable)val2)?.Dispose();
				}
				return true;
			}
			if (rpc == 3248381320u && (Object)(object)player != (Object)null)
			{
				Assert.IsTrue(player.isServer, "SV_RPC Message is using a clientside player!");
				if (Global.developer > 2)
				{
					Debug.Log((object)("SV_RPCMessage: " + ((object)player)?.ToString() + " - RPC_ReqStartUnlockMiniGame "));
				}
				TimeWarning val2 = TimeWarning.New("RPC_ReqStartUnlockMiniGame", 0);
				try
				{
					TimeWarning val3 = TimeWarning.New("Conditions", 0);
					try
					{
						if (!RPC_Server.CallsPerSecond.Test(3248381320u, "RPC_ReqStartUnlockMiniGame", this, player, 5uL))
						{
							return true;
						}
						if (!RPC_Server.FromOwner.Test(3248381320u, "RPC_ReqStartUnlockMiniGame", this, player, includeMounted: false))
						{
							return true;
						}
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
					try
					{
						val3 = TimeWarning.New("Call", 0);
						try
						{
							RPCMessage rPCMessage = default(RPCMessage);
							rPCMessage.connection = msg.connection;
							rPCMessage.player = player;
							rPCMessage.read = msg.read;
							RPCMessage rpc5 = rPCMessage;
							RPC_ReqStartUnlockMiniGame(rpc5);
						}
						finally
						{
							((IDisposable)val3)?.Dispose();
						}
					}
					catch (Exception ex4)
					{
						Debug.LogException(ex4);
						player.Kick("RPC Error in RPC_ReqStartUnlockMiniGame");
					}
				}
				finally
				{
					((IDisposable)val2)?.Dispose();
				}
				return true;
			}
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
		return base.OnRpcMessage(player, rpc, msg);
	}

	public override void Load(LoadInfo info)
	{
		base.Load(info);
		Item item = GetItem();
		if (base.isServer && item != null)
		{
			SetLocked(Locked);
		}
		SetWMLocked(Locked);
	}

	private void SetWMLocked(bool flag)
	{
	}

	private void StartUnlockMiniGame()
	{
		InterruptUnlockMiniGame();
		unlockStartTime = Time.realtimeSinceStartup;
	}

	public void HeldWhenOwnerDied(BasePlayer player)
	{
		if (Locked)
		{
			SetLocked(flag: false, player);
		}
	}

	public void SetLocked(bool flag, BasePlayer player = null, Item handcuffsItem = null)
	{
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		if (base.isClient)
		{
			return;
		}
		if (handcuffsItem == null)
		{
			handcuffsItem = GetOwnerItem();
		}
		handcuffsItem?.SetFlag(Item.Flag.IsOn, flag);
		if ((Object)(object)player == (Object)null)
		{
			player = GetOwnerPlayer();
		}
		if (!((Object)(object)player == (Object)null))
		{
			player.SetPlayerFlag(BasePlayer.PlayerFlags.IsRestrained, flag);
			if (handcuffsItem != null)
			{
				player.restraintItemId = (flag ? new ItemId?(handcuffsItem.uid) : ((ItemId?)null));
			}
			else
			{
				player.restraintItemId = null;
			}
			if (BlockInventory)
			{
				player.inventory.SetLockedByRestraint(flag);
			}
			ClientRPC(RpcTarget.Player("CL_SetLocked", player), Locked);
		}
	}

	[ServerVar]
	public static void togglecuffslocked(Arg args)
	{
		BasePlayer basePlayer = args.Player();
		HeldEntity heldEntity = basePlayer.GetHeldEntity();
		if (!((Object)(object)heldEntity == (Object)null))
		{
			Handcuffs handcuffs = heldEntity as Handcuffs;
			if (!((Object)(object)handcuffs == (Object)null))
			{
				handcuffs.SetLocked(!handcuffs.Locked, basePlayer);
			}
		}
	}

	private void ModifyConditionForElapsedTime(float elapsed)
	{
		if (unlockStartTime <= 0f || elapsed <= 0f)
		{
			return;
		}
		Item ownerItem = GetOwnerItem();
		if (ownerItem == null)
		{
			return;
		}
		float num = elapsed * ConditionLossPerSecond;
		if (num + 1f >= ownerItem.condition)
		{
			num = ownerItem.condition;
		}
		if (!(num > 1f) && !(num >= ownerItem.condition))
		{
			return;
		}
		ownerItem.condition -= num;
		if (ownerItem.condition <= 0f)
		{
			BasePlayer ownerPlayer = GetOwnerPlayer();
			if ((Object)(object)ownerPlayer != (Object)null)
			{
				ownerPlayer.ApplyWoundedStartTime();
			}
			SetLocked(flag: false);
			ownerItem.UseItem();
		}
	}

	public void RepairOnPush()
	{
		if (base.isServer)
		{
			GetOwnerItem()?.DoRepair(maxConditionRepairLossOnPush);
		}
	}

	public void InterruptUnlockMiniGame(bool wasPushedOrDamaged = false)
	{
		if (base.isServer && unlockStartTime > 0f && !wasPushedOrDamaged)
		{
			ModifyConditionForElapsedTime(Time.realtimeSinceStartup - unlockStartTime);
		}
		unlockStartTime = 0f;
		if (base.isServer)
		{
			BasePlayer ownerPlayer = GetOwnerPlayer();
			if (!((Object)(object)ownerPlayer == (Object)null))
			{
				ClientRPC(RpcTarget.Player("CL_CancelUnlockMiniGame", ownerPlayer), wasPushedOrDamaged ? 2f : 0f);
			}
		}
	}

	[RPC_Server]
	[RPC_Server.FromOwner(false)]
	[RPC_Server.CallsPerSecond(5uL)]
	private void RPC_ReqStartUnlockMiniGame(RPCMessage rpc)
	{
		BasePlayer player = rpc.player;
		if (!((Object)(object)player == (Object)null))
		{
			SV_StartUnlockMiniGame(player);
		}
	}

	private void SV_StartUnlockMiniGame(BasePlayer player)
	{
		if (!player.IsDead() && !player.IsWounded())
		{
			StartUnlockMiniGame();
			ClientRPC(RpcTarget.Player("CL_StartUnlockMiniGame", player));
		}
	}

	[RPC_Server]
	[RPC_Server.CallsPerSecond(5uL)]
	[RPC_Server.FromOwner(false)]
	private void RPC_ReqCancelUnlockMiniGame(RPCMessage rpc)
	{
		BasePlayer player = rpc.player;
		if (!((Object)(object)player == (Object)null))
		{
			SV_CancelUnlockMiniGame(player);
		}
	}

	private void SV_CancelUnlockMiniGame(BasePlayer player)
	{
		InterruptUnlockMiniGame();
	}

	[RPC_Server]
	[RPC_Server.FromOwner(false)]
	[RPC_Server.CallsPerSecond(5uL)]
	private void RPC_ReqCompleteUnlockMiniGame(RPCMessage rpc)
	{
		BasePlayer player = rpc.player;
		if (!((Object)(object)player == (Object)null))
		{
			SV_ReqCompleteUnlockMiniGame(player);
		}
	}

	private void SV_ReqCompleteUnlockMiniGame(BasePlayer player)
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		InterruptUnlockMiniGame();
		Effect.server.Run(escapeEffect.resourcePath, player, 0u, Vector3.zero, Vector3.zero);
	}

	[RPC_Server.CallsPerSecond(5uL)]
	[RPC_Server.FromOwner(false)]
	[RPC_Server]
	private void RPC_ReqLock(RPCMessage rpc)
	{
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		BasePlayer player = rpc.player;
		if (!((Object)(object)player == (Object)null))
		{
			NetworkableId uid = rpc.read.EntityID();
			BasePlayer basePlayer = BaseNetworkable.serverEntities.Find(uid) as BasePlayer;
			if (!((Object)(object)basePlayer == (Object)null))
			{
				SV_HandcuffVictim(basePlayer, player);
			}
		}
	}

	private void SV_HandcuffVictim(BasePlayer victim, BasePlayer handcuffer)
	{
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0148: Unknown result type (might be due to invalid IL or missing references)
		//IL_0168: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)victim == (Object)null || (Object)(object)handcuffer == (Object)null || victim.IsRestrained || (!victim.CurrentGestureIsSurrendering && !victim.IsWounded()) || Vector3.Distance(((Component)victim).transform.position, ((Component)handcuffer).transform.position) > UseDistance)
		{
			return;
		}
		Item ownerItem = GetOwnerItem();
		if (ownerItem == null || Interface.CallHook("OnPlayerHandcuff", (object)victim, (object)handcuffer) != null)
		{
			return;
		}
		victim.SetPlayerFlag(BasePlayer.PlayerFlags.IsRestrained, b: true);
		victim.SendNetworkUpdateImmediate();
		ownerItem.SetFlag(Item.Flag.IsOn, b: true);
		bool flag = true;
		if (!ownerItem.MoveToContainer(victim.inventory.containerBelt))
		{
			Item slot = victim.inventory.containerBelt.GetSlot(0);
			if (slot != null)
			{
				if (!slot.MoveToContainer(victim.inventory.containerMain))
				{
					slot.DropAndTossUpwards(((Component)victim).transform.position);
				}
				if (!ownerItem.MoveToContainer(victim.inventory.containerBelt))
				{
					flag = false;
				}
			}
		}
		if (!flag)
		{
			ownerItem.SetFlag(Item.Flag.IsOn, b: false);
			victim.SetPlayerFlag(BasePlayer.PlayerFlags.IsRestrained, b: false);
		}
		ownerItem.MarkDirty();
		if (flag)
		{
			victim.Server_CancelGesture();
			if (victim.IsBot)
			{
				Inventory.EquipItemInSlot(victim, 0);
			}
			victim.ClientRPC<int, ItemId>(RpcTarget.Player("SetActiveBeltSlot", victim), ownerItem.position, ownerItem.uid);
			SetLocked(flag: true, victim, ownerItem);
			Effect.server.Run(lockEffect.resourcePath, victim, 0u, Vector3.zero, Vector3.zero);
			Interface.CallHook("OnPlayerHandcuffed", (object)victim, (object)handcuffer);
		}
	}

	public void UnlockAndReturnToPlayer(BasePlayer returnToPlayer)
	{
		SetLocked(flag: false);
		if (!((Object)(object)returnToPlayer == (Object)null))
		{
			Item ownerItem = GetOwnerItem();
			if (ownerItem != null)
			{
				returnToPlayer.GiveItem(ownerItem);
			}
		}
	}

	public override bool CanHit(HitTest info)
	{
		if (info.HitEntity is BasePlayer basePlayer)
		{
			if (!basePlayer.CurrentGestureIsSurrendering && !basePlayer.IsSleeping())
			{
				return basePlayer.IsWounded();
			}
			return true;
		}
		return false;
	}

	public override void DoAttackShared(HitInfo info)
	{
		if (!base.isServer)
		{
			return;
		}
		BasePlayer basePlayer = info.HitEntity as BasePlayer;
		if ((Object)(object)basePlayer != (Object)null)
		{
			BasePlayer ownerPlayer = GetOwnerPlayer();
			if ((Object)(object)ownerPlayer != (Object)null && (Object)(object)basePlayer != (Object)null)
			{
				SV_HandcuffVictim(basePlayer, ownerPlayer);
			}
		}
	}
}
