using System.Collections;
using Rust.Ai;
using UnityEngine;

public class CoverPoint
{
	public enum CoverType
	{
		Full,
		Partial,
		None
	}

	public Vector3 Position;

	public Vector3 Normal;

	public CoverType NormalCoverType;

	private float timeWhenCooldownComplete;

	public CoverPointVolume Volume { get; private set; }

	public BaseEntity ReservedFor { get; set; }

	public bool IsReserved => ReservedFor != null;

	public bool IsCompromised { get; set; }

	public float Score { get; set; }

	public CoverPoint(CoverPointVolume volume, float score)
	{
		Volume = volume;
		Score = score;
	}

	public void CoverIsCompromised(float cooldown)
	{
		if (!IsCompromised && Volume != null)
		{
			Volume.StartCoroutine(StartCooldown(cooldown));
		}
	}

	private IEnumerator StartCooldown(float cooldown)
	{
		IsCompromised = true;
		yield return CoroutineEx.waitForSeconds(cooldown);
		IsCompromised = false;
	}
}
