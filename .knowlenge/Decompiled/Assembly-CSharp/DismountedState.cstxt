using UnityEngine;

public class DismountedState : BaseDismountedState
{
	private StateStatus status = StateStatus.Error;

	public override void StateEnter(BaseAIBrain brain, BaseEntity entity)
	{
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		base.StateEnter(brain, entity);
		status = StateStatus.Error;
		if (brain.PathFinder == null)
		{
			return;
		}
		AIInformationZone informationZone = (entity as HumanNPC).GetInformationZone(((Component)entity).transform.position);
		if (!((Object)(object)informationZone == (Object)null))
		{
			AICoverPoint bestCoverPoint = informationZone.GetBestCoverPoint(((Component)entity).transform.position, ((Component)entity).transform.position, 25f, 50f, entity);
			if (Object.op_Implicit((Object)(object)bestCoverPoint))
			{
				bestCoverPoint.SetUsedBy(entity, 10f);
			}
			Vector3 pos = (((Object)(object)bestCoverPoint == (Object)null) ? ((Component)entity).transform.position : ((Component)bestCoverPoint).transform.position);
			if (brain.Navigator.SetDestination(pos, BaseNavigator.NavigationSpeed.Fast))
			{
				status = StateStatus.Running;
			}
		}
	}

	public override StateStatus StateThink(float delta, BaseAIBrain brain, BaseEntity entity)
	{
		base.StateThink(delta, brain, entity);
		if (status == StateStatus.Error)
		{
			return status;
		}
		if (brain.Navigator.Moving)
		{
			return StateStatus.Running;
		}
		return StateStatus.Finished;
	}
}
