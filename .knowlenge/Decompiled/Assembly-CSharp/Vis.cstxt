using System.Collections.Generic;
using Facepunch;
using UnityEngine;

public static class Vis
{
	public static Collider[] colBuffer = new Collider[8192];

	public static void Colliders<T>(Vector3 position, float radius, List<T> list, int layerMask = -1, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.Collide) where T : Collider
	{
		layerMask = GamePhysics.HandleTerrainCollision(position, layerMask);
		int num = Physics.OverlapSphereNonAlloc(position, radius, colBuffer, layerMask, triggerInteraction);
		if (num >= colBuffer.Length)
		{
			Debug.LogWarning("Vis query is exceeding collider buffer length.");
		}
		for (int i = 0; i < num; i++)
		{
			T val = colBuffer[i] as T;
			colBuffer[i] = null;
			if (!(val == null) && val.enabled)
			{
				if (val.transform.CompareTag("MeshColliderBatch"))
				{
					MeshColliderBatch component = val.transform.GetComponent<MeshColliderBatch>();
					component.LookupColliders(position, radius, list);
				}
				else
				{
					list.Add(val);
				}
			}
		}
	}

	public static void Components<T>(Vector3 position, float radius, List<T> list, int layerMask = -1, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.Collide) where T : Component
	{
		List<Collider> obj = Pool.GetList<Collider>();
		Colliders(position, radius, obj, layerMask, triggerInteraction);
		for (int i = 0; i < obj.Count; i++)
		{
			T component = obj[i].gameObject.GetComponent<T>();
			if (!(component == null))
			{
				list.Add(component);
			}
		}
		Pool.FreeList(ref obj);
	}

	public static void Entities<T>(Vector3 position, float radius, List<T> list, int layerMask = -1, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.Collide) where T : BaseEntity
	{
		List<Collider> obj = Pool.GetList<Collider>();
		Colliders(position, radius, obj, layerMask, triggerInteraction);
		for (int i = 0; i < obj.Count; i++)
		{
			T val = GameObjectEx.ToBaseEntity(obj[i].gameObject) as T;
			if (!(val == null))
			{
				list.Add(val);
			}
		}
		Pool.FreeList(ref obj);
	}

	public static void EntityComponents<T>(Vector3 position, float radius, List<T> list, int layerMask = -1, QueryTriggerInteraction triggerInteraction = QueryTriggerInteraction.Collide) where T : EntityComponentBase
	{
		List<Collider> obj = Pool.GetList<Collider>();
		Colliders(position, radius, obj, layerMask, triggerInteraction);
		for (int i = 0; i < obj.Count; i++)
		{
			BaseEntity baseEntity = GameObjectEx.ToBaseEntity(obj[i].gameObject);
			if (!(baseEntity == null))
			{
				T component = baseEntity.gameObject.GetComponent<T>();
				if (!(component == null))
				{
					list.Add(component);
				}
			}
		}
		Pool.FreeList(ref obj);
	}
}
