using Apex.AI;
using Apex.Serialization;
using Rust.Ai;
using UnityEngine;

public abstract class WeightedScorerBase<T> : OptionScorerBase<T>
{
	[ApexSerialization(defaultValue = false)]
	public bool InvertScore;

	[ApexSerialization(defaultValue = 50f)]
	public float ScoreScale = 50f;

	private string DebugName;

	public WeightedScorerBase()
	{
		DebugName = GetType().Name;
	}

	protected float ProcessScore(float score)
	{
		score = Mathf.Clamp01(score);
		if (InvertScore)
		{
			score = 1f - score;
		}
		return score * ScoreScale;
	}

	public override float Score(IAIContext context, T option)
	{
		return ProcessScore(GetScore((BaseContext)context, option));
	}

	public abstract float GetScore(BaseContext context, T option);
}
