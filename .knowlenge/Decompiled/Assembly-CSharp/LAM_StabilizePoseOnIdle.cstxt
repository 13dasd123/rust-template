using FIMSpace.FProceduralAnimation;
using UnityEngine;

public class LAM_StabilizePoseOnIdle : LegsAnimatorControlModuleBase
{
	private Vector3 currentHeightAdjust = Vector3.zero;

	private Vector3 sd_currentHeightAdjust = Vector3.zero;

	private LegsAnimator.Variable _blendV;

	private LegsAnimator.Variable _adjSpeed;

	public override void OnInit(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		_blendV = helper.RequestVariable("Blend", 1f);
		_adjSpeed = helper.RequestVariable("Adjusting Speed", 1f);
	}

	public override void OnReInitialize(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		currentHeightAdjust = Vector3.zero;
		sd_currentHeightAdjust = Vector3.zero;
	}

	public override void OnLateUpdatePreApply(LegsAnimator.LegsAnimatorCustomModuleHelper helper)
	{
		//IL_01ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_0207: Unknown result type (might be due to invalid IL or missing references)
		//IL_020d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0218: Unknown result type (might be due to invalid IL or missing references)
		//IL_0228: Unknown result type (might be due to invalid IL or missing references)
		//IL_0238: Unknown result type (might be due to invalid IL or missing references)
		//IL_023d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0252: Unknown result type (might be due to invalid IL or missing references)
		//IL_0258: Unknown result type (might be due to invalid IL or missing references)
		//IL_025d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0262: Unknown result type (might be due to invalid IL or missing references)
		//IL_026c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0271: Unknown result type (might be due to invalid IL or missing references)
		//IL_0276: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_0123: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0144: Unknown result type (might be due to invalid IL or missing references)
		//IL_0149: Unknown result type (might be due to invalid IL or missing references)
		//IL_014e: Unknown result type (might be due to invalid IL or missing references)
		//IL_015c: Unknown result type (might be due to invalid IL or missing references)
		//IL_015e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0160: Unknown result type (might be due to invalid IL or missing references)
		//IL_0165: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_016f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0174: Unknown result type (might be due to invalid IL or missing references)
		//IL_0178: Unknown result type (might be due to invalid IL or missing references)
		//IL_017d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b1: Unknown result type (might be due to invalid IL or missing references)
		if (base.LA.Legs.Count < 2)
		{
			return;
		}
		bool flag = false;
		if (!base.LA.IsMoving)
		{
			flag = true;
			if (base.LA.UseGluing)
			{
				for (int i = 0; i < base.LA.Legs.Count; i++)
				{
					if (!base.LA.Legs[i].G_Attached)
					{
						flag = false;
						break;
					}
				}
			}
		}
		if (flag)
		{
			LegsAnimator.Leg leg = base.LA.Legs[0];
			Vector3 val = leg._PreviousFinalIKPos + leg.AnkleH.Bone.TransformVector(leg.AnkleToFeetEnd * 0.6f);
			for (int j = 1; j < base.LA.Legs.Count; j++)
			{
				leg = base.LA.Legs[j];
				Vector3 val2 = leg._PreviousFinalIKPos + leg.AnkleH.Bone.TransformVector(leg.AnkleToFeetEnd * 0.6f);
				val = Vector3.LerpUnclamped(val, val2, 0.5f);
			}
			val = base.LA.ToRootLocalSpace(val);
			val.y = 0f;
			Vector3 val3 = base.LA.ToRootLocalSpace(base.LA._LastAppliedHipsFinalPosition);
			val3.y = 0f;
			val -= val3;
			val = base.LA.RootToWorldSpaceVec(val);
			currentHeightAdjust = Vector3.SmoothDamp(currentHeightAdjust, val, ref sd_currentHeightAdjust, 0.05f + _adjSpeed.GetFloat() * 0.3f, 1000000f, base.LA.DeltaTime);
		}
		else
		{
			currentHeightAdjust = Vector3.SmoothDamp(currentHeightAdjust, Vector3.zero, ref sd_currentHeightAdjust, 0.05f + _adjSpeed.GetFloat() * 0.3f, 1000000f, base.LA.DeltaTime);
		}
		Transform hips = base.LA.Hips;
		hips.position += currentHeightAdjust * base.EffectBlend * _blendV.GetFloat() * base.LA._MainBlend;
		Vector3 val4 = base.LA.BaseTransform.position + currentHeightAdjust + Vector3.up * 2.4f;
		val4.y = base.LA._LastAppliedHipsFinalPosition.y + 2f;
	}
}
