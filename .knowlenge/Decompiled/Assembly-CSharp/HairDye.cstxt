using System;
using UnityEngine;

[Serializable]
public class HairDye
{
	public enum CopyProperty
	{
		DyeColor,
		RootColor,
		TipColor,
		Brightness,
		DyeRoughness,
		DyeScatter,
		Specular,
		Roughness,
		Count
	}

	[Flags]
	public enum CopyPropertyMask
	{
		DyeColor = 1,
		RootColor = 2,
		TipColor = 4,
		Brightness = 8,
		DyeRoughness = 0x10,
		DyeScatter = 0x20,
		Specular = 0x40,
		Roughness = 0x80
	}

	public Color baseColor;

	public Material sourceMaterial;

	[InspectorFlags]
	public CopyPropertyMask copyProperties;

	private static MaterialPropertyDesc[] transferableProps = new MaterialPropertyDesc[8]
	{
		new MaterialPropertyDesc("_DyeColor", typeof(Color)),
		new MaterialPropertyDesc("_RootColor", typeof(Color)),
		new MaterialPropertyDesc("_TipColor", typeof(Color)),
		new MaterialPropertyDesc("_Brightness", typeof(float)),
		new MaterialPropertyDesc("_DyeRoughness", typeof(float)),
		new MaterialPropertyDesc("_DyeScatter", typeof(float)),
		new MaterialPropertyDesc("_Specular", typeof(float)),
		new MaterialPropertyDesc("_Roughness", typeof(float))
	};

	public void Apply(MaterialPropertyBlock block)
	{
		block.SetColor("_BaseColor", baseColor);
		for (int i = 0; i < 8; i++)
		{
			if (((uint)copyProperties & (uint)(1 << i)) == 0)
			{
				continue;
			}
			MaterialPropertyDesc materialPropertyDesc = transferableProps[i];
			if (sourceMaterial.HasProperty(materialPropertyDesc.name))
			{
				if (materialPropertyDesc.type == typeof(Color))
				{
					block.SetColor(materialPropertyDesc.name, sourceMaterial.GetColor(materialPropertyDesc.name));
				}
				else if (materialPropertyDesc.type == typeof(float))
				{
					block.SetFloat(materialPropertyDesc.name, sourceMaterial.GetFloat(materialPropertyDesc.name));
				}
			}
		}
	}
}
