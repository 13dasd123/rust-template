using System;
using System.Collections.Generic;
using Facepunch;
using UnityEngine;

[CreateAssetMenu(menuName = "Rust/Skin Set")]
public class SkinSet : ScriptableObject
{
	[Serializable]
	public class MeshReplace
	{
		[HideInInspector]
		public string FindName;

		public Mesh Find;

		public SkinnedMeshRenderer[] Replace;

		public SkinnedMeshRenderer Get(float MeshNumber)
		{
			return Replace[Mathf.Clamp(Mathf.FloorToInt(MeshNumber * (float)Replace.Length), 0, Replace.Length - 1)];
		}

		public bool Test(string materialName)
		{
			return FindName == materialName;
		}
	}

	[Serializable]
	public class MaterialReplace
	{
		[HideInInspector]
		public string FindName;

		public Material Find;

		public Material[] Replace;

		public Material Get(float MeshNumber)
		{
			return Replace[Mathf.Clamp(Mathf.FloorToInt(MeshNumber * (float)Replace.Length), 0, Replace.Length - 1)];
		}

		public bool Test(string materialName)
		{
			return FindName == materialName;
		}
	}

	public string Label;

	public MeshReplace[] MeshReplacements;

	public MaterialReplace[] MaterialReplacements;

	public Gradient SkinColour;

	public void Process(GameObject obj, float Seed)
	{
		List<SkinnedMeshRenderer> obj2 = Pool.GetList<SkinnedMeshRenderer>();
		obj.GetComponentsInChildren(includeInactive: true, obj2);
		foreach (SkinnedMeshRenderer item in obj2)
		{
			if (item.sharedMesh == null || item.sharedMaterial == null)
			{
				continue;
			}
			string materialName = item.sharedMesh.name;
			string materialName2 = item.sharedMaterial.name;
			for (int i = 0; i < MeshReplacements.Length; i++)
			{
				if (MeshReplacements[i].Test(materialName))
				{
					SkinnedMeshRenderer skinnedMeshRenderer = MeshReplacements[i].Get(Seed);
					item.sharedMesh = skinnedMeshRenderer.sharedMesh;
					item.rootBone = skinnedMeshRenderer.rootBone;
					item.bones = skinnedMeshRenderer.bones;
				}
			}
			for (int j = 0; j < MaterialReplacements.Length; j++)
			{
				if (MaterialReplacements[j].Test(materialName2))
				{
					item.sharedMaterial = MaterialReplacements[j].Get(Seed);
				}
			}
		}
		Pool.FreeList(ref obj2);
	}

	internal Color GetSkinColor(float skinNumber)
	{
		return SkinColour.Evaluate(skinNumber);
	}
}
