using System.Collections.Generic;

public class Comparer : IComparer<BakeInfo>
{
	public int Compare(BakeInfo a, BakeInfo b)
	{
		if (a.Cell == null && b.Cell == null)
		{
			return 0;
		}
		if (a.Cell == null)
		{
			return -1;
		}
		if (b.Cell == null)
		{
			return 1;
		}
		int distanceToNearestPlayer = GetDistanceToNearestPlayer(a.Cell.Coord);
		if (distanceToNearestPlayer == 0)
		{
			return 1;
		}
		int distanceToNearestPlayer2 = GetDistanceToNearestPlayer(b.Cell.Coord);
		if (distanceToNearestPlayer2 == 0)
		{
			return -1;
		}
		if (distanceToNearestPlayer < distanceToNearestPlayer2)
		{
			return 1;
		}
		if (distanceToNearestPlayer > distanceToNearestPlayer2)
		{
			return -1;
		}
		return 0;
	}

	private int GetDistanceToNearestPlayer(Vector2i coord)
	{
		int num = int.MaxValue;
		foreach (BasePlayer activePlayer in BasePlayer.activePlayerList)
		{
			if (activePlayer == null || !activePlayer.IsConnected)
			{
				continue;
			}
			Vector2i coord2 = SingletonComponent<AiManager>.Instance.GetCoord(activePlayer.ServerPosition);
			Vector2i[] directions = Directions;
			foreach (Vector2i vector2i in directions)
			{
				if (coord == coord2 + vector2i)
				{
					return 0;
				}
			}
			Vector2i a = coord - coord2;
			int num2 = MagnitudeSquared(a);
			if (num2 < num)
			{
				num = num2;
			}
		}
		return num;
	}

	private int MagnitudeSquared(Vector2i a)
	{
		return Dot(a, a);
	}

	private int Dot(Vector2i a, Vector2i b)
	{
		return a.x * b.x + a.y * b.y;
	}
}
