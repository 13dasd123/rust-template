using System.Collections.Generic;
using UnityEngine;

public class PlaceMonuments : ProceduralComponent
{
	public SpawnFilter Filter;

	public string ResourceFolder = string.Empty;

	public int Attempts = 1000;

	public int Distance = 500;

	public int MinSize;

	private List<Vector3> spawns = new List<Vector3>();

	public override void Process(uint seed)
	{
		if (World.Size < MinSize)
		{
			return;
		}
		TerrainHeightMap heightMap = TerrainMeta.HeightMap;
		Prefab[] array = Prefab.Load("assets/bundled/prefabs/autospawn/" + ResourceFolder);
		if (array == null || array.Length == 0)
		{
			return;
		}
		ArrayEx.Shuffle(array, seed);
		ArrayEx.BubbleSort(array);
		Vector3 position = TerrainMeta.Position;
		Vector3 size = TerrainMeta.Size;
		Prefab[] array2 = array;
		foreach (Prefab prefab in array2)
		{
			for (int j = 0; j < Attempts; j++)
			{
				float num = SeedRandom.Value(ref seed);
				float num2 = SeedRandom.Value(ref seed);
				float num3 = SeedRandom.Range(ref seed, 0f, 1f);
				float factor = Filter.GetFactor(num, num2);
				if (factor * factor < num3)
				{
					continue;
				}
				float height = heightMap.GetHeight(num, num2);
				float x = position.x + num * size.x;
				float z = position.z + num2 * size.z;
				Vector3 pos = new Vector3(x, height, z);
				Quaternion rot = prefab.Object.transform.localRotation;
				Vector3 scale = prefab.Object.transform.localScale;
				if (!CheckRadius(pos, Distance))
				{
					prefab.ApplyDecorComponents(ref pos, ref rot, ref scale);
					if (prefab.ApplyTerrainAnchors(ref pos, rot, scale, Filter) && prefab.ApplyTerrainChecks(pos, rot, scale, Filter) && prefab.ApplyTerrainFilters(pos, rot, scale) && !prefab.CheckEnvironmentVolumes(pos, rot, scale, EnvironmentType.Underground))
					{
						prefab.ApplyTerrainPlacements(pos, rot, scale);
						prefab.ApplyTerrainModifiers(pos, rot, scale);
						World.Serialization.AddPrefab("Monument", prefab.ID, pos, rot, scale);
						spawns.Add(pos);
						break;
					}
				}
			}
		}
	}

	private bool CheckRadius(Vector3 pos, float radius)
	{
		float num = radius * radius;
		foreach (Vector3 spawn in spawns)
		{
			float sqrMagnitude = (spawn - pos).sqrMagnitude;
			if (sqrMagnitude < num)
			{
				return true;
			}
		}
		return false;
	}
}
