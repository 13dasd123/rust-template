using System;
using System.Collections.Generic;
using Facepunch;
using UnityEngine;

public class BuildingProximity : PrefabAttribute
{
	public float distance = 2f;

	private Bounds bounds = new Bounds(Vector3.zero, Vector3.one);

	private const float padding = 0.1f;

	protected bool Check(Construction construction, Vector3 position, Quaternion rotation, BuildingBlock target)
	{
		position += rotation * bounds.center;
		OBB oBB = new OBB(position, bounds.size, rotation);
		float radius = bounds.size.Max() + distance;
		List<BuildingBlock> obj = Pool.GetList<BuildingBlock>();
		Vis.Entities(position, radius, obj, 2097152);
		uint num = (target ? target.buildingID : 0u);
		for (int i = 0; i < obj.Count; i++)
		{
			BuildingBlock buildingBlock = obj[i];
			OBB oBB2 = oBB;
			OBB other = buildingBlock.WorldSpaceBounds();
			if (buildingBlock.buildingID == num)
			{
				if (Vector3.Distance(oBB2.position, other.position) > GetMinDistance(construction) + GetMinDistance(buildingBlock.blockDefinition) - 0.1f)
				{
					continue;
				}
			}
			else if (oBB2.Distance(other) > distance)
			{
				continue;
			}
			Pool.FreeList(ref obj);
			return true;
		}
		Pool.FreeList(ref obj);
		return false;
	}

	private float GetMinDistance(Construction construction)
	{
		switch (construction.info.name.token)
		{
		case "foundation":
		case "foundation_steps":
			return 1.5f;
		case "foundation_triangle":
			return 0.7f;
		default:
			return 0f;
		}
	}

	protected override void AttributeSetup(GameObject rootObj, string name, bool serverside, bool clientside, bool bundling)
	{
		bounds = rootObj.GetComponent<BaseEntity>().bounds;
	}

	protected override Type GetIndexedType()
	{
		return typeof(BuildingProximity);
	}

	public static bool Check(Construction construction, Vector3 position, Quaternion rotation, BuildingBlock target, BuildingProximity[] volumes)
	{
		for (int i = 0; i < volumes.Length; i++)
		{
			if (volumes[i].Check(construction, position, rotation, target))
			{
				return true;
			}
		}
		return false;
	}
}
