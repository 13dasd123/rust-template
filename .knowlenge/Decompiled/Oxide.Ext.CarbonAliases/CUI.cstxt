using System;
using Facepunch.Extend;
using Oxide.Core.Libraries;
using Oxide.Ext.CarbonAliases;
using Oxide.Game.Rust.Cui;
using UnityEngine;
using UnityEngine.UI;

public class CUI : Library, IDisposable
{
	public enum ClientPanels
	{
		Overlay,
		Hud,
		HudMenu,
		Under
	}

	public struct Pair<T1, T2>
	{
		public T1 Id;

		public T2 Element;

		public Pair(T1 id, T2 element)
		{
			Id = id;
			Element = element;
		}

		public static implicit operator string(Pair<T1, T2> value)
		{
			return value.Id.ToString();
		}
	}

	public struct Pair<T1, T2, T3>
	{
		public T1 Id;

		public T2 Element1;

		public T3 Element2;

		public Pair(T1 id, T2 element1, T3 element2)
		{
			Id = id;
			Element1 = element1;
			Element2 = element2;
		}

		public static implicit operator string(Pair<T1, T2, T3> value)
		{
			return value.Id.ToString();
		}
	}

	public class Handler
	{
		public enum FontTypes
		{
			Arial,
			RobotoCondensedBold,
			RobotoCondensedRegular,
			PermanentMarker,
			DroidSansMono
		}

		public class UpdatePool : CuiElementContainer, IDisposable
		{
			internal bool _hasDisposed;

			public void Add(Pair<string, CuiElement> pair)
			{
				if (pair.Element != null && pair.Element.Update)
				{
					Add(pair.Element);
				}
			}

			public void Add(Pair<string, CuiElement, CuiElement> pair)
			{
				if (pair.Element1 != null)
				{
					if (!pair.Element1.Update)
					{
						return;
					}
					Add(pair.Element1);
				}
				if (pair.Element2 != null && pair.Element2.Update)
				{
					Add(pair.Element2);
				}
			}

			public void Send(BasePlayer player)
			{
				CuiHelper.AddUi(player, this);
				Dispose();
			}

			public void Dispose()
			{
				if (!_hasDisposed)
				{
					Clear();
					_hasDisposed = true;
				}
			}
		}

		internal string Identifier { get; set; }

		internal int _currentId { get; set; }

		public Handler()
		{
			Identifier = "PleaseSwitchToCarbon";
		}

		internal string AppendId()
		{
			_currentId++;
			return $"{Identifier}_{_currentId}";
		}

		public void Send(CuiElementContainer container, BasePlayer player)
		{
			CuiHelper.AddUi(player, container);
		}

		public void SendUpdate(Pair<string, CuiElement> pair, BasePlayer player)
		{
			CuiElementContainer elements = new CuiElementContainer { pair.Element };
			CuiHelper.AddUi(player, elements);
		}

		public void Destroy(string name, BasePlayer player)
		{
			CuiHelper.DestroyUi(player, name);
		}
	}

	internal int _currentId = 0;

	public Handler Manager { get; private set; }

	public string GetClientPanel(ClientPanels panel)
	{
		return panel switch
		{
			ClientPanels.Hud => "Hud", 
			ClientPanels.HudMenu => "Hud.Menu", 
			ClientPanels.Under => "Under", 
			_ => "Overlay", 
		};
	}

	public CUI(Handler manager)
	{
		Manager = manager;
	}

	public Handler.UpdatePool UpdatePool()
	{
		return new Handler.UpdatePool();
	}

	internal string AppendId()
	{
		_currentId++;
		return $"CarbonConvertUI_{_currentId}";
	}

	internal static string ProcessColor(string color)
	{
		if (color.StartsWith("#"))
		{
			return HexToRustColor(color, null);
		}
		return color;
	}

	public static string HexToRustColor(string hexColor, float? alpha = null, bool includeAlpha = true)
	{
		if (!ColorUtility.TryParseHtmlString(hexColor, out var color))
		{
			return "1 1 1" + (includeAlpha ? $" {alpha ?? 1f}" : "");
		}
		return string.Format("{0} {1} {2}{3}", color.r, color.g, color.b, includeAlpha ? $" {alpha ?? color.a}" : "");
	}

	public CuiElementContainer CreateContainer(string panel, string color = "0 0 0 0", float xMin = 0f, float xMax = 1f, float yMin = 0f, float yMax = 1f, float OxMin = 0f, float OxMax = 0f, float OyMin = 0f, float OyMax = 0f, float fadeIn = 0f, float fadeOut = 0f, bool needsCursor = false, bool needsKeyboard = false, ClientPanels parent = ClientPanels.Overlay, string destroyUi = null)
	{
		CuiElementContainer cuiElementContainer = new CuiElementContainer();
		CuiElement cuiElement = new CuiElement
		{
			Name = panel,
			Parent = GetClientPanel(parent),
			Components = 
			{
				(ICuiComponent)new CuiImageComponent
				{
					Color = ProcessColor(color),
					FadeIn = fadeIn
				},
				(ICuiComponent)new CuiRectTransformComponent
				{
					AnchorMin = $"{xMin} {yMin}",
					AnchorMax = $"{xMax} {yMax}",
					OffsetMin = $"{OxMin} {OyMin}",
					OffsetMax = $"{OxMax} {OyMax}"
				}
			},
			FadeOut = fadeOut,
			DestroyUi = destroyUi
		};
		if (needsCursor)
		{
			cuiElement.Components.Add(new CuiNeedsCursorComponent());
		}
		if (needsKeyboard)
		{
			cuiElement.Components.Add(new CuiNeedsKeyboardComponent());
		}
		cuiElementContainer.Add(cuiElement);
		return cuiElementContainer;
	}

	public Pair<string, CuiElement> CreatePanel(CuiElementContainer container, string parent, string color, string material, float xMin = 0f, float xMax = 1f, float yMin = 0f, float yMax = 1f, float OxMin = 0f, float OxMax = 0f, float OyMin = 0f, float OyMax = 0f, bool blur = false, float fadeIn = 0f, float fadeOut = 0f, bool needsCursor = false, bool needsKeyboard = false, string outlineColor = null, string outlineDistance = null, bool outlineUseGraphicAlpha = false, string id = null, string destroyUi = null, bool update = false)
	{
		if (string.IsNullOrEmpty(id))
		{
			id = AppendId();
		}
		CuiElement cuiElement = new CuiElement
		{
			Parent = parent,
			Name = id,
			FadeOut = fadeOut,
			DestroyUi = destroyUi,
			Update = update
		};
		if (!update || (update && (xMin != 0f || xMax != 1f || yMin != 0f || yMax != 1f)))
		{
			CuiRectTransformComponent cuiRectTransformComponent = new CuiRectTransformComponent();
			cuiRectTransformComponent.AnchorMin = $"{xMin} {yMin}";
			cuiRectTransformComponent.AnchorMax = $"{xMax} {yMax}";
			cuiRectTransformComponent.OffsetMin = $"{OxMin} {OyMin}";
			cuiRectTransformComponent.OffsetMax = $"{OxMax} {OyMax}";
			cuiElement.Components.Add(cuiRectTransformComponent);
		}
		CuiImageComponent cuiImageComponent = new CuiImageComponent();
		if (material != null)
		{
			cuiImageComponent.Material = material;
		}
		cuiImageComponent.Color = color;
		cuiImageComponent.FadeIn = fadeIn;
		if (blur)
		{
			cuiImageComponent.Material = "assets/content/ui/uibackgroundblur.mat";
		}
		cuiElement.Components.Add(cuiImageComponent);
		if (needsCursor)
		{
			cuiElement.Components.Add(new CuiNeedsCursorComponent());
		}
		if (needsKeyboard)
		{
			cuiElement.Components.Add(new CuiNeedsKeyboardComponent());
		}
		if (outlineColor != null)
		{
			CuiOutlineComponent cuiOutlineComponent = new CuiOutlineComponent();
			cuiOutlineComponent.Color = ProcessColor(outlineColor);
			cuiOutlineComponent.Distance = outlineDistance;
			cuiOutlineComponent.UseGraphicAlpha = outlineUseGraphicAlpha;
			cuiElement.Components.Add(cuiOutlineComponent);
		}
		if (!update)
		{
			container?.Add(cuiElement);
		}
		return new Pair<string, CuiElement>(id, cuiElement);
	}

	public Pair<string, CuiElement> CreateText(CuiElementContainer container, string parent, string color, string text, int size, float xMin = 0f, float xMax = 1f, float yMin = 0f, float yMax = 1f, float OxMin = 0f, float OxMax = 0f, float OyMin = 0f, float OyMax = 0f, TextAnchor align = TextAnchor.MiddleCenter, Handler.FontTypes font = Handler.FontTypes.RobotoCondensedRegular, VerticalWrapMode verticalOverflow = VerticalWrapMode.Overflow, float fadeIn = 0f, float fadeOut = 0f, bool needsCursor = false, bool needsKeyboard = false, string outlineColor = null, string outlineDistance = null, bool outlineUseGraphicAlpha = false, string id = null, string destroyUi = null, bool update = false)
	{
		if (id == null)
		{
			id = AppendId();
		}
		CuiElement cuiElement = new CuiElement
		{
			Parent = parent,
			Name = id,
			FadeOut = fadeOut,
			DestroyUi = destroyUi,
			Update = update
		};
		if (!update || (update && (xMin != 0f || xMax != 1f || yMin != 0f || yMax != 1f)))
		{
			CuiRectTransformComponent cuiRectTransformComponent = new CuiRectTransformComponent();
			cuiRectTransformComponent.AnchorMin = $"{xMin} {yMin}";
			cuiRectTransformComponent.AnchorMax = $"{xMax} {yMax}";
			cuiRectTransformComponent.OffsetMin = $"{OxMin} {OyMin}";
			cuiRectTransformComponent.OffsetMax = $"{OxMax} {OyMax}";
			cuiElement.Components.Add(cuiRectTransformComponent);
		}
		CuiTextComponent cuiTextComponent = new CuiTextComponent();
		cuiTextComponent.Text = (string.IsNullOrEmpty(text) ? string.Empty : text);
		cuiTextComponent.FontSize = size;
		cuiTextComponent.Font = GetFont(font);
		cuiTextComponent.Align = align;
		cuiTextComponent.Color = ProcessColor(color);
		cuiTextComponent.FadeIn = fadeIn;
		cuiTextComponent.VerticalOverflow = verticalOverflow;
		cuiElement.Components.Add(cuiTextComponent);
		if (needsCursor)
		{
			cuiElement.Components.Add(new CuiNeedsCursorComponent());
		}
		if (needsKeyboard)
		{
			cuiElement.Components.Add(new CuiNeedsKeyboardComponent());
		}
		if (outlineColor != null)
		{
			CuiOutlineComponent cuiOutlineComponent = new CuiOutlineComponent();
			cuiOutlineComponent.Color = ProcessColor(outlineColor);
			cuiOutlineComponent.Distance = outlineDistance;
			cuiOutlineComponent.UseGraphicAlpha = outlineUseGraphicAlpha;
			cuiElement.Components.Add(cuiOutlineComponent);
		}
		if (!update)
		{
			container?.Add(cuiElement);
		}
		return new Pair<string, CuiElement>(id, cuiElement);
	}

	public Pair<string, CuiElement, CuiElement> CreateProtectedButton(CuiElementContainer container, string parent, string color, string textColor, string text, int size, string material, float xMin = 0f, float xMax = 1f, float yMin = 0f, float yMax = 1f, float OxMin = 0f, float OxMax = 0f, float OyMin = 0f, float OyMax = 0f, string command = null, TextAnchor align = TextAnchor.MiddleCenter, Handler.FontTypes font = Handler.FontTypes.RobotoCondensedRegular, float fadeIn = 0f, float fadeOut = 0f, bool needsCursor = false, bool needsKeyboard = false, string outlineColor = null, string outlineDistance = null, bool outlineUseGraphicAlpha = false, string id = null, string destroyUi = null, bool update = false)
	{
		return CreateButton(container, parent, color, textColor, text, size, material, xMin, xMax, yMin, yMax, OxMin, OxMax, OyMin, OyMax, command, align, font, fadeIn, fadeOut, needsCursor, needsKeyboard, outlineColor, outlineDistance, outlineUseGraphicAlpha, id, destroyUi, update);
	}

	public Pair<string, CuiElement, CuiElement> CreateButton(CuiElementContainer container, string parent, string color, string textColor, string text, int size, string material, float xMin = 0f, float xMax = 1f, float yMin = 0f, float yMax = 1f, float OxMin = 0f, float OxMax = 0f, float OyMin = 0f, float OyMax = 0f, string command = null, TextAnchor align = TextAnchor.MiddleCenter, Handler.FontTypes font = Handler.FontTypes.RobotoCondensedRegular, float fadeIn = 0f, float fadeOut = 0f, bool needsCursor = false, bool needsKeyboard = false, string outlineColor = null, string outlineDistance = null, bool outlineUseGraphicAlpha = false, string id = null, string destroyUi = null, bool update = false)
	{
		if (id == null)
		{
			id = AppendId();
		}
		CuiElement cuiElement = new CuiElement
		{
			Parent = parent,
			Name = id,
			FadeOut = fadeOut,
			DestroyUi = destroyUi,
			Update = update
		};
		if (!update || (update && (xMin != 0f || xMax != 1f || yMin != 0f || yMax != 1f)))
		{
			CuiRectTransformComponent cuiRectTransformComponent = new CuiRectTransformComponent();
			cuiRectTransformComponent.AnchorMin = $"{xMin} {yMin}";
			cuiRectTransformComponent.AnchorMax = $"{xMax} {yMax}";
			cuiRectTransformComponent.OffsetMin = $"{OxMin} {OyMin}";
			cuiRectTransformComponent.OffsetMax = $"{OxMax} {OyMax}";
			cuiElement.Components.Add(cuiRectTransformComponent);
		}
		CuiButtonComponent cuiButtonComponent = new CuiButtonComponent();
		if (material != null)
		{
			cuiButtonComponent.Material = material;
		}
		cuiButtonComponent.FadeIn = fadeIn;
		cuiButtonComponent.Color = ProcessColor(color);
		cuiButtonComponent.Command = command;
		cuiElement.Components.Add(cuiButtonComponent);
		if (needsCursor)
		{
			cuiElement.Components.Add(new CuiNeedsCursorComponent());
		}
		if (needsKeyboard)
		{
			cuiElement.Components.Add(new CuiNeedsKeyboardComponent());
		}
		if (!update)
		{
			container?.Add(cuiElement);
		}
		CuiElement cuiElement2 = null;
		if (!string.IsNullOrEmpty(text))
		{
			cuiElement2 = new CuiElement
			{
				Parent = id,
				Name = AppendId(),
				Components = { (ICuiComponent)new CuiRectTransformComponent
				{
					AnchorMin = "0.02 0",
					AnchorMax = "0.98 1"
				} },
				FadeOut = fadeOut,
				DestroyUi = destroyUi,
				Update = update
			};
			CuiTextComponent cuiTextComponent = new CuiTextComponent();
			cuiTextComponent.Text = text;
			cuiTextComponent.FontSize = size;
			cuiTextComponent.Align = align;
			cuiTextComponent.Color = ProcessColor(textColor);
			cuiTextComponent.Font = GetFont(font);
			cuiElement2.Components.Add(cuiTextComponent);
			container.Add(cuiElement2);
		}
		if (outlineColor != null)
		{
			CuiOutlineComponent cuiOutlineComponent = new CuiOutlineComponent();
			cuiOutlineComponent.Color = ProcessColor(outlineColor);
			cuiOutlineComponent.Distance = outlineDistance;
			cuiOutlineComponent.UseGraphicAlpha = outlineUseGraphicAlpha;
			cuiElement.Components.Add(cuiOutlineComponent);
		}
		return new Pair<string, CuiElement, CuiElement>(id, cuiElement, cuiElement2);
	}

	public Pair<string, CuiElement> CreateInputField(CuiElementContainer container, string parent, string color, string text, int size, int characterLimit, bool readOnly, float xMin = 0f, float xMax = 1f, float yMin = 0f, float yMax = 1f, float OxMin = 0f, float OxMax = 0f, float OyMin = 0f, float OyMax = 0f, string command = null, TextAnchor align = TextAnchor.MiddleCenter, Handler.FontTypes font = Handler.FontTypes.RobotoCondensedRegular, bool autoFocus = false, bool hudMenuInput = false, float fadeIn = 0f, float fadeOut = 0f, bool needsCursor = false, bool needsKeyboard = false, string id = null, string destroyUi = null, bool update = false)
	{
		return CreateInputField(container, parent, color, text, size, characterLimit, readOnly, xMin, xMax, yMin, yMax, OxMin, OxMax, OyMin, OyMax, command, align, font, autoFocus, hudMenuInput, InputField.LineType.SingleLine, fadeIn, fadeOut, needsCursor, needsKeyboard, id, destroyUi, update);
	}

	public Pair<string, CuiElement> CreateInputField(CuiElementContainer container, string parent, string color, string text, int size, int characterLimit, bool readOnly, float xMin = 0f, float xMax = 1f, float yMin = 0f, float yMax = 1f, float OxMin = 0f, float OxMax = 0f, float OyMin = 0f, float OyMax = 0f, string command = null, TextAnchor align = TextAnchor.MiddleCenter, Handler.FontTypes font = Handler.FontTypes.RobotoCondensedRegular, bool autoFocus = false, bool hudMenuInput = false, InputField.LineType lineType = InputField.LineType.SingleLine, float fadeIn = 0f, float fadeOut = 0f, bool needsCursor = false, bool needsKeyboard = false, string id = null, string destroyUi = null, bool update = false)
	{
		if (id == null)
		{
			id = AppendId();
		}
		CuiElement cuiElement = new CuiElement
		{
			Parent = parent,
			Name = id,
			FadeOut = fadeOut,
			DestroyUi = destroyUi,
			Update = update
		};
		if (!update || (update && (xMin != 0f || xMax != 1f || yMin != 0f || yMax != 1f)))
		{
			CuiRectTransformComponent cuiRectTransformComponent = new CuiRectTransformComponent();
			cuiRectTransformComponent.AnchorMin = $"{xMin} {yMin}";
			cuiRectTransformComponent.AnchorMax = $"{xMax} {yMax}";
			cuiRectTransformComponent.OffsetMin = $"{OxMin} {OyMin}";
			cuiRectTransformComponent.OffsetMax = $"{OxMax} {OyMax}";
			cuiElement.Components.Add(cuiRectTransformComponent);
		}
		CuiInputFieldComponent cuiInputFieldComponent = new CuiInputFieldComponent();
		cuiInputFieldComponent.Color = ProcessColor(color);
		cuiInputFieldComponent.Text = (string.IsNullOrEmpty(text) ? string.Empty : text);
		cuiInputFieldComponent.FontSize = size;
		cuiInputFieldComponent.Font = GetFont(font);
		cuiInputFieldComponent.Align = align;
		cuiInputFieldComponent.CharsLimit = characterLimit;
		cuiInputFieldComponent.ReadOnly = readOnly;
		cuiInputFieldComponent.Command = command;
		cuiInputFieldComponent.Autofocus = autoFocus;
		cuiInputFieldComponent.HudMenuInput = hudMenuInput;
		cuiInputFieldComponent.LineType = lineType;
		cuiElement.Components.Add(cuiInputFieldComponent);
		if (needsCursor)
		{
			cuiElement.Components.Add(new CuiNeedsCursorComponent());
		}
		if (needsKeyboard)
		{
			cuiElement.Components.Add(new CuiNeedsKeyboardComponent());
		}
		if (!update)
		{
			container?.Add(cuiElement);
		}
		return new Pair<string, CuiElement>(id, cuiElement);
	}

	public Pair<string, CuiElement> CreateProtectedInputField(CuiElementContainer container, string parent, string color, string text, int size, int characterLimit, bool readOnly, float xMin = 0f, float xMax = 1f, float yMin = 0f, float yMax = 1f, float OxMin = 0f, float OxMax = 0f, float OyMin = 0f, float OyMax = 0f, string command = null, TextAnchor align = TextAnchor.MiddleCenter, Handler.FontTypes font = Handler.FontTypes.RobotoCondensedRegular, bool autoFocus = false, bool hudMenuInput = false, float fadeIn = 0f, float fadeOut = 0f, bool needsCursor = false, bool needsKeyboard = false, string id = null, string destroyUi = null, bool update = false)
	{
		return CreateInputField(container, parent, color, text, size, characterLimit, readOnly, xMin, xMax, yMin, yMax, OxMin, OxMax, OyMin, OyMax, command, align, font, autoFocus, hudMenuInput, InputField.LineType.SingleLine, fadeIn, fadeOut, needsCursor, needsKeyboard, id, destroyUi, update);
	}

	public Pair<string, CuiElement> CreateProtectedInputField(CuiElementContainer container, string parent, string color, string text, int size, int characterLimit, bool readOnly, float xMin = 0f, float xMax = 1f, float yMin = 0f, float yMax = 1f, float OxMin = 0f, float OxMax = 0f, float OyMin = 0f, float OyMax = 0f, string command = null, TextAnchor align = TextAnchor.MiddleCenter, Handler.FontTypes font = Handler.FontTypes.RobotoCondensedRegular, bool autoFocus = false, bool hudMenuInput = false, InputField.LineType lineType = InputField.LineType.SingleLine, float fadeIn = 0f, float fadeOut = 0f, bool needsCursor = false, bool needsKeyboard = false, string id = null, string destroyUi = null, bool update = false)
	{
		return CreateInputField(container, parent, color, text, size, characterLimit, readOnly, xMin, xMax, yMin, yMax, OxMin, OxMax, OyMin, OyMax, command, align, font, autoFocus, hudMenuInput, lineType, fadeIn, fadeOut, needsCursor, needsKeyboard, id, destroyUi, update);
	}

	public Pair<string, CuiElement> CreateImage(CuiElementContainer container, string parent, uint png, string color, string material, float xMin = 0f, float xMax = 1f, float yMin = 0f, float yMax = 1f, float OxMin = 0f, float OxMax = 0f, float OyMin = 0f, float OyMax = 0f, float fadeIn = 0f, float fadeOut = 0f, bool needsCursor = false, bool needsKeyboard = false, string outlineColor = null, string outlineDistance = null, bool outlineUseGraphicAlpha = false, string id = null, string destroyUi = null, bool update = false)
	{
		if (id == null)
		{
			id = AppendId();
		}
		CuiElement cuiElement = new CuiElement
		{
			Parent = parent,
			Name = id,
			FadeOut = fadeOut,
			DestroyUi = destroyUi,
			Update = update
		};
		if (!update || (update && (xMin != 0f || xMax != 1f || yMin != 0f || yMax != 1f)))
		{
			CuiRectTransformComponent cuiRectTransformComponent = new CuiRectTransformComponent();
			cuiRectTransformComponent.AnchorMin = $"{xMin} {yMin}";
			cuiRectTransformComponent.AnchorMax = $"{xMax} {yMax}";
			cuiRectTransformComponent.OffsetMin = $"{OxMin} {OyMin}";
			cuiRectTransformComponent.OffsetMax = $"{OxMax} {OyMax}";
			cuiElement.Components.Add(cuiRectTransformComponent);
		}
		CuiRawImageComponent cuiRawImageComponent = new CuiRawImageComponent();
		if (material != null)
		{
			cuiRawImageComponent.Material = material;
		}
		cuiRawImageComponent.Png = png.ToString();
		cuiRawImageComponent.FadeIn = fadeIn;
		cuiRawImageComponent.Color = ProcessColor(color);
		cuiElement.Components.Add(cuiRawImageComponent);
		if (needsCursor)
		{
			cuiElement.Components.Add(new CuiNeedsCursorComponent());
		}
		if (needsKeyboard)
		{
			cuiElement.Components.Add(new CuiNeedsKeyboardComponent());
		}
		if (outlineColor != null)
		{
			CuiOutlineComponent cuiOutlineComponent = new CuiOutlineComponent();
			cuiOutlineComponent.Color = ProcessColor(outlineColor);
			cuiOutlineComponent.Distance = outlineDistance;
			cuiOutlineComponent.UseGraphicAlpha = outlineUseGraphicAlpha;
			cuiElement.Components.Add(cuiOutlineComponent);
		}
		if (!update)
		{
			container?.Add(cuiElement);
		}
		return new Pair<string, CuiElement>(id, cuiElement);
	}

	public Pair<string, CuiElement> CreateImage(CuiElementContainer container, string parent, string url, string color, string material, float xMin = 0f, float xMax = 1f, float yMin = 0f, float yMax = 1f, float OxMin = 0f, float OxMax = 0f, float OyMin = 0f, float OyMax = 0f, float fadeIn = 0f, float fadeOut = 0f, bool needsCursor = false, bool needsKeyboard = false, string outlineColor = null, string outlineDistance = null, bool outlineUseGraphicAlpha = false, string id = null, string destroyUi = null, bool update = false)
	{
		if (id == null)
		{
			id = AppendId();
		}
		CuiElement cuiElement = new CuiElement
		{
			Parent = parent,
			Name = id,
			FadeOut = fadeOut,
			DestroyUi = destroyUi,
			Update = update
		};
		if (!update || (update && (xMin != 0f || xMax != 1f || yMin != 0f || yMax != 1f)))
		{
			CuiRectTransformComponent cuiRectTransformComponent = new CuiRectTransformComponent();
			cuiRectTransformComponent.AnchorMin = $"{xMin} {yMin}";
			cuiRectTransformComponent.AnchorMax = $"{xMax} {yMax}";
			cuiRectTransformComponent.OffsetMin = $"{OxMin} {OyMin}";
			cuiRectTransformComponent.OffsetMax = $"{OxMax} {OyMax}";
			cuiElement.Components.Add(cuiRectTransformComponent);
		}
		CuiRawImageComponent cuiRawImageComponent = new CuiRawImageComponent();
		if (material != null)
		{
			cuiRawImageComponent.Material = material;
		}
		cuiRawImageComponent.Url = url;
		cuiRawImageComponent.FadeIn = fadeIn;
		cuiRawImageComponent.Color = ProcessColor(color);
		cuiElement.Components.Add(cuiRawImageComponent);
		if (needsCursor)
		{
			cuiElement.Components.Add(new CuiNeedsCursorComponent());
		}
		if (needsKeyboard)
		{
			cuiElement.Components.Add(new CuiNeedsKeyboardComponent());
		}
		if (outlineColor != null)
		{
			CuiOutlineComponent cuiOutlineComponent = new CuiOutlineComponent();
			cuiOutlineComponent.Color = ProcessColor(outlineColor);
			cuiOutlineComponent.Distance = outlineDistance;
			cuiOutlineComponent.UseGraphicAlpha = outlineUseGraphicAlpha;
			cuiElement.Components.Add(cuiOutlineComponent);
		}
		if (!update)
		{
			container?.Add(cuiElement);
		}
		return new Pair<string, CuiElement>(id, cuiElement);
	}

	public Pair<string, CuiElement> CreateSprite(CuiElementContainer container, string parent, string sprite, string color, string material, float xMin = 0f, float xMax = 1f, float yMin = 0f, float yMax = 1f, float OxMin = 0f, float OxMax = 0f, float OyMin = 0f, float OyMax = 0f, float fadeIn = 0f, float fadeOut = 0f, bool needsCursor = false, bool needsKeyboard = false, string outlineColor = null, string outlineDistance = null, bool outlineUseGraphicAlpha = false, string id = null, string destroyUi = null, bool update = false)
	{
		if (id == null)
		{
			id = AppendId();
		}
		CuiElement cuiElement = new CuiElement
		{
			Parent = parent,
			Name = id,
			FadeOut = fadeOut,
			DestroyUi = destroyUi,
			Update = update
		};
		if (!update || (update && (xMin != 0f || xMax != 1f || yMin != 0f || yMax != 1f)))
		{
			CuiRectTransformComponent cuiRectTransformComponent = new CuiRectTransformComponent();
			cuiRectTransformComponent.AnchorMin = $"{xMin} {yMin}";
			cuiRectTransformComponent.AnchorMax = $"{xMax} {yMax}";
			cuiRectTransformComponent.OffsetMin = $"{OxMin} {OyMin}";
			cuiRectTransformComponent.OffsetMax = $"{OxMax} {OyMax}";
			cuiElement.Components.Add(cuiRectTransformComponent);
		}
		CuiRawImageComponent cuiRawImageComponent = new CuiRawImageComponent();
		if (material != null)
		{
			cuiRawImageComponent.Material = material;
		}
		cuiRawImageComponent.Sprite = sprite;
		cuiRawImageComponent.FadeIn = fadeIn;
		cuiRawImageComponent.Color = ProcessColor(color);
		cuiElement.Components.Add(cuiRawImageComponent);
		if (needsCursor)
		{
			cuiElement.Components.Add(new CuiNeedsCursorComponent());
		}
		if (needsKeyboard)
		{
			cuiElement.Components.Add(new CuiNeedsKeyboardComponent());
		}
		if (outlineColor != null)
		{
			CuiOutlineComponent cuiOutlineComponent = new CuiOutlineComponent();
			cuiOutlineComponent.Color = ProcessColor(outlineColor);
			cuiOutlineComponent.Distance = outlineDistance;
			cuiOutlineComponent.UseGraphicAlpha = outlineUseGraphicAlpha;
			cuiElement.Components.Add(cuiOutlineComponent);
		}
		if (!update)
		{
			container?.Add(cuiElement);
		}
		return new Pair<string, CuiElement>(id, cuiElement);
	}

	public Pair<string, CuiElement> CreateSimpleImage(CuiElementContainer container, string parent, string png, string sprite, string color, string material, float xMin = 0f, float xMax = 1f, float yMin = 0f, float yMax = 1f, float OxMin = 0f, float OxMax = 0f, float OyMin = 0f, float OyMax = 0f, float fadeIn = 0f, float fadeOut = 0f, bool needsCursor = false, bool needsKeyboard = false, string outlineColor = null, string outlineDistance = null, bool outlineUseGraphicAlpha = false, string id = null, string destroyUi = null, bool update = false)
	{
		if (id == null)
		{
			id = AppendId();
		}
		CuiElement cuiElement = new CuiElement
		{
			Parent = parent,
			Name = id,
			FadeOut = fadeOut,
			DestroyUi = destroyUi,
			Update = update
		};
		if (!update || (update && (xMin != 0f || xMax != 1f || yMin != 0f || yMax != 1f)))
		{
			CuiRectTransformComponent cuiRectTransformComponent = new CuiRectTransformComponent();
			cuiRectTransformComponent.AnchorMin = $"{xMin} {yMin}";
			cuiRectTransformComponent.AnchorMax = $"{xMax} {yMax}";
			cuiRectTransformComponent.OffsetMin = $"{OxMin} {OyMin}";
			cuiRectTransformComponent.OffsetMax = $"{OxMax} {OyMax}";
			cuiElement.Components.Add(cuiRectTransformComponent);
		}
		CuiImageComponent cuiImageComponent = new CuiImageComponent();
		cuiImageComponent.Png = png;
		cuiImageComponent.Sprite = sprite;
		cuiImageComponent.FadeIn = fadeIn;
		cuiImageComponent.Color = ProcessColor(color);
		if (material != null)
		{
			cuiImageComponent.Material = material;
		}
		cuiElement.Components.Add(cuiImageComponent);
		if (needsCursor)
		{
			cuiElement.Components.Add(new CuiNeedsCursorComponent());
		}
		if (needsKeyboard)
		{
			cuiElement.Components.Add(new CuiNeedsKeyboardComponent());
		}
		if (outlineColor != null)
		{
			CuiOutlineComponent cuiOutlineComponent = new CuiOutlineComponent();
			cuiOutlineComponent.Color = ProcessColor(outlineColor);
			cuiOutlineComponent.Distance = outlineDistance;
			cuiOutlineComponent.UseGraphicAlpha = outlineUseGraphicAlpha;
			cuiElement.Components.Add(cuiOutlineComponent);
		}
		if (!update)
		{
			container?.Add(cuiElement);
		}
		return new Pair<string, CuiElement>(id, cuiElement);
	}

	public Pair<string, CuiElement> CreateItemImage(CuiElementContainer container, string parent, int itemID, ulong skinID, string color, string material, float xMin = 0f, float xMax = 1f, float yMin = 0f, float yMax = 1f, float OxMin = 0f, float OxMax = 0f, float OyMin = 0f, float OyMax = 0f, float fadeIn = 0f, float fadeOut = 0f, bool needsCursor = false, bool needsKeyboard = false, string outlineColor = null, string outlineDistance = null, bool outlineUseGraphicAlpha = false, string id = null, string destroyUi = null, bool update = false)
	{
		if (id == null)
		{
			id = AppendId();
		}
		CuiElement cuiElement = new CuiElement
		{
			Parent = parent,
			Name = id,
			FadeOut = fadeOut,
			DestroyUi = destroyUi,
			Update = update
		};
		if (!update || (update && (xMin != 0f || xMax != 1f || yMin != 0f || yMax != 1f)))
		{
			CuiRectTransformComponent cuiRectTransformComponent = new CuiRectTransformComponent();
			cuiRectTransformComponent.AnchorMin = $"{xMin} {yMin}";
			cuiRectTransformComponent.AnchorMax = $"{xMax} {yMax}";
			cuiRectTransformComponent.OffsetMin = $"{OxMin} {OyMin}";
			cuiRectTransformComponent.OffsetMax = $"{OxMax} {OyMax}";
			cuiElement.Components.Add(cuiRectTransformComponent);
		}
		CuiImageComponent cuiImageComponent = new CuiImageComponent();
		if (material != null)
		{
			cuiImageComponent.Material = material;
		}
		cuiImageComponent.ItemId = itemID;
		cuiImageComponent.SkinId = skinID;
		cuiImageComponent.FadeIn = fadeIn;
		cuiImageComponent.Color = ProcessColor(color);
		cuiElement.Components.Add(cuiImageComponent);
		if (needsCursor)
		{
			cuiElement.Components.Add(new CuiNeedsCursorComponent());
		}
		if (needsKeyboard)
		{
			cuiElement.Components.Add(new CuiNeedsKeyboardComponent());
		}
		if (outlineColor != null)
		{
			CuiOutlineComponent cuiOutlineComponent = new CuiOutlineComponent();
			cuiOutlineComponent.Color = ProcessColor(outlineColor);
			cuiOutlineComponent.Distance = outlineDistance;
			cuiOutlineComponent.UseGraphicAlpha = outlineUseGraphicAlpha;
			cuiElement.Components.Add(cuiOutlineComponent);
		}
		if (!update)
		{
			container?.Add(cuiElement);
		}
		return new Pair<string, CuiElement>(id, cuiElement);
	}

	public Pair<string, CuiElement> CreateClientImage(CuiElementContainer container, string parent, string url, string color, string material, float xMin = 0f, float xMax = 1f, float yMin = 0f, float yMax = 1f, float OxMin = 0f, float OxMax = 0f, float OyMin = 0f, float OyMax = 0f, float fadeIn = 0f, float fadeOut = 0f, bool needsCursor = false, bool needsKeyboard = false, string outlineColor = null, string outlineDistance = null, bool outlineUseGraphicAlpha = false, string id = null, string destroyUi = null, bool update = false)
	{
		return CreateImage(container, parent, url, color, material, xMin, xMax, yMin, yMax, OxMin, OxMax, OyMin, OyMax, fadeIn, fadeOut, needsCursor, needsKeyboard, outlineColor, outlineDistance, outlineUseGraphicAlpha, id, destroyUi, update);
	}

	public Pair<string, CuiElement> CreateScrollView(CuiElementContainer container, string parent, bool vertical, bool horizontal, ScrollRect.MovementType movementType, float elasticity, bool inertia, float decelerationRate, float scrollSensitivity, string maskSoftness, out CuiRectTransform contentTransformComponent, out CuiScrollbar horizontalScrollBar, out CuiScrollbar verticalScrollBar, float xMin = 0f, float xMax = 1f, float yMin = 0f, float yMax = 1f, float OxMin = 0f, float OxMax = 0f, float OyMin = 0f, float OyMax = 0f, float fadeIn = 0f, float fadeOut = 0f, bool needsCursor = false, bool needsKeyboard = false, string id = null, string destroyUi = null, bool update = false)
	{
		if (id == null)
		{
			id = AppendId();
		}
		CuiElement cuiElement = new CuiElement
		{
			Parent = parent,
			Name = id,
			FadeOut = fadeOut,
			DestroyUi = destroyUi,
			Update = update
		};
		CuiScrollViewComponent cuiScrollViewComponent = new CuiScrollViewComponent();
		cuiScrollViewComponent.Vertical = vertical;
		cuiScrollViewComponent.Horizontal = horizontal;
		cuiScrollViewComponent.MovementType = movementType;
		cuiScrollViewComponent.Elasticity = elasticity;
		cuiScrollViewComponent.Inertia = inertia;
		cuiScrollViewComponent.DecelerationRate = decelerationRate;
		cuiScrollViewComponent.ScrollSensitivity = scrollSensitivity;
		cuiScrollViewComponent.ContentTransform = new CuiRectTransform();
		contentTransformComponent = cuiScrollViewComponent.ContentTransform;
		cuiScrollViewComponent.HorizontalScrollbar = new CuiScrollbar();
		horizontalScrollBar = cuiScrollViewComponent.HorizontalScrollbar;
		cuiScrollViewComponent.VerticalScrollbar = new CuiScrollbar();
		verticalScrollBar = cuiScrollViewComponent.VerticalScrollbar;
		cuiElement.Components.Add(cuiScrollViewComponent);
		if (!update || (update && (xMin != 0f || xMax != 1f || yMin != 0f || yMax != 1f)))
		{
			CuiRectTransformComponent cuiRectTransformComponent = new CuiRectTransformComponent();
			cuiRectTransformComponent.AnchorMin = $"{xMin} {yMin}";
			cuiRectTransformComponent.AnchorMax = $"{xMax} {yMax}";
			cuiRectTransformComponent.OffsetMin = $"{OxMin} {OyMin}";
			cuiRectTransformComponent.OffsetMax = $"{OxMax} {OyMax}";
			cuiElement.Components.Add(cuiRectTransformComponent);
		}
		if (needsCursor)
		{
			cuiElement.Components.Add(new CuiNeedsCursorComponent());
		}
		if (needsKeyboard)
		{
			cuiElement.Components.Add(new CuiNeedsKeyboardComponent());
		}
		if (!update)
		{
			container?.Add(cuiElement);
		}
		return new Pair<string, CuiElement>(id, cuiElement);
	}

	public static string RustToHexColor(string rustColor, float? alpha = null, bool includeAlpha = true)
	{
		string[] array = rustColor.Split(new char[1] { ' ' });
		Color color = new Color(array[0].ToFloat(), array[1].ToFloat(), array[2].ToFloat(), (!includeAlpha) ? 1f : (alpha ?? ((array.Length > 2) ? array[3].ToFloat() : 1f)));
		string text = (includeAlpha ? ColorUtility.ToHtmlStringRGBA(color) : ColorUtility.ToHtmlStringRGB(color));
		Array.Clear(array, 0, array.Length);
		return "#" + text;
	}

	public string GetFont(Handler.FontTypes type)
	{
		return type switch
		{
			Handler.FontTypes.Arial => "arial.ttf", 
			Handler.FontTypes.RobotoCondensedBold => "robotocondensed-bold.ttf", 
			Handler.FontTypes.RobotoCondensedRegular => "robotocondensed-regular.ttf", 
			Handler.FontTypes.PermanentMarker => "permanentmarker.ttf", 
			Handler.FontTypes.DroidSansMono => "droidsansmono.ttf", 
			_ => "robotocondensed-regular.ttf", 
		};
	}

	public void Send(CuiElementContainer container, BasePlayer player)
	{
		CuiHelper.AddUi(player, container);
	}

	public void Destroy(string name, BasePlayer player)
	{
		CuiHelper.DestroyUi(player, name);
	}

	public void Dispose()
	{
	}
}
