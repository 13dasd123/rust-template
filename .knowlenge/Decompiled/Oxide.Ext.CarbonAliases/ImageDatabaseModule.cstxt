using System;
using System.Collections.Generic;
using Oxide.Core;
using Oxide.Core.Plugins;

public class ImageDatabaseModule
{
	private static Plugin ImageLibrary;

	public ImageDatabaseModule()
	{
		ImageLibrary = Interface.GetMod().RootPluginManager.GetPlugin("ImageLibrary");
		if (ImageLibrary == null)
		{
			Interface.Oxide.LogWarning("ImageLibrary not found! Images will print errors!");
		}
		else
		{
			Interface.Oxide.LogInfo("ImageLibrary is being used in Carbon to Oxide Conversion...");
		}
	}

	public void QueueBatch(bool @override, IEnumerable<string> urls)
	{
		foreach (string url in urls)
		{
			ImageLibrary.Call<bool>("AddImage", new object[3] { url, url, 0uL });
		}
	}

	public void QueueBatch(float scale, bool @override, IEnumerable<string> urls)
	{
		foreach (string url in urls)
		{
			ImageLibrary.Call<bool>("AddImage", new object[3] { url, url, 0uL });
		}
	}

	public void AddMap(string key, string url)
	{
		ImageLibrary.Call<bool>("AddImage", new object[3] { url, key, 0uL });
	}

	public void RemoveMap(string key, string url)
	{
	}

	public uint GetImage(string key, float scale = 0f, bool silent = false)
	{
		return Convert.ToUInt32(ImageLibrary.Call<string>("GetImage", new object[1] { key }));
	}

	public string GetImageString(string key, float scale = 0f, bool silent = false)
	{
		return ImageLibrary.Call<string>("GetImage", new object[1] { key });
	}

	public void DeleteImage(string url, float scale = 0f)
	{
	}
}
