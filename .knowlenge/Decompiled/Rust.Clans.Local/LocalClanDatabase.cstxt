using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Facepunch;
using Facepunch.Sqlite;
using Oxide.Core;
using UnityEngine;

public class LocalClanDatabase : Database
{
	private const int Version = 1;

	private void CreateClansTable()
	{
		((Database)this).Execute("\r\n            CREATE TABLE IF NOT EXISTS clans\r\n            (\r\n                clan_id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,\r\n                name TEXT NOT NULL,\r\n                name_normalized TEXT NOT NULL,\r\n                created INTEGER NOT NULL,\r\n                deleted INTEGER NULL,\r\n                creator INTEGER NOT NULL,\r\n                motd TEXT,\r\n                motd_timestamp INTEGER,\r\n                motd_author INTEGER,\r\n                logo BLOB,\r\n                logo_timestamp INTEGER,\r\n                color INTEGER,\r\n                score INTEGER NOT NULL DEFAULT 0\r\n            );\r\n        ");
		((Database)this).Execute("CREATE UNIQUE INDEX IF NOT EXISTS clans_name_normalized ON clans (name_normalized) WHERE deleted IS NULL;");
		((Database)this).Execute("CREATE INDEX IF NOT EXISTS clans_score ON clans (score DESC) WHERE deleted IS NULL;");
	}

	public long? CreateClan(string name, ulong creatorSteamId)
	{
		string text = name.ToLowerInvariant().Normalize(NormalizationForm.FormKC);
		IntPtr intPtr = ((Database)this).Prepare("INSERT INTO clans (name, name_normalized, created, creator) VALUES (?, ?, ?, ?) RETURNING clan_id");
		Database.Bind<string>(intPtr, 1, name);
		Database.Bind<string>(intPtr, 2, text);
		Database.Bind<long>(intPtr, 3, ClanUtility.Timestamp());
		Database.Bind<ulong>(intPtr, 4, creatorSteamId);
		long num = ((Database)this).ExecuteAndReadQueryResult<long>(intPtr);
		if (num <= 0)
		{
			return null;
		}
		return num;
	}

	public ClanData? ReadClan(long clanId)
	{
		IntPtr intPtr = ((Database)this).Prepare("SELECT name, created, creator, motd, motd_timestamp, motd_author, logo, logo_timestamp, color, score FROM clans WHERE clan_id = ? AND deleted IS NULL");
		Database.Bind<long>(intPtr, 1, clanId);
		return ((Database)this).ExecuteAndReadQueryResult<ClanData>(intPtr, (Func<IntPtr, ClanData>)delegate(IntPtr stm)
		{
			//IL_0081: Unknown result type (might be due to invalid IL or missing references)
			//IL_0086: Unknown result type (might be due to invalid IL or missing references)
			ClanData result = default(ClanData);
			result.Name = Database.GetColumnValue<string>(stm, 0);
			result.Created = Database.GetColumnValue<long>(stm, 1);
			result.Creator = Database.GetColumnValue<ulong>(stm, 2);
			result.Motd = Database.GetColumnValue<string>(stm, 3);
			result.MotdTimestamp = Database.GetColumnValue<long>(stm, 4);
			result.MotdAuthor = Database.GetColumnValue<ulong>(stm, 5);
			result.Logo = Database.GetColumnValue<byte[]>(stm, 6);
			result.LogoTimestamp = Database.GetColumnValue<long>(stm, 7);
			result.Color = ColorEx.FromInt32(Database.GetColumnValue<int>(stm, 8));
			result.Score = Database.GetColumnValue<long>(stm, 9);
			return result;
		});
	}

	public bool UpdateClanMotd(long clanId, string newMotd, ulong authorSteamId)
	{
		((Database)this).Execute<string, long, ulong, long>("UPDATE clans SET motd = ?, motd_timestamp = ?, motd_author = ? WHERE clan_id = ? AND deleted IS NULL", newMotd, ClanUtility.Timestamp(), authorSteamId, clanId);
		return ((Database)this).AffectedRows > 0;
	}

	public bool UpdateClanLogo(long clanId, byte[] newLogo)
	{
		((Database)this).Execute<byte[], long, long>("UPDATE clans SET logo = ?, logo_timestamp = ? WHERE clan_id = ? AND deleted IS NULL", newLogo, ClanUtility.Timestamp(), clanId);
		return ((Database)this).AffectedRows > 0;
	}

	public bool UpdateClanColor(long clanId, Color32 newColor)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		((Database)this).Execute<int, long>("UPDATE clans SET color = ? WHERE clan_id = ? AND deleted IS NULL", ColorEx.ToInt32(newColor), clanId);
		return ((Database)this).AffectedRows > 0;
	}

	public bool DeleteClan(long clanId)
	{
		((Database)this).BeginTransaction();
		((Database)this).Execute<long, long>("UPDATE clans SET deleted = ? WHERE clan_id = ? AND deleted IS NULL", ClanUtility.Timestamp(), clanId);
		if (((Database)this).AffectedRows == 0)
		{
			((Database)this).Rollback();
			return false;
		}
		((Database)this).Execute<long>("DELETE FROM members WHERE clan_id = ?", clanId);
		((Database)this).Execute<long>("DELETE FROM invites WHERE clan_id = ?", clanId);
		((Database)this).Commit();
		return true;
	}

	public long? FindClanByMember(ulong memberSteamId)
	{
		long num = ((Database)this).Query<long, ulong>("SELECT clan_id FROM members WHERE user_id = ?", memberSteamId);
		if (num <= 0)
		{
			return null;
		}
		return num;
	}

	public List<ClanLeaderboardEntry> ListTopClans(int limit)
	{
		IntPtr intPtr = ((Database)this).Prepare("SELECT clan_id, name, score FROM clans ORDER BY score DESC LIMIT ?");
		Database.Bind<int>(intPtr, 1, Mathf.Clamp(limit, 10, 100));
		List<ClanLeaderboardEntry> list = Pool.Get<List<ClanLeaderboardEntry>>();
		((Database)this).ExecuteAndReadQueryResults<ClanLeaderboardEntry>(intPtr, list, (Func<IntPtr, ClanLeaderboardEntry>)delegate(IntPtr stm)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			ClanLeaderboardEntry result = default(ClanLeaderboardEntry);
			result.ClanId = Database.GetColumnValue<long>(stm, 0);
			result.Name = Database.GetColumnValue<string>(stm, 1);
			result.Score = Database.GetColumnValue<long>(stm, 2);
			return result;
		});
		return list;
	}

	public void Open(string rootFolder)
	{
		((Database)this).Open(Path.Combine(rootFolder, $"clans.{1}.db"), true);
		((Database)this).Execute("PRAGMA foreign_keys = ON");
		CreateClansTable();
		CreateRolesTable();
		CreateMembersTable();
		CreateInvitesTable();
		CreateLogsTable();
		CreateScoreEventsTable();
	}

	private void CreateInvitesTable()
	{
		((Database)this).Execute("\r\n            CREATE TABLE IF NOT EXISTS invites\r\n            (\r\n                clan_id INTEGER NOT NULL,\r\n                user_id INTEGER NOT NULL,\r\n                recruiter INTEGER NOT NULL,\r\n                timestamp INTEGER NOT NULL,\r\n                PRIMARY KEY (clan_id, user_id),\r\n                FOREIGN KEY (clan_id) REFERENCES clans (clan_id) ON DELETE CASCADE\r\n            ) WITHOUT ROWID;\r\n        ");
		((Database)this).Execute("\r\n            CREATE INDEX IF NOT EXISTS invites_player ON invites (user_id);\r\n        ");
	}

	public bool CreateInvite(long clanId, ulong steamId, ulong recruiterSteamId)
	{
		((Database)this).Execute<long, ulong, ulong, long>("\r\n            INSERT OR IGNORE INTO invites (clan_id, user_id, recruiter, timestamp)\r\n            SELECT ?1, ?2, ?3, ?4\r\n            FROM (SELECT 1)\r\n            WHERE NOT EXISTS (SELECT * FROM members m WHERE m.user_id = ?2);\r\n        ", clanId, steamId, recruiterSteamId, ClanUtility.Timestamp());
		return ((Database)this).AffectedRows > 0;
	}

	public bool AcceptInvite(long clanId, ulong steamId)
	{
		((Database)this).BeginTransaction();
		try
		{
			if (DeleteInvite(clanId, steamId) && CreateMember(clanId, steamId))
			{
				((Database)this).Commit();
				Interface.CallHook("OnClanMemberAdded", (object)clanId, (object)steamId);
				return true;
			}
			((Database)this).Rollback();
			return false;
		}
		catch
		{
			((Database)this).Rollback();
			throw;
		}
	}

	public List<ClanInvite> ListInvites(long clanId)
	{
		IntPtr intPtr = ((Database)this).Prepare("SELECT user_id, recruiter, timestamp FROM invites WHERE clan_id = ? ORDER BY timestamp ASC");
		Database.Bind<long>(intPtr, 1, clanId);
		List<ClanInvite> list = Pool.Get<List<ClanInvite>>();
		((Database)this).ExecuteAndReadQueryResults<ClanInvite>(intPtr, list, (Func<IntPtr, ClanInvite>)delegate(IntPtr stm)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			ClanInvite result = default(ClanInvite);
			result.SteamId = Database.GetColumnValue<ulong>(stm, 0);
			result.Recruiter = Database.GetColumnValue<ulong>(stm, 1);
			result.Timestamp = Database.GetColumnValue<long>(stm, 2);
			return result;
		});
		return list;
	}

	public List<ClanInvitation> ListInvitationsForPlayer(ulong steamId)
	{
		IntPtr intPtr = ((Database)this).Prepare("SELECT clan_id, recruiter, timestamp FROM invites WHERE user_id = ? ORDER BY timestamp ASC");
		Database.Bind<ulong>(intPtr, 1, steamId);
		List<ClanInvitation> list = Pool.Get<List<ClanInvitation>>();
		((Database)this).ExecuteAndReadQueryResults<ClanInvitation>(intPtr, list, (Func<IntPtr, ClanInvitation>)delegate(IntPtr stm)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			ClanInvitation result = default(ClanInvitation);
			result.ClanId = Database.GetColumnValue<long>(stm, 0);
			result.Recruiter = Database.GetColumnValue<ulong>(stm, 1);
			result.Timestamp = Database.GetColumnValue<long>(stm, 2);
			return result;
		});
		return list;
	}

	public bool DeleteInvite(long clanId, ulong steamId)
	{
		((Database)this).Execute<long, ulong>("DELETE FROM invites WHERE clan_id = ? AND user_id = ?", clanId, steamId);
		return ((Database)this).AffectedRows > 0;
	}

	public void DeleteAllInvites(ulong steamId)
	{
		((Database)this).Execute<ulong>("DELETE FROM invites WHERE user_id = ?", steamId);
	}

	private void CreateLogsTable()
	{
		((Database)this).Execute("\r\n            CREATE TABLE IF NOT EXISTS logs\r\n            (\r\n                clan_id INTEGER NOT NULL,\r\n                timestamp INTEGER NOT NULL,\r\n                event TEXT NOT NULL,\r\n                arg1 TEXT,\r\n                arg2 TEXT,\r\n                arg3 TEXT,\r\n                arg4 TEXT,\r\n                FOREIGN KEY (clan_id) REFERENCES clans (clan_id) ON DELETE CASCADE\r\n            );\r\n        ");
		((Database)this).Execute("\r\n            CREATE INDEX IF NOT EXISTS logs_ordered ON logs (clan_id, timestamp DESC);\r\n        ");
	}

	public void AppendLog(long clanId, string eventKey)
	{
		((Database)this).Execute<long, long, string>("INSERT INTO logs (clan_id, timestamp, event) VALUES (?, ?, ?)", clanId, ClanUtility.Timestamp(), eventKey);
	}

	public void AppendLog<T1>(long clanId, string eventKey, T1 arg1)
	{
		((Database)this).Execute<long, long, string, T1>("INSERT INTO logs (clan_id, timestamp, event, arg1) VALUES (?, ?, ?, ?)", clanId, ClanUtility.Timestamp(), eventKey, arg1);
	}

	public void AppendLog<T1, T2>(long clanId, string eventKey, T1 arg1, T2 arg2)
	{
		((Database)this).Execute<long, long, string, T1, T2>("INSERT INTO logs (clan_id, timestamp, event, arg1, arg2) VALUES (?, ?, ?, ?, ?)", clanId, ClanUtility.Timestamp(), eventKey, arg1, arg2);
	}

	public void AppendLog<T1, T2, T3>(long clanId, string eventKey, T1 arg1, T2 arg2, T3 arg3)
	{
		((Database)this).Execute<long, long, string, T1, T2, T3>("INSERT INTO logs (clan_id, timestamp, event, arg1, arg2, arg3) VALUES (?, ?, ?, ?, ?, ?)", clanId, ClanUtility.Timestamp(), eventKey, arg1, arg2, arg3);
	}

	public void AppendLog<T1, T2, T3, T4>(long clanId, string eventKey, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
	{
		((Database)this).Execute<long, long, string, T1, T2, T3, T4>("INSERT INTO logs (clan_id, timestamp, event, arg1, arg2, arg3, arg4) VALUES (?, ?, ?, ?, ?, ?, ?)", clanId, ClanUtility.Timestamp(), eventKey, arg1, arg2, arg3, arg4);
	}

	public List<ClanLogEntry> ReadLogs(long clanId, int limit)
	{
		IntPtr intPtr = ((Database)this).Prepare("SELECT timestamp, event, arg1, arg2, arg3, arg4 FROM logs WHERE clan_id = ? ORDER BY timestamp DESC LIMIT ?");
		Database.Bind<long>(intPtr, 1, clanId);
		Database.Bind<int>(intPtr, 2, Mathf.Clamp(limit, 10, 1000));
		List<ClanLogEntry> list = Pool.Get<List<ClanLogEntry>>();
		((Database)this).ExecuteAndReadQueryResults<ClanLogEntry>(intPtr, list, (Func<IntPtr, ClanLogEntry>)delegate(IntPtr stm)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_005c: Unknown result type (might be due to invalid IL or missing references)
			ClanLogEntry result = default(ClanLogEntry);
			result.Timestamp = Database.GetColumnValue<long>(stm, 0);
			result.EventKey = Database.GetColumnValue<string>(stm, 1);
			result.Arg1 = Database.GetColumnValue<string>(stm, 2);
			result.Arg2 = Database.GetColumnValue<string>(stm, 3);
			result.Arg3 = Database.GetColumnValue<string>(stm, 4);
			result.Arg4 = Database.GetColumnValue<string>(stm, 5);
			return result;
		});
		return list;
	}

	private void CreateMembersTable()
	{
		((Database)this).Execute("\r\n            CREATE TABLE IF NOT EXISTS members\r\n            (\r\n                clan_id INTEGER NOT NULL,\r\n                user_id INTEGER NOT NULL,\r\n                role_id INTEGER NOT NULL,\r\n                joined INTEGER NOT NULL,\r\n                seen INTEGER NOT NULL,\r\n                notes TEXT,\r\n                notes_timestamp INTEGER,\r\n                PRIMARY KEY (clan_id, user_id),\r\n                UNIQUE (user_id),\r\n                FOREIGN KEY (clan_id) REFERENCES clans (clan_id) ON DELETE CASCADE,\r\n                FOREIGN KEY (clan_id, role_id) REFERENCES roles (clan_id, role_id) ON UPDATE CASCADE ON DELETE RESTRICT\r\n            ) WITHOUT ROWID;\r\n        ");
	}

	public bool CreateMember(long clanId, ulong steamId)
	{
		((Database)this).Execute<long, ulong, long>("\r\n            INSERT OR IGNORE INTO members (clan_id, user_id, role_id, joined, seen)\r\n            SELECT ?1, ?2, MAX(r.role_id), ?3, ?3\r\n            FROM (SELECT role_id FROM roles WHERE clan_id = ?1 ORDER BY rank DESC LIMIT 1) r\r\n        ", clanId, steamId, ClanUtility.Timestamp());
		return ((Database)this).AffectedRows > 0;
	}

	public bool CreateMember(long clanId, ulong steamId, int roleId)
	{
		((Database)this).Execute<long, ulong, int, long>("INSERT INTO members (clan_id, user_id, role_id, joined, seen) VALUES (?1, ?2, ?3, ?4, ?4)", clanId, steamId, roleId, ClanUtility.Timestamp());
		return ((Database)this).AffectedRows > 0;
	}

	public List<ClanMember> ListMembers(long clanId)
	{
		IntPtr intPtr = ((Database)this).Prepare("\r\n            SELECT m.user_id, m.role_id, m.joined, m.seen, m.notes, m.notes_timestamp\r\n            FROM members m\r\n            LEFT JOIN roles r ON r.clan_id = ?1 AND r.role_id = m.role_id\r\n            WHERE m.clan_id = ?1\r\n            ORDER BY r.rank ASC, joined ASC\r\n        ");
		Database.Bind<long>(intPtr, 1, clanId);
		List<ClanMember> list = Pool.Get<List<ClanMember>>();
		((Database)this).ExecuteAndReadQueryResults<ClanMember>(intPtr, list, (Func<IntPtr, ClanMember>)delegate(IntPtr stm)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_005c: Unknown result type (might be due to invalid IL or missing references)
			ClanMember result = default(ClanMember);
			result.SteamId = Database.GetColumnValue<ulong>(stm, 0);
			result.RoleId = Database.GetColumnValue<int>(stm, 1);
			result.Joined = Database.GetColumnValue<long>(stm, 2);
			result.LastSeen = Database.GetColumnValue<long>(stm, 3);
			result.Notes = Database.GetColumnValue<string>(stm, 4);
			result.NotesTimestamp = Database.GetColumnValue<long>(stm, 5);
			return result;
		});
		return list;
	}

	public bool UpdateMemberLastSeen(long clanId, ulong steamId)
	{
		((Database)this).Execute<long, long, ulong>("UPDATE members SET seen = ? WHERE clan_id = ? AND user_id = ?", ClanUtility.Timestamp(), clanId, steamId);
		return ((Database)this).AffectedRows > 0;
	}

	public bool UpdateMemberRole(long clanId, ulong steamId, int newRoleId)
	{
		((Database)this).Execute<int, long, ulong>("UPDATE members SET role_id = ? WHERE clan_id = ? AND user_id = ?", newRoleId, clanId, steamId);
		return ((Database)this).AffectedRows > 0;
	}

	public bool UpdateMemberNotes(long clanId, ulong steamId, string newNotes)
	{
		((Database)this).Execute<string, long, long, ulong>("UPDATE members SET notes = ?, notes_timestamp = ? WHERE clan_id = ? AND user_id = ?", newNotes, ClanUtility.Timestamp(), clanId, steamId);
		return ((Database)this).AffectedRows > 0;
	}

	public bool DeleteMember(long clanId, ulong steamId)
	{
		((Database)this).Execute<long, ulong>("DELETE FROM members WHERE clan_id = ? AND user_id = ?", clanId, steamId);
		return ((Database)this).AffectedRows > 0;
	}

	private void CreateRolesTable()
	{
		((Database)this).Execute("\r\n            CREATE TABLE IF NOT EXISTS roles\r\n            (\r\n                clan_id INTEGER NOT NULL,\r\n                role_id INTEGER NOT NULL,\r\n                rank INTEGER NOT NULL,\r\n                name TEXT NOT NULL,\r\n                can_set_motd BOOLEAN NOT NULL DEFAULT FALSE,\r\n                can_set_logo BOOLEAN NOT NULL DEFAULT FALSE,\r\n                can_invite BOOLEAN NOT NULL DEFAULT FALSE,\r\n                can_kick BOOLEAN NOT NULL DEFAULT FALSE,\r\n                can_promote BOOLEAN NOT NULL DEFAULT FALSE,\r\n                can_demote BOOLEAN NOT NULL DEFAULT FALSE,\r\n                can_set_player_notes BOOLEAN NOT NULL DEFAULT FALSE,\r\n                can_access_logs BOOLEAN NOT NULL DEFAULT FALSE,\r\n                can_access_score_events BOOLEAN NOT NULL DEFAULT FALSE,\r\n                PRIMARY KEY (clan_id, role_id),\r\n                FOREIGN KEY (clan_id) REFERENCES clans (clan_id) ON DELETE CASCADE,\r\n                UNIQUE (clan_id, name)\r\n            ) WITHOUT ROWID;\r\n        ");
	}

	public int? CreateRole(long clanId, ClanRole role)
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		IntPtr intPtr = ((Database)this).Prepare("\r\n            WITH next AS (\r\n\t            SELECT\r\n                    COALESCE(MAX(role_id), 0) + 1 AS role_id,\r\n                    COALESCE(MAX(rank), 0) + 1 AS rank\r\n                FROM roles r\r\n                WHERE r.clan_id = ?1\r\n            )\r\n            INSERT INTO roles (clan_id, role_id, rank, name, can_set_motd, can_set_logo, can_invite, can_kick, can_promote, can_demote, can_set_player_notes, can_access_logs, can_access_score_events)\r\n            SELECT ?1, next.role_id, next.rank, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9, ?10, ?11\r\n            FROM next\r\n            WHERE 1\r\n            RETURNING role_id\r\n        ");
		Database.Bind<long>(intPtr, 1, clanId);
		Database.Bind<string>(intPtr, 2, role.Name);
		Database.Bind<bool>(intPtr, 3, role.CanSetMotd);
		Database.Bind<bool>(intPtr, 4, role.CanSetLogo);
		Database.Bind<bool>(intPtr, 5, role.CanInvite);
		Database.Bind<bool>(intPtr, 6, role.CanKick);
		Database.Bind<bool>(intPtr, 7, role.CanPromote);
		Database.Bind<bool>(intPtr, 8, role.CanDemote);
		Database.Bind<bool>(intPtr, 9, role.CanSetPlayerNotes);
		Database.Bind<bool>(intPtr, 10, role.CanAccessLogs);
		Database.Bind<bool>(intPtr, 11, role.CanAccessScoreEvents);
		int num = ((Database)this).ExecuteAndReadQueryResult<int>(intPtr);
		if (num <= 0)
		{
			return null;
		}
		return num;
	}

	public List<ClanRole> ListRoles(long clanId)
	{
		IntPtr intPtr = ((Database)this).Prepare("\r\n            SELECT role_id, rank, name, can_set_motd, can_set_logo, can_invite, can_kick, can_promote, can_demote, can_set_player_notes, can_access_logs, can_access_score_events\r\n            FROM roles\r\n            WHERE clan_id = ?\r\n            ORDER BY rank ASC, role_id ASC\r\n        ");
		Database.Bind<long>(intPtr, 1, clanId);
		List<ClanRole> list = Pool.Get<List<ClanRole>>();
		((Database)this).ExecuteAndReadQueryResults<ClanRole>(intPtr, list, (Func<IntPtr, ClanRole>)delegate(IntPtr stm)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
			ClanRole result = default(ClanRole);
			result.RoleId = Database.GetColumnValue<int>(stm, 0);
			result.Rank = Database.GetColumnValue<int>(stm, 1);
			result.Name = Database.GetColumnValue<string>(stm, 2);
			result.CanSetMotd = Database.GetColumnValue<bool>(stm, 3);
			result.CanSetLogo = Database.GetColumnValue<bool>(stm, 4);
			result.CanInvite = Database.GetColumnValue<bool>(stm, 5);
			result.CanKick = Database.GetColumnValue<bool>(stm, 6);
			result.CanPromote = Database.GetColumnValue<bool>(stm, 7);
			result.CanDemote = Database.GetColumnValue<bool>(stm, 8);
			result.CanSetPlayerNotes = Database.GetColumnValue<bool>(stm, 9);
			result.CanAccessLogs = Database.GetColumnValue<bool>(stm, 10);
			result.CanAccessScoreEvents = Database.GetColumnValue<bool>(stm, 11);
			return result;
		});
		return list;
	}

	public bool UpdateRole(long clanId, ClanRole role)
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		IntPtr intPtr = ((Database)this).Prepare("\r\n            UPDATE roles\r\n            SET name = ?3, can_set_motd = ?4, can_set_logo = ?5, can_invite = ?6, can_kick = ?7, can_promote = ?8, can_demote = ?9, can_set_player_notes = ?10, can_access_logs = ?11, can_access_score_events = ?12\r\n            WHERE clan_id = ?1 AND role_id = ?2\r\n        ");
		Database.Bind<long>(intPtr, 1, clanId);
		Database.Bind<int>(intPtr, 2, role.RoleId);
		Database.Bind<string>(intPtr, 3, role.Name);
		Database.Bind<bool>(intPtr, 4, role.CanSetMotd);
		Database.Bind<bool>(intPtr, 5, role.CanSetLogo);
		Database.Bind<bool>(intPtr, 6, role.CanInvite);
		Database.Bind<bool>(intPtr, 7, role.CanKick);
		Database.Bind<bool>(intPtr, 8, role.CanPromote);
		Database.Bind<bool>(intPtr, 9, role.CanDemote);
		Database.Bind<bool>(intPtr, 10, role.CanSetPlayerNotes);
		Database.Bind<bool>(intPtr, 11, role.CanAccessLogs);
		Database.Bind<bool>(intPtr, 12, role.CanAccessScoreEvents);
		((Database)this).ExecuteQuery(intPtr);
		return ((Database)this).AffectedRows > 0;
	}

	public bool UpdateRoleName(long clanId, int roleId, string newRoleName)
	{
		((Database)this).Execute<long, int, string>("UPDATE OR IGNORE roles SET name = ?3 WHERE clan_id = ?1 AND role_id = ?2", clanId, roleId, newRoleName);
		return ((Database)this).AffectedRows > 0;
	}

	public bool SwapRoleRanks(long clanId, int roleIdA, int roleIdB)
	{
		((Database)this).BeginTransaction();
		try
		{
			int num = ((Database)this).Query<int, long, int>("SELECT rank FROM roles WHERE clan_id = ?1 AND role_id = ?2", clanId, roleIdA);
			int num2 = ((Database)this).Query<int, long, int>("SELECT rank FROM roles WHERE clan_id = ?1 AND role_id = ?2", clanId, roleIdB);
			if (num <= 0 || num2 <= 0)
			{
				((Database)this).Rollback();
				return false;
			}
			((Database)this).Execute<long, int, int>("UPDATE OR IGNORE roles SET rank = ?3 WHERE clan_id = ?1 AND role_id = ?2", clanId, roleIdA, num2);
			if (((Database)this).AffectedRows != 1)
			{
				((Database)this).Rollback();
				return false;
			}
			((Database)this).Execute<long, int, int>("UPDATE OR IGNORE roles SET rank = ?3 WHERE clan_id = ?1 AND role_id = ?2", clanId, roleIdB, num);
			if (((Database)this).AffectedRows != 1)
			{
				((Database)this).Rollback();
				return false;
			}
			((Database)this).Commit();
			return true;
		}
		catch
		{
			((Database)this).Rollback();
			throw;
		}
	}

	public bool DeleteRole(long clanId, int roleId)
	{
		((Database)this).Execute<long, int>("DELETE FROM roles WHERE clan_id = ? AND role_id = ?", clanId, roleId);
		return ((Database)this).AffectedRows > 0;
	}

	private void CreateScoreEventsTable()
	{
		((Database)this).Execute("\r\n            CREATE TABLE IF NOT EXISTS score_events\r\n            (\r\n                clan_id INTEGER NOT NULL,\r\n                timestamp INTEGER NOT NULL,\r\n                type INTEGER NOT NULL,\r\n                score INTEGER NOT NULL,\r\n                multiplier INTEGER NOT NULL,\r\n                user_id INTEGER,\r\n                other_user_id INTEGER,\r\n                other_clan_id INTEGER,\r\n                arg1 TEXT,\r\n                arg2 TEXT,\r\n                FOREIGN KEY (clan_id) REFERENCES clans (clan_id) ON DELETE CASCADE\r\n            );\r\n        ");
		((Database)this).Execute("\r\n            CREATE INDEX IF NOT EXISTS score_events_ordered ON logs (clan_id, timestamp DESC);\r\n        ");
	}

	public void AppendScoreEvent(long clanId, ClanScoreEvent e)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Expected I4, but got Unknown
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		long num = ((e.Timestamp > 0) ? e.Timestamp : ClanUtility.Timestamp());
		((Database)this).BeginTransaction();
		((Database)this).Execute<long, long, int, int, int, ulong?, ulong?, long?, string, string>("INSERT INTO score_events (clan_id, timestamp, type, score, multiplier, user_id, other_user_id, other_clan_id, arg1, arg2) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", clanId, num, (int)e.Type, e.Score, e.Multiplier, e.SteamId, e.OtherSteamId, e.OtherClanId, e.Arg1, e.Arg2);
		((Database)this).Execute<int, long>("UPDATE clans SET score = score + ? WHERE clan_id = ?", e.Score * e.Multiplier, clanId);
		((Database)this).Commit();
	}

	public List<ClanScoreEvent> ReadScoreEvents(long clanId, int limit)
	{
		IntPtr intPtr = ((Database)this).Prepare("SELECT timestamp, type, score, multiplier, user_id, other_user_id, other_clan_id, arg1, arg2 FROM score_events WHERE clan_id = ? ORDER BY timestamp DESC LIMIT ?");
		Database.Bind<long>(intPtr, 1, clanId);
		Database.Bind<int>(intPtr, 2, Mathf.Clamp(limit, 10, 1000));
		List<ClanScoreEvent> list = Pool.Get<List<ClanScoreEvent>>();
		((Database)this).ExecuteAndReadQueryResults<ClanScoreEvent>(intPtr, list, (Func<IntPtr, ClanScoreEvent>)delegate(IntPtr stm)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_001f: Unknown result type (might be due to invalid IL or missing references)
			//IL_008b: Unknown result type (might be due to invalid IL or missing references)
			ClanScoreEvent result = default(ClanScoreEvent);
			result.Timestamp = Database.GetColumnValue<long>(stm, 0);
			result.Type = (ClanScoreEventType)Database.GetColumnValue<int>(stm, 1);
			result.Score = Database.GetColumnValue<int>(stm, 2);
			result.Multiplier = Database.GetColumnValue<int>(stm, 3);
			result.SteamId = Database.GetColumnValue<ulong>(stm, 4);
			result.OtherSteamId = Database.GetColumnValue<ulong?>(stm, 5);
			result.OtherClanId = Database.GetColumnValue<long?>(stm, 6);
			result.Arg1 = Database.GetColumnValue<string>(stm, 7);
			result.Arg2 = Database.GetColumnValue<string>(stm, 8);
			return result;
		});
		return list;
	}
}
