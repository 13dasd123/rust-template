using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using Facepunch;
using Facepunch.Extend;
using Facepunch.Sqlite;
using Oxide.Core;
using UnityEngine;

public class LocalClan : IClan
{
	[StructLayout(LayoutKind.Auto)]
	[CompilerGenerated]
	private struct <Disband>d__72 : IAsyncStateMachine
	{
		public int <>1__state;

		public AsyncValueTaskMethodBuilder<ClanResult> <>t__builder;

		public LocalClan <>4__this;

		public ulong bySteamId;

		private void MoveNext()
		{
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
			//IL_0063: Unknown result type (might be due to invalid IL or missing references)
			//IL_0068: Unknown result type (might be due to invalid IL or missing references)
			//IL_0070: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
			int num = <>1__state;
			LocalClan localClan = <>4__this;
			ClanResult result;
			try
			{
				if (!localClan.TryGetRank(bySteamId, out var rank) || rank != 1)
				{
					result = (ClanResult)5;
				}
				else if (localClan._backend.Database.DeleteClan(localClan.ClanId))
				{
					localClan._backend.ClanDisbanded(localClan.ClanId);
					List<ClanMember>.Enumerator enumerator = localClan._members.GetEnumerator();
					try
					{
						while (enumerator.MoveNext())
						{
							ClanMember current = enumerator.Current;
							localClan._backend.MembershipChanged(current.SteamId, null);
						}
					}
					finally
					{
						if (num < 0)
						{
							((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
						}
					}
					result = (ClanResult)1;
				}
				else
				{
					result = (ClanResult)0;
				}
			}
			catch (Exception exception)
			{
				<>1__state = -2;
				<>t__builder.SetException(exception);
				return;
			}
			Interface.CallHook("OnClanDisbanded", (object)localClan, (object)bySteamId);
			<>1__state = -2;
			<>t__builder.SetResult(result);
		}

		void IAsyncStateMachine.MoveNext()
		{
			//ILSpy generated this explicit interface implementation from .override directive in MoveNext
			this.MoveNext();
		}

		[DebuggerHidden]
		private void SetStateMachine(IAsyncStateMachine stateMachine)
		{
			<>t__builder.SetStateMachine(stateMachine);
		}

		void IAsyncStateMachine.SetStateMachine(IAsyncStateMachine stateMachine)
		{
			//ILSpy generated this explicit interface implementation from .override directive in SetStateMachine
			this.SetStateMachine(stateMachine);
		}
	}

	private const int MaxChatScrollback = 20;

	private readonly LocalClanBackend _backend;

	private readonly List<ClanRole> _roles;

	private readonly List<ClanMember> _members;

	private readonly List<ClanInvite> _invites;

	private readonly List<ClanChatEntry> _chatHistory;

	private RealTimeSince _sinceLastRefresh;

	public long ClanId { get; }

	public string Name { get; private set; }

	public long Created { get; private set; }

	public ulong Creator { get; private set; }

	public string Motd { get; private set; }

	public long MotdTimestamp { get; private set; }

	public ulong MotdAuthor { get; private set; }

	public byte[] Logo { get; private set; }

	public Color32 Color { get; private set; }

	public long Score { get; private set; }

	public IReadOnlyList<ClanRole> Roles => _roles;

	public IReadOnlyList<ClanMember> Members => _members;

	public int MaxMemberCount => _backend.MaxMemberCount;

	public IReadOnlyList<ClanInvite> Invites => _invites;

	public LocalClan(LocalClanBackend backend, long clanId)
	{
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		_backend = backend ?? throw new ArgumentNullException("backend");
		ClanId = clanId;
		_roles = new List<ClanRole>();
		_members = new List<ClanMember>();
		_invites = new List<ClanInvite>();
		_chatHistory = new List<ClanChatEntry>(20);
		_sinceLastRefresh = RealTimeSince.op_Implicit(0f);
	}

	public bool Refresh(ClanDataSource sources = -1)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0185: Unknown result type (might be due to invalid IL or missing references)
		if (((Enum)sources).HasFlag((Enum)(object)(ClanDataSource)1) || ((Enum)sources).HasFlag((Enum)(object)(ClanDataSource)2) || ((Enum)sources).HasFlag((Enum)(object)(ClanDataSource)4))
		{
			ClanData? clanData = _backend.Database.ReadClan(ClanId);
			if (!clanData.HasValue)
			{
				return false;
			}
			ClanData value = clanData.Value;
			Name = value.Name;
			Created = value.Created;
			Creator = value.Creator;
			Motd = value.Motd;
			MotdTimestamp = value.MotdTimestamp;
			MotdAuthor = value.MotdAuthor;
			Logo = value.Logo;
			Color = value.Color;
			Score = value.Score;
		}
		if (((Enum)sources).HasFlag((Enum)(object)(ClanDataSource)8))
		{
			List<ClanRole> list = _backend.Database.ListRoles(ClanId);
			if (list.Count == 0)
			{
				Pool.FreeUnmanaged<ClanRole>(ref list);
				return false;
			}
			_roles.Clear();
			_roles.AddRange(list);
			Pool.FreeUnmanaged<ClanRole>(ref list);
		}
		if (((Enum)sources).HasFlag((Enum)(object)(ClanDataSource)16))
		{
			List<ClanMember> list2 = _backend.Database.ListMembers(ClanId);
			if (list2.Count == 0)
			{
				Pool.FreeUnmanaged<ClanMember>(ref list2);
				return false;
			}
			_members.Clear();
			_members.AddRange(list2);
			Pool.FreeUnmanaged<ClanMember>(ref list2);
		}
		if (((Enum)sources).HasFlag((Enum)(object)(ClanDataSource)32))
		{
			List<ClanInvite> collection = _backend.Database.ListInvites(ClanId);
			_invites.Clear();
			_invites.AddRange(collection);
			Pool.FreeUnmanaged<ClanInvite>(ref collection);
		}
		return true;
	}

	public async ValueTask RefreshIfStale()
	{
		if (RealTimeSince.op_Implicit(_sinceLastRefresh) > 30f)
		{
			_sinceLastRefresh = RealTimeSince.op_Implicit(0f);
			Refresh((ClanDataSource)(-1));
		}
	}

	public async ValueTask<ClanValueResult<ClanLogs>> GetLogs(int limit, ulong bySteamId)
	{
		if (!CheckRole(bySteamId, (ClanRole r) => r.CanAccessLogs))
		{
			return ClanValueResult<ClanLogs>.op_Implicit((ClanResult)5);
		}
		List<ClanLogEntry> entries = _backend.Database.ReadLogs(ClanId, limit);
		ClanLogs val = default(ClanLogs);
		val.ClanId = ClanId;
		val.Entries = entries;
		return new ClanValueResult<ClanLogs>(val);
	}

	public async ValueTask<ClanResult> UpdateLastSeen(ulong steamId)
	{
		return (ClanResult)(_backend.Database.UpdateMemberLastSeen(ClanId, steamId) ? 1 : 4);
	}

	public async ValueTask<ClanResult> SetMotd(string newMotd, ulong bySteamId)
	{
		if (!CheckRole(bySteamId, (ClanRole r) => r.CanSetMotd))
		{
			return (ClanResult)5;
		}
		if (newMotd == Motd)
		{
			return (ClanResult)1;
		}
		if (_backend.Database.UpdateClanMotd(ClanId, newMotd, bySteamId))
		{
			_backend.Database.AppendLog(ClanId, "set_motd", bySteamId, newMotd);
			Changed((ClanDataSource)2);
			return (ClanResult)1;
		}
		return (ClanResult)0;
	}

	public async ValueTask<ClanResult> SetLogo(byte[] newLogo, ulong bySteamId)
	{
		if (!CheckRole(bySteamId, (ClanRole r) => r.CanSetLogo))
		{
			return (ClanResult)5;
		}
		if (Logo != null && Logo.Length == newLogo.Length && Logo.SequenceEqual(newLogo))
		{
			return (ClanResult)1;
		}
		if (_backend.Database.UpdateClanLogo(ClanId, newLogo))
		{
			_backend.Database.AppendLog(ClanId, "set_logo", bySteamId);
			Changed((ClanDataSource)4);
			Interface.CallHook("OnClanLogoChanged", (object)this, (object)newLogo, (object)bySteamId);
			return (ClanResult)1;
		}
		return (ClanResult)0;
	}

	public async ValueTask<ClanResult> SetColor(Color32 newColor, ulong bySteamId)
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		if (!CheckRole(bySteamId, (ClanRole r) => r.CanSetLogo))
		{
			return (ClanResult)5;
		}
		if (ColorEx.ToInt32(Color) == ColorEx.ToInt32(newColor))
		{
			return (ClanResult)1;
		}
		if (_backend.Database.UpdateClanColor(ClanId, newColor))
		{
			_backend.Database.AppendLog(ClanId, "set_color", bySteamId, ColorEx.ToHex(newColor));
			Changed((ClanDataSource)1);
			Interface.CallHook("OnClanColorChanged", (object)this, (object)newColor, (object)bySteamId);
			return (ClanResult)1;
		}
		return (ClanResult)0;
	}

	public async ValueTask<ClanResult> Invite(ulong steamId, ulong bySteamId)
	{
		if (_backend.MaxMemberCount > 0 && _members.Count >= _backend.MaxMemberCount)
		{
			return (ClanResult)17;
		}
		if (!CheckRole(bySteamId, (ClanRole r) => r.CanInvite))
		{
			return (ClanResult)5;
		}
		if (_backend.Database.CreateInvite(ClanId, steamId, bySteamId))
		{
			_backend.Database.AppendLog(ClanId, "invite", bySteamId, steamId);
			Changed((ClanDataSource)32);
			_backend.InvitationCreated(steamId, ClanId);
			return (ClanResult)1;
		}
		return (ClanResult)0;
	}

	public async ValueTask<ClanResult> CancelInvite(ulong steamId, ulong bySteamId)
	{
		if (steamId != bySteamId && !CheckRole(bySteamId, (ClanRole r) => r.CanInvite))
		{
			return (ClanResult)5;
		}
		if (_backend.Database.DeleteInvite(ClanId, steamId))
		{
			if (steamId == bySteamId)
			{
				_backend.Database.AppendLog(ClanId, "decline_invite", bySteamId);
			}
			else
			{
				_backend.Database.AppendLog(ClanId, "cancel_invite", bySteamId, steamId);
			}
			Changed((ClanDataSource)32);
			return (ClanResult)1;
		}
		return (ClanResult)0;
	}

	public async ValueTask<ClanResult> AcceptInvite(ulong steamId)
	{
		if (_backend.MaxMemberCount > 0 && _members.Count >= _backend.MaxMemberCount)
		{
			return (ClanResult)17;
		}
		try
		{
			if (_backend.Database.AcceptInvite(ClanId, steamId))
			{
				_backend.Database.AppendLog(ClanId, "accept_invite", steamId);
				Changed((ClanDataSource)48);
				_backend.MembershipChanged(steamId, ClanId);
				return (ClanResult)1;
			}
		}
		catch (object obj) when (((Func<bool>)delegate
		{
			// Could not convert BlockContainer to single expression
			object obj2 = ((obj is SqliteException) ? obj : null);
			return obj2 != null && ((SqliteException)obj2).Result == 2067;
		}).Invoke())
		{
			return (ClanResult)15;
		}
		return (ClanResult)0;
	}

	public async ValueTask<ClanResult> Kick(ulong steamId, ulong bySteamId)
	{
		if (!TryGetRank(steamId, out var rank))
		{
			return (ClanResult)4;
		}
		bool flag = steamId == bySteamId;
		if (!flag)
		{
			if (!CheckRole(bySteamId, (ClanRole r) => r.CanKick))
			{
				return (ClanResult)5;
			}
			if (!TryGetRank(bySteamId, out var rank2))
			{
				return (ClanResult)4;
			}
			if (rank <= rank2 && rank2 != 1)
			{
				return (ClanResult)5;
			}
		}
		else
		{
			if (_members.Count == 1)
			{
				return await Disband(bySteamId);
			}
			if (rank == 1 && OtherLeaderCount(steamId) == 0)
			{
				return (ClanResult)13;
			}
		}
		if (_backend.Database.DeleteMember(ClanId, steamId))
		{
			if (flag)
			{
				Interface.CallHook("OnClanMemberLeft", (object)this, (object)steamId);
				_backend.Database.AppendLog(ClanId, "leave", steamId);
			}
			else
			{
				Interface.CallHook("OnClanMemberKicked", (object)this, (object)steamId, (object)bySteamId);
				_backend.Database.AppendLog(ClanId, "kick", bySteamId, steamId);
			}
			Changed((ClanDataSource)16);
			_backend.MembershipChanged(steamId, null);
			return (ClanResult)1;
		}
		return (ClanResult)0;
	}

	public async ValueTask<ClanResult> SetPlayerRole(ulong steamId, int newRoleId, ulong bySteamId)
	{
		ClanMember? val = List.TryFindWith<ClanMember, ulong>((IReadOnlyCollection<ClanMember>)_members, (Func<ClanMember, ulong>)((ClanMember m) => m.SteamId), steamId, (IEqualityComparer<ulong>)null);
		if (!val.HasValue)
		{
			return (ClanResult)4;
		}
		ClanRole? val2 = List.TryFindWith<ClanRole, int>((IReadOnlyCollection<ClanRole>)_roles, (Func<ClanRole, int>)((ClanRole r) => r.RoleId), val.Value.RoleId, (IEqualityComparer<int>)null);
		if (!val2.HasValue)
		{
			return (ClanResult)0;
		}
		ClanRole? val3 = List.TryFindWith<ClanRole, int>((IReadOnlyCollection<ClanRole>)_roles, (Func<ClanRole, int>)((ClanRole r) => r.RoleId), newRoleId, (IEqualityComparer<int>)null);
		if (!val3.HasValue)
		{
			return (ClanResult)4;
		}
		if (!TryGetRank(bySteamId, out var rank))
		{
			return (ClanResult)4;
		}
		if (val2.Value.Rank <= rank && rank != 1)
		{
			return (ClanResult)5;
		}
		if (val3.Value.Rank <= rank && rank != 1)
		{
			return (ClanResult)5;
		}
		if (!((val3.Value.Rank < val2.Value.Rank) ? CheckRole(bySteamId, (ClanRole r) => r.CanPromote) : CheckRole(bySteamId, (ClanRole r) => r.CanDemote)))
		{
			return (ClanResult)5;
		}
		if (val.Value.RoleId == newRoleId)
		{
			return (ClanResult)1;
		}
		if (rank == 1 && steamId == bySteamId && OtherLeaderCount(steamId) == 0)
		{
			return (ClanResult)14;
		}
		if (_backend.Database.UpdateMemberRole(ClanId, steamId, newRoleId))
		{
			_backend.Database.AppendLog(ClanId, "change_role", bySteamId, steamId, val2.Value.Name, val3.Value.Name);
			Changed((ClanDataSource)16);
			return (ClanResult)1;
		}
		return (ClanResult)0;
	}

	public async ValueTask<ClanResult> SetPlayerNotes(ulong steamId, string newNotes, ulong bySteamId)
	{
		if (!CheckRole(bySteamId, (ClanRole r) => r.CanSetPlayerNotes))
		{
			return (ClanResult)5;
		}
		ClanMember? val = List.TryFindWith<ClanMember, ulong>((IReadOnlyCollection<ClanMember>)_members, (Func<ClanMember, ulong>)((ClanMember m) => m.SteamId), steamId, (IEqualityComparer<ulong>)null);
		if (!val.HasValue)
		{
			return (ClanResult)4;
		}
		if (val.Value.Notes == newNotes)
		{
			return (ClanResult)1;
		}
		if (_backend.Database.UpdateMemberNotes(ClanId, steamId, newNotes))
		{
			_backend.Database.AppendLog(ClanId, "set_notes", bySteamId, steamId, newNotes);
			Changed((ClanDataSource)16);
			return (ClanResult)1;
		}
		return (ClanResult)0;
	}

	public async ValueTask<ClanResult> CreateRole(ClanRole role, ulong bySteamId)
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		if (string.IsNullOrWhiteSpace(role.Name))
		{
			return (ClanResult)6;
		}
		if (!TryGetRank(bySteamId, out var rank) || rank != 1)
		{
			return (ClanResult)5;
		}
		try
		{
			if (_backend.Database.CreateRole(ClanId, role).HasValue)
			{
				_backend.Database.AppendLog(ClanId, "create_role", bySteamId, role.Name);
				Changed((ClanDataSource)8);
				return (ClanResult)1;
			}
		}
		catch (object obj) when (((Func<bool>)delegate
		{
			// Could not convert BlockContainer to single expression
			object obj2 = ((obj is SqliteException) ? obj : null);
			return obj2 != null && ((SqliteException)obj2).Result == 2067;
		}).Invoke())
		{
			return (ClanResult)9;
		}
		return (ClanResult)0;
	}

	public async ValueTask<ClanResult> UpdateRole(ClanRole role, ulong bySteamId)
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		if (string.IsNullOrWhiteSpace(role.Name))
		{
			return (ClanResult)6;
		}
		if (!TryGetRank(bySteamId, out var rank) || rank != 1)
		{
			return (ClanResult)5;
		}
		ClanRole? val = List.TryFindWith<ClanRole, int>((IReadOnlyCollection<ClanRole>)_roles, (Func<ClanRole, int>)((ClanRole r) => r.RoleId), role.RoleId, (IEqualityComparer<int>)null);
		if (!val.HasValue)
		{
			return (ClanResult)4;
		}
		try
		{
			if ((val.Value.Rank == 1) ? _backend.Database.UpdateRoleName(ClanId, role.RoleId, role.Name) : _backend.Database.UpdateRole(ClanId, role))
			{
				if (role.Name != val.Value.Name)
				{
					_backend.Database.AppendLog(ClanId, "update_role_renamed", bySteamId, val.Value.Name, role.Name);
				}
				else
				{
					_backend.Database.AppendLog(ClanId, "update_role", bySteamId, role.Name);
				}
				Changed((ClanDataSource)8);
				return (ClanResult)1;
			}
		}
		catch (object obj) when (((Func<bool>)delegate
		{
			// Could not convert BlockContainer to single expression
			object obj2 = ((obj is SqliteException) ? obj : null);
			return obj2 != null && ((SqliteException)obj2).Result == 2067;
		}).Invoke())
		{
			return (ClanResult)9;
		}
		return (ClanResult)0;
	}

	public async ValueTask<ClanResult> SwapRoleRanks(int roleIdA, int roleIdB, ulong bySteamId)
	{
		if (!TryGetRank(bySteamId, out var rank) || rank != 1)
		{
			return (ClanResult)5;
		}
		ClanRole? val = List.TryFindWith<ClanRole, int>((IReadOnlyCollection<ClanRole>)_roles, (Func<ClanRole, int>)((ClanRole r) => r.RoleId), roleIdA, (IEqualityComparer<int>)null);
		if (!val.HasValue)
		{
			return (ClanResult)4;
		}
		ClanRole? val2 = List.TryFindWith<ClanRole, int>((IReadOnlyCollection<ClanRole>)_roles, (Func<ClanRole, int>)((ClanRole r) => r.RoleId), roleIdB, (IEqualityComparer<int>)null);
		if (!val2.HasValue)
		{
			return (ClanResult)4;
		}
		if (val.Value.Rank == 1 || val2.Value.Rank == 1)
		{
			return (ClanResult)11;
		}
		if (_backend.Database.SwapRoleRanks(ClanId, roleIdA, roleIdB))
		{
			_backend.Database.AppendLog(ClanId, "swap_roles", bySteamId, val.Value.Name, val2.Value.Name);
			Changed((ClanDataSource)8);
			return (ClanResult)1;
		}
		return (ClanResult)0;
	}

	public async ValueTask<ClanResult> DeleteRole(int roleId, ulong bySteamId)
	{
		if (!TryGetRank(bySteamId, out var rank) || rank != 1)
		{
			return (ClanResult)5;
		}
		ClanRole? val = List.TryFindWith<ClanRole, int>((IReadOnlyCollection<ClanRole>)_roles, (Func<ClanRole, int>)((ClanRole r) => r.RoleId), roleId, (IEqualityComparer<int>)null);
		if (!val.HasValue)
		{
			return (ClanResult)4;
		}
		if (val.Value.Rank == 1)
		{
			return (ClanResult)12;
		}
		bool flag;
		try
		{
			flag = _backend.Database.DeleteRole(ClanId, roleId);
		}
		catch (object obj) when (((Func<bool>)delegate
		{
			// Could not convert BlockContainer to single expression
			object obj2 = ((obj is SqliteException) ? obj : null);
			Unsafe.SkipInit(out int result);
			if (obj2 == null)
			{
				result = 0;
			}
			else
			{
				SqliteException val2 = (SqliteException)obj2;
				result = ((val2.Result == 787 || val2.Result == 1811) ? 1 : 0);
			}
			return (byte)result != 0;
		}).Invoke())
		{
			return (ClanResult)10;
		}
		if (flag)
		{
			_backend.Database.AppendLog(ClanId, "delete_role", bySteamId, val.Value.Name);
			Changed((ClanDataSource)8);
			return (ClanResult)1;
		}
		return (ClanResult)0;
	}

	[AsyncStateMachine(typeof(<Disband>d__72))]
	public ValueTask<ClanResult> Disband(ulong bySteamId)
	{
		<Disband>d__72 stateMachine = default(<Disband>d__72);
		stateMachine.<>t__builder = AsyncValueTaskMethodBuilder<ClanResult>.Create();
		stateMachine.<>4__this = this;
		stateMachine.bySteamId = bySteamId;
		stateMachine.<>1__state = -1;
		stateMachine.<>t__builder.Start(ref stateMachine);
		return stateMachine.<>t__builder.Task;
	}

	public async ValueTask<ClanValueResult<ClanScoreEvents>> GetScoreEvents(int limit, ulong bySteamId)
	{
		if (!CheckRole(bySteamId, (ClanRole r) => r.CanAccessScoreEvents))
		{
			return ClanValueResult<ClanScoreEvents>.op_Implicit((ClanResult)5);
		}
		List<ClanScoreEvent> scoreEvents = _backend.Database.ReadScoreEvents(ClanId, limit);
		ClanScoreEvents val = default(ClanScoreEvents);
		val.ClanId = ClanId;
		val.ScoreEvents = scoreEvents;
		return new ClanValueResult<ClanScoreEvents>(val);
	}

	public async ValueTask<ClanResult> AddScoreEvent(ClanScoreEvent scoreEvent)
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		if (scoreEvent.Score == 0)
		{
			throw new ArgumentException("Score cannot be zero.", "scoreEvent");
		}
		if (scoreEvent.Multiplier == 0)
		{
			throw new ArgumentException("Multiplier cannot be zero.", "scoreEvent");
		}
		_backend.Database.AppendScoreEvent(ClanId, scoreEvent);
		Changed((ClanDataSource)64);
		return (ClanResult)1;
	}

	public async ValueTask<ClanValueResult<ClanChatScrollback>> GetChatScrollback()
	{
		ClanChatScrollback val = default(ClanChatScrollback);
		val.ClanId = ClanId;
		val.Entries = _chatHistory.ToList();
		return new ClanValueResult<ClanChatScrollback>(val);
	}

	public async ValueTask<ClanResult> SendChatMessage(string name, string message, ulong bySteamId)
	{
		if (!TryGetRank(bySteamId, out var _))
		{
			return (ClanResult)0;
		}
		string message2 = default(string);
		if (!ClanValidator.ValidateChatMessage(message, ref message2))
		{
			return (ClanResult)6;
		}
		ClanChatEntry val = default(ClanChatEntry);
		val.SteamId = bySteamId;
		val.Name = name;
		val.Message = message2;
		val.Time = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
		ClanChatEntry val2 = val;
		if (_chatHistory.Count >= 20)
		{
			_chatHistory.RemoveAt(0);
		}
		_chatHistory.Add(val2);
		_backend.ClanChatMessage(ClanId, val2);
		return (ClanResult)1;
	}

	private int OtherLeaderCount(ulong excludeSteamId)
	{
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		int num = 0;
		foreach (ClanMember member in _members)
		{
			if (member.SteamId != excludeSteamId && TryGetRank(member.SteamId, out var rank) && rank == 1)
			{
				num++;
			}
		}
		return num;
	}

	private bool CheckRole(ulong steamId, Func<ClanRole, bool> roleTest)
	{
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		ClanMember? val = List.TryFindWith<ClanMember, ulong>((IReadOnlyCollection<ClanMember>)_members, (Func<ClanMember, ulong>)((ClanMember m) => m.SteamId), steamId, (IEqualityComparer<ulong>)null);
		if (!val.HasValue)
		{
			return false;
		}
		ClanRole? val2 = List.TryFindWith<ClanRole, int>((IReadOnlyCollection<ClanRole>)_roles, (Func<ClanRole, int>)((ClanRole r) => r.RoleId), val.Value.RoleId, (IEqualityComparer<int>)null);
		if (!val2.HasValue)
		{
			return false;
		}
		if (val2.Value.Rank != 1)
		{
			return roleTest(val2.Value);
		}
		return true;
	}

	private bool TryGetRank(ulong steamId, out int rank)
	{
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		ClanMember? val = List.TryFindWith<ClanMember, ulong>((IReadOnlyCollection<ClanMember>)_members, (Func<ClanMember, ulong>)((ClanMember m) => m.SteamId), steamId, (IEqualityComparer<ulong>)null);
		if (!val.HasValue)
		{
			rank = int.MaxValue;
			return false;
		}
		ClanRole? val2 = List.TryFindWith<ClanRole, int>((IReadOnlyCollection<ClanRole>)_roles, (Func<ClanRole, int>)((ClanRole r) => r.RoleId), val.Value.RoleId, (IEqualityComparer<int>)null);
		if (!val2.HasValue)
		{
			rank = int.MaxValue;
			return false;
		}
		rank = val2.Value.Rank;
		return true;
	}

	private void Changed(ClanDataSource dataSources)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		_backend.ClanChanged(ClanId, dataSources);
		Refresh(dataSources);
	}
}
