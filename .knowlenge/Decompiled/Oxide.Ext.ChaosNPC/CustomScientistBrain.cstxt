using System.Collections.Generic;
using ConVar;
using Oxide.Ext.ChaosNPC;
using ProtoBuf;
using Rust;
using UnityEngine;
using UnityEngine.AI;

public class CustomScientistBrain : ScientistBrain
{
	public class CustomChaseState : BasicAIState
	{
		protected StateStatus status = StateStatus.Error;

		protected float nextPositionUpdateTime;

		protected float originalStopDistance;

		protected bool unreachableLastUpdate;

		protected float targetLostTime;

		protected float targetLastVisibleTime;

		protected NavMeshHit navmeshHit;

		public CustomChaseState()
			: base(AIState.Chase)
		{
			base.AgrresiveState = true;
		}

		public override void StateLeave(BaseAIBrain brain, BaseEntity entity)
		{
			base.StateLeave(brain, entity);
			while (true)
			{
				int num = -1965856127;
				while (true)
				{
					uint num2;
					switch ((num2 = (uint)(num ^ -2130995393)) % 4)
					{
					case 0u:
						break;
					default:
						return;
					case 2u:
						Stop();
						num = ((int)num2 * -2109232228) ^ -1894213402;
						continue;
					case 1u:
						brain.Navigator.StoppingDistance = originalStopDistance;
						num = (int)(num2 * 1770442703) ^ -1525340589;
						continue;
					case 3u:
						return;
					}
					break;
				}
			}
		}

		public override void StateEnter(BaseAIBrain brain, BaseEntity entity)
		{
			base.StateEnter(brain, entity);
			status = StateStatus.Error;
			if (brain.PathFinder == null)
			{
				goto IL_001a;
			}
			goto IL_00a5;
			IL_001a:
			int num = 492546013;
			goto IL_001f;
			IL_001f:
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ 0x12FD1840)) % 9)
				{
				case 6u:
					break;
				default:
					return;
				case 2u:
				{
					int num3;
					int num4;
					if ((entity as CustomScientistNPC).CurrentWeapon is BaseMelee)
					{
						num3 = -1607160910;
						num4 = num3;
					}
					else
					{
						num3 = -132907550;
						num4 = num3;
					}
					num = num3 ^ ((int)num2 * -1345339822);
					continue;
				}
				case 7u:
					brain.Navigator.StoppingDistance = 0.1f;
					num = ((int)num2 * -507176610) ^ -1793187174;
					continue;
				case 5u:
					goto IL_00a5;
				case 8u:
					originalStopDistance = brain.Navigator.StoppingDistance;
					num = (int)((num2 * 190905468) ^ 0xF2666B);
					continue;
				case 1u:
					return;
				case 4u:
					brain.Navigator.SetCurrentSpeed(BaseNavigator.NavigationSpeed.Fast);
					num = 1028278464;
					continue;
				case 0u:
					targetLostTime = 0f;
					targetLastVisibleTime = UnityEngine.Time.time;
					num = ((int)num2 * -1620085680) ^ 0x693633AE;
					continue;
				case 3u:
					return;
				}
				break;
			}
			goto IL_001a;
			IL_00a5:
			status = StateStatus.Running;
			nextPositionUpdateTime = 0f;
			num = 313732231;
			goto IL_001f;
		}

		protected void Stop()
		{
			brain.Navigator.Stop();
			brain.Navigator.ClearFacingDirectionOverride();
		}

		public override StateStatus StateThink(float delta, BaseAIBrain brain, BaseEntity entity)
		{
			base.StateThink(delta, brain, entity);
			BaseEntity baseEntity = default(BaseEntity);
			Vector3 randomPositionAround = default(Vector3);
			CustomScientistNPC customScientistNPC = default(CustomScientistNPC);
			float num12 = default(float);
			while (true)
			{
				int num = -1279089991;
				while (true)
				{
					uint num2;
					switch ((num2 = (uint)(num ^ -1844729031)) % 41)
					{
					case 31u:
						break;
					case 27u:
						unreachableLastUpdate = true;
						num = (int)((num2 * 446503951) ^ 0x28B178D7);
						continue;
					case 20u:
						targetLostTime += delta;
						num = (int)(num2 * 1383431903) ^ -910148421;
						continue;
					case 10u:
						nextPositionUpdateTime = Random.Range(3f, 6f);
						num = (int)(num2 * 1374036266) ^ -1942453582;
						continue;
					case 30u:
						Stop();
						return StateStatus.Finished;
					case 14u:
					{
						Vector3 randomPositionAround2 = GetRandomPositionAround(baseEntity.transform.position, 3f, 10f);
						brain.Navigator.SetDestination(randomPositionAround2, BaseNavigator.NavigationSpeed.Fast, 0.1f);
						nextPositionUpdateTime = UnityEngine.Time.time + 3f;
						unreachableLastUpdate = false;
						num = (int)((num2 * 713858826) ^ 0x31C8E741);
						continue;
					}
					case 3u:
					{
						int num27;
						int num28;
						if (!brain.Navigator.SetDestination(randomPositionAround, BaseNavigator.NavigationSpeed.Fast))
						{
							num27 = 942014174;
							num28 = num27;
						}
						else
						{
							num27 = 1273487429;
							num28 = num27;
						}
						num = num27 ^ (int)(num2 * 1233164620);
						continue;
					}
					case 40u:
						return StateStatus.Finished;
					case 8u:
					{
						nextPositionUpdateTime = UnityEngine.Time.time + 0.1f;
						int num7;
						if (!brain.Navigator.Moving)
						{
							num = -1567413655;
							num7 = num;
						}
						else
						{
							num = -640379762;
							num7 = num;
						}
						continue;
					}
					case 26u:
					{
						int num24;
						int num25;
						if (Vector3.Distance(baseEntity.transform.position, customScientistNPC.Transform.position) > brain.Senses.TargetLostRange)
						{
							num24 = -1331876639;
							num25 = num24;
						}
						else
						{
							num24 = -563785244;
							num25 = num24;
						}
						num = num24 ^ ((int)num2 * -158291325);
						continue;
					}
					case 25u:
					{
						int num17;
						int num18;
						if (!(baseEntity == null))
						{
							num17 = 568706060;
							num18 = num17;
						}
						else
						{
							num17 = 1483314948;
							num18 = num17;
						}
						num = num17 ^ (int)(num2 * 1294887010);
						continue;
					}
					case 9u:
					{
						int num6;
						if (UnityEngine.Time.time <= nextPositionUpdateTime)
						{
							num = -640379762;
							num6 = num;
						}
						else
						{
							num = -1176017572;
							num6 = num;
						}
						continue;
					}
					case 6u:
					{
						int num32;
						int num33;
						if (targetLostTime > customScientistNPC.Settings.Sensory.TargetLostRangeTime)
						{
							num32 = 1790526092;
							num33 = num32;
						}
						else
						{
							num32 = 960101092;
							num33 = num32;
						}
						num = num32 ^ (int)(num2 * 230245378);
						continue;
					}
					case 34u:
						baseEntity = brain.Events.Memory.Entity.Get(brain.Events.CurrentInputMemorySlot);
						num = ((int)num2 * -1359085664) ^ -1989820311;
						continue;
					case 19u:
						brain.Events.Memory.Entity.Remove(brain.Events.CurrentInputMemorySlot);
						num = -966162855;
						continue;
					case 38u:
						return StateStatus.Error;
					case 21u:
					{
						int num21;
						int num22;
						if (baseEntity is BasePlayer)
						{
							num21 = 229892236;
							num22 = num21;
						}
						else
						{
							num21 = 2114082929;
							num22 = num21;
						}
						num = num21 ^ (int)(num2 * 609504469);
						continue;
					}
					case 15u:
					{
						int num15;
						int num16;
						if (customScientistNPC.CanTargetBasePlayer(baseEntity as BasePlayer))
						{
							num15 = 1452781871;
							num16 = num15;
						}
						else
						{
							num15 = 1133840670;
							num16 = num15;
						}
						num = num15 ^ ((int)num2 * -2037479142);
						continue;
					}
					case 16u:
						randomPositionAround = GetRandomPositionAround(ClosestPositionToTargetInHomeRange(customScientistNPC.HomePosition, customScientistNPC.Settings.ChaseRange, baseEntity), 1f, 10f);
						num = ((int)num2 * -1974040332) ^ -2016946503;
						continue;
					case 1u:
						return StateStatus.Running;
					case 12u:
						targetLostTime = 0f;
						num = -67028154;
						continue;
					case 4u:
					{
						int num8;
						int num9;
						if (!(customScientistNPC.CurrentWeapon is BaseProjectile))
						{
							num8 = 45596716;
							num9 = num8;
						}
						else
						{
							num8 = 1821065769;
							num9 = num8;
						}
						num = num8 ^ ((int)num2 * -1988070503);
						continue;
					}
					case 36u:
						return StateStatus.Finished;
					case 5u:
						Stop();
						num = ((int)num2 * -2031156943) ^ -1954625560;
						continue;
					case 23u:
					{
						int num30;
						int num31;
						if (unreachableLastUpdate)
						{
							num30 = 2093422346;
							num31 = num30;
						}
						else
						{
							num30 = 646061369;
							num31 = num30;
						}
						num = num30 ^ ((int)num2 * -1761796346);
						continue;
					}
					case 13u:
					{
						Vector3 randomPositionAround3 = GetRandomPositionAround(baseEntity.transform.position, 10f, customScientistNPC.EngagementRange() * 0.75f);
						int num29;
						if (!brain.Navigator.SetDestination(randomPositionAround3, BaseNavigator.NavigationSpeed.Fast))
						{
							num = -640379762;
							num29 = num;
						}
						else
						{
							num = -649680353;
							num29 = num;
						}
						continue;
					}
					case 11u:
					{
						brain.Navigator.SetDestination(baseEntity.transform.position, BaseNavigator.NavigationSpeed.Fast, 0.1f);
						int num26;
						if (brain.Navigator.Agent.path.status <= NavMeshPathStatus.PathComplete)
						{
							num = -1595363391;
							num26 = num;
						}
						else
						{
							num = -47484237;
							num26 = num;
						}
						continue;
					}
					case 35u:
					{
						num12 = Vector3.Distance(customScientistNPC.Transform.position, customScientistNPC.HomePosition);
						int num23;
						if (customScientistNPC.Settings.ChaseRange > 0f)
						{
							num = -982571877;
							num23 = num;
						}
						else
						{
							num = -1373201186;
							num23 = num;
						}
						continue;
					}
					case 24u:
						targetLastVisibleTime = UnityEngine.Time.time;
						num = -925421279;
						continue;
					case 17u:
					{
						int num19;
						int num20;
						if (UnityEngine.Time.time - targetLastVisibleTime > customScientistNPC.Settings.Sensory.TargetLostLOSTime)
						{
							num19 = 158588221;
							num20 = num19;
						}
						else
						{
							num19 = 1867097183;
							num20 = num19;
						}
						num = num19 ^ (int)(num2 * 1645241711);
						continue;
					}
					case 39u:
						return status;
					case 37u:
						return StateStatus.Running;
					case 32u:
						nextPositionUpdateTime = Random.Range(1f, 3f);
						num = ((int)num2 * -954749971) ^ 0x14F44BFB;
						continue;
					case 2u:
						FaceTarget(customScientistNPC, baseEntity);
						num = -1214978050;
						continue;
					case 28u:
					{
						int num13;
						int num14;
						if (num12 > customScientistNPC.Settings.ChaseRange)
						{
							num13 = -795610053;
							num14 = num13;
						}
						else
						{
							num13 = -998434340;
							num14 = num13;
						}
						num = num13 ^ ((int)num2 * -1346753615);
						continue;
					}
					case 18u:
					{
						int num10;
						int num11;
						if (status == StateStatus.Error)
						{
							num10 = 2056801413;
							num11 = num10;
						}
						else
						{
							num10 = 1611437915;
							num11 = num10;
						}
						num = num10 ^ ((int)num2 * -309019747);
						continue;
					}
					case 29u:
						Stop();
						num = (int)(num2 * 2057986417) ^ -542627159;
						continue;
					case 33u:
					{
						int num4;
						int num5;
						if (customScientistNPC.CanTargetEntity(baseEntity))
						{
							num4 = 563945827;
							num5 = num4;
						}
						else
						{
							num4 = 568227498;
							num5 = num4;
						}
						num = num4 ^ ((int)num2 * -1105975594);
						continue;
					}
					case 22u:
					{
						int num3;
						if (!brain.Senses.Memory.IsLOS(baseEntity))
						{
							num = -1940495269;
							num3 = num;
						}
						else
						{
							num = -2115241239;
							num3 = num;
						}
						continue;
					}
					case 7u:
						customScientistNPC = entity as CustomScientistNPC;
						num = -540142845;
						continue;
					default:
						return StateStatus.Running;
					}
					break;
				}
			}
		}

		protected void FaceTarget(CustomScientistNPC customNpc, BaseEntity baseEntity)
		{
			float num = Vector3.Distance(baseEntity.transform.position, customNpc.Transform.position);
			if (!(customNpc.CurrentWeapon is BaseProjectile))
			{
				goto IL_0029;
			}
			goto IL_006b;
			IL_0029:
			int num2 = 239765039;
			goto IL_002e;
			IL_002e:
			while (true)
			{
				uint num3;
				switch ((num3 = (uint)(num2 ^ 0x3430E204)) % 10)
				{
				case 2u:
					break;
				case 8u:
					goto IL_006b;
				case 5u:
					return;
				case 3u:
				{
					int num6;
					int num7;
					if (brain.Senses.Memory.IsLOS(baseEntity))
					{
						num6 = -211475257;
						num7 = num6;
					}
					else
					{
						num6 = -1157724530;
						num7 = num6;
					}
					num2 = num6 ^ (int)(num3 * 1176282360);
					continue;
				}
				case 4u:
					return;
				case 1u:
					brain.Navigator.SetFacingDirectionEntity(baseEntity);
					num2 = (int)(num3 * 366266554) ^ -485374006;
					continue;
				case 0u:
				{
					int num8;
					int num9;
					if (num <= 10f)
					{
						num8 = 139288709;
						num9 = num8;
					}
					else
					{
						num8 = 1842532042;
						num9 = num8;
					}
					num2 = num8 ^ (int)(num3 * 717110309);
					continue;
				}
				case 9u:
					brain.Navigator.SetFacingDirectionEntity(baseEntity);
					num2 = 57633279;
					continue;
				case 7u:
				{
					int num4;
					int num5;
					if (brain.Senses.Memory.IsLOS(baseEntity))
					{
						num4 = -12023510;
						num5 = num4;
					}
					else
					{
						num4 = -1695161623;
						num5 = num4;
					}
					num2 = num4 ^ ((int)num3 * -84314489);
					continue;
				}
				default:
					brain.Navigator.ClearFacingDirectionOverride();
					return;
				}
				break;
			}
			goto IL_0029;
			IL_006b:
			int num10;
			if (customNpc.CurrentWeapon is BaseProjectile)
			{
				num2 = 1805210573;
				num10 = num2;
			}
			else
			{
				num2 = 2047181846;
				num10 = num2;
			}
			goto IL_002e;
		}

		protected Vector3 ClosestPositionToTargetInHomeRange(Vector3 homePosition, float chaseRange, BaseEntity baseEntity)
		{
			float num = Vector3.Distance(baseEntity.transform.position, homePosition);
			if (num < chaseRange)
			{
				while (true)
				{
					uint num2;
					switch ((num2 = 1409775653u) % 3)
					{
					case 0u:
						continue;
					case 2u:
						return baseEntity.transform.position;
					}
					break;
				}
			}
			return Vector3.Lerp(homePosition, baseEntity.transform.position, chaseRange / num);
		}

		protected Vector3 GetRandomPositionAround(Vector3 position, float minDistFrom = 0f, float maxDistFrom = 2f)
		{
			if (maxDistFrom < 0f)
			{
				goto IL_0008;
			}
			goto IL_0077;
			IL_0008:
			int num = 460787022;
			goto IL_000d;
			IL_000d:
			Vector3 result = default(Vector3);
			Vector2 vector = default(Vector2);
			float x = default(float);
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ 0x168D39E7)) % 9)
				{
				case 2u:
					break;
				case 7u:
					maxDistFrom = 0f;
					num = (int)((num2 * 81739429) ^ 0x3B204FBA);
					continue;
				case 3u:
					result.y = TerrainMeta.HeightMap.GetHeight(position);
					num = 1678240679;
					continue;
				case 5u:
					goto IL_0077;
				case 1u:
				{
					float z = Mathf.Clamp(Mathf.Max(Mathf.Abs(vector.y), minDistFrom), minDistFrom, maxDistFrom) * Mathf.Sign(vector.y);
					result = position + new Vector3(x, 0f, z);
					num = (int)(num2 * 334621196) ^ -863408728;
					continue;
				}
				case 0u:
					result.y = navmeshHit.position.y;
					num = (int)(num2 * 1919786413) ^ -1392453808;
					continue;
				case 8u:
				{
					int num3;
					int num4;
					if (!NavMesh.SamplePosition(position, out navmeshHit, 50f, brain.Navigator.Agent.areaMask))
					{
						num3 = 192404415;
						num4 = num3;
					}
					else
					{
						num3 = 2063434958;
						num4 = num3;
					}
					num = num3 ^ ((int)num2 * -576652335);
					continue;
				}
				case 6u:
					num = (int)(num2 * 25632128) ^ -916115417;
					continue;
				default:
					return result;
				}
				break;
			}
			goto IL_0008;
			IL_0077:
			vector = Random.insideUnitCircle * maxDistFrom;
			x = Mathf.Clamp(Mathf.Max(Mathf.Abs(vector.x), minDistFrom), minDistFrom, maxDistFrom) * Mathf.Sign(vector.x);
			num = 578754178;
			goto IL_000d;
		}
	}

	public class CustomRoamState : BasicAIState
	{
		protected StateStatus status = StateStatus.Error;

		protected static readonly Vector3[] preferedTopologySamples = new Vector3[4];

		protected static readonly Vector3[] topologySamples;

		protected bool isAlert;

		private Vector3 \u202b\u202c\u200e\u206a\u202a\u206e\u200d\u206a\u200b\u202a\u202e\u206a\u202a\u202e\u206d\u206c\u202b\u200d\u200c\u206f\u200e\u206b\u206c\u202e\u206d\u206c\u200d\u202a\u206e\u202c\u200c\u200e\u202b\u202e\u206d\u206f\u206a\u202a\u206c\u200d\u202e;

		private float \u206f\u200d\u202b\u206e\u202c\u206c\u200b\u200b\u202a\u206b\u200d\u202e\u200c\u200b\u206a\u200d\u206a\u200f\u202c\u202c\u206a\u206d\u206a\u206c\u206e\u200e\u202e\u206d\u206d\u202c\u200f\u202d\u200e\u202a\u206e\u206b\u206c\u202d\u200b\u202d\u202e;

		public bool IsStuckSwimming()
		{
			return \u206f\u200d\u202b\u206e\u202c\u206c\u200b\u200b\u202a\u206b\u200d\u202e\u200c\u200b\u206a\u200d\u206a\u200f\u202c\u202c\u206a\u206d\u206a\u206c\u206e\u200e\u202e\u206d\u206d\u202c\u200f\u202d\u200e\u202a\u206e\u206b\u206c\u202d\u200b\u202d\u202e > 3f;
		}

		public CustomRoamState()
			: base(AIState.Roam)
		{
		}

		public override void StateEnter(BaseAIBrain brain, BaseEntity entity)
		{
			base.StateEnter(brain, entity);
			Vector3 pos = default(Vector3);
			CustomScientistNPC customScientistNPC = default(CustomScientistNPC);
			while (true)
			{
				int num = 567016098;
				while (true)
				{
					uint num2;
					Vector3 bestRoamPosition;
					switch ((num2 = (uint)(num ^ 0x658B4BF8)) % 16)
					{
					case 0u:
						break;
					case 5u:
						pos = GetBestRoamPosition(brain.Navigator, customScientistNPC.DestinationOverride, brain.Events.Memory.Position.Get(4), 0f, 20f);
						num = (int)(num2 * 155071105) ^ -90933360;
						continue;
					case 9u:
						return;
					case 2u:
						pos = brain.PathFinder.GetBestRoamPositionFromAnchor(brain.Navigator, customScientistNPC.Transform.position, brain.Events.Memory.Position.Get(4), 0f, 250f);
						num = (int)((num2 * 1295384562) ^ 0x50105D94);
						continue;
					case 7u:
					{
						int num4;
						if (!(customScientistNPC.DestinationOverride != Vector3.zero))
						{
							num = 2132341787;
							num4 = num;
						}
						else
						{
							num = 261187069;
							num4 = num;
						}
						continue;
					}
					case 10u:
					{
						status = StateStatus.Error;
						int num7;
						int num8;
						if (brain.PathFinder == null)
						{
							num7 = 1450780671;
							num8 = num7;
						}
						else
						{
							num7 = 1993026445;
							num8 = num7;
						}
						num = num7 ^ (int)(num2 * 1397684275);
						continue;
					}
					case 15u:
					{
						isAlert = customScientistNPC.IsAlert;
						int num5;
						int num6;
						if (brain.Navigator.IsSwimming())
						{
							num5 = 1592112848;
							num6 = num5;
						}
						else
						{
							num5 = 77449717;
							num6 = num5;
						}
						num = num5 ^ ((int)num2 * -1115869882);
						continue;
					}
					case 6u:
						status = StateStatus.Running;
						num = (int)((num2 * 467275279) ^ 0x2C21E563);
						continue;
					case 1u:
						return;
					case 8u:
						num = ((int)num2 * -1490106000) ^ -1009669284;
						continue;
					case 11u:
						customScientistNPC = entity as CustomScientistNPC;
						num = 1219665959;
						continue;
					case 4u:
					{
						int num3;
						if (brain.Navigator.SetDestination(pos, (!isAlert) ? BaseNavigator.NavigationSpeed.Slow : BaseNavigator.NavigationSpeed.Fast))
						{
							num = 350595918;
							num3 = num;
						}
						else
						{
							num = 1075139300;
							num3 = num;
						}
						continue;
					}
					case 13u:
						customScientistNPC.DestinationOverride = Vector3.zero;
						isAlert = true;
						num = ((int)num2 * -346324846) ^ -503917066;
						continue;
					case 3u:
						if (!(customScientistNPC.Settings.RoamRange <= 0f))
						{
							num = 539268486;
							continue;
						}
						bestRoamPosition = GetBestRoamPosition(brain.Navigator, customScientistNPC.Transform.position, brain.Events.Memory.Position.Get(4), 20f, 100f);
						goto IL_02c7;
					case 14u:
						bestRoamPosition = GetBestRoamPosition(brain.Navigator, customScientistNPC.HomePosition, brain.Events.Memory.Position.Get(4), 10f, customScientistNPC.Settings.RoamRange);
						goto IL_02c7;
					default:
						{
							status = StateStatus.Error;
							return;
						}
						IL_02c7:
						pos = bestRoamPosition;
						num = 1763591900;
						continue;
					}
					break;
				}
			}
		}

		public override void StateLeave(BaseAIBrain brain, BaseEntity entity)
		{
			base.StateLeave(brain, entity);
			while (true)
			{
				int num = 1338696414;
				while (true)
				{
					uint num2;
					switch ((num2 = (uint)(num ^ 0x3A238EF9)) % 6)
					{
					case 2u:
						break;
					default:
						return;
					case 5u:
						Stop();
						num = ((int)num2 * -983466263) ^ 0x3B475C0B;
						continue;
					case 3u:
					{
						int num3;
						int num4;
						if (!isAlert)
						{
							num3 = -1070308723;
							num4 = num3;
						}
						else
						{
							num3 = -41044914;
							num4 = num3;
						}
						num = num3 ^ (int)(num2 * 1001649481);
						continue;
					}
					case 1u:
						isAlert = false;
						num = 1789786625;
						continue;
					case 0u:
						(entity as CustomScientistNPC).IsAlert = false;
						num = ((int)num2 * -1543899872) ^ 0x2E92BCF8;
						continue;
					case 4u:
						return;
					}
					break;
				}
			}
		}

		public override StateStatus StateThink(float delta, BaseAIBrain brain, BaseEntity entity)
		{
			base.StateThink(delta, brain, entity);
			while (true)
			{
				int num = 1781085896;
				while (true)
				{
					uint num2;
					switch ((num2 = (uint)(num ^ 0x2A4C3EDF)) % 14)
					{
					case 2u:
						break;
					case 0u:
						\u202b\u202c\u200e\u206a\u202a\u206e\u200d\u206a\u200b\u202a\u202e\u206a\u202a\u202e\u206d\u206c\u202b\u200d\u200c\u206f\u200e\u206b\u206c\u202e\u206d\u206c\u200d\u202a\u206e\u202c\u200c\u200e\u202b\u202e\u206d\u206f\u206a\u202a\u206c\u200d\u202e = entity.transform.position;
						num = 1883934872;
						continue;
					case 6u:
					{
						int num5;
						if (brain.Navigator.Moving)
						{
							num = 439847391;
							num5 = num;
						}
						else
						{
							num = 557592631;
							num5 = num;
						}
						continue;
					}
					case 1u:
						\u206f\u200d\u202b\u206e\u202c\u206c\u200b\u200b\u202a\u206b\u200d\u202e\u200c\u200b\u206a\u200d\u206a\u200f\u202c\u202c\u206a\u206d\u206a\u206c\u206e\u200e\u202e\u206d\u206d\u202c\u200f\u202d\u200e\u202a\u206e\u206b\u206c\u202d\u200b\u202d\u202e = 0f;
						num = (int)((num2 * 1395674071) ^ 0x1EB1D695);
						continue;
					case 4u:
						return StateStatus.Running;
					case 10u:
						return StateStatus.Finished;
					case 5u:
						return status;
					case 13u:
					{
						int num6;
						int num7;
						if (status != StateStatus.Error)
						{
							num6 = -1621850277;
							num7 = num6;
						}
						else
						{
							num6 = -1835139577;
							num7 = num6;
						}
						num = num6 ^ ((int)num2 * -1564945361);
						continue;
					}
					case 3u:
					{
						int num9;
						if (entity.transform.position == \u202b\u202c\u200e\u206a\u202a\u206e\u200d\u206a\u200b\u202a\u202e\u206a\u202a\u202e\u206d\u206c\u202b\u200d\u200c\u206f\u200e\u206b\u206c\u202e\u206d\u206c\u200d\u202a\u206e\u202c\u200c\u200e\u202b\u202e\u206d\u206f\u206a\u202a\u206c\u200d\u202e)
						{
							num = 1559104864;
							num9 = num;
						}
						else
						{
							num = 176607353;
							num9 = num;
						}
						continue;
					}
					case 8u:
						return StateStatus.Running;
					case 7u:
					{
						int num8;
						if (brain.Navigator.IsSwimming())
						{
							num = 537807720;
							num8 = num;
						}
						else
						{
							num = 110796407;
							num8 = num;
						}
						continue;
					}
					case 9u:
					{
						int num3;
						int num4;
						if (!IsStuckSwimming())
						{
							num3 = 991186227;
							num4 = num3;
						}
						else
						{
							num3 = 583499355;
							num4 = num3;
						}
						num = num3 ^ ((int)num2 * -1480095862);
						continue;
					}
					case 11u:
						\u206f\u200d\u202b\u206e\u202c\u206c\u200b\u200b\u202a\u206b\u200d\u202e\u200c\u200b\u206a\u200d\u206a\u200f\u202c\u202c\u206a\u206d\u206a\u206c\u206e\u200e\u202e\u206d\u206d\u202c\u200f\u202d\u200e\u202a\u206e\u206b\u206c\u202d\u200b\u202d\u202e += delta;
						num = ((int)num2 * -1187398367) ^ -873901397;
						continue;
					default:
						return StateStatus.Finished;
					}
					break;
				}
			}
		}

		protected void Stop()
		{
			brain.Navigator.Stop();
		}

		protected Vector3 GetBestRoamPosition(BaseNavigator navigator, Vector3 localTo, Vector3 fallbackPos, float minRange, float maxRange)
		{
			int num = 0;
			int num6 = default(int);
			Vector3 position = default(Vector3);
			float num11 = default(float);
			Vector3 result = default(Vector3);
			while (true)
			{
				int num2 = -756767000;
				while (true)
				{
					uint num3;
					switch ((num3 = (uint)(num2 ^ -1043477845)) % 20)
					{
					case 0u:
						break;
					case 15u:
						num6 = 0;
						num2 = ((int)num3 * -372092571) ^ -1528976759;
						continue;
					case 13u:
						preferedTopologySamples[num6] = position;
						num2 = ((int)num3 * -1353111013) ^ 0x336F3061;
						continue;
					case 5u:
						num6++;
						num2 = (int)((num3 * 818008860) ^ 0x399509E2);
						continue;
					case 18u:
					{
						int num7;
						int num8;
						if (navigator.IsAcceptableWaterDepth(position))
						{
							num7 = 1533087508;
							num8 = num7;
						}
						else
						{
							num7 = 1288714114;
							num8 = num7;
						}
						num2 = num7 ^ (int)(num3 * 2052900166);
						continue;
					}
					case 12u:
					{
						int num15;
						int num16;
						if (num6 <= 0)
						{
							num15 = -1617779081;
							num16 = num15;
						}
						else
						{
							num15 = -101116583;
							num16 = num15;
						}
						num2 = num15 ^ ((int)num3 * -1219001520);
						continue;
					}
					case 9u:
						num11 = 0f;
						num2 = (int)(num3 * 210192046) ^ -1501823827;
						continue;
					case 14u:
						result = preferedTopologySamples[Random.Range(0, num6)];
						num2 = ((int)num3 * -217955334) ^ -1010325572;
						continue;
					case 4u:
						num2 = ((int)num3 * -1285689576) ^ 0x11177168;
						continue;
					case 6u:
					{
						int num9;
						int num10;
						if (navigator.IsPositionATopologyPreference(position))
						{
							num9 = -1002630402;
							num10 = num9;
						}
						else
						{
							num9 = -1225438754;
							num10 = num9;
						}
						num2 = num9 ^ (int)(num3 * 1741285416);
						continue;
					}
					case 7u:
						num++;
						num2 = (int)((num3 * 1438734654) ^ 0x2567E25B);
						continue;
					case 16u:
					{
						int num14;
						if (!(num11 >= 360f))
						{
							num2 = -543673294;
							num14 = num2;
						}
						else
						{
							num2 = -2049089643;
							num14 = num2;
						}
						continue;
					}
					case 8u:
					{
						int num13;
						if (num <= 0)
						{
							num2 = -109447804;
							num13 = num2;
						}
						else
						{
							num2 = -1443880387;
							num13 = num2;
						}
						continue;
					}
					case 17u:
					{
						Vector3 pointOnCircle = BasePathFinder.GetPointOnCircle(localTo, Random.Range(minRange, maxRange), num11 + Random.Range(0f, 90f));
						int num12;
						if (!navigator.GetNearestNavmeshPosition(pointOnCircle, out position, 20f))
						{
							num2 = -870993266;
							num12 = num2;
						}
						else
						{
							num2 = -1552225431;
							num12 = num2;
						}
						continue;
					}
					case 11u:
						result = fallbackPos;
						num2 = -1345254168;
						continue;
					case 1u:
						num11 += 90f;
						num2 = -258171653;
						continue;
					case 19u:
						topologySamples[num] = position;
						num2 = (int)((num3 * 2045841580) ^ 0x655EA538);
						continue;
					case 2u:
						result = topologySamples[Random.Range(0, num)];
						num2 = ((int)num3 * -1490329024) ^ 0x70525BBB;
						continue;
					case 10u:
					{
						int num4;
						int num5;
						if (Random.Range(0f, 1f) <= 0.9f)
						{
							num4 = -526561061;
							num5 = num4;
						}
						else
						{
							num4 = -832611473;
							num5 = num4;
						}
						num2 = num4 ^ ((int)num3 * -374623820);
						continue;
					}
					default:
						return result;
					}
					break;
				}
			}
		}

		static CustomRoamState()
		{
			while (true)
			{
				int num = -1826595061;
				while (true)
				{
					uint num2;
					switch ((num2 = (uint)(num ^ -1893699703)) % 3)
					{
					case 0u:
						break;
					default:
						return;
					case 2u:
						goto IL_002d;
					case 1u:
						return;
					}
					break;
					IL_002d:
					topologySamples = new Vector3[4];
					num = ((int)num2 * -2044520454) ^ -1040991842;
				}
			}
		}
	}

	public class FallingState : BasicAIState
	{
		protected bool canLeaveState;

		public FallingState()
			: base(AIState.Land)
		{
		}

		public override bool CanLeave()
		{
			return canLeaveState;
		}

		public override void StateEnter(BaseAIBrain brain, BaseEntity entity)
		{
			base.StateEnter(brain, entity);
			while (true)
			{
				int num = -1198247996;
				while (true)
				{
					uint num2;
					switch ((num2 = (uint)(num ^ -2067280595)) % 6)
					{
					case 2u:
						break;
					default:
						return;
					case 4u:
						brain.Navigator.Pause();
						num = (int)((num2 * 342075133) ^ 0x6F53F290);
						continue;
					case 0u:
						brain.Navigator.SetCurrentSpeed(BaseNavigator.NavigationSpeed.Slowest);
						num = ((int)num2 * -1956829542) ^ 0x7EA6A62F;
						continue;
					case 3u:
						(entity as CustomScientistNPC).HolsterWeapon();
						num = ((int)num2 * -1791673168) ^ 0x7EEC676F;
						continue;
					case 5u:
						canLeaveState = false;
						num = (int)(num2 * 545379006) ^ -2056757428;
						continue;
					case 1u:
						return;
					}
					break;
				}
			}
		}

		public override void StateLeave(BaseAIBrain brain, BaseEntity entity)
		{
			base.StateLeave(brain, entity);
			while (true)
			{
				int num = -475228458;
				while (true)
				{
					uint num2;
					switch ((num2 = (uint)(num ^ -1448418629)) % 4)
					{
					case 3u:
						break;
					default:
						return;
					case 1u:
						(entity as CustomScientistNPC).EquipWeapon();
						brain.Navigator.SetCurrentSpeed(BaseNavigator.NavigationSpeed.Slow);
						num = (int)(num2 * 826349658) ^ -76292271;
						continue;
					case 0u:
						brain.Navigator.Resume();
						num = (int)(num2 * 856808433) ^ -948517031;
						continue;
					case 2u:
						return;
					}
					break;
				}
			}
		}

		public override StateStatus StateThink(float delta, BaseAIBrain brain, BaseEntity entity)
		{
			base.StateThink(delta, brain, entity);
			CustomScientistNPC customScientistNPC = default(CustomScientistNPC);
			while (true)
			{
				int num = -714348616;
				while (true)
				{
					uint num2;
					switch ((num2 = (uint)(num ^ -1554778955)) % 5)
					{
					case 4u:
						break;
					case 1u:
						customScientistNPC = entity as CustomScientistNPC;
						num = ((int)num2 * -470434469) ^ -724027288;
						continue;
					case 3u:
						return StateStatus.Running;
					case 2u:
					{
						int num3;
						int num4;
						if (!customScientistNPC.modelState.flying)
						{
							num3 = -960633592;
							num4 = num3;
						}
						else
						{
							num3 = -171626251;
							num4 = num3;
						}
						num = num3 ^ ((int)num2 * -383616166);
						continue;
					}
					default:
						customScientistNPC.HomePosition = customScientistNPC.Transform.position;
						canLeaveState = true;
						return StateStatus.Finished;
					}
					break;
				}
			}
		}
	}

	public class MoveToDestinationState : BasicAIState
	{
		public MoveToDestinationState()
			: base(AIState.MoveToPoint)
		{
		}

		public override void StateEnter(BaseAIBrain brain, BaseEntity entity)
		{
			base.StateEnter(brain, entity);
			Vector3 pos = brain.Events.Memory.Position.Get(5);
			while (true)
			{
				int num = -967458394;
				while (true)
				{
					uint num2;
					switch ((num2 = (uint)(num ^ -1553277285)) % 3)
					{
					case 0u:
						break;
					default:
						return;
					case 1u:
						goto IL_0041;
					case 2u:
						return;
					}
					break;
					IL_0041:
					brain.Navigator.SetDestination(pos, BaseNavigator.NavigationSpeed.Fast, 0.25f);
					num = ((int)num2 * -1589594046) ^ 0x14A8B8EE;
				}
			}
		}

		public override StateStatus StateThink(float delta, BaseAIBrain brain, BaseEntity entity)
		{
			base.StateThink(delta, brain, entity);
			CustomScientistNPC customScientistNPC = default(CustomScientistNPC);
			Vector3 vector = default(Vector3);
			while (true)
			{
				int num = 1751615688;
				while (true)
				{
					uint num2;
					switch ((num2 = (uint)(num ^ 0x1D007B1C)) % 9)
					{
					case 0u:
						break;
					case 6u:
					{
						customScientistNPC = entity as CustomScientistNPC;
						vector = brain.Events.Memory.Position.Get(5);
						int num5;
						int num6;
						if (!brain.Navigator.SetDestination(vector, BaseNavigator.NavigationSpeed.Fast, 0.25f))
						{
							num5 = -1670725356;
							num6 = num5;
						}
						else
						{
							num5 = -104804027;
							num6 = num5;
						}
						num = num5 ^ (int)(num2 * 662826564);
						continue;
					}
					case 4u:
						customScientistNPC.\u200f\u200f\u206a\u200b\u206c\u202a\u202e\u202a\u202e\u206d\u206a\u206d\u200e\u206b\u206f\u200c\u206f\u202b\u202a\u206f\u202b\u202b\u206e\u202c\u200b\u200b\u206a\u202c\u200f\u200b\u206f\u202a\u206f\u200e\u206c\u202a\u206a\u202a\u202c\u202b\u202e = null;
						num = ((int)num2 * -1565395630) ^ -202565452;
						continue;
					case 3u:
						customScientistNPC.\u200f\u200f\u206a\u200b\u206c\u202a\u202e\u202a\u202e\u206d\u206a\u206d\u200e\u206b\u206f\u200c\u206f\u202b\u202a\u206f\u202b\u202b\u206e\u202c\u200b\u200b\u206a\u202c\u200f\u200b\u206f\u202a\u206f\u200e\u206c\u202a\u206a\u202a\u202c\u202b\u202e();
						num = (int)(num2 * 734192381) ^ -1529672699;
						continue;
					case 2u:
						return StateStatus.Error;
					case 7u:
					{
						int num7;
						if (Vector3.Distance(customScientistNPC.Transform.position, vector) >= 3f)
						{
							num = 1058801107;
							num7 = num;
						}
						else
						{
							num = 261552592;
							num7 = num;
						}
						continue;
					}
					case 8u:
						return StateStatus.Finished;
					case 1u:
					{
						int num3;
						int num4;
						if (customScientistNPC.\u200f\u200f\u206a\u200b\u206c\u202a\u202e\u202a\u202e\u206d\u206a\u206d\u200e\u206b\u206f\u200c\u206f\u202b\u202a\u206f\u202b\u202b\u206e\u202c\u200b\u200b\u206a\u202c\u200f\u200b\u206f\u202a\u206f\u200e\u206c\u202a\u206a\u202a\u202c\u202b\u202e != null)
						{
							num3 = 730194685;
							num4 = num3;
						}
						else
						{
							num3 = 832053504;
							num4 = num3;
						}
						num = num3 ^ ((int)num2 * -1679174877);
						continue;
					}
					default:
						return StateStatus.Running;
					}
					break;
				}
			}
		}
	}

	public class WoundedState : BasicAIState
	{
		protected bool canLeaveState;

		protected bool isIncapacitated;

		protected Vector3 destination;

		protected float woundedDuration;

		public WoundedState()
			: base(AIState.Orbit)
		{
		}

		public override bool CanLeave()
		{
			return canLeaveState;
		}

		public override void StateEnter(BaseAIBrain brain, BaseEntity entity)
		{
			base.StateEnter(brain, entity);
			CustomScientistNPC customScientistNPC = default(CustomScientistNPC);
			while (true)
			{
				int num = -1860009488;
				while (true)
				{
					uint num2;
					switch ((num2 = (uint)(num ^ -662771031)) % 15)
					{
					case 10u:
						break;
					case 9u:
						woundedDuration = Random.Range(customScientistNPC.Settings.WoundedDurationMin, customScientistNPC.Settings.WoundedDurationMax);
						brain.Navigator.SetCurrentSpeed(BaseNavigator.NavigationSpeed.Slowest);
						num = -1144381207;
						continue;
					case 0u:
						customScientistNPC.metabolism.bleeding.value = 0f;
						num = ((int)num2 * -191517682) ^ 0x67F61EAD;
						continue;
					case 14u:
						customScientistNPC.health = Random.Range(ConVar.Server.crawlingminimumhealth, ConVar.Server.crawlingmaximumhealth);
						num = ((int)num2 * -50417670) ^ -946393777;
						continue;
					case 8u:
						brain.Navigator.SetCurrentSpeed(BaseNavigator.NavigationSpeed.Slowest);
						num = (int)((num2 * 1149273801) ^ 0x3A5068B8);
						continue;
					case 2u:
						isIncapacitated = true;
						num = ((int)num2 * -1816126199) ^ 0x57288EF3;
						continue;
					case 11u:
						customScientistNPC.metabolism.bleeding.value = 0f;
						num = (int)((num2 * 496488963) ^ 0x39AF5498);
						continue;
					case 1u:
					{
						canLeaveState = false;
						customScientistNPC = entity as CustomScientistNPC;
						int num3;
						int num4;
						if (Random.value <= 0.5f)
						{
							num3 = -1150919084;
							num4 = num3;
						}
						else
						{
							num3 = -857113180;
							num4 = num3;
						}
						num = num3 ^ (int)(num2 * 972230986);
						continue;
					}
					case 4u:
						customScientistNPC.healingWhileCrawling = 0f;
						isIncapacitated = false;
						num = (int)((num2 * 427107736) ^ 0xB25AD22);
						continue;
					case 5u:
						customScientistNPC.SetServerFall(wantsOn: true);
						num = ((int)num2 * -1711678769) ^ 0x7397203D;
						continue;
					case 12u:
						customScientistNPC.SetPlayerFlag(BasePlayer.PlayerFlags.Incapacitated, b: true);
						num = ((int)num2 * -1906496004) ^ 0x2D54F52D;
						continue;
					case 6u:
						customScientistNPC.healingWhileCrawling = 0f;
						num = ((int)num2 * -776951084) ^ 0x62CC767D;
						continue;
					case 13u:
						destination = customScientistNPC.ServerPosition;
						num = ((int)num2 * -1369371625) ^ 0x4C84F01B;
						continue;
					case 7u:
						customScientistNPC.health = Random.Range(2f, 6f);
						num = -1076968356;
						continue;
					default:
						customScientistNPC.SendNetworkUpdateImmediate();
						return;
					}
					break;
				}
			}
		}

		public override void StateLeave(BaseAIBrain brain, BaseEntity entity)
		{
			base.StateLeave(brain, entity);
			CustomScientistNPC obj = entity as CustomScientistNPC;
			obj.SetPlayerFlag(BasePlayer.PlayerFlags.Wounded, b: false);
			obj.SetPlayerFlag(BasePlayer.PlayerFlags.Incapacitated, b: false);
			obj.SetServerFall(wantsOn: false);
		}

		public override StateStatus StateThink(float delta, BaseAIBrain brain, BaseEntity entity)
		{
			base.StateThink(delta, brain, entity);
			CustomScientistNPC customScientistNPC = entity as CustomScientistNPC;
			Vector2 insideUnitCircle = default(Vector2);
			while (true)
			{
				int num = -1554720221;
				while (true)
				{
					uint num2;
					switch ((num2 = (uint)(num ^ -1889541151)) % 15)
					{
					case 3u:
						break;
					case 1u:
						customScientistNPC.EquipWeapon();
						num = (int)(num2 * 2018447948) ^ -840563411;
						continue;
					case 10u:
						canLeaveState = true;
						return StateStatus.Finished;
					case 2u:
						customScientistNPC.Die();
						num = (int)(num2 * 1827326338) ^ -1119075366;
						continue;
					case 8u:
					{
						int num11;
						int num12;
						if ((float)Random.Range(0, 100) < customScientistNPC.Settings.WoundedRecoveryChance)
						{
							num11 = -1170757634;
							num12 = num11;
						}
						else
						{
							num11 = -252505975;
							num12 = num11;
						}
						num = num11 ^ (int)(num2 * 88686166);
						continue;
					}
					case 4u:
						customScientistNPC.SetPlayerFlag(BasePlayer.PlayerFlags.Wounded, b: false);
						customScientistNPC.InitializeHealth(customScientistNPC.Settings.Vitals.Health, customScientistNPC.Settings.Vitals.Health);
						num = -196660474;
						continue;
					case 0u:
					{
						Vector3 vector = insideUnitCircle.normalized * 25f;
						int num9;
						int num10;
						if (!NavmeshSpawnPoint.Find(customScientistNPC.Transform.position + new Vector3(vector.x, 0f, vector.y), 10f, out destination))
						{
							num9 = -120824151;
							num10 = num9;
						}
						else
						{
							num9 = -1605108340;
							num10 = num9;
						}
						num = num9 ^ ((int)num2 * -396730734);
						continue;
					}
					case 6u:
					{
						int num5;
						int num6;
						if (customScientistNPC.IsDead())
						{
							num5 = 603421231;
							num6 = num5;
						}
						else
						{
							num5 = 945495964;
							num6 = num5;
						}
						num = num5 ^ (int)(num2 * 541665189);
						continue;
					}
					case 11u:
						brain.Navigator.SetDestination(destination, BaseNavigator.NavigationSpeed.Slowest);
						num = ((int)num2 * -1088924090) ^ -515386109;
						continue;
					case 9u:
						num = ((int)num2 * -459562434) ^ 0x78DDEA23;
						continue;
					case 13u:
					{
						int num13;
						if (base.TimeInState < woundedDuration)
						{
							num = -223497691;
							num13 = num;
						}
						else
						{
							num = -636182981;
							num13 = num;
						}
						continue;
					}
					case 7u:
					{
						int num7;
						int num8;
						if (!isIncapacitated)
						{
							num7 = -1365958336;
							num8 = num7;
						}
						else
						{
							num7 = -720701222;
							num8 = num7;
						}
						num = num7 ^ ((int)num2 * -1639412967);
						continue;
					}
					case 5u:
					{
						int num3;
						int num4;
						if (Vector3.Distance(customScientistNPC.Transform.position, destination) < 2f)
						{
							num3 = 1613658269;
							num4 = num3;
						}
						else
						{
							num3 = 866675225;
							num4 = num3;
						}
						num = num3 ^ ((int)num2 * -469960430);
						continue;
					}
					case 12u:
						insideUnitCircle = Random.insideUnitCircle;
						num = (int)(num2 * 1920013972) ^ -1044793689;
						continue;
					default:
						return StateStatus.Running;
					}
					break;
				}
			}
		}
	}

	protected ProtoBuf.AIDesign CurrentDesign;

	private static readonly byte[] \u200b\u206e\u202c\u206c\u206f\u206e\u200d\u206e\u206c\u206c\u206c\u200b\u206d\u200e\u202a\u202b\u206c\u206a\u200b\u200e\u206c\u202a\u200d\u200c\u206e\u202d\u206c\u206d\u202b\u206b\u202b\u200c\u200c\u200e\u200b\u202c\u202b\u202e\u200e\u202d\u202e = global::<Module>.\u202d\u202e\u202a\u202d\u202a\u206a\u206d\u202e\u200e\u202c\u200e\u206c\u206c\u202c\u200b\u202a\u200f\u202d\u206a\u200d\u206f\u200f\u206d\u202d\u206b\u200b\u200d\u206b\u202b\u206f\u202b\u202e\u202b\u202b\u206c\u200f\u200f\u206b\u202b\u200f\u202e<byte[]>(123070724);

	public override void InitializeAI()
	{
		SenseTypes = GetSenseTypes();
		CustomScientistNPC customScientistNPC = GetBaseEntity() as CustomScientistNPC;
		customScientistNPC.Settings.Sensory.ApplySettingsToBrain(this);
		byte[] buffer = default(byte[]);
		while (true)
		{
			int num = -1378471630;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ -1905866071)) % 7)
				{
				case 3u:
					break;
				case 2u:
					thinkRate = 0.25f;
					num = ((int)num2 * -334941396) ^ 0x161FBADE;
					continue;
				case 0u:
					customScientistNPC.Settings.Movement.ApplySettingsToNavigator(base.Navigator);
					base.Navigator.MaxRoamDistanceFromHome = customScientistNPC.Settings.RoamRange;
					buffer = (customScientistNPC.Plugin as IChaosNPCPlugin).GetCustomDesign() ?? \u200b\u206e\u202c\u206c\u206f\u206e\u200d\u206e\u206c\u206c\u206c\u200b\u206d\u200e\u202a\u202b\u206c\u206a\u200b\u200e\u206c\u202a\u200d\u200c\u206e\u202d\u206c\u206d\u202b\u206b\u202b\u200c\u200c\u200e\u200b\u202c\u202b\u202e\u200e\u202d\u202e;
					num = -1316956827;
					continue;
				case 6u:
					base.InitializeAI();
					num = (int)(num2 * 941613235) ^ -1010448662;
					continue;
				case 5u:
					base.ThinkMode = AIThinkMode.Interval;
					num = (int)(num2 * 1510116530) ^ -295834672;
					continue;
				case 1u:
					base.PathFinder = new HumanPathFinder();
					((HumanPathFinder)base.PathFinder).Init(customScientistNPC);
					num = (int)(num2 * 1534812554) ^ -983407560;
					continue;
				default:
					LoadAIDesign(CurrentDesign = ProtoBuf.AIDesign.Deserialize(buffer), null, 0);
					return;
				}
				break;
			}
		}
	}

	public bool GetStateContainerForStateType(AIState aiState, out int stateContainer)
	{
		bool result = default(bool);
		using (List<ProtoBuf.AIStateContainer>.Enumerator enumerator = CurrentDesign.stateContainers.GetEnumerator())
		{
			ProtoBuf.AIStateContainer current = default(ProtoBuf.AIStateContainer);
			while (true)
			{
				IL_00a9:
				int num;
				int num2;
				if (enumerator.MoveNext())
				{
					num = 1124382162;
					num2 = num;
				}
				else
				{
					num = 30074976;
					num2 = num;
				}
				while (true)
				{
					uint num3;
					switch ((num3 = (uint)(num ^ 0x1A36AF43)) % 7)
					{
					case 5u:
						num = 1124382162;
						continue;
					default:
						goto end_IL_001b;
					case 1u:
					{
						int num4;
						int num5;
						if (current.state != (int)aiState)
						{
							num4 = -1004574066;
							num5 = num4;
						}
						else
						{
							num4 = -1444374855;
							num5 = num4;
						}
						num = num4 ^ (int)(num3 * 1802632103);
						continue;
					}
					case 4u:
						current = enumerator.Current;
						num = 988599679;
						continue;
					case 2u:
						stateContainer = current.id;
						result = true;
						num = (int)(num3 * 1619438268) ^ -495895031;
						continue;
					case 0u:
						break;
					case 3u:
						goto end_IL_001b;
					case 6u:
						goto IL_010c;
					}
					goto IL_00a9;
					continue;
					end_IL_001b:
					break;
				}
				break;
			}
		}
		stateContainer = -1;
		while (true)
		{
			uint num3;
			switch ((num3 = 328095691u) % 3)
			{
			case 0u:
				continue;
			case 1u:
				return false;
			}
			break;
		}
		goto IL_010c;
		IL_010c:
		return result;
	}

	public virtual EntityType GetSenseTypes()
	{
		return EntityType.Player | EntityType.NPC | EntityType.BasePlayerNPC;
	}

	public virtual float GetMaxRoamDistance(CustomScientistNPC customNpc)
	{
		return customNpc.Settings.RoamRange;
	}

	public override void AddStates()
	{
		states = new Dictionary<AIState, BasicAIState>();
		CustomScientistNPC customScientistNPC = default(CustomScientistNPC);
		while (true)
		{
			int num = -1152657688;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ -1792680524)) % 12)
				{
				case 8u:
					break;
				default:
					return;
				case 2u:
					return;
				case 6u:
					AddState(new WoundedState());
					num = (int)((num2 * 1597015648) ^ 0x141F5419);
					continue;
				case 10u:
					AddState(new MoveToDestinationState());
					AddState(new BaseMountedState());
					num = (int)(num2 * 1452099795) ^ -1402373766;
					continue;
				case 0u:
					AddState(new BaseDismountedState());
					num = (int)((num2 * 2081129353) ^ 0x5645B4DE);
					continue;
				case 4u:
					customScientistNPC = GetBaseEntity() as CustomScientistNPC;
					num = (int)((num2 * 759143544) ^ 0x47E7CBD9);
					continue;
				case 9u:
					AddState(new FallingState());
					num = ((int)num2 * -1915035006) ^ -439477327;
					continue;
				case 7u:
					AddState(new BaseIdleState());
					num = (int)(num2 * 265742069) ^ -1631673272;
					continue;
				case 11u:
				{
					int num5;
					int num6;
					if (!customScientistNPC.IsDead())
					{
						num5 = -695994081;
						num6 = num5;
					}
					else
					{
						num5 = -27191260;
						num6 = num5;
					}
					num = num5 ^ ((int)num2 * -1396041530);
					continue;
				}
				case 5u:
				{
					int num3;
					int num4;
					if (!(customScientistNPC.Plugin as IChaosNPCPlugin).InitializeStates(this))
					{
						num3 = -1940106925;
						num4 = num3;
					}
					else
					{
						num3 = -1498397613;
						num4 = num3;
					}
					num = num3 ^ ((int)num2 * -1154864488);
					continue;
				}
				case 1u:
					AddState(new CustomRoamState());
					AddState(new CustomChaseState());
					num = -2128432158;
					continue;
				case 3u:
					return;
				}
				break;
			}
		}
	}

	public override void Think(float delta)
	{
		CustomScientistNPC customScientistNPC = GetBaseEntity() as CustomScientistNPC;
		while (true)
		{
			int num = 1742958593;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ 0x12D7765C)) % 12)
				{
				case 11u:
					break;
				case 8u:
				{
					base.Think(delta);
					int num7;
					if (!sleeping)
					{
						num = 703197503;
						num7 = num;
					}
					else
					{
						num = 1302839674;
						num7 = num;
					}
					continue;
				}
				case 3u:
				{
					int num5;
					int num6;
					if (!customScientistNPC.IsDestroyed)
					{
						num5 = 773718871;
						num6 = num5;
					}
					else
					{
						num5 = 1539181344;
						num6 = num5;
					}
					num = num5 ^ ((int)num2 * -482715554);
					continue;
				}
				case 1u:
				{
					int num11;
					int num12;
					if (!customScientistNPC.IsPaused)
					{
						num11 = -424676639;
						num12 = num11;
					}
					else
					{
						num11 = -433920564;
						num12 = num11;
					}
					num = num11 ^ ((int)num2 * -1664427223);
					continue;
				}
				case 2u:
					return;
				case 5u:
					base.Navigator?.Pause();
					return;
				case 0u:
				{
					int num9;
					int num10;
					if (!customScientistNPC.Settings.Movement.CanSwim)
					{
						num9 = 1689357712;
						num10 = num9;
					}
					else
					{
						num9 = 940494886;
						num10 = num9;
					}
					num = num9 ^ ((int)num2 * -1349137133);
					continue;
				}
				case 4u:
				{
					int num13;
					int num14;
					if (customScientistNPC != null)
					{
						num13 = 1916914998;
						num14 = num13;
					}
					else
					{
						num13 = 1163755426;
						num14 = num13;
					}
					num = num13 ^ (int)(num2 * 2122862460);
					continue;
				}
				case 7u:
				{
					int num8;
					if (!customScientistNPC.Settings.KillUnderWater)
					{
						num = 1805140162;
						num8 = num;
					}
					else
					{
						num = 920308304;
						num8 = num;
					}
					continue;
				}
				case 9u:
					customScientistNPC.Hurt(delta * (customScientistNPC.MaxHealth() / 5f), DamageType.Drowned);
					num = ((int)num2 * -1481250166) ^ 0x49ADA358;
					continue;
				case 6u:
				{
					int num3;
					int num4;
					if (customScientistNPC.WaterFactor() <= 0.85f)
					{
						num3 = 383050160;
						num4 = num3;
					}
					else
					{
						num3 = 1807905009;
						num4 = num3;
					}
					num = num3 ^ (int)(num2 * 1674382885);
					continue;
				}
				default:
					CustomScientistNPC.\u206d\u200f\u206f\u202e\u206e\u202e\u200e\u206d\u200d\u202e\u206a\u202e\u200f\u202c\u202e\u200c\u200d\u206d\u200f\u202b\u202c\u200c\u202a\u200d\u206e\u202c\u206e\u206b\u206d\u202b\u202b\u200f\u200b\u200f\u200c\u206f\u200c\u206d\u206b\u206f\u202e.Move(customScientistNPC, customScientistNPC.Transform.position.x, customScientistNPC.Transform.position.z);
					return;
				}
				break;
			}
		}
	}

	protected override void OnStateChanged()
	{
		base.OnStateChanged();
		CustomScientistNPC customScientistNPC = GetBaseEntity() as CustomScientistNPC;
		while (true)
		{
			int num = 1237681438;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ 0x56765944)) % 6)
				{
				case 5u:
					break;
				default:
					return;
				case 4u:
					customScientistNPC.CurrentState = base.CurrentState.StateType;
					num = (int)(num2 * 461170990) ^ -1767924372;
					continue;
				case 1u:
					customScientistNPC.CancelInvoke(customScientistNPC.TriggerDown);
					num = 1841061927;
					continue;
				case 2u:
					customScientistNPC.NotifyNearby();
					return;
				case 0u:
				{
					int num3;
					int num4;
					if (customScientistNPC.CurrentState == AIState.Chase)
					{
						num3 = -1792447492;
						num4 = num3;
					}
					else
					{
						num3 = -315219077;
						num4 = num3;
					}
					num = num3 ^ (int)(num2 * 1811131976);
					continue;
				}
				case 3u:
					return;
				}
				break;
			}
		}
	}

	public override void OnDestroy()
	{
		if (Rust.Application.isQuitting)
		{
			goto IL_0007;
		}
		goto IL_003d;
		IL_0007:
		int num = -103793778;
		goto IL_000c;
		IL_000c:
		uint num2;
		switch ((num2 = (uint)(num ^ -1992057215)) % 4)
		{
		case 2u:
			break;
		default:
			return;
		case 3u:
			return;
		case 0u:
			goto IL_003d;
		case 1u:
			return;
		}
		goto IL_0007;
		IL_003d:
		CustomScientistNPC entity = GetBaseEntity() as CustomScientistNPC;
		BaseEntity.Query.Server.RemoveBrain(entity);
		LeaveGroup();
		num = -537236220;
		goto IL_000c;
	}
}
