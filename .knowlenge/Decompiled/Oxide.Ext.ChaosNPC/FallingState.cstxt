public class FallingState : BasicAIState
{
	protected bool canLeaveState;

	public FallingState()
		: base(AIState.Land)
	{
	}

	public override bool CanLeave()
	{
		return canLeaveState;
	}

	public override void StateEnter(BaseAIBrain brain, BaseEntity entity)
	{
		base.StateEnter(brain, entity);
		while (true)
		{
			int num = -1198247996;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ -2067280595)) % 6)
				{
				case 2u:
					break;
				default:
					return;
				case 4u:
					brain.Navigator.Pause();
					num = (int)((num2 * 342075133) ^ 0x6F53F290);
					continue;
				case 0u:
					brain.Navigator.SetCurrentSpeed(BaseNavigator.NavigationSpeed.Slowest);
					num = ((int)num2 * -1956829542) ^ 0x7EA6A62F;
					continue;
				case 3u:
					(entity as CustomScientistNPC).HolsterWeapon();
					num = ((int)num2 * -1791673168) ^ 0x7EEC676F;
					continue;
				case 5u:
					canLeaveState = false;
					num = (int)(num2 * 545379006) ^ -2056757428;
					continue;
				case 1u:
					return;
				}
				break;
			}
		}
	}

	public override void StateLeave(BaseAIBrain brain, BaseEntity entity)
	{
		base.StateLeave(brain, entity);
		while (true)
		{
			int num = -475228458;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ -1448418629)) % 4)
				{
				case 3u:
					break;
				default:
					return;
				case 1u:
					(entity as CustomScientistNPC).EquipWeapon();
					brain.Navigator.SetCurrentSpeed(BaseNavigator.NavigationSpeed.Slow);
					num = (int)(num2 * 826349658) ^ -76292271;
					continue;
				case 0u:
					brain.Navigator.Resume();
					num = (int)(num2 * 856808433) ^ -948517031;
					continue;
				case 2u:
					return;
				}
				break;
			}
		}
	}

	public override StateStatus StateThink(float delta, BaseAIBrain brain, BaseEntity entity)
	{
		base.StateThink(delta, brain, entity);
		CustomScientistNPC customScientistNPC = default(CustomScientistNPC);
		while (true)
		{
			int num = -714348616;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ -1554778955)) % 5)
				{
				case 4u:
					break;
				case 1u:
					customScientistNPC = entity as CustomScientistNPC;
					num = ((int)num2 * -470434469) ^ -724027288;
					continue;
				case 3u:
					return StateStatus.Running;
				case 2u:
				{
					int num3;
					int num4;
					if (!customScientistNPC.modelState.flying)
					{
						num3 = -960633592;
						num4 = num3;
					}
					else
					{
						num3 = -171626251;
						num4 = num3;
					}
					num = num3 ^ ((int)num2 * -383616166);
					continue;
				}
				default:
					customScientistNPC.HomePosition = customScientistNPC.Transform.position;
					canLeaveState = true;
					return StateStatus.Finished;
				}
				break;
			}
		}
	}
}
