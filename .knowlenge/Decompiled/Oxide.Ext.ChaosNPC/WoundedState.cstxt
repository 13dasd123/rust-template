using ConVar;
using UnityEngine;

public class WoundedState : BasicAIState
{
	protected bool canLeaveState;

	protected bool isIncapacitated;

	protected Vector3 destination;

	protected float woundedDuration;

	public WoundedState()
		: base(AIState.Orbit)
	{
	}

	public override bool CanLeave()
	{
		return canLeaveState;
	}

	public override void StateEnter(BaseAIBrain brain, BaseEntity entity)
	{
		base.StateEnter(brain, entity);
		CustomScientistNPC customScientistNPC = default(CustomScientistNPC);
		while (true)
		{
			int num = -1860009488;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ -662771031)) % 15)
				{
				case 10u:
					break;
				case 9u:
					woundedDuration = Random.Range(customScientistNPC.Settings.WoundedDurationMin, customScientistNPC.Settings.WoundedDurationMax);
					brain.Navigator.SetCurrentSpeed(BaseNavigator.NavigationSpeed.Slowest);
					num = -1144381207;
					continue;
				case 0u:
					customScientistNPC.metabolism.bleeding.value = 0f;
					num = ((int)num2 * -191517682) ^ 0x67F61EAD;
					continue;
				case 14u:
					customScientistNPC.health = Random.Range(Server.crawlingminimumhealth, Server.crawlingmaximumhealth);
					num = ((int)num2 * -50417670) ^ -946393777;
					continue;
				case 8u:
					brain.Navigator.SetCurrentSpeed(BaseNavigator.NavigationSpeed.Slowest);
					num = (int)((num2 * 1149273801) ^ 0x3A5068B8);
					continue;
				case 2u:
					isIncapacitated = true;
					num = ((int)num2 * -1816126199) ^ 0x57288EF3;
					continue;
				case 11u:
					customScientistNPC.metabolism.bleeding.value = 0f;
					num = (int)((num2 * 496488963) ^ 0x39AF5498);
					continue;
				case 1u:
				{
					canLeaveState = false;
					customScientistNPC = entity as CustomScientistNPC;
					int num3;
					int num4;
					if (Random.value <= 0.5f)
					{
						num3 = -1150919084;
						num4 = num3;
					}
					else
					{
						num3 = -857113180;
						num4 = num3;
					}
					num = num3 ^ (int)(num2 * 972230986);
					continue;
				}
				case 4u:
					customScientistNPC.healingWhileCrawling = 0f;
					isIncapacitated = false;
					num = (int)((num2 * 427107736) ^ 0xB25AD22);
					continue;
				case 5u:
					customScientistNPC.SetServerFall(wantsOn: true);
					num = ((int)num2 * -1711678769) ^ 0x7397203D;
					continue;
				case 12u:
					customScientistNPC.SetPlayerFlag(BasePlayer.PlayerFlags.Incapacitated, b: true);
					num = ((int)num2 * -1906496004) ^ 0x2D54F52D;
					continue;
				case 6u:
					customScientistNPC.healingWhileCrawling = 0f;
					num = ((int)num2 * -776951084) ^ 0x62CC767D;
					continue;
				case 13u:
					destination = customScientistNPC.ServerPosition;
					num = ((int)num2 * -1369371625) ^ 0x4C84F01B;
					continue;
				case 7u:
					customScientistNPC.health = Random.Range(2f, 6f);
					num = -1076968356;
					continue;
				default:
					customScientistNPC.SendNetworkUpdateImmediate();
					return;
				}
				break;
			}
		}
	}

	public override void StateLeave(BaseAIBrain brain, BaseEntity entity)
	{
		base.StateLeave(brain, entity);
		CustomScientistNPC obj = entity as CustomScientistNPC;
		obj.SetPlayerFlag(BasePlayer.PlayerFlags.Wounded, b: false);
		obj.SetPlayerFlag(BasePlayer.PlayerFlags.Incapacitated, b: false);
		obj.SetServerFall(wantsOn: false);
	}

	public override StateStatus StateThink(float delta, BaseAIBrain brain, BaseEntity entity)
	{
		base.StateThink(delta, brain, entity);
		CustomScientistNPC customScientistNPC = entity as CustomScientistNPC;
		Vector2 insideUnitCircle = default(Vector2);
		while (true)
		{
			int num = -1554720221;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ -1889541151)) % 15)
				{
				case 3u:
					break;
				case 1u:
					customScientistNPC.EquipWeapon();
					num = (int)(num2 * 2018447948) ^ -840563411;
					continue;
				case 10u:
					canLeaveState = true;
					return StateStatus.Finished;
				case 2u:
					customScientistNPC.Die();
					num = (int)(num2 * 1827326338) ^ -1119075366;
					continue;
				case 8u:
				{
					int num11;
					int num12;
					if ((float)Random.Range(0, 100) < customScientistNPC.Settings.WoundedRecoveryChance)
					{
						num11 = -1170757634;
						num12 = num11;
					}
					else
					{
						num11 = -252505975;
						num12 = num11;
					}
					num = num11 ^ (int)(num2 * 88686166);
					continue;
				}
				case 4u:
					customScientistNPC.SetPlayerFlag(BasePlayer.PlayerFlags.Wounded, b: false);
					customScientistNPC.InitializeHealth(customScientistNPC.Settings.Vitals.Health, customScientistNPC.Settings.Vitals.Health);
					num = -196660474;
					continue;
				case 0u:
				{
					Vector3 vector = insideUnitCircle.normalized * 25f;
					int num9;
					int num10;
					if (!NavmeshSpawnPoint.Find(customScientistNPC.Transform.position + new Vector3(vector.x, 0f, vector.y), 10f, out destination))
					{
						num9 = -120824151;
						num10 = num9;
					}
					else
					{
						num9 = -1605108340;
						num10 = num9;
					}
					num = num9 ^ ((int)num2 * -396730734);
					continue;
				}
				case 6u:
				{
					int num5;
					int num6;
					if (customScientistNPC.IsDead())
					{
						num5 = 603421231;
						num6 = num5;
					}
					else
					{
						num5 = 945495964;
						num6 = num5;
					}
					num = num5 ^ (int)(num2 * 541665189);
					continue;
				}
				case 11u:
					brain.Navigator.SetDestination(destination, BaseNavigator.NavigationSpeed.Slowest);
					num = ((int)num2 * -1088924090) ^ -515386109;
					continue;
				case 9u:
					num = ((int)num2 * -459562434) ^ 0x78DDEA23;
					continue;
				case 13u:
				{
					int num13;
					if (base.TimeInState < woundedDuration)
					{
						num = -223497691;
						num13 = num;
					}
					else
					{
						num = -636182981;
						num13 = num;
					}
					continue;
				}
				case 7u:
				{
					int num7;
					int num8;
					if (!isIncapacitated)
					{
						num7 = -1365958336;
						num8 = num7;
					}
					else
					{
						num7 = -720701222;
						num8 = num7;
					}
					num = num7 ^ ((int)num2 * -1639412967);
					continue;
				}
				case 5u:
				{
					int num3;
					int num4;
					if (Vector3.Distance(customScientistNPC.Transform.position, destination) < 2f)
					{
						num3 = 1613658269;
						num4 = num3;
					}
					else
					{
						num3 = 866675225;
						num4 = num3;
					}
					num = num3 ^ ((int)num2 * -469960430);
					continue;
				}
				case 12u:
					insideUnitCircle = Random.insideUnitCircle;
					num = (int)(num2 * 1920013972) ^ -1044793689;
					continue;
				default:
					return StateStatus.Running;
				}
				break;
			}
		}
	}
}
