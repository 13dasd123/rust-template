using System;
using Newtonsoft.Json;
using Oxide.Ext.ChaosNPC;
using UnityEngine;

[Serializable]
public class NPCSettings
{
	public class VitalStats
	{
		public float Health { get; set; } = 200f;
	}

	public class MovementStats
	{
		public float Speed { get; set; } = 6.2f;

		public float Acceleration { get; set; } = 12f;

		[JsonProperty(PropertyName = "Turn speed")]
		public float TurnSpeed { get; set; } = 120f;

		[JsonProperty(PropertyName = "Speed multiplier - Slowest")]
		public float SlowestSpeedFraction { get; set; } = 0.1f;

		[JsonProperty(PropertyName = "Speed multiplier - Slow")]
		public float SlowSpeedFraction { get; set; } = 0.3f;

		[JsonProperty(PropertyName = "Speed multiplier - Normal")]
		public float NormalSpeedFraction { get; set; } = 0.5f;

		[JsonProperty(PropertyName = "Speed multiplier - Fast")]
		public float FastSpeedFraction { get; set; } = 1f;

		[JsonProperty(PropertyName = "Speed multiplier - Low health")]
		public float LowHealthMaxSpeedFraction { get; set; } = 0.5f;

		[JsonIgnore]
		public bool CanSwim { get; set; }

		[JsonIgnore]
		public float SwimmingSpeedMultiplier { get; set; } = 0.4f;

		[JsonIgnore]
		public float MaxWaterDepth { get; set; } = 0.5f;

		public virtual void ApplySettingsToNavigator(BaseNavigator baseNavigator)
		{
			baseNavigator.Acceleration = Acceleration;
			baseNavigator.FastSpeedFraction = FastSpeedFraction;
			baseNavigator.LowHealthMaxSpeedFraction = LowHealthMaxSpeedFraction;
			baseNavigator.NormalSpeedFraction = NormalSpeedFraction;
			baseNavigator.SlowestSpeedFraction = SlowestSpeedFraction;
			baseNavigator.SlowSpeedFraction = SlowSpeedFraction;
			baseNavigator.Speed = Speed;
			baseNavigator.TurnSpeed = TurnSpeed;
			baseNavigator.topologyPreference = TerrainTopology.Enum.Field | TerrainTopology.Enum.Summit | TerrainTopology.Enum.Beachside | TerrainTopology.Enum.Beach | TerrainTopology.Enum.Forest | TerrainTopology.Enum.Decor | TerrainTopology.Enum.Monument | TerrainTopology.Enum.Road | TerrainTopology.Enum.Roadside | TerrainTopology.Enum.Rail | TerrainTopology.Enum.Railside | TerrainTopology.Enum.Building | TerrainTopology.Enum.Mountain | TerrainTopology.Enum.Clutter | TerrainTopology.Enum.Alt | TerrainTopology.Enum.Mainland | TerrainTopology.Enum.Hilltop;
			if (CanSwim)
			{
				baseNavigator.SwimmingSpeedMultiplier = SwimmingSpeedMultiplier;
				baseNavigator.MaxWaterDepth = MaxWaterDepth;
			}
		}
	}

	public class SensoryStats
	{
		[JsonProperty(PropertyName = "Attack range multiplier")]
		public float AttackRangeMultiplier { get; set; } = 1.5f;

		[JsonProperty(PropertyName = "Sense range")]
		public float SenseRange { get; set; } = 30f;

		[JsonProperty(PropertyName = "Listen range")]
		public float ListenRange { get; set; } = 20f;

		[JsonProperty(PropertyName = "Target lost range")]
		public float TargetLostRange { get; set; } = 90f;

		[JsonProperty(PropertyName = "Target lost range time (seconds)")]
		public float TargetLostRangeTime { get; set; } = 5f;

		[JsonProperty(PropertyName = "Target lost LOS time (seconds)")]
		public float TargetLostLOSTime { get; set; } = 5f;

		[JsonProperty(PropertyName = "Ignore sneaking outside of vision range")]
		public bool IgnoreNonVisionSneakers { get; set; } = true;

		[JsonProperty(PropertyName = "Vision cone (0 - 180 degrees)")]
		public float VisionCone { get; set; } = 135f;

		[JsonProperty(PropertyName = "Ignore players in safe zone")]
		public bool IgnoreSafeZonePlayers { get; set; } = true;

		[JsonIgnore]
		public bool UseThrowableExplosives { get; set; }

		[JsonIgnore]
		public bool UseMedicalItems { get; set; }

		[JsonIgnore]
		public float HealChance { get; set; } = 0.5f;

		[JsonIgnore]
		public float HealBelowHealthFraction { get; set; } = 0.5f;

		public void ApplySettingsToBrain(BaseAIBrain brain)
		{
			brain.MaxGroupSize = int.MaxValue;
			brain.AttackRangeMultiplier = 1f;
			brain.SenseRange = SenseRange;
			brain.ListenRange = ListenRange;
			brain.TargetLostRange = TargetLostRange;
			brain.CheckVisionCone = IgnoreNonVisionSneakers;
			brain.IgnoreNonVisionSneakers = IgnoreNonVisionSneakers;
			brain.IgnoreSafeZonePlayers = IgnoreSafeZonePlayers;
			brain.CanUseHealingItems = UseMedicalItems;
			brain.HealChance = HealChance;
			brain.HealBelowHealthFraction = HealBelowHealthFraction;
			brain.VisionCone = Vector3.Dot(Vector3.forward, Quaternion.Euler(0f, VisionCone, 0f) * Vector3.forward);
		}
	}

	[JsonProperty(PropertyName = "NPC types (HeavyScientist, Scientist, Scarecrow, BanditGuard, TunnelDweller, GingerBreadMan)")]
	public NPCType[] Types { get; set; } = new NPCType[1];

	[JsonProperty(PropertyName = "Display names (Chosen at random)")]
	public string[] DisplayNames { get; set; } = new string[0];

	[JsonProperty(PropertyName = "Kits (Chosen at random)")]
	public string[] Kits { get; set; } = new string[0];

	[JsonProperty(PropertyName = "Don't drop loot with corpse")]
	public bool StripCorpseLoot { get; set; }

	[JsonProperty(PropertyName = "Drop inventory as loot")]
	public bool DropInventoryOnDeath { get; set; }

	[JsonProperty(PropertyName = "Drop one of the specified AlphaLoot profiles as loot")]
	public string[] DropAlphaLootProfiles { get; set; } = new string[0];

	[JsonProperty(PropertyName = "Max roam range")]
	public float RoamRange { get; set; } = -1f;

	[JsonProperty(PropertyName = "Max chase range")]
	public float ChaseRange { get; set; } = -1f;

	[JsonProperty(PropertyName = "Aim cone scale")]
	public float AimConeScale { get; set; } = 2f;

	[JsonProperty(PropertyName = "Kill in safe zone")]
	public bool KillInSafeZone { get; set; } = true;

	[JsonProperty(PropertyName = "Can be targeted by NPC auto turrets")]
	public bool TargetedByNPCTurrets { get; set; }

	[JsonProperty(PropertyName = "Despawn time (seconds)")]
	public float DespawnTime { get; set; }

	[JsonIgnore]
	public bool StartDead { get; set; }

	[JsonProperty(PropertyName = "Wounded chance (x out of 100)")]
	public float WoundedChance { get; set; }

	[JsonProperty(PropertyName = "Wounded duration min (seconds)")]
	public float WoundedDurationMin { get; set; }

	[JsonProperty(PropertyName = "Wounded duration max (seconds)")]
	public float WoundedDurationMax { get; set; }

	[JsonProperty(PropertyName = "Wounded recovery chance (x out of 100)")]
	public float WoundedRecoveryChance { get; set; } = 100f;

	[JsonProperty(PropertyName = "Prevent friendly fire")]
	public bool PreventFriendlyFire { get; set; } = true;

	[JsonIgnore]
	public bool EnableNavMesh { get; set; } = true;

	[JsonIgnore]
	public bool EquipWeapon { get; set; } = true;

	[JsonIgnore]
	public bool CanUseWeaponMounted { get; set; }

	[JsonProperty(PropertyName = "Kill if under water")]
	public bool KillUnderWater { get; set; } = true;

	public VitalStats Vitals { get; set; } = new VitalStats();

	public MovementStats Movement { get; set; } = new MovementStats();

	public SensoryStats Sensory { get; set; } = new SensoryStats();
}
