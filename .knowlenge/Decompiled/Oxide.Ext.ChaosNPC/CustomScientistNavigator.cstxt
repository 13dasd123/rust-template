using Oxide.Ext.ChaosNPC;
using UnityEngine;
using UnityEngine.AI;

public class CustomScientistNavigator : NPCPlayerNavigator
{
	public override void Init(BaseCombatEntity entity, NavMeshAgent agent)
	{
		TriggerStuckEvent = true;
		while (true)
		{
			int num = 921263748;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ 0x7CD16260)) % 3)
				{
				case 2u:
					break;
				default:
					return;
				case 1u:
					goto IL_0029;
				case 0u:
					return;
				}
				break;
				IL_0029:
				base.Init(entity, agent);
				num = ((int)num2 * -696851205) ^ -653385437;
			}
		}
	}

	public override bool IsSwimming()
	{
		if (!(base.BaseEntity as CustomScientistNPC).Settings.Movement.CanSwim)
		{
			while (true)
			{
				uint num;
				switch ((num = 2088265573u) % 3)
				{
				case 0u:
					continue;
				case 1u:
					return false;
				}
				break;
			}
		}
		return (base.BaseEntity as CustomScientistNPC).modelState.waterLevel > 0.75f;
	}

	protected override float GetTargetSpeed()
	{
		if (IsSwimming())
		{
			while (true)
			{
				uint num;
				switch ((num = 824464711u) % 3)
				{
				case 2u:
					continue;
				case 1u:
					return Speed * SwimmingSpeedMultiplier;
				}
				break;
			}
		}
		return base.GetTargetSpeed();
	}

	public override void OnStuck()
	{
		CustomScientistNPC customScientistNPC = base.BaseEntity as CustomScientistNPC;
		if (!(customScientistNPC.Brain != null))
		{
			return;
		}
		while (true)
		{
			int num = -1916597930;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ -1631076081)) % 5)
				{
				case 4u:
					break;
				default:
					return;
				case 1u:
					customScientistNPC.Brain.SwitchToState(AIState.Idle, 0);
					num = (int)((num2 * 616875916) ^ 0x2DB2350C);
					continue;
				case 3u:
				{
					int num5;
					int num6;
					if (customScientistNPC.Brain.Events != null)
					{
						num5 = 100763177;
						num6 = num5;
					}
					else
					{
						num5 = 1400787432;
						num6 = num5;
					}
					num = num5 ^ ((int)num2 * -636746346);
					continue;
				}
				case 2u:
				{
					int num3;
					int num4;
					if (customScientistNPC.Brain.Navigator != null)
					{
						num3 = -380820411;
						num4 = num3;
					}
					else
					{
						num3 = -1271563212;
						num4 = num3;
					}
					num = num3 ^ (int)(num2 * 1899037056);
					continue;
				}
				case 0u:
					return;
				}
				break;
			}
		}
	}

	public override void ApplyFacingDirectionOverride()
	{
		base.ApplyFacingDirectionOverride();
		Vector3 vector = default(Vector3);
		while (true)
		{
			int num = -1041621384;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ -1148540972)) % 11)
				{
				case 6u:
					break;
				default:
					return;
				case 7u:
					base.NPCPlayerEntity.SetAimDirection(facingDirectionOverride);
					num = (int)(num2 * 467217843) ^ -2051656890;
					continue;
				case 9u:
				{
					int num6;
					if (!(facingDirectionEntity != null))
					{
						num = -139144793;
						num6 = num;
					}
					else
					{
						num = -1115402463;
						num6 = num;
					}
					continue;
				}
				case 8u:
					vector = \u206f\u202b\u200b\u202b\u202b\u200c\u200e\u200b\u202b\u206b\u200c\u202d\u206f\u202c\u200e\u202b\u206f\u206b\u202a\u206c\u206b\u200c\u206d\u202c\u202b\u206e\u206d\u206c\u206b\u200e\u202a\u200c\u206a\u206e\u200d\u206c\u200b\u200d\u200e\u206a\u202e(base.NPCPlayerEntity, facingDirectionEntity);
					num = ((int)num2 * -2027488012) ^ -2117536797;
					continue;
				case 3u:
					base.NPCPlayerEntity.SetAimDirection(facingDirectionOverride);
					num = ((int)num2 * -104382055) ^ -396826524;
					continue;
				case 5u:
					return;
				case 2u:
					return;
				case 4u:
					facingDirectionOverride = vector;
					num = (int)((num2 * 1813724081) ^ 0x309C4DAC);
					continue;
				case 1u:
				{
					int num4;
					int num5;
					if (overrideFacingDirectionMode == OverrideFacingDirectionMode.None)
					{
						num4 = 1847711232;
						num5 = num4;
					}
					else
					{
						num4 = 716573863;
						num5 = num4;
					}
					num = num4 ^ (int)(num2 * 269932472);
					continue;
				}
				case 0u:
				{
					int num3;
					if (overrideFacingDirectionMode == OverrideFacingDirectionMode.Direction)
					{
						num = -1373911234;
						num3 = num;
					}
					else
					{
						num = -998089668;
						num3 = num;
					}
					continue;
				}
				case 10u:
					return;
				}
				break;
			}
		}
	}

	protected override bool CanUpdateMovement()
	{
		if (!(base.BaseEntity == null))
		{
			while (true)
			{
				int num = 2069376763;
				while (true)
				{
					uint num2;
					switch ((num2 = (uint)(num ^ 0x13161504)) % 9)
					{
					case 5u:
						break;
					case 0u:
						goto IL_004f;
					case 1u:
						SetDestination(base.NPCPlayerEntity.ServerPosition);
						return false;
					case 7u:
					{
						int num5;
						int num6;
						if (base.BaseEntity.IsAlive())
						{
							num5 = 603857335;
							num6 = num5;
						}
						else
						{
							num5 = 1269514947;
							num6 = num5;
						}
						num = num5 ^ (int)(num2 * 1243256636);
						continue;
					}
					case 4u:
						goto end_IL_0011;
					case 6u:
					{
						int num7;
						int num8;
						if (base.NPCPlayerEntity.IsDormant)
						{
							num7 = 354691026;
							num8 = num7;
						}
						else
						{
							num7 = 1525574763;
							num8 = num7;
						}
						num = num7 ^ (int)(num2 * 721759012);
						continue;
					}
					case 2u:
					{
						int num3;
						int num4;
						if (base.NPCPlayerEntity.syncPosition)
						{
							num3 = 1626194976;
							num4 = num3;
						}
						else
						{
							num3 = 426874413;
							num4 = num3;
						}
						num = num3 ^ ((int)num2 * -1426057359);
						continue;
					}
					case 3u:
						goto IL_0125;
					default:
						return true;
					}
					break;
					IL_0125:
					int num9;
					if (base.Agent.enabled)
					{
						num = 1926307437;
						num9 = num;
					}
					else
					{
						num = 2069293375;
						num9 = num;
					}
					continue;
					IL_004f:
					int num10;
					if (base.CurrentNavigationType != NavigationType.NavMesh)
					{
						num = 2069293375;
						num10 = num;
					}
					else
					{
						num = 1651065980;
						num10 = num;
					}
				}
				continue;
				end_IL_0011:
				break;
			}
		}
		return false;
	}

	public override bool SetCustomDestination(Vector3 pos, float speedFraction = 1f, float updateInterval = 0f)
	{
		if (!base.SetCustomDestination(pos, speedFraction, updateInterval))
		{
			goto IL_000b;
		}
		goto IL_0042;
		IL_000b:
		int num = -1551713416;
		goto IL_0010;
		IL_0010:
		uint num2;
		switch ((num2 = (uint)(num ^ -387595389)) % 4)
		{
		case 0u:
			break;
		case 3u:
			return false;
		case 2u:
			goto IL_0042;
		default:
			return true;
		}
		goto IL_000b;
		IL_0042:
		base.Destination = pos;
		num = -2060226866;
		goto IL_0010;
	}

	protected override void UpdatePositionAndRotation(Vector3 moveToPosition, float delta)
	{
		if (IsSwimming())
		{
			goto IL_0008;
		}
		goto IL_0046;
		IL_0008:
		int num = 717517432;
		goto IL_000d;
		IL_000d:
		Vector3 vector = default(Vector3);
		while (true)
		{
			uint num2;
			switch ((num2 = (uint)(num ^ 0x75AC64E0)) % 9)
			{
			case 5u:
				break;
			default:
				return;
			case 3u:
				goto IL_0046;
			case 7u:
				base.NPCPlayerEntity.viewAngles = base.NPCPlayerEntity.eyes.rotation.eulerAngles;
				base.NPCPlayerEntity.ServerRotation = base.NPCPlayerEntity.eyes.rotation;
				num = (int)((num2 * 1037923208) ^ 0x17217152);
				continue;
			case 2u:
				base.BaseEntity.transform.position = vector;
				num = (int)(num2 * 1936478845) ^ -706498582;
				continue;
			case 6u:
				base.BaseEntity.ServerPosition = base.BaseEntity.transform.localPosition;
				return;
			case 0u:
				base.NPCPlayerEntity.eyes.rotation = Quaternion.Lerp(base.NPCPlayerEntity.eyes.rotation, Quaternion.LookRotation(Vector3Ex.Direction2D(moveToPosition, base.NPCPlayerEntity.transform.position), Vector3.up), delta * 25f);
				num = (int)(num2 * 418575816) ^ -2094847228;
				continue;
			case 1u:
			{
				int num3;
				int num4;
				if (!(moveToPosition != base.NPCPlayerEntity.transform.position))
				{
					num3 = -540586926;
					num4 = num3;
				}
				else
				{
					num3 = -1701198363;
					num4 = num3;
				}
				num = num3 ^ ((int)num2 * -1438968348);
				continue;
			}
			case 4u:
				vector = Vector3.MoveTowards(base.BaseEntity.transform.position, moveToPosition, GetTargetSpeed() * delta);
				vector.y = Mathf.Max(Mathf.Min(vector.y, WaterLevel.GetWaterSurface(vector, waves: true, volumes: true) - 1.1f), TerrainMeta.HeightMap.GetHeight(vector));
				num = 805097365;
				continue;
			case 8u:
				return;
			}
			break;
		}
		goto IL_0008;
		IL_0046:
		base.UpdatePositionAndRotation(moveToPosition, delta);
		num = 790952876;
		goto IL_000d;
	}

	protected override bool CanEnableNavMeshNavigation()
	{
		if (IsSwimming())
		{
			while (true)
			{
				uint num;
				switch ((num = 1441799719u) % 3)
				{
				case 2u:
					continue;
				case 1u:
					return false;
				}
				break;
			}
		}
		return base.CanEnableNavMeshNavigation();
	}

	private static Vector3 \u206f\u202b\u200b\u202b\u202b\u200c\u200e\u200b\u202b\u206b\u200c\u202d\u206f\u202c\u200e\u202b\u206f\u206b\u202a\u206c\u206b\u200c\u206d\u202c\u202b\u206e\u206d\u206c\u206b\u200e\u202a\u200c\u206a\u206e\u200d\u206c\u200b\u200d\u200e\u206a\u202e(BasePlayer P_0, BaseEntity P_1)
	{
		if (P_1 == null)
		{
			goto IL_0009;
		}
		goto IL_005c;
		IL_0009:
		int num = 957136088;
		goto IL_000e;
		IL_000e:
		uint num2;
		switch ((num2 = (uint)(num ^ 0x7D26E32E)) % 5)
		{
		case 2u:
			break;
		case 3u:
			return Vector3Ex.Direction2D(P_1.transform.position, \u200d\u206b\u202a\u200f\u200f\u200d\u206b\u202d\u200e\u206e\u202b\u202b\u206f\u206a\u202d\u200d\u206a\u202a\u202e\u202b\u206c\u202e\u206c\u202b\u206e\u200e\u200b\u206f\u206b\u200c\u206d\u200c\u202b\u200f\u206d\u202d\u200f\u202e\u206a\u206f\u202e(P_0));
		case 4u:
			goto IL_005c;
		case 1u:
			return Vector3Ex.Direction2D(P_0.transform.position + P_0.eyes.BodyForward() * 1000f, P_0.transform.position);
		default:
			return (\u206e\u200b\u200c\u206b\u206e\u206b\u202d\u202a\u206a\u200e\u202c\u200c\u200c\u202d\u206c\u202a\u200f\u206c\u206b\u200e\u202e\u206c\u200d\u202b\u202e\u206f\u202e\u206b\u206a\u206e\u200b\u202a\u206e\u202d\u206a\u206d\u200b\u202b\u200b\u202e\u202e(P_1) - \u200d\u206b\u202a\u200f\u200f\u200d\u206b\u202d\u200e\u206e\u202b\u202b\u206f\u206a\u202d\u200d\u206a\u202a\u202e\u202b\u206c\u202e\u206c\u202b\u206e\u200e\u200b\u206f\u206b\u200c\u206d\u200c\u202b\u200f\u206d\u202d\u200f\u202e\u206a\u206f\u202e(P_0)).normalized;
		}
		goto IL_0009;
		IL_005c:
		int num3;
		if (Vector3Ex.Distance2D(P_0.transform.position, P_1.transform.position) > 0.75f)
		{
			num = 1407959162;
			num3 = num;
		}
		else
		{
			num = 527155813;
			num3 = num;
		}
		goto IL_000e;
	}

	private static Vector3 \u200d\u206b\u202a\u200f\u200f\u200d\u206b\u202d\u200e\u206e\u202b\u202b\u206f\u206a\u202d\u200d\u206a\u202a\u202e\u202b\u206c\u202e\u206c\u202b\u206e\u200e\u200b\u206f\u206b\u200c\u206d\u200c\u202b\u200f\u206d\u202d\u200f\u202e\u206a\u206f\u202e(BasePlayer P_0)
	{
		return P_0.eyes.position - Vector3.up * 0.15f;
	}

	private static Vector3 \u206e\u200b\u200c\u206b\u206e\u206b\u202d\u202a\u206a\u200e\u202c\u200c\u200c\u202d\u206c\u202a\u200f\u206c\u206b\u200e\u202e\u206c\u200d\u202b\u202e\u206f\u202e\u206b\u206a\u206e\u200b\u202a\u206e\u202d\u206a\u206d\u200b\u202b\u200b\u202e\u202e(BaseEntity P_0)
	{
		BasePlayer basePlayer = P_0 as BasePlayer;
		while (true)
		{
			int num = 1120046603;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ 0x59DE7F4C)) % 7)
				{
				case 6u:
					break;
				case 5u:
				{
					int num6;
					int num7;
					if (basePlayer == null)
					{
						num6 = 729589641;
						num7 = num6;
					}
					else
					{
						num6 = 1707767465;
						num7 = num6;
					}
					num = num6 ^ (int)(num2 * 1160690371);
					continue;
				}
				case 3u:
				{
					int num4;
					int num5;
					if (!basePlayer.IsWounded())
					{
						num4 = -1864438883;
						num5 = num4;
					}
					else
					{
						num4 = -2141686020;
						num5 = num4;
					}
					num = num4 ^ (int)(num2 * 883391679);
					continue;
				}
				case 0u:
				{
					int num3;
					if (!basePlayer.IsSleeping())
					{
						num = 173144571;
						num3 = num;
					}
					else
					{
						num = 1794068597;
						num3 = num;
					}
					continue;
				}
				case 2u:
					return basePlayer.transform.position + Vector3.up * 0.1f;
				case 1u:
					return P_0.CenterPoint();
				default:
					return basePlayer.eyes.position - Vector3.up * 0.15f;
				}
				break;
			}
		}
	}
}
