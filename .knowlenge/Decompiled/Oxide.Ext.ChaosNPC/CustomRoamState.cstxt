using UnityEngine;

public class CustomRoamState : BasicAIState
{
	protected StateStatus status = StateStatus.Error;

	protected static readonly Vector3[] preferedTopologySamples = new Vector3[4];

	protected static readonly Vector3[] topologySamples;

	protected bool isAlert;

	private Vector3 \u202b\u202c\u200e\u206a\u202a\u206e\u200d\u206a\u200b\u202a\u202e\u206a\u202a\u202e\u206d\u206c\u202b\u200d\u200c\u206f\u200e\u206b\u206c\u202e\u206d\u206c\u200d\u202a\u206e\u202c\u200c\u200e\u202b\u202e\u206d\u206f\u206a\u202a\u206c\u200d\u202e;

	private float \u206f\u200d\u202b\u206e\u202c\u206c\u200b\u200b\u202a\u206b\u200d\u202e\u200c\u200b\u206a\u200d\u206a\u200f\u202c\u202c\u206a\u206d\u206a\u206c\u206e\u200e\u202e\u206d\u206d\u202c\u200f\u202d\u200e\u202a\u206e\u206b\u206c\u202d\u200b\u202d\u202e;

	public bool IsStuckSwimming()
	{
		return \u206f\u200d\u202b\u206e\u202c\u206c\u200b\u200b\u202a\u206b\u200d\u202e\u200c\u200b\u206a\u200d\u206a\u200f\u202c\u202c\u206a\u206d\u206a\u206c\u206e\u200e\u202e\u206d\u206d\u202c\u200f\u202d\u200e\u202a\u206e\u206b\u206c\u202d\u200b\u202d\u202e > 3f;
	}

	public CustomRoamState()
		: base(AIState.Roam)
	{
	}

	public override void StateEnter(BaseAIBrain brain, BaseEntity entity)
	{
		base.StateEnter(brain, entity);
		Vector3 pos = default(Vector3);
		CustomScientistNPC customScientistNPC = default(CustomScientistNPC);
		while (true)
		{
			int num = 567016098;
			while (true)
			{
				uint num2;
				Vector3 bestRoamPosition;
				switch ((num2 = (uint)(num ^ 0x658B4BF8)) % 16)
				{
				case 0u:
					break;
				case 5u:
					pos = GetBestRoamPosition(brain.Navigator, customScientistNPC.DestinationOverride, brain.Events.Memory.Position.Get(4), 0f, 20f);
					num = (int)(num2 * 155071105) ^ -90933360;
					continue;
				case 9u:
					return;
				case 2u:
					pos = brain.PathFinder.GetBestRoamPositionFromAnchor(brain.Navigator, customScientistNPC.Transform.position, brain.Events.Memory.Position.Get(4), 0f, 250f);
					num = (int)((num2 * 1295384562) ^ 0x50105D94);
					continue;
				case 7u:
				{
					int num4;
					if (!(customScientistNPC.DestinationOverride != Vector3.zero))
					{
						num = 2132341787;
						num4 = num;
					}
					else
					{
						num = 261187069;
						num4 = num;
					}
					continue;
				}
				case 10u:
				{
					status = StateStatus.Error;
					int num7;
					int num8;
					if (brain.PathFinder == null)
					{
						num7 = 1450780671;
						num8 = num7;
					}
					else
					{
						num7 = 1993026445;
						num8 = num7;
					}
					num = num7 ^ (int)(num2 * 1397684275);
					continue;
				}
				case 15u:
				{
					isAlert = customScientistNPC.IsAlert;
					int num5;
					int num6;
					if (brain.Navigator.IsSwimming())
					{
						num5 = 1592112848;
						num6 = num5;
					}
					else
					{
						num5 = 77449717;
						num6 = num5;
					}
					num = num5 ^ ((int)num2 * -1115869882);
					continue;
				}
				case 6u:
					status = StateStatus.Running;
					num = (int)((num2 * 467275279) ^ 0x2C21E563);
					continue;
				case 1u:
					return;
				case 8u:
					num = ((int)num2 * -1490106000) ^ -1009669284;
					continue;
				case 11u:
					customScientistNPC = entity as CustomScientistNPC;
					num = 1219665959;
					continue;
				case 4u:
				{
					int num3;
					if (brain.Navigator.SetDestination(pos, (!isAlert) ? BaseNavigator.NavigationSpeed.Slow : BaseNavigator.NavigationSpeed.Fast))
					{
						num = 350595918;
						num3 = num;
					}
					else
					{
						num = 1075139300;
						num3 = num;
					}
					continue;
				}
				case 13u:
					customScientistNPC.DestinationOverride = Vector3.zero;
					isAlert = true;
					num = ((int)num2 * -346324846) ^ -503917066;
					continue;
				case 3u:
					if (!(customScientistNPC.Settings.RoamRange <= 0f))
					{
						num = 539268486;
						continue;
					}
					bestRoamPosition = GetBestRoamPosition(brain.Navigator, customScientistNPC.Transform.position, brain.Events.Memory.Position.Get(4), 20f, 100f);
					goto IL_02c7;
				case 14u:
					bestRoamPosition = GetBestRoamPosition(brain.Navigator, customScientistNPC.HomePosition, brain.Events.Memory.Position.Get(4), 10f, customScientistNPC.Settings.RoamRange);
					goto IL_02c7;
				default:
					{
						status = StateStatus.Error;
						return;
					}
					IL_02c7:
					pos = bestRoamPosition;
					num = 1763591900;
					continue;
				}
				break;
			}
		}
	}

	public override void StateLeave(BaseAIBrain brain, BaseEntity entity)
	{
		base.StateLeave(brain, entity);
		while (true)
		{
			int num = 1338696414;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ 0x3A238EF9)) % 6)
				{
				case 2u:
					break;
				default:
					return;
				case 5u:
					Stop();
					num = ((int)num2 * -983466263) ^ 0x3B475C0B;
					continue;
				case 3u:
				{
					int num3;
					int num4;
					if (!isAlert)
					{
						num3 = -1070308723;
						num4 = num3;
					}
					else
					{
						num3 = -41044914;
						num4 = num3;
					}
					num = num3 ^ (int)(num2 * 1001649481);
					continue;
				}
				case 1u:
					isAlert = false;
					num = 1789786625;
					continue;
				case 0u:
					(entity as CustomScientistNPC).IsAlert = false;
					num = ((int)num2 * -1543899872) ^ 0x2E92BCF8;
					continue;
				case 4u:
					return;
				}
				break;
			}
		}
	}

	public override StateStatus StateThink(float delta, BaseAIBrain brain, BaseEntity entity)
	{
		base.StateThink(delta, brain, entity);
		while (true)
		{
			int num = 1781085896;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ 0x2A4C3EDF)) % 14)
				{
				case 2u:
					break;
				case 0u:
					\u202b\u202c\u200e\u206a\u202a\u206e\u200d\u206a\u200b\u202a\u202e\u206a\u202a\u202e\u206d\u206c\u202b\u200d\u200c\u206f\u200e\u206b\u206c\u202e\u206d\u206c\u200d\u202a\u206e\u202c\u200c\u200e\u202b\u202e\u206d\u206f\u206a\u202a\u206c\u200d\u202e = entity.transform.position;
					num = 1883934872;
					continue;
				case 6u:
				{
					int num5;
					if (brain.Navigator.Moving)
					{
						num = 439847391;
						num5 = num;
					}
					else
					{
						num = 557592631;
						num5 = num;
					}
					continue;
				}
				case 1u:
					\u206f\u200d\u202b\u206e\u202c\u206c\u200b\u200b\u202a\u206b\u200d\u202e\u200c\u200b\u206a\u200d\u206a\u200f\u202c\u202c\u206a\u206d\u206a\u206c\u206e\u200e\u202e\u206d\u206d\u202c\u200f\u202d\u200e\u202a\u206e\u206b\u206c\u202d\u200b\u202d\u202e = 0f;
					num = (int)((num2 * 1395674071) ^ 0x1EB1D695);
					continue;
				case 4u:
					return StateStatus.Running;
				case 10u:
					return StateStatus.Finished;
				case 5u:
					return status;
				case 13u:
				{
					int num6;
					int num7;
					if (status != StateStatus.Error)
					{
						num6 = -1621850277;
						num7 = num6;
					}
					else
					{
						num6 = -1835139577;
						num7 = num6;
					}
					num = num6 ^ ((int)num2 * -1564945361);
					continue;
				}
				case 3u:
				{
					int num9;
					if (entity.transform.position == \u202b\u202c\u200e\u206a\u202a\u206e\u200d\u206a\u200b\u202a\u202e\u206a\u202a\u202e\u206d\u206c\u202b\u200d\u200c\u206f\u200e\u206b\u206c\u202e\u206d\u206c\u200d\u202a\u206e\u202c\u200c\u200e\u202b\u202e\u206d\u206f\u206a\u202a\u206c\u200d\u202e)
					{
						num = 1559104864;
						num9 = num;
					}
					else
					{
						num = 176607353;
						num9 = num;
					}
					continue;
				}
				case 8u:
					return StateStatus.Running;
				case 7u:
				{
					int num8;
					if (brain.Navigator.IsSwimming())
					{
						num = 537807720;
						num8 = num;
					}
					else
					{
						num = 110796407;
						num8 = num;
					}
					continue;
				}
				case 9u:
				{
					int num3;
					int num4;
					if (!IsStuckSwimming())
					{
						num3 = 991186227;
						num4 = num3;
					}
					else
					{
						num3 = 583499355;
						num4 = num3;
					}
					num = num3 ^ ((int)num2 * -1480095862);
					continue;
				}
				case 11u:
					\u206f\u200d\u202b\u206e\u202c\u206c\u200b\u200b\u202a\u206b\u200d\u202e\u200c\u200b\u206a\u200d\u206a\u200f\u202c\u202c\u206a\u206d\u206a\u206c\u206e\u200e\u202e\u206d\u206d\u202c\u200f\u202d\u200e\u202a\u206e\u206b\u206c\u202d\u200b\u202d\u202e += delta;
					num = ((int)num2 * -1187398367) ^ -873901397;
					continue;
				default:
					return StateStatus.Finished;
				}
				break;
			}
		}
	}

	protected void Stop()
	{
		brain.Navigator.Stop();
	}

	protected Vector3 GetBestRoamPosition(BaseNavigator navigator, Vector3 localTo, Vector3 fallbackPos, float minRange, float maxRange)
	{
		int num = 0;
		int num6 = default(int);
		Vector3 position = default(Vector3);
		float num11 = default(float);
		Vector3 result = default(Vector3);
		while (true)
		{
			int num2 = -756767000;
			while (true)
			{
				uint num3;
				switch ((num3 = (uint)(num2 ^ -1043477845)) % 20)
				{
				case 0u:
					break;
				case 15u:
					num6 = 0;
					num2 = ((int)num3 * -372092571) ^ -1528976759;
					continue;
				case 13u:
					preferedTopologySamples[num6] = position;
					num2 = ((int)num3 * -1353111013) ^ 0x336F3061;
					continue;
				case 5u:
					num6++;
					num2 = (int)((num3 * 818008860) ^ 0x399509E2);
					continue;
				case 18u:
				{
					int num7;
					int num8;
					if (navigator.IsAcceptableWaterDepth(position))
					{
						num7 = 1533087508;
						num8 = num7;
					}
					else
					{
						num7 = 1288714114;
						num8 = num7;
					}
					num2 = num7 ^ (int)(num3 * 2052900166);
					continue;
				}
				case 12u:
				{
					int num15;
					int num16;
					if (num6 <= 0)
					{
						num15 = -1617779081;
						num16 = num15;
					}
					else
					{
						num15 = -101116583;
						num16 = num15;
					}
					num2 = num15 ^ ((int)num3 * -1219001520);
					continue;
				}
				case 9u:
					num11 = 0f;
					num2 = (int)(num3 * 210192046) ^ -1501823827;
					continue;
				case 14u:
					result = preferedTopologySamples[Random.Range(0, num6)];
					num2 = ((int)num3 * -217955334) ^ -1010325572;
					continue;
				case 4u:
					num2 = ((int)num3 * -1285689576) ^ 0x11177168;
					continue;
				case 6u:
				{
					int num9;
					int num10;
					if (navigator.IsPositionATopologyPreference(position))
					{
						num9 = -1002630402;
						num10 = num9;
					}
					else
					{
						num9 = -1225438754;
						num10 = num9;
					}
					num2 = num9 ^ (int)(num3 * 1741285416);
					continue;
				}
				case 7u:
					num++;
					num2 = (int)((num3 * 1438734654) ^ 0x2567E25B);
					continue;
				case 16u:
				{
					int num14;
					if (!(num11 >= 360f))
					{
						num2 = -543673294;
						num14 = num2;
					}
					else
					{
						num2 = -2049089643;
						num14 = num2;
					}
					continue;
				}
				case 8u:
				{
					int num13;
					if (num <= 0)
					{
						num2 = -109447804;
						num13 = num2;
					}
					else
					{
						num2 = -1443880387;
						num13 = num2;
					}
					continue;
				}
				case 17u:
				{
					Vector3 pointOnCircle = BasePathFinder.GetPointOnCircle(localTo, Random.Range(minRange, maxRange), num11 + Random.Range(0f, 90f));
					int num12;
					if (!navigator.GetNearestNavmeshPosition(pointOnCircle, out position, 20f))
					{
						num2 = -870993266;
						num12 = num2;
					}
					else
					{
						num2 = -1552225431;
						num12 = num2;
					}
					continue;
				}
				case 11u:
					result = fallbackPos;
					num2 = -1345254168;
					continue;
				case 1u:
					num11 += 90f;
					num2 = -258171653;
					continue;
				case 19u:
					topologySamples[num] = position;
					num2 = (int)((num3 * 2045841580) ^ 0x655EA538);
					continue;
				case 2u:
					result = topologySamples[Random.Range(0, num)];
					num2 = ((int)num3 * -1490329024) ^ 0x70525BBB;
					continue;
				case 10u:
				{
					int num4;
					int num5;
					if (Random.Range(0f, 1f) <= 0.9f)
					{
						num4 = -526561061;
						num5 = num4;
					}
					else
					{
						num4 = -832611473;
						num5 = num4;
					}
					num2 = num4 ^ ((int)num3 * -374623820);
					continue;
				}
				default:
					return result;
				}
				break;
			}
		}
	}

	static CustomRoamState()
	{
		while (true)
		{
			int num = -1826595061;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ -1893699703)) % 3)
				{
				case 0u:
					break;
				default:
					return;
				case 2u:
					goto IL_002d;
				case 1u:
					return;
				}
				break;
				IL_002d:
				topologySamples = new Vector3[4];
				num = ((int)num2 * -2044520454) ^ -1040991842;
			}
		}
	}
}
