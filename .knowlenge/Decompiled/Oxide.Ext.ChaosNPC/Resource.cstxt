using Oxide.Core;

public class Resource
{
	public string ResourceTitle;

	public string ResourceVersion;

	public VersionNumber VersionNumber
	{
		get
		{
			string[] array = ResourceVersion.Split(new char[1] { '.' });
			int result3 = default(int);
			VersionNumber result4 = default(VersionNumber);
			int result = default(int);
			int result2 = default(int);
			while (true)
			{
				int num = 1091546603;
				while (true)
				{
					uint num2;
					switch ((num2 = (uint)(num ^ 0x4C00F88B)) % 9)
					{
					case 3u:
						break;
					case 1u:
					{
						int num7;
						int num8;
						if (int.TryParse(array[2], out result3))
						{
							num7 = 1883983171;
							num8 = num7;
						}
						else
						{
							num7 = 158645886;
							num8 = num7;
						}
						num = num7 ^ ((int)num2 * -1181329841);
						continue;
					}
					case 6u:
						return result4;
					case 5u:
					{
						int num5;
						int num6;
						if (array.Length == 3)
						{
							num5 = -1045893198;
							num6 = num5;
						}
						else
						{
							num5 = -1094527859;
							num6 = num5;
						}
						num = num5 ^ ((int)num2 * -1828722806);
						continue;
					}
					case 2u:
						return default(VersionNumber);
					case 7u:
					{
						int num9;
						if (!int.TryParse(array[0], out result))
						{
							num = 1011986603;
							num9 = num;
						}
						else
						{
							num = 2137858125;
							num9 = num;
						}
						continue;
					}
					case 0u:
						result4 = default(VersionNumber);
						num = 2018988350;
						continue;
					case 4u:
					{
						int num3;
						int num4;
						if (!int.TryParse(array[1], out result2))
						{
							num3 = -19722699;
							num4 = num3;
						}
						else
						{
							num3 = -1853069938;
							num4 = num3;
						}
						num = num3 ^ (int)(num2 * 973309733);
						continue;
					}
					default:
						return new VersionNumber(result, result2, result3);
					}
					break;
				}
			}
		}
	}
}
