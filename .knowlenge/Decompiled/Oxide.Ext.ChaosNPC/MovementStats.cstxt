using Newtonsoft.Json;

public class MovementStats
{
	public float Speed { get; set; } = 6.2f;

	public float Acceleration { get; set; } = 12f;

	[JsonProperty(PropertyName = "Turn speed")]
	public float TurnSpeed { get; set; } = 120f;

	[JsonProperty(PropertyName = "Speed multiplier - Slowest")]
	public float SlowestSpeedFraction { get; set; } = 0.1f;

	[JsonProperty(PropertyName = "Speed multiplier - Slow")]
	public float SlowSpeedFraction { get; set; } = 0.3f;

	[JsonProperty(PropertyName = "Speed multiplier - Normal")]
	public float NormalSpeedFraction { get; set; } = 0.5f;

	[JsonProperty(PropertyName = "Speed multiplier - Fast")]
	public float FastSpeedFraction { get; set; } = 1f;

	[JsonProperty(PropertyName = "Speed multiplier - Low health")]
	public float LowHealthMaxSpeedFraction { get; set; } = 0.5f;

	[JsonIgnore]
	public bool CanSwim { get; set; }

	[JsonIgnore]
	public float SwimmingSpeedMultiplier { get; set; } = 0.4f;

	[JsonIgnore]
	public float MaxWaterDepth { get; set; } = 0.5f;

	public virtual void ApplySettingsToNavigator(BaseNavigator baseNavigator)
	{
		baseNavigator.Acceleration = Acceleration;
		baseNavigator.FastSpeedFraction = FastSpeedFraction;
		baseNavigator.LowHealthMaxSpeedFraction = LowHealthMaxSpeedFraction;
		baseNavigator.NormalSpeedFraction = NormalSpeedFraction;
		baseNavigator.SlowestSpeedFraction = SlowestSpeedFraction;
		baseNavigator.SlowSpeedFraction = SlowSpeedFraction;
		baseNavigator.Speed = Speed;
		baseNavigator.TurnSpeed = TurnSpeed;
		baseNavigator.topologyPreference = TerrainTopology.Enum.Field | TerrainTopology.Enum.Summit | TerrainTopology.Enum.Beachside | TerrainTopology.Enum.Beach | TerrainTopology.Enum.Forest | TerrainTopology.Enum.Decor | TerrainTopology.Enum.Monument | TerrainTopology.Enum.Road | TerrainTopology.Enum.Roadside | TerrainTopology.Enum.Rail | TerrainTopology.Enum.Railside | TerrainTopology.Enum.Building | TerrainTopology.Enum.Mountain | TerrainTopology.Enum.Clutter | TerrainTopology.Enum.Alt | TerrainTopology.Enum.Mainland | TerrainTopology.Enum.Hilltop;
		if (CanSwim)
		{
			baseNavigator.SwimmingSpeedMultiplier = SwimmingSpeedMultiplier;
			baseNavigator.MaxWaterDepth = MaxWaterDepth;
		}
	}
}
