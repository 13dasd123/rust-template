using Newtonsoft.Json;
using UnityEngine;

public class SensoryStats
{
	[JsonProperty(PropertyName = "Attack range multiplier")]
	public float AttackRangeMultiplier { get; set; } = 1.5f;

	[JsonProperty(PropertyName = "Sense range")]
	public float SenseRange { get; set; } = 30f;

	[JsonProperty(PropertyName = "Listen range")]
	public float ListenRange { get; set; } = 20f;

	[JsonProperty(PropertyName = "Target lost range")]
	public float TargetLostRange { get; set; } = 90f;

	[JsonProperty(PropertyName = "Target lost range time (seconds)")]
	public float TargetLostRangeTime { get; set; } = 5f;

	[JsonProperty(PropertyName = "Target lost LOS time (seconds)")]
	public float TargetLostLOSTime { get; set; } = 5f;

	[JsonProperty(PropertyName = "Ignore sneaking outside of vision range")]
	public bool IgnoreNonVisionSneakers { get; set; } = true;

	[JsonProperty(PropertyName = "Vision cone (0 - 180 degrees)")]
	public float VisionCone { get; set; } = 135f;

	[JsonProperty(PropertyName = "Ignore players in safe zone")]
	public bool IgnoreSafeZonePlayers { get; set; } = true;

	[JsonIgnore]
	public bool UseThrowableExplosives { get; set; }

	[JsonIgnore]
	public bool UseMedicalItems { get; set; }

	[JsonIgnore]
	public float HealChance { get; set; } = 0.5f;

	[JsonIgnore]
	public float HealBelowHealthFraction { get; set; } = 0.5f;

	public void ApplySettingsToBrain(BaseAIBrain brain)
	{
		brain.MaxGroupSize = int.MaxValue;
		brain.AttackRangeMultiplier = 1f;
		brain.SenseRange = SenseRange;
		brain.ListenRange = ListenRange;
		brain.TargetLostRange = TargetLostRange;
		brain.CheckVisionCone = IgnoreNonVisionSneakers;
		brain.IgnoreNonVisionSneakers = IgnoreNonVisionSneakers;
		brain.IgnoreSafeZonePlayers = IgnoreSafeZonePlayers;
		brain.CanUseHealingItems = UseMedicalItems;
		brain.HealChance = HealChance;
		brain.HealBelowHealthFraction = HealBelowHealthFraction;
		brain.VisionCone = Vector3.Dot(Vector3.forward, Quaternion.Euler(0f, VisionCone, 0f) * Vector3.forward);
	}
}
