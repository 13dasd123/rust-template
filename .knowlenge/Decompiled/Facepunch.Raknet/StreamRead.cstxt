using Facepunch.Network.Raknet;
using Network;

internal class StreamRead : Read
{
	private Peer peer;

	public override int length => peer.incomingBytes;

	public override int position => length - unread;

	public override int unread => peer.incomingBytesUnread;

	public override long Length => peer.incomingBytes;

	public override long Position
	{
		get
		{
			return base.Position;
		}
		set
		{
			peer.SetReadPos((int)value);
		}
	}

	public StreamRead(Peer peer)
	{
		this.peer = peer;
	}

	public void Shutdown()
	{
		peer = null;
	}

	public override bool Bit()
	{
		return peer.ReadBit();
	}

	public override byte UInt8()
	{
		return peer.ReadUInt8();
	}

	public override ushort UInt16()
	{
		return peer.ReadUInt16();
	}

	public override uint UInt32()
	{
		return peer.ReadUInt32();
	}

	public override ulong UInt64()
	{
		return peer.ReadUInt64();
	}

	public override sbyte Int8()
	{
		return peer.ReadInt8();
	}

	public override short Int16()
	{
		return peer.ReadInt16();
	}

	public override int Int32()
	{
		return peer.ReadInt32();
	}

	public override long Int64()
	{
		return peer.ReadInt64();
	}

	public override float Float()
	{
		return peer.ReadFloat();
	}

	public override double Double()
	{
		return peer.ReadDouble();
	}

	public override int Read(byte[] buffer, int offset, int count)
	{
		return peer.Read(buffer, offset, count);
	}
}
