using System.IO;
using Facepunch.Network.Raknet;
using Network;

internal class StreamWrite : Write
{
	private NetworkPeer net;

	private Peer peer;

	private MemoryStream stream;

	public override bool CanSeek => stream.CanSeek;

	public StreamWrite(NetworkPeer net, Peer peer)
	{
		this.net = net;
		this.peer = peer;
		stream = new MemoryStream();
	}

	public void Shutdown()
	{
		stream.Dispose();
		stream = null;
		peer = null;
		net = null;
	}

	public override bool Start()
	{
		if (peer == null)
		{
			return false;
		}
		stream.Position = 0L;
		stream.SetLength(0L);
		return true;
	}

	public override void Send(SendInfo info)
	{
		if (info.connections != null)
		{
			foreach (Connection connection2 in info.connections)
			{
				MemoryStream memoryStream = stream;
				if (memoryStream.Length > 1 && net.cryptography != null && net.cryptography.IsEnabledOutgoing(connection2))
				{
					memoryStream = net.cryptography.EncryptCopy(connection2, memoryStream, 1);
				}
				peer.SendStart();
				peer.WriteBytes(memoryStream);
				peer.SendTo(connection2.guid, info.priority, info.method, info.channel);
			}
		}
		if (info.connection != null)
		{
			Connection connection = info.connection;
			MemoryStream memoryStream2 = stream;
			if (memoryStream2.Length > 1 && net.cryptography != null && net.cryptography.IsEnabledOutgoing(connection))
			{
				net.cryptography.Encrypt(connection, memoryStream2, 1);
			}
			peer.SendStart();
			peer.WriteBytes(memoryStream2);
			peer.SendTo(connection.guid, info.priority, info.method, info.channel);
		}
	}

	public override void PacketID(Message.Type val)
	{
		byte b = (byte)val;
		b += 140;
		UInt8(b);
	}

	public override void UInt8(byte val)
	{
		Union8 u = default(Union8);
		u.u = val;
		Write8(u);
	}

	public override void UInt16(ushort val)
	{
		Union16 u = default(Union16);
		u.u = val;
		Write16(u);
	}

	public override void UInt32(uint val)
	{
		Union32 u = default(Union32);
		u.u = val;
		Write32(u);
	}

	public override void UInt64(ulong val)
	{
		Union64 u = default(Union64);
		u.u = val;
		Write64(u);
	}

	public override void Int8(sbyte val)
	{
		Union8 u = default(Union8);
		u.i = val;
		Write8(u);
	}

	public override void Int16(short val)
	{
		Union16 u = default(Union16);
		u.i = val;
		Write16(u);
	}

	public override void Int32(int val)
	{
		Union32 u = default(Union32);
		u.i = val;
		Write32(u);
	}

	public override void Int64(long val)
	{
		Union64 u = default(Union64);
		u.i = val;
		Write64(u);
	}

	public override void Bool(bool val)
	{
		stream.WriteByte((byte)(val ? 1 : 0));
	}

	public override void Float(float val)
	{
		Union32 u = default(Union32);
		u.f = val;
		Write32(u);
	}

	public override void Double(double val)
	{
		Union64 u = default(Union64);
		u.f = val;
		Write64(u);
	}

	public override void Bytes(byte[] val)
	{
		stream.Write(val, 0, val.Length);
	}

	public override void Write(byte[] buffer, int offset, int count)
	{
		stream.Write(buffer, offset, count);
	}

	public override void WriteByte(byte value)
	{
		stream.WriteByte(value);
	}

	public override long Seek(long offset, SeekOrigin origin)
	{
		return stream.Seek(offset, origin);
	}

	private byte[] GetWriteBuffer()
	{
		return stream.GetBuffer();
	}

	private long GetWriteOffset(long i)
	{
		long position = stream.Position;
		if (stream.Length < position + i)
		{
			stream.SetLength(position + i);
		}
		stream.Position = position + i;
		return position;
	}

	private void Write8(Union8 u)
	{
		long writeOffset = GetWriteOffset(1L);
		byte[] writeBuffer = GetWriteBuffer();
		writeBuffer[writeOffset] = u.b1;
	}

	private void Write16(Union16 u)
	{
		long writeOffset = GetWriteOffset(2L);
		byte[] writeBuffer = GetWriteBuffer();
		writeBuffer[writeOffset] = u.b1;
		writeBuffer[writeOffset + 1] = u.b2;
	}

	private void Write32(Union32 u)
	{
		long writeOffset = GetWriteOffset(4L);
		byte[] writeBuffer = GetWriteBuffer();
		writeBuffer[writeOffset] = u.b1;
		writeBuffer[writeOffset + 1] = u.b2;
		writeBuffer[writeOffset + 2] = u.b3;
		writeBuffer[writeOffset + 3] = u.b4;
	}

	private void Write64(Union64 u)
	{
		long writeOffset = GetWriteOffset(8L);
		byte[] writeBuffer = GetWriteBuffer();
		writeBuffer[writeOffset] = u.b1;
		writeBuffer[writeOffset + 1] = u.b2;
		writeBuffer[writeOffset + 2] = u.b3;
		writeBuffer[writeOffset + 3] = u.b4;
		writeBuffer[writeOffset + 4] = u.b5;
		writeBuffer[writeOffset + 5] = u.b6;
		writeBuffer[writeOffset + 6] = u.b7;
		writeBuffer[writeOffset + 7] = u.b8;
	}
}
