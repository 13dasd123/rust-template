using System;
using System.Runtime.InteropServices;
using Facepunch.Network.Raknet;
using Network;

internal class DemoPeer : Peer
{
	public byte[] Packet;

	public int Position;

	public override ulong incomingGUID => 0uL;

	public override uint incomingAddressInt => 0u;

	public override uint incomingPort => 0u;

	public override int incomingBits => Packet.Length * 8;

	public override int incomingBitsUnread => (Packet.Length - Position) * 8;

	public override void SetReadPos(int bitsOffset)
	{
		Position = bitsOffset * 8;
	}

	protected unsafe override bool Read(byte* data, int length)
	{
		if (Position + length > Packet.Length)
		{
			return false;
		}
		Marshal.Copy(Packet, Position, (IntPtr)data, length);
		Position += length;
		return true;
	}

	public override string GetStatisticsString(ulong guid)
	{
		return string.Empty;
	}

	public override int GetPingAverage(ulong guid)
	{
		return 1;
	}

	public override int GetPingLast(ulong guid)
	{
		return 1;
	}

	public override int GetPingLowest(ulong guid)
	{
		return 1;
	}

	public override Native.RaknetStats GetStatistics(ulong guid)
	{
		return default(Native.RaknetStats);
	}

	public override ulong GetStat(Connection connection, NetworkPeer.StatTypeLong type)
	{
		return 1uL;
	}

	public override void SendStart()
	{
	}

	protected unsafe override void Write(byte* data, int length)
	{
	}

	public override uint SendBroadcast(Priority priority, SendMethod reliability, sbyte channel)
	{
		return 0u;
	}

	public override uint SendTo(ulong guid, Priority priority, SendMethod reliability, sbyte channel)
	{
		return 0u;
	}
}
