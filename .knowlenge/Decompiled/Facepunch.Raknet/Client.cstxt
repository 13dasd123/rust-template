using System;
using System.IO;
using Facepunch;
using Facepunch.Network.Raknet;
using Network;
using UnityEngine;

public class Client : Client
{
	private Peer peer;

	public override bool IsConnected()
	{
		return peer != null;
	}

	public override bool Connect(string strURL, int port)
	{
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Expected O, but got Unknown
		lock (((BaseNetwork)this).readLock)
		{
			lock (((BaseNetwork)this).writeLock)
			{
				lock (((BaseNetwork)this).decryptLock)
				{
					((Client)this).Connect(strURL, port);
					peer = Peer.CreateConnection(strURL, port, 12, 400, 0);
					if (peer == null)
					{
						return false;
					}
					((Client)this).ConnectedAddress = strURL;
					((Client)this).ConnectedPort = port;
					((Client)this).ServerName = "";
					((Client)this).Connection = new Connection();
					((BaseNetwork)this).MultithreadingInit((IServerCallback)null);
					return true;
				}
			}
		}
	}

	internal bool HandleRaknetPacket(byte type, NetRead read)
	{
		if (type >= 140)
		{
			return false;
		}
		switch (type)
		{
		case 16:
			if (((Client)this).Connection.guid != 0L)
			{
				Console.WriteLine("Multiple PacketType.CONNECTION_REQUEST_ACCEPTED");
			}
			((Client)this).Connection.guid = read.guid;
			base.IncomingStats.Add("Unconnected", "RequestAccepted", ((Stream)(object)read).Length);
			return true;
		case 17:
			((Client)this).Disconnect("Connection Attempt Failed", false);
			return true;
		case 20:
			((Client)this).Disconnect("Server is Full", false);
			return true;
		case 21:
			if (((Client)this).Connection != null && ((Client)this).Connection.guid != read.guid)
			{
				return true;
			}
			((Client)this).Disconnect(Client.disconnectReason, false);
			return true;
		case 22:
			if (((Client)this).Connection != null && ((Client)this).Connection.guid != read.guid)
			{
				return true;
			}
			((Client)this).Disconnect("Timed Out", false);
			return true;
		case 23:
			if (((Client)this).Connection != null && ((Client)this).Connection.guid != read.guid)
			{
				return true;
			}
			((Client)this).Disconnect("Connection Banned", false);
			return true;
		default:
			base.IncomingStats.Add("Unconnected", "Unhandled", ((Stream)(object)read).Length);
			if (((Client)this).Connection != null && read.guid != ((Client)this).Connection.guid)
			{
				Debug.LogWarning((object)("[CLIENT] Unhandled Raknet packet " + type + " from unknown source"));
				return true;
			}
			Debug.LogWarning((object)("Unhandled Raknet packet " + type));
			return true;
		}
	}

	protected void HandleMessage()
	{
		NetRead val = Pool.Get<NetRead>();
		if (val.Data != null)
		{
			Debug.LogError((object)"NETREAD NOT POOLED CORRECTLY");
		}
		val.Start(((Client)this).Connection, peer.incomingGUID, peer.RawData(), peer.incomingBytesUnread);
		if (BaseNetwork.Multithreading)
		{
			((BaseNetwork)this).EnqueueDecrypt(val);
		}
		else
		{
			((BaseNetwork)this).ProcessDecrypt(val);
		}
	}

	public override void ProcessRead(NetRead read)
	{
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		((BaseNetwork)this).RecordReadForConnection(read.connection, (Stream)(object)read);
		byte b = read.PacketID();
		if (HandleRaknetPacket(b, read))
		{
			read.RemoveReference();
			return;
		}
		if (read.connection != null)
		{
			b -= 140;
			if (read.guid != read.connection.guid)
			{
				base.IncomingStats.Add("Error", "WrongGuid", ((Stream)(object)read).Length);
				read.RemoveReference();
				return;
			}
			if (b > 26)
			{
				Type val = (Type)26;
				Debug.LogWarning((object)("Invalid Packet (higher than " + ((object)(Type)(ref val)/*cast due to .constrained prefix*/).ToString() + ")"));
				((Client)this).Disconnect("Invalid Packet (" + b + ") " + ((Stream)(object)read).Length + "b", true);
				read.RemoveReference();
				return;
			}
			Message val2 = ((BaseNetwork)this).StartMessage((Type)b, read);
			if (base.callbackHandler != null)
			{
				try
				{
					TimeWarning val3 = TimeWarning.New("OnMessage", 0);
					try
					{
						base.callbackHandler.OnNetworkMessage(val2);
					}
					finally
					{
						((IDisposable)val3)?.Dispose();
					}
				}
				catch (Exception ex)
				{
					Debug.LogException(ex);
					((Client)this).Disconnect(ex.Message + "\n" + ex.StackTrace, true);
				}
			}
			Pool.Free<Message>(ref val2);
		}
		read.RemoveReference();
	}

	protected override bool Receive()
	{
		if (peer.Receive())
		{
			HandleMessage();
			return true;
		}
		return false;
	}

	public override void Disconnect(string reason, bool sendReasonToServer)
	{
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		lock (((BaseNetwork)this).readLock)
		{
			lock (((BaseNetwork)this).writeLock)
			{
				lock (((BaseNetwork)this).decryptLock)
				{
					if (sendReasonToServer && peer != null)
					{
						NetWrite obj = ((BaseNetwork)this).StartWrite();
						obj.PacketID((Type)14);
						obj.String(reason, false);
						obj.SendImmediate(new SendInfo(((Client)this).Connection)
						{
							method = (SendMethod)1,
							priority = (Priority)0
						});
					}
					if (peer != null)
					{
						peer.Close();
						peer = null;
					}
					((Client)this).ConnectedAddress = "";
					((Client)this).ConnectedPort = 0;
					((Client)this).Connection = null;
					((Client)this).OnDisconnected(reason);
				}
			}
		}
	}

	public override string GetDebug(Connection connection)
	{
		if (peer == null)
		{
			return "";
		}
		if (connection == null)
		{
			return peer.GetStatisticsString(0uL);
		}
		return peer.GetStatisticsString(connection.guid);
	}

	public override ulong GetStat(Connection connection, StatTypeLong type)
	{
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		if (peer == null)
		{
			return 0uL;
		}
		return peer.GetStat(connection, type);
	}

	public override int GetLastPing()
	{
		if (((Client)this).Connection == null)
		{
			return 1;
		}
		return peer.GetPingLast(((Client)this).Connection.guid);
	}

	public override void ProcessWrite(NetWrite write)
	{
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		ArraySegment<byte> arraySegment = ((BaseNetwork)this).Encrypt(((Client)this).Connection, write);
		peer.SendStart();
		peer.WriteBytes(arraySegment.Array, 0, arraySegment.Offset + arraySegment.Count);
		peer.SendTo(((Client)this).Connection.guid, write.priority, write.method, write.channel);
		write.RemoveReference();
	}
}
