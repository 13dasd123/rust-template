using System;
using System.IO;
using System.Reflection;
using Harmony;
using UnityEngine;

public static class HarmonyLoader
{
	[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
	public static void LoadHarmonyMods()
	{
		try
		{
			HarmonyInstance.DEBUG = true;
			string path = Path.Combine(Application.dataPath, "..");
			FileLog.logPath = Path.Combine(path, "harmony_log.txt");
			try
			{
				File.Delete(FileLog.logPath);
			}
			catch
			{
			}
			string modPath = Path.Combine(path, "HarmonyMods");
			if (!Directory.Exists(modPath))
			{
				try
				{
					Directory.CreateDirectory(modPath);
					return;
				}
				catch
				{
					return;
				}
			}
			AppDomain.CurrentDomain.AssemblyResolve += delegate(object sender, ResolveEventArgs args)
			{
				AssemblyName assemblyName = new AssemblyName(args.Name);
				string text = Path.Combine(modPath, assemblyName.Name + ".dll");
				return (!File.Exists(text)) ? null : LoadAssembly(text);
			};
			foreach (string item in Directory.EnumerateFiles(modPath, "*.dll"))
			{
				if (string.IsNullOrEmpty(item))
				{
					continue;
				}
				string fileNameWithoutExtension = Path.GetFileNameWithoutExtension(item);
				if (!IsKnownDependency(fileNameWithoutExtension))
				{
					string text2 = "com.facepunch.rust_dedicated." + fileNameWithoutExtension;
					Debug.Log("[HarmonyLoader " + text2 + "] Loading from " + item);
					try
					{
						Assembly assembly = LoadAssembly(item);
						HarmonyInstance.Create(text2).PatchAll(assembly);
					}
					catch (Exception arg)
					{
						Debug.LogError($"[HarmonyLoader {text2}] Failed to load: {arg}");
					}
				}
			}
		}
		finally
		{
			FileLog.FlushBuffer();
		}
	}

	private static Assembly LoadAssembly(string assemblyPath)
	{
		return Assembly.LoadFrom(assemblyPath);
	}

	private static bool IsKnownDependency(string assemblyName)
	{
		if (!assemblyName.StartsWith("System.", StringComparison.InvariantCultureIgnoreCase) && !assemblyName.StartsWith("Microsoft.", StringComparison.InvariantCultureIgnoreCase) && !assemblyName.StartsWith("Newtonsoft.", StringComparison.InvariantCultureIgnoreCase))
		{
			return assemblyName.StartsWith("UnityEngine.", StringComparison.InvariantCultureIgnoreCase);
		}
		return true;
	}
}
