using System;
using System.IO;
using UnityEngine;

public static class Texture
{
	public static void CompressNormals(this Texture2D tex)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		Color val = default(Color);
		for (int i = 0; i < ((Texture)tex).width; i++)
		{
			for (int j = 0; j < ((Texture)tex).height; j++)
			{
				Color pixel = tex.GetPixel(i, j);
				val.r = pixel.g;
				val.g = pixel.g;
				val.b = pixel.g;
				val.a = pixel.r;
				tex.SetPixel(i, j, val);
			}
		}
		tex.Apply(true);
	}

	public static void DecompressNormals(this Texture2D tex)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		Color val = default(Color);
		for (int i = 0; i < ((Texture)tex).width; i++)
		{
			for (int j = 0; j < ((Texture)tex).height; j++)
			{
				Color pixel = tex.GetPixel(i, j);
				val.r = pixel.a;
				val.g = Mathf.GammaToLinearSpace(pixel.g);
				val.b = 1f;
				val.a = 1f;
				tex.SetPixel(i, j, val);
			}
		}
		tex.Apply(true);
	}

	public static bool SaveAsPng(this Texture texture, string fileName)
	{
		Texture2D val = (Texture2D)(object)((texture is Texture2D) ? texture : null);
		if ((Object)(object)val == (Object)null)
		{
			return false;
		}
		byte[] array = null;
		try
		{
			array = ImageConversion.EncodeToPNG(val);
		}
		catch (Exception)
		{
		}
		if (array == null)
		{
			Texture2D obj = CreateReadableCopy(val);
			array = ImageConversion.EncodeToPNG(obj);
			Object.DestroyImmediate((Object)(object)obj);
		}
		if (array == null)
		{
			return false;
		}
		if (File.Exists(fileName))
		{
			File.Delete(fileName);
		}
		File.WriteAllBytes(fileName, array);
		return true;
	}

	public static Texture2D CreateReadableCopy(Texture2D texture, int width = 0, int height = 0)
	{
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Expected O, but got Unknown
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Expected O, but got Unknown
		if (width <= 0)
		{
			width = ((Texture)texture).width;
		}
		if (height <= 0)
		{
			height = ((Texture)texture).height;
		}
		RenderTexture val = new RenderTexture(width, height, 24, (RenderTextureFormat)0);
		Texture2D val2 = new Texture2D(width, height, (TextureFormat)5, ((Texture)texture).mipmapCount > 0)
		{
			name = ((Object)texture).name
		};
		Graphics.Blit((Texture)(object)texture, val);
		RenderTexture.active = val;
		val2.ReadPixels(new Rect(0f, 0f, (float)width, (float)height), 0, 0, true);
		RenderTexture.active = null;
		val2.Apply(true);
		Object.DestroyImmediate((Object)(object)val);
		return val2;
	}

	public static Texture2D LimitSize(Texture2D tex, int w, int h)
	{
		if (((Texture)tex).width <= w && ((Texture)tex).height <= h)
		{
			return tex;
		}
		int num = ((Texture)tex).width;
		int num2 = ((Texture)tex).height;
		if (num > w)
		{
			double num3 = (double)w / (double)num;
			num = (int)((double)num * num3);
			num2 = (int)((double)num2 * num3);
		}
		if (num2 > h)
		{
			double num4 = (double)h / (double)num2;
			num = (int)((double)num * num4);
			num2 = (int)((double)num2 * num4);
		}
		return CreateReadableCopy(tex, num, num2);
	}

	public static Texture2D LimitSize(Texture2D tex, object maxTextureSize1, object maxTextureSize2)
	{
		throw new NotImplementedException();
	}
}
