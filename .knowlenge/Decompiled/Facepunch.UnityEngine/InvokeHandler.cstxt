using System;
using System.Collections.Generic;
using UnityEngine;

public class InvokeHandler : SingletonComponent<InvokeHandler>
{
	private ListDictionary<InvokeAction, float> curList = new ListDictionary<InvokeAction, float>(2048);

	private ListHashSet<InvokeAction> addList = new ListHashSet<InvokeAction>(1024);

	private ListHashSet<InvokeAction> delList = new ListHashSet<InvokeAction>(1024);

	private int nullIndex;

	private const int nullChecks = 50;

	protected void LateUpdate()
	{
		ApplyRemoves();
		ApplyAdds();
		DoTick();
		RemoveExpired();
		ApplyRemoves();
		ApplyAdds();
	}

	private void DoTick()
	{
		float[] buffer = curList.Values.Buffer;
		InvokeAction[] buffer2 = curList.Keys.Buffer;
		int count = curList.Count;
		float time = Time.time;
		for (int i = 0; i < count; i++)
		{
			if (!(time >= buffer[i]))
			{
				continue;
			}
			InvokeAction invokeAction = buffer2[i];
			if ((bool)invokeAction.sender && !delList.Contains(invokeAction))
			{
				if (invokeAction.repeat >= 0f)
				{
					float num = time + invokeAction.repeat;
					if (invokeAction.random > 0f)
					{
						num += UnityEngine.Random.Range(0f - invokeAction.random, invokeAction.random);
					}
					buffer[i] = num;
				}
				else
				{
					QueueRemove(invokeAction);
				}
				TimeWarning.BeginSample(invokeAction.action.Method.Name);
				invokeAction.action();
				TimeWarning.EndSample();
			}
			else
			{
				QueueRemove(invokeAction);
			}
		}
	}

	private void RemoveExpired()
	{
		InvokeAction[] buffer = curList.Keys.Buffer;
		int count = curList.Count;
		if (nullIndex >= count)
		{
			nullIndex = 0;
		}
		int num = Mathf.Min(nullIndex + 50, count);
		while (nullIndex < num)
		{
			InvokeAction invoke = buffer[nullIndex];
			if (!invoke.sender)
			{
				QueueRemove(invoke);
			}
			nullIndex++;
		}
	}

	private void QueueAdd(InvokeAction invoke)
	{
		delList.Remove(invoke);
		addList.Remove(invoke);
		addList.Add(invoke);
	}

	private void QueueRemove(InvokeAction invoke)
	{
		delList.Remove(invoke);
		addList.Remove(invoke);
		delList.Add(invoke);
	}

	private bool Contains(InvokeAction invoke)
	{
		if (!delList.Contains(invoke))
		{
			if (!curList.Contains(invoke))
			{
				return addList.Contains(invoke);
			}
			return true;
		}
		return false;
	}

	private void ApplyAdds()
	{
		InvokeAction[] buffer = addList.Values.Buffer;
		int count = addList.Count;
		float time = Time.time;
		for (int i = 0; i < count; i++)
		{
			InvokeAction key = buffer[i];
			curList.Remove(key);
			curList.Add(key, time + key.initial);
		}
		addList.Clear();
	}

	private void ApplyRemoves()
	{
		InvokeAction[] buffer = delList.Values.Buffer;
		int count = delList.Count;
		for (int i = 0; i < count; i++)
		{
			InvokeAction key = buffer[i];
			curList.Remove(key);
		}
		delList.Clear();
	}

	public static void FindInvokes(Behaviour sender, List<InvokeAction> list)
	{
		if (!SingletonComponent<InvokeHandler>.Instance)
		{
			return;
		}
		InvokeAction[] buffer = SingletonComponent<InvokeHandler>.Instance.curList.Keys.Buffer;
		int count = SingletonComponent<InvokeHandler>.Instance.curList.Count;
		for (int i = 0; i < count; i++)
		{
			InvokeAction item = buffer[i];
			if (item.sender == sender)
			{
				list.Add(item);
			}
		}
	}

	public static int Count()
	{
		if (!SingletonComponent<InvokeHandler>.Instance)
		{
			return 0;
		}
		return SingletonComponent<InvokeHandler>.Instance.curList.Count;
	}

	public static bool IsInvoking(Behaviour sender, Action action)
	{
		if (!SingletonComponent<InvokeHandler>.Instance)
		{
			return false;
		}
		return SingletonComponent<InvokeHandler>.Instance.Contains(new InvokeAction(sender, action));
	}

	public static void Invoke(Behaviour sender, Action action, float time)
	{
		if (!SingletonComponent<InvokeHandler>.Instance)
		{
			CreateInstance();
		}
		SingletonComponent<InvokeHandler>.Instance.QueueAdd(new InvokeAction(sender, action, time));
	}

	public static void InvokeRepeating(Behaviour sender, Action action, float time, float repeat)
	{
		if (!SingletonComponent<InvokeHandler>.Instance)
		{
			CreateInstance();
		}
		SingletonComponent<InvokeHandler>.Instance.QueueAdd(new InvokeAction(sender, action, time, repeat));
	}

	public static void InvokeRandomized(Behaviour sender, Action action, float time, float repeat, float random)
	{
		if (!SingletonComponent<InvokeHandler>.Instance)
		{
			CreateInstance();
		}
		SingletonComponent<InvokeHandler>.Instance.QueueAdd(new InvokeAction(sender, action, time, repeat, random));
	}

	public static void CancelInvoke(Behaviour sender, Action action)
	{
		if ((bool)SingletonComponent<InvokeHandler>.Instance)
		{
			SingletonComponent<InvokeHandler>.Instance.QueueRemove(new InvokeAction(sender, action));
		}
	}

	private static void CreateInstance()
	{
		GameObject obj = new GameObject();
		obj.name = "InvokeHandler";
		obj.AddComponent<InvokeHandler>();
		UnityEngine.Object.DontDestroyOnLoad(obj);
	}
}
