using UnityEngine;

public static class TextureEx
{
	private static Color32[] buffer = (Color32[])(object)new Color32[8192];

	public static void Clear(this Texture2D tex, Color32 color)
	{
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		if (((Texture)tex).width > buffer.Length)
		{
			Debug.LogError((object)("Trying to clear texture that is too big: " + ((Texture)tex).width));
			return;
		}
		for (int i = 0; i < ((Texture)tex).width; i++)
		{
			buffer[i] = color;
		}
		for (int j = 0; j < ((Texture)tex).height; j++)
		{
			tex.SetPixels32(0, j, ((Texture)tex).width, 1, buffer);
		}
		tex.Apply();
	}

	public static int GetSizeInBytes(this Texture texture)
	{
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		int num = texture.width;
		int num2 = texture.height;
		if (texture is Texture2D)
		{
			Texture obj = ((texture is Texture2D) ? texture : null);
			int bitsPerPixel = GetBitsPerPixel(((Texture2D)obj).format);
			int mipmapCount = obj.mipmapCount;
			int i = 1;
			int num3 = 0;
			for (; i <= mipmapCount; i++)
			{
				num3 += num * num2 * bitsPerPixel / 8;
				num /= 2;
				num2 /= 2;
			}
			return num3;
		}
		if (texture is Texture2DArray)
		{
			Texture obj2 = ((texture is Texture2DArray) ? texture : null);
			int bitsPerPixel2 = GetBitsPerPixel(((Texture2DArray)obj2).format);
			int num4 = 10;
			int j = 1;
			int num5 = 0;
			int depth = ((Texture2DArray)obj2).depth;
			for (; j <= num4; j++)
			{
				num5 += num * num2 * bitsPerPixel2 / 8;
				num /= 2;
				num2 /= 2;
			}
			return num5 * depth;
		}
		if (texture is Cubemap)
		{
			int bitsPerPixel3 = GetBitsPerPixel(((Cubemap)((texture is Cubemap) ? texture : null)).format);
			int num6 = num * num2 * bitsPerPixel3 / 8;
			int num7 = 6;
			return num6 * num7;
		}
		return 0;
	}

	public static int GetBitsPerPixel(TextureFormat format)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Expected I4, but got Unknown
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Invalid comparison between Unknown and I4
		switch (format - 1)
		{
		default:
			if ((int)format != 47)
			{
				break;
			}
			return 8;
		case 0:
			return 8;
		case 1:
			return 16;
		case 12:
			return 16;
		case 2:
			return 24;
		case 3:
			return 32;
		case 4:
			return 32;
		case 6:
			return 16;
		case 9:
		case 27:
			return 4;
		case 11:
		case 24:
		case 28:
			return 8;
		case 29:
			return 2;
		case 30:
			return 2;
		case 31:
			return 4;
		case 32:
			return 4;
		case 33:
			return 4;
		case 13:
			return 32;
		case 5:
		case 7:
		case 8:
		case 10:
		case 14:
		case 15:
		case 16:
		case 17:
		case 18:
		case 19:
		case 20:
		case 21:
		case 22:
		case 23:
		case 25:
		case 26:
			break;
		}
		return 0;
	}
}
