using System;
using System.IO;
using UnityEngine;

public static class CameraEx
{
	public static void FocusOnRenderer(this Camera cam, GameObject obj, Vector3 lookDirection, Vector3 Up, int layerMask = -1)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01be: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0202: Unknown result type (might be due to invalid IL or missing references)
		//IL_020a: Unknown result type (might be due to invalid IL or missing references)
		//IL_020b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0217: Unknown result type (might be due to invalid IL or missing references)
		//IL_021c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0220: Unknown result type (might be due to invalid IL or missing references)
		//IL_0222: Unknown result type (might be due to invalid IL or missing references)
		//IL_0227: Unknown result type (might be due to invalid IL or missing references)
		//IL_022f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0239: Unknown result type (might be due to invalid IL or missing references)
		//IL_023e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0245: Unknown result type (might be due to invalid IL or missing references)
		//IL_024a: Unknown result type (might be due to invalid IL or missing references)
		//IL_025a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0264: Unknown result type (might be due to invalid IL or missing references)
		//IL_0269: Unknown result type (might be due to invalid IL or missing references)
		//IL_019c: Unknown result type (might be due to invalid IL or missing references)
		//IL_018e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0193: Unknown result type (might be due to invalid IL or missing references)
		Vector3 position = obj.transform.position;
		Quaternion rotation = obj.transform.rotation;
		obj.transform.SetPositionAndRotation(Vector3.one, Quaternion.identity);
		obj.transform.SetPositionAndRotation(Vector3.zero, Quaternion.identity);
		Bounds bounds = default(Bounds);
		((Bounds)(ref bounds))..ctor(Vector3.zero, Vector3.one * 0.01f);
		bool flag = true;
		Renderer[] componentsInChildren = obj.GetComponentsInChildren<Renderer>();
		foreach (Renderer val in componentsInChildren)
		{
			if (val.enabled && ((Component)val).gameObject.activeInHierarchy && !(val is ParticleSystemRenderer) && !((Object)((Component)val).gameObject).name.EndsWith("lod01", StringComparison.InvariantCultureIgnoreCase) && !((Object)((Component)val).gameObject).name.EndsWith("lod02", StringComparison.InvariantCultureIgnoreCase) && !((Object)((Component)val).gameObject).name.EndsWith("lod03", StringComparison.InvariantCultureIgnoreCase) && !((Object)((Component)val).gameObject).name.EndsWith("lod04", StringComparison.InvariantCultureIgnoreCase) && !((Object)((Component)val).gameObject).name.EndsWith("lod1", StringComparison.InvariantCultureIgnoreCase) && !((Object)((Component)val).gameObject).name.EndsWith("lod2", StringComparison.InvariantCultureIgnoreCase) && !((Object)((Component)val).gameObject).name.EndsWith("lod3", StringComparison.InvariantCultureIgnoreCase) && !((Object)((Component)val).gameObject).name.EndsWith("lod4", StringComparison.InvariantCultureIgnoreCase) && (layerMask & (1 << ((Component)val).gameObject.layer)) != 0)
			{
				if (flag)
				{
					bounds = val.bounds;
					flag = false;
				}
				else
				{
					((Bounds)(ref bounds)).Encapsulate(val.bounds);
				}
			}
		}
		Vector3 size = ((Bounds)(ref bounds)).size;
		float num = ((Vector3)(ref size)).magnitude * 0.33f / Mathf.Tan(cam.fieldOfView * 0.5f * ((float)Math.PI / 180f));
		Matrix4x4 val2 = obj.transform.worldToLocalMatrix;
		Vector3 val3 = ((Matrix4x4)(ref val2)).MultiplyPoint(((Bounds)(ref bounds)).center);
		obj.transform.SetPositionAndRotation(position, rotation);
		val2 = obj.transform.localToWorldMatrix;
		val3 = ((Matrix4x4)(ref val2)).MultiplyPoint(val3);
		((Component)cam).transform.position = val3 + obj.transform.TransformDirection(((Vector3)(ref lookDirection)).normalized) * num;
		((Component)cam).transform.LookAt(val3, obj.transform.TransformDirection(((Vector3)(ref Up)).normalized));
	}

	public static void SaveScreenshot(this Camera cam, string name, int width, int height, bool transparent, int SuperSampleSize, Color? background = null)
	{
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Expected O, but got Unknown
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_010e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_013e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Expected O, but got Unknown
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_020a: Unknown result type (might be due to invalid IL or missing references)
		//IL_026f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0276: Unknown result type (might be due to invalid IL or missing references)
		RenderTexture temporary = RenderTexture.GetTemporary(width * SuperSampleSize, height * SuperSampleSize, 24, (RenderTextureFormat)0, (RenderTextureReadWrite)2);
		Color backgroundColor = cam.backgroundColor;
		CameraClearFlags clearFlags = cam.clearFlags;
		RenderTexture targetTexture = cam.targetTexture;
		int antiAliasing = QualitySettings.antiAliasing;
		AnisotropicFiltering anisotropicFiltering = QualitySettings.anisotropicFiltering;
		bool sRGBWrite = GL.sRGBWrite;
		GameObject val = new GameObject();
		cam.forceIntoRenderTexture = true;
		cam.targetTexture = temporary;
		cam.aspect = 1f;
		cam.renderingPath = (RenderingPath)(-1);
		cam.rect = new Rect(0f, 0f, 1f, 1f);
		cam.allowHDR = true;
		Texture.SetGlobalAnisotropicFilteringLimits(16, 16);
		QualitySettings.anisotropicFiltering = (AnisotropicFiltering)2;
		QualitySettings.antiAliasing = 8;
		if (transparent)
		{
			cam.clearFlags = (CameraClearFlags)3;
			cam.backgroundColor = (Color)(((??)background) ?? new Color(0f, 0f, 0f, 0f));
		}
		RenderTexture.active = temporary;
		GL.Clear(true, true, (Color)(((??)background) ?? new Color(0f, 0f, 0f, 0f)));
		GL.sRGBWrite = true;
		cam.Render();
		RenderTexture.active = null;
		RenderTexture.active = temporary;
		Texture2D val2 = new Texture2D(((Texture)temporary).width, ((Texture)temporary).height, (TextureFormat)5, true);
		val2.ReadPixels(new Rect(0f, 0f, (float)((Texture)temporary).width, (float)((Texture)temporary).height), 0, 0, true);
		((Texture)val2).filterMode = (FilterMode)2;
		((Texture)val2).anisoLevel = 32;
		RenderTexture.active = null;
		cam.targetTexture = targetTexture;
		QualitySettings.antiAliasing = antiAliasing;
		QualitySettings.anisotropicFiltering = anisotropicFiltering;
		Texture.SetGlobalAnisotropicFilteringLimits(1, 16);
		if (SuperSampleSize != 1)
		{
			val2.Apply();
			RenderTexture val3 = (RenderTexture.active = RenderTexture.GetTemporary(width, height, 24, (RenderTextureFormat)0, (RenderTextureReadWrite)2));
			GL.Clear(true, true, new Color(0f, 0f, 0f, 0f));
			GL.sRGBWrite = true;
			Graphics.Blit((Texture)(object)val2, val3);
			val2.Resize(width, height);
			val2.ReadPixels(new Rect(0f, 0f, (float)width, (float)height), 0, 0);
			RenderTexture.active = null;
			val2.Apply();
			RenderTexture.ReleaseTemporary(val3);
		}
		byte[] bytes = ImageConversion.EncodeToPNG(val2);
		string directoryName = Path.GetDirectoryName(name);
		if (!Directory.Exists(directoryName))
		{
			Directory.CreateDirectory(directoryName);
		}
		File.WriteAllBytes(name, bytes);
		Object.DestroyImmediate((Object)(object)val2, true);
		RenderTexture.ReleaseTemporary(temporary);
		Object.DestroyImmediate((Object)(object)val, true);
		if (transparent)
		{
			cam.clearFlags = clearFlags;
			cam.backgroundColor = backgroundColor;
		}
		GL.sRGBWrite = sRGBWrite;
	}
}
