using UnityEngine;

public static class TransformEx
{
	public static Transform FindChildRecursive(this Transform transform, string name)
	{
		Transform transform2 = transform.Find(name);
		for (int i = 0; i < transform.childCount; i++)
		{
			if (!(transform2 == null))
			{
				break;
			}
			transform2 = FindChildRecursive(transform.GetChild(i), name);
		}
		return transform2;
	}

	public static T GetOrAddComponent<T>(this Transform transform) where T : Component
	{
		T val = transform.GetComponent<T>();
		if (val == null)
		{
			val = transform.gameObject.AddComponent<T>();
		}
		return val;
	}

	public static void DestroyAllChildren(this Transform transform, bool immediate = false)
	{
		for (int num = transform.childCount; num > 0; num--)
		{
			Transform child = transform.GetChild(num - 1);
			if (!child.CompareTag("persist"))
			{
				if (immediate)
				{
					Object.DestroyImmediate(child.gameObject);
				}
				else
				{
					Object.Destroy(child.gameObject);
				}
			}
		}
	}
}
