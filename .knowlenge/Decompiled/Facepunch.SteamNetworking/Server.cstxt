using System;
using System.IO;
using Network;
using Steamworks;
using Steamworks.Data;
using UnityEngine;

public class Server : Server, ISocketManager
{
	private SocketManager manager;

	private bool relay;

	private const int bufferSize = 32;

	private int[] lanePriorities = new int[3] { 1, 0, 1 };

	private ushort[] laneWeights = new ushort[3] { 4, 1, 1 };

	public override string ProtocolId => "sw";

	public Server(bool enableSteamDatagramRelay)
	{
		relay = enableSteamDatagramRelay;
	}

	public override bool IsConnected()
	{
		return manager != null;
	}

	public override bool Start(IServerCallback callbacks)
	{
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c9: Invalid comparison between Unknown and I4
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		lock (((BaseNetwork)this).readLock)
		{
			lock (((BaseNetwork)this).writeLock)
			{
				lock (((BaseNetwork)this).decryptLock)
				{
					if (manager != null)
					{
						throw new Exception("socket not null");
					}
					SteamNetworkingUtils.AllowWithoutAuth = 2;
					SteamNetworkingUtils.Unencrypted = 2;
					SteamNetworkingUtils.SendBufferSize = 4194304;
					SteamNetworkingUtils.SendRateMax = 1048576;
					SteamNetworkingUtils.SendRateMin = 1048576;
					NetAddress val = (string.IsNullOrEmpty(base.ip) ? NetAddress.AnyIp((ushort)base.port) : NetAddress.From(base.ip, (ushort)base.port));
					Debug.Log((object)$"Server Creating: {val}");
					if (relay)
					{
						NetAddress val2 = default(NetAddress);
						if ((int)SteamNetworkingSockets.GetFakeIP(0, ref val2) == 1)
						{
							Debug.Log((object)$"Server Fake IP: {val2}");
						}
						else
						{
							SteamNetworkingSockets.OnFakeIPResult += delegate(NetAddress fakeAddressCallback)
							{
								//IL_0005: Unknown result type (might be due to invalid IL or missing references)
								Debug.Log((object)$"Server Fake IP: {fakeAddressCallback}");
							};
						}
						manager = SteamNetworkingSockets.CreateRelaySocketFakeIP(0, (ISocketManager)(object)this);
					}
					else
					{
						manager = SteamNetworkingSockets.CreateNormalSocket(val, (ISocketManager)(object)this);
					}
					Debug.Log((object)$"Created Socket: {manager.Socket}");
					((BaseNetwork)this).MultithreadingInit(callbacks);
					if (manager != null)
					{
						base.callbackHandler = callbacks;
						return true;
					}
					return false;
				}
			}
		}
	}

	public override void Stop(string shutdownMsg)
	{
		lock (((BaseNetwork)this).readLock)
		{
			lock (((BaseNetwork)this).writeLock)
			{
				lock (((BaseNetwork)this).decryptLock)
				{
					if (manager != null)
					{
						Console.WriteLine("[SteamNetworking] Server Shutting Down (" + shutdownMsg + ")");
						manager.Close();
						manager = null;
						((Server)this).Stop(shutdownMsg);
					}
				}
			}
		}
	}

	public override void Disconnect(Connection cn)
	{
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		lock (((BaseNetwork)this).readLock)
		{
			lock (((BaseNetwork)this).writeLock)
			{
				lock (((BaseNetwork)this).decryptLock)
				{
					if (manager != null)
					{
						Connection val = Connection.op_Implicit((uint)cn.guid);
						((Connection)(ref val)).Close(false, 0, "Closing Connection");
						((Server)this).OnDisconnected("Disconnected", cn);
					}
				}
			}
		}
	}

	public override void Kick(Connection cn, string message, bool logfile)
	{
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		lock (((BaseNetwork)this).readLock)
		{
			lock (((BaseNetwork)this).writeLock)
			{
				lock (((BaseNetwork)this).decryptLock)
				{
					if (manager != null)
					{
						NetWrite obj = ((BaseNetwork)this).StartWrite();
						obj.PacketID((Type)14);
						obj.String(message, false);
						obj.SendImmediate(new SendInfo(cn)
						{
							method = (SendMethod)1,
							priority = (Priority)0
						});
						string text = ((object)cn).ToString() + " kicked: " + message;
						if (logfile)
						{
							DebugEx.LogWarning((object)text, (StackTraceLogType)0);
						}
						else
						{
							Console.WriteLine(text);
						}
						Connection val = Connection.op_Implicit((uint)cn.guid);
						((Connection)(ref val)).Close(true, 0, message);
						((Server)this).OnDisconnected("Kicked: " + message, cn);
					}
				}
			}
		}
	}

	public override void Flush(Connection cn)
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		if (manager != null && cn != null)
		{
			Connection val = Connection.op_Implicit((uint)cn.guid);
			((Connection)(ref val)).Flush();
		}
	}

	protected override bool Receive()
	{
		if (manager.Receive(32, false) == 32)
		{
			return true;
		}
		return false;
	}

	public override void ProcessWrite(NetWrite write)
	{
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		if (DemoConVars.ServerDemosEnabled)
		{
			((BaseNetwork)this).EnqueueToDemoThread(new DemoQueueItem(write));
		}
		foreach (Connection connection in write.connections)
		{
			ProcessWrite(write, connection);
		}
		write.RemoveReference();
	}

	private unsafe void ProcessWrite(NetWrite write, Connection connection)
	{
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Invalid comparison between Unknown and I4
		((BaseNetwork)this).RecordReadForConnection(connection, (Stream)(object)write);
		ArraySegment<byte> arraySegment = ((BaseNetwork)this).Encrypt(connection, write);
		fixed (byte* array = arraySegment.Array)
		{
			Connection val = Connection.op_Implicit((uint)connection.guid);
			Result val2 = ((Connection)(ref val)).SendMessage((IntPtr)array, arraySegment.Offset + arraySegment.Count, ToSteamSendType(write.method, write.priority), ToSteamLaneIndexServer(write.method, write.priority, write.channel));
			if ((int)val2 != 1)
			{
				Debug.LogWarning((object)("SendMessage failed (" + ((object)(Result)(ref val2)/*cast due to .constrained prefix*/).ToString() + ")"));
			}
		}
	}

	public void OnConnecting(Connection cn, ConnectionInfo info)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		((Connection)(ref cn)).Accept();
	}

	public void OnConnected(Connection cn, ConnectionInfo info)
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Invalid comparison between Unknown and I4
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Expected O, but got Unknown
		Result val = ((Connection)(ref cn)).ConfigureConnectionLanes(lanePriorities, laneWeights);
		if ((int)val != 1)
		{
			Debug.LogWarning((object)("ConfigureConnectionLanes failed (" + ((object)(Result)(ref val)/*cast due to .constrained prefix*/).ToString() + ")"));
		}
		uint id = ((Connection)(ref cn)).Id;
		NetAddress address = ((ConnectionInfo)(ref info)).Address;
		string ipaddress = ((object)(NetAddress)(ref address)/*cast due to .constrained prefix*/).ToString();
		Connection val2 = new Connection();
		val2.guid = id;
		val2.ipaddress = ipaddress;
		val2.active = true;
		((Server)this).OnNewConnection(val2);
	}

	public void OnDisconnected(Connection cn, ConnectionInfo info)
	{
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		((Connection)(ref cn)).Close(false, 0, "Closing Connection");
		Connection val = ((Server)this).FindConnection((ulong)Connection.op_Implicit(cn));
		if (val != null)
		{
			((Server)this).OnDisconnected("Disconnected", val);
		}
	}

	public void OnMessage(Connection cn, NetIdentity identity, IntPtr data, int size, long messageNum, long recvTime, int channel)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		Connection val = ((Server)this).FindConnection((ulong)Connection.op_Implicit(cn));
		if (val == null)
		{
			return;
		}
		if (size > 10000000)
		{
			((Server)this).Kick(val, "Packet Size", val.connected);
			return;
		}
		if (val.GetPacketsPerSecond(0) >= Server.MaxPacketsPerSecond)
		{
			((Server)this).Kick(val, "Packet Flooding", val.connected);
			return;
		}
		val.AddPacketsPerSecond(0);
		NetRead val2 = Pool.Get<NetRead>();
		val2.Start(val, data, size);
		if (BaseNetwork.Multithreading)
		{
			((BaseNetwork)this).EnqueueDecrypt(val2);
		}
		else
		{
			((BaseNetwork)this).ProcessDecrypt(val2);
		}
	}

	public override void ProcessRead(NetRead read)
	{
		byte b = read.PacketID();
		b -= 140;
		Message val = ((BaseNetwork)this).StartMessage((Type)b, read);
		if (base.callbackHandler != null)
		{
			base.callbackHandler.OnNetworkMessage(val);
		}
		Pool.Free<Message>(ref val);
		read.RemoveReference();
	}

	public override string GetDebug(Connection connection)
	{
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		if (connection == null)
		{
			return string.Empty;
		}
		Connection val = Connection.op_Implicit((uint)connection.guid);
		return ((Connection)(ref val)).DetailedStatus();
	}

	public override int GetAveragePing(Connection connection)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		if (connection == null)
		{
			return 0;
		}
		Connection val = Connection.op_Implicit((uint)connection.guid);
		ConnectionStatus val2 = ((Connection)(ref val)).QuickStatus();
		return ((ConnectionStatus)(ref val2)).Ping;
	}

	public override ulong GetStat(Connection connection, StatTypeLong type)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Expected I4, but got Unknown
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Invalid comparison between Unknown and I4
		if (connection == null)
		{
			return 0uL;
		}
		Connection val = Connection.op_Implicit((uint)connection.guid);
		ConnectionStatus val2 = ((Connection)(ref val)).QuickStatus();
		int num = 0;
		switch (type - 1)
		{
		default:
			if ((int)type == 9)
			{
				num = Mathf.RoundToInt(((ConnectionStatus)(ref val2)).ConnectionQualityLocal * 100f);
			}
			break;
		case 0:
			num = Mathf.RoundToInt(((ConnectionStatus)(ref val2)).OutBytesPerSec);
			break;
		case 2:
			num = Mathf.RoundToInt(((ConnectionStatus)(ref val2)).InBytesPerSec);
			break;
		case 4:
			num = ((ConnectionStatus)(ref val2)).PendingUnreliable + ((ConnectionStatus)(ref val2)).PendingReliable;
			break;
		case 1:
		case 3:
			break;
		}
		return (ulong)num;
	}

	public override bool LimitConnectionsPerIP()
	{
		return !relay;
	}
}
