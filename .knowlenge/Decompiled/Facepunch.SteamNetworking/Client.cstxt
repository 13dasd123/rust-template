using System;
using System.IO;
using Network;
using Steamworks;
using Steamworks.Data;
using UnityEngine;

public class Client : Client, IConnectionManager
{
	private ConnectionManager manager;

	private const int bufferSize = 32;

	public override bool IsConnected()
	{
		return manager != null;
	}

	public override bool Connect(string strURL, int port)
	{
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a8: Expected O, but got Unknown
		lock (((BaseNetwork)this).readLock)
		{
			lock (((BaseNetwork)this).writeLock)
			{
				lock (((BaseNetwork)this).decryptLock)
				{
					((Client)this).Connect(strURL, port);
					SteamNetworkingUtils.AllowWithoutAuth = 2;
					SteamNetworkingUtils.Unencrypted = 2;
					SteamNetworkingUtils.SendRateMax = 1048576;
					SteamNetworkingUtils.SendRateMin = 1048576;
					NetAddress val = NetAddress.From(strURL, (ushort)port);
					manager = SteamNetworkingSockets.ConnectNormal(val, (IConnectionManager)(object)this);
					if (manager == null)
					{
						return false;
					}
					((Client)this).ConnectedAddress = strURL;
					((Client)this).ConnectedPort = port;
					((Client)this).ServerName = "";
					((Client)this).Connection = new Connection();
					((BaseNetwork)this).MultithreadingInit((IServerCallback)null);
					return true;
				}
			}
		}
	}

	protected override bool Receive()
	{
		if (manager.Receive(32, false) == 32)
		{
			return true;
		}
		return false;
	}

	public override void Disconnect(string reason, bool sendReasonToServer)
	{
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		lock (((BaseNetwork)this).readLock)
		{
			lock (((BaseNetwork)this).writeLock)
			{
				lock (((BaseNetwork)this).decryptLock)
				{
					if (sendReasonToServer && manager != null)
					{
						NetWrite obj = ((BaseNetwork)this).StartWrite();
						obj.PacketID((Type)14);
						obj.String(reason, false);
						obj.SendImmediate(new SendInfo(((Client)this).Connection)
						{
							method = (SendMethod)1,
							priority = (Priority)0
						});
						if (manager != null)
						{
							manager.Close(true, 0, reason);
							manager = null;
						}
					}
					else if (manager != null)
					{
						manager.Close(false, 0, "Closing Connection");
						manager = null;
					}
					((Client)this).ConnectedAddress = "";
					((Client)this).ConnectedPort = 0;
					((Client)this).Connection = null;
					((Client)this).OnDisconnected(reason);
				}
			}
		}
	}

	public override void Flush()
	{
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		if (manager != null && ((Client)this).Connection != null)
		{
			Connection val = Connection.op_Implicit((uint)((Client)this).Connection.guid);
			((Connection)(ref val)).Flush();
		}
	}

	public unsafe override void ProcessWrite(NetWrite write)
	{
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Invalid comparison between Unknown and I4
		ArraySegment<byte> arraySegment = ((BaseNetwork)this).Encrypt(((Client)this).Connection, write);
		fixed (byte* array = arraySegment.Array)
		{
			Result val = ((Connection)(ref manager.Connection)).SendMessage((IntPtr)array, arraySegment.Offset + arraySegment.Count, ToSteamSendType(write.method, write.priority), ToSteamLaneIndexClient(write.method, write.priority, write.channel));
			if ((int)val != 1)
			{
				Debug.LogWarning((object)("SendMessage failed (" + ((object)(Result)(ref val)/*cast due to .constrained prefix*/).ToString() + ")"));
			}
		}
		write.RemoveReference();
	}

	void IConnectionManager.OnConnecting(ConnectionInfo info)
	{
	}

	void IConnectionManager.OnConnected(ConnectionInfo info)
	{
		((Client)this).Connection.guid = ((Connection)(ref manager.Connection)).Id;
	}

	void IConnectionManager.OnDisconnected(ConnectionInfo info)
	{
		if (((Client)this).Connection != null)
		{
			((Client)this).Disconnect(Client.disconnectReason, false);
		}
	}

	void IConnectionManager.OnMessage(IntPtr data, int datasize, long messageNum, long recvTime, int channel)
	{
		NetRead val = Pool.Get<NetRead>();
		val.Start(((Client)this).Connection, data, datasize);
		if (BaseNetwork.Multithreading)
		{
			((BaseNetwork)this).EnqueueDecrypt(val);
		}
		else
		{
			((BaseNetwork)this).ProcessDecrypt(val);
		}
	}

	public override void ProcessRead(NetRead read)
	{
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		((BaseNetwork)this).RecordReadForConnection(read.connection, (Stream)(object)read);
		byte b = read.PacketID();
		b -= 140;
		Type val;
		if (read.connection == null)
		{
			string[] obj = new string[5] { "Ignoring message (", null, null, null, null };
			val = (Type)b;
			obj[1] = ((object)(Type)(ref val)/*cast due to .constrained prefix*/).ToString();
			obj[2] = " ";
			obj[3] = b.ToString();
			obj[4] = " connection is null)";
			Debug.LogWarning((object)string.Concat(obj));
			read.RemoveReference();
			return;
		}
		if (b > 26)
		{
			val = (Type)26;
			Debug.LogWarning((object)("Invalid Packet (higher than " + ((object)(Type)(ref val)/*cast due to .constrained prefix*/).ToString() + ")"));
			((Client)this).Disconnect("Invalid Packet (" + b + ") " + ((Stream)(object)read).Length + "b", true);
			read.RemoveReference();
			return;
		}
		Message val2 = ((BaseNetwork)this).StartMessage((Type)b, read);
		if (base.callbackHandler != null)
		{
			try
			{
				TimeWarning val3 = TimeWarning.New("OnMessage", 0);
				try
				{
					base.callbackHandler.OnNetworkMessage(val2);
				}
				finally
				{
					((IDisposable)val3)?.Dispose();
				}
			}
			catch (Exception ex)
			{
				Debug.LogException(ex);
				((Client)this).Disconnect(ex.Message + "\n" + ex.StackTrace, true);
			}
		}
		Pool.Free<Message>(ref val2);
		read.RemoveReference();
	}

	public override string GetDebug(Connection connection)
	{
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		if (connection == null)
		{
			connection = ((Client)this).Connection;
		}
		if (connection == null)
		{
			return string.Empty;
		}
		Connection val = Connection.op_Implicit((uint)connection.guid);
		return ((Connection)(ref val)).DetailedStatus();
	}

	public override int GetLastPing()
	{
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		Connection connection = ((Client)this).Connection;
		if (connection == null)
		{
			return 1;
		}
		Connection val = Connection.op_Implicit((uint)connection.guid);
		ConnectionStatus val2 = ((Connection)(ref val)).QuickStatus();
		return ((ConnectionStatus)(ref val2)).Ping;
	}

	public override ulong GetStat(Connection connection, StatTypeLong type)
	{
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Expected I4, but got Unknown
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Invalid comparison between Unknown and I4
		if (connection == null)
		{
			connection = ((Client)this).Connection;
		}
		if (connection == null)
		{
			return 0uL;
		}
		Connection val = Connection.op_Implicit((uint)connection.guid);
		ConnectionStatus val2 = ((Connection)(ref val)).QuickStatus();
		int num = 0;
		switch (type - 1)
		{
		default:
			if ((int)type == 9)
			{
				num = Mathf.RoundToInt(((ConnectionStatus)(ref val2)).ConnectionQualityLocal * 100f);
			}
			break;
		case 0:
			num = Mathf.RoundToInt(((ConnectionStatus)(ref val2)).OutBytesPerSec);
			break;
		case 2:
			num = Mathf.RoundToInt(((ConnectionStatus)(ref val2)).InBytesPerSec);
			break;
		case 4:
			num = ((ConnectionStatus)(ref val2)).PendingUnreliable + ((ConnectionStatus)(ref val2)).PendingReliable;
			break;
		case 1:
		case 3:
			break;
		}
		return (ulong)num;
	}
}
