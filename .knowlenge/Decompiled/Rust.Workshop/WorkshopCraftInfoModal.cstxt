using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Facepunch.Steamworks;
using Rust;
using Rust.UI;
using UnityEngine;
using UnityEngine.UI;

public class WorkshopCraftInfoModal : MonoBehaviour
{
	public Text Name;

	public Text Requirements;

	public Text Label;

	public HttpImage IconImage;

	public GameObject ErrorPanel;

	public Text ErrorText;

	public GameObject CraftButton;

	public GameObject ProgressPanel;

	private Inventory.Recipe Recipe;

	public void Open(int ItemDefinition)
	{
		if (Global.SteamClient.Inventory.Definitions == null)
		{
			Debug.LogWarning("WorkshopCraftInfoModal failed: Definitions = null");
			return;
		}
		Inventory.Definition definition = Global.SteamClient.Inventory.FindDefinition(ItemDefinition);
		if (definition == null)
		{
			Debug.LogWarning("WorkshopCraftInfoModal failed: def = null");
			return;
		}
		if (definition.Recipes == null)
		{
			Debug.LogWarning("WorkshopCraftInfoModal failed: def.Recipes = null");
			return;
		}
		if (Global.SteamClient.Inventory.Items == null)
		{
			Debug.LogWarning("WorkshopCraftInfoModal failed: Inventory.Items = null");
			return;
		}
		Recipe = definition.Recipes.FirstOrDefault();
		base.gameObject.SetActive(value: true);
		ProgressPanel.SetActive(value: false);
		ErrorPanel.SetActive(value: false);
		CraftButton.SetActive(value: true);
		Name.text = definition.Name;
		Label.text = BBCodeToUnity(definition.Description);
		string[] value = Recipe.Ingredients.Select((Inventory.Recipe.Ingredient x) => $"{x.Count} x {x.Definition.Name}").ToArray();
		Requirements.text = string.Join(", ", value);
		Inventory.Recipe.Ingredient[] ingredients = Recipe.Ingredients;
		for (int i = 0; i < ingredients.Length; i++)
		{
			Inventory.Recipe.Ingredient i2 = ingredients[i];
			int num = Global.SteamClient.Inventory.Items.Where((Inventory.Item x) => x.DefinitionId == i2.DefinitionId).Sum((Inventory.Item x) => x.Quantity);
			if (num < i2.Count)
			{
				CraftButton.SetActive(value: false);
				ErrorPanel.SetActive(value: true);
				ErrorText.text = $"NEED {i2.Count} x {i2.Definition.Name}";
			}
		}
		IconImage.Load(definition.IconLargeUrl);
	}

	public static string BBCodeToUnity(string x)
	{
		x = x.Replace("[", "<");
		x = x.Replace("]", ">");
		return x;
	}

	public void DoCraft()
	{
		List<Inventory.Item.Amount> list = new List<Inventory.Item.Amount>();
		Inventory.Recipe.Ingredient[] ingredients = Recipe.Ingredients;
		for (int i = 0; i < ingredients.Length; i++)
		{
			Inventory.Recipe.Ingredient i2 = ingredients[i];
			IEnumerable<Inventory.Item> enumerable = Global.SteamClient.Inventory.Items.Where((Inventory.Item x) => x.DefinitionId == i2.DefinitionId).Take(i2.Count);
			if (enumerable.Sum((Inventory.Item x) => x.Quantity) < i2.Count)
			{
				Debug.LogWarning("Not enough of " + i2.DefinitionId);
				Close();
				return;
			}
			int num = 0;
			foreach (Inventory.Item item in enumerable)
			{
				int num2 = i2.Count - num;
				int num3 = item.Quantity;
				if (num3 > num2)
				{
					num3 = num2;
				}
				list.Add(new Inventory.Item.Amount
				{
					Item = item,
					Quantity = num3
				});
				num += num3;
				if (num >= i2.Count)
				{
					break;
				}
			}
		}
		ProgressPanel.SetActive(value: true);
		Inventory.Result result = Global.SteamClient.Inventory.CraftItem(list.ToArray(), Recipe.Result);
		StartCoroutine(CraftAnimation(result));
	}

	private IEnumerator CraftAnimation(Inventory.Result result)
	{
		while (result.IsPending)
		{
			yield return null;
		}
		Close();
	}

	public void Close()
	{
		base.gameObject.SetActive(value: false);
	}
}
