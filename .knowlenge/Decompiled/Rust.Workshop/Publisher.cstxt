using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using Facepunch.Extend;
using Facepunch.Utility;
using Newtonsoft.Json;
using Rust;
using Rust.Workshop;
using Steamworks;
using Steamworks.Ugc;
using UnityEngine;
using UnityEngine.UI;

public class Publisher : MonoBehaviour
{
	public InputField ChangeLog;

	public Button PublishButton;

	public Texture2D IconBackground;

	private Skinnable Skinnable;

	private Skin Skin;

	private ulong ItemId;

	private string Title;

	private GameObject Prefab;

	protected WorkshopInterface Interface => SingletonComponent<WorkshopInterface>.Instance;

	protected WorkshopItemEditor Editor => SingletonComponent<WorkshopItemEditor>.Instance;

	public void StartExport()
	{
		DoExport(publishToSteam: true, OpenFolder: false);
	}

	public void Update()
	{
		PublishButton.interactable = CanPublish();
	}

	public bool CanPublish()
	{
		if (Interface.Editor.ItemTitle.Length == 0)
		{
			return false;
		}
		return true;
	}

	private async Task DoExport(bool publishToSteam, bool OpenFolder, string forceFolderName = null)
	{
		_ = 1;
		try
		{
			Skinnable = Editor.Skinnable;
			Skin = Editor.Skin;
			ItemId = Editor.ItemId;
			Title = Editor.ItemTitle;
			Prefab = Editor.Prefab;
			WorkshopItemEditor.Loading(v1: true, "Exporting..", "", 0f);
			string tempFolder = Path.GetTempFileName();
			File.Delete(tempFolder);
			Directory.CreateDirectory(tempFolder);
			if (forceFolderName != null)
			{
				tempFolder = forceFolderName;
			}
			Debug.Log(tempFolder);
			await ExportToFolder(tempFolder, OpenFolder);
			if (publishToSteam)
			{
				await PublishToSteam(tempFolder);
			}
			if (forceFolderName != tempFolder)
			{
				Directory.Delete(tempFolder, recursive: true);
			}
		}
		catch (Exception exception)
		{
			Debug.LogException(exception);
		}
		finally
		{
			WorkshopItemEditor.Loading(v1: false, "", "", 0f);
		}
	}

	private async Task ExportToFolder(string folder, bool OpenFolder)
	{
		Skin.Manifest data = new Skin.Manifest
		{
			ItemType = Skinnable.Name,
			Version = 3,
			Groups = new Skin.Manifest.Group[Skin.Materials.Length],
			PublishDate = DateTime.UtcNow,
			AuthorId = SteamClient.SteamId
		};
		for (int i = 0; i < Skin.Materials.Length; i++)
		{
			data.Groups[i] = new Skin.Manifest.Group();
			await ExportTexture(data.Groups[i].Textures, folder, i, "_MainTex", Skin.Materials[i], Skin.DefaultMaterials[i]);
			await ExportTexture(data.Groups[i].Textures, folder, i, "_OcclusionMap", Skin.Materials[i], Skin.DefaultMaterials[i]);
			await ExportTexture(data.Groups[i].Textures, folder, i, "_SpecGlossMap", Skin.Materials[i], Skin.DefaultMaterials[i]);
			await ExportTexture(data.Groups[i].Textures, folder, i, "_BumpMap", Skin.Materials[i], Skin.DefaultMaterials[i], isNormalMap: true);
			await ExportTexture(data.Groups[i].Textures, folder, i, "_EmissionMap", Skin.Materials[i], Skin.DefaultMaterials[i]);
			data.Groups[i].Floats.Add("_Cutoff", Skin.Materials[i].GetFloat("_Cutoff"));
			data.Groups[i].Floats.Add("_BumpScale", Skin.Materials[i].GetFloat("_BumpScale"));
			data.Groups[i].Floats.Add("_Glossiness", Skin.Materials[i].GetFloat("_Glossiness"));
			data.Groups[i].Floats.Add("_OcclusionStrength", Skin.Materials[i].GetFloat("_OcclusionStrength"));
			if (Skin.Materials[i].shader.name.Contains("Cloth"))
			{
				data.Groups[i].Floats.Add("_MicrofiberFuzzIntensity", Skin.Materials[i].GetFloat("_MicrofiberFuzzIntensity"));
				data.Groups[i].Floats.Add("_MicrofiberFuzzScatter", Skin.Materials[i].GetFloat("_MicrofiberFuzzScatter"));
				data.Groups[i].Floats.Add("_MicrofiberFuzzOcclusion", Skin.Materials[i].GetFloat("_MicrofiberFuzzOcclusion"));
			}
			data.Groups[i].Colors.Add("_Color", new Skin.Manifest.ColorEntry(Skin.Materials[i].GetColor("_Color")));
			data.Groups[i].Colors.Add("_SpecColor", new Skin.Manifest.ColorEntry(Skin.Materials[i].GetColor("_SpecColor")));
			data.Groups[i].Colors.Add("_EmissionColor", new Skin.Manifest.ColorEntry(Skin.Materials[i].GetColor("_EmissionColor")));
			if (Skin.Materials[i].shader.name.Contains("Cloth"))
			{
				data.Groups[i].Colors.Add("_MicrofiberFuzzColor", new Skin.Manifest.ColorEntry(Skin.Materials[i].GetColor("_MicrofiberFuzzColor")));
			}
		}
		PropRenderer.RenderScreenshot(Prefab, folder + "/icon.png", 512, 512, 4);
		CreateWorkshopIcon(folder);
		string contents = JsonConvert.SerializeObject(data, Formatting.Indented);
		File.WriteAllText(folder + "/manifest.txt", contents);
		if (OpenFolder)
		{
			Os.OpenFolder(folder);
		}
	}

	private void CreateWorkshopIcon(string folder)
	{
		Texture2D texture2D = new Texture2D(512, 512, TextureFormat.ARGB32, mipChain: false);
		texture2D.LoadImage(File.ReadAllBytes(folder + "/icon.png"));
		RenderTexture renderTexture = new RenderTexture(512, 512, 0);
		renderTexture.Blit(IconBackground);
		renderTexture.BlitWithAlphaBlending(texture2D);
		renderTexture.ToTexture(texture2D);
		File.WriteAllBytes(bytes: texture2D.EncodeToPNG(), path: folder + "/icon_background.png");
		UnityEngine.Object.DestroyImmediate(texture2D);
		UnityEngine.Object.DestroyImmediate(renderTexture);
	}

	private async Task PublishToSteam(string folder)
	{
		Editor editor = ((ItemId != 0L) ? new Editor(ItemId) : Steamworks.Ugc.Editor.NewMicrotransactionFile).WithContent(folder).WithPreviewFile(folder + "/icon_background.png").WithTitle(Title)
			.WithTag("Version3")
			.WithTag(Skinnable.Name)
			.WithTag("Skin")
			.WithPublicVisibility();
		if (!string.IsNullOrEmpty(ChangeLog.text))
		{
			editor = editor.WithChangeLog(ChangeLog.text);
		}
		WorkshopItemEditor.Loading(v1: true, "Publishing To Steam", "", 0f);
		PublishResult publishResult = await editor.SubmitAsync();
		if (!publishResult.Success)
		{
			Debug.Log("Error: " + publishResult.Result);
		}
		else
		{
			Debug.Log("Published File: " + publishResult.FileId);
		}
		Item? item = await SteamUGC.QueryFileAsync(publishResult.FileId);
		if (!item.HasValue)
		{
			Debug.Log("Error Retrieving item information!");
			WorkshopItemList.RefreshAll();
			return;
		}
		Editor.ItemId = item.Value.Id;
		Editor.ItemTitle = item.Value.Title;
		ChangeLog.text = "";
		UnityEngine.Application.OpenURL(item.Value.Url);
		WorkshopItemList.RefreshAll();
	}

	private async Task ExportTexture(Dictionary<string, string> data, string folder, int group, string paramname, Material mat, Material defaultMat, bool isNormalMap = false)
	{
		WorkshopItemEditor.Loading(v1: true, "Exporting Texture " + paramname, "", 0f);
		UnityEngine.Texture texture = mat.GetTexture(paramname);
		UnityEngine.Texture texture2 = defaultMat.GetTexture(paramname);
		if (texture == texture2)
		{
			return;
		}
		if (texture == null)
		{
			data.Add(paramname, "none");
			return;
		}
		texture = Facepunch.Utility.Texture.LimitSize(texture as Texture2D, Skinnable.Groups[group].MaxTextureSize, Skinnable.Groups[group].MaxTextureSize);
		if (isNormalMap)
		{
			texture = Facepunch.Utility.Texture.CreateReadableCopy(texture as Texture2D);
			(texture as Texture2D).DecompressNormals();
		}
		string text = string.Format("{0}{1}{2}", paramname, group, ".png");
		data.Add(paramname, text);
		texture.SaveAsPng(folder + "/" + text);
		await Task.Delay(1);
	}

	public void Export()
	{
		DoExport();
	}

	public async Task DoExport()
	{
		string text = await Editor.FileDialog.SaveAsync();
		if (text != null && !File.Exists(text))
		{
			if (!Directory.Exists(text))
			{
				Directory.CreateDirectory(text);
			}
			await DoExport(publishToSteam: false, OpenFolder: true, text);
		}
	}
}
