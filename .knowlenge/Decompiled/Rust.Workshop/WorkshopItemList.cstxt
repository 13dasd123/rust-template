using System.Collections;
using System.Collections.Generic;
using System.Linq;
using Facepunch.Steamworks;
using Rust;
using Rust.Workshop;
using UnityEngine;
using UnityEngine.UI;

internal class WorkshopItemList : MonoBehaviour
{
	private static int StaticRefresh = 1;

	public WorkshopItemButton ButtonPrefab;

	public GameObject Container;

	public ListType ListType;

	public int PerPage = 40;

	public int Page = 1;

	public Button PreviousPage;

	public Button NextPage;

	public Text PageInfo;

	public string ItemFilter;

	public Dropdown ItemTypeSelector;

	private int ForcedRefresh;

	private int TotalResults;

	private bool Refreshing;

	private int NumPages => Mathf.FloorToInt(TotalResults / PerPage) + 1;

	public static void RefreshAll()
	{
		StaticRefresh++;
	}

	private void OnEnable()
	{
		if ((bool)PreviousPage)
		{
			PreviousPage.onClick.AddListener(PagePrev);
		}
		if ((bool)NextPage)
		{
			NextPage.onClick.AddListener(PageNext);
		}
		if ((bool)ItemTypeSelector)
		{
			ItemTypeSelector.ClearOptions();
			ItemTypeSelector.AddOptions(new List<string> { "All" });
			ItemTypeSelector.AddOptions((from x in Skinnable.All
				select x.Name into x
				orderby x
				select x).ToList());
		}
	}

	private void PageNext()
	{
		if (!Refreshing)
		{
			Page++;
			StartCoroutine(Refresh());
		}
	}

	private void PagePrev()
	{
		if (!Refreshing)
		{
			Page--;
			StartCoroutine(Refresh());
		}
	}

	public void OnChangedItemType(int type)
	{
		Dropdown.OptionData optionData = ItemTypeSelector.options[type];
		if (optionData.text == "All")
		{
			ItemFilter = null;
		}
		else
		{
			ItemFilter = optionData.text;
		}
		ForcedRefresh++;
	}

	private void OnDisable()
	{
		if (!Rust.Application.isQuitting)
		{
			if ((bool)PreviousPage)
			{
				PreviousPage.onClick.RemoveListener(PagePrev);
			}
			if ((bool)NextPage)
			{
				NextPage.onClick.RemoveListener(PageNext);
			}
		}
	}

	private void Update()
	{
		if (!Refreshing && ForcedRefresh != StaticRefresh)
		{
			ForcedRefresh = StaticRefresh;
			StartCoroutine(Refresh());
		}
	}

	public void SwitchToLatest(bool b)
	{
		if (b)
		{
			ListType = ListType.MostRecent;
			Page = 1;
			ForcedRefresh++;
		}
	}

	public void SwitchToTrending(bool b)
	{
		if (b)
		{
			ListType = ListType.Trending;
			Page = 1;
			ForcedRefresh++;
		}
	}

	public void SwitchToPopular(bool b)
	{
		if (b)
		{
			ListType = ListType.MostPopular;
			Page = 1;
			ForcedRefresh++;
		}
	}

	public void SwitchToAccepted(bool b)
	{
		if (b)
		{
			ListType = ListType.Accepted;
			Page = 1;
			ForcedRefresh++;
		}
	}

	public IEnumerator Refresh()
	{
		if (Refreshing)
		{
			yield break;
		}
		Refreshing = true;
		Page = Mathf.Clamp(Page, 1, NumPages);
		while (Container.transform.childCount > 0)
		{
			Object.DestroyImmediate(Container.transform.GetChild(0).gameObject);
		}
		Workshop.Query q = Global.SteamClient.Workshop.CreateQuery();
		q.PerPage = PerPage;
		q.Page = Page;
		q.RequireAllTags = true;
		if (!string.IsNullOrEmpty(ItemFilter))
		{
			q.RequireTags.Add(ItemFilter);
		}
		switch (ListType)
		{
		case ListType.MyItems:
			q.UserId = Global.SteamClient.SteamId;
			break;
		case ListType.MostRecent:
			q.Order = Workshop.Order.RankedByPublicationDate;
			q.RequireTags.Add("Version3");
			break;
		case ListType.MostPopular:
			q.Order = Workshop.Order.RankedByTrend;
			q.RankedByTrendDays = 30;
			q.RequireTags.Add("Version3");
			break;
		case ListType.Trending:
			q.Order = Workshop.Order.RankedByTrend;
			q.RankedByTrendDays = 1;
			q.RequireTags.Add("Version3");
			break;
		case ListType.Accepted:
			q.Order = Workshop.Order.AcceptedForGameRankedByAcceptanceDate;
			q.RequireTags.Add("Version3");
			break;
		}
		if (PageInfo != null)
		{
			PageInfo.text = "UPDATING";
		}
		q.Run();
		yield return new WaitWhile(() => q.IsRunning);
		TotalResults = q.TotalResults;
		if (ListType == ListType.MyItems)
		{
			q.Items = q.Items.OrderByDescending((Workshop.Item x) => x.Modified).ToArray();
		}
		Workshop.Item[] items = q.Items;
		foreach (Workshop.Item item in items)
		{
			GameObject gameObject = Object.Instantiate(ButtonPrefab.gameObject);
			gameObject.transform.SetParent(Container.transform, worldPositionStays: false);
			WorkshopItemButton component = gameObject.GetComponent<WorkshopItemButton>();
			component.Init(item);
		}
		q.Dispose();
		if (PageInfo != null)
		{
			PageInfo.text = $"Page {Page} of {NumPages}";
		}
		Refreshing = false;
	}
}
