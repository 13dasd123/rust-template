using System.IO;
using Facepunch;
using Facepunch.Steamworks;
using Facepunch.Utility;
using Rust;
using Rust.UI;
using Rust.Workshop;
using Rust.Workshop.Editor;
using UnityEngine;
using UnityEngine.SceneManagement;

public class WorkshopInterface : MonoBehaviour
{
	public GameObject item_position_a;

	public GameObject item_position_b;

	private string _backgroundScene;

	internal LoadingBar LoadingBar => GetComponentInChildren<LoadingBar>(includeInactive: true);

	internal WorkshopItemEditor Editor => GetComponentInChildren<WorkshopItemEditor>(includeInactive: true);

	internal WorkshopMenu Menu => GetComponentInChildren<WorkshopMenu>(includeInactive: true);

	public string BackgroundScene
	{
		get
		{
			return _backgroundScene;
		}
		set
		{
			if (_backgroundScene != null)
			{
				SceneManager.UnloadScene(_backgroundScene);
			}
			_backgroundScene = value;
			SceneManager.LoadScene(_backgroundScene, LoadSceneMode.Additive);
		}
	}

	public void CreateNewItem()
	{
		QualitySettings.masterTextureLimit = 0;
		QualitySettings.SetQualityLevel(5, applyExpensiveChanges: true);
		Editor.gameObject.SetActive(value: true);
		Menu.gameObject.SetActive(value: false);
		Editor.StartNewItem();
	}

	public void StartEditing(Workshop.Item item)
	{
		QualitySettings.masterTextureLimit = 0;
		QualitySettings.SetQualityLevel(5, applyExpensiveChanges: true);
		Editor.gameObject.SetActive(value: true);
		Menu.gameObject.SetActive(value: false);
		Editor.StartEditingItem(item);
	}

	public void StartViewing(Workshop.Item item)
	{
		QualitySettings.masterTextureLimit = 0;
		QualitySettings.SetQualityLevel(5, applyExpensiveChanges: true);
		Editor.gameObject.SetActive(value: true);
		Menu.gameObject.SetActive(value: false);
		Editor.StartViewingItem(item);
	}

	public void OpenMenu()
	{
		Editor.gameObject.SetActive(value: false);
		Menu.gameObject.SetActive(value: true);
	}

	public void Exit()
	{
		Object.Destroy(base.gameObject);
		Global.OpenMainMenu();
	}

	public void Update()
	{
		item_position_a = GameObject.Find("item_position_a");
		item_position_b = GameObject.Find("item_position_b");
		Facepunch.Input.Frame();
		Facepunch.Input.Update();
	}

	public void Awake()
	{
		BackgroundScene = "Skybox";
	}

	public void RenderAllIcons()
	{
		Editor.gameObject.SetActive(value: true);
		GetComponentInChildren<Publisher>();
		if (!Directory.Exists("c:/test/icons"))
		{
			Directory.CreateDirectory("c:/test/icons");
		}
		Skinnable[] all = Skinnable.All;
		foreach (Skinnable skinnable in all)
		{
			Editor.StartNewItem(skinnable.Name);
			PropRenderer.RenderScreenshot(Editor.Prefab, $"c:/test/icons/{skinnable.Name}.png", 512, 512, 4);
			int num = 0;
			UnityEngine.Mesh[] meshDownloads = skinnable.MeshDownloads;
			foreach (UnityEngine.Mesh mesh in meshDownloads)
			{
				if (mesh != null && mesh.isReadable)
				{
					mesh.Export($"c:/test/icons/{skinnable.Name}{num}.obj");
					num++;
				}
			}
		}
		Editor.gameObject.SetActive(value: false);
	}
}
