using System;
using System.Collections;
using Facepunch.Extend;
using Facepunch.Steamworks;
using Rust.Workshop;
using Rust.Workshop.Import;
using UnityEngine;

internal class ImportVersion3 : SingletonComponent<ImportVersion3>
{
	protected WorkshopInterface Interface => GetComponentInParent<WorkshopInterface>();

	internal void DoImport(Workshop.Item item, Skin skin, Action OnImportFinished)
	{
		StartCoroutine(StartImport(item, skin, OnImportFinished));
	}

	private IEnumerator StartImport(Workshop.Item item, Skin skin, Action OnImportFinished)
	{
		Interface.LoadingBar.Active = true;
		Interface.LoadingBar.Text = "Downloading..";
		Interface.LoadingBar.SubText = string.Empty;
		Interface.LoadingBar.Progress = 0f;
		yield return StartCoroutine(DownloadFromWorkshop(item));
		if (!item.Installed || item.Directory == null)
		{
			Debug.Log("Error opening item, not downloaded properly.");
			Debug.Log("item.Directory: " + item.Directory);
			Debug.Log("item.Installed: " + item.Installed);
			Interface.OpenMenu();
			Interface.LoadingBar.Active = false;
		}
		else
		{
			Interface.LoadingBar.Text = "Loading..";
			Interface.LoadingBar.SubText = "Reading Textures";
			yield return StartCoroutine(skin.FromFolder(item.Id, item.Directory));
			Interface.LoadingBar.Active = false;
			OnImportFinished();
		}
	}

	private IEnumerator DownloadFromWorkshop(Workshop.Item item)
	{
		item.Download();
		float lerpedValue = 0f;
		float lerpedDownloaded = 0f;
		while (item.Downloading)
		{
			lerpedValue = Mathf.Lerp(lerpedValue, (float)item.DownloadProgress, Time.deltaTime * 7f);
			Interface.LoadingBar.Progress = lerpedValue;
			ulong downloaded = item.BytesDownloaded;
			ulong total = item.BytesTotalDownload;
			lerpedDownloaded = Mathf.Lerp(lerpedDownloaded, item.BytesDownloaded, Time.deltaTime * 7f);
			if (total != 0)
			{
				Interface.LoadingBar.SubText = $"{((ulong)lerpedDownloaded).FormatBytes()} / {total.FormatBytes()}";
			}
			else
			{
				Interface.LoadingBar.SubText = string.Empty;
			}
			yield return null;
		}
		while (!item.Installed)
		{
			Interface.LoadingBar.SubText = "Installing";
			yield return null;
		}
	}
}
