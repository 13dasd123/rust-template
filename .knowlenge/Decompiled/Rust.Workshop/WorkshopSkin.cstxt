using System;
using System.Collections;
using System.Text;
using Facepunch.Steamworks;
using Rust;
using Rust.Workshop;
using UnityEngine;

public class WorkshopSkin : MonoBehaviour
{
	public static bool AllowApply = true;

	private static ListDictionary<ulong, Workshop.Item> ItemCache = new ListDictionary<ulong, Workshop.Item>();

	private static ListDictionary<ulong, Skin> SkinCache = new ListDictionary<ulong, Skin>();

	private Action OnRefresh;

	public static string GetStatus()
	{
		BufferList<Workshop.Item> values = ItemCache.Values;
		BufferList<Skin> values2 = SkinCache.Values;
		StringBuilder stringBuilder = new StringBuilder();
		int num = 0;
		int num2 = 0;
		int num3 = 0;
		int num4 = 0;
		for (int i = 0; i < values.Count; i++)
		{
			if (!values[i].Installed)
			{
				num2++;
			}
			else
			{
				num++;
			}
		}
		for (int j = 0; j < values2.Count; j++)
		{
			if (values2[j].IsLoading)
			{
				num4++;
			}
			else
			{
				num3++;
			}
		}
		stringBuilder.Append("Items: ");
		stringBuilder.Append(num);
		stringBuilder.Append(" in cache + ");
		stringBuilder.Append(num2);
		stringBuilder.Append(" loading");
		stringBuilder.AppendLine();
		stringBuilder.Append("Skins: ");
		stringBuilder.Append(num3);
		stringBuilder.Append(" in cache + ");
		stringBuilder.Append(num4);
		stringBuilder.Append(" loading");
		stringBuilder.AppendLine();
		return stringBuilder.ToString();
	}

	public static int GetDownloadingSkinCount()
	{
		int num = 0;
		BufferList<Workshop.Item> values = ItemCache.Values;
		for (int i = 0; i < values.Count; i++)
		{
			if (!values[i].Installed)
			{
				num++;
			}
		}
		return num;
	}

	public static int GetProcessingSkinCount()
	{
		int num = 0;
		BufferList<Skin> values = SkinCache.Values;
		for (int i = 0; i < values.Count; i++)
		{
			if (values[i].IsLoading)
			{
				num++;
			}
		}
		return num;
	}

	public static Coroutine Apply(GameObject gameobj, ulong WorkshopId, Action callback = null)
	{
		if (Global.SteamClient == null)
		{
			return null;
		}
		WorkshopSkin workshopSkin = gameobj.GetComponent<WorkshopSkin>();
		if (workshopSkin == null)
		{
			workshopSkin = gameobj.AddComponent<WorkshopSkin>();
		}
		workshopSkin.OnRefresh = callback;
		return workshopSkin.StartApplySkin(WorkshopId);
	}

	private Coroutine StartApplySkin(ulong workshopId)
	{
		TimeWarning.BeginSample("WorkshopSkin.StartApplySkin");
		Skin val = null;
		if (SkinCache.TryGetValue(workshopId, out val) && !val.IsLoading)
		{
			ApplySkin(val);
			TimeWarning.EndSample();
			return null;
		}
		TimeWarning.EndSample();
		return Global.Runner.StartCoroutine(DownloadAndApplyWorkshopSkin(val, workshopId));
	}

	private IEnumerator DownloadAndApplyWorkshopSkin(Skin skin, ulong workshopId)
	{
		TimeWarning.BeginSample("WorkshopSkin.DownloadAndApplyWorkshopSkin");
		TimeWarning.BeginSample("Item.New");
		Workshop.Item item = null;
		TimeWarning.EndSample();
		if (skin != null)
		{
			TimeWarning.BeginSample("Skin.Loading");
			while (skin.IsLoading)
			{
				TimeWarning.EndSample();
				TimeWarning.EndSample();
				yield return null;
				TimeWarning.BeginSample("WorkshopSkin.DownloadAndApplyWorkshopSkin");
				TimeWarning.BeginSample("Skin.Loading");
			}
			TimeWarning.EndSample();
			TimeWarning.BeginSample("ApplySkin");
			ApplySkin(skin);
			TimeWarning.EndSample();
			TimeWarning.EndSample();
			yield break;
		}
		TimeWarning.BeginSample("ItemCache.TryGetValue");
		bool num = ItemCache.TryGetValue(workshopId, out item);
		TimeWarning.EndSample();
		if (!num)
		{
			TimeWarning.BeginSample("Workshop.GetItem");
			item = Global.SteamClient.Workshop.GetItem(workshopId);
			TimeWarning.EndSample();
			TimeWarning.BeginSample("ItemCache.Add");
			ItemCache.Add(workshopId, item);
			TimeWarning.EndSample();
		}
		TimeWarning.BeginSample("Item.Installed");
		bool installed = item.Installed;
		TimeWarning.EndSample();
		if (!installed)
		{
			TimeWarning.BeginSample("Item.Download");
			item.Download();
			TimeWarning.EndSample();
			TimeWarning.BeginSample("Item.Installing");
			while (!item.Installed)
			{
				TimeWarning.EndSample();
				TimeWarning.EndSample();
				yield return null;
				TimeWarning.BeginSample("WorkshopSkin.DownloadAndApplyWorkshopSkin");
				TimeWarning.BeginSample("Item.Installing");
			}
			TimeWarning.EndSample();
		}
		if (!AllowApply)
		{
			TimeWarning.EndSample();
			yield break;
		}
		TimeWarning.BeginSample("SkinCache.TryGetValue");
		bool num2 = SkinCache.TryGetValue(workshopId, out skin);
		TimeWarning.EndSample();
		if (num2)
		{
			TimeWarning.BeginSample("Skin.Loading");
			while (skin.IsLoading)
			{
				TimeWarning.EndSample();
				TimeWarning.EndSample();
				yield return null;
				TimeWarning.BeginSample("WorkshopSkin.DownloadAndApplyWorkshopSkin");
				TimeWarning.BeginSample("Skin.Loading");
			}
			TimeWarning.EndSample();
			TimeWarning.BeginSample("ApplySkin");
			ApplySkin(skin);
			TimeWarning.EndSample();
			TimeWarning.EndSample();
		}
		else
		{
			TimeWarning.BeginSample("Skin.New");
			skin = new Skin();
			TimeWarning.EndSample();
			TimeWarning.BeginSample("SkinCache.Add");
			SkinCache.Add(workshopId, skin);
			TimeWarning.EndSample();
			TimeWarning.EndSample();
			yield return Global.Runner.StartCoroutine(skin.FromFolder(item.Directory, null));
			TimeWarning.BeginSample("WorkshopSkin.DownloadAndApplyWorkshopSkin");
			TimeWarning.BeginSample("ApplySkin");
			ApplySkin(skin);
			TimeWarning.EndSample();
			TimeWarning.EndSample();
		}
	}

	private void ApplySkin(Skin skin)
	{
		TimeWarning.BeginSample("WorkshopSkin.ApplySkin");
		if (!this)
		{
			TimeWarning.EndSample();
			return;
		}
		if (!base.gameObject)
		{
			TimeWarning.EndSample();
			return;
		}
		if (AllowApply)
		{
			skin.Apply(base.gameObject);
		}
		if (OnRefresh != null)
		{
			OnRefresh();
		}
		TimeWarning.EndSample();
	}
}
