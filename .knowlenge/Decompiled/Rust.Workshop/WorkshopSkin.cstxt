using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using Facepunch.Steamworks;
using Rust;
using Rust.Workshop;
using UnityEngine;

public class WorkshopSkin : MonoBehaviour
{
	public static bool AllowApply = true;

	public static float DownloadTimeout = 60f;

	private static WaitForSeconds waitForSeconds = new WaitForSeconds(1f);

	private static AssetBundleCreateRequest[] bundleRequests = new AssetBundleCreateRequest[10];

	private static AssetBundle[] bundles = new AssetBundle[10];

	private static ListDictionary<ulong, ListHashSet<WorkshopSkin>> RefreshQueue = new ListDictionary<ulong, ListHashSet<WorkshopSkin>>();

	private static Queue<ulong> ItemQueue = new Queue<ulong>();

	private static Queue<ulong> SkinQueue = new Queue<ulong>();

	private static ListDictionary<ulong, Workshop.Item> ItemCache = new ListDictionary<ulong, Workshop.Item>();

	private static ListDictionary<ulong, Skin> SkinCache = new ListDictionary<ulong, Skin>();

	private ulong WorkshopID;

	private Action OnRefresh;

	public static int QueuedCount => ItemQueue.Count + SkinQueue.Count;

	public static int LoadedCount => ItemCache.Count + SkinCache.Count;

	public static string GetStatus()
	{
		StringBuilder stringBuilder = new StringBuilder();
		int count = ItemCache.Count;
		int count2 = ItemQueue.Count;
		int count3 = SkinCache.Count;
		int count4 = SkinQueue.Count;
		if (ItemCache.Count > 0)
		{
			TextTable textTable = new TextTable();
			textTable.AddColumn("id");
			textTable.AddColumn("status");
			foreach (KeyValuePair<ulong, Workshop.Item> item in ItemCache)
			{
				ulong key = item.Key;
				Workshop.Item value = item.Value;
				string text = ((!value.Installed) ? "loading" : "loaded");
				textTable.AddRow(key.ToString(), text);
			}
			stringBuilder.Append(textTable.ToString());
			stringBuilder.AppendLine();
		}
		stringBuilder.Append("Items: ");
		stringBuilder.Append(count);
		stringBuilder.Append(" in cache + ");
		stringBuilder.Append(count2);
		stringBuilder.Append(" loading");
		stringBuilder.AppendLine();
		stringBuilder.Append("Skins: ");
		stringBuilder.Append(count3);
		stringBuilder.Append(" in cache + ");
		stringBuilder.Append(count4);
		stringBuilder.Append(" loading");
		stringBuilder.AppendLine();
		return stringBuilder.ToString();
	}

	public static Skin GetSkin(ulong workshopId)
	{
		LoadFromWorkshop(workshopId);
		return SkinCache[workshopId];
	}

	public static Workshop.Item GetItem(ulong workshopId)
	{
		LoadFromWorkshop(workshopId);
		return ItemCache[workshopId];
	}

	public static void Apply(GameObject gameobj, ulong workshopId, Action callback = null)
	{
		if (Global.SteamClient != null)
		{
			WorkshopSkin workshopSkin = gameobj.GetComponent<WorkshopSkin>();
			if (workshopSkin == null)
			{
				workshopSkin = gameobj.AddComponent<WorkshopSkin>();
			}
			workshopSkin.Apply(workshopId, callback);
		}
	}

	protected void OnDisable()
	{
		if (!Rust.Application.isQuitting)
		{
			DequeueSkinRefresh(WorkshopID);
		}
	}

	private void Apply(ulong workshopId, Action callback = null)
	{
		DequeueSkinRefresh(WorkshopID);
		WorkshopID = workshopId;
		OnRefresh = callback;
		Skin val = null;
		if (SkinCache.TryGetValue(WorkshopID, out val) && val.Loaded)
		{
			ApplySkin(val);
		}
		else
		{
			EnqueueSkinRefresh(workshopId);
		}
	}

	private void EnqueueSkinRefresh(ulong workshopId)
	{
		if (workshopId != 0)
		{
			ListHashSet<WorkshopSkin> val = null;
			if (!RefreshQueue.TryGetValue(workshopId, out val))
			{
				RefreshQueue.Add(workshopId, val = new ListHashSet<WorkshopSkin>());
			}
			val.Add(this);
			LoadFromWorkshop(workshopId);
		}
	}

	private static void LoadFromWorkshop(ulong workshopId)
	{
		if (!ItemCache.Contains(workshopId))
		{
			TimeWarning.BeginSample("Workshop.GetItem");
			Workshop.Item item = Global.SteamClient.Workshop.GetItem(workshopId);
			TimeWarning.EndSample();
			TimeWarning.BeginSample("ItemCache.Add");
			ItemCache.Add(workshopId, item);
			TimeWarning.EndSample();
			TimeWarning.BeginSample("Skin.New");
			Skin val = new Skin();
			TimeWarning.EndSample();
			TimeWarning.BeginSample("SkinCache.Add");
			SkinCache.Add(workshopId, val);
			TimeWarning.EndSample();
			ItemQueue.Enqueue(workshopId);
			if (ItemQueue.Count == 1)
			{
				Global.Runner.StartCoroutine(ItemQueueCoroutine());
			}
		}
	}

	private void DequeueSkinRefresh(ulong workshopId)
	{
		if (workshopId == 0)
		{
			return;
		}
		ListHashSet<WorkshopSkin> val = null;
		if (RefreshQueue.TryGetValue(workshopId, out val))
		{
			val.Remove(this);
			if (val.Count == 0)
			{
				RefreshQueue.Remove(workshopId);
			}
		}
	}

	private static IEnumerator ItemQueueCoroutine()
	{
		while (ItemQueue.Count > 0)
		{
			ulong workshopId = ItemQueue.Peek();
			yield return Global.Runner.StartCoroutine(LoadItem(workshopId));
			ItemQueue.Dequeue();
		}
	}

	private static IEnumerator SkinQueueCoroutine()
	{
		while (SkinQueue.Count > 0)
		{
			ulong workshopId = SkinQueue.Peek();
			yield return Global.Runner.StartCoroutine(LoadSkin(workshopId));
			SkinQueue.Dequeue();
		}
	}

	private static IEnumerator LoadItem(ulong workshopId)
	{
		int index = (int)(workshopId / 100000000 % 10);
		AssetBundle bundle = bundles[index];
		if (bundle == null)
		{
			AssetBundleCreateRequest bundleRequest = bundleRequests[index];
			if (bundleRequest == null)
			{
				TimeWarning.BeginSample("AssetBundle.LoadFromFileAsync");
				bundleRequest = (bundleRequests[index] = AssetBundle.LoadFromFileAsync("Bundles/textures/textures." + index + ".bundle"));
				TimeWarning.EndSample();
			}
			yield return bundleRequest;
			TimeWarning.BeginSample("BundleRequest");
			bundle = (bundles[index] = bundleRequests[index].assetBundle);
			TimeWarning.EndSample();
		}
		TimeWarning.BeginSample("WorkshopSkin.LoadItem");
		TimeWarning.BeginSample("ItemCache.Get");
		Workshop.Item item = ItemCache[workshopId];
		TimeWarning.EndSample();
		TimeWarning.BeginSample("Item.Installed");
		bool itemInstallComplete = item.Installed;
		TimeWarning.EndSample();
		if (!itemInstallComplete && bundle != null)
		{
			TimeWarning.BeginSample("Bundle.Contains");
			itemInstallComplete = bundle.Contains("Assets/Skins/" + workshopId + "/manifest.txt");
			TimeWarning.EndSample();
		}
		if (!itemInstallComplete)
		{
			TimeWarning.BeginSample("Item.Download");
			bool itemInstallStarted = item.Download();
			TimeWarning.EndSample();
			if (itemInstallStarted)
			{
				TimeWarning.BeginSample("Stopwatch.StartNew");
				Stopwatch sw = Stopwatch.StartNew();
				TimeWarning.EndSample();
				TimeWarning.BeginSample("Item.Installed");
				while (!item.Installed && sw.Elapsed.TotalSeconds < (double)DownloadTimeout)
				{
					TimeWarning.EndSample();
					TimeWarning.EndSample();
					yield return waitForSeconds;
					TimeWarning.BeginSample("WorkshopSkin.LoadItem");
					TimeWarning.BeginSample("Item.Installed");
				}
				TimeWarning.EndSample();
				TimeWarning.BeginSample("Item.Installed");
				itemInstallComplete = item.Installed;
				TimeWarning.EndSample();
			}
			if (!itemInstallStarted)
			{
				UnityEngine.Debug.LogWarning("Skin download failed: " + workshopId);
			}
			else if (!itemInstallComplete)
			{
				UnityEngine.Debug.LogWarning("Skin download timed out: " + workshopId);
			}
		}
		if (itemInstallComplete)
		{
			SkinQueue.Enqueue(workshopId);
			if (SkinQueue.Count == 1)
			{
				Global.Runner.StartCoroutine(SkinQueueCoroutine());
			}
		}
		TimeWarning.EndSample();
	}

	private static IEnumerator LoadSkin(ulong workshopId)
	{
		int index = (int)(workshopId / 100000000 % 10);
		AssetBundle bundle = bundles[index];
		TimeWarning.BeginSample("WorkshopSkin.LoadSkin");
		TimeWarning.BeginSample("ItemCache.Get");
		Workshop.Item item = ItemCache[workshopId];
		TimeWarning.EndSample();
		TimeWarning.BeginSample("SkinCache.Get");
		Skin skin = SkinCache[workshopId];
		TimeWarning.EndSample();
		TimeWarning.EndSample();
		yield return Global.Runner.StartCoroutine(skin.FromFolder(workshopId, item.Directory, bundle));
		TimeWarning.BeginSample("WorkshopSkin.LoadSkin");
		if (RefreshQueue.Contains(workshopId))
		{
			ListHashSet<WorkshopSkin> instances = RefreshQueue[workshopId];
			while (instances.Count > 0)
			{
				instances[0].ApplySkin(skin);
				instances.RemoveAt(0);
				TimeWarning.EndSample();
				yield return null;
				TimeWarning.BeginSample("WorkshopSkin.LoadSkin");
			}
			RefreshQueue.Remove(workshopId);
		}
		TimeWarning.EndSample();
	}

	private void ApplySkin(Skin skin)
	{
		TimeWarning.BeginSample("WorkshopSkin.ApplySkin");
		if (!this)
		{
			TimeWarning.EndSample();
			return;
		}
		if (!base.gameObject)
		{
			TimeWarning.EndSample();
			return;
		}
		if (AllowApply)
		{
			skin.Apply(base.gameObject);
		}
		if (OnRefresh != null)
		{
			OnRefresh();
		}
		TimeWarning.EndSample();
	}
}
