using System.Linq;
using Facepunch.Steamworks;
using Rust;
using Rust.UI;
using UnityEngine;
using UnityEngine.UI;

internal class WorkshopItemVoteGame : MonoBehaviour
{
	public Button VoteButton;

	private Workshop.Item[] Items;

	private Workshop.Item CurrentItem;

	public void Awake()
	{
		UpdateList();
	}

	public void UpdateList()
	{
		if (Global.SteamClient != null)
		{
			for (int i = 0; i < 5; i++)
			{
				Workshop.Query query = Global.SteamClient.Workshop.CreateQuery();
				query.Order = Workshop.Order.RankedByPublicationDate;
				query.OnResult = OnWorkshopQuery;
				query.Page = i + 1;
				query.Run();
			}
			for (int j = 0; j < 5; j++)
			{
				Workshop.Query query2 = Global.SteamClient.Workshop.CreateQuery();
				query2.Order = Workshop.Order.RankedByTrend;
				query2.OnResult = OnWorkshopQuery;
				query2.Page = j + 1;
				query2.Run();
			}
		}
	}

	private void OnWorkshopQuery(Workshop.Query query)
	{
		if (query.Items != null)
		{
			if (Items == null)
			{
				Items = new Workshop.Item[0];
			}
			Items = Items.Union(query.Items).Distinct().ToArray();
			if (CurrentItem == null)
			{
				Refresh();
			}
		}
	}

	public void Refresh()
	{
		if (Items != null)
		{
			if (Items.Length > 2)
			{
				CurrentItem = Items[Random.Range(0, Items.Length - 1)];
				VoteButton.GetComponentInChildren<HttpImage>().Load(CurrentItem.PreviewImageUrl);
			}
			Items = Items.Where((Workshop.Item x) => x.Id != CurrentItem.Id).ToArray();
		}
	}

	public void OnVoteYes()
	{
		if (CurrentItem != null)
		{
			CurrentItem.VoteUp();
			OnVoted();
		}
	}

	public void OnVoteNo()
	{
		if (CurrentItem != null)
		{
			CurrentItem.VoteDown();
			OnVoted();
		}
	}

	public void OpenItem()
	{
		Global.SteamClient.Overlay.OpenUrl(CurrentItem.Url);
	}

	private void OnVoted()
	{
		if (Items.Length < 50)
		{
			UpdateList();
		}
		else
		{
			Refresh();
		}
	}
}
