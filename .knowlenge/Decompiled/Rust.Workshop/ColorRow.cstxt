using Rust.UI;
using Rust.Workshop.Editor;
using UnityEngine;
using UnityEngine.UI;

public class ColorRow : MaterialRow
{
	public Button Reset;

	public RustSlider Red;

	public RustSlider Green;

	public RustSlider Blue;

	private Color Default;

	public bool IsDefault
	{
		get
		{
			if (Default.r == Red.Value && Green.Value == Default.g)
			{
				return Blue.Value == Default.b;
			}
			return false;
		}
	}

	public void Update()
	{
		((Component)Reset).gameObject.SetActive(!IsDefault);
	}

	public override void Read(Material source, Material def)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		Color color = source.GetColor(ParamName);
		Red.Value = color.r * 255f;
		Green.Value = color.g * 255f;
		Blue.Value = color.b * 255f;
		Default = def.GetColor(ParamName);
		base.Editor.SetColor(ParamName, color);
	}

	public void ResetToDefault()
	{
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		Red.Value = Default.r * 255f;
		Green.Value = Default.g * 255f;
		Blue.Value = Default.b * 255f;
		base.Editor.SetColor(ParamName, Default);
	}

	public void OnChanged()
	{
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		base.Editor.SetColor(ParamName, new Color(Red.Value / 255f, Green.Value / 255f, Blue.Value / 255f));
	}
}
