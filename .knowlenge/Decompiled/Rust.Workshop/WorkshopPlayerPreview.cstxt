using Facepunch.Extend;
using Rust;
using Rust.Workshop;
using UnityEngine;

internal class WorkshopPlayerPreview : MonoBehaviour
{
	internal GameObject Instance;

	protected WorkshopInterface Interface => ((Component)this).GetComponentInParent<WorkshopInterface>();

	public void Setup(GameObject ClothingPrefab, ulong id, bool focus, bool IsClothing)
	{
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Unknown result type (might be due to invalid IL or missing references)
		//IL_0108: Unknown result type (might be due to invalid IL or missing references)
		Cleanup();
		Instance = Global.CreatePrefab("assets/prefabs/player/player_model.prefab");
		Instance.transform.position = Vector3.zero;
		Instance.transform.rotation = Quaternion.identity;
		Instance.SetActive(true);
		ClothingPrefab.transform.SetParent(Instance.transform);
		ClothingPrefab.SetActive(false);
		Instance.SendMessage("ForceModelSeedMessage", (object)id);
		Instance.SendMessage("WorkshopPreviewSetup", (object)new GameObject[1] { ClothingPrefab });
		Instance.transform.position = SingletonComponent<WorkshopItemEditor>.Instance.item_position_a.transform.position;
		Instance.transform.rotation = SingletonComponent<WorkshopItemEditor>.Instance.item_position_a.transform.rotation;
		if (focus)
		{
			CameraEx.FocusOnRenderer(Camera.main, Instance, new Vector3(0.3f, 0.1f, 1f), Vector3.up, -1);
		}
	}

	public void Cleanup()
	{
		if ((Object)(object)Instance != (Object)null)
		{
			Object.Destroy((Object)(object)Instance);
			Instance = null;
		}
	}

	private void OnDisable()
	{
		if (!Application.isQuitting)
		{
			Cleanup();
		}
	}
}
