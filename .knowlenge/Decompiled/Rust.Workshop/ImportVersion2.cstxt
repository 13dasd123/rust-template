using System;
using System.Collections;
using System.IO;
using Facepunch.Utility;
using Rust;
using Rust.Workshop;
using Rust.Workshop.Import;
using UnityEngine;

internal class ImportVersion2 : SingletonComponent<ImportVersion2>
{
	private AssetBundle Bundle;

	public void OnDisable()
	{
		if (!Application.isQuitting && (Object)(object)Bundle != (Object)null)
		{
			Bundle.Unload(true);
			Bundle = null;
			Debug.Log((object)"CLEANUP BUNDLE");
		}
	}

	internal IEnumerator DoImport(IWorkshopContent item, Skin skin)
	{
		if ((Object)(object)Bundle != (Object)null)
		{
			Bundle.Unload(true);
			Bundle = null;
		}
		WorkshopItemEditor.Loading(v1: true, "Downloading..", "", 0f);
		if (!item.IsInstalled)
		{
			item.Download();
			while (item.IsDownloading)
			{
				yield return null;
			}
			while (!item.IsInstalled)
			{
				yield return null;
			}
		}
		string text = item.Directory + "/bundle";
		if (File.Exists(text))
		{
			yield return ((MonoBehaviour)this).StartCoroutine(LoadItem(item.Directory, text, skin));
			yield break;
		}
		Debug.LogWarning((object)"No Bundle Found!");
		Os.OpenFolder(item.Directory);
		yield return (object)new WaitForSeconds(5f);
	}

	public IEnumerator LoadItem(string Folder, string BundleName, Skin skin)
	{
		AssetBundleCreateRequest request = AssetBundle.LoadFromFileAsync(BundleName);
		yield return (object)new WaitUntil((Func<bool>)(() => ((AsyncOperation)request).isDone));
		if ((Object)(object)request.assetBundle == (Object)null)
		{
			Debug.LogWarning((object)"Asset bundle is null!");
			yield break;
		}
		Bundle = request.assetBundle;
		WorkshopSkinBase asset = request.assetBundle.LoadAsset<WorkshopSkinBase>("Meta.asset");
		if ((Object)(object)asset == (Object)null)
		{
			string[] allAssetNames = request.assetBundle.GetAllAssetNames();
			foreach (string text in allAssetNames)
			{
				asset = request.assetBundle.LoadAsset<WorkshopSkinBase>(text);
				if ((Object)(object)asset != (Object)null)
				{
					break;
				}
			}
		}
		if ((Object)(object)asset == (Object)null)
		{
			Os.OpenFolder(Folder);
			yield return (object)new WaitForSeconds(5f);
			yield break;
		}
		yield return ((MonoBehaviour)this).StartCoroutine(ProcessMaterial(0, asset.skinMaterial0, skin));
		yield return ((MonoBehaviour)this).StartCoroutine(ProcessMaterial(1, asset.skinMaterial1, skin));
		yield return ((MonoBehaviour)this).StartCoroutine(ProcessMaterial(2, asset.skinMaterial2, skin));
		yield return ((MonoBehaviour)this).StartCoroutine(ProcessMaterial(3, asset.skinMaterial3, skin));
	}

	private IEnumerator ProcessMaterial(int v, Material inputMaterial, Skin skin)
	{
		if ((Object)(object)inputMaterial == (Object)null || skin.Materials.Length <= v)
		{
			yield break;
		}
		yield return null;
		ImportTexture("_MainTex", inputMaterial, skin.Materials[v], normal: false, skin, v);
		ImportTexture("_BumpMap", inputMaterial, skin.Materials[v], normal: true, skin, v);
		ImportTexture("_OcclusionMap", inputMaterial, skin.Materials[v], normal: false, skin, v);
		if ((Object)(object)ImportTexture("_SpecGlossMap", inputMaterial, skin.Materials[v], normal: false, skin, v) == (Object)null)
		{
			Texture2D val = ImportTexture("_MetallicGlossMap", inputMaterial, skin.Materials[v], normal: false, skin, v, "_SpecGlossMap");
			if ((Object)(object)val != (Object)null)
			{
				ConvertMetalToSpec(val, skin.Materials[v]);
			}
		}
	}

	private Texture2D ImportTexture(string name, Material inputMaterial, Material outputMaterial, bool normal, Skin skin, int group, string targetName = null)
	{
		if (targetName == null)
		{
			targetName = name;
		}
		Texture texture = outputMaterial.GetTexture(name);
		Texture texture2 = inputMaterial.GetTexture(name);
		if ((Object)(object)texture2 == (Object)null)
		{
			return null;
		}
		if ((Object)(object)texture == (Object)null || ((Object)texture2).name == ((Object)texture).name)
		{
			return null;
		}
		texture2 = (Texture)(object)Texture.LimitSize((Texture2D)(object)((texture2 is Texture2D) ? texture2 : null), skin.Skinnable.Groups[group].MaxTextureSize, skin.Skinnable.Groups[group].MaxTextureSize);
		outputMaterial.SetTexture(targetName, texture2);
		return (Texture2D)(object)((texture2 is Texture2D) ? texture2 : null);
	}

	private Texture2D ConvertMetalToSpec(Texture2D tex, Material outputMaterial)
	{
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		tex = Texture.CreateReadableCopy(tex, 0, 0);
		Color val = default(Color);
		for (int i = 0; i < ((Texture)tex).height; i++)
		{
			for (int j = 0; j < ((Texture)tex).width; j++)
			{
				Color pixel = tex.GetPixel(j, i);
				if (pixel.a == 0f)
				{
					pixel.a = 0.007843138f;
				}
				((Color)(ref val))..ctor(pixel.r, pixel.r, pixel.r, pixel.a);
				tex.SetPixel(j, i, val);
			}
		}
		tex.Apply();
		outputMaterial.SetTexture("_SpecGlossMap", (Texture)(object)tex);
		outputMaterial.SetFloat("_Glossiness", 1f);
		outputMaterial.SetColor("_SpecColor", Color.white);
		return tex;
	}
}
