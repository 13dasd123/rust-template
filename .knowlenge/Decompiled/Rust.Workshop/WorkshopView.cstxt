using Facepunch.Extend;
using Rust.Platform.Steam;
using Rust.Workshop;
using Steamworks.Ugc;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class WorkshopView : MonoBehaviour
{
	public TextMeshProUGUI Title;

	public TextMeshProUGUI AuthorName;

	public TextMeshProUGUI VoteInfo;

	public Button VoteUp;

	public Button VoteDown;

	private IWorkshopContent item;

	protected WorkshopInterface Interface => ((Component)this).GetComponentInParent<WorkshopInterface>();

	protected WorkshopItemEditor Editor => Interface.Editor;

	public void Update()
	{
		if (item != null && string.IsNullOrEmpty(((TMP_Text)AuthorName).text))
		{
			((TMP_Text)AuthorName).text = StringExtensions.Truncate(item.Owner.UserName, 32, (string)null).ToUpper();
		}
	}

	public void UpdateFrom(IWorkshopContent item)
	{
		this.item = item;
		if (this.item != null)
		{
			((TMP_Text)Title).text = StringExtensions.Truncate(item.Title, 24, (string)null).ToUpper();
			((TMP_Text)AuthorName).text = StringExtensions.Truncate(item.Owner.UserName, 32, (string)null).ToUpper();
		}
		else
		{
			((TMP_Text)Title).text = "FAILED TO LOAD SKIN";
			((TMP_Text)AuthorName).text = "";
		}
	}

	public void OnVoteUp()
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		if (item != null)
		{
			IWorkshopContent obj = item;
			SteamWorkshopContent val = (SteamWorkshopContent)(object)((obj is SteamWorkshopContent) ? obj : null);
			if (val != null)
			{
				Item value = val.Value;
				((Item)(ref value)).Vote(true);
			}
			UpdateFrom(item);
		}
	}

	public void OnVoteDown()
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		if (item != null)
		{
			IWorkshopContent obj = item;
			SteamWorkshopContent val = (SteamWorkshopContent)(object)((obj is SteamWorkshopContent) ? obj : null);
			if (val != null)
			{
				Item value = val.Value;
				((Item)(ref value)).Vote(false);
			}
			UpdateFrom(item);
		}
	}

	public void OpenWeb()
	{
		if (item != null)
		{
			IWorkshopContent obj = item;
			Application.OpenURL((obj != null) ? obj.Url : null);
		}
	}

	internal void Clear()
	{
		item = null;
		((TMP_Text)Title).text = "";
		((TMP_Text)AuthorName).text = "";
	}
}
