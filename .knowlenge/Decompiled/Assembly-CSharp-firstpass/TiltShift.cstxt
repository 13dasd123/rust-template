using UnityEngine;
using UnityStandardAssets.ImageEffects;

[RequireComponent(typeof(Camera))]
[AddComponentMenu("Image Effects/Camera/Tilt Shift (Lens Blur)")]
internal class TiltShift : PostEffectsBase
{
	public enum TiltShiftMode
	{
		TiltShiftMode,
		IrisMode
	}

	public enum TiltShiftQuality
	{
		Preview,
		Normal,
		High
	}

	public TiltShiftMode mode;

	public TiltShiftQuality quality = TiltShiftQuality.Normal;

	[Range(0f, 15f)]
	public float blurArea = 1f;

	[Range(0f, 25f)]
	public float maxBlurSize = 5f;

	[Range(0f, 1f)]
	public int downsample;

	public Shader tiltShiftShader;

	private Material tiltShiftMaterial;

	public override bool CheckResources()
	{
		CheckSupport(needDepth: true);
		tiltShiftMaterial = CheckShaderAndCreateMaterial(tiltShiftShader, tiltShiftMaterial);
		if (!isSupported)
		{
			ReportAutoDisable();
		}
		return isSupported;
	}

	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		if (!CheckResources())
		{
			Graphics.Blit((Texture)(object)source, destination);
			return;
		}
		tiltShiftMaterial.SetFloat("_BlurSize", (maxBlurSize < 0f) ? 0f : maxBlurSize);
		tiltShiftMaterial.SetFloat("_BlurArea", blurArea);
		((Texture)source).filterMode = (FilterMode)1;
		RenderTexture val = destination;
		if ((float)downsample > 0f)
		{
			val = RenderTexture.GetTemporary(((Texture)source).width >> downsample, ((Texture)source).height >> downsample, 0, source.format);
			((Texture)val).filterMode = (FilterMode)1;
		}
		int num = (int)quality;
		num *= 2;
		Graphics.Blit((Texture)(object)source, val, tiltShiftMaterial, (mode == TiltShiftMode.TiltShiftMode) ? num : (num + 1));
		if (downsample > 0)
		{
			tiltShiftMaterial.SetTexture("_Blurred", (Texture)(object)val);
			Graphics.Blit((Texture)(object)source, destination, tiltShiftMaterial, 6);
		}
		if ((Object)(object)val != (Object)(object)destination)
		{
			RenderTexture.ReleaseTemporary(val);
		}
	}
}
