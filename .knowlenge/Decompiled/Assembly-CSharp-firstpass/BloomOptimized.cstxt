using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[RequireComponent(typeof(Camera))]
[AddComponentMenu("Image Effects/Bloom and Glow/Bloom (Optimized)")]
public class BloomOptimized : PostEffectsBase
{
	public enum Resolution
	{
		Low,
		High
	}

	public enum BlurType
	{
		Standard,
		Sgx
	}

	[Range(0f, 1.5f)]
	public float threshold = 0.25f;

	[Range(0f, 2.5f)]
	public float intensity = 0.75f;

	[Range(0.25f, 5.5f)]
	public float blurSize = 1f;

	private Resolution resolution;

	[Range(1f, 4f)]
	public int blurIterations = 1;

	public BlurType blurType;

	public Shader fastBloomShader;

	private Material fastBloomMaterial;

	public override bool CheckResources()
	{
		CheckSupport(needDepth: false);
		fastBloomMaterial = CheckShaderAndCreateMaterial(fastBloomShader, fastBloomMaterial);
		if (!isSupported)
		{
			ReportAutoDisable();
		}
		return isSupported;
	}

	private void OnDisable()
	{
		if (Object.op_Implicit((Object)(object)fastBloomMaterial))
		{
			Object.DestroyImmediate((Object)(object)fastBloomMaterial);
		}
	}

	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0128: Unknown result type (might be due to invalid IL or missing references)
		if (!CheckResources())
		{
			Graphics.Blit((Texture)(object)source, destination);
			return;
		}
		int num = ((resolution == Resolution.Low) ? 4 : 2);
		float num2 = ((resolution == Resolution.Low) ? 0.5f : 1f);
		fastBloomMaterial.SetVector("_Parameter", new Vector4(blurSize * num2, 0f, threshold, intensity));
		((Texture)source).filterMode = (FilterMode)1;
		int num3 = ((Texture)source).width / num;
		int num4 = ((Texture)source).height / num;
		RenderTexture val = RenderTexture.GetTemporary(num3, num4, 0, source.format);
		((Texture)val).filterMode = (FilterMode)1;
		Graphics.Blit((Texture)(object)source, val, fastBloomMaterial, 1);
		int num5 = ((blurType != 0) ? 2 : 0);
		for (int i = 0; i < blurIterations; i++)
		{
			fastBloomMaterial.SetVector("_Parameter", new Vector4(blurSize * num2 + (float)i * 1f, 0f, threshold, intensity));
			RenderTexture temporary = RenderTexture.GetTemporary(num3, num4, 0, source.format);
			((Texture)temporary).filterMode = (FilterMode)1;
			Graphics.Blit((Texture)(object)val, temporary, fastBloomMaterial, 2 + num5);
			RenderTexture.ReleaseTemporary(val);
			val = temporary;
			temporary = RenderTexture.GetTemporary(num3, num4, 0, source.format);
			((Texture)temporary).filterMode = (FilterMode)1;
			Graphics.Blit((Texture)(object)val, temporary, fastBloomMaterial, 3 + num5);
			RenderTexture.ReleaseTemporary(val);
			val = temporary;
		}
		fastBloomMaterial.SetTexture("_Bloom", (Texture)(object)val);
		Graphics.Blit((Texture)(object)source, destination, fastBloomMaterial, 0);
		RenderTexture.ReleaseTemporary(val);
	}
}
