using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[RequireComponent(typeof(Camera))]
[AddComponentMenu("Image Effects/Edge Detection/Edge Detection")]
public class EdgeDetection : PostEffectsBase
{
	public enum EdgeDetectMode
	{
		TriangleDepthNormals,
		RobertsCrossDepthNormals,
		SobelDepth,
		SobelDepthThin,
		TriangleLuminance
	}

	public EdgeDetectMode mode = EdgeDetectMode.SobelDepthThin;

	public float sensitivityDepth = 1f;

	public float sensitivityNormals = 1f;

	public float lumThreshold = 0.2f;

	public float edgeExp = 1f;

	public float sampleDist = 1f;

	public float edgesOnly;

	public Color edgesOnlyBgColor = Color.white;

	public Shader edgeDetectShader;

	private Material edgeDetectMaterial;

	private EdgeDetectMode oldMode = EdgeDetectMode.SobelDepthThin;

	public override bool CheckResources()
	{
		CheckSupport(needDepth: true);
		edgeDetectMaterial = CheckShaderAndCreateMaterial(edgeDetectShader, edgeDetectMaterial);
		if (mode != oldMode)
		{
			SetCameraFlag();
		}
		oldMode = mode;
		if (!isSupported)
		{
			ReportAutoDisable();
		}
		return isSupported;
	}

	private new void Start()
	{
		oldMode = mode;
	}

	private void SetCameraFlag()
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		if (mode == EdgeDetectMode.SobelDepth || mode == EdgeDetectMode.SobelDepthThin)
		{
			Camera component = ((Component)this).GetComponent<Camera>();
			component.depthTextureMode = (DepthTextureMode)(component.depthTextureMode | 1);
		}
		else if (mode == EdgeDetectMode.TriangleDepthNormals || mode == EdgeDetectMode.RobertsCrossDepthNormals)
		{
			Camera component2 = ((Component)this).GetComponent<Camera>();
			component2.depthTextureMode = (DepthTextureMode)(component2.depthTextureMode | 2);
		}
	}

	private void OnEnable()
	{
		SetCameraFlag();
	}

	[ImageEffectOpaque]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		if (!CheckResources())
		{
			Graphics.Blit((Texture)(object)source, destination);
			return;
		}
		Vector2 val = default(Vector2);
		((Vector2)(ref val))..ctor(sensitivityDepth, sensitivityNormals);
		edgeDetectMaterial.SetVector("_Sensitivity", new Vector4(val.x, val.y, 1f, val.y));
		edgeDetectMaterial.SetFloat("_BgFade", edgesOnly);
		edgeDetectMaterial.SetFloat("_SampleDistance", sampleDist);
		edgeDetectMaterial.SetVector("_BgColor", Color.op_Implicit(edgesOnlyBgColor));
		edgeDetectMaterial.SetFloat("_Exponent", edgeExp);
		edgeDetectMaterial.SetFloat("_Threshold", lumThreshold);
		Graphics.Blit((Texture)(object)source, destination, edgeDetectMaterial, (int)mode);
	}
}
