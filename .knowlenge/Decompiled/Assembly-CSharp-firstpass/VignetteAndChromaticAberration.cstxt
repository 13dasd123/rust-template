using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[AddComponentMenu("Image Effects/Camera/Vignette and Chromatic Aberration")]
public class VignetteAndChromaticAberration : PostEffectsBase, IImageEffect
{
	public enum AberrationMode
	{
		Simple,
		Advanced
	}

	public AberrationMode mode;

	public float intensity = 0.375f;

	public float chromaticAberration = 0.2f;

	public float axialAberration = 0.5f;

	public float blur;

	public float blurSpread = 0.75f;

	public float luminanceDependency = 0.25f;

	public float blurDistance = 2.5f;

	public Shader vignetteShader;

	public Shader separableBlurShader;

	public Shader chromAberrationShader;

	private Material m_VignetteMaterial;

	private Material m_SeparableBlurMaterial;

	private Material m_ChromAberrationMaterial;

	public override bool CheckResources()
	{
		CheckSupport(needDepth: false);
		m_VignetteMaterial = CheckShaderAndCreateMaterial(vignetteShader, m_VignetteMaterial);
		m_SeparableBlurMaterial = CheckShaderAndCreateMaterial(separableBlurShader, m_SeparableBlurMaterial);
		m_ChromAberrationMaterial = CheckShaderAndCreateMaterial(chromAberrationShader, m_ChromAberrationMaterial);
		if (!isSupported)
		{
			ReportAutoDisable();
		}
		return isSupported;
	}

	public bool IsActive()
	{
		if (((Behaviour)this).enabled)
		{
			return CheckResources();
		}
		return false;
	}

	public void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_0209: Unknown result type (might be due to invalid IL or missing references)
		//IL_020e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0136: Unknown result type (might be due to invalid IL or missing references)
		//IL_0148: Unknown result type (might be due to invalid IL or missing references)
		if (!CheckResources())
		{
			Graphics.Blit((Texture)(object)source, destination);
			return;
		}
		int width = ((Texture)source).width;
		int height = ((Texture)source).height;
		bool flag = Mathf.Abs(blur) > 0f || Mathf.Abs(intensity) > 0f;
		float num = 1f * (float)width / (1f * (float)height);
		RenderTexture val = null;
		RenderTexture val2 = null;
		if (flag)
		{
			val = RenderTexture.GetTemporary(width, height, 0, source.format);
			if (Mathf.Abs(blur) > 0f)
			{
				val2 = RenderTexture.GetTemporary(width / 2, height / 2, 0, source.format);
				Graphics.Blit((Texture)(object)source, val2, m_ChromAberrationMaterial, 0);
				for (int i = 0; i < 2; i++)
				{
					m_SeparableBlurMaterial.SetVector("offsets", new Vector4(0f, blurSpread * 0.001953125f, 0f, 0f));
					RenderTexture temporary = RenderTexture.GetTemporary(width / 2, height / 2, 0, source.format);
					Graphics.Blit((Texture)(object)val2, temporary, m_SeparableBlurMaterial);
					RenderTexture.ReleaseTemporary(val2);
					m_SeparableBlurMaterial.SetVector("offsets", new Vector4(blurSpread * 0.001953125f / num, 0f, 0f, 0f));
					val2 = RenderTexture.GetTemporary(width / 2, height / 2, 0, source.format);
					Graphics.Blit((Texture)(object)temporary, val2, m_SeparableBlurMaterial);
					RenderTexture.ReleaseTemporary(temporary);
				}
			}
			m_VignetteMaterial.SetFloat("_Intensity", intensity);
			m_VignetteMaterial.SetFloat("_Blur", blur);
			m_VignetteMaterial.SetTexture("_VignetteTex", (Texture)(object)val2);
			Graphics.Blit((Texture)(object)source, val, m_VignetteMaterial, 0);
		}
		m_ChromAberrationMaterial.SetFloat("_ChromaticAberration", chromaticAberration);
		m_ChromAberrationMaterial.SetFloat("_AxialAberration", axialAberration);
		m_ChromAberrationMaterial.SetVector("_BlurDistance", Vector4.op_Implicit(new Vector2(0f - blurDistance, blurDistance)));
		m_ChromAberrationMaterial.SetFloat("_Luminance", 1f / Mathf.Max(Mathf.Epsilon, luminanceDependency));
		if (flag)
		{
			((Texture)val).wrapMode = (TextureWrapMode)1;
		}
		else
		{
			((Texture)source).wrapMode = (TextureWrapMode)1;
		}
		Graphics.Blit((Texture)(object)(flag ? val : source), destination, m_ChromAberrationMaterial, (mode != AberrationMode.Advanced) ? 1 : 2);
		RenderTexture.ReleaseTemporary(val);
		RenderTexture.ReleaseTemporary(val2);
	}
}
