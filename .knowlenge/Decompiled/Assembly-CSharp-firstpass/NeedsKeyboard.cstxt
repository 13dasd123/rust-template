using System;
using System.Collections.Generic;
using Facepunch;
using TMPro;
using UnityEngine;
using UnityEngine.Events;
using UnityEngine.EventSystems;
using UnityEngine.UI;

public class NeedsKeyboard : ListComponent<NeedsKeyboard>
{
	[Flags]
	public enum BypassOption
	{
		Voice = 1,
		Chat = 4,
		Gesture = 8,
		CardGames = 0x10,
		Movement = 0x20,
		Ping = 0x40,
		Inventory = 0x80,
		Crafting = 0x100,
		Clan = 0x200,
		Contacts = 0x400,
		Attack = 0x800,
		Reload = 0x1000,
		Painting = 0x2000,
		Duck = 0x4000,
		Autorun = 0x8000
	}

	public UnityEvent onNoKeysDown;

	public bool ShowEscapeUI;

	public bool blockUnspecifiedInput = true;

	public BypassOption AllowedBinds;

	private List<string> binds = new List<string>();

	private bool watchForNoKeys;

	public static bool ShouldShowUI
	{
		get
		{
			if (ListComponent<NeedsKeyboard>.InstanceList.Count > 0)
			{
				return ListComponent<NeedsKeyboard>.InstanceList[0].ShowEscapeUI;
			}
			return false;
		}
	}

	private static void GetBindString(BypassOption bypassOption, List<string> resultBinds)
	{
		if ((bypassOption & BypassOption.Voice) == BypassOption.Voice)
		{
			resultBinds.Add("+voice");
		}
		if ((bypassOption & BypassOption.Chat) == BypassOption.Chat)
		{
			resultBinds.Add("chat.open");
		}
		if ((bypassOption & BypassOption.Gesture) == BypassOption.Gesture)
		{
			resultBinds.Add("+gestures");
		}
		if ((bypassOption & BypassOption.Movement) == BypassOption.Movement)
		{
			resultBinds.Add("+left");
			resultBinds.Add("+right");
			resultBinds.Add("+backward");
			resultBinds.Add("+forward");
			resultBinds.Add("+sprint");
			resultBinds.Add("+duck");
			resultBinds.Add("+jump");
		}
		if ((bypassOption & BypassOption.Ping) == BypassOption.Ping)
		{
			resultBinds.Add("+ping");
		}
		if ((bypassOption & BypassOption.Inventory) == BypassOption.Inventory)
		{
			resultBinds.Add("inventory.toggle");
		}
		if ((bypassOption & BypassOption.Crafting) == BypassOption.Crafting)
		{
			resultBinds.Add("inventory.togglecrafting");
		}
		if ((bypassOption & BypassOption.Clan) == BypassOption.Clan)
		{
			resultBinds.Add("clan.toggleclan");
		}
		if ((bypassOption & BypassOption.Contacts) == BypassOption.Contacts)
		{
			resultBinds.Add("uicontacts.togglecontacts");
		}
		if ((bypassOption & BypassOption.Attack) == BypassOption.Attack)
		{
			resultBinds.Add("+attack");
			resultBinds.Add("+attack2");
			resultBinds.Add("+attack3");
		}
		if ((bypassOption & BypassOption.Reload) == BypassOption.Reload)
		{
			resultBinds.Add("+reload");
		}
		if ((bypassOption & BypassOption.Painting) == BypassOption.Painting)
		{
			resultBinds.Add("paint.selectedtool");
			resultBinds.Add("paint.selectedbrush");
			resultBinds.Add("paint.brushsize");
			resultBinds.Add("paint.brushopacity");
		}
	}

	public static bool AnyActive(BypassOption forBypass)
	{
		return AnyActive((KeyCode)0, forBypass);
	}

	public static bool AnyActive(KeyCode key = 0, BypassOption forBypass = (BypassOption)0)
	{
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		if (ListComponent<NeedsKeyboard>.InstanceList.Count == 0)
		{
			return false;
		}
		if ((forBypass & BypassOption.Duck) != BypassOption.Duck && (forBypass & BypassOption.Autorun) != BypassOption.Autorun && AnyTextboxFocused())
		{
			return true;
		}
		Enumerator<NeedsKeyboard> enumerator;
		if ((int)key != 0 || forBypass != 0)
		{
			enumerator = ListComponent<NeedsKeyboard>.InstanceList.GetEnumerator();
			try
			{
				while (enumerator.MoveNext())
				{
					NeedsKeyboard current = enumerator.Current;
					if (current.ShouldBlockInput() && !current.AllowKeyInput(key, forBypass))
					{
						return true;
					}
				}
			}
			finally
			{
				((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
			}
			return false;
		}
		enumerator = ListComponent<NeedsKeyboard>.InstanceList.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				NeedsKeyboard current2 = enumerator.Current;
				if (current2.blockUnspecifiedInput && current2.ShouldBlockInput())
				{
					return true;
				}
			}
		}
		finally
		{
			((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
		}
		return false;
	}

	protected override void OnEnable()
	{
		((ListComponent)this).OnEnable();
		watchForNoKeys = true;
		if (AllowedBinds == (BypassOption)0)
		{
			return;
		}
		binds.Clear();
		List<string> list = Pool.Get<List<string>>();
		GetBindString(AllowedBinds, list);
		foreach (string item in list)
		{
			binds.AddRange(Input.GetButtonsWithBind(item, false));
		}
		Pool.FreeUnmanaged<string>(ref list);
	}

	public void Update()
	{
		if (watchForNoKeys && !Input.anyKey)
		{
			watchForNoKeys = false;
			UnityEvent obj = onNoKeysDown;
			if (obj != null)
			{
				obj.Invoke();
			}
		}
	}

	private bool AllowKeyInput(KeyCode k, BypassOption forBypass)
	{
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		if (AllowedBinds == (BypassOption)0)
		{
			return false;
		}
		if (forBypass != 0 && (forBypass & AllowedBinds) == forBypass)
		{
			return true;
		}
		if (forBypass == (BypassOption)0 && (int)k == 0)
		{
			return false;
		}
		string b = ((object)(KeyCode)(ref k)/*cast due to .constrained prefix*/).ToString();
		foreach (string bind in binds)
		{
			if (string.Equals(bind, b, StringComparison.OrdinalIgnoreCase))
			{
				return true;
			}
		}
		return false;
	}

	protected virtual bool ShouldBlockInput()
	{
		return true;
	}

	private static bool AnyTextboxFocused()
	{
		EventSystem current = EventSystem.current;
		if ((Object)(object)current != (Object)null)
		{
			GameObject currentSelectedGameObject = current.currentSelectedGameObject;
			if ((Object)(object)currentSelectedGameObject != (Object)null)
			{
				InputField val = default(InputField);
				if (currentSelectedGameObject.TryGetComponent<InputField>(ref val) && !val.readOnly && val.isFocused)
				{
					return true;
				}
				TMP_InputField val2 = default(TMP_InputField);
				if (currentSelectedGameObject.TryGetComponent<TMP_InputField>(ref val2) && !val2.readOnly && val2.isFocused)
				{
					return true;
				}
			}
		}
		return false;
	}
}
