using System;
using UnityEngine;

[Serializable]
public class MegaWireMesher
{
	public bool show;

	private static Vector3[] tan1;

	private static Vector3[] tan2;

	public virtual void BuildMesh(MegaWire rope, MegaWireSpan span)
	{
	}

	public static void BuildTangents(Mesh mesh, Vector3[] verts, Vector2[] uvs, Vector3[] norms, int[] tris)
	{
		int num = mesh.triangles.Length;
		int num2 = mesh.vertices.Length;
		if (tan1 == null || tan1.Length < num2)
		{
			tan1 = new Vector3[num2];
			tan2 = new Vector3[num2];
		}
		Vector4[] array = new Vector4[num2];
		for (int i = 0; i < num; i += 3)
		{
			long num3 = tris[i];
			long num4 = tris[i + 1];
			long num5 = tris[i + 2];
			Vector3 vector = verts[num3];
			Vector3 vector2 = verts[num4];
			Vector3 vector3 = verts[num5];
			Vector2 vector4 = uvs[num3];
			Vector2 vector5 = uvs[num4];
			Vector2 vector6 = uvs[num5];
			float num6 = vector2.x - vector.x;
			float num7 = vector3.x - vector.x;
			float num8 = vector2.y - vector.y;
			float num9 = vector3.y - vector.y;
			float num10 = vector2.z - vector.z;
			float num11 = vector3.z - vector.z;
			float num12 = vector5.x - vector4.x;
			float num13 = vector6.x - vector4.x;
			float num14 = vector5.y - vector4.y;
			float num15 = vector6.y - vector4.y;
			float num16 = 1f / (num12 * num15 - num13 * num14);
			Vector3 vector7 = new Vector3((num15 * num6 - num14 * num7) * num16, (num15 * num8 - num14 * num9) * num16, (num15 * num10 - num14 * num11) * num16);
			Vector3 vector8 = new Vector3((num12 * num7 - num13 * num6) * num16, (num12 * num9 - num13 * num8) * num16, (num12 * num11 - num13 * num10) * num16);
			tan1[num3] += vector7;
			tan1[num4] += vector7;
			tan1[num5] += vector7;
			tan2[num3] += vector8;
			tan2[num4] += vector8;
			tan2[num5] += vector8;
		}
		for (int j = 0; j < num2; j++)
		{
			Vector3 normal = norms[j];
			Vector3 tangent = tan1[j];
			Vector3.OrthoNormalize(ref normal, ref tangent);
			array[j].x = tangent.x;
			array[j].y = tangent.y;
			array[j].z = tangent.z;
			array[j].w = ((!(Vector3.Dot(Vector3.Cross(normal, tangent), tan2[j]) < 0f)) ? 1f : (-1f));
		}
		mesh.tangents = array;
	}
}
