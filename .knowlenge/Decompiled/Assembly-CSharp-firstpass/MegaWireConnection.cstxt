using System;
using System.Collections.Generic;
using UnityEngine;

[Serializable]
public class MegaWireConnection
{
	public Vector3 inOffset = Vector3.zero;

	public Vector3 outOffset = Vector3.zero;

	public float radius = 0.01f;

	public Vector3 windFrc = Vector3.zero;

	public Transform start;

	public Transform end;

	public float WireLength;

	private Matrix4x4 wtm;

	public List<MegaWireMass> masses = new List<MegaWireMass>();

	public List<MegaWireSpring> springs = new List<MegaWireSpring>();

	public List<MegaWirePointConstraint> constraints = new List<MegaWirePointConstraint>();

	public List<MegaWireLengthConstraint> lenconstraints = new List<MegaWireLengthConstraint>();

	public Vector3[] masspos;

	public void SetEndConstraintActive(int index, bool active, float time)
	{
		if (active)
		{
			constraints[index].reactivate = time;
			constraints[index].rtime = time;
			constraints[index].ps = masses[constraints[index].p1].pos;
		}
		else
		{
			constraints[index].active = active;
		}
	}

	public void Update(MegaWire wire, float timeStep)
	{
		wire.verletsolver.doIntegration1(this, wire, timeStep);
	}

	public void Init(MegaWire wire)
	{
		if (start == null || end == null)
		{
			return;
		}
		Vector3 vector = start.TransformPoint(outOffset);
		Vector3 vector2 = end.TransformPoint(inOffset);
		WireLength = (vector - vector2).magnitude;
		if (masses == null)
		{
			masses = new List<MegaWireMass>();
		}
		masses.Clear();
		float num = wire.Mass / (float)(wire.points + 1);
		for (int i = 0; i <= wire.points; i++)
		{
			float t = (float)i / (float)wire.points;
			float num2 = (UnityEngine.Random.value - 0.5f) * 2f * (wire.massRand * num);
			float m = num2 + num;
			MegaWireMass item = new MegaWireMass(m, Vector3.Lerp(vector, vector2, t));
			masses.Add(item);
		}
		if (springs == null)
		{
			springs = new List<MegaWireSpring>();
		}
		springs.Clear();
		if (constraints == null)
		{
			constraints = new List<MegaWirePointConstraint>();
		}
		if (lenconstraints == null)
		{
			lenconstraints = new List<MegaWireLengthConstraint>();
		}
		constraints.Clear();
		lenconstraints.Clear();
		for (int j = 0; j < masses.Count - 1; j++)
		{
			MegaWireSpring megaWireSpring = new MegaWireSpring(j, j + 1, wire.spring, wire.damp, this, wire.stretch);
			springs.Add(megaWireSpring);
			if (wire.lengthConstraints)
			{
				MegaWireLengthConstraint item2 = new MegaWireLengthConstraint(j, j + 1, megaWireSpring.restlen);
				lenconstraints.Add(item2);
			}
		}
		if (wire.stiffnessSprings)
		{
			int num3 = 2;
			for (int k = 0; k < masses.Count - num3; k++)
			{
				MegaWireSpring item3 = new MegaWireSpring(k, k + 2, wire.stiffrate, wire.stiffdamp, this, wire.stretch);
				springs.Add(item3);
			}
		}
		MegaWirePointConstraint item4 = new MegaWirePointConstraint(0, start.transform, outOffset);
		constraints.Add(item4);
		item4 = new MegaWirePointConstraint(masses.Count - 1, end.transform, inOffset);
		constraints.Add(item4);
		masspos = new Vector3[masses.Count + 2];
		for (int l = 0; l < masses.Count; l++)
		{
			ref Vector3 reference = ref masspos[l + 1];
			reference = masses[l].pos;
		}
		ref Vector3 reference2 = ref masspos[0];
		reference2 = masses[0].pos - (masses[1].pos - masses[0].pos);
		ref Vector3 reference3 = ref masspos[masspos.Length - 1];
		reference3 = masses[masses.Count - 1].pos + (masses[masses.Count - 1].pos - masses[masses.Count - 2].pos);
	}

	public void MoveMasses(MegaWire wire)
	{
		for (int i = 0; i < masses.Count; i++)
		{
			ref Vector3 reference = ref masspos[i + 1];
			reference = masses[i].pos;
			masses[i].forcec = Vector3.zero;
		}
		ref Vector3 reference2 = ref masspos[0];
		reference2 = masses[0].pos - (masses[1].pos - masses[0].pos);
		ref Vector3 reference3 = ref masspos[masspos.Length - 1];
		reference3 = masses[masses.Count - 1].pos + (masses[masses.Count - 1].pos - masses[masses.Count - 2].pos);
	}

	public Vector3 Interp(float t)
	{
		int num = masspos.Length - 3;
		int num2 = Mathf.Min(Mathf.FloorToInt(t * (float)num), num - 1);
		float num3 = t * (float)num - (float)num2;
		Vector3 vector = masspos[num2];
		Vector3 vector2 = masspos[num2 + 1];
		Vector3 vector3 = masspos[num2 + 2];
		Vector3 vector4 = masspos[num2 + 3];
		return 0.5f * ((-vector + 3f * vector2 - 3f * vector3 + vector4) * (num3 * num3 * num3) + (2f * vector - 5f * vector2 + 4f * vector3 - vector4) * (num3 * num3) + (-vector + vector3) * num3 + 2f * vector2);
	}

	public Vector3 Velocity(float t)
	{
		int num = masspos.Length - 3;
		int num2 = Mathf.Min(Mathf.FloorToInt(t * (float)num), num - 1);
		float num3 = t * (float)num - (float)num2;
		Vector3 vector = masspos[num2];
		Vector3 vector2 = masspos[num2 + 1];
		Vector3 vector3 = masspos[num2 + 2];
		Vector3 vector4 = masspos[num2 + 3];
		return 1.5f * (-vector + 3f * vector2 - 3f * vector3 + vector4) * (num3 * num3) + (2f * vector - 5f * vector2 + 4f * vector3 - vector4) * num3 + 0.5f * vector3 - 0.5f * vector;
	}

	public Vector3 LinInterp(float t)
	{
		int num = masspos.Length - 3;
		int num2 = Mathf.Min(Mathf.FloorToInt(t * (float)num), num - 1);
		float t2 = t * (float)num - (float)num2;
		Vector3 a = masspos[num2 + 1];
		Vector3 b = masspos[num2 + 2];
		return Vector3.Lerp(a, b, t2);
	}

	public Matrix4x4 GetDeformMat(float alpha)
	{
		Vector3 vector = Interp(alpha);
		Vector3 forward = Velocity(alpha);
		Quaternion quaternion = Quaternion.LookRotation(forward, Vector3.up);
		float num = quaternion.x * quaternion.x;
		float num2 = quaternion.x * quaternion.y;
		float num3 = quaternion.x * quaternion.z;
		float num4 = quaternion.x * quaternion.w;
		float num5 = quaternion.y * quaternion.y;
		float num6 = quaternion.y * quaternion.z;
		float num7 = quaternion.y * quaternion.w;
		float num8 = quaternion.z * quaternion.z;
		float num9 = quaternion.z * quaternion.w;
		wtm.m00 = 1f - 2f * (num5 + num8);
		wtm.m01 = 2f * (num2 - num9);
		wtm.m02 = 2f * (num3 + num7);
		wtm.m10 = 2f * (num2 + num9);
		wtm.m11 = 1f - 2f * (num + num8);
		wtm.m12 = 2f * (num6 - num4);
		wtm.m20 = 2f * (num3 - num7);
		wtm.m21 = 2f * (num6 + num4);
		wtm.m23 = 1f - 2f * (num + num5);
		wtm.m03 = vector.x;
		wtm.m13 = vector.y;
		wtm.m23 = vector.z;
		return wtm;
	}

	public Matrix4x4 GetDeformMatLin(float alpha)
	{
		Vector3 vector = LinInterp(alpha);
		alpha += 0.001f;
		Vector3 forward;
		if (alpha > 1f)
		{
			alpha = 0.999f;
			forward = vector - LinInterp(alpha);
		}
		else
		{
			forward = LinInterp(alpha) - vector;
		}
		Quaternion quaternion = Quaternion.LookRotation(forward, Vector3.up);
		float num = quaternion.x * quaternion.x;
		float num2 = quaternion.x * quaternion.y;
		float num3 = quaternion.x * quaternion.z;
		float num4 = quaternion.x * quaternion.w;
		float num5 = quaternion.y * quaternion.y;
		float num6 = quaternion.y * quaternion.z;
		float num7 = quaternion.y * quaternion.w;
		float num8 = quaternion.z * quaternion.z;
		float num9 = quaternion.z * quaternion.w;
		wtm.m00 = 1f - 2f * (num5 + num8);
		wtm.m01 = 2f * (num2 - num9);
		wtm.m02 = 2f * (num3 + num7);
		wtm.m10 = 2f * (num2 + num9);
		wtm.m11 = 1f - 2f * (num + num8);
		wtm.m12 = 2f * (num6 - num4);
		wtm.m20 = 2f * (num3 - num7);
		wtm.m21 = 2f * (num6 + num4);
		wtm.m23 = 1f - 2f * (num + num5);
		wtm.m03 = vector.x;
		wtm.m13 = vector.y;
		wtm.m23 = vector.z;
		return wtm;
	}
}
