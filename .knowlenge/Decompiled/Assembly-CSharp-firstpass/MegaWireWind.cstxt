using System;
using UnityEngine;

[ExecuteInEditMode]
[AddComponentMenu("Mega Wire/Wind")]
public class MegaWireWind : MonoBehaviour
{
	public float decay;

	public float turb;

	public float strength = 4f;

	public MegaWindType type;

	public float freq;

	public float scale = 1f;

	public Vector3 force = Vector3.zero;

	private MegaWirePerlin iperlin = MegaWirePerlin.Instance;

	private static float forceScaleFactor = 1600f;

	public Vector3 gizmoSize = new Vector2(10f, 10f);

	public int divs = 10;

	public bool displayGizmo = true;

	public float gizscale = 1f;

	public Vector3 gizmopos = Vector3.zero;

	public Color gizmocol = Color.white;

	public bool dirnoise;

	public float dirfreq = 1f;

	public float dirphase;

	public Vector3 dirscale = Vector3.zero;

	public bool strengthnoise;

	public float strengthfreq = 1f;

	public float strengthphase;

	public float strengthscale;

	public Vector3 dir = Vector3.zero;

	public float t;

	private Vector3 rotseed = new Vector3(2f, 4f, 6f);

	private float strengthval;

	private Vector3 dirval = Vector3.zero;

	private float RTurbulence(Vector3 p, float freq)
	{
		Vector3 vector = p * freq;
		return iperlin.Noise(vector.x, vector.y, vector.z);
	}

	public virtual Vector3 Force(Vector3 pos)
	{
		if (decay < 0f)
		{
			decay = 0f;
		}
		float num = strength + strengthval;
		Vector3 vector = dir + dirval;
		float f = (float)Math.PI / 180f * vector.x;
		float f2 = (float)Math.PI / 180f * vector.y;
		Vector3 vector2 = new Vector3(Mathf.Cos(f) * Mathf.Sin(f2), Mathf.Sin(f), Mathf.Cos(f) * Mathf.Cos(f2));
		if (type == MegaWindType.Planar)
		{
			force = vector2;
			if (decay != 0f)
			{
				float num2 = Mathf.Abs(Vector3.Dot(force, pos - base.transform.position));
				num *= Mathf.Exp((0f - decay) * num2);
			}
			force *= num * 0.0001f * forceScaleFactor;
		}
		else
		{
			force = pos - base.transform.position;
			float num3 = Vector3.Magnitude(force);
			if (num3 != 0f)
			{
				force /= num3;
			}
			if (decay != 0f)
			{
				num *= Mathf.Exp((0f - decay) * num3);
			}
			force *= num * 0.0001f * forceScaleFactor;
		}
		float num4 = turb;
		float num5 = freq;
		if (num4 != 0f)
		{
			Vector3 zero = Vector3.zero;
			Vector3 vector3 = pos - base.transform.position;
			num5 *= 0.01f;
			num4 *= 0.0001f * forceScaleFactor;
			Vector3 p = vector3;
			p.x = num5 * t;
			zero.x = RTurbulence(p, scale);
			p = vector3;
			p.y = num5 * t;
			zero.y = RTurbulence(p, scale);
			p = vector3;
			p.z = num5 * t;
			zero.z = RTurbulence(p, scale);
			return force + num4 * zero;
		}
		return force;
	}

	private void Update()
	{
		t += Time.deltaTime;
		if (strengthnoise)
		{
			strengthphase += Time.deltaTime * strengthfreq;
			strengthval = iperlin.Noise(2f, 3f, strengthphase) * strengthscale;
		}
		if (dirnoise)
		{
			dirphase += Time.deltaTime * dirfreq;
			Vector3 zero = Vector3.zero;
			Vector3 vector = rotseed;
			zero.x = iperlin.Noise(vector.y, vector.z, dirphase);
			zero.y = iperlin.Noise(vector.x, vector.z, dirphase);
			zero.z = iperlin.Noise(vector.x, vector.y, dirphase);
			dirval = Vector3.Scale(zero, dirscale);
		}
	}
}
