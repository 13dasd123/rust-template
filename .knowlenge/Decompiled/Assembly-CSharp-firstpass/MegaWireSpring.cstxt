using System;
using UnityEngine;

[Serializable]
public class MegaWireSpring
{
	public int p1;

	public int p2;

	public float restlen;

	public float initlen;

	public float ks;

	public float kd;

	public float len;

	public MegaWireSpring(int _p1, int _p2, float _ks, float _kd, MegaWireConnection con)
	{
		p1 = _p1;
		p2 = _p2;
		ks = _ks;
		kd = _kd;
		restlen = (con.masses[p1].pos - con.masses[p2].pos).magnitude;
		initlen = restlen;
	}

	public MegaWireSpring(int _p1, int _p2, float _ks, float _kd, MegaWireConnection con, float stretch)
	{
		p1 = _p1;
		p2 = _p2;
		ks = _ks;
		kd = _kd;
		restlen = (con.masses[p1].pos - con.masses[p2].pos).magnitude * stretch;
		initlen = restlen;
	}

	public void doCalculateSpringForce(MegaWireConnection hose)
	{
		Vector3 vector = hose.masses[p1].pos - hose.masses[p2].pos;
		float magnitude = vector.magnitude;
		float num = (magnitude - restlen) * ks;
		Vector3 lhs = hose.masses[p1].vel - hose.masses[p2].vel;
		float num2 = Vector3.Dot(lhs, vector) * kd / magnitude;
		Vector3 vector2 = vector * (1f / magnitude);
		vector2 *= 0f - (num + num2);
		hose.masses[p1].force.x += vector2.x;
		hose.masses[p1].force.y += vector2.y;
		hose.masses[p1].force.z += vector2.z;
		hose.masses[p2].force.x -= vector2.x;
		hose.masses[p2].force.y -= vector2.y;
		hose.masses[p2].force.z -= vector2.z;
	}

	public void doCalculateSpringForce1(MegaWireConnection mod)
	{
		Vector3 vector = default(Vector3);
		vector.x = mod.masses[p1].pos.x - mod.masses[p2].pos.x;
		vector.y = mod.masses[p1].pos.y - mod.masses[p2].pos.y;
		vector.z = mod.masses[p1].pos.z - mod.masses[p2].pos.z;
		if (vector.x != 0f || vector.y != 0f || vector.z != 0f)
		{
			float num = Mathf.Sqrt(vector.x * vector.x + vector.y * vector.y + vector.z * vector.z);
			float num2 = 1f / num;
			vector.x *= num2;
			vector.y *= num2;
			vector.z *= num2;
			float num3 = (0f - ks) * (num - restlen);
			Vector3 vector2 = default(Vector3);
			vector2.x = num3 * vector.x;
			vector2.y = num3 * vector.y;
			vector2.z = num3 * vector.z;
			mod.masses[p1].force.x += vector2.x;
			mod.masses[p1].force.y += vector2.y;
			mod.masses[p1].force.z += vector2.z;
			mod.masses[p2].force.x -= vector2.x;
			mod.masses[p2].force.y -= vector2.y;
			mod.masses[p2].force.z -= vector2.z;
			len = num;
		}
	}
}
