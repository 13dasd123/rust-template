using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[AddComponentMenu("Image Effects/Blur/Blur (Optimized)")]
public class BlurOptimized : PostEffectsBase, IImageEffect
{
	public enum BlurType
	{
		StandardGauss,
		SgxGauss
	}

	[Range(0f, 2f)]
	public int downsample = 1;

	[Range(0f, 10f)]
	public float blurSize = 3f;

	[Range(1f, 4f)]
	public int blurIterations = 2;

	public float fadeToBlurDistance;

	public BlurType blurType;

	public Shader blurShader;

	private Material blurMaterial;

	public override bool CheckResources()
	{
		CheckSupport(needDepth: false);
		blurMaterial = CheckShaderAndCreateMaterial(blurShader, blurMaterial);
		if (!isSupported)
		{
			ReportAutoDisable();
		}
		return isSupported;
	}

	public void OnDisable()
	{
		if (Object.op_Implicit((Object)(object)blurMaterial))
		{
			Object.DestroyImmediate((Object)(object)blurMaterial);
		}
	}

	public bool IsActive()
	{
		if (((Behaviour)this).enabled)
		{
			return CheckResources();
		}
		return false;
	}

	public void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0118: Unknown result type (might be due to invalid IL or missing references)
		//IL_014e: Unknown result type (might be due to invalid IL or missing references)
		if (!CheckResources())
		{
			Graphics.Blit((Texture)(object)source, destination);
			return;
		}
		float num = 1f / (1f * (float)(1 << downsample));
		float num2 = 1f / Mathf.Clamp(fadeToBlurDistance, 0.001f, 10000f);
		blurMaterial.SetVector("_Parameter", new Vector4(blurSize * num, (0f - blurSize) * num, num2, 0f));
		((Texture)source).filterMode = (FilterMode)1;
		int num3 = ((Texture)source).width >> downsample;
		int num4 = ((Texture)source).height >> downsample;
		RenderTexture val = RenderTexture.GetTemporary(num3, num4, 0, source.format);
		((Texture)val).filterMode = (FilterMode)1;
		Graphics.Blit((Texture)(object)source, val, blurMaterial, 0);
		int num5 = ((blurType != 0) ? 2 : 0);
		for (int i = 0; i < blurIterations; i++)
		{
			float num6 = (float)i * 1f;
			blurMaterial.SetVector("_Parameter", new Vector4(blurSize * num + num6, (0f - blurSize) * num - num6, num2, 0f));
			RenderTexture temporary = RenderTexture.GetTemporary(num3, num4, 0, source.format);
			((Texture)temporary).filterMode = (FilterMode)1;
			Graphics.Blit((Texture)(object)val, temporary, blurMaterial, 1 + num5);
			RenderTexture.ReleaseTemporary(val);
			val = temporary;
			temporary = RenderTexture.GetTemporary(num3, num4, 0, source.format);
			((Texture)temporary).filterMode = (FilterMode)1;
			Graphics.Blit((Texture)(object)val, temporary, blurMaterial, 2 + num5);
			RenderTexture.ReleaseTemporary(val);
			val = temporary;
		}
		if (fadeToBlurDistance <= 0f)
		{
			Graphics.Blit((Texture)(object)val, destination);
		}
		else
		{
			blurMaterial.SetTexture("_Source", (Texture)(object)source);
			Graphics.Blit((Texture)(object)val, destination, blurMaterial, 5);
		}
		RenderTexture.ReleaseTemporary(val);
	}
}
