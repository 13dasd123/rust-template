using System;
using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[RequireComponent(typeof(Camera))]
[AddComponentMenu("Image Effects/Camera/Camera Motion Blur")]
public class CameraMotionBlur : PostEffectsBase
{
	public enum MotionBlurFilter
	{
		CameraMotion,
		LocalBlur,
		Reconstruction,
		ReconstructionDX11,
		ReconstructionDisc
	}

	private static float MAX_RADIUS = 10f;

	public MotionBlurFilter filterType = MotionBlurFilter.Reconstruction;

	public bool preview;

	public Vector3 previewScale = Vector3.one;

	public float movementScale;

	public float rotationScale = 1f;

	public float maxVelocity = 8f;

	public float minVelocity = 0.1f;

	public float velocityScale = 0.375f;

	public float softZDistance = 0.005f;

	public int velocityDownsample = 1;

	public LayerMask excludeLayers = LayerMask.op_Implicit(0);

	private GameObject tmpCam;

	public Shader shader;

	public Shader dx11MotionBlurShader;

	public Shader replacementClear;

	private Material motionBlurMaterial;

	private Material dx11MotionBlurMaterial;

	public Texture2D noiseTexture;

	public float jitter = 0.05f;

	public bool showVelocity;

	public float showVelocityScale = 1f;

	private Matrix4x4 currentViewProjMat;

	private Matrix4x4 prevViewProjMat;

	private int prevFrameCount;

	private bool wasActive;

	private Vector3 prevFrameForward = Vector3.forward;

	private Vector3 prevFrameUp = Vector3.up;

	private Vector3 prevFramePos = Vector3.zero;

	private Camera _camera;

	private void CalculateViewProjection()
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		Matrix4x4 worldToCameraMatrix = _camera.worldToCameraMatrix;
		Matrix4x4 gPUProjectionMatrix = GL.GetGPUProjectionMatrix(_camera.projectionMatrix, true);
		currentViewProjMat = gPUProjectionMatrix * worldToCameraMatrix;
	}

	private new void Start()
	{
		CheckResources();
		if ((Object)(object)_camera == (Object)null)
		{
			_camera = ((Component)this).GetComponent<Camera>();
		}
		wasActive = ((Component)this).gameObject.activeInHierarchy;
		CalculateViewProjection();
		Remember();
		wasActive = false;
	}

	private void OnEnable()
	{
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)_camera == (Object)null)
		{
			_camera = ((Component)this).GetComponent<Camera>();
		}
		Camera obj = _camera;
		obj.depthTextureMode = (DepthTextureMode)(obj.depthTextureMode | 1);
	}

	private void OnDisable()
	{
		if ((Object)null != (Object)(object)motionBlurMaterial)
		{
			Object.DestroyImmediate((Object)(object)motionBlurMaterial);
			motionBlurMaterial = null;
		}
		if ((Object)null != (Object)(object)dx11MotionBlurMaterial)
		{
			Object.DestroyImmediate((Object)(object)dx11MotionBlurMaterial);
			dx11MotionBlurMaterial = null;
		}
		if ((Object)null != (Object)(object)tmpCam)
		{
			Object.DestroyImmediate((Object)(object)tmpCam);
			tmpCam = null;
		}
	}

	public override bool CheckResources()
	{
		CheckSupport(needDepth: true, needHdr: true);
		motionBlurMaterial = CheckShaderAndCreateMaterial(shader, motionBlurMaterial);
		if (supportDX11 && filterType == MotionBlurFilter.ReconstructionDX11)
		{
			dx11MotionBlurMaterial = CheckShaderAndCreateMaterial(dx11MotionBlurShader, dx11MotionBlurMaterial);
		}
		if (!isSupported)
		{
			ReportAutoDisable();
		}
		return isSupported;
	}

	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_0132: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0200: Unknown result type (might be due to invalid IL or missing references)
		//IL_0202: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02da: Unknown result type (might be due to invalid IL or missing references)
		//IL_02df: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0303: Unknown result type (might be due to invalid IL or missing references)
		//IL_0309: Unknown result type (might be due to invalid IL or missing references)
		//IL_030e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0311: Unknown result type (might be due to invalid IL or missing references)
		//IL_0313: Unknown result type (might be due to invalid IL or missing references)
		//IL_0315: Unknown result type (might be due to invalid IL or missing references)
		//IL_031a: Unknown result type (might be due to invalid IL or missing references)
		//IL_031c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0321: Unknown result type (might be due to invalid IL or missing references)
		//IL_0332: Unknown result type (might be due to invalid IL or missing references)
		//IL_0348: Unknown result type (might be due to invalid IL or missing references)
		//IL_034d: Unknown result type (might be due to invalid IL or missing references)
		//IL_034f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0364: Unknown result type (might be due to invalid IL or missing references)
		//IL_0369: Unknown result type (might be due to invalid IL or missing references)
		//IL_0371: Unknown result type (might be due to invalid IL or missing references)
		//IL_0376: Unknown result type (might be due to invalid IL or missing references)
		//IL_0383: Unknown result type (might be due to invalid IL or missing references)
		//IL_038e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0393: Unknown result type (might be due to invalid IL or missing references)
		//IL_0398: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0435: Unknown result type (might be due to invalid IL or missing references)
		//IL_043b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0593: Unknown result type (might be due to invalid IL or missing references)
		//IL_055f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0569: Unknown result type (might be due to invalid IL or missing references)
		//IL_0579: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_04dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0509: Unknown result type (might be due to invalid IL or missing references)
		//IL_050e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0600: Unknown result type (might be due to invalid IL or missing references)
		if (!CheckResources())
		{
			Graphics.Blit((Texture)(object)source, destination);
			return;
		}
		if (filterType == MotionBlurFilter.CameraMotion)
		{
			StartFrame();
		}
		RenderTextureFormat val = (RenderTextureFormat)(SystemInfo.SupportsRenderTextureFormat((RenderTextureFormat)13) ? 13 : 2);
		RenderTexture temporary = RenderTexture.GetTemporary(divRoundUp(((Texture)source).width, velocityDownsample), divRoundUp(((Texture)source).height, velocityDownsample), 0, val);
		int num = 1;
		int num2 = 1;
		maxVelocity = Mathf.Max(2f, maxVelocity);
		float num3 = maxVelocity;
		bool flag = filterType == MotionBlurFilter.ReconstructionDX11 && (Object)(object)dx11MotionBlurMaterial == (Object)null;
		if (filterType == MotionBlurFilter.Reconstruction || flag || filterType == MotionBlurFilter.ReconstructionDisc)
		{
			maxVelocity = Mathf.Min(maxVelocity, MAX_RADIUS);
			num = divRoundUp(((Texture)temporary).width, (int)maxVelocity);
			num2 = divRoundUp(((Texture)temporary).height, (int)maxVelocity);
			num3 = ((Texture)temporary).width / num;
		}
		else
		{
			num = divRoundUp(((Texture)temporary).width, (int)maxVelocity);
			num2 = divRoundUp(((Texture)temporary).height, (int)maxVelocity);
			num3 = ((Texture)temporary).width / num;
		}
		RenderTexture temporary2 = RenderTexture.GetTemporary(num, num2, 0, val);
		RenderTexture temporary3 = RenderTexture.GetTemporary(num, num2, 0, val);
		((Texture)temporary).filterMode = (FilterMode)0;
		((Texture)temporary2).filterMode = (FilterMode)0;
		((Texture)temporary3).filterMode = (FilterMode)0;
		if (Object.op_Implicit((Object)(object)noiseTexture))
		{
			((Texture)noiseTexture).filterMode = (FilterMode)0;
		}
		((Texture)source).wrapMode = (TextureWrapMode)1;
		((Texture)temporary).wrapMode = (TextureWrapMode)1;
		((Texture)temporary3).wrapMode = (TextureWrapMode)1;
		((Texture)temporary2).wrapMode = (TextureWrapMode)1;
		CalculateViewProjection();
		if (((Component)this).gameObject.activeInHierarchy && !wasActive)
		{
			Remember();
		}
		wasActive = ((Component)this).gameObject.activeInHierarchy;
		Matrix4x4 val2 = Matrix4x4.Inverse(currentViewProjMat);
		motionBlurMaterial.SetMatrix("_InvViewProj", val2);
		motionBlurMaterial.SetMatrix("_PrevViewProj", prevViewProjMat);
		motionBlurMaterial.SetMatrix("_ToPrevViewProjCombined", prevViewProjMat * val2);
		motionBlurMaterial.SetFloat("_MaxVelocity", num3);
		motionBlurMaterial.SetFloat("_MaxRadiusOrKInPaper", num3);
		motionBlurMaterial.SetFloat("_MinVelocity", minVelocity);
		motionBlurMaterial.SetFloat("_VelocityScale", velocityScale);
		motionBlurMaterial.SetFloat("_Jitter", jitter);
		motionBlurMaterial.SetTexture("_NoiseTex", (Texture)(object)noiseTexture);
		motionBlurMaterial.SetTexture("_VelTex", (Texture)(object)temporary);
		motionBlurMaterial.SetTexture("_NeighbourMaxTex", (Texture)(object)temporary3);
		motionBlurMaterial.SetTexture("_TileTexDebug", (Texture)(object)temporary2);
		if (preview)
		{
			Matrix4x4 worldToCameraMatrix = _camera.worldToCameraMatrix;
			Matrix4x4 identity = Matrix4x4.identity;
			((Matrix4x4)(ref identity)).SetTRS(previewScale * 0.3333f, Quaternion.identity, Vector3.one);
			Matrix4x4 gPUProjectionMatrix = GL.GetGPUProjectionMatrix(_camera.projectionMatrix, true);
			prevViewProjMat = gPUProjectionMatrix * identity * worldToCameraMatrix;
			motionBlurMaterial.SetMatrix("_PrevViewProj", prevViewProjMat);
			motionBlurMaterial.SetMatrix("_ToPrevViewProjCombined", prevViewProjMat * val2);
		}
		if (filterType == MotionBlurFilter.CameraMotion)
		{
			Vector4 zero = Vector4.zero;
			float num4 = Vector3.Dot(((Component)this).transform.up, Vector3.up);
			Vector3 val3 = prevFramePos - ((Component)this).transform.position;
			float magnitude = ((Vector3)(ref val3)).magnitude;
			float num5 = 1f;
			num5 = Vector3.Angle(((Component)this).transform.up, prevFrameUp) / _camera.fieldOfView * ((float)((Texture)source).width * 0.75f);
			zero.x = rotationScale * num5;
			num5 = Vector3.Angle(((Component)this).transform.forward, prevFrameForward) / _camera.fieldOfView * ((float)((Texture)source).width * 0.75f);
			zero.y = rotationScale * num4 * num5;
			num5 = Vector3.Angle(((Component)this).transform.forward, prevFrameForward) / _camera.fieldOfView * ((float)((Texture)source).width * 0.75f);
			zero.z = rotationScale * (1f - num4) * num5;
			if (magnitude > Mathf.Epsilon && movementScale > Mathf.Epsilon)
			{
				zero.w = movementScale * Vector3.Dot(((Component)this).transform.forward, val3) * ((float)((Texture)source).width * 0.5f);
				zero.x += movementScale * Vector3.Dot(((Component)this).transform.up, val3) * ((float)((Texture)source).width * 0.5f);
				zero.y += movementScale * Vector3.Dot(((Component)this).transform.right, val3) * ((float)((Texture)source).width * 0.5f);
			}
			if (preview)
			{
				motionBlurMaterial.SetVector("_BlurDirectionPacked", new Vector4(previewScale.y, previewScale.x, 0f, previewScale.z) * 0.5f * _camera.fieldOfView);
			}
			else
			{
				motionBlurMaterial.SetVector("_BlurDirectionPacked", zero);
			}
		}
		else
		{
			Graphics.Blit((Texture)(object)source, temporary, motionBlurMaterial, 0);
			Camera val4 = null;
			if (((LayerMask)(ref excludeLayers)).value != 0)
			{
				val4 = GetTmpCam();
			}
			if (Object.op_Implicit((Object)(object)val4) && ((LayerMask)(ref excludeLayers)).value != 0 && Object.op_Implicit((Object)(object)replacementClear) && replacementClear.isSupported)
			{
				val4.targetTexture = temporary;
				val4.cullingMask = LayerMask.op_Implicit(excludeLayers);
				val4.RenderWithShader(replacementClear, "");
			}
		}
		if (!preview && Time.frameCount != prevFrameCount)
		{
			prevFrameCount = Time.frameCount;
			Remember();
		}
		((Texture)source).filterMode = (FilterMode)1;
		if (showVelocity)
		{
			motionBlurMaterial.SetFloat("_DisplayVelocityScale", showVelocityScale);
			Graphics.Blit((Texture)(object)temporary, destination, motionBlurMaterial, 1);
		}
		else if (filterType == MotionBlurFilter.ReconstructionDX11 && !flag)
		{
			dx11MotionBlurMaterial.SetFloat("_MinVelocity", minVelocity);
			dx11MotionBlurMaterial.SetFloat("_VelocityScale", velocityScale);
			dx11MotionBlurMaterial.SetFloat("_Jitter", jitter);
			dx11MotionBlurMaterial.SetTexture("_NoiseTex", (Texture)(object)noiseTexture);
			dx11MotionBlurMaterial.SetTexture("_VelTex", (Texture)(object)temporary);
			dx11MotionBlurMaterial.SetTexture("_NeighbourMaxTex", (Texture)(object)temporary3);
			dx11MotionBlurMaterial.SetFloat("_SoftZDistance", Mathf.Max(0.00025f, softZDistance));
			dx11MotionBlurMaterial.SetFloat("_MaxRadiusOrKInPaper", num3);
			Graphics.Blit((Texture)(object)temporary, temporary2, dx11MotionBlurMaterial, 0);
			Graphics.Blit((Texture)(object)temporary2, temporary3, dx11MotionBlurMaterial, 1);
			Graphics.Blit((Texture)(object)source, destination, dx11MotionBlurMaterial, 2);
		}
		else if (filterType == MotionBlurFilter.Reconstruction || flag)
		{
			motionBlurMaterial.SetFloat("_SoftZDistance", Mathf.Max(0.00025f, softZDistance));
			Graphics.Blit((Texture)(object)temporary, temporary2, motionBlurMaterial, 2);
			Graphics.Blit((Texture)(object)temporary2, temporary3, motionBlurMaterial, 3);
			Graphics.Blit((Texture)(object)source, destination, motionBlurMaterial, 4);
		}
		else if (filterType == MotionBlurFilter.CameraMotion)
		{
			Graphics.Blit((Texture)(object)source, destination, motionBlurMaterial, 6);
		}
		else if (filterType == MotionBlurFilter.ReconstructionDisc)
		{
			motionBlurMaterial.SetFloat("_SoftZDistance", Mathf.Max(0.00025f, softZDistance));
			Graphics.Blit((Texture)(object)temporary, temporary2, motionBlurMaterial, 2);
			Graphics.Blit((Texture)(object)temporary2, temporary3, motionBlurMaterial, 3);
			Graphics.Blit((Texture)(object)source, destination, motionBlurMaterial, 7);
		}
		else
		{
			Graphics.Blit((Texture)(object)source, destination, motionBlurMaterial, 5);
		}
		RenderTexture.ReleaseTemporary(temporary);
		RenderTexture.ReleaseTemporary(temporary2);
		RenderTexture.ReleaseTemporary(temporary3);
	}

	private void Remember()
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		prevViewProjMat = currentViewProjMat;
		prevFrameForward = ((Component)this).transform.forward;
		prevFrameUp = ((Component)this).transform.up;
		prevFramePos = ((Component)this).transform.position;
	}

	private Camera GetTmpCam()
	{
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Expected O, but got Unknown
		if ((Object)(object)tmpCam == (Object)null)
		{
			string text = "_" + ((Object)_camera).name + "_MotionBlurTmpCam";
			GameObject val = GameObject.Find(text);
			if ((Object)null == (Object)(object)val)
			{
				tmpCam = new GameObject(text, new Type[1] { typeof(Camera) });
			}
			else
			{
				tmpCam = val;
			}
		}
		((Object)tmpCam).hideFlags = (HideFlags)52;
		tmpCam.transform.position = ((Component)_camera).transform.position;
		tmpCam.transform.rotation = ((Component)_camera).transform.rotation;
		tmpCam.transform.localScale = ((Component)_camera).transform.localScale;
		tmpCam.GetComponent<Camera>().CopyFrom(_camera);
		((Behaviour)tmpCam.GetComponent<Camera>()).enabled = false;
		tmpCam.GetComponent<Camera>().depthTextureMode = (DepthTextureMode)0;
		tmpCam.GetComponent<Camera>().clearFlags = (CameraClearFlags)4;
		return tmpCam.GetComponent<Camera>();
	}

	private void StartFrame()
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		prevFramePos = Vector3.Slerp(prevFramePos, ((Component)this).transform.position, 0.75f);
	}

	private static int divRoundUp(int x, int d)
	{
		return (x + d - 1) / d;
	}
}
