using Facepunch;
using Facepunch.Models;
using Steamworks;
using UnityEngine;

public class Integration : BaseIntegration
{
	private Auth _auth;

	private AuthTicket _steamTicket;

	public override string PublicKey => "j0VF6sNnzn9rwt9qTZtI02zTYK8PRdN1";

	public override string Bucket => "Server";

	public override string UserId
	{
		get
		{
			if (!SteamClient.IsValid)
			{
				return base.UserId;
			}
			return SteamClient.SteamId.ToString();
		}
	}

	public override string UserName
	{
		get
		{
			if (!SteamClient.IsValid)
			{
				return base.UserName;
			}
			return SteamClient.Name;
		}
	}

	public override Auth Auth
	{
		get
		{
			if (_auth == null && SteamClient.IsValid)
			{
				_steamTicket = SteamUser.GetAuthSessionTicket();
				_auth = Auth.Steam(_steamTicket.Data, SteamClient.SteamId, SteamClient.Name);
			}
			return _auth;
		}
	}

	public override void OnManifestFile(Facepunch.Models.Manifest manifest)
	{
		manifest.ExceptionReportingUrl = "https://83df169465e84da091c1a3cd2fbffeee:3671b903f9a840ecb68411cf946ab9b6@sentry.io/51080";
	}

	public override bool ShouldReportException(string message, string stackTrace, LogType type)
	{
		if (!base.ShouldReportException(message, stackTrace, type))
		{
			return false;
		}
		if (message.StartsWith("[EAC] "))
		{
			return false;
		}
		if (message.StartsWith("FMOD "))
		{
			return false;
		}
		if (message.StartsWith("<RI.Hid>"))
		{
			return false;
		}
		if (message.StartsWith("Platform does not support compute"))
		{
			return false;
		}
		if (message.StartsWith("Initializing Microsoft Media Foundation failed"))
		{
			return false;
		}
		if (message.StartsWith("Failed getting load state of FSB."))
		{
			return false;
		}
		if (message.StartsWith("Sound could not be played. FMOD Error"))
		{
			return false;
		}
		if (message.StartsWith("C:\\buildslave\\"))
		{
			return false;
		}
		if (message.StartsWith("Error: Cannot create FMOD::Sound instance"))
		{
			return false;
		}
		if (message.StartsWith("OutOfMemoryException"))
		{
			return false;
		}
		if (message.StartsWith("NotImplementedException"))
		{
			return false;
		}
		return true;
	}
}
