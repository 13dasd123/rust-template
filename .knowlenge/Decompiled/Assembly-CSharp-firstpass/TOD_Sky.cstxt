using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Xml;
using System.Xml.Serialization;
using UnityEngine;
using UnityEngine.Rendering;

[ExecuteInEditMode]
[RequireComponent(typeof(TOD_Resources))]
[RequireComponent(typeof(TOD_Components))]
public class TOD_Sky : MonoBehaviour
{
	public class ReflectionProbeState
	{
		public ReflectionProbe Probe;

		public GameObject ProbeInstance;

		public int ProbeRenderID = -1;

		public void InitializePrimary(Vector3 position, GameObject prefab)
		{
			//IL_009a: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
			//IL_0017: Unknown result type (might be due to invalid IL or missing references)
			//IL_0021: Expected O, but got Unknown
			//IL_003c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0068: Unknown result type (might be due to invalid IL or missing references)
			if (!Object.op_Implicit((Object)(object)ProbeInstance))
			{
				if (!Object.op_Implicit((Object)(object)prefab))
				{
					ProbeInstance = new GameObject();
					((Object)ProbeInstance).name = "Primary Reflection Probe";
					ProbeInstance.transform.position = position;
					Probe = ProbeInstance.AddComponent<ReflectionProbe>();
					Probe.size = new Vector3(float.MaxValue, float.MaxValue, float.MaxValue);
				}
				else
				{
					ProbeInstance = Object.Instantiate<GameObject>(prefab);
					((Object)ProbeInstance).name = "Primary Reflection Probe";
					ProbeInstance.transform.position = position;
					Probe = ProbeInstance.GetComponent<ReflectionProbe>();
					Probe.size = new Vector3(float.MaxValue, float.MaxValue, float.MaxValue);
				}
			}
		}

		public void InitializeSecondary(Vector3 position, GameObject prefab)
		{
			//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
			//IL_0017: Unknown result type (might be due to invalid IL or missing references)
			//IL_0021: Expected O, but got Unknown
			//IL_003c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0068: Unknown result type (might be due to invalid IL or missing references)
			if (!Object.op_Implicit((Object)(object)ProbeInstance))
			{
				if (!Object.op_Implicit((Object)(object)prefab))
				{
					ProbeInstance = new GameObject();
					((Object)ProbeInstance).name = "Secondary Reflection Probe";
					ProbeInstance.transform.position = position;
					Probe = ProbeInstance.AddComponent<ReflectionProbe>();
					Probe.size = new Vector3(0f, 0f, 0f);
					Probe.importance = 0;
				}
				else
				{
					ProbeInstance = Object.Instantiate<GameObject>(prefab);
					((Object)ProbeInstance).name = "Secondary Reflection Probe";
					ProbeInstance.transform.position = position;
					Probe = ProbeInstance.GetComponent<ReflectionProbe>();
					Probe.size = new Vector3(0f, 0f, 0f);
					Probe.importance = 0;
				}
			}
		}
	}

	private static List<TOD_Sky> instances = new List<TOD_Sky>();

	[Tooltip("Auto: Use the player settings.\nLinear: Force linear color space.\nGamma: Force gamma color space.")]
	public TOD_ColorSpaceType ColorSpace;

	[Tooltip("Auto: Use the camera settings.\nHDR: Force high dynamic range.\nLDR: Force low dynamic range.")]
	public TOD_ColorRangeType ColorRange;

	[Tooltip("Raw: Write color without modifications.\nDithered: Add dithering to reduce banding.")]
	public TOD_ColorOutputType ColorOutput = TOD_ColorOutputType.Dithered;

	[Tooltip("Per Vertex: Calculate sky color per vertex.\nPer Pixel: Calculate sky color per pixel.")]
	public TOD_SkyQualityType SkyQuality;

	[Tooltip("Low: Only recommended for very old mobile devices.\nMedium: Simplified cloud shading.\nHigh: Physically based cloud shading.")]
	public TOD_CloudQualityType CloudQuality = TOD_CloudQualityType.High;

	[Tooltip("Low: Only recommended for very old mobile devices.\nMedium: Simplified mesh geometry.\nHigh: Detailed mesh geometry.")]
	public TOD_MeshQualityType MeshQuality = TOD_MeshQualityType.High;

	[Tooltip("Low: Recommended for most mobile devices.\nMedium: Includes most visible stars.\nHigh: Includes all visible stars.")]
	public TOD_StarQualityType StarQuality = TOD_StarQualityType.High;

	public TOD_CycleParameters Cycle;

	public TOD_WorldParameters World;

	public TOD_AtmosphereParameters Atmosphere;

	public TOD_DayParameters Day;

	public TOD_NightParameters Night;

	public TOD_SunParameters Sun;

	public TOD_MoonParameters Moon;

	public TOD_StarParameters Stars;

	public TOD_CloudParameters Clouds;

	public TOD_LightParameters Light;

	public TOD_FogParameters Fog;

	public TOD_AmbientParameters Ambient;

	public TOD_ReflectionParameters Reflection;

	private ReflectionProbeState ReflectionCur = new ReflectionProbeState();

	private ReflectionProbeState ReflectionSrc = new ReflectionProbeState();

	private ReflectionProbeState ReflectionDst = new ReflectionProbeState();

	public static float ReflectionUpdateSpeed = 1f;

	public static int ReflectionResolution = 64;

	public static float ReflectionUpdateInterval = 1f;

	public static ReflectionProbeTimeSlicingMode ReflectionTimeSlicing = (ReflectionProbeTimeSlicingMode)1;

	private float timeSinceLightUpdate = float.MaxValue;

	private float timeSinceAmbientUpdate = float.MaxValue;

	private float timeSinceReflectionUpdate = float.MaxValue;

	private const int TOD_SAMPLES = 2;

	private Vector3 kBetaMie;

	private Vector4 kSun;

	private Vector4 k4PI;

	private Vector4 kRadius;

	private Vector4 kScale;

	private const float pi = (float)Math.PI;

	private const float tau = (float)Math.PI * 2f;

	public static List<TOD_Sky> Instances => instances;

	public static TOD_Sky Instance
	{
		get
		{
			if (instances.Count != 0)
			{
				return instances[instances.Count - 1];
			}
			return null;
		}
	}

	public bool Initialized { get; private set; }

	public bool Headless => Camera.allCamerasCount == 0;

	public TOD_Components Components { get; private set; }

	public TOD_Resources Resources { get; private set; }

	public bool IsDay { get; private set; }

	public bool IsNight { get; private set; }

	public float Radius => Components.DomeTransform.lossyScale.y;

	public float Diameter => Components.DomeTransform.lossyScale.y * 2f;

	public float LerpValue { get; private set; }

	public float SunZenith { get; private set; }

	public float SunAltitude { get; private set; }

	public float SunAzimuth { get; private set; }

	public float MoonZenith { get; private set; }

	public float MoonAltitude { get; private set; }

	public float MoonAzimuth { get; private set; }

	public float SunsetTime { get; private set; }

	public float SunriseTime { get; private set; }

	public float LocalSiderealTime { get; private set; }

	public float LightZenith => Mathf.Min(SunZenith, MoonZenith);

	public float LightIntensity
	{
		get
		{
			return Components.LightSource.intensity;
		}
		set
		{
			Components.LightSource.intensity = value;
		}
	}

	public float SunVisibility { get; private set; }

	public float MoonVisibility { get; private set; }

	public Vector3 SunDirection { get; private set; }

	public Vector3 MoonDirection { get; private set; }

	public Vector3 LightDirection { get; private set; }

	public Vector3 LocalSunDirection { get; private set; }

	public Vector3 LocalMoonDirection { get; private set; }

	public Vector3 LocalLightDirection { get; private set; }

	public Color SunLightColor { get; private set; }

	public Color MoonLightColor { get; private set; }

	public Color LightColor
	{
		get
		{
			//IL_000b: Unknown result type (might be due to invalid IL or missing references)
			return Components.LightSource.color;
		}
		set
		{
			//IL_000b: Unknown result type (might be due to invalid IL or missing references)
			Components.LightSource.color = value;
		}
	}

	public Color SunRayColor { get; set; }

	public Color MoonRayColor { get; set; }

	public Color SunSkyColor { get; private set; }

	public Color MoonSkyColor { get; private set; }

	public Color SunMeshColor { get; private set; }

	public Color MoonMeshColor { get; private set; }

	public Color SunCloudColor { get; private set; }

	public Color MoonCloudColor { get; private set; }

	public Color FogColor { get; private set; }

	public Color GroundColor { get; private set; }

	public Color AmbientColor { get; private set; }

	public Color MoonHaloColor { get; private set; }

	public ReflectionProbe Probe => ReflectionCur.Probe;

	public GameObject ProbeInstance => ReflectionCur.ProbeInstance;

	public Vector3 OrbitalToUnity(float radius, float theta, float phi)
	{
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		float num = Mathf.Sin(theta);
		float num2 = Mathf.Cos(theta);
		float num3 = Mathf.Sin(phi);
		float num4 = Mathf.Cos(phi);
		Vector3 result = default(Vector3);
		result.z = radius * num * num4;
		result.y = radius * num2;
		result.x = radius * num * num3;
		return result;
	}

	public Vector3 OrbitalToLocal(float theta, float phi)
	{
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		float num = Mathf.Sin(theta);
		float y = Mathf.Cos(theta);
		float num2 = Mathf.Sin(phi);
		float num3 = Mathf.Cos(phi);
		Vector3 result = default(Vector3);
		result.z = num * num3;
		result.y = y;
		result.x = num * num2;
		return result;
	}

	public Color SampleAtmosphere(Vector3 direction, bool directLight = true)
	{
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		Vector3 dir = Components.DomeTransform.InverseTransformDirection(direction);
		Color color = ShaderScatteringColor(dir, directLight);
		color = TOD_HDR2LDR(color);
		return TOD_LINEAR2GAMMA(color);
	}

	public SphericalHarmonicsL2 RenderToSphericalHarmonics()
	{
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		float saturation = Ambient.Saturation;
		float intensity = Mathf.Lerp(Night.AmbientMultiplier, Day.AmbientMultiplier, LerpValue);
		return RenderToSphericalHarmonics(intensity, saturation);
	}

	public SphericalHarmonicsL2 RenderToSphericalHarmonics(float intensity, float saturation)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		//IL_008d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0091: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Unknown result type (might be due to invalid IL or missing references)
		//IL_010f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_012b: Unknown result type (might be due to invalid IL or missing references)
		//IL_012d: Unknown result type (might be due to invalid IL or missing references)
		//IL_013b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0141: Unknown result type (might be due to invalid IL or missing references)
		//IL_0147: Unknown result type (might be due to invalid IL or missing references)
		//IL_0153: Unknown result type (might be due to invalid IL or missing references)
		//IL_0156: Unknown result type (might be due to invalid IL or missing references)
		//IL_015b: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0166: Unknown result type (might be due to invalid IL or missing references)
		//IL_016b: Unknown result type (might be due to invalid IL or missing references)
		//IL_016f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0171: Unknown result type (might be due to invalid IL or missing references)
		//IL_017d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0182: Unknown result type (might be due to invalid IL or missing references)
		//IL_0185: Unknown result type (might be due to invalid IL or missing references)
		//IL_0188: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0191: Unknown result type (might be due to invalid IL or missing references)
		//IL_0198: Unknown result type (might be due to invalid IL or missing references)
		//IL_019d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01af: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0201: Unknown result type (might be due to invalid IL or missing references)
		//IL_0205: Unknown result type (might be due to invalid IL or missing references)
		//IL_0207: Unknown result type (might be due to invalid IL or missing references)
		//IL_0213: Unknown result type (might be due to invalid IL or missing references)
		//IL_0218: Unknown result type (might be due to invalid IL or missing references)
		//IL_021b: Unknown result type (might be due to invalid IL or missing references)
		//IL_021e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0223: Unknown result type (might be due to invalid IL or missing references)
		//IL_0227: Unknown result type (might be due to invalid IL or missing references)
		//IL_022e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0233: Unknown result type (might be due to invalid IL or missing references)
		//IL_0237: Unknown result type (might be due to invalid IL or missing references)
		//IL_0239: Unknown result type (might be due to invalid IL or missing references)
		//IL_0247: Unknown result type (might be due to invalid IL or missing references)
		//IL_024e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0255: Unknown result type (might be due to invalid IL or missing references)
		//IL_0263: Unknown result type (might be due to invalid IL or missing references)
		//IL_0265: Unknown result type (might be due to invalid IL or missing references)
		//IL_0272: Unknown result type (might be due to invalid IL or missing references)
		//IL_0278: Unknown result type (might be due to invalid IL or missing references)
		//IL_027f: Unknown result type (might be due to invalid IL or missing references)
		//IL_028d: Unknown result type (might be due to invalid IL or missing references)
		//IL_028f: Unknown result type (might be due to invalid IL or missing references)
		//IL_029c: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0303: Unknown result type (might be due to invalid IL or missing references)
		SphericalHarmonicsL2 result = default(SphericalHarmonicsL2);
		bool directLight = false;
		Color val = AmbientColor;
		Color val2 = TOD_Util.AdjustRGB(((Color)(ref val)).linear, intensity, saturation);
		Vector3 val3 = default(Vector3);
		((Vector3)(ref val3))..ctor(0.61237246f, 0.5f, 0.61237246f);
		Vector3 up = Vector3.up;
		val = SampleAtmosphere(up, directLight);
		Color val4 = TOD_Util.AdjustRGB(((Color)(ref val)).linear, intensity, saturation);
		((SphericalHarmonicsL2)(ref result)).AddDirectionalLight(up, val4, 0.42857143f);
		Vector3 val5 = default(Vector3);
		((Vector3)(ref val5))..ctor(0f - val3.x, val3.y, 0f - val3.z);
		val = SampleAtmosphere(val5, directLight);
		Color val6 = TOD_Util.AdjustRGB(((Color)(ref val)).linear, intensity, saturation);
		((SphericalHarmonicsL2)(ref result)).AddDirectionalLight(val5, val6, 0.2857143f);
		Vector3 val7 = default(Vector3);
		((Vector3)(ref val7))..ctor(val3.x, val3.y, 0f - val3.z);
		val = SampleAtmosphere(val7, directLight);
		Color val8 = TOD_Util.AdjustRGB(((Color)(ref val)).linear, intensity, saturation);
		((SphericalHarmonicsL2)(ref result)).AddDirectionalLight(val7, val8, 0.2857143f);
		Vector3 val9 = default(Vector3);
		((Vector3)(ref val9))..ctor(0f - val3.x, val3.y, val3.z);
		val = SampleAtmosphere(val9, directLight);
		Color val10 = TOD_Util.AdjustRGB(((Color)(ref val)).linear, intensity, saturation);
		((SphericalHarmonicsL2)(ref result)).AddDirectionalLight(val9, val10, 0.2857143f);
		Vector3 val11 = default(Vector3);
		((Vector3)(ref val11))..ctor(val3.x, val3.y, val3.z);
		val = SampleAtmosphere(val11, directLight);
		Color val12 = TOD_Util.AdjustRGB(((Color)(ref val)).linear, intensity, saturation);
		((SphericalHarmonicsL2)(ref result)).AddDirectionalLight(val11, val12, 0.2857143f);
		Vector3 left = Vector3.left;
		val = SampleAtmosphere(left, directLight);
		Color val13 = TOD_Util.AdjustRGB(((Color)(ref val)).linear, intensity, saturation);
		((SphericalHarmonicsL2)(ref result)).AddDirectionalLight(left, val13, 1f / 7f);
		Vector3 right = Vector3.right;
		val = SampleAtmosphere(right, directLight);
		Color val14 = TOD_Util.AdjustRGB(((Color)(ref val)).linear, intensity, saturation);
		((SphericalHarmonicsL2)(ref result)).AddDirectionalLight(right, val14, 1f / 7f);
		Vector3 back = Vector3.back;
		val = SampleAtmosphere(back, directLight);
		Color val15 = TOD_Util.AdjustRGB(((Color)(ref val)).linear, intensity, saturation);
		((SphericalHarmonicsL2)(ref result)).AddDirectionalLight(back, val15, 1f / 7f);
		Vector3 forward = Vector3.forward;
		val = SampleAtmosphere(forward, directLight);
		Color val16 = TOD_Util.AdjustRGB(((Color)(ref val)).linear, intensity, saturation);
		((SphericalHarmonicsL2)(ref result)).AddDirectionalLight(forward, val16, 1f / 7f);
		Vector3 val17 = default(Vector3);
		((Vector3)(ref val17))..ctor(0f - val3.x, 0f - val3.y, 0f - val3.z);
		((SphericalHarmonicsL2)(ref result)).AddDirectionalLight(val17, val2, 0.2857143f);
		Vector3 val18 = default(Vector3);
		((Vector3)(ref val18))..ctor(val3.x, 0f - val3.y, 0f - val3.z);
		((SphericalHarmonicsL2)(ref result)).AddDirectionalLight(val18, val2, 0.2857143f);
		Vector3 val19 = default(Vector3);
		((Vector3)(ref val19))..ctor(0f - val3.x, 0f - val3.y, val3.z);
		((SphericalHarmonicsL2)(ref result)).AddDirectionalLight(val19, val2, 0.2857143f);
		Vector3 val20 = default(Vector3);
		((Vector3)(ref val20))..ctor(val3.x, 0f - val3.y, val3.z);
		((SphericalHarmonicsL2)(ref result)).AddDirectionalLight(val20, val2, 0.2857143f);
		Vector3 down = Vector3.down;
		((SphericalHarmonicsL2)(ref result)).AddDirectionalLight(down, val2, 0.42857143f);
		return result;
	}

	public void RenderToCubemap(RenderTexture targetTexture = null)
	{
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		ReflectionCur.InitializePrimary(Components.DomeTransform.position, Reflection.ProbePrefab);
		if (ReflectionCur.ProbeRenderID < 0 || ReflectionCur.Probe.IsFinishedRendering(ReflectionCur.ProbeRenderID))
		{
			UpdateProbeProperties(ReflectionCur.Probe);
			ReflectionCur.ProbeRenderID = ReflectionCur.Probe.RenderProbe(targetTexture);
		}
		else
		{
			UpdateProbeProperties(ReflectionCur.Probe);
		}
	}

	public void RenderToProbe()
	{
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		ReflectionCur.InitializePrimary(Components.DomeTransform.position, Reflection.ProbePrefab);
		if (ReflectionCur.ProbeRenderID < 0 || ReflectionUpdateInterval == 0f)
		{
			UpdateProbeProperties(ReflectionCur.Probe);
			ReflectionCur.ProbeRenderID = ReflectionCur.Probe.RenderProbe();
		}
		else if (ReflectionDst.ProbeRenderID < 0 || ReflectionDst.Probe.IsFinishedRendering(ReflectionDst.ProbeRenderID))
		{
			ReflectionSrc.InitializeSecondary(Components.DomeTransform.position, Reflection.ProbePrefab);
			ReflectionDst.InitializeSecondary(Components.DomeTransform.position, Reflection.ProbePrefab);
			UpdateProbeProperties(ReflectionCur.Probe);
			UpdateProbeProperties(ReflectionSrc.Probe);
			UpdateProbeProperties(ReflectionDst.Probe);
			TOD_Util.Swap(ref ReflectionSrc, ref ReflectionDst);
			ReflectionDst.ProbeRenderID = ReflectionDst.Probe.RenderProbe();
		}
	}

	public bool ReflectionIsUpdating()
	{
		if (ReflectionDst.ProbeRenderID > 0)
		{
			return !ReflectionDst.Probe.IsFinishedRendering(ReflectionDst.ProbeRenderID);
		}
		return false;
	}

	private void UpdateProbeBlending(float lerp)
	{
		if (ReflectionCur.ProbeRenderID >= 0 && ReflectionSrc.ProbeRenderID >= 0 && ReflectionDst.ProbeRenderID >= 0)
		{
			ReflectionProbe.BlendCubemap((Texture)(object)ReflectionSrc.Probe.realtimeTexture, (Texture)(object)ReflectionDst.Probe.realtimeTexture, lerp, ReflectionCur.Probe.realtimeTexture);
		}
	}

	private void UpdateProbeProperties(ReflectionProbe probe)
	{
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		probe.mode = (ReflectionProbeMode)1;
		((Component)probe).transform.position = Components.DomeTransform.position;
		probe.intensity = RenderSettings.reflectionIntensity;
		probe.clearFlags = Reflection.ClearFlags;
		probe.cullingMask = LayerMask.op_Implicit(Reflection.CullingMask);
		probe.refreshMode = (ReflectionProbeRefreshMode)2;
		probe.timeSlicingMode = ReflectionTimeSlicing;
		probe.resolution = Mathf.ClosestPowerOfTwo(ReflectionResolution);
		if ((Object)(object)Components.Camera != (Object)null)
		{
			probe.backgroundColor = Components.Camera.BackgroundColor;
			if (!Object.op_Implicit((Object)(object)Reflection.ProbePrefab))
			{
				probe.nearClipPlane = Components.Camera.NearClipPlane;
				probe.farClipPlane = Components.Camera.FarClipPlane;
			}
		}
	}

	public Color SampleFogColor(bool directLight = true)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = Vector3.forward;
		if ((Object)(object)Components.Camera != (Object)null)
		{
			Quaternion rotation = ((Component)Components.Camera).transform.rotation;
			val = Quaternion.Euler(0f, ((Quaternion)(ref rotation)).eulerAngles.y, 0f) * val;
		}
		Vector3 val2 = Vector3.Lerp(val, Vector3.up, Fog.HeightBias);
		Color val3 = SampleAtmosphere(((Vector3)(ref val2)).normalized, directLight);
		return new Color(val3.r, val3.g, val3.b, 1f);
	}

	public Color SampleSkyColor()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		Vector3 sunDirection = SunDirection;
		sunDirection.y = Mathf.Abs(sunDirection.y);
		Color val = SampleAtmosphere(((Vector3)(ref sunDirection)).normalized, directLight: false);
		return new Color(val.r, val.g, val.b, 1f);
	}

	public Color SampleEquatorColor()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		Vector3 sunDirection = SunDirection;
		sunDirection.y = 0f;
		Color val = SampleAtmosphere(((Vector3)(ref sunDirection)).normalized, directLight: false);
		return new Color(val.r, val.g, val.b, 1f);
	}

	public void UpdateFog()
	{
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		switch (Fog.Mode)
		{
		case TOD_FogType.Atmosphere:
			RenderSettings.fogColor = SampleFogColor(directLight: false);
			break;
		case TOD_FogType.Directional:
			RenderSettings.fogColor = SampleFogColor();
			break;
		case TOD_FogType.Gradient:
			RenderSettings.fogColor = FogColor;
			break;
		case TOD_FogType.None:
			break;
		}
	}

	public void UpdateAmbient()
	{
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		float saturation = Ambient.Saturation;
		float num = Mathf.Lerp(Night.AmbientMultiplier, Day.AmbientMultiplier, LerpValue);
		switch (Ambient.Mode)
		{
		case TOD_AmbientType.Color:
		{
			Color ambientLight2 = TOD_Util.AdjustRGB(AmbientColor, num, saturation);
			RenderSettings.ambientMode = (AmbientMode)3;
			RenderSettings.ambientLight = ambientLight2;
			RenderSettings.ambientIntensity = num;
			break;
		}
		case TOD_AmbientType.Gradient:
		{
			Color ambientGroundColor = TOD_Util.AdjustRGB(AmbientColor, num, saturation);
			Color ambientEquatorColor = TOD_Util.AdjustRGB(SampleEquatorColor(), num, saturation);
			Color ambientSkyColor = TOD_Util.AdjustRGB(SampleSkyColor(), num, saturation);
			RenderSettings.ambientMode = (AmbientMode)1;
			RenderSettings.ambientSkyColor = ambientSkyColor;
			RenderSettings.ambientEquatorColor = ambientEquatorColor;
			RenderSettings.ambientGroundColor = ambientGroundColor;
			RenderSettings.ambientIntensity = num;
			break;
		}
		case TOD_AmbientType.Spherical:
		{
			Color ambientLight = TOD_Util.AdjustRGB(AmbientColor, num, saturation);
			RenderSettings.ambientMode = (AmbientMode)0;
			RenderSettings.ambientLight = ambientLight;
			RenderSettings.ambientIntensity = num;
			RenderSettings.ambientProbe = RenderToSphericalHarmonics(num, saturation);
			break;
		}
		}
	}

	public void UpdateReflection()
	{
		if (Reflection.Mode == TOD_ReflectionType.Cubemap)
		{
			float reflectionIntensity = Mathf.Lerp(Night.ReflectionMultiplier, Day.ReflectionMultiplier, LerpValue);
			RenderSettings.defaultReflectionMode = (DefaultReflectionMode)0;
			RenderSettings.reflectionIntensity = reflectionIntensity;
			if (Application.isPlaying)
			{
				RenderToProbe();
			}
		}
	}

	public void DelayReflectionUpdate()
	{
		timeSinceReflectionUpdate = 0f;
	}

	public void LoadParameters(string xml)
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Expected O, but got Unknown
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		using StringReader stringReader = new StringReader(xml);
		XmlTextReader val = new XmlTextReader((TextReader)stringReader);
		try
		{
			(new XmlSerializer(typeof(TOD_Parameters)).Deserialize((XmlReader)(object)val) as TOD_Parameters).ToSky(this);
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public string SaveParameters()
	{
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Expected O, but got Unknown
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		StringBuilder stringBuilder = new StringBuilder();
		using (StringWriter stringWriter = new StringWriter(stringBuilder))
		{
			XmlTextWriter val = new XmlTextWriter((TextWriter)stringWriter);
			try
			{
				val.Formatting = (Formatting)1;
				XmlSerializer val2 = new XmlSerializer(typeof(TOD_Parameters));
				TOD_Parameters tOD_Parameters = new TOD_Parameters(this);
				val2.Serialize((XmlWriter)(object)val, (object)tOD_Parameters);
			}
			finally
			{
				((IDisposable)val)?.Dispose();
			}
		}
		return stringBuilder.ToString();
	}

	public void SetClouds(bool state)
	{
		Components.Billboards.SetActive(state);
	}

	private void UpdateQualitySettings()
	{
		if (!Headless)
		{
			Mesh val = null;
			Mesh val2 = null;
			Mesh val3 = null;
			Mesh val4 = null;
			Mesh val5 = null;
			Mesh val6 = null;
			switch (MeshQuality)
			{
			case TOD_MeshQualityType.Low:
				val = Resources.SkyLOD2;
				val2 = Resources.SkyLOD2;
				val3 = Resources.SkyLOD2;
				val4 = Resources.CloudsLOD2;
				val5 = Resources.MoonLOD2;
				break;
			case TOD_MeshQualityType.Medium:
				val = Resources.SkyLOD1;
				val2 = Resources.SkyLOD1;
				val3 = Resources.SkyLOD2;
				val4 = Resources.CloudsLOD1;
				val5 = Resources.MoonLOD1;
				break;
			case TOD_MeshQualityType.High:
				val = Resources.SkyLOD0;
				val2 = Resources.SkyLOD0;
				val3 = Resources.SkyLOD2;
				val4 = Resources.CloudsLOD0;
				val5 = Resources.MoonLOD0;
				break;
			}
			switch (StarQuality)
			{
			case TOD_StarQualityType.Low:
				val6 = Resources.StarsLOD2;
				break;
			case TOD_StarQualityType.Medium:
				val6 = Resources.StarsLOD1;
				break;
			case TOD_StarQualityType.High:
				val6 = Resources.StarsLOD0;
				break;
			}
			if (Object.op_Implicit((Object)(object)Components.SpaceMeshFilter) && (Object)(object)Components.SpaceMeshFilter.sharedMesh != (Object)(object)val)
			{
				Components.SpaceMeshFilter.mesh = val;
			}
			if (Object.op_Implicit((Object)(object)Components.MoonMeshFilter) && (Object)(object)Components.MoonMeshFilter.sharedMesh != (Object)(object)val5)
			{
				Components.MoonMeshFilter.mesh = val5;
			}
			if (Object.op_Implicit((Object)(object)Components.AtmosphereMeshFilter) && (Object)(object)Components.AtmosphereMeshFilter.sharedMesh != (Object)(object)val2)
			{
				Components.AtmosphereMeshFilter.mesh = val2;
			}
			if (Object.op_Implicit((Object)(object)Components.ClearMeshFilter) && (Object)(object)Components.ClearMeshFilter.sharedMesh != (Object)(object)val3)
			{
				Components.ClearMeshFilter.mesh = val3;
			}
			if (Object.op_Implicit((Object)(object)Components.CloudMeshFilter) && (Object)(object)Components.CloudMeshFilter.sharedMesh != (Object)(object)val4)
			{
				Components.CloudMeshFilter.mesh = val4;
			}
			if (Object.op_Implicit((Object)(object)Components.StarMeshFilter) && (Object)(object)Components.StarMeshFilter.sharedMesh != (Object)(object)val6)
			{
				Components.StarMeshFilter.mesh = val6;
			}
		}
	}

	private void UpdateRenderSettings()
	{
		if (Headless)
		{
			return;
		}
		UpdateFog();
		if (!Application.isPlaying || timeSinceAmbientUpdate >= Ambient.UpdateInterval)
		{
			timeSinceAmbientUpdate = 0f;
			UpdateAmbient();
		}
		else
		{
			timeSinceAmbientUpdate += Time.deltaTime;
		}
		if (!Application.isPlaying || timeSinceReflectionUpdate >= ReflectionUpdateInterval)
		{
			timeSinceReflectionUpdate = 0f;
			UpdateReflection();
		}
		else if (!ReflectionIsUpdating())
		{
			timeSinceReflectionUpdate += Time.deltaTime * ReflectionUpdateSpeed;
			if (Application.isPlaying)
			{
				UpdateProbeBlending((ReflectionUpdateInterval > 0f) ? (timeSinceReflectionUpdate / ReflectionUpdateInterval) : 1f);
			}
		}
	}

	private void UpdateShaderKeywords()
	{
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Invalid comparison between Unknown and I4
		if (Headless)
		{
			return;
		}
		switch (ColorSpace)
		{
		case TOD_ColorSpaceType.Auto:
			if ((int)QualitySettings.activeColorSpace == 1)
			{
				Shader.EnableKeyword("TOD_OUTPUT_LINEAR");
			}
			else
			{
				Shader.DisableKeyword("TOD_OUTPUT_LINEAR");
			}
			break;
		case TOD_ColorSpaceType.Linear:
			Shader.EnableKeyword("TOD_OUTPUT_LINEAR");
			break;
		case TOD_ColorSpaceType.Gamma:
			Shader.DisableKeyword("TOD_OUTPUT_LINEAR");
			break;
		}
		switch (ColorRange)
		{
		case TOD_ColorRangeType.Auto:
			if (Object.op_Implicit((Object)(object)Components.Camera) && Components.Camera.HDR)
			{
				Shader.EnableKeyword("TOD_OUTPUT_HDR");
			}
			else
			{
				Shader.DisableKeyword("TOD_OUTPUT_HDR");
			}
			break;
		case TOD_ColorRangeType.HDR:
			Shader.EnableKeyword("TOD_OUTPUT_HDR");
			break;
		case TOD_ColorRangeType.LDR:
			Shader.DisableKeyword("TOD_OUTPUT_HDR");
			break;
		}
		switch (ColorOutput)
		{
		case TOD_ColorOutputType.Raw:
			Shader.DisableKeyword("TOD_OUTPUT_DITHERING");
			break;
		case TOD_ColorOutputType.Dithered:
			Shader.EnableKeyword("TOD_OUTPUT_DITHERING");
			break;
		}
		switch (SkyQuality)
		{
		case TOD_SkyQualityType.PerVertex:
			Shader.DisableKeyword("TOD_SCATTERING_PER_PIXEL");
			break;
		case TOD_SkyQualityType.PerPixel:
			Shader.EnableKeyword("TOD_SCATTERING_PER_PIXEL");
			break;
		}
		switch (CloudQuality)
		{
		case TOD_CloudQualityType.Low:
			Shader.DisableKeyword("TOD_CLOUDS_DENSITY");
			Shader.DisableKeyword("TOD_CLOUDS_BUMPED");
			break;
		case TOD_CloudQualityType.Medium:
			Shader.EnableKeyword("TOD_CLOUDS_DENSITY");
			Shader.DisableKeyword("TOD_CLOUDS_BUMPED");
			break;
		case TOD_CloudQualityType.High:
			Shader.EnableKeyword("TOD_CLOUDS_DENSITY");
			Shader.EnableKeyword("TOD_CLOUDS_BUMPED");
			break;
		}
	}

	private void UpdateShaderProperties()
	{
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_00af: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00db: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		//IL_010c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_013d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_0158: Unknown result type (might be due to invalid IL or missing references)
		//IL_015d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0173: Unknown result type (might be due to invalid IL or missing references)
		//IL_0178: Unknown result type (might be due to invalid IL or missing references)
		//IL_018e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0193: Unknown result type (might be due to invalid IL or missing references)
		//IL_0236: Unknown result type (might be due to invalid IL or missing references)
		//IL_0389: Unknown result type (might be due to invalid IL or missing references)
		//IL_038e: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_03f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_03fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0524: Unknown result type (might be due to invalid IL or missing references)
		//IL_0529: Unknown result type (might be due to invalid IL or missing references)
		//IL_053f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0555: Unknown result type (might be due to invalid IL or missing references)
		//IL_056b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0581: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c1: Unknown result type (might be due to invalid IL or missing references)
		if (!Headless)
		{
			Shader.SetGlobalColor(Resources.ID_SunLightColor, SunLightColor);
			Shader.SetGlobalColor(Resources.ID_MoonLightColor, MoonLightColor);
			Shader.SetGlobalColor(Resources.ID_SunSkyColor, SunSkyColor);
			Shader.SetGlobalColor(Resources.ID_MoonSkyColor, MoonSkyColor);
			Shader.SetGlobalColor(Resources.ID_SunMeshColor, SunMeshColor);
			Shader.SetGlobalColor(Resources.ID_MoonMeshColor, MoonMeshColor);
			Shader.SetGlobalColor(Resources.ID_SunCloudColor, SunCloudColor);
			Shader.SetGlobalColor(Resources.ID_MoonCloudColor, MoonCloudColor);
			Shader.SetGlobalColor(Resources.ID_FogColor, FogColor);
			Shader.SetGlobalColor(Resources.ID_GroundColor, GroundColor);
			Shader.SetGlobalColor(Resources.ID_AmbientColor, AmbientColor);
			Shader.SetGlobalVector(Resources.ID_SunDirection, Vector4.op_Implicit(SunDirection));
			Shader.SetGlobalVector(Resources.ID_MoonDirection, Vector4.op_Implicit(MoonDirection));
			Shader.SetGlobalVector(Resources.ID_LightDirection, Vector4.op_Implicit(LightDirection));
			Shader.SetGlobalVector(Resources.ID_LocalSunDirection, Vector4.op_Implicit(LocalSunDirection));
			Shader.SetGlobalVector(Resources.ID_LocalMoonDirection, Vector4.op_Implicit(LocalMoonDirection));
			Shader.SetGlobalVector(Resources.ID_LocalLightDirection, Vector4.op_Implicit(LocalLightDirection));
			Shader.SetGlobalFloat(Resources.ID_Contrast, Atmosphere.Contrast);
			Shader.SetGlobalFloat(Resources.ID_Brightness, Atmosphere.Brightness);
			Shader.SetGlobalFloat(Resources.ID_Fogginess, Atmosphere.Fogginess);
			Shader.SetGlobalFloat(Resources.ID_Directionality, Atmosphere.Directionality);
			Shader.SetGlobalFloat(Resources.ID_MoonHaloPower, 1f / Moon.HaloSize);
			Shader.SetGlobalColor(Resources.ID_MoonHaloColor, MoonHaloColor);
			float num = Mathf.Lerp(0.8f, 0f, Clouds.Coverage);
			float num2 = Mathf.Lerp(3f, 9f, Clouds.Sharpness);
			float num3 = Mathf.Lerp(0f, 1f, Clouds.Attenuation);
			float num4 = Mathf.Lerp(0f, 2f, Clouds.Saturation);
			Shader.SetGlobalFloat(Resources.ID_CloudOpacity, Clouds.Opacity);
			Shader.SetGlobalFloat(Resources.ID_CloudCoverage, num);
			Shader.SetGlobalFloat(Resources.ID_CloudSharpness, 1f / num2);
			Shader.SetGlobalFloat(Resources.ID_CloudDensity, num2);
			Shader.SetGlobalFloat(Resources.ID_CloudColoring, Clouds.Coloring);
			Shader.SetGlobalFloat(Resources.ID_CloudAttenuation, num3);
			Shader.SetGlobalFloat(Resources.ID_CloudSaturation, num4);
			Shader.SetGlobalFloat(Resources.ID_CloudScattering, Clouds.Scattering);
			Shader.SetGlobalFloat(Resources.ID_CloudBrightness, Clouds.Brightness);
			Shader.SetGlobalVector(Resources.ID_CloudOffset, Vector4.op_Implicit(Components.Animation.OffsetUV));
			Shader.SetGlobalVector(Resources.ID_CloudWind, Vector4.op_Implicit(Components.Animation.CloudUV));
			Shader.SetGlobalVector(Resources.ID_CloudSize, Vector4.op_Implicit(new Vector3(Clouds.Size * 4f, Clouds.Size, Clouds.Size * 4f)));
			Shader.SetGlobalFloat(Resources.ID_StarSize, Stars.Size);
			Shader.SetGlobalFloat(Resources.ID_StarBrightness, Stars.Brightness);
			Shader.SetGlobalFloat(Resources.ID_StarVisibility, (1f - Atmosphere.Fogginess) * (1f - LerpValue));
			Shader.SetGlobalFloat(Resources.ID_SunMeshContrast, 1f / Mathf.Max(0.001f, Sun.MeshContrast));
			Shader.SetGlobalFloat(Resources.ID_SunMeshBrightness, Sun.MeshBrightness * (1f - Atmosphere.Fogginess));
			Shader.SetGlobalFloat(Resources.ID_MoonMeshContrast, 1f / Mathf.Max(0.001f, Moon.MeshContrast));
			Shader.SetGlobalFloat(Resources.ID_MoonMeshBrightness, Moon.MeshBrightness * (1f - Atmosphere.Fogginess));
			Shader.SetGlobalVector(Resources.ID_kBetaMie, Vector4.op_Implicit(kBetaMie));
			Shader.SetGlobalVector(Resources.ID_kSun, kSun);
			Shader.SetGlobalVector(Resources.ID_k4PI, k4PI);
			Shader.SetGlobalVector(Resources.ID_kRadius, kRadius);
			Shader.SetGlobalVector(Resources.ID_kScale, kScale);
			Shader.SetGlobalMatrix(Resources.ID_World2Sky, Components.DomeTransform.worldToLocalMatrix);
			Shader.SetGlobalMatrix(Resources.ID_Sky2World, Components.DomeTransform.localToWorldMatrix);
		}
	}

	private float ShaderScale(float inCos)
	{
		float num = 1f - inCos;
		return 0.25f * Mathf.Exp(-0.00287f + num * (0.459f + num * (3.83f + num * (-6.8f + num * 5.25f))));
	}

	private float ShaderMiePhase(float eyeCos, float eyeCos2)
	{
		return kBetaMie.x * (1f + eyeCos2) / Mathf.Pow(kBetaMie.y + kBetaMie.z * eyeCos, 1.5f);
	}

	private float ShaderRayleighPhase(float eyeCos2)
	{
		return 0.75f + 0.75f * eyeCos2;
	}

	private Color ShaderNightSkyColor(Vector3 dir)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		dir.y = Mathf.Max(0f, dir.y);
		return MoonSkyColor * (1f - 0.75f * dir.y);
	}

	private Color ShaderMoonHaloColor(Vector3 dir)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		return MoonHaloColor * Mathf.Pow(Mathf.Max(0f, Vector3.Dot(dir, LocalMoonDirection)), 1f / Mathf.Lerp(Moon.MeshSize, Moon.MeshSizeRed, Cycle.RedMoonLerp));
	}

	private Color TOD_HDR2LDR(Color color)
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		return new Color(1f - Mathf.Pow(2f, (0f - Atmosphere.Brightness) * color.r), 1f - Mathf.Pow(2f, (0f - Atmosphere.Brightness) * color.g), 1f - Mathf.Pow(2f, (0f - Atmosphere.Brightness) * color.b), color.a);
	}

	private Color TOD_GAMMA2LINEAR(Color color)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		return new Color(color.r * color.r, color.g * color.g, color.b * color.b, color.a);
	}

	private Color TOD_LINEAR2GAMMA(Color color)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		return new Color(Mathf.Sqrt(color.r), Mathf.Sqrt(color.g), Mathf.Sqrt(color.b), color.a);
	}

	private Color ShaderScatteringColor(Vector3 dir, bool directLight = true)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		//IL_012e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0131: Unknown result type (might be due to invalid IL or missing references)
		//IL_0136: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_013a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0141: Unknown result type (might be due to invalid IL or missing references)
		//IL_0146: Unknown result type (might be due to invalid IL or missing references)
		//IL_014b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0191: Unknown result type (might be due to invalid IL or missing references)
		//IL_0192: Unknown result type (might be due to invalid IL or missing references)
		//IL_019f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0211: Unknown result type (might be due to invalid IL or missing references)
		//IL_0213: Unknown result type (might be due to invalid IL or missing references)
		//IL_0215: Unknown result type (might be due to invalid IL or missing references)
		//IL_021a: Unknown result type (might be due to invalid IL or missing references)
		//IL_022b: Unknown result type (might be due to invalid IL or missing references)
		//IL_023e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0251: Unknown result type (might be due to invalid IL or missing references)
		//IL_0264: Unknown result type (might be due to invalid IL or missing references)
		//IL_0277: Unknown result type (might be due to invalid IL or missing references)
		//IL_028a: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_031c: Unknown result type (might be due to invalid IL or missing references)
		//IL_031d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0322: Unknown result type (might be due to invalid IL or missing references)
		//IL_0326: Unknown result type (might be due to invalid IL or missing references)
		//IL_0332: Unknown result type (might be due to invalid IL or missing references)
		//IL_033e: Unknown result type (might be due to invalid IL or missing references)
		//IL_037b: Unknown result type (might be due to invalid IL or missing references)
		//IL_039a: Unknown result type (might be due to invalid IL or missing references)
		//IL_03b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0440: Unknown result type (might be due to invalid IL or missing references)
		//IL_034c: Unknown result type (might be due to invalid IL or missing references)
		//IL_034d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0352: Unknown result type (might be due to invalid IL or missing references)
		//IL_0356: Unknown result type (might be due to invalid IL or missing references)
		//IL_0362: Unknown result type (might be due to invalid IL or missing references)
		//IL_036e: Unknown result type (might be due to invalid IL or missing references)
		dir.y = Mathf.Max(0f, dir.y);
		float x = kRadius.x;
		float y = kRadius.y;
		float w = kRadius.w;
		float x2 = kScale.x;
		float z = kScale.z;
		float w2 = kScale.w;
		float x3 = k4PI.x;
		float y2 = k4PI.y;
		float z2 = k4PI.z;
		float w3 = k4PI.w;
		float x4 = kSun.x;
		float y3 = kSun.y;
		float z3 = kSun.z;
		float w4 = kSun.w;
		Vector3 val = default(Vector3);
		((Vector3)(ref val))..ctor(0f, x + w2, 0f);
		float num = Mathf.Sqrt(w + y * dir.y * dir.y - y) - x * dir.y;
		float num2 = Mathf.Exp(z * (0f - w2));
		float inCos = Vector3.Dot(dir, val) / (x + w2);
		float num3 = num2 * ShaderScale(inCos);
		float num4 = num / 2f;
		float num5 = num4 * x2;
		Vector3 val2 = dir * num4;
		Vector3 val3 = val + val2 * 0.5f;
		float num6 = 0f;
		float num7 = 0f;
		float num8 = 0f;
		for (int i = 0; i < 2; i++)
		{
			float magnitude = ((Vector3)(ref val3)).magnitude;
			float num9 = 1f / magnitude;
			float num10 = Mathf.Exp(z * (x - magnitude));
			float num11 = num10 * num5;
			float inCos2 = Vector3.Dot(dir, val3) * num9;
			float inCos3 = Vector3.Dot(LocalSunDirection, val3) * num9;
			float num12 = num3 + num10 * (ShaderScale(inCos3) - ShaderScale(inCos2));
			float num13 = Mathf.Exp((0f - num12) * (x3 + w3));
			float num14 = Mathf.Exp((0f - num12) * (y2 + w3));
			float num15 = Mathf.Exp((0f - num12) * (z2 + w3));
			num6 += num13 * num11;
			num7 += num14 * num11;
			num8 += num15 * num11;
			val3 += val2;
		}
		float num16 = SunSkyColor.r * num6 * x4;
		float num17 = SunSkyColor.g * num7 * y3;
		float num18 = SunSkyColor.b * num8 * z3;
		float num19 = SunSkyColor.r * num6 * w4;
		float num20 = SunSkyColor.g * num7 * w4;
		float num21 = SunSkyColor.b * num8 * w4;
		float num22 = 0f;
		float num23 = 0f;
		float num24 = 0f;
		float num25 = Vector3.Dot(LocalSunDirection, dir);
		float eyeCos = num25 * num25;
		float num26 = ShaderRayleighPhase(eyeCos);
		num22 += num26 * num16;
		num23 += num26 * num17;
		num24 += num26 * num18;
		if (directLight)
		{
			float num27 = ShaderMiePhase(num25, eyeCos);
			num22 += num27 * num19;
			num23 += num27 * num20;
			num24 += num27 * num21;
		}
		Color val4 = ShaderNightSkyColor(dir);
		num22 += val4.r;
		num23 += val4.g;
		num24 += val4.b;
		if (directLight)
		{
			Color val5 = ShaderMoonHaloColor(dir);
			num22 += val5.r;
			num23 += val5.g;
			num24 += val5.b;
		}
		num22 = Mathf.Lerp(num22, FogColor.r, Atmosphere.Fogginess);
		num23 = Mathf.Lerp(num23, FogColor.g, Atmosphere.Fogginess);
		num24 = Mathf.Lerp(num24, FogColor.b, Atmosphere.Fogginess);
		num22 = Mathf.Pow(num22 * Atmosphere.Brightness, Atmosphere.Contrast);
		num23 = Mathf.Pow(num23 * Atmosphere.Brightness, Atmosphere.Contrast);
		num24 = Mathf.Pow(num24 * Atmosphere.Brightness, Atmosphere.Contrast);
		return new Color(num22, num23, num24, 1f);
	}

	private void Initialize()
	{
		Components = ((Component)this).GetComponent<TOD_Components>();
		Components.Initialize();
		Resources = ((Component)this).GetComponent<TOD_Resources>();
		Resources.Initialize();
		instances.Add(this);
		Initialized = true;
	}

	private void Cleanup()
	{
		if (Object.op_Implicit((Object)(object)Probe))
		{
			Object.Destroy((Object)(object)((Component)Probe).gameObject);
		}
		instances.Remove(this);
		Initialized = false;
	}

	protected void OnEnable()
	{
		LateUpdate();
	}

	protected void OnDisable()
	{
		Cleanup();
	}

	protected void LateUpdate()
	{
		if (!Initialized)
		{
			Initialize();
		}
		UpdateScattering();
		UpdateCelestials();
		UpdateQualitySettings();
		UpdateRenderSettings();
		UpdateShaderKeywords();
		UpdateShaderProperties();
	}

	protected void OnValidate()
	{
		Cycle.DateTime = Cycle.DateTime;
	}

	private void UpdateScattering()
	{
		float num = 0f - Atmosphere.Directionality;
		float num2 = num * num;
		kBetaMie.x = 1.5f * ((1f - num2) / (2f + num2));
		kBetaMie.y = 1f + num2;
		kBetaMie.z = 2f * num;
		float num3 = 0.002f * Atmosphere.MieMultiplier;
		float num4 = 0.002f * Atmosphere.RayleighMultiplier;
		float x = num4 * 40f * 5.2701645f;
		float y = num4 * 40f * 9.473284f;
		float z = num4 * 40f * 19.643803f;
		float w = num3 * 40f;
		kSun.x = x;
		kSun.y = y;
		kSun.z = z;
		kSun.w = w;
		float x2 = num4 * 4f * (float)Math.PI * 5.2701645f;
		float y2 = num4 * 4f * (float)Math.PI * 9.473284f;
		float z2 = num4 * 4f * (float)Math.PI * 19.643803f;
		float w2 = num3 * 4f * (float)Math.PI;
		k4PI.x = x2;
		k4PI.y = y2;
		k4PI.z = z2;
		k4PI.w = w2;
		kRadius.x = 1f;
		kRadius.y = 1f;
		kRadius.z = 1.025f;
		kRadius.w = 1.050625f;
		kScale.x = 40.00004f;
		kScale.y = 0.25f;
		kScale.z = 160.00015f;
		kScale.w = 0.0001f;
	}

	private void UpdateCelestials()
	{
		//IL_06d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_06f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_06fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_073e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0753: Unknown result type (might be due to invalid IL or missing references)
		//IL_0718: Unknown result type (might be due to invalid IL or missing references)
		//IL_072a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0760: Unknown result type (might be due to invalid IL or missing references)
		//IL_0765: Unknown result type (might be due to invalid IL or missing references)
		//IL_0772: Unknown result type (might be due to invalid IL or missing references)
		//IL_078f: Unknown result type (might be due to invalid IL or missing references)
		//IL_079f: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_07b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_07bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_07c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_07d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_07f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0832: Unknown result type (might be due to invalid IL or missing references)
		//IL_088a: Unknown result type (might be due to invalid IL or missing references)
		//IL_08e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0915: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a76: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a7b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a93: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a98: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ab5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0acd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ad2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aea: Unknown result type (might be due to invalid IL or missing references)
		//IL_0aef: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b07: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b0c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b24: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b29: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b40: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b45: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b54: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b59: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b5c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b5e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b6b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b70: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b88: Unknown result type (might be due to invalid IL or missing references)
		//IL_0b8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ba5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0baa: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bc1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bcb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bda: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bdf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0be4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0be7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0be9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0bf1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c08: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c0d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c12: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c21: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c26: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c2b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c2e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c30: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c38: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c42: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c44: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c46: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c48: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c4b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c4d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c55: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c61: Unknown result type (might be due to invalid IL or missing references)
		//IL_0c74: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d06: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d0b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cc4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0cc9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d18: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dc6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0d98: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dcb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0dd8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0df5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e1f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e24: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e3b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e40: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e56: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e5b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e72: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e77: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e8d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0e92: Unknown result type (might be due to invalid IL or missing references)
		//IL_0ea9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0eae: Unknown result type (might be due to invalid IL or missing references)
		float num = (float)Math.PI / 180f * World.Latitude;
		float num2 = Mathf.Sin(num);
		float num3 = Mathf.Cos(num);
		float longitude = World.Longitude;
		float num4 = (float)Math.PI / 2f;
		int year = Cycle.Year;
		int month = Cycle.Month;
		int day = Cycle.Day;
		float num5 = Cycle.Hour - World.UTC;
		float num6 = (float)(367 * year - 7 * (year + (month + 9) / 12) / 4 + 275 * month / 9 + day - 730530) + num5 / 24f;
		float num7 = (float)(367 * year - 7 * (year + (month + 9) / 12) / 4 + 275 * month / 9 + day - 730530) + 0.5f;
		float num8 = 23.4393f - 3.563E-07f * num6;
		float num9 = (float)Math.PI / 180f * num8;
		float num10 = Mathf.Sin(num9);
		float num11 = Mathf.Cos(num9);
		float num12 = 282.9404f + 4.70935E-05f * num7;
		float num13 = 0.016709f - 1.151E-09f * num7;
		float num14 = 356.047f + 0.98560023f * num7;
		float num15 = (float)Math.PI / 180f * num14;
		float num16 = Mathf.Sin(num15);
		float num17 = Mathf.Cos(num15);
		float num18 = num15 + num13 * num16 * (1f + num13 * num17);
		float num19 = Mathf.Sin(num18);
		float num20 = Mathf.Cos(num18) - num13;
		float num21 = Mathf.Sqrt(1f - num13 * num13) * num19;
		float num22 = 57.29578f * Mathf.Atan2(num21, num20);
		float num23 = Mathf.Sqrt(num20 * num20 + num21 * num21);
		float num24 = num22 + num12;
		float num25 = (float)Math.PI / 180f * num24;
		float num26 = Mathf.Sin(num25);
		float num27 = Mathf.Cos(num25);
		float num28 = num23 * num27;
		float num29 = num23 * num26;
		float num30 = num28;
		float num31 = num29 * num11;
		float num32 = num29 * num10;
		float num33 = Mathf.Atan2(num31, num30);
		float num34 = 57.29578f * num33;
		float num35 = Mathf.Atan2(num32, Mathf.Sqrt(num30 * num30 + num31 * num31));
		float num36 = Mathf.Sin(num35);
		float num37 = Mathf.Cos(num35);
		float num38 = num22 + num12 + 180f;
		float num39 = num34 - num38 - longitude;
		float num40 = -6f;
		float num41 = Mathf.Acos((Mathf.Sin((float)Math.PI / 180f * num40) - num2 * num36) / (num3 * num37));
		float num42 = 57.29578f * num41;
		SunsetTime = (24f + (num39 + num42) / 15f % 24f) % 24f;
		SunriseTime = (24f + (num39 - num42) / 15f % 24f) % 24f;
		float num43 = 282.9404f + 4.70935E-05f * num6;
		float num44 = 0.016709f - 1.151E-09f * num6;
		float num45 = 356.047f + 0.98560023f * num6;
		float num46 = (float)Math.PI / 180f * num45;
		float num47 = Mathf.Sin(num46);
		float num48 = Mathf.Cos(num46);
		float num49 = num46 + num44 * num47 * (1f + num44 * num48);
		float num50 = Mathf.Sin(num49);
		float num51 = Mathf.Cos(num49) - num44;
		float num52 = Mathf.Sqrt(1f - num44 * num44) * num50;
		float num53 = 57.29578f * Mathf.Atan2(num52, num51);
		float num54 = Mathf.Sqrt(num51 * num51 + num52 * num52);
		float num55 = num53 + num43;
		float num56 = (float)Math.PI / 180f * num55;
		float num57 = Mathf.Sin(num56);
		float num58 = Mathf.Cos(num56);
		float num59 = num54 * num58;
		float num60 = num54 * num57;
		float num61 = num59;
		float num62 = num60 * num11;
		float num63 = num60 * num10;
		float num64 = Mathf.Atan2(num62, num61);
		float num65 = Mathf.Atan2(num63, Mathf.Sqrt(num61 * num61 + num62 * num62));
		float num66 = Mathf.Sin(num65);
		float num67 = Mathf.Cos(num65);
		float num68 = num53 + num43 + 180f + 15f * num5;
		float num69 = (float)Math.PI / 180f * (num68 + longitude);
		LocalSiderealTime = (num68 + longitude) / 15f;
		float num70 = num69 - num64;
		float num71 = Mathf.Sin(num70);
		float num72 = Mathf.Cos(num70) * num67;
		float num73 = num71 * num67;
		float num74 = num66;
		float num75 = num72 * num2 - num74 * num3;
		float num76 = num73;
		float num77 = num72 * num3 + num74 * num2;
		float num78 = Mathf.Atan2(num76, num75) + (float)Math.PI;
		float num79 = Mathf.Atan2(num77, Mathf.Sqrt(num75 * num75 + num76 * num76));
		float num80 = num4 - num79;
		float num81 = num79;
		float num82 = num78;
		SunZenith = 57.29578f * num80;
		SunAltitude = 57.29578f * num81;
		SunAzimuth = 57.29578f * num82;
		float num131;
		float num132;
		float num133;
		if (Moon.Position == TOD_MoonPositionType.Realistic)
		{
			float num83 = 125.1228f - 0.05295381f * num6;
			float num84 = 5.1454f;
			float num85 = 318.0634f + 0.16435732f * num6;
			float num86 = 0.0549f;
			float num87 = 115.3654f + 13.064993f * num6;
			float num88 = (float)Math.PI / 180f * num83;
			float num89 = Mathf.Sin(num88);
			float num90 = Mathf.Cos(num88);
			float num91 = (float)Math.PI / 180f * num84;
			float num92 = Mathf.Sin(num91);
			float num93 = Mathf.Cos(num91);
			float num94 = (float)Math.PI / 180f * num87;
			float num95 = Mathf.Sin(num94);
			float num96 = Mathf.Cos(num94);
			float num97 = num94 + num86 * num95 * (1f + num86 * num96);
			float num98 = Mathf.Sin(num97);
			float num99 = Mathf.Cos(num97);
			float num100 = 60.2666f * (num99 - num86);
			float num101 = 60.2666f * (Mathf.Sqrt(1f - num86 * num86) * num98);
			float num102 = 57.29578f * Mathf.Atan2(num101, num100);
			float num103 = Mathf.Sqrt(num100 * num100 + num101 * num101);
			float num104 = num102 + num85;
			float num105 = (float)Math.PI / 180f * num104;
			float num106 = Mathf.Sin(num105);
			float num107 = Mathf.Cos(num105);
			float num108 = num103 * (num90 * num107 - num89 * num106 * num93);
			float num109 = num103 * (num89 * num107 + num90 * num106 * num93);
			float num110 = num103 * (num106 * num92);
			float num111 = num108;
			float num112 = num109;
			float num113 = num110;
			float num114 = num111;
			float num115 = num112 * num11 - num113 * num10;
			float num116 = num112 * num10 + num113 * num11;
			float num117 = Mathf.Atan2(num115, num114);
			float num118 = Mathf.Atan2(num116, Mathf.Sqrt(num114 * num114 + num115 * num115));
			float num119 = Mathf.Sin(num118);
			float num120 = Mathf.Cos(num118);
			float num121 = num69 - num117;
			float num122 = Mathf.Sin(num121);
			float num123 = Mathf.Cos(num121) * num120;
			float num124 = num122 * num120;
			float num125 = num119;
			float num126 = num123 * num2 - num125 * num3;
			float num127 = num124;
			float num128 = num123 * num3 + num125 * num2;
			float num129 = Mathf.Atan2(num127, num126) + (float)Math.PI;
			float num130 = Mathf.Atan2(num128, Mathf.Sqrt(num126 * num126 + num127 * num127));
			num131 = num4 - num130;
			num132 = num130;
			num133 = num129;
		}
		else
		{
			num131 = num80 - (float)Math.PI;
			num132 = num81 - (float)Math.PI;
			num133 = num82;
		}
		MoonZenith = 57.29578f * num131;
		MoonAltitude = 57.29578f * num132;
		MoonAzimuth = 57.29578f * num133;
		Quaternion val = Quaternion.Euler(90f - World.Latitude, 0f, 0f) * Quaternion.Euler(0f, 180f + num69 * 57.29578f, 0f);
		if (Stars.Position == TOD_StarsPositionType.Rotating)
		{
			Components.SpaceTransform.localRotation = val;
			Components.StarTransform.localRotation = val;
		}
		else
		{
			Components.SpaceTransform.localRotation = Quaternion.identity;
			Components.StarTransform.localRotation = Quaternion.identity;
		}
		Vector3 localPosition = OrbitalToLocal(num80, num82);
		Components.SunTransform.localPosition = localPosition;
		Components.SunTransform.LookAt(Components.DomeTransform.position, Components.SunTransform.up);
		Vector3 localPosition2 = OrbitalToLocal(num131, num133);
		Vector3 val2 = val * -Vector3.right;
		Components.MoonTransform.localPosition = localPosition2;
		Components.MoonTransform.LookAt(Components.DomeTransform.position, val2);
		float num134 = 8f * Mathf.Tan((float)Math.PI / 360f * Sun.MeshSize);
		Vector3 localScale = default(Vector3);
		((Vector3)(ref localScale))..ctor(num134, num134, num134);
		Components.SunTransform.localScale = localScale;
		float num135 = 4f * Mathf.Tan((float)Math.PI / 360f * Mathf.Lerp(Moon.MeshSize, Moon.MeshSizeRed, Cycle.RedMoonLerp));
		Vector3 localScale2 = default(Vector3);
		((Vector3)(ref localScale2))..ctor(num135, num135, num135);
		Components.MoonTransform.localScale = localScale2;
		bool enabled = (1f - Atmosphere.Fogginess) * (1f - LerpValue) > 0f;
		Components.SpaceRenderer.enabled = enabled;
		Components.StarRenderer.enabled = enabled;
		bool enabled2 = Components.SunTransform.localPosition.y > 0f - num134;
		Components.SunRenderer.enabled = enabled2;
		bool enabled3 = Components.MoonTransform.localPosition.y > 0f - num135;
		Components.MoonRenderer.enabled = enabled3;
		bool enabled4 = true;
		Components.AtmosphereRenderer.enabled = enabled4;
		bool enabled5 = false;
		Components.ClearRenderer.enabled = enabled5;
		bool enabled6 = Clouds.Coverage > 0f && Clouds.Opacity > 0f;
		Components.CloudRenderer.enabled = enabled6;
		LerpValue = Mathf.InverseLerp(105f, 90f, SunZenith);
		float num136 = Mathf.Clamp01(SunZenith / 90f);
		float num137 = Mathf.Clamp01((SunZenith - 90f) / 90f);
		float num138 = Mathf.Clamp01((LerpValue - 0.1f) / 0.9f);
		float num139 = Mathf.Clamp01((0.1f - LerpValue) / 0.1f);
		float num140 = Mathf.Clamp01((90f - num131 * 57.29578f) / 5f);
		SunVisibility = (1f - Atmosphere.Fogginess) * num138;
		MoonVisibility = (1f - Atmosphere.Fogginess) * num139 * num140;
		SunLightColor = TOD_Util.ApplyAlpha(Day.LightColor.Evaluate(num136));
		MoonLightColor = TOD_Util.ApplyAlpha(Night.LightColor.Evaluate(num137));
		SunRayColor = TOD_Util.ApplyAlpha(Day.RayColor.Evaluate(num136));
		MoonRayColor = TOD_Util.ApplyAlpha(Night.RayColor.Evaluate(num137));
		SunSkyColor = TOD_Util.ApplyAlpha(Day.SkyColor.Evaluate(num136));
		MoonSkyColor = TOD_Util.ApplyAlpha(Night.SkyColor.Evaluate(num137));
		SunMeshColor = TOD_Util.ApplyAlpha(Day.SunColor.Evaluate(num136));
		Color val3 = Night.MoonColor.Evaluate(num137);
		Color val4 = Night.MoonColorRed.Evaluate(num137);
		MoonMeshColor = TOD_Util.ApplyAlpha(Color.Lerp(val3, val4, Cycle.RedMoonLerp));
		SunCloudColor = TOD_Util.ApplyAlpha(Day.CloudColor.Evaluate(num136));
		MoonCloudColor = TOD_Util.ApplyAlpha(Night.CloudColor.Evaluate(num137));
		Color val5 = TOD_Util.ApplyAlpha(Day.FogColor.Evaluate(num136));
		Color val6 = TOD_Util.ApplyAlpha(Night.FogColor.Evaluate(num137));
		FogColor = Color.Lerp(val6, val5, LerpValue);
		Color val7 = TOD_Util.ApplyAlpha(Day.AmbientColor.Evaluate(num136));
		Color val8 = TOD_Util.ApplyAlpha(Night.AmbientColor.Evaluate(num137));
		AmbientColor = Color.Lerp(val8, val7, LerpValue);
		Color val9 = val7;
		Color val10 = val8;
		GroundColor = Color.Lerp(val10, val9, LerpValue);
		MoonHaloColor = TOD_Util.MulRGB(MoonSkyColor, Moon.HaloBrightness * num140);
		float shadowStrength;
		float intensity;
		Color color;
		if (LerpValue > 0.1f)
		{
			IsDay = true;
			IsNight = false;
			shadowStrength = Day.ShadowStrength;
			intensity = Mathf.Lerp(0f, Day.LightIntensity, SunVisibility);
			color = SunLightColor;
		}
		else
		{
			IsDay = false;
			IsNight = true;
			shadowStrength = Night.ShadowStrength;
			intensity = Mathf.Lerp(0f, Night.LightIntensity, MoonVisibility);
			color = MoonLightColor;
		}
		Components.LightSource.color = color;
		Components.LightSource.intensity = intensity;
		Components.LightSource.shadowStrength = shadowStrength;
		if (!Application.isPlaying || timeSinceLightUpdate >= Light.UpdateInterval)
		{
			timeSinceLightUpdate = 0f;
			Vector3 localPosition3 = (IsNight ? OrbitalToLocal(Mathf.Min(num131, (1f - Light.MinimumHeight) * (float)Math.PI / 2f), num133) : OrbitalToLocal(Mathf.Min(num80, (1f - Light.MinimumHeight) * (float)Math.PI / 2f), num82));
			Components.LightTransform.localPosition = localPosition3;
			Components.LightTransform.LookAt(Components.DomeTransform.position);
		}
		else
		{
			timeSinceLightUpdate += Time.deltaTime;
		}
		SunDirection = -Components.SunTransform.forward;
		LocalSunDirection = Components.DomeTransform.InverseTransformDirection(SunDirection);
		MoonDirection = -Components.MoonTransform.forward;
		LocalMoonDirection = Components.DomeTransform.InverseTransformDirection(MoonDirection);
		LightDirection = -Components.LightTransform.forward;
		LocalLightDirection = Components.DomeTransform.InverseTransformDirection(LightDirection);
	}
}
