using System.Runtime.InteropServices;

public class TrackIR
{
	public enum NPSTATUS
	{
		NPSTATUS_REMOTEACTIVE,
		NPSTATUS_REMOTEDISABLED
	}

	public enum NPRESULT
	{
		NP_OK = 0,
		NP_ERR_DEVICE_NOT_PRESENT = 1,
		NP_ERR_UNSUPPORTED_OS = 2,
		NP_ERR_INVALID_ARG = 3,
		NP_ERR_DLL_NOT_FOUND = 4,
		NP_ERR_NO_DATA = 5,
		NP_ERR_INTERNAL_DATA = 6,
		NP_ERR_FAILED = 100,
		NP_ERR_INVALID_KEY = 101
	}

	public enum NPDATA : ushort
	{
		Roll = 1,
		Pitch = 2,
		Yaw = 4,
		X = 0x10,
		Y = 0x20,
		Z = 0x40,
		RawX = 0x80,
		RawY = 0x100,
		RawZ = 0x200,
		DeltaX = 0x400,
		DeltaY = 0x800,
		DeltaZ = 0x1000,
		SmoothX = 0x2000,
		SmoothY = 0x4000,
		SmoothZ = 0x8000
	}

	public struct LPTRACKIRSIGNATUREDATA
	{
		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 200)]
		public string DllSignature;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 200)]
		public string AppSignature;
	}

	public struct LPTRACKIRDATA
	{
		public ushort wNPStatus;

		public ushort wPFrameSignature;

		public uint dwNPIOData;

		public float fNPRoll;

		public float fNPPitch;

		public float fNPYaw;

		public float fNPX;

		public float fNPY;

		public float fNPZ;

		public float fNPRawX;

		public float fNPRawY;

		public float fNPRawZ;

		public float fNPDeltaX;

		public float fNPDeltaY;

		public float fNPDeltaZ;

		public float fNPSmoothX;

		public float fNPSmoothY;

		public float fNPSmoothZ;
	}

	public TrackIR(ushort developerID, long appKeyHigh, long appKeyLow, NPDATA data = (NPDATA)119, bool verbose = false)
	{
	}

	public void Init()
	{
	}

	private bool Connect(string dllPath)
	{
		return false;
	}

	public void Shutdown()
	{
	}

	public LPTRACKIRDATA GetData()
	{
		return default(LPTRACKIRDATA);
	}

	public void Refresh()
	{
		Shutdown();
		Init();
	}

	public void ReCenter()
	{
	}
}
