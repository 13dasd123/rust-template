using System;
using System.ComponentModel;
using System.IO;
using System.Runtime.InteropServices;
using Microsoft.Win32;
using UnityEngine;

public class TrackIR
{
	public enum NPSTATUS
	{
		NPSTATUS_REMOTEACTIVE,
		NPSTATUS_REMOTEDISABLED
	}

	public enum NPRESULT
	{
		NP_OK = 0,
		NP_ERR_DEVICE_NOT_PRESENT = 1,
		NP_ERR_UNSUPPORTED_OS = 2,
		NP_ERR_INVALID_ARG = 3,
		NP_ERR_DLL_NOT_FOUND = 4,
		NP_ERR_NO_DATA = 5,
		NP_ERR_INTERNAL_DATA = 6,
		NP_ERR_FAILED = 100,
		NP_ERR_INVALID_KEY = 101
	}

	public enum NPDATA : ushort
	{
		Roll = 1,
		Pitch = 2,
		Yaw = 4,
		X = 0x10,
		Y = 0x20,
		Z = 0x40,
		RawX = 0x80,
		RawY = 0x100,
		RawZ = 0x200,
		DeltaX = 0x400,
		DeltaY = 0x800,
		DeltaZ = 0x1000,
		SmoothX = 0x2000,
		SmoothY = 0x4000,
		SmoothZ = 0x8000
	}

	public struct LPTRACKIRSIGNATUREDATA
	{
		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 200)]
		public string DllSignature;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 200)]
		public string AppSignature;
	}

	public struct LPTRACKIRDATA
	{
		public ushort wNPStatus;

		public ushort wPFrameSignature;

		public uint dwNPIOData;

		public float fNPRoll;

		public float fNPPitch;

		public float fNPYaw;

		public float fNPX;

		public float fNPY;

		public float fNPZ;

		public float fNPRawX;

		public float fNPRawY;

		public float fNPRawZ;

		public float fNPDeltaX;

		public float fNPDeltaY;

		public float fNPDeltaZ;

		public float fNPSmoothX;

		public float fNPSmoothY;

		public float fNPSmoothZ;
	}

	private delegate NPRESULT PF_NOTIFYCALLBACK(ushort a, ushort b);

	private delegate NPRESULT dNP_GetSignatureDelegate(ref LPTRACKIRSIGNATUREDATA signature);

	private delegate NPRESULT dNP_RegisterWindowHandle(int hWnd);

	private delegate NPRESULT dNP_RegisterProgramProfileID(ushort wPPID);

	private delegate NPRESULT dNP_UnregisterWindowHandle();

	private delegate NPRESULT dNP_QueryVersion(ref ushort pwVersion);

	private delegate NPRESULT dNP_RequestData(ushort wDataReq);

	private delegate NPRESULT dNP_GetData(ref LPTRACKIRDATA pTID, long appKeyHigh, long appKeyLow);

	private delegate NPRESULT dNP_RegisterNotify(PF_NOTIFYCALLBACK pfNotify);

	private delegate NPRESULT dNP_UnregisterNotify();

	private delegate NPRESULT dNP_StartCursor();

	private delegate NPRESULT dNP_StopCursor();

	private delegate NPRESULT dNP_ReCenter();

	private delegate NPRESULT dNP_StartDataTransmission();

	private delegate NPRESULT dNP_StopDataTransmission();

	private dNP_GetSignatureDelegate NP_GetSignatureDelegate;

	private dNP_RegisterWindowHandle NP_RegisterWindowHandle;

	private dNP_UnregisterWindowHandle NP_UnregisterWindowHandle;

	private dNP_RegisterProgramProfileID NP_RegisterProgramProfileID;

	private dNP_QueryVersion NP_QueryVersion;

	private dNP_RequestData NP_RequestData;

	private dNP_GetData NP_GetData;

	private dNP_UnregisterNotify NP_UnregisterNotify;

	private dNP_StartCursor NP_StartCursor;

	private dNP_StopCursor NP_StopCursor;

	private dNP_ReCenter NP_ReCenter;

	private dNP_StartDataTransmission NP_StartDataTransmission;

	private dNP_StopDataTransmission NP_StopDataTransmission;

	private ulong frameSignature;

	private ulong staleFrames;

	private NPRESULT result;

	private NPDATA data;

	private bool verbose;

	private IntPtr dllPtr;

	private ushort developerID;

	private long appKeyHigh;

	private long appKeyLow;

	public TrackIR(ushort developerID, long appKeyHigh, long appKeyLow, NPDATA data = (NPDATA)119, bool verbose = false)
	{
		this.developerID = developerID;
		this.appKeyHigh = appKeyHigh;
		this.appKeyLow = appKeyLow;
		this.data = data;
		this.verbose = verbose;
	}

	[DllImport("user32.dll")]
	private static extern int GetForegroundWindow();

	[DllImport("kernel32.dll", SetLastError = true)]
	private static extern IntPtr LoadLibrary(string lpFileName);

	[DllImport("kernel32.dll")]
	private static extern IntPtr GetProcAddress(IntPtr hModule, string lpProcName);

	[DllImport("kernel32.dll")]
	private static extern bool FreeLibrary(IntPtr hModule);

	public void Init()
	{
		frameSignature = 0uL;
		staleFrames = 0uL;
		string path = GetPath();
		if (string.IsNullOrEmpty(path) || !Connect(path))
		{
			return;
		}
		int foregroundWindow = GetForegroundWindow();
		if (verbose)
		{
			Debug.Log("TrackIR: GetForegroundWindow OK (" + foregroundWindow + ")");
		}
		if (NP_RegisterWindowHandle != null)
		{
			result = NP_RegisterWindowHandle(foregroundWindow);
			if (result != 0)
			{
				throw new Exception(string.Concat("TrackIR: RegisterWindowHandle ERROR (", result, ")"));
			}
			if (verbose)
			{
				Debug.Log("TrackIR: RegisterWindowHandle OK");
			}
		}
		if (NP_QueryVersion != null)
		{
			ushort pwVersion = 0;
			result = NP_QueryVersion(ref pwVersion);
			if (result != 0)
			{
				throw new Exception(string.Concat("TrackIR: QueryVersion ERROR (", result, ")"));
			}
			if (verbose)
			{
				string text = $"{pwVersion >> 8:d}";
				string text2 = $"{pwVersion & 0xFF:d}";
				Debug.Log("TrackIR: QueryVersion OK (" + text + "." + text2 + ")");
			}
		}
		if (NP_RequestData != null)
		{
			result = NP_RequestData((ushort)data);
			if (result != 0)
			{
				throw new Exception(string.Concat("TrackIR: RequestData ERROR (", result, ")"));
			}
			if (verbose)
			{
				Debug.Log("TrackIR: RequestData OK");
			}
		}
		if (NP_RegisterProgramProfileID != null)
		{
			result = NP_RegisterProgramProfileID(developerID);
			if (result != 0)
			{
				throw new Exception(string.Concat("TrackIR: RegisterProgramProfileID ERROR (", result, ")"));
			}
			if (verbose)
			{
				Debug.Log("TrackIR: RegisterProgramProfileID OK");
			}
		}
		if (NP_StopCursor != null)
		{
			result = NP_StopCursor();
			if (result != 0)
			{
				throw new Exception(string.Concat("TrackIR: StopCursor ERROR (", result, ")"));
			}
			if (verbose)
			{
				Debug.Log("TrackIR: StopCursor OK");
			}
		}
		if (NP_StartDataTransmission != null)
		{
			result = NP_StartDataTransmission();
			if (result != 0)
			{
				throw new Exception(string.Concat("TrackIR: StartDataTransmission ERROR (", result, ")"));
			}
			if (verbose)
			{
				Debug.Log("TrackIR: StartDataTransmission OK");
			}
		}
	}

	private bool Connect(string dllPath)
	{
		dllPath = ((IntPtr.Size != 8) ? Path.Combine(dllPath, "NPClient.dll") : Path.Combine(dllPath, "NPClient64.dll"));
		if (!File.Exists(dllPath))
		{
			return false;
		}
		dllPtr = LoadLibrary(dllPath);
		if (dllPtr == IntPtr.Zero)
		{
			throw new Win32Exception(Marshal.GetLastWin32Error());
		}
		IntPtr procAddress = GetProcAddress(dllPtr, "NP_GetSignature");
		NP_GetSignatureDelegate = (dNP_GetSignatureDelegate)Marshal.GetDelegateForFunctionPointer(procAddress, typeof(dNP_GetSignatureDelegate));
		LPTRACKIRSIGNATUREDATA signature = default(LPTRACKIRSIGNATUREDATA);
		LPTRACKIRSIGNATUREDATA lPTRACKIRSIGNATUREDATA = default(LPTRACKIRSIGNATUREDATA);
		lPTRACKIRSIGNATUREDATA.DllSignature = "precise head tracking\n put your head into the game\n now go look around\n\n Copyright EyeControl Technologies";
		lPTRACKIRSIGNATUREDATA.AppSignature = "hardware camera\n software processing data\n track user movement\n\n Copyright EyeControl Technologies";
		if (NP_GetSignatureDelegate != null)
		{
			result = NP_GetSignatureDelegate(ref signature);
			if (result != 0)
			{
				throw new Exception(string.Concat("TrackIR: GetSignatureDelegate ERROR (", result, ")"));
			}
			if (verbose)
			{
				Debug.Log("TrackIR: GetSignatureDelegate OK");
			}
		}
		if (string.Compare(lPTRACKIRSIGNATUREDATA.DllSignature, signature.DllSignature) != 0)
		{
			return false;
		}
		if (verbose)
		{
			Debug.Log("TrackIR: DllSignature OK");
		}
		if (string.Compare(lPTRACKIRSIGNATUREDATA.AppSignature, signature.AppSignature) != 0)
		{
			return false;
		}
		if (verbose)
		{
			Debug.Log("TrackIR: AppSignature OK");
		}
		NP_RegisterWindowHandle = (dNP_RegisterWindowHandle)Marshal.GetDelegateForFunctionPointer(GetProcAddress(dllPtr, "NP_RegisterWindowHandle"), typeof(dNP_RegisterWindowHandle));
		NP_UnregisterWindowHandle = (dNP_UnregisterWindowHandle)Marshal.GetDelegateForFunctionPointer(GetProcAddress(dllPtr, "NP_UnregisterWindowHandle"), typeof(dNP_UnregisterWindowHandle));
		NP_RegisterProgramProfileID = (dNP_RegisterProgramProfileID)Marshal.GetDelegateForFunctionPointer(GetProcAddress(dllPtr, "NP_RegisterProgramProfileID"), typeof(dNP_RegisterProgramProfileID));
		NP_QueryVersion = (dNP_QueryVersion)Marshal.GetDelegateForFunctionPointer(GetProcAddress(dllPtr, "NP_QueryVersion"), typeof(dNP_QueryVersion));
		NP_RequestData = (dNP_RequestData)Marshal.GetDelegateForFunctionPointer(GetProcAddress(dllPtr, "NP_RequestData"), typeof(dNP_RequestData));
		NP_GetData = (dNP_GetData)Marshal.GetDelegateForFunctionPointer(GetProcAddress(dllPtr, "NP_GetData"), typeof(dNP_GetData));
		NP_StartCursor = (dNP_StartCursor)Marshal.GetDelegateForFunctionPointer(GetProcAddress(dllPtr, "NP_StartCursor"), typeof(dNP_StartCursor));
		NP_StopCursor = (dNP_StopCursor)Marshal.GetDelegateForFunctionPointer(GetProcAddress(dllPtr, "NP_StopCursor"), typeof(dNP_StopCursor));
		NP_ReCenter = (dNP_ReCenter)Marshal.GetDelegateForFunctionPointer(GetProcAddress(dllPtr, "NP_ReCenter"), typeof(dNP_ReCenter));
		NP_StartDataTransmission = (dNP_StartDataTransmission)Marshal.GetDelegateForFunctionPointer(GetProcAddress(dllPtr, "NP_StartDataTransmission"), typeof(dNP_StartDataTransmission));
		NP_StopDataTransmission = (dNP_StopDataTransmission)Marshal.GetDelegateForFunctionPointer(GetProcAddress(dllPtr, "NP_StopDataTransmission"), typeof(dNP_StopDataTransmission));
		return true;
	}

	private string GetPath()
	{
		RegistryKey registryKey = Registry.CurrentUser.OpenSubKey("Software\\NaturalPoint\\NATURALPOINT\\NPClient Location", writable: false);
		if (registryKey == null)
		{
			return null;
		}
		object value = registryKey.GetValue("Path");
		registryKey.Close();
		return value?.ToString();
	}

	public void Shutdown()
	{
		if (NP_StopDataTransmission != null)
		{
			result = NP_StopDataTransmission();
			if (result != 0)
			{
				throw new Exception(string.Concat("TrackIR: StopDataTransmission ERROR (", result, ")"));
			}
			if (verbose)
			{
				Debug.Log("TrackIR: StopDataTransmission OK");
			}
		}
		if (NP_StartCursor != null)
		{
			result = NP_StartCursor();
			if (result != 0)
			{
				throw new Exception(string.Concat("TrackIR: StartCursor ERROR (", result, ")"));
			}
			if (verbose)
			{
				Debug.Log("TrackIR: StartCursor OK");
			}
		}
		if (NP_UnregisterWindowHandle != null)
		{
			result = NP_UnregisterWindowHandle();
			if (result != 0)
			{
				throw new Exception(string.Concat("TrackIR: UnregisterWindowHandle ERROR (", result, ")"));
			}
			if (verbose)
			{
				Debug.Log("TrackIR: UnregisterWindowHandle OK");
			}
		}
		FreeLibrary(dllPtr);
	}

	public LPTRACKIRDATA GetData()
	{
		LPTRACKIRDATA pTID = default(LPTRACKIRDATA);
		if (NP_GetData != null)
		{
			if (NP_GetData(ref pTID, appKeyHigh, appKeyLow) != 0)
			{
				return pTID;
			}
			if (pTID.wNPStatus != 0)
			{
				return pTID;
			}
			if (frameSignature != pTID.wPFrameSignature)
			{
				frameSignature = pTID.wPFrameSignature;
				staleFrames = 0uL;
				return pTID;
			}
			if (staleFrames > 30)
			{
				return pTID;
			}
			staleFrames++;
		}
		return pTID;
	}

	public void Refresh()
	{
		Shutdown();
		Init();
	}

	public void ReCenter()
	{
		if (NP_ReCenter != null)
		{
			result = NP_ReCenter();
			if (result != 0)
			{
				throw new Exception(string.Concat("TrackIR: ReCenter ERROR (", result, ")"));
			}
			if (verbose)
			{
				Debug.Log("TrackIR: ReCenter OK");
			}
		}
	}
}
