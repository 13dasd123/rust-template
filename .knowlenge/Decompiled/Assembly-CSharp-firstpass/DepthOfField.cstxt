using System;
using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[RequireComponent(typeof(Camera))]
[AddComponentMenu("Image Effects/Camera/Depth of Field (Lens Blur, Scatter, DX11)")]
public class DepthOfField : PostEffectsBase
{
	public enum BlurType
	{
		DiscBlur,
		DX11
	}

	public enum BlurSampleCount
	{
		Low,
		Medium,
		High
	}

	public bool visualizeFocus;

	public float focalLength = 10f;

	public float focalSize = 0.05f;

	public float aperture = 11.5f;

	public Transform focalTransform;

	public float maxBlurSize = 2f;

	public bool highResolution;

	public BlurType blurType;

	public BlurSampleCount blurSampleCount = BlurSampleCount.High;

	public bool nearBlur;

	public float foregroundOverlap = 1f;

	private bool forceOnlyFarBlur;

	public Shader dofHdrShader;

	private Material dofHdrMaterial;

	public Shader dx11BokehShader;

	private Material dx11bokehMaterial;

	public float dx11BokehThreshold = 0.5f;

	public float dx11SpawnHeuristic = 0.0875f;

	public Texture2D dx11BokehTexture;

	public float dx11BokehScale = 1.2f;

	public float dx11BokehIntensity = 2.5f;

	private float focalDistance01 = 10f;

	private ComputeBuffer cbDrawArgs;

	private ComputeBuffer cbPoints;

	private float internalBlurWidth = 1f;

	public bool ForceOnlyFarBlur
	{
		get
		{
			return forceOnlyFarBlur;
		}
		set
		{
			forceOnlyFarBlur = value;
		}
	}

	public override bool CheckResources()
	{
		CheckSupport(needDepth: true);
		dofHdrMaterial = CheckShaderAndCreateMaterial(dofHdrShader, dofHdrMaterial);
		if (supportDX11 && blurType == BlurType.DX11)
		{
			dx11bokehMaterial = CheckShaderAndCreateMaterial(dx11BokehShader, dx11bokehMaterial);
			CreateComputeResources();
		}
		if (!isSupported)
		{
			ReportAutoDisable();
		}
		return isSupported;
	}

	private void OnEnable()
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		Camera component = ((Component)this).GetComponent<Camera>();
		component.depthTextureMode = (DepthTextureMode)(component.depthTextureMode | 1);
	}

	private void OnDisable()
	{
		ReleaseComputeResources();
		if (Object.op_Implicit((Object)(object)dofHdrMaterial))
		{
			Object.DestroyImmediate((Object)(object)dofHdrMaterial);
		}
		dofHdrMaterial = null;
		if (Object.op_Implicit((Object)(object)dx11bokehMaterial))
		{
			Object.DestroyImmediate((Object)(object)dx11bokehMaterial);
		}
		dx11bokehMaterial = null;
	}

	private void ReleaseComputeResources()
	{
		if (cbDrawArgs != null)
		{
			cbDrawArgs.Release();
		}
		cbDrawArgs = null;
		if (cbPoints != null)
		{
			cbPoints.Release();
		}
		cbPoints = null;
	}

	private void CreateComputeResources()
	{
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Expected O, but got Unknown
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Expected O, but got Unknown
		if (cbDrawArgs == null)
		{
			cbDrawArgs = new ComputeBuffer(1, 16, (ComputeBufferType)256);
			int[] data = new int[4] { 0, 1, 0, 0 };
			cbDrawArgs.SetData((Array)data);
		}
		if (cbPoints == null)
		{
			cbPoints = new ComputeBuffer(90000, 28, (ComputeBufferType)2);
		}
	}

	private float FocalDistance01(float worldDist)
	{
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		return ((Component)this).GetComponent<Camera>().WorldToViewportPoint((worldDist - ((Component)this).GetComponent<Camera>().nearClipPlane) * ((Component)((Component)this).GetComponent<Camera>()).transform.forward + ((Component)((Component)this).GetComponent<Camera>()).transform.position).z / (((Component)this).GetComponent<Camera>().farClipPlane - ((Component)this).GetComponent<Camera>().nearClipPlane);
	}

	private void WriteCoc(RenderTexture fromTo, bool fgDilate)
	{
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		dofHdrMaterial.SetTexture("_FgOverlap", (Texture)null);
		KeywordUtil.EnsureKeywordState(dofHdrMaterial, "FORCE_ONLY_FAR_BLUR", forceOnlyFarBlur);
		if (nearBlur && fgDilate)
		{
			int num = ((Texture)fromTo).width / 2;
			int num2 = ((Texture)fromTo).height / 2;
			RenderTexture temporary = RenderTexture.GetTemporary(num, num2, 0, fromTo.format);
			Graphics.Blit((Texture)(object)fromTo, temporary, dofHdrMaterial, 4);
			float num3 = internalBlurWidth * foregroundOverlap;
			dofHdrMaterial.SetVector("_Offsets", new Vector4(0f, num3, 0f, num3));
			RenderTexture temporary2 = RenderTexture.GetTemporary(num, num2, 0, fromTo.format);
			Graphics.Blit((Texture)(object)temporary, temporary2, dofHdrMaterial, 2);
			RenderTexture.ReleaseTemporary(temporary);
			dofHdrMaterial.SetVector("_Offsets", new Vector4(num3, 0f, 0f, num3));
			temporary = RenderTexture.GetTemporary(num, num2, 0, fromTo.format);
			Graphics.Blit((Texture)(object)temporary2, temporary, dofHdrMaterial, 2);
			RenderTexture.ReleaseTemporary(temporary2);
			dofHdrMaterial.SetTexture("_FgOverlap", (Texture)(object)temporary);
			fromTo.MarkRestoreExpected();
			Graphics.Blit((Texture)(object)fromTo, fromTo, dofHdrMaterial, 13);
			RenderTexture.ReleaseTemporary(temporary);
		}
		else
		{
			fromTo.MarkRestoreExpected();
			Graphics.Blit((Texture)(object)fromTo, fromTo, dofHdrMaterial, 0);
		}
	}

	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Invalid comparison between Unknown and I4
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0965: Unknown result type (might be due to invalid IL or missing references)
		//IL_0982: Unknown result type (might be due to invalid IL or missing references)
		//IL_052a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0547: Unknown result type (might be due to invalid IL or missing references)
		//IL_0590: Unknown result type (might be due to invalid IL or missing references)
		//IL_05ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_05e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0620: Unknown result type (might be due to invalid IL or missing references)
		//IL_06cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0657: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a0f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a63: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a83: Unknown result type (might be due to invalid IL or missing references)
		//IL_0a8e: Unknown result type (might be due to invalid IL or missing references)
		//IL_09d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_07af: Unknown result type (might be due to invalid IL or missing references)
		//IL_07e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_087b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0880: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_08f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0734: Unknown result type (might be due to invalid IL or missing references)
		//IL_0766: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0210: Unknown result type (might be due to invalid IL or missing references)
		//IL_024a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0283: Unknown result type (might be due to invalid IL or missing references)
		//IL_030d: Unknown result type (might be due to invalid IL or missing references)
		//IL_03ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0438: Unknown result type (might be due to invalid IL or missing references)
		//IL_04ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_04d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0374: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a6: Unknown result type (might be due to invalid IL or missing references)
		if (!CheckResources())
		{
			Graphics.Blit((Texture)(object)source, destination);
			return;
		}
		RenderTexture val = null;
		if ((int)source.format != 2)
		{
			val = RenderTexture.GetTemporary(((Texture)source).width, ((Texture)source).height, 0, (RenderTextureFormat)2);
			Graphics.Blit((Texture)(object)source, val);
			source = val;
		}
		if (aperture < 0f)
		{
			aperture = 0f;
		}
		if (maxBlurSize < 0.1f)
		{
			maxBlurSize = 0.1f;
		}
		focalSize = Mathf.Clamp(focalSize, 0f, 2f);
		internalBlurWidth = Mathf.Max(maxBlurSize, 0f);
		focalDistance01 = (Object.op_Implicit((Object)(object)focalTransform) ? (((Component)this).GetComponent<Camera>().WorldToViewportPoint(focalTransform.position).z / ((Component)this).GetComponent<Camera>().farClipPlane) : FocalDistance01(focalLength));
		dofHdrMaterial.SetVector("_CurveParams", new Vector4(1f, focalSize, aperture / 10f, focalDistance01));
		RenderTexture val2 = null;
		RenderTexture val3 = null;
		RenderTexture val4 = null;
		RenderTexture val5 = null;
		float num = internalBlurWidth * foregroundOverlap;
		if (visualizeFocus)
		{
			WriteCoc(source, fgDilate: true);
			Graphics.Blit((Texture)(object)source, destination, dofHdrMaterial, 16);
		}
		else if (blurType == BlurType.DX11 && Object.op_Implicit((Object)(object)dx11bokehMaterial))
		{
			if (highResolution)
			{
				internalBlurWidth = ((internalBlurWidth < 0.1f) ? 0.1f : internalBlurWidth);
				num = internalBlurWidth * foregroundOverlap;
				val2 = RenderTexture.GetTemporary(((Texture)source).width, ((Texture)source).height, 0, source.format);
				RenderTexture temporary = RenderTexture.GetTemporary(((Texture)source).width, ((Texture)source).height, 0, source.format);
				WriteCoc(source, fgDilate: false);
				val4 = RenderTexture.GetTemporary(((Texture)source).width >> 1, ((Texture)source).height >> 1, 0, source.format);
				val5 = RenderTexture.GetTemporary(((Texture)source).width >> 1, ((Texture)source).height >> 1, 0, source.format);
				Graphics.Blit((Texture)(object)source, val4, dofHdrMaterial, 15);
				dofHdrMaterial.SetVector("_Offsets", new Vector4(0f, 1.5f, 0f, 1.5f));
				Graphics.Blit((Texture)(object)val4, val5, dofHdrMaterial, 19);
				dofHdrMaterial.SetVector("_Offsets", new Vector4(1.5f, 0f, 0f, 1.5f));
				Graphics.Blit((Texture)(object)val5, val4, dofHdrMaterial, 19);
				if (nearBlur)
				{
					Graphics.Blit((Texture)(object)source, val5, dofHdrMaterial, 4);
				}
				dx11bokehMaterial.SetTexture("_BlurredColor", (Texture)(object)val4);
				dx11bokehMaterial.SetFloat("_SpawnHeuristic", dx11SpawnHeuristic);
				dx11bokehMaterial.SetVector("_BokehParams", new Vector4(dx11BokehScale, dx11BokehIntensity, Mathf.Clamp(dx11BokehThreshold, 0.005f, 4f), internalBlurWidth));
				dx11bokehMaterial.SetTexture("_FgCocMask", (Texture)(object)(nearBlur ? val5 : null));
				Graphics.SetRandomWriteTarget(1, cbPoints);
				Graphics.Blit((Texture)(object)source, val2, dx11bokehMaterial, 0);
				Graphics.ClearRandomWriteTargets();
				if (nearBlur)
				{
					dofHdrMaterial.SetVector("_Offsets", new Vector4(0f, num, 0f, num));
					Graphics.Blit((Texture)(object)val5, val4, dofHdrMaterial, 2);
					dofHdrMaterial.SetVector("_Offsets", new Vector4(num, 0f, 0f, num));
					Graphics.Blit((Texture)(object)val4, val5, dofHdrMaterial, 2);
					Graphics.Blit((Texture)(object)val5, val2, dofHdrMaterial, 3);
				}
				Graphics.Blit((Texture)(object)val2, temporary, dofHdrMaterial, 20);
				dofHdrMaterial.SetVector("_Offsets", new Vector4(internalBlurWidth, 0f, 0f, internalBlurWidth));
				Graphics.Blit((Texture)(object)val2, source, dofHdrMaterial, 5);
				dofHdrMaterial.SetVector("_Offsets", new Vector4(0f, internalBlurWidth, 0f, internalBlurWidth));
				Graphics.Blit((Texture)(object)source, temporary, dofHdrMaterial, 21);
				Graphics.SetRenderTarget(temporary);
				ComputeBuffer.CopyCount(cbPoints, cbDrawArgs, 0);
				dx11bokehMaterial.SetBuffer("pointBuffer", cbPoints);
				dx11bokehMaterial.SetTexture("_MainTex", (Texture)(object)dx11BokehTexture);
				dx11bokehMaterial.SetVector("_Screen", Vector4.op_Implicit(new Vector3(1f / (1f * (float)((Texture)source).width), 1f / (1f * (float)((Texture)source).height), internalBlurWidth)));
				dx11bokehMaterial.SetPass(2);
				Graphics.DrawProceduralIndirectNow((MeshTopology)5, cbDrawArgs, 0);
				Graphics.Blit((Texture)(object)temporary, destination);
				RenderTexture.ReleaseTemporary(temporary);
				RenderTexture.ReleaseTemporary(val4);
				RenderTexture.ReleaseTemporary(val5);
			}
			else
			{
				val2 = RenderTexture.GetTemporary(((Texture)source).width >> 1, ((Texture)source).height >> 1, 0, source.format);
				val3 = RenderTexture.GetTemporary(((Texture)source).width >> 1, ((Texture)source).height >> 1, 0, source.format);
				num = internalBlurWidth * foregroundOverlap;
				WriteCoc(source, fgDilate: false);
				((Texture)source).filterMode = (FilterMode)1;
				Graphics.Blit((Texture)(object)source, val2, dofHdrMaterial, 6);
				val4 = RenderTexture.GetTemporary(((Texture)val2).width >> 1, ((Texture)val2).height >> 1, 0, val2.format);
				val5 = RenderTexture.GetTemporary(((Texture)val2).width >> 1, ((Texture)val2).height >> 1, 0, val2.format);
				Graphics.Blit((Texture)(object)val2, val4, dofHdrMaterial, 15);
				dofHdrMaterial.SetVector("_Offsets", new Vector4(0f, 1.5f, 0f, 1.5f));
				Graphics.Blit((Texture)(object)val4, val5, dofHdrMaterial, 19);
				dofHdrMaterial.SetVector("_Offsets", new Vector4(1.5f, 0f, 0f, 1.5f));
				Graphics.Blit((Texture)(object)val5, val4, dofHdrMaterial, 19);
				RenderTexture val6 = null;
				if (nearBlur)
				{
					val6 = RenderTexture.GetTemporary(((Texture)source).width >> 1, ((Texture)source).height >> 1, 0, source.format);
					Graphics.Blit((Texture)(object)source, val6, dofHdrMaterial, 4);
				}
				dx11bokehMaterial.SetTexture("_BlurredColor", (Texture)(object)val4);
				dx11bokehMaterial.SetFloat("_SpawnHeuristic", dx11SpawnHeuristic);
				dx11bokehMaterial.SetVector("_BokehParams", new Vector4(dx11BokehScale, dx11BokehIntensity, Mathf.Clamp(dx11BokehThreshold, 0.005f, 4f), internalBlurWidth));
				dx11bokehMaterial.SetTexture("_FgCocMask", (Texture)(object)val6);
				Graphics.SetRandomWriteTarget(1, cbPoints);
				Graphics.Blit((Texture)(object)val2, val3, dx11bokehMaterial, 0);
				Graphics.ClearRandomWriteTargets();
				RenderTexture.ReleaseTemporary(val4);
				RenderTexture.ReleaseTemporary(val5);
				if (nearBlur)
				{
					dofHdrMaterial.SetVector("_Offsets", new Vector4(0f, num, 0f, num));
					Graphics.Blit((Texture)(object)val6, val2, dofHdrMaterial, 2);
					dofHdrMaterial.SetVector("_Offsets", new Vector4(num, 0f, 0f, num));
					Graphics.Blit((Texture)(object)val2, val6, dofHdrMaterial, 2);
					Graphics.Blit((Texture)(object)val6, val3, dofHdrMaterial, 3);
				}
				dofHdrMaterial.SetVector("_Offsets", new Vector4(internalBlurWidth, 0f, 0f, internalBlurWidth));
				Graphics.Blit((Texture)(object)val3, val2, dofHdrMaterial, 5);
				dofHdrMaterial.SetVector("_Offsets", new Vector4(0f, internalBlurWidth, 0f, internalBlurWidth));
				Graphics.Blit((Texture)(object)val2, val3, dofHdrMaterial, 5);
				Graphics.SetRenderTarget(val3);
				ComputeBuffer.CopyCount(cbPoints, cbDrawArgs, 0);
				dx11bokehMaterial.SetBuffer("pointBuffer", cbPoints);
				dx11bokehMaterial.SetTexture("_MainTex", (Texture)(object)dx11BokehTexture);
				dx11bokehMaterial.SetVector("_Screen", Vector4.op_Implicit(new Vector3(1f / (1f * (float)((Texture)val3).width), 1f / (1f * (float)((Texture)val3).height), internalBlurWidth)));
				dx11bokehMaterial.SetPass(1);
				Graphics.DrawProceduralIndirectNow((MeshTopology)5, cbDrawArgs, 0);
				dofHdrMaterial.SetTexture("_LowRez", (Texture)(object)val3);
				dofHdrMaterial.SetTexture("_FgOverlap", (Texture)(object)val6);
				dofHdrMaterial.SetVector("_Offsets", 1f * (float)((Texture)source).width / (1f * (float)((Texture)val3).width) * internalBlurWidth * Vector4.one);
				Graphics.Blit((Texture)(object)source, destination, dofHdrMaterial, 9);
				if (Object.op_Implicit((Object)(object)val6))
				{
					RenderTexture.ReleaseTemporary(val6);
				}
			}
		}
		else
		{
			((Texture)source).filterMode = (FilterMode)1;
			if (highResolution)
			{
				internalBlurWidth *= 2f;
			}
			WriteCoc(source, fgDilate: true);
			val2 = RenderTexture.GetTemporary(((Texture)source).width >> 1, ((Texture)source).height >> 1, 0, source.format);
			val3 = RenderTexture.GetTemporary(((Texture)source).width >> 1, ((Texture)source).height >> 1, 0, source.format);
			int num2 = ((blurSampleCount == BlurSampleCount.High || blurSampleCount == BlurSampleCount.Medium) ? 17 : 11);
			if (highResolution)
			{
				dofHdrMaterial.SetVector("_Offsets", new Vector4(0f, internalBlurWidth, 0.025f, internalBlurWidth));
				Graphics.Blit((Texture)(object)source, destination, dofHdrMaterial, num2);
			}
			else
			{
				dofHdrMaterial.SetVector("_Offsets", new Vector4(0f, internalBlurWidth, 0.1f, internalBlurWidth));
				Graphics.Blit((Texture)(object)source, val2, dofHdrMaterial, 6);
				Graphics.Blit((Texture)(object)val2, val3, dofHdrMaterial, num2);
				dofHdrMaterial.SetTexture("_LowRez", (Texture)(object)val3);
				dofHdrMaterial.SetTexture("_FgOverlap", (Texture)null);
				dofHdrMaterial.SetVector("_Offsets", Vector4.one * (1f * (float)((Texture)source).width / (1f * (float)((Texture)val3).width)) * internalBlurWidth);
				Graphics.Blit((Texture)(object)source, destination, dofHdrMaterial, (blurSampleCount == BlurSampleCount.High) ? 18 : 12);
			}
		}
		if (Object.op_Implicit((Object)(object)val2))
		{
			RenderTexture.ReleaseTemporary(val2);
		}
		if (Object.op_Implicit((Object)(object)val3))
		{
			RenderTexture.ReleaseTemporary(val3);
		}
		if (Object.op_Implicit((Object)(object)val))
		{
			RenderTexture.ReleaseTemporary(val);
		}
	}
}
