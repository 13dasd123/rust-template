using UnityEngine;

[ExecuteInEditMode]
[AddComponentMenu("Colorful/Convolution Matrix 3x3")]
public class CC_Convolution3x3 : CC_Base
{
	public Vector3 kernelTop = Vector3.zero;

	public Vector3 kernelMiddle = Vector3.up;

	public Vector3 kernelBottom = Vector3.zero;

	public float divisor = 1f;

	public float amount = 1f;

	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		base.material.SetFloat("_px", 1f / (float)Screen.width);
		base.material.SetFloat("_py", 1f / (float)Screen.height);
		base.material.SetFloat("_amount", amount);
		base.material.SetVector("_kernelT", Vector4.op_Implicit(kernelTop / divisor));
		base.material.SetVector("_kernelM", Vector4.op_Implicit(kernelMiddle / divisor));
		base.material.SetVector("_kernelB", Vector4.op_Implicit(kernelBottom / divisor));
		Graphics.Blit((Texture)(object)source, destination, base.material);
	}
}
