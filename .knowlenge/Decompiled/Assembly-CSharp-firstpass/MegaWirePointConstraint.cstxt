using System;
using UnityEngine;

[Serializable]
public class MegaWirePointConstraint : MegaWireConstraint
{
	public int p1;

	public Vector3 offset;

	public Transform obj;

	public Vector3 ps;

	public Vector3 tp;

	public MegaWirePointConstraint(int _p1, Transform trans, Vector3 off)
	{
		offset = off;
		p1 = _p1;
		obj = trans;
		active = true;
		reactivate = 0f;
		rtime = 0f;
	}

	private Vector3 easeInOutSine(Vector3 start, Vector3 end, float value)
	{
		end -= start;
		return -end / 2f * (Mathf.Cos((float)Math.PI * value / 1f) - 1f) + start;
	}

	public void ReActivate(MegaWireConnection soft, float t)
	{
		tp = obj.TransformPoint(offset);
		if (!active && reactivate > 0f)
		{
			reactivate -= 0.01f;
			soft.masses[p1].pos = easeInOutSine(tp, ps, reactivate / rtime);
			if (reactivate < 0f)
			{
				reactivate = 0f;
				active = true;
			}
		}
	}

	public override void Apply(MegaWireConnection soft)
	{
		if (active)
		{
			soft.masses[p1].pos = tp;
		}
	}
}
