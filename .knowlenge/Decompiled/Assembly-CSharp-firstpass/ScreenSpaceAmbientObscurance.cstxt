using UnityEngine;
using UnityStandardAssets.ImageEffects;

[ExecuteInEditMode]
[RequireComponent(typeof(Camera))]
[AddComponentMenu("Image Effects/Rendering/Screen Space Ambient Obscurance")]
internal class ScreenSpaceAmbientObscurance : PostEffectsBase
{
	[Range(0f, 3f)]
	public float intensity = 0.5f;

	[Range(0.1f, 3f)]
	public float radius = 0.2f;

	[Range(0f, 3f)]
	public int blurIterations = 1;

	[Range(0f, 5f)]
	public float blurFilterDistance = 1.25f;

	[Range(0f, 1f)]
	public int downsample;

	public Texture2D rand;

	public Shader aoShader;

	private Material aoMaterial;

	public override bool CheckResources()
	{
		CheckSupport(needDepth: true);
		aoMaterial = CheckShaderAndCreateMaterial(aoShader, aoMaterial);
		if (!isSupported)
		{
			ReportAutoDisable();
		}
		return isSupported;
	}

	private void OnDisable()
	{
		if (Object.op_Implicit((Object)(object)aoMaterial))
		{
			Object.DestroyImmediate((Object)(object)aoMaterial);
		}
		aoMaterial = null;
	}

	[ImageEffectOpaque]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01eb: Unknown result type (might be due to invalid IL or missing references)
		if (!CheckResources())
		{
			Graphics.Blit((Texture)(object)source, destination);
			return;
		}
		Matrix4x4 projectionMatrix = ((Component)this).GetComponent<Camera>().projectionMatrix;
		Matrix4x4 inverse = ((Matrix4x4)(ref projectionMatrix)).inverse;
		Vector4 val = default(Vector4);
		((Vector4)(ref val))..ctor(-2f / ((float)Screen.width * ((Matrix4x4)(ref projectionMatrix))[0]), -2f / ((float)Screen.height * ((Matrix4x4)(ref projectionMatrix))[5]), (1f - ((Matrix4x4)(ref projectionMatrix))[2]) / ((Matrix4x4)(ref projectionMatrix))[0], (1f + ((Matrix4x4)(ref projectionMatrix))[6]) / ((Matrix4x4)(ref projectionMatrix))[5]);
		aoMaterial.SetVector("_ProjInfo", val);
		aoMaterial.SetMatrix("_ProjectionInv", inverse);
		aoMaterial.SetTexture("_Rand", (Texture)(object)rand);
		aoMaterial.SetFloat("_Radius", radius);
		aoMaterial.SetFloat("_Radius2", radius * radius);
		aoMaterial.SetFloat("_Intensity", intensity);
		aoMaterial.SetFloat("_BlurFilterDistance", blurFilterDistance);
		int width = ((Texture)source).width;
		int height = ((Texture)source).height;
		RenderTexture val2 = RenderTexture.GetTemporary(width >> downsample, height >> downsample);
		Graphics.Blit((Texture)(object)source, val2, aoMaterial, 0);
		if (downsample > 0)
		{
			RenderTexture temporary = RenderTexture.GetTemporary(width, height);
			Graphics.Blit((Texture)(object)val2, temporary, aoMaterial, 4);
			RenderTexture.ReleaseTemporary(val2);
			val2 = temporary;
		}
		for (int i = 0; i < blurIterations; i++)
		{
			aoMaterial.SetVector("_Axis", Vector4.op_Implicit(new Vector2(1f, 0f)));
			RenderTexture temporary = RenderTexture.GetTemporary(width, height);
			Graphics.Blit((Texture)(object)val2, temporary, aoMaterial, 1);
			RenderTexture.ReleaseTemporary(val2);
			aoMaterial.SetVector("_Axis", Vector4.op_Implicit(new Vector2(0f, 1f)));
			val2 = RenderTexture.GetTemporary(width, height);
			Graphics.Blit((Texture)(object)temporary, val2, aoMaterial, 1);
			RenderTexture.ReleaseTemporary(temporary);
		}
		aoMaterial.SetTexture("_AOTex", (Texture)(object)val2);
		Graphics.Blit((Texture)(object)source, destination, aoMaterial, 2);
		RenderTexture.ReleaseTemporary(val2);
	}
}
