using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Rendering;
using UnityEngine.Rendering.PostProcessing;
using UnityEngine.VR;

public sealed class PostProcessRenderContext
{
	private Camera m_Camera;

	internal PropertySheet uberSheet;

	internal Texture autoExposureTexture;

	internal LogHistogram logHistogram;

	internal Texture logLut;

	internal AutoExposure autoExposure;

	public Camera camera
	{
		get
		{
			return m_Camera;
		}
		set
		{
			m_Camera = value;
			if (VRSettings.isDeviceActive)
			{
				width = VRSettings.eyeTextureWidth;
				height = VRSettings.eyeTextureHeight;
				if (camera.stereoActiveEye == Camera.MonoOrStereoscopicEye.Right)
				{
					xrActiveEye = 1;
				}
				xrSingleEyeWidth = VRSettings.eyeTextureWidth;
				xrSingleEyeHeight = VRSettings.eyeTextureHeight;
			}
			else
			{
				width = m_Camera.pixelWidth;
				height = m_Camera.pixelHeight;
				xrSingleEyeWidth = width;
			}
		}
	}

	public CommandBuffer command { get; set; }

	public RenderTargetIdentifier source { get; set; }

	public RenderTargetIdentifier destination { get; set; }

	public RenderTextureFormat sourceFormat { get; set; }

	public bool flip { get; set; }

	public PostProcessResources resources { get; internal set; }

	public PropertySheetFactory propertySheets { get; internal set; }

	public Dictionary<string, object> userData { get; private set; }

	public PostProcessDebugLayer debugLayer { get; internal set; }

	public int width { get; private set; }

	public int height { get; private set; }

	public int xrActiveEye { get; private set; }

	public int xrSingleEyeWidth { get; private set; }

	public int xrSingleEyeHeight { get; private set; }

	public bool isSceneView { get; internal set; }

	public PostProcessLayer.Antialiasing antialiasing { get; internal set; }

	public TemporalAntialiasing temporalAntialiasing { get; internal set; }

	public void Reset()
	{
		m_Camera = null;
		width = 0;
		height = 0;
		xrActiveEye = 0;
		xrSingleEyeWidth = 0;
		xrSingleEyeHeight = 0;
		command = null;
		source = 0;
		destination = 0;
		sourceFormat = RenderTextureFormat.ARGB32;
		flip = false;
		resources = null;
		propertySheets = null;
		debugLayer = null;
		isSceneView = false;
		antialiasing = PostProcessLayer.Antialiasing.None;
		temporalAntialiasing = null;
		uberSheet = null;
		autoExposureTexture = null;
		logLut = null;
		autoExposure = null;
		if (userData == null)
		{
			userData = new Dictionary<string, object>();
		}
		userData.Clear();
	}

	public bool IsTemporalAntialiasingActive()
	{
		return antialiasing == PostProcessLayer.Antialiasing.TemporalAntialiasing && !isSceneView && temporalAntialiasing.IsSupported();
	}

	public bool IsDebugOverlayEnabled(DebugOverlay overlay)
	{
		return debugLayer.debugOverlay == overlay;
	}

	public void PushDebugOverlay(CommandBuffer cmd, RenderTargetIdentifier source, PropertySheet sheet, int pass)
	{
		debugLayer.PushDebugOverlay(cmd, source, sheet, pass);
	}
}
