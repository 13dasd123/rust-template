using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using ProtoBuf;
using Rust.Demo;
using UnityEngine;

public class Indexer
{
	public class Entity
	{
		public Entity Init;

		public Entity Data;

		public Vector3 Position;

		public Vector3 Rotation;

		public NetworkableId UId => Init.baseNetworkable.uid;

		public Entity Copy()
		{
			//IL_001f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0024: Unknown result type (might be due to invalid IL or missing references)
			//IL_002b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0030: Unknown result type (might be due to invalid IL or missing references)
			return new Entity
			{
				Init = Init,
				Data = Data,
				Position = Position,
				Rotation = Rotation
			};
		}
	}

	public class Keyframe
	{
		public long Position;

		public Entity[] Entities;

		public NetworkableId[] Updated;

		public Dictionary<NetworkableId, Entity> EntityDict;

		public void Init()
		{
			EntityDict = Entities.ToDictionary((Entity x) => x.UId, (Entity x) => x);
		}

		public bool HasEntity(NetworkableId iD)
		{
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			return EntityDict.ContainsKey(iD);
		}
	}

	private List<Keyframe> keyframes = new List<Keyframe>();

	private long LastPacketTime;

	private long PacketCount;

	private Dictionary<NetworkableId, Entity> currentEnts = new Dictionary<NetworkableId, Entity>();

	private long NextKeyframe;

	private List<NetworkableId> Updated = new List<NetworkableId>();

	public TimeSpan TotalLength => TimeSpan.FromMilliseconds(LastPacketTime);

	public long Interval => 1000L;

	internal Indexer(Reader reader)
	{
		reader.Progress(long.MaxValue);
		while (!reader.IsFinished)
		{
			Packet packet = reader.ReadPacket();
			if (!packet.isValid)
			{
				break;
			}
			try
			{
				TryCreateKeyframe(packet);
				ProcessPacket(packet);
			}
			catch (Exception ex)
			{
				Debug.LogException(ex);
			}
		}
		reader.ResetToStart();
		if (keyframes.Count > 1)
		{
			keyframes[0].Entities = keyframes[1].Entities;
			keyframes[0].EntityDict = keyframes[1].EntityDict;
			keyframes[0].Updated = keyframes[1].Updated;
		}
		Debug.Log((object)$"Index created {keyframes.Count} keyframes");
	}

	private void ProcessPacket(Packet packet)
	{
		PacketCount++;
		LastPacketTime = Math.Max(LastPacketTime, packet.Time);
		using BinaryReader binaryReader = new BinaryReader(new MemoryStream(packet.Data));
		byte b = binaryReader.ReadByte();
		if (b > 140)
		{
			switch ((byte)(b - 140))
			{
			case 5:
				Entities(binaryReader);
				break;
			case 9:
				RpcMessage(binaryReader);
				break;
			case 10:
				EntityPosition(binaryReader);
				break;
			case 6:
				EntityDestroy(binaryReader);
				break;
			}
		}
	}

	private void EntityUpdated(NetworkableId ent)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		if (!Updated.Contains(ent))
		{
			Updated.Add(ent);
		}
	}

	private void EntityPosition(BinaryReader reader)
	{
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		NetworkableId val = default(NetworkableId);
		((NetworkableId)(ref val))..ctor(reader.ReadUInt64());
		Vector3 position = default(Vector3);
		((Vector3)(ref position))..ctor(reader.ReadSingle(), reader.ReadSingle(), reader.ReadSingle());
		Vector3 rotation = default(Vector3);
		((Vector3)(ref rotation))..ctor(reader.ReadSingle(), reader.ReadSingle(), reader.ReadSingle());
		EntityUpdated(val);
		if (currentEnts.TryGetValue(val, out var value))
		{
			value.Position = position;
			value.Rotation = rotation;
		}
	}

	private void RpcMessage(BinaryReader reader)
	{
	}

	internal Keyframe LookupKeyframeForTime(long time)
	{
		int index = Mathf.FloorToInt((float)(time / Interval));
		return GetKeyframe(index);
	}

	internal Keyframe GetKeyframe(int index)
	{
		index = Mathf.Clamp(index, 0, keyframes.Count - 1);
		return keyframes[index];
	}

	internal HashSet<NetworkableId> GetChangedEntities(long from, long to)
	{
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		TimeWarning val = TimeWarning.New("GetChangedEntities", 0);
		try
		{
			int num = Mathf.Min((int)from, (int)to) / (int)Interval - 1;
			int num2 = Mathf.Max((int)from, (int)to) / (int)Interval + 1;
			HashSet<NetworkableId> hashSet = new HashSet<NetworkableId>();
			for (int i = num; i <= num2; i++)
			{
				Keyframe keyframe = GetKeyframe(i);
				for (int j = 0; j < keyframe.Updated.Length; j++)
				{
					if (!hashSet.Contains(keyframe.Updated[j]))
					{
						hashSet.Add(keyframe.Updated[j]);
					}
				}
			}
			return hashSet;
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	private void EntityDestroy(BinaryReader reader)
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		NetworkableId val = default(NetworkableId);
		((NetworkableId)(ref val))..ctor((ulong)reader.ReadUInt32());
		currentEnts.Remove(val);
		EntityUpdated(val);
	}

	private void Entities(BinaryReader reader)
	{
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		reader.ReadUInt32();
		Entity val = Entity.Deserialize(reader.BaseStream);
		EntityUpdated(val.baseNetworkable.uid);
		if (!currentEnts.TryGetValue(val.baseNetworkable.uid, out var value))
		{
			value = new Entity();
			value.Init = val;
			currentEnts[value.UId] = value;
		}
		value.Data = val;
	}

	private void TryCreateKeyframe(Packet packet)
	{
		if (packet.Time >= NextKeyframe)
		{
			NextKeyframe += Interval;
			Keyframe keyframe = new Keyframe
			{
				Position = packet.Position,
				Entities = currentEnts.Select((KeyValuePair<NetworkableId, Entity> x) => x.Value.Copy()).ToArray(),
				Updated = Updated.ToArray()
			};
			keyframe.Init();
			keyframes.Add(keyframe);
			Updated.Clear();
		}
	}
}
