using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;
using Facepunch.Sqlite;
using UnityEngine;

public class Database
{
	private IntPtr _connection;

	private bool IsConnectionOpen { get; set; }

	public int AffectedRows
	{
		get
		{
			if (!IsConnectionOpen)
			{
				return 0;
			}
			return Facepunch.Sqlite.Interop.sqlite3_changes(_connection);
		}
	}

	public void Open(string path, bool fastMode = false)
	{
		if (IsConnectionOpen)
		{
			throw new SqliteException("There is already an open connection");
		}
		if (Facepunch.Sqlite.Interop.sqlite3_open(path, out _connection) != 0)
		{
			throw new SqliteException("Could not open database file: " + path);
		}
		Facepunch.Sqlite.Interop.sqlite3_extended_result_codes(_connection, 1);
		IsConnectionOpen = true;
		Execute("PRAGMA locking_mode = EXCLUSIVE");
		if (fastMode)
		{
			Execute("PRAGMA journal_mode = WAL");
		}
		Debug.Log("Database " + Path.GetFileName(path) + " opened, SQLite version: " + QueryString("select sqlite_version();", ""));
	}

	public bool TableExists(string name)
	{
		return QueryInt("select count(type) from sqlite_master where type='table' and name=?;", name) > 0;
	}

	public bool IndexExists(string tableName, string indexName)
	{
		return QueryInt("select count(type) from sqlite_master where type='index' and tbl_name=? and name=?;", tableName, indexName) > 0;
	}

	public bool ColumnExists(string tableName, string columnName)
	{
		return QueryInt("select count(*) from sqlite_master where tbl_name=? and sql like ?;", tableName, "% " + columnName + " %") > 0;
	}

	public void Close()
	{
		if (IsConnectionOpen)
		{
			Facepunch.Sqlite.Interop.sqlite3_close(_connection);
		}
		IsConnectionOpen = false;
	}

	public void Execute(string query)
	{
		IntPtr stmHandle = Prepare(query);
		ExecuteQuery(stmHandle);
	}

	public void Execute<T1>(string query, T1 arg1)
	{
		IntPtr stmHandle = Prepare(query);
		Bind(stmHandle, 1, arg1);
		ExecuteQuery(stmHandle);
	}

	public void Execute<T1, T2>(string query, T1 arg1, T2 arg2)
	{
		IntPtr stmHandle = Prepare(query);
		Bind(stmHandle, 1, arg1);
		Bind(stmHandle, 2, arg2);
		ExecuteQuery(stmHandle);
	}

	public void Execute<T1, T2, T3>(string query, T1 arg1, T2 arg2, T3 arg3)
	{
		IntPtr stmHandle = Prepare(query);
		Bind(stmHandle, 1, arg1);
		Bind(stmHandle, 2, arg2);
		Bind(stmHandle, 3, arg3);
		ExecuteQuery(stmHandle);
	}

	public void Execute<T1, T2, T3, T4>(string query, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
	{
		IntPtr stmHandle = Prepare(query);
		Bind(stmHandle, 1, arg1);
		Bind(stmHandle, 2, arg2);
		Bind(stmHandle, 3, arg3);
		Bind(stmHandle, 4, arg4);
		ExecuteQuery(stmHandle);
	}

	public void Execute<T1, T2, T3, T4, T5>(string query, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
	{
		IntPtr stmHandle = Prepare(query);
		Bind(stmHandle, 1, arg1);
		Bind(stmHandle, 2, arg2);
		Bind(stmHandle, 3, arg3);
		Bind(stmHandle, 4, arg4);
		Bind(stmHandle, 5, arg5);
		ExecuteQuery(stmHandle);
	}

	protected unsafe static void Bind<T>(IntPtr stmHandle, int index, T value)
	{
		if (typeof(T) == typeof(string))
		{
			fixed (char* value2 = GenericsUtil.Cast<T, string>(value))
			{
				Facepunch.Sqlite.Interop.sqlite3_bind_text16(stmHandle, index, new IntPtr(value2), -1, Facepunch.Sqlite.Interop.SQLITE_TRANSIENT);
			}
		}
		else if (typeof(T) == typeof(uint))
		{
			uint num = GenericsUtil.Cast<T, uint>(value);
			Facepunch.Sqlite.Interop.sqlite3_bind_int64(stmHandle, index, num);
		}
		else if (typeof(T) == typeof(int))
		{
			int num2 = GenericsUtil.Cast<T, int>(value);
			Facepunch.Sqlite.Interop.sqlite3_bind_int64(stmHandle, index, num2);
		}
		else if (typeof(T) == typeof(long))
		{
			long val = GenericsUtil.Cast<T, long>(value);
			Facepunch.Sqlite.Interop.sqlite3_bind_int64(stmHandle, index, val);
		}
		else if (typeof(T) == typeof(ulong))
		{
			ulong val2 = GenericsUtil.Cast<T, ulong>(value);
			Facepunch.Sqlite.Interop.sqlite3_bind_int64(stmHandle, index, (long)val2);
		}
		else if (typeof(T) == typeof(float))
		{
			float num3 = GenericsUtil.Cast<T, float>(value);
			Facepunch.Sqlite.Interop.sqlite3_bind_double(stmHandle, index, num3);
		}
		else if (typeof(T) == typeof(double))
		{
			double val3 = GenericsUtil.Cast<T, double>(value);
			Facepunch.Sqlite.Interop.sqlite3_bind_double(stmHandle, index, val3);
		}
		else if (typeof(T) == typeof(Guid))
		{
			Guid guid = GenericsUtil.Cast<T, Guid>(value);
			Facepunch.Sqlite.Interop.sqlite3_bind_blob(stmHandle, index, new IntPtr(&guid), sizeof(Guid), Facepunch.Sqlite.Interop.SQLITE_TRANSIENT);
		}
		else if (typeof(T) == typeof(byte[]))
		{
			byte[] array = GenericsUtil.Cast<T, byte[]>(value);
			fixed (byte* ptr = array)
			{
				Facepunch.Sqlite.Interop.sqlite3_bind_blob(stmHandle, index, (IntPtr)ptr, array.Length, Facepunch.Sqlite.Interop.SQLITE_TRANSIENT);
			}
		}
		else
		{
			Facepunch.Sqlite.Interop.sqlite3_bind_null(stmHandle, index);
		}
	}

	protected unsafe static T GetColumnValue<T>(IntPtr stmHandle, int i)
	{
		int type = Facepunch.Sqlite.Interop.sqlite3_column_type(stmHandle, i);
		if (type == 5)
		{
			return default(T);
		}
		if (typeof(T) == typeof(uint))
		{
			if (type != 1)
			{
				throw TypeError();
			}
			return GenericsUtil.Cast<uint, T>((uint)Facepunch.Sqlite.Interop.sqlite3_column_int64(stmHandle, i));
		}
		if (typeof(T) == typeof(int))
		{
			if (type != 1)
			{
				throw TypeError();
			}
			return GenericsUtil.Cast<int, T>((int)Facepunch.Sqlite.Interop.sqlite3_column_int64(stmHandle, i));
		}
		if (typeof(T) == typeof(long))
		{
			if (type != 1)
			{
				throw TypeError();
			}
			return GenericsUtil.Cast<long, T>(Facepunch.Sqlite.Interop.sqlite3_column_int64(stmHandle, i));
		}
		if (typeof(T) == typeof(string))
		{
			if (type != 3)
			{
				throw TypeError();
			}
			return GenericsUtil.Cast<string, T>(Marshal.PtrToStringUni(Facepunch.Sqlite.Interop.sqlite3_column_text16(stmHandle, i)));
		}
		if (typeof(T) == typeof(float))
		{
			if (type != 2)
			{
				throw TypeError();
			}
			return GenericsUtil.Cast<float, T>((float)Facepunch.Sqlite.Interop.sqlite3_column_double(stmHandle, i));
		}
		if (typeof(T) == typeof(Guid))
		{
			if (type != 4)
			{
				throw TypeError();
			}
			IntPtr intPtr = Facepunch.Sqlite.Interop.sqlite3_column_blob(stmHandle, i);
			if (intPtr == IntPtr.Zero)
			{
				return default(T);
			}
			if (Facepunch.Sqlite.Interop.sqlite3_column_bytes(stmHandle, i) != sizeof(Guid))
			{
				throw new Exception("GUID BLOB is the wrong length");
			}
			Guid* ptr = (Guid*)(void*)intPtr;
			return GenericsUtil.Cast<Guid, T>(*ptr);
		}
		if (typeof(T) == typeof(byte[]))
		{
			if (type != 4)
			{
				throw TypeError();
			}
			IntPtr intPtr2 = Facepunch.Sqlite.Interop.sqlite3_column_blob(stmHandle, i);
			if (intPtr2 == IntPtr.Zero)
			{
				return default(T);
			}
			int num = Facepunch.Sqlite.Interop.sqlite3_column_bytes(stmHandle, i);
			if (num == 0)
			{
				return GenericsUtil.Cast<byte[], T>(Array.Empty<byte>());
			}
			byte[] array = new byte[num];
			Marshal.Copy(intPtr2, array, 0, num);
			return GenericsUtil.Cast<byte[], T>(array);
		}
		throw TypeError();
		Exception TypeError()
		{
			return new SqliteException("Cannot map SQLite type " + Facepunch.Sqlite.Interop.GetTypeName(type) + " to " + typeof(T).FullName);
		}
	}

	public int QueryInt(string query)
	{
		IntPtr stmHandle = Prepare(query);
		return ExecuteAndReadQueryResult<int>(stmHandle);
	}

	public int QueryInt<T1>(string query, T1 arg1)
	{
		IntPtr stmHandle = Prepare(query);
		Bind(stmHandle, 1, arg1);
		return ExecuteAndReadQueryResult<int>(stmHandle);
	}

	public int QueryInt<T1, T2>(string query, T1 arg1, T2 arg2)
	{
		IntPtr stmHandle = Prepare(query);
		Bind(stmHandle, 1, arg1);
		Bind(stmHandle, 2, arg2);
		return ExecuteAndReadQueryResult<int>(stmHandle);
	}

	public long QueryLong(string query)
	{
		IntPtr stmHandle = Prepare(query);
		return ExecuteAndReadQueryResult<long>(stmHandle);
	}

	public string QueryString<T1>(string query, T1 arg1)
	{
		IntPtr stmHandle = Prepare(query);
		Bind(stmHandle, 1, arg1);
		return ExecuteAndReadQueryResult<string>(stmHandle);
	}

	public string QueryString<T1, T2>(string query, T1 arg1, T2 arg2)
	{
		IntPtr stmHandle = Prepare(query);
		Bind(stmHandle, 1, arg1);
		Bind(stmHandle, 2, arg2);
		return ExecuteAndReadQueryResult<string>(stmHandle);
	}

	public byte[] QueryBlob<T1>(string query, T1 arg1)
	{
		IntPtr stmHandle = Prepare(query);
		Bind(stmHandle, 1, arg1);
		return ExecuteAndReadQueryResult<byte[]>(stmHandle);
	}

	public byte[] QueryBlob<T1, T2, T3, T4>(string query, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
	{
		IntPtr stmHandle = Prepare(query);
		Bind(stmHandle, 1, arg1);
		Bind(stmHandle, 2, arg2);
		Bind(stmHandle, 3, arg3);
		Bind(stmHandle, 4, arg4);
		return ExecuteAndReadQueryResult<byte[]>(stmHandle);
	}

	public void BeginTransaction()
	{
		Execute("BEGIN TRANSACTION");
	}

	public void Commit()
	{
		Execute("COMMIT");
	}

	public void Rollback()
	{
		Execute("ROLLBACK");
	}

	protected void ExecuteQuery(IntPtr stmHandle, bool finalize = true)
	{
		try
		{
			while (true)
			{
				int num = Facepunch.Sqlite.Interop.sqlite3_step(stmHandle);
				switch (num)
				{
				case 100:
					continue;
				case 0:
				case 101:
					return;
				}
				IntPtr ptr = Facepunch.Sqlite.Interop.sqlite3_errmsg(_connection);
				throw new SqliteException($"Could not execute SQL statement: {Marshal.PtrToStringAnsi(ptr)} ({num})");
			}
		}
		finally
		{
			FinalizeOrReset(stmHandle, finalize);
		}
	}

	protected T ExecuteAndReadQueryResult<T>(IntPtr stmHandle, bool finalize = true)
	{
		try
		{
			if (Facepunch.Sqlite.Interop.sqlite3_step(stmHandle) == 100)
			{
				return GetColumnValue<T>(stmHandle, 0);
			}
		}
		finally
		{
			FinalizeOrReset(stmHandle, finalize);
		}
		return default(T);
	}

	protected IEnumerable<T> ExecuteAndReadQueryResults<T>(IntPtr stmHandle, Func<IntPtr, T> rowReader, bool finalize = true)
	{
		try
		{
			while (Facepunch.Sqlite.Interop.sqlite3_step(stmHandle) == 100)
			{
				yield return rowReader(stmHandle);
			}
		}
		finally
		{
			FinalizeOrReset(stmHandle, finalize);
		}
	}

	protected IntPtr Prepare(string query)
	{
		if (!IsConnectionOpen)
		{
			throw new SqliteException("SQLite database is not open.");
		}
		IntPtr ppStmpt;
		int num = Facepunch.Sqlite.Interop.sqlite3_prepare_v2(_connection, query, query.Length, out ppStmpt, IntPtr.Zero);
		if (num != 0)
		{
			IntPtr ptr = Facepunch.Sqlite.Interop.sqlite3_errmsg(_connection);
			throw new SqliteException($"Failed to prepare query: {Marshal.PtrToStringAnsi(ptr)} ({num})");
		}
		return ppStmpt;
	}

	private void FinalizeOrReset(IntPtr stmHandle, bool finalize = true)
	{
		if (finalize)
		{
			Finalize(stmHandle);
		}
		else
		{
			Reset(stmHandle);
		}
	}

	protected void Finalize(IntPtr stmHandle)
	{
		int num = Facepunch.Sqlite.Interop.sqlite3_finalize(stmHandle);
		if (num != 0)
		{
			IntPtr ptr = Facepunch.Sqlite.Interop.sqlite3_errmsg(_connection);
			throw new SqliteException($"Could not finalize SQL statement: {Marshal.PtrToStringAnsi(ptr)} ({num})");
		}
	}

	protected void Reset(IntPtr stmHandle)
	{
		int num = Facepunch.Sqlite.Interop.sqlite3_reset(stmHandle);
		if (num != 0)
		{
			IntPtr ptr = Facepunch.Sqlite.Interop.sqlite3_errmsg(_connection);
			throw new SqliteException($"Could not reset SQL statement: {Marshal.PtrToStringAnsi(ptr)} ({num})");
		}
	}
}
