using System;
using System.Net;
using System.Security.Cryptography.X509Certificates;
using Facepunch.Rcon;
using Oxide.Core;
using UnityEngine;
using WebSocketSharp;
using WebSocketSharp.Server;

public class Listener
{
	public class RConBehaviour : WebSocketBehavior
	{
		public Listener Parent;

		protected override void OnMessage(MessageEventArgs e)
		{
			if (Parent.OnMessage != null && Interface.CallHook("IOnRconCommand", Context.UserEndPoint.address, e.Data) == null)
			{
				Parent.OnMessage(base.Context.UserEndPoint, base.ID, e.Data);
			}
		}

		protected override void OnError(ErrorEventArgs e)
		{
			Debug.Log("Rcon Error: " + e.Exception);
			Debug.Log(e.Message);
		}
	}

	public string Password;

	public int Port;

	public string Address;

	public string SslCertificate;

	public string SslCertificatePassword;

	public Action<IPEndPoint, string, string> OnMessage;

	private WebSocketServer server;

	public void Start()
	{
		Shutdown();
		bool secure = !string.IsNullOrEmpty(SslCertificate) && !string.IsNullOrEmpty(SslCertificatePassword);
		if (Address != null)
		{
			IPAddress address = IPAddress.Any;
			if (!IPAddress.TryParse(Address, out address))
			{
				address = IPAddress.Any;
			}
			server = new WebSocketServer(address, Port, secure);
		}
		else
		{
			server = new WebSocketServer(Port, secure);
		}
		if (!string.IsNullOrEmpty(SslCertificate) && !string.IsNullOrEmpty(SslCertificatePassword))
		{
			X509Certificate2 serverCertificate = new X509Certificate2(SslCertificate, SslCertificatePassword);
			server.SslConfiguration.ServerCertificate = serverCertificate;
		}
		server.AddWebSocketService("/" + Password, () => new RConBehaviour
		{
			IgnoreExtensions = true,
			Parent = this
		});
		server.WaitTime = TimeSpan.FromSeconds(5.0);
		server.Start();
	}

	public void Shutdown()
	{
		if (server != null)
		{
			server.Stop();
			server = null;
		}
	}

	public void BroadcastMessage(string str)
	{
		if (server != null)
		{
			server.WebSocketServices.Broadcast(str);
		}
	}

	public void SendMessage(string target, string str)
	{
		if (server == null)
		{
			return;
		}
		foreach (WebSocketServiceHost host in server.WebSocketServices.Hosts)
		{
			host.Sessions.SendTo(str, target);
		}
	}
}
