using System;
using System.Collections.Generic;
using UnityEngine;

public abstract class FileSystemBackend
{
	public bool isError;

	public string loadingError = "";

	public Dictionary<string, Object> cache = new Dictionary<string, Object>(StringComparer.OrdinalIgnoreCase);

	public GameObject[] LoadPrefabs(string folder)
	{
		if (!folder.EndsWith("/", StringComparison.CurrentCultureIgnoreCase))
		{
			Debug.LogWarning((object)("LoadPrefabs - folder should end in '/' - " + folder));
		}
		if (!folder.StartsWith("assets/", StringComparison.CurrentCultureIgnoreCase))
		{
			Debug.LogWarning((object)("LoadPrefabs - should start with assets/ - " + folder));
		}
		return this.LoadAll<GameObject>(folder, ".prefab");
	}

	public GameObject LoadPrefab(string filePath)
	{
		if (!filePath.StartsWith("assets/", StringComparison.CurrentCultureIgnoreCase))
		{
			Debug.LogWarning((object)("LoadPrefab - should start with assets/ - " + filePath));
		}
		return this.Load<GameObject>(filePath);
	}

	public string[] FindAll(string folder, string search = "")
	{
		return LoadAssetList(folder, search);
	}

	public T[] LoadAll<T>(string folder, string search = "") where T : Object
	{
		List<T> list = new List<T>();
		string[] array = FindAll(folder, search);
		foreach (string filePath in array)
		{
			T val = Load<T>(filePath);
			if ((Object)(object)val != (Object)null)
			{
				list.Add(val);
			}
		}
		return list.ToArray();
	}

	public T Load<T>(string filePath) where T : Object
	{
		T val = default(T);
		if (cache.ContainsKey(filePath))
		{
			Object obj = cache[filePath];
			val = (T)(object)((obj is T) ? obj : null);
		}
		else
		{
			val = LoadAsset<T>(filePath);
			if ((Object)(object)val != (Object)null)
			{
				cache.Add(filePath, (Object)(object)val);
			}
		}
		return val;
	}

	public AssetPreloadResult PreloadAssets(IEnumerable<string> filePaths, int maxConcurrency, int priority)
	{
		List<string> list = new List<string>();
		List<(string, Object)> list2 = new List<(string, Object)>();
		foreach (string filePath in filePaths)
		{
			if (cache.TryGetValue(filePath, out var value))
			{
				list2.Add((filePath, value));
			}
			else
			{
				list.Add(filePath);
			}
		}
		LoadAssetsResult load = LoadAssetsAsync(list, maxConcurrency, priority);
		return new AssetPreloadResult(this, load, list2);
	}

	protected void LoadError(string err)
	{
		Debug.LogError((object)err);
		loadingError = err;
		isError = true;
	}

	public virtual List<string> UnloadBundles(string partialName)
	{
		return new List<string>(0);
	}

	protected abstract T LoadAsset<T>(string filePath) where T : Object;

	protected abstract LoadAssetsResult LoadAssetsAsync(List<string> filePaths, int maxConcurrency, int priority);

	protected abstract string[] LoadAssetList(string folder, string search);

	public abstract T[] LoadAllFromBundle<T>(string bundleName, string editorSearch) where T : Object;

	public abstract bool HasAsset(string path);
}
