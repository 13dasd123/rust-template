using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

internal class CompositeLoadAssetsResult : LoadAssetsResult
{
	private readonly List<LoadAssetsResult> _loads;

	public override int TotalCount => _loads.Sum((LoadAssetsResult l) => l.TotalCount);

	public override int CompletedCount
	{
		get
		{
			return _loads.Sum((LoadAssetsResult l) => l.CompletedCount);
		}
		protected set
		{
		}
	}

	public override bool keepWaiting
	{
		get
		{
			if (_loads.Count != 0)
			{
				return _loads.Any((LoadAssetsResult l) => ((CustomYieldInstruction)l).keepWaiting);
			}
			return false;
		}
	}

	public CompositeLoadAssetsResult(List<LoadAssetsResult> loads)
	{
		if (loads == null)
		{
			throw new ArgumentNullException("loads");
		}
		foreach (LoadAssetsResult load in loads)
		{
			if (load == null)
			{
				throw new ArgumentException("Cannot wait for null LoadAssetsResult.", "loads");
			}
		}
		_loads = loads;
		AssetLoaded b = AssetLoadedHandler;
		foreach (LoadAssetsResult load2 in loads)
		{
			load2.OnAssetLoaded = (AssetLoaded)Delegate.Combine(load2.OnAssetLoaded, b);
		}
	}

	public override Dictionary<string, Object> GetResult()
	{
		if (((CustomYieldInstruction)this).keepWaiting)
		{
			throw new InvalidOperationException("Cannot get results until the load is completed.");
		}
		Dictionary<string, Object> dictionary = new Dictionary<string, Object>();
		foreach (LoadAssetsResult load in _loads)
		{
			foreach (KeyValuePair<string, Object> item in load.GetResult())
			{
				dictionary.Add(item.Key, item.Value);
			}
		}
		return dictionary;
	}

	private void AssetLoadedHandler(string assetPath, Object obj)
	{
		try
		{
			OnAssetLoaded?.Invoke(assetPath, obj);
		}
		catch (Exception ex)
		{
			Debug.LogException(ex);
		}
	}
}
