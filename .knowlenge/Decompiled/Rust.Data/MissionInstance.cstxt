using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class MissionInstance : IDisposable, Pool.IPooled, IProto
{
	public bool ShouldPool = true;

	private bool _disposed;

	[NonSerialized]
	public NetworkableId providerID;

	[NonSerialized]
	public uint missionID;

	[NonSerialized]
	public uint missionStatus;

	[NonSerialized]
	public float completionScale;

	[NonSerialized]
	public float startTime;

	[NonSerialized]
	public float endTime;

	[NonSerialized]
	public Vector3 missionLocation;

	[NonSerialized]
	public List<ObjectiveStatus> objectiveStatuses;

	[NonSerialized]
	public List<MissionPoint> missionPoints;

	[NonSerialized]
	public List<NetworkableId> createdEntities;

	[NonSerialized]
	public List<MissionReward> rewards;

	public static void ResetToPool(MissionInstance instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		instance.providerID = default(NetworkableId);
		instance.missionID = 0u;
		instance.missionStatus = 0u;
		instance.completionScale = 0f;
		instance.startTime = 0f;
		instance.endTime = 0f;
		instance.missionLocation = default(Vector3);
		if (instance.objectiveStatuses != null)
		{
			for (int i = 0; i < instance.objectiveStatuses.Count; i++)
			{
				if (instance.objectiveStatuses[i] != null)
				{
					instance.objectiveStatuses[i].ResetToPool();
					instance.objectiveStatuses[i] = null;
				}
			}
			List<ObjectiveStatus> obj = instance.objectiveStatuses;
			Pool.FreeList(ref obj);
			instance.objectiveStatuses = obj;
		}
		if (instance.missionPoints != null)
		{
			for (int j = 0; j < instance.missionPoints.Count; j++)
			{
				if (instance.missionPoints[j] != null)
				{
					instance.missionPoints[j].ResetToPool();
					instance.missionPoints[j] = null;
				}
			}
			List<MissionPoint> obj2 = instance.missionPoints;
			Pool.FreeList(ref obj2);
			instance.missionPoints = obj2;
		}
		if (instance.createdEntities != null)
		{
			List<NetworkableId> obj3 = instance.createdEntities;
			Pool.FreeList(ref obj3);
			instance.createdEntities = obj3;
		}
		if (instance.rewards != null)
		{
			for (int k = 0; k < instance.rewards.Count; k++)
			{
				if (instance.rewards[k] != null)
				{
					instance.rewards[k].ResetToPool();
					instance.rewards[k] = null;
				}
			}
			List<MissionReward> obj4 = instance.rewards;
			Pool.FreeList(ref obj4);
			instance.rewards = obj4;
		}
		Pool.Free(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose MissionInstance with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(MissionInstance instance)
	{
		instance.providerID = providerID;
		instance.missionID = missionID;
		instance.missionStatus = missionStatus;
		instance.completionScale = completionScale;
		instance.startTime = startTime;
		instance.endTime = endTime;
		instance.missionLocation = missionLocation;
		if (objectiveStatuses != null)
		{
			instance.objectiveStatuses = Pool.GetList<ObjectiveStatus>();
			for (int i = 0; i < objectiveStatuses.Count; i++)
			{
				ObjectiveStatus item = objectiveStatuses[i].Copy();
				instance.objectiveStatuses.Add(item);
			}
		}
		else
		{
			instance.objectiveStatuses = null;
		}
		if (missionPoints != null)
		{
			instance.missionPoints = Pool.GetList<MissionPoint>();
			for (int j = 0; j < missionPoints.Count; j++)
			{
				MissionPoint item2 = missionPoints[j].Copy();
				instance.missionPoints.Add(item2);
			}
		}
		else
		{
			instance.missionPoints = null;
		}
		if (createdEntities != null)
		{
			instance.createdEntities = Pool.GetList<NetworkableId>();
			for (int k = 0; k < createdEntities.Count; k++)
			{
				NetworkableId item3 = createdEntities[k];
				instance.createdEntities.Add(item3);
			}
		}
		else
		{
			instance.createdEntities = null;
		}
		if (rewards != null)
		{
			instance.rewards = Pool.GetList<MissionReward>();
			for (int l = 0; l < rewards.Count; l++)
			{
				MissionReward item4 = rewards[l].Copy();
				instance.rewards.Add(item4);
			}
		}
		else
		{
			instance.rewards = null;
		}
	}

	public MissionInstance Copy()
	{
		MissionInstance missionInstance = Pool.Get<MissionInstance>();
		CopyTo(missionInstance);
		return missionInstance;
	}

	public static MissionInstance Deserialize(Stream stream)
	{
		MissionInstance missionInstance = Pool.Get<MissionInstance>();
		Deserialize(stream, missionInstance, isDelta: false);
		return missionInstance;
	}

	public static MissionInstance DeserializeLengthDelimited(Stream stream)
	{
		MissionInstance missionInstance = Pool.Get<MissionInstance>();
		DeserializeLengthDelimited(stream, missionInstance, isDelta: false);
		return missionInstance;
	}

	public static MissionInstance DeserializeLength(Stream stream, int length)
	{
		MissionInstance missionInstance = Pool.Get<MissionInstance>();
		DeserializeLength(stream, length, missionInstance, isDelta: false);
		return missionInstance;
	}

	public static MissionInstance Deserialize(byte[] buffer)
	{
		MissionInstance missionInstance = Pool.Get<MissionInstance>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, missionInstance, isDelta: false);
		return missionInstance;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, MissionInstance previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static MissionInstance Deserialize(byte[] buffer, MissionInstance instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static MissionInstance Deserialize(Stream stream, MissionInstance instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.objectiveStatuses == null)
			{
				instance.objectiveStatuses = Pool.GetList<ObjectiveStatus>();
			}
			if (instance.missionPoints == null)
			{
				instance.missionPoints = Pool.GetList<MissionPoint>();
			}
			if (instance.createdEntities == null)
			{
				instance.createdEntities = Pool.GetList<NetworkableId>();
			}
			if (instance.rewards == null)
			{
				instance.rewards = Pool.GetList<MissionReward>();
			}
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.providerID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 16:
				instance.missionID = ProtocolParser.ReadUInt32(stream);
				continue;
			case 24:
				instance.missionStatus = ProtocolParser.ReadUInt32(stream);
				continue;
			case 37:
				instance.completionScale = ProtocolParser.ReadSingle(stream);
				continue;
			case 45:
				instance.startTime = ProtocolParser.ReadSingle(stream);
				continue;
			case 53:
				instance.endTime = ProtocolParser.ReadSingle(stream);
				continue;
			case 58:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.missionLocation, isDelta);
				continue;
			case 66:
				instance.objectiveStatuses.Add(ObjectiveStatus.DeserializeLengthDelimited(stream));
				continue;
			case 74:
				instance.missionPoints.Add(MissionPoint.DeserializeLengthDelimited(stream));
				continue;
			case 80:
				instance.createdEntities.Add(new NetworkableId(ProtocolParser.ReadUInt64(stream)));
				continue;
			case 90:
				instance.rewards.Add(MissionReward.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static MissionInstance DeserializeLengthDelimited(Stream stream, MissionInstance instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.objectiveStatuses == null)
			{
				instance.objectiveStatuses = Pool.GetList<ObjectiveStatus>();
			}
			if (instance.missionPoints == null)
			{
				instance.missionPoints = Pool.GetList<MissionPoint>();
			}
			if (instance.createdEntities == null)
			{
				instance.createdEntities = Pool.GetList<NetworkableId>();
			}
			if (instance.rewards == null)
			{
				instance.rewards = Pool.GetList<MissionReward>();
			}
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.providerID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 16:
				instance.missionID = ProtocolParser.ReadUInt32(stream);
				continue;
			case 24:
				instance.missionStatus = ProtocolParser.ReadUInt32(stream);
				continue;
			case 37:
				instance.completionScale = ProtocolParser.ReadSingle(stream);
				continue;
			case 45:
				instance.startTime = ProtocolParser.ReadSingle(stream);
				continue;
			case 53:
				instance.endTime = ProtocolParser.ReadSingle(stream);
				continue;
			case 58:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.missionLocation, isDelta);
				continue;
			case 66:
				instance.objectiveStatuses.Add(ObjectiveStatus.DeserializeLengthDelimited(stream));
				continue;
			case 74:
				instance.missionPoints.Add(MissionPoint.DeserializeLengthDelimited(stream));
				continue;
			case 80:
				instance.createdEntities.Add(new NetworkableId(ProtocolParser.ReadUInt64(stream)));
				continue;
			case 90:
				instance.rewards.Add(MissionReward.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static MissionInstance DeserializeLength(Stream stream, int length, MissionInstance instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.objectiveStatuses == null)
			{
				instance.objectiveStatuses = Pool.GetList<ObjectiveStatus>();
			}
			if (instance.missionPoints == null)
			{
				instance.missionPoints = Pool.GetList<MissionPoint>();
			}
			if (instance.createdEntities == null)
			{
				instance.createdEntities = Pool.GetList<NetworkableId>();
			}
			if (instance.rewards == null)
			{
				instance.rewards = Pool.GetList<MissionReward>();
			}
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.providerID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 16:
				instance.missionID = ProtocolParser.ReadUInt32(stream);
				continue;
			case 24:
				instance.missionStatus = ProtocolParser.ReadUInt32(stream);
				continue;
			case 37:
				instance.completionScale = ProtocolParser.ReadSingle(stream);
				continue;
			case 45:
				instance.startTime = ProtocolParser.ReadSingle(stream);
				continue;
			case 53:
				instance.endTime = ProtocolParser.ReadSingle(stream);
				continue;
			case 58:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.missionLocation, isDelta);
				continue;
			case 66:
				instance.objectiveStatuses.Add(ObjectiveStatus.DeserializeLengthDelimited(stream));
				continue;
			case 74:
				instance.missionPoints.Add(MissionPoint.DeserializeLengthDelimited(stream));
				continue;
			case 80:
				instance.createdEntities.Add(new NetworkableId(ProtocolParser.ReadUInt64(stream)));
				continue;
			case 90:
				instance.rewards.Add(MissionReward.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, MissionInstance instance, MissionInstance previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		stream.WriteByte(8);
		ProtocolParser.WriteUInt64(stream, instance.providerID.Value);
		if (instance.missionID != previous.missionID)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt32(stream, instance.missionID);
		}
		if (instance.missionStatus != previous.missionStatus)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt32(stream, instance.missionStatus);
		}
		if (instance.completionScale != previous.completionScale)
		{
			stream.WriteByte(37);
			ProtocolParser.WriteSingle(stream, instance.completionScale);
		}
		if (instance.startTime != previous.startTime)
		{
			stream.WriteByte(45);
			ProtocolParser.WriteSingle(stream, instance.startTime);
		}
		if (instance.endTime != previous.endTime)
		{
			stream.WriteByte(53);
			ProtocolParser.WriteSingle(stream, instance.endTime);
		}
		if (instance.missionLocation != previous.missionLocation)
		{
			stream.WriteByte(58);
			obj.SetLength(0L);
			Vector3Serialized.SerializeDelta(obj, instance.missionLocation, previous.missionLocation);
			uint num = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(obj.GetBuffer(), 0, (int)num);
		}
		if (instance.objectiveStatuses != null)
		{
			for (int i = 0; i < instance.objectiveStatuses.Count; i++)
			{
				ObjectiveStatus objectiveStatus = instance.objectiveStatuses[i];
				stream.WriteByte(66);
				obj.SetLength(0L);
				ObjectiveStatus.SerializeDelta(obj, objectiveStatus, objectiveStatus);
				uint num2 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(obj.GetBuffer(), 0, (int)num2);
			}
		}
		if (instance.missionPoints != null)
		{
			for (int j = 0; j < instance.missionPoints.Count; j++)
			{
				MissionPoint missionPoint = instance.missionPoints[j];
				stream.WriteByte(74);
				obj.SetLength(0L);
				MissionPoint.SerializeDelta(obj, missionPoint, missionPoint);
				uint num3 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num3);
				stream.Write(obj.GetBuffer(), 0, (int)num3);
			}
		}
		if (instance.createdEntities != null)
		{
			for (int k = 0; k < instance.createdEntities.Count; k++)
			{
				NetworkableId networkableId = instance.createdEntities[k];
				stream.WriteByte(80);
				ProtocolParser.WriteUInt64(stream, networkableId.Value);
			}
		}
		if (instance.rewards != null)
		{
			for (int l = 0; l < instance.rewards.Count; l++)
			{
				MissionReward missionReward = instance.rewards[l];
				stream.WriteByte(90);
				obj.SetLength(0L);
				MissionReward.SerializeDelta(obj, missionReward, missionReward);
				uint num4 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num4);
				stream.Write(obj.GetBuffer(), 0, (int)num4);
			}
		}
		Pool.FreeMemoryStream(ref obj);
	}

	public static void Serialize(Stream stream, MissionInstance instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		stream.WriteByte(8);
		ProtocolParser.WriteUInt64(stream, instance.providerID.Value);
		stream.WriteByte(16);
		ProtocolParser.WriteUInt32(stream, instance.missionID);
		stream.WriteByte(24);
		ProtocolParser.WriteUInt32(stream, instance.missionStatus);
		stream.WriteByte(37);
		ProtocolParser.WriteSingle(stream, instance.completionScale);
		stream.WriteByte(45);
		ProtocolParser.WriteSingle(stream, instance.startTime);
		stream.WriteByte(53);
		ProtocolParser.WriteSingle(stream, instance.endTime);
		stream.WriteByte(58);
		obj.SetLength(0L);
		Vector3Serialized.Serialize(obj, instance.missionLocation);
		uint num = (uint)obj.Length;
		ProtocolParser.WriteUInt32(stream, num);
		stream.Write(obj.GetBuffer(), 0, (int)num);
		if (instance.objectiveStatuses != null)
		{
			for (int i = 0; i < instance.objectiveStatuses.Count; i++)
			{
				ObjectiveStatus instance2 = instance.objectiveStatuses[i];
				stream.WriteByte(66);
				obj.SetLength(0L);
				ObjectiveStatus.Serialize(obj, instance2);
				uint num2 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(obj.GetBuffer(), 0, (int)num2);
			}
		}
		if (instance.missionPoints != null)
		{
			for (int j = 0; j < instance.missionPoints.Count; j++)
			{
				MissionPoint instance3 = instance.missionPoints[j];
				stream.WriteByte(74);
				obj.SetLength(0L);
				MissionPoint.Serialize(obj, instance3);
				uint num3 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num3);
				stream.Write(obj.GetBuffer(), 0, (int)num3);
			}
		}
		if (instance.createdEntities != null)
		{
			for (int k = 0; k < instance.createdEntities.Count; k++)
			{
				NetworkableId networkableId = instance.createdEntities[k];
				stream.WriteByte(80);
				ProtocolParser.WriteUInt64(stream, networkableId.Value);
			}
		}
		if (instance.rewards != null)
		{
			for (int l = 0; l < instance.rewards.Count; l++)
			{
				MissionReward instance4 = instance.rewards[l];
				stream.WriteByte(90);
				obj.SetLength(0L);
				MissionReward.Serialize(obj, instance4);
				uint num4 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num4);
				stream.Write(obj.GetBuffer(), 0, (int)num4);
			}
		}
		Pool.FreeMemoryStream(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(MissionInstance instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, MissionInstance instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<uint> action)
	{
		if (objectiveStatuses != null)
		{
			for (int i = 0; i < objectiveStatuses.Count; i++)
			{
				objectiveStatuses[i]?.InspectUids(action);
			}
		}
		if (missionPoints != null)
		{
			for (int j = 0; j < missionPoints.Count; j++)
			{
				missionPoints[j]?.InspectUids(action);
			}
		}
		if (rewards != null)
		{
			for (int k = 0; k < rewards.Count; k++)
			{
				rewards[k]?.InspectUids(action);
			}
		}
	}
}
