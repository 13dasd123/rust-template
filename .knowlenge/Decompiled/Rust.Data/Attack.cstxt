using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class Attack : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public Vector3 pointStart;

	[NonSerialized]
	public Vector3 pointEnd;

	[NonSerialized]
	public NetworkableId hitID;

	[NonSerialized]
	public uint hitBone;

	[NonSerialized]
	public Vector3 hitNormalLocal;

	[NonSerialized]
	public Vector3 hitPositionLocal;

	[NonSerialized]
	public Vector3 hitNormalWorld;

	[NonSerialized]
	public Vector3 hitPositionWorld;

	[NonSerialized]
	public uint hitPartID;

	[NonSerialized]
	public uint hitMaterialID;

	[NonSerialized]
	public NetworkableId srcParentID;

	[NonSerialized]
	public NetworkableId dstParentID;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(Attack instance)
	{
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		if (instance.ShouldPool)
		{
			instance.pointStart = default(Vector3);
			instance.pointEnd = default(Vector3);
			instance.hitID = default(NetworkableId);
			instance.hitBone = 0u;
			instance.hitNormalLocal = default(Vector3);
			instance.hitPositionLocal = default(Vector3);
			instance.hitNormalWorld = default(Vector3);
			instance.hitPositionWorld = default(Vector3);
			instance.hitPartID = 0u;
			instance.hitMaterialID = 0u;
			instance.srcParentID = default(NetworkableId);
			instance.dstParentID = default(NetworkableId);
			Pool.Free<Attack>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose Attack with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(Attack instance)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		instance.pointStart = pointStart;
		instance.pointEnd = pointEnd;
		instance.hitID = hitID;
		instance.hitBone = hitBone;
		instance.hitNormalLocal = hitNormalLocal;
		instance.hitPositionLocal = hitPositionLocal;
		instance.hitNormalWorld = hitNormalWorld;
		instance.hitPositionWorld = hitPositionWorld;
		instance.hitPartID = hitPartID;
		instance.hitMaterialID = hitMaterialID;
		instance.srcParentID = srcParentID;
		instance.dstParentID = dstParentID;
	}

	public Attack Copy()
	{
		Attack attack = Pool.Get<Attack>();
		CopyTo(attack);
		return attack;
	}

	public static Attack Deserialize(Stream stream)
	{
		Attack attack = Pool.Get<Attack>();
		Deserialize(stream, attack, isDelta: false);
		return attack;
	}

	public static Attack DeserializeLengthDelimited(Stream stream)
	{
		Attack attack = Pool.Get<Attack>();
		DeserializeLengthDelimited(stream, attack, isDelta: false);
		return attack;
	}

	public static Attack DeserializeLength(Stream stream, int length)
	{
		Attack attack = Pool.Get<Attack>();
		DeserializeLength(stream, length, attack, isDelta: false);
		return attack;
	}

	public static Attack Deserialize(byte[] buffer)
	{
		Attack attack = Pool.Get<Attack>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, attack, isDelta: false);
		return attack;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, Attack previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static Attack Deserialize(byte[] buffer, Attack instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static Attack Deserialize(Stream stream, Attack instance, bool isDelta)
	{
		//IL_0108: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.pointStart, isDelta);
				continue;
			case 18:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.pointEnd, isDelta);
				continue;
			case 24:
				instance.hitID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 32:
				instance.hitBone = ProtocolParser.ReadUInt32(stream);
				continue;
			case 42:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.hitNormalLocal, isDelta);
				continue;
			case 50:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.hitPositionLocal, isDelta);
				continue;
			case 58:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.hitNormalWorld, isDelta);
				continue;
			case 66:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.hitPositionWorld, isDelta);
				continue;
			case 72:
				instance.hitPartID = ProtocolParser.ReadUInt32(stream);
				continue;
			case 80:
				instance.hitMaterialID = ProtocolParser.ReadUInt32(stream);
				continue;
			case 88:
				instance.srcParentID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 96:
				instance.dstParentID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static Attack DeserializeLengthDelimited(Stream stream, Attack instance, bool isDelta)
	{
		//IL_013c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_014f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0116: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0129: Unknown result type (might be due to invalid IL or missing references)
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.pointStart, isDelta);
				continue;
			case 18:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.pointEnd, isDelta);
				continue;
			case 24:
				instance.hitID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 32:
				instance.hitBone = ProtocolParser.ReadUInt32(stream);
				continue;
			case 42:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.hitNormalLocal, isDelta);
				continue;
			case 50:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.hitPositionLocal, isDelta);
				continue;
			case 58:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.hitNormalWorld, isDelta);
				continue;
			case 66:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.hitPositionWorld, isDelta);
				continue;
			case 72:
				instance.hitPartID = ProtocolParser.ReadUInt32(stream);
				continue;
			case 80:
				instance.hitMaterialID = ProtocolParser.ReadUInt32(stream);
				continue;
			case 88:
				instance.srcParentID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 96:
				instance.dstParentID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Attack DeserializeLength(Stream stream, int length, Attack instance, bool isDelta)
	{
		//IL_0135: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0148: Unknown result type (might be due to invalid IL or missing references)
		//IL_010f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.pointStart, isDelta);
				continue;
			case 18:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.pointEnd, isDelta);
				continue;
			case 24:
				instance.hitID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 32:
				instance.hitBone = ProtocolParser.ReadUInt32(stream);
				continue;
			case 42:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.hitNormalLocal, isDelta);
				continue;
			case 50:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.hitPositionLocal, isDelta);
				continue;
			case 58:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.hitNormalWorld, isDelta);
				continue;
			case 66:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.hitPositionWorld, isDelta);
				continue;
			case 72:
				instance.hitPartID = ProtocolParser.ReadUInt32(stream);
				continue;
			case 80:
				instance.hitMaterialID = ProtocolParser.ReadUInt32(stream);
				continue;
			case 88:
				instance.srcParentID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 96:
				instance.dstParentID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, Attack instance, Attack previous)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_013e: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0110: Unknown result type (might be due to invalid IL or missing references)
		//IL_018d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0193: Unknown result type (might be due to invalid IL or missing references)
		//IL_015c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0162: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0206: Unknown result type (might be due to invalid IL or missing references)
		//IL_020c: Unknown result type (might be due to invalid IL or missing references)
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.pointStart != previous.pointStart)
		{
			stream.WriteByte(10);
			memoryStream.SetLength(0L);
			Vector3Serialized.SerializeDelta(memoryStream, instance.pointStart, previous.pointStart);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		if (instance.pointEnd != previous.pointEnd)
		{
			stream.WriteByte(18);
			memoryStream.SetLength(0L);
			Vector3Serialized.SerializeDelta(memoryStream, instance.pointEnd, previous.pointEnd);
			uint num2 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
		}
		stream.WriteByte(24);
		ProtocolParser.WriteUInt64(stream, instance.hitID.Value);
		if (instance.hitBone != previous.hitBone)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt32(stream, instance.hitBone);
		}
		if (instance.hitNormalLocal != previous.hitNormalLocal)
		{
			stream.WriteByte(42);
			memoryStream.SetLength(0L);
			Vector3Serialized.SerializeDelta(memoryStream, instance.hitNormalLocal, previous.hitNormalLocal);
			uint num3 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num3);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num3);
		}
		if (instance.hitPositionLocal != previous.hitPositionLocal)
		{
			stream.WriteByte(50);
			memoryStream.SetLength(0L);
			Vector3Serialized.SerializeDelta(memoryStream, instance.hitPositionLocal, previous.hitPositionLocal);
			uint num4 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num4);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num4);
		}
		if (instance.hitNormalWorld != previous.hitNormalWorld)
		{
			stream.WriteByte(58);
			memoryStream.SetLength(0L);
			Vector3Serialized.SerializeDelta(memoryStream, instance.hitNormalWorld, previous.hitNormalWorld);
			uint num5 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num5);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num5);
		}
		if (instance.hitPositionWorld != previous.hitPositionWorld)
		{
			stream.WriteByte(66);
			memoryStream.SetLength(0L);
			Vector3Serialized.SerializeDelta(memoryStream, instance.hitPositionWorld, previous.hitPositionWorld);
			uint num6 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num6);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num6);
		}
		if (instance.hitPartID != previous.hitPartID)
		{
			stream.WriteByte(72);
			ProtocolParser.WriteUInt32(stream, instance.hitPartID);
		}
		if (instance.hitMaterialID != previous.hitMaterialID)
		{
			stream.WriteByte(80);
			ProtocolParser.WriteUInt32(stream, instance.hitMaterialID);
		}
		stream.WriteByte(88);
		ProtocolParser.WriteUInt64(stream, instance.srcParentID.Value);
		stream.WriteByte(96);
		ProtocolParser.WriteUInt64(stream, instance.dstParentID.Value);
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, Attack instance)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0143: Unknown result type (might be due to invalid IL or missing references)
		//IL_014a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_0118: Unknown result type (might be due to invalid IL or missing references)
		//IL_0195: Unknown result type (might be due to invalid IL or missing references)
		//IL_019c: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_016a: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_020e: Unknown result type (might be due to invalid IL or missing references)
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.pointStart != default(Vector3))
		{
			stream.WriteByte(10);
			memoryStream.SetLength(0L);
			Vector3Serialized.Serialize(memoryStream, instance.pointStart);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		if (instance.pointEnd != default(Vector3))
		{
			stream.WriteByte(18);
			memoryStream.SetLength(0L);
			Vector3Serialized.Serialize(memoryStream, instance.pointEnd);
			uint num2 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
		}
		if (instance.hitID != default(NetworkableId))
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, instance.hitID.Value);
		}
		if (instance.hitBone != 0)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt32(stream, instance.hitBone);
		}
		if (instance.hitNormalLocal != default(Vector3))
		{
			stream.WriteByte(42);
			memoryStream.SetLength(0L);
			Vector3Serialized.Serialize(memoryStream, instance.hitNormalLocal);
			uint num3 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num3);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num3);
		}
		if (instance.hitPositionLocal != default(Vector3))
		{
			stream.WriteByte(50);
			memoryStream.SetLength(0L);
			Vector3Serialized.Serialize(memoryStream, instance.hitPositionLocal);
			uint num4 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num4);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num4);
		}
		if (instance.hitNormalWorld != default(Vector3))
		{
			stream.WriteByte(58);
			memoryStream.SetLength(0L);
			Vector3Serialized.Serialize(memoryStream, instance.hitNormalWorld);
			uint num5 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num5);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num5);
		}
		if (instance.hitPositionWorld != default(Vector3))
		{
			stream.WriteByte(66);
			memoryStream.SetLength(0L);
			Vector3Serialized.Serialize(memoryStream, instance.hitPositionWorld);
			uint num6 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num6);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num6);
		}
		if (instance.hitPartID != 0)
		{
			stream.WriteByte(72);
			ProtocolParser.WriteUInt32(stream, instance.hitPartID);
		}
		if (instance.hitMaterialID != 0)
		{
			stream.WriteByte(80);
			ProtocolParser.WriteUInt32(stream, instance.hitMaterialID);
		}
		if (instance.srcParentID != default(NetworkableId))
		{
			stream.WriteByte(88);
			ProtocolParser.WriteUInt64(stream, instance.srcParentID.Value);
		}
		if (instance.dstParentID != default(NetworkableId))
		{
			stream.WriteByte(96);
			ProtocolParser.WriteUInt64(stream, instance.dstParentID.Value);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(Attack instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, Attack instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		action(UidType.NetworkableId, ref hitID.Value);
		action(UidType.NetworkableId, ref srcParentID.Value);
		action(UidType.NetworkableId, ref dstParentID.Value);
	}
}
