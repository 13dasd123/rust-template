using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class DemoShotVectorTrack : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public long trackType;

	[NonSerialized]
	public List<DemoShotVectorKeyframe> keyframes;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(DemoShotVectorTrack instance)
	{
		if (instance.ShouldPool)
		{
			instance.trackType = 0L;
			if (instance.keyframes != null)
			{
				List<DemoShotVectorKeyframe> list = instance.keyframes;
				Pool.FreeUnmanaged<DemoShotVectorKeyframe>(ref list);
				instance.keyframes = list;
			}
			Pool.Free<DemoShotVectorTrack>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose DemoShotVectorTrack with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(DemoShotVectorTrack instance)
	{
		instance.trackType = trackType;
		if (keyframes != null)
		{
			instance.keyframes = Pool.Get<List<DemoShotVectorKeyframe>>();
			for (int i = 0; i < keyframes.Count; i++)
			{
				DemoShotVectorKeyframe item = keyframes[i];
				instance.keyframes.Add(item);
			}
		}
		else
		{
			instance.keyframes = null;
		}
	}

	public DemoShotVectorTrack Copy()
	{
		DemoShotVectorTrack demoShotVectorTrack = Pool.Get<DemoShotVectorTrack>();
		CopyTo(demoShotVectorTrack);
		return demoShotVectorTrack;
	}

	public static DemoShotVectorTrack Deserialize(Stream stream)
	{
		DemoShotVectorTrack demoShotVectorTrack = Pool.Get<DemoShotVectorTrack>();
		Deserialize(stream, demoShotVectorTrack, isDelta: false);
		return demoShotVectorTrack;
	}

	public static DemoShotVectorTrack DeserializeLengthDelimited(Stream stream)
	{
		DemoShotVectorTrack demoShotVectorTrack = Pool.Get<DemoShotVectorTrack>();
		DeserializeLengthDelimited(stream, demoShotVectorTrack, isDelta: false);
		return demoShotVectorTrack;
	}

	public static DemoShotVectorTrack DeserializeLength(Stream stream, int length)
	{
		DemoShotVectorTrack demoShotVectorTrack = Pool.Get<DemoShotVectorTrack>();
		DeserializeLength(stream, length, demoShotVectorTrack, isDelta: false);
		return demoShotVectorTrack;
	}

	public static DemoShotVectorTrack Deserialize(byte[] buffer)
	{
		DemoShotVectorTrack demoShotVectorTrack = Pool.Get<DemoShotVectorTrack>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, demoShotVectorTrack, isDelta: false);
		return demoShotVectorTrack;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, DemoShotVectorTrack previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static DemoShotVectorTrack Deserialize(byte[] buffer, DemoShotVectorTrack instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static DemoShotVectorTrack Deserialize(Stream stream, DemoShotVectorTrack instance, bool isDelta)
	{
		if (!isDelta && instance.keyframes == null)
		{
			instance.keyframes = Pool.Get<List<DemoShotVectorKeyframe>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.trackType = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
			{
				DemoShotVectorKeyframe instance2 = default(DemoShotVectorKeyframe);
				DemoShotVectorKeyframe.DeserializeLengthDelimited(stream, ref instance2, isDelta);
				instance.keyframes.Add(instance2);
				continue;
			}
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static DemoShotVectorTrack DeserializeLengthDelimited(Stream stream, DemoShotVectorTrack instance, bool isDelta)
	{
		if (!isDelta && instance.keyframes == null)
		{
			instance.keyframes = Pool.Get<List<DemoShotVectorKeyframe>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.trackType = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
			{
				DemoShotVectorKeyframe instance2 = default(DemoShotVectorKeyframe);
				DemoShotVectorKeyframe.DeserializeLengthDelimited(stream, ref instance2, isDelta);
				instance.keyframes.Add(instance2);
				continue;
			}
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static DemoShotVectorTrack DeserializeLength(Stream stream, int length, DemoShotVectorTrack instance, bool isDelta)
	{
		if (!isDelta && instance.keyframes == null)
		{
			instance.keyframes = Pool.Get<List<DemoShotVectorKeyframe>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.trackType = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
			{
				DemoShotVectorKeyframe instance2 = default(DemoShotVectorKeyframe);
				DemoShotVectorKeyframe.DeserializeLengthDelimited(stream, ref instance2, isDelta);
				instance.keyframes.Add(instance2);
				continue;
			}
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, DemoShotVectorTrack instance, DemoShotVectorTrack previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		stream.WriteByte(8);
		ProtocolParser.WriteUInt64(stream, (ulong)instance.trackType);
		if (instance.keyframes != null)
		{
			for (int i = 0; i < instance.keyframes.Count; i++)
			{
				DemoShotVectorKeyframe demoShotVectorKeyframe = instance.keyframes[i];
				stream.WriteByte(18);
				memoryStream.SetLength(0L);
				DemoShotVectorKeyframe.SerializeDelta(memoryStream, demoShotVectorKeyframe, demoShotVectorKeyframe);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, DemoShotVectorTrack instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.trackType != 0L)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.trackType);
		}
		if (instance.keyframes != null)
		{
			for (int i = 0; i < instance.keyframes.Count; i++)
			{
				DemoShotVectorKeyframe instance2 = instance.keyframes[i];
				stream.WriteByte(18);
				memoryStream.SetLength(0L);
				DemoShotVectorKeyframe.Serialize(memoryStream, instance2);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(DemoShotVectorTrack instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, DemoShotVectorTrack instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (keyframes != null)
		{
			for (int i = 0; i < keyframes.Count; i++)
			{
				keyframes[i].InspectUids(action);
			}
		}
	}
}
