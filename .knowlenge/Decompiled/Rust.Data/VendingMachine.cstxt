using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class VendingMachine : IDisposable, Pool.IPooled, IProto
{
	public class SellOrder : IDisposable, Pool.IPooled, IProto
	{
		[NonSerialized]
		public int itemToSellID;

		[NonSerialized]
		public int itemToSellAmount;

		[NonSerialized]
		public int currencyID;

		[NonSerialized]
		public int currencyAmountPerItem;

		[NonSerialized]
		public int inStock;

		[NonSerialized]
		public bool currencyIsBP;

		[NonSerialized]
		public bool itemToSellIsBP;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(SellOrder instance)
		{
			if (instance.ShouldPool)
			{
				instance.itemToSellID = 0;
				instance.itemToSellAmount = 0;
				instance.currencyID = 0;
				instance.currencyAmountPerItem = 0;
				instance.inStock = 0;
				instance.currencyIsBP = false;
				instance.itemToSellIsBP = false;
				Pool.Free(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, SellOrder previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public void CopyTo(SellOrder instance)
		{
			instance.itemToSellID = itemToSellID;
			instance.itemToSellAmount = itemToSellAmount;
			instance.currencyID = currencyID;
			instance.currencyAmountPerItem = currencyAmountPerItem;
			instance.inStock = inStock;
			instance.currencyIsBP = currencyIsBP;
			instance.itemToSellIsBP = itemToSellIsBP;
		}

		public SellOrder Copy()
		{
			SellOrder sellOrder = Pool.Get<SellOrder>();
			CopyTo(sellOrder);
			return sellOrder;
		}

		public static SellOrder Deserialize(Stream stream)
		{
			SellOrder sellOrder = Pool.Get<SellOrder>();
			Deserialize(stream, sellOrder, isDelta: false);
			return sellOrder;
		}

		public static SellOrder DeserializeLengthDelimited(Stream stream)
		{
			SellOrder sellOrder = Pool.Get<SellOrder>();
			DeserializeLengthDelimited(stream, sellOrder, isDelta: false);
			return sellOrder;
		}

		public static SellOrder DeserializeLength(Stream stream, int length)
		{
			SellOrder sellOrder = Pool.Get<SellOrder>();
			DeserializeLength(stream, length, sellOrder, isDelta: false);
			return sellOrder;
		}

		public static SellOrder Deserialize(byte[] buffer)
		{
			SellOrder sellOrder = Pool.Get<SellOrder>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, sellOrder, isDelta: false);
			return sellOrder;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public static SellOrder Deserialize(byte[] buffer, SellOrder instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static SellOrder Deserialize(Stream stream, SellOrder instance, bool isDelta)
		{
			if (!isDelta)
			{
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.itemToSellID = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.itemToSellAmount = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.currencyID = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 32:
					instance.currencyAmountPerItem = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 40:
					instance.inStock = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 48:
					instance.currencyIsBP = ProtocolParser.ReadBool(stream);
					continue;
				case 56:
					instance.itemToSellIsBP = ProtocolParser.ReadBool(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static SellOrder DeserializeLengthDelimited(Stream stream, SellOrder instance, bool isDelta)
		{
			if (!isDelta)
			{
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.itemToSellID = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.itemToSellAmount = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.currencyID = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 32:
					instance.currencyAmountPerItem = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 40:
					instance.inStock = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 48:
					instance.currencyIsBP = ProtocolParser.ReadBool(stream);
					continue;
				case 56:
					instance.itemToSellIsBP = ProtocolParser.ReadBool(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static SellOrder DeserializeLength(Stream stream, int length, SellOrder instance, bool isDelta)
		{
			if (!isDelta)
			{
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.itemToSellID = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.itemToSellAmount = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.currencyID = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 32:
					instance.currencyAmountPerItem = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 40:
					instance.inStock = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 48:
					instance.currencyIsBP = ProtocolParser.ReadBool(stream);
					continue;
				case 56:
					instance.itemToSellIsBP = ProtocolParser.ReadBool(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, SellOrder instance, SellOrder previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.itemToSellID != previous.itemToSellID)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.itemToSellID);
			}
			if (instance.itemToSellAmount != previous.itemToSellAmount)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.itemToSellAmount);
			}
			if (instance.currencyID != previous.currencyID)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.currencyID);
			}
			if (instance.currencyAmountPerItem != previous.currencyAmountPerItem)
			{
				stream.WriteByte(32);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.currencyAmountPerItem);
			}
			if (instance.inStock != previous.inStock)
			{
				stream.WriteByte(40);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.inStock);
			}
			stream.WriteByte(48);
			ProtocolParser.WriteBool(stream, instance.currencyIsBP);
			stream.WriteByte(56);
			ProtocolParser.WriteBool(stream, instance.itemToSellIsBP);
			Pool.FreeMemoryStream(ref obj);
		}

		public static void Serialize(Stream stream, SellOrder instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.itemToSellID);
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.itemToSellAmount);
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.currencyID);
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.currencyAmountPerItem);
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.inStock);
			stream.WriteByte(48);
			ProtocolParser.WriteBool(stream, instance.currencyIsBP);
			stream.WriteByte(56);
			ProtocolParser.WriteBool(stream, instance.itemToSellIsBP);
			Pool.FreeMemoryStream(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(SellOrder instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, SellOrder instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}
	}

	public class SellOrderContainer : IDisposable, Pool.IPooled, IProto
	{
		[NonSerialized]
		public List<SellOrder> sellOrders;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(SellOrderContainer instance)
		{
			if (!instance.ShouldPool)
			{
				return;
			}
			if (instance.sellOrders != null)
			{
				for (int i = 0; i < instance.sellOrders.Count; i++)
				{
					if (instance.sellOrders[i] != null)
					{
						instance.sellOrders[i].ResetToPool();
						instance.sellOrders[i] = null;
					}
				}
				List<SellOrder> obj = instance.sellOrders;
				Pool.FreeList(ref obj);
				instance.sellOrders = obj;
			}
			Pool.Free(ref instance);
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, SellOrderContainer previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public void CopyTo(SellOrderContainer instance)
		{
			throw new NotImplementedException();
		}

		public SellOrderContainer Copy()
		{
			SellOrderContainer sellOrderContainer = Pool.Get<SellOrderContainer>();
			CopyTo(sellOrderContainer);
			return sellOrderContainer;
		}

		public static SellOrderContainer Deserialize(Stream stream)
		{
			SellOrderContainer sellOrderContainer = Pool.Get<SellOrderContainer>();
			Deserialize(stream, sellOrderContainer, isDelta: false);
			return sellOrderContainer;
		}

		public static SellOrderContainer DeserializeLengthDelimited(Stream stream)
		{
			SellOrderContainer sellOrderContainer = Pool.Get<SellOrderContainer>();
			DeserializeLengthDelimited(stream, sellOrderContainer, isDelta: false);
			return sellOrderContainer;
		}

		public static SellOrderContainer DeserializeLength(Stream stream, int length)
		{
			SellOrderContainer sellOrderContainer = Pool.Get<SellOrderContainer>();
			DeserializeLength(stream, length, sellOrderContainer, isDelta: false);
			return sellOrderContainer;
		}

		public static SellOrderContainer Deserialize(byte[] buffer)
		{
			SellOrderContainer sellOrderContainer = Pool.Get<SellOrderContainer>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, sellOrderContainer, isDelta: false);
			return sellOrderContainer;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public static SellOrderContainer Deserialize(byte[] buffer, SellOrderContainer instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static SellOrderContainer Deserialize(Stream stream, SellOrderContainer instance, bool isDelta)
		{
			if (!isDelta && instance.sellOrders == null)
			{
				instance.sellOrders = Pool.Get<List<SellOrder>>();
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 10:
					instance.sellOrders.Add(SellOrder.DeserializeLengthDelimited(stream));
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static SellOrderContainer DeserializeLengthDelimited(Stream stream, SellOrderContainer instance, bool isDelta)
		{
			if (!isDelta && instance.sellOrders == null)
			{
				instance.sellOrders = Pool.Get<List<SellOrder>>();
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					instance.sellOrders.Add(SellOrder.DeserializeLengthDelimited(stream));
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static SellOrderContainer DeserializeLength(Stream stream, int length, SellOrderContainer instance, bool isDelta)
		{
			if (!isDelta && instance.sellOrders == null)
			{
				instance.sellOrders = Pool.Get<List<SellOrder>>();
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					instance.sellOrders.Add(SellOrder.DeserializeLengthDelimited(stream));
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, SellOrderContainer instance, SellOrderContainer previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.sellOrders != null)
			{
				for (int i = 0; i < instance.sellOrders.Count; i++)
				{
					SellOrder sellOrder = instance.sellOrders[i];
					stream.WriteByte(10);
					obj.SetLength(0L);
					SellOrder.SerializeDelta(obj, sellOrder, sellOrder);
					uint num = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num);
					stream.Write(obj.GetBuffer(), 0, (int)num);
				}
			}
			Pool.FreeMemoryStream(ref obj);
		}

		public static void Serialize(Stream stream, SellOrderContainer instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.sellOrders != null)
			{
				for (int i = 0; i < instance.sellOrders.Count; i++)
				{
					SellOrder instance2 = instance.sellOrders[i];
					stream.WriteByte(10);
					obj.SetLength(0L);
					SellOrder.Serialize(obj, instance2);
					uint num = (uint)obj.Length;
					ProtocolParser.WriteUInt32(stream, num);
					stream.Write(obj.GetBuffer(), 0, (int)num);
				}
			}
			Pool.FreeMemoryStream(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(SellOrderContainer instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, SellOrderContainer instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}
	}

	[NonSerialized]
	public SellOrderContainer sellOrderContainer;

	[NonSerialized]
	public string shopName;

	[NonSerialized]
	public int vmoIndex;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(VendingMachine instance)
	{
		if (instance.ShouldPool)
		{
			if (instance.sellOrderContainer != null)
			{
				instance.sellOrderContainer.ResetToPool();
				instance.sellOrderContainer = null;
			}
			instance.shopName = string.Empty;
			instance.vmoIndex = 0;
			Pool.Free(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, VendingMachine previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public void CopyTo(VendingMachine instance)
	{
		if (sellOrderContainer != null)
		{
			if (instance.sellOrderContainer == null)
			{
				instance.sellOrderContainer = sellOrderContainer.Copy();
			}
			else
			{
				sellOrderContainer.CopyTo(instance.sellOrderContainer);
			}
		}
		else
		{
			instance.sellOrderContainer = null;
		}
		instance.shopName = shopName;
		instance.vmoIndex = vmoIndex;
	}

	public VendingMachine Copy()
	{
		VendingMachine vendingMachine = Pool.Get<VendingMachine>();
		CopyTo(vendingMachine);
		return vendingMachine;
	}

	public static VendingMachine Deserialize(Stream stream)
	{
		VendingMachine vendingMachine = Pool.Get<VendingMachine>();
		Deserialize(stream, vendingMachine, isDelta: false);
		return vendingMachine;
	}

	public static VendingMachine DeserializeLengthDelimited(Stream stream)
	{
		VendingMachine vendingMachine = Pool.Get<VendingMachine>();
		DeserializeLengthDelimited(stream, vendingMachine, isDelta: false);
		return vendingMachine;
	}

	public static VendingMachine DeserializeLength(Stream stream, int length)
	{
		VendingMachine vendingMachine = Pool.Get<VendingMachine>();
		DeserializeLength(stream, length, vendingMachine, isDelta: false);
		return vendingMachine;
	}

	public static VendingMachine Deserialize(byte[] buffer)
	{
		VendingMachine vendingMachine = Pool.Get<VendingMachine>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, vendingMachine, isDelta: false);
		return vendingMachine;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public static VendingMachine Deserialize(byte[] buffer, VendingMachine instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static VendingMachine Deserialize(Stream stream, VendingMachine instance, bool isDelta)
	{
		if (!isDelta)
		{
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				if (instance.sellOrderContainer == null)
				{
					instance.sellOrderContainer = SellOrderContainer.DeserializeLengthDelimited(stream);
				}
				else
				{
					SellOrderContainer.DeserializeLengthDelimited(stream, instance.sellOrderContainer, isDelta);
				}
				continue;
			case 18:
				instance.shopName = ProtocolParser.ReadString(stream);
				continue;
			case 24:
				instance.vmoIndex = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static VendingMachine DeserializeLengthDelimited(Stream stream, VendingMachine instance, bool isDelta)
	{
		if (!isDelta)
		{
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.sellOrderContainer == null)
				{
					instance.sellOrderContainer = SellOrderContainer.DeserializeLengthDelimited(stream);
				}
				else
				{
					SellOrderContainer.DeserializeLengthDelimited(stream, instance.sellOrderContainer, isDelta);
				}
				continue;
			case 18:
				instance.shopName = ProtocolParser.ReadString(stream);
				continue;
			case 24:
				instance.vmoIndex = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static VendingMachine DeserializeLength(Stream stream, int length, VendingMachine instance, bool isDelta)
	{
		if (!isDelta)
		{
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.sellOrderContainer == null)
				{
					instance.sellOrderContainer = SellOrderContainer.DeserializeLengthDelimited(stream);
				}
				else
				{
					SellOrderContainer.DeserializeLengthDelimited(stream, instance.sellOrderContainer, isDelta);
				}
				continue;
			case 18:
				instance.shopName = ProtocolParser.ReadString(stream);
				continue;
			case 24:
				instance.vmoIndex = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, VendingMachine instance, VendingMachine previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.sellOrderContainer != null)
		{
			stream.WriteByte(10);
			obj.SetLength(0L);
			SellOrderContainer.SerializeDelta(obj, instance.sellOrderContainer, previous.sellOrderContainer);
			uint num = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(obj.GetBuffer(), 0, (int)num);
		}
		if (instance.shopName != null && instance.shopName != previous.shopName)
		{
			stream.WriteByte(18);
			ProtocolParser.WriteString(stream, instance.shopName);
		}
		if (instance.vmoIndex != previous.vmoIndex)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.vmoIndex);
		}
		Pool.FreeMemoryStream(ref obj);
	}

	public static void Serialize(Stream stream, VendingMachine instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.sellOrderContainer != null)
		{
			stream.WriteByte(10);
			obj.SetLength(0L);
			SellOrderContainer.Serialize(obj, instance.sellOrderContainer);
			uint num = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(obj.GetBuffer(), 0, (int)num);
		}
		if (instance.shopName != null)
		{
			stream.WriteByte(18);
			ProtocolParser.WriteString(stream, instance.shopName);
		}
		stream.WriteByte(24);
		ProtocolParser.WriteUInt64(stream, (ulong)instance.vmoIndex);
		Pool.FreeMemoryStream(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(VendingMachine instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, VendingMachine instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}
}
