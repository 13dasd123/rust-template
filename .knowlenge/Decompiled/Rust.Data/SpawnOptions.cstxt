using System;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class SpawnOptions : IDisposable, Pool.IPooled, IProto
{
	public enum RespawnType
	{
		SleepingBag = 1,
		Bed
	}

	[NonSerialized]
	public RespawnType type;

	[NonSerialized]
	public uint id;

	[NonSerialized]
	public string name;

	[NonSerialized]
	public float unlockSeconds;

	[NonSerialized]
	public Vector3 worldPosition;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(SpawnOptions instance)
	{
		if (instance.ShouldPool)
		{
			instance.type = (RespawnType)0;
			instance.id = 0u;
			instance.name = string.Empty;
			instance.unlockSeconds = 0f;
			instance.worldPosition = default(Vector3);
			Pool.Free(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, SpawnOptions previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public void CopyTo(SpawnOptions instance)
	{
		instance.type = type;
		instance.id = id;
		instance.name = name;
		instance.unlockSeconds = unlockSeconds;
		instance.worldPosition = worldPosition;
	}

	public SpawnOptions Copy()
	{
		SpawnOptions spawnOptions = Pool.Get<SpawnOptions>();
		CopyTo(spawnOptions);
		return spawnOptions;
	}

	public static SpawnOptions Deserialize(Stream stream)
	{
		SpawnOptions spawnOptions = Pool.Get<SpawnOptions>();
		Deserialize(stream, spawnOptions, isDelta: false);
		return spawnOptions;
	}

	public static SpawnOptions DeserializeLengthDelimited(Stream stream)
	{
		SpawnOptions spawnOptions = Pool.Get<SpawnOptions>();
		DeserializeLengthDelimited(stream, spawnOptions, isDelta: false);
		return spawnOptions;
	}

	public static SpawnOptions DeserializeLength(Stream stream, int length)
	{
		SpawnOptions spawnOptions = Pool.Get<SpawnOptions>();
		DeserializeLength(stream, length, spawnOptions, isDelta: false);
		return spawnOptions;
	}

	public static SpawnOptions Deserialize(byte[] buffer)
	{
		SpawnOptions spawnOptions = Pool.Get<SpawnOptions>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, spawnOptions, isDelta: false);
		return spawnOptions;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public static SpawnOptions Deserialize(byte[] buffer, SpawnOptions instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static SpawnOptions Deserialize(Stream stream, SpawnOptions instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.type = (RespawnType)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.id = ProtocolParser.ReadUInt32(stream);
				continue;
			case 26:
				instance.name = ProtocolParser.ReadString(stream);
				continue;
			case 37:
				instance.unlockSeconds = ProtocolParser.ReadSingle(stream);
				continue;
			case 42:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.worldPosition, isDelta);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static SpawnOptions DeserializeLengthDelimited(Stream stream, SpawnOptions instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.type = (RespawnType)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.id = ProtocolParser.ReadUInt32(stream);
				continue;
			case 26:
				instance.name = ProtocolParser.ReadString(stream);
				continue;
			case 37:
				instance.unlockSeconds = ProtocolParser.ReadSingle(stream);
				continue;
			case 42:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.worldPosition, isDelta);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static SpawnOptions DeserializeLength(Stream stream, int length, SpawnOptions instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.type = (RespawnType)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.id = ProtocolParser.ReadUInt32(stream);
				continue;
			case 26:
				instance.name = ProtocolParser.ReadString(stream);
				continue;
			case 37:
				instance.unlockSeconds = ProtocolParser.ReadSingle(stream);
				continue;
			case 42:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.worldPosition, isDelta);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, SpawnOptions instance, SpawnOptions previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		stream.WriteByte(8);
		ProtocolParser.WriteUInt64(stream, (ulong)instance.type);
		if (instance.id != previous.id)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt32(stream, instance.id);
		}
		if (instance.name != previous.name)
		{
			if (instance.name == null)
			{
				throw new ArgumentNullException("name", "Required by proto specification.");
			}
			stream.WriteByte(26);
			ProtocolParser.WriteString(stream, instance.name);
		}
		if (instance.unlockSeconds != previous.unlockSeconds)
		{
			stream.WriteByte(37);
			ProtocolParser.WriteSingle(stream, instance.unlockSeconds);
		}
		if (instance.worldPosition != previous.worldPosition)
		{
			stream.WriteByte(42);
			obj.SetLength(0L);
			Vector3Serialized.SerializeDelta(obj, instance.worldPosition, previous.worldPosition);
			uint num = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(obj.GetBuffer(), 0, (int)num);
		}
		Pool.FreeMemoryStream(ref obj);
	}

	public static void Serialize(Stream stream, SpawnOptions instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		stream.WriteByte(8);
		ProtocolParser.WriteUInt64(stream, (ulong)instance.type);
		stream.WriteByte(16);
		ProtocolParser.WriteUInt32(stream, instance.id);
		if (instance.name == null)
		{
			throw new ArgumentNullException("name", "Required by proto specification.");
		}
		stream.WriteByte(26);
		ProtocolParser.WriteString(stream, instance.name);
		stream.WriteByte(37);
		ProtocolParser.WriteSingle(stream, instance.unlockSeconds);
		stream.WriteByte(42);
		obj.SetLength(0L);
		Vector3Serialized.Serialize(obj, instance.worldPosition);
		uint num = (uint)obj.Length;
		ProtocolParser.WriteUInt32(stream, num);
		stream.Write(obj.GetBuffer(), 0, (int)num);
		Pool.FreeMemoryStream(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(SpawnOptions instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, SpawnOptions instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}
}
