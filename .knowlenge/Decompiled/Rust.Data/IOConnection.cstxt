using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class IOConnection : IDisposable, Pool.IPooled, IProto
{
	public class LineVec : IDisposable, Pool.IPooled, IProto
	{
		public bool ShouldPool = true;

		private bool _disposed;

		[NonSerialized]
		public Vector4 vec;

		public static void ResetToPool(LineVec instance)
		{
			if (instance.ShouldPool)
			{
				instance.vec = default(Vector4);
				Pool.Free(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose LineVec with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(LineVec instance)
		{
			instance.vec = vec;
		}

		public LineVec Copy()
		{
			LineVec lineVec = Pool.Get<LineVec>();
			CopyTo(lineVec);
			return lineVec;
		}

		public static LineVec Deserialize(Stream stream)
		{
			LineVec lineVec = Pool.Get<LineVec>();
			Deserialize(stream, lineVec, isDelta: false);
			return lineVec;
		}

		public static LineVec DeserializeLengthDelimited(Stream stream)
		{
			LineVec lineVec = Pool.Get<LineVec>();
			DeserializeLengthDelimited(stream, lineVec, isDelta: false);
			return lineVec;
		}

		public static LineVec DeserializeLength(Stream stream, int length)
		{
			LineVec lineVec = Pool.Get<LineVec>();
			DeserializeLength(stream, length, lineVec, isDelta: false);
			return lineVec;
		}

		public static LineVec Deserialize(byte[] buffer)
		{
			LineVec lineVec = Pool.Get<LineVec>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, lineVec, isDelta: false);
			return lineVec;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, LineVec previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static LineVec Deserialize(byte[] buffer, LineVec instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static LineVec Deserialize(Stream stream, LineVec instance, bool isDelta)
		{
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 10:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.vec, isDelta);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static LineVec DeserializeLengthDelimited(Stream stream, LineVec instance, bool isDelta)
		{
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.vec, isDelta);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static LineVec DeserializeLength(Stream stream, int length, LineVec instance, bool isDelta)
		{
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.vec, isDelta);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, LineVec instance, LineVec previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.vec != previous.vec)
			{
				stream.WriteByte(10);
				obj.SetLength(0L);
				Vector4Serialized.SerializeDelta(obj, instance.vec, previous.vec);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
			Pool.FreeMemoryStream(ref obj);
		}

		public static void Serialize(Stream stream, LineVec instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			stream.WriteByte(10);
			obj.SetLength(0L);
			Vector4Serialized.Serialize(obj, instance.vec);
			uint num = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(obj.GetBuffer(), 0, (int)num);
			Pool.FreeMemoryStream(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(LineVec instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, LineVec instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}
	}

	public class LinePointList : IDisposable, Pool.IPooled, IProto
	{
		public bool ShouldPool = true;

		private bool _disposed;

		[NonSerialized]
		public Vector4 a;

		[NonSerialized]
		public Vector4 b;

		[NonSerialized]
		public Vector4 c;

		[NonSerialized]
		public Vector4 d;

		[NonSerialized]
		public Vector4 e;

		[NonSerialized]
		public Vector4 f;

		[NonSerialized]
		public Vector4 g;

		[NonSerialized]
		public Vector4 h;

		public static void ResetToPool(LinePointList instance)
		{
			if (instance.ShouldPool)
			{
				instance.a = default(Vector4);
				instance.b = default(Vector4);
				instance.c = default(Vector4);
				instance.d = default(Vector4);
				instance.e = default(Vector4);
				instance.f = default(Vector4);
				instance.g = default(Vector4);
				instance.h = default(Vector4);
				Pool.Free(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose LinePointList with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(LinePointList instance)
		{
			instance.a = a;
			instance.b = b;
			instance.c = c;
			instance.d = d;
			instance.e = e;
			instance.f = f;
			instance.g = g;
			instance.h = h;
		}

		public LinePointList Copy()
		{
			LinePointList linePointList = Pool.Get<LinePointList>();
			CopyTo(linePointList);
			return linePointList;
		}

		public static LinePointList Deserialize(Stream stream)
		{
			LinePointList linePointList = Pool.Get<LinePointList>();
			Deserialize(stream, linePointList, isDelta: false);
			return linePointList;
		}

		public static LinePointList DeserializeLengthDelimited(Stream stream)
		{
			LinePointList linePointList = Pool.Get<LinePointList>();
			DeserializeLengthDelimited(stream, linePointList, isDelta: false);
			return linePointList;
		}

		public static LinePointList DeserializeLength(Stream stream, int length)
		{
			LinePointList linePointList = Pool.Get<LinePointList>();
			DeserializeLength(stream, length, linePointList, isDelta: false);
			return linePointList;
		}

		public static LinePointList Deserialize(byte[] buffer)
		{
			LinePointList linePointList = Pool.Get<LinePointList>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, linePointList, isDelta: false);
			return linePointList;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, LinePointList previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static LinePointList Deserialize(byte[] buffer, LinePointList instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static LinePointList Deserialize(Stream stream, LinePointList instance, bool isDelta)
		{
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 10:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.a, isDelta);
					continue;
				case 18:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.b, isDelta);
					continue;
				case 26:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.c, isDelta);
					continue;
				case 34:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.d, isDelta);
					continue;
				case 42:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.e, isDelta);
					continue;
				case 50:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.f, isDelta);
					continue;
				case 58:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.g, isDelta);
					continue;
				case 66:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.h, isDelta);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static LinePointList DeserializeLengthDelimited(Stream stream, LinePointList instance, bool isDelta)
		{
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.a, isDelta);
					continue;
				case 18:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.b, isDelta);
					continue;
				case 26:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.c, isDelta);
					continue;
				case 34:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.d, isDelta);
					continue;
				case 42:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.e, isDelta);
					continue;
				case 50:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.f, isDelta);
					continue;
				case 58:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.g, isDelta);
					continue;
				case 66:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.h, isDelta);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static LinePointList DeserializeLength(Stream stream, int length, LinePointList instance, bool isDelta)
		{
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.a, isDelta);
					continue;
				case 18:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.b, isDelta);
					continue;
				case 26:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.c, isDelta);
					continue;
				case 34:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.d, isDelta);
					continue;
				case 42:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.e, isDelta);
					continue;
				case 50:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.f, isDelta);
					continue;
				case 58:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.g, isDelta);
					continue;
				case 66:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.h, isDelta);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, LinePointList instance, LinePointList previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.a != previous.a)
			{
				stream.WriteByte(10);
				obj.SetLength(0L);
				Vector4Serialized.SerializeDelta(obj, instance.a, previous.a);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
			if (instance.b != previous.b)
			{
				stream.WriteByte(18);
				obj.SetLength(0L);
				Vector4Serialized.SerializeDelta(obj, instance.b, previous.b);
				uint num2 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(obj.GetBuffer(), 0, (int)num2);
			}
			if (instance.c != previous.c)
			{
				stream.WriteByte(26);
				obj.SetLength(0L);
				Vector4Serialized.SerializeDelta(obj, instance.c, previous.c);
				uint num3 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num3);
				stream.Write(obj.GetBuffer(), 0, (int)num3);
			}
			if (instance.d != previous.d)
			{
				stream.WriteByte(34);
				obj.SetLength(0L);
				Vector4Serialized.SerializeDelta(obj, instance.d, previous.d);
				uint num4 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num4);
				stream.Write(obj.GetBuffer(), 0, (int)num4);
			}
			if (instance.e != previous.e)
			{
				stream.WriteByte(42);
				obj.SetLength(0L);
				Vector4Serialized.SerializeDelta(obj, instance.e, previous.e);
				uint num5 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num5);
				stream.Write(obj.GetBuffer(), 0, (int)num5);
			}
			if (instance.f != previous.f)
			{
				stream.WriteByte(50);
				obj.SetLength(0L);
				Vector4Serialized.SerializeDelta(obj, instance.f, previous.f);
				uint num6 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num6);
				stream.Write(obj.GetBuffer(), 0, (int)num6);
			}
			if (instance.g != previous.g)
			{
				stream.WriteByte(58);
				obj.SetLength(0L);
				Vector4Serialized.SerializeDelta(obj, instance.g, previous.g);
				uint num7 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num7);
				stream.Write(obj.GetBuffer(), 0, (int)num7);
			}
			if (instance.h != previous.h)
			{
				stream.WriteByte(66);
				obj.SetLength(0L);
				Vector4Serialized.SerializeDelta(obj, instance.h, previous.h);
				uint num8 = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num8);
				stream.Write(obj.GetBuffer(), 0, (int)num8);
			}
			Pool.FreeMemoryStream(ref obj);
		}

		public static void Serialize(Stream stream, LinePointList instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			stream.WriteByte(10);
			obj.SetLength(0L);
			Vector4Serialized.Serialize(obj, instance.a);
			uint num = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(obj.GetBuffer(), 0, (int)num);
			stream.WriteByte(18);
			obj.SetLength(0L);
			Vector4Serialized.Serialize(obj, instance.b);
			uint num2 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(obj.GetBuffer(), 0, (int)num2);
			stream.WriteByte(26);
			obj.SetLength(0L);
			Vector4Serialized.Serialize(obj, instance.c);
			uint num3 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num3);
			stream.Write(obj.GetBuffer(), 0, (int)num3);
			stream.WriteByte(34);
			obj.SetLength(0L);
			Vector4Serialized.Serialize(obj, instance.d);
			uint num4 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num4);
			stream.Write(obj.GetBuffer(), 0, (int)num4);
			stream.WriteByte(42);
			obj.SetLength(0L);
			Vector4Serialized.Serialize(obj, instance.e);
			uint num5 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num5);
			stream.Write(obj.GetBuffer(), 0, (int)num5);
			stream.WriteByte(50);
			obj.SetLength(0L);
			Vector4Serialized.Serialize(obj, instance.f);
			uint num6 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num6);
			stream.Write(obj.GetBuffer(), 0, (int)num6);
			stream.WriteByte(58);
			obj.SetLength(0L);
			Vector4Serialized.Serialize(obj, instance.g);
			uint num7 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num7);
			stream.Write(obj.GetBuffer(), 0, (int)num7);
			stream.WriteByte(66);
			obj.SetLength(0L);
			Vector4Serialized.Serialize(obj, instance.h);
			uint num8 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num8);
			stream.Write(obj.GetBuffer(), 0, (int)num8);
			Pool.FreeMemoryStream(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(LinePointList instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, LinePointList instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}
	}

	public bool ShouldPool = true;

	private bool _disposed;

	[NonSerialized]
	public string niceName;

	[NonSerialized]
	public int type;

	[NonSerialized]
	public uint connectedID;

	[NonSerialized]
	public int connectedToSlot;

	[NonSerialized]
	public bool inUse;

	[NonSerialized]
	public List<LineVec> linePointList;

	public static void ResetToPool(IOConnection instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		instance.niceName = string.Empty;
		instance.type = 0;
		instance.connectedID = 0u;
		instance.connectedToSlot = 0;
		instance.inUse = false;
		if (instance.linePointList != null)
		{
			for (int i = 0; i < instance.linePointList.Count; i++)
			{
				if (instance.linePointList[i] != null)
				{
					instance.linePointList[i].ResetToPool();
					instance.linePointList[i] = null;
				}
			}
			List<LineVec> obj = instance.linePointList;
			Pool.FreeList(ref obj);
			instance.linePointList = obj;
		}
		Pool.Free(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose IOConnection with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(IOConnection instance)
	{
		instance.niceName = niceName;
		instance.type = type;
		instance.connectedID = connectedID;
		instance.connectedToSlot = connectedToSlot;
		instance.inUse = inUse;
		throw new NotImplementedException();
	}

	public IOConnection Copy()
	{
		IOConnection iOConnection = Pool.Get<IOConnection>();
		CopyTo(iOConnection);
		return iOConnection;
	}

	public static IOConnection Deserialize(Stream stream)
	{
		IOConnection iOConnection = Pool.Get<IOConnection>();
		Deserialize(stream, iOConnection, isDelta: false);
		return iOConnection;
	}

	public static IOConnection DeserializeLengthDelimited(Stream stream)
	{
		IOConnection iOConnection = Pool.Get<IOConnection>();
		DeserializeLengthDelimited(stream, iOConnection, isDelta: false);
		return iOConnection;
	}

	public static IOConnection DeserializeLength(Stream stream, int length)
	{
		IOConnection iOConnection = Pool.Get<IOConnection>();
		DeserializeLength(stream, length, iOConnection, isDelta: false);
		return iOConnection;
	}

	public static IOConnection Deserialize(byte[] buffer)
	{
		IOConnection iOConnection = Pool.Get<IOConnection>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, iOConnection, isDelta: false);
		return iOConnection;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, IOConnection previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static IOConnection Deserialize(byte[] buffer, IOConnection instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static IOConnection Deserialize(Stream stream, IOConnection instance, bool isDelta)
	{
		if (!isDelta && instance.linePointList == null)
		{
			instance.linePointList = Pool.Get<List<LineVec>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.niceName = ProtocolParser.ReadString(stream);
				continue;
			case 16:
				instance.type = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.connectedID = ProtocolParser.ReadUInt32(stream);
				continue;
			case 32:
				instance.connectedToSlot = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.inUse = ProtocolParser.ReadBool(stream);
				continue;
			case 50:
				instance.linePointList.Add(LineVec.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static IOConnection DeserializeLengthDelimited(Stream stream, IOConnection instance, bool isDelta)
	{
		if (!isDelta && instance.linePointList == null)
		{
			instance.linePointList = Pool.Get<List<LineVec>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.niceName = ProtocolParser.ReadString(stream);
				continue;
			case 16:
				instance.type = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.connectedID = ProtocolParser.ReadUInt32(stream);
				continue;
			case 32:
				instance.connectedToSlot = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.inUse = ProtocolParser.ReadBool(stream);
				continue;
			case 50:
				instance.linePointList.Add(LineVec.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static IOConnection DeserializeLength(Stream stream, int length, IOConnection instance, bool isDelta)
	{
		if (!isDelta && instance.linePointList == null)
		{
			instance.linePointList = Pool.Get<List<LineVec>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.niceName = ProtocolParser.ReadString(stream);
				continue;
			case 16:
				instance.type = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.connectedID = ProtocolParser.ReadUInt32(stream);
				continue;
			case 32:
				instance.connectedToSlot = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.inUse = ProtocolParser.ReadBool(stream);
				continue;
			case 50:
				instance.linePointList.Add(LineVec.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, IOConnection instance, IOConnection previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.niceName != null && instance.niceName != previous.niceName)
		{
			stream.WriteByte(10);
			ProtocolParser.WriteString(stream, instance.niceName);
		}
		if (instance.type != previous.type)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.type);
		}
		if (instance.connectedID != previous.connectedID)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt32(stream, instance.connectedID);
		}
		if (instance.connectedToSlot != previous.connectedToSlot)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.connectedToSlot);
		}
		stream.WriteByte(40);
		ProtocolParser.WriteBool(stream, instance.inUse);
		if (instance.linePointList != null)
		{
			for (int i = 0; i < instance.linePointList.Count; i++)
			{
				LineVec lineVec = instance.linePointList[i];
				stream.WriteByte(50);
				obj.SetLength(0L);
				LineVec.SerializeDelta(obj, lineVec, lineVec);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeMemoryStream(ref obj);
	}

	public static void Serialize(Stream stream, IOConnection instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.niceName != null)
		{
			stream.WriteByte(10);
			ProtocolParser.WriteString(stream, instance.niceName);
		}
		stream.WriteByte(16);
		ProtocolParser.WriteUInt64(stream, (ulong)instance.type);
		stream.WriteByte(24);
		ProtocolParser.WriteUInt32(stream, instance.connectedID);
		stream.WriteByte(32);
		ProtocolParser.WriteUInt64(stream, (ulong)instance.connectedToSlot);
		stream.WriteByte(40);
		ProtocolParser.WriteBool(stream, instance.inUse);
		if (instance.linePointList != null)
		{
			for (int i = 0; i < instance.linePointList.Count; i++)
			{
				LineVec instance2 = instance.linePointList[i];
				stream.WriteByte(50);
				obj.SetLength(0L);
				LineVec.Serialize(obj, instance2);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeMemoryStream(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(IOConnection instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, IOConnection instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}
}
