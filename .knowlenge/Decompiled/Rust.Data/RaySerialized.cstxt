using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class RaySerialized
{
	public static void ResetToPool(Ray instance)
	{
		//IL_0004: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		((Ray)(ref instance)).origin = default(Vector3);
		((Ray)(ref instance)).direction = default(Vector3);
	}

	public static Ray Deserialize(byte[] buffer, ref Ray instance, bool isDelta = false)
	{
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		using (MemoryStream stream = new MemoryStream(buffer))
		{
			Deserialize(stream, ref instance, isDelta);
		}
		return instance;
	}

	public static Ray Deserialize(Stream stream, ref Ray instance, bool isDelta)
	{
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
			{
				Vector3 instance3 = ((Ray)(ref instance)).origin;
				((Ray)(ref instance)).origin = Vector3Serialized.DeserializeLengthDelimited(stream, ref instance3, isDelta);
				continue;
			}
			case 18:
			{
				Vector3 instance2 = ((Ray)(ref instance)).direction;
				((Ray)(ref instance)).direction = Vector3Serialized.DeserializeLengthDelimited(stream, ref instance2, isDelta);
				continue;
			}
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static Ray DeserializeLengthDelimited(Stream stream, ref Ray instance, bool isDelta)
	{
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
			{
				Vector3 instance2 = ((Ray)(ref instance)).origin;
				((Ray)(ref instance)).origin = Vector3Serialized.DeserializeLengthDelimited(stream, ref instance2, isDelta);
				continue;
			}
			case 18:
			{
				Vector3 instance3 = ((Ray)(ref instance)).direction;
				((Ray)(ref instance)).direction = Vector3Serialized.DeserializeLengthDelimited(stream, ref instance3, isDelta);
				continue;
			}
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Ray DeserializeLength(Stream stream, int length, ref Ray instance, bool isDelta)
	{
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
			{
				Vector3 instance2 = ((Ray)(ref instance)).origin;
				((Ray)(ref instance)).origin = Vector3Serialized.DeserializeLengthDelimited(stream, ref instance2, isDelta);
				continue;
			}
			case 18:
			{
				Vector3 instance3 = ((Ray)(ref instance)).direction;
				((Ray)(ref instance)).direction = Vector3Serialized.DeserializeLengthDelimited(stream, ref instance3, isDelta);
				continue;
			}
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, Ray instance, Ray previous)
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (((Ray)(ref instance)).origin != ((Ray)(ref previous)).origin)
		{
			stream.WriteByte(10);
			memoryStream.SetLength(0L);
			Vector3Serialized.SerializeDelta(memoryStream, ((Ray)(ref instance)).origin, ((Ray)(ref previous)).origin);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		if (((Ray)(ref instance)).direction != ((Ray)(ref previous)).direction)
		{
			stream.WriteByte(18);
			memoryStream.SetLength(0L);
			Vector3Serialized.SerializeDelta(memoryStream, ((Ray)(ref instance)).direction, ((Ray)(ref previous)).direction);
			uint num2 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, Ray instance)
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (((Ray)(ref instance)).origin != default(Vector3))
		{
			stream.WriteByte(10);
			memoryStream.SetLength(0L);
			Vector3Serialized.Serialize(memoryStream, ((Ray)(ref instance)).origin);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		if (((Ray)(ref instance)).direction != default(Vector3))
		{
			stream.WriteByte(18);
			memoryStream.SetLength(0L);
			Vector3Serialized.Serialize(memoryStream, ((Ray)(ref instance)).direction);
			uint num2 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static byte[] SerializeToBytes(Ray instance)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, Ray instance)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}
