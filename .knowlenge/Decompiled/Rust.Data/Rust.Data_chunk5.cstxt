using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class AppTeamInfo : IDisposable, IPooled, IProto
{
	public class Member : IDisposable, IPooled, IProto
	{
		[NonSerialized]
		public ulong steamId;

		[NonSerialized]
		public string name;

		[NonSerialized]
		public float x;

		[NonSerialized]
		public float y;

		[NonSerialized]
		public bool isOnline;

		[NonSerialized]
		public uint spawnTime;

		[NonSerialized]
		public bool isAlive;

		[NonSerialized]
		public uint deathTime;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(Member instance)
		{
			if (instance.ShouldPool)
			{
				instance.steamId = 0uL;
				instance.name = string.Empty;
				instance.x = 0f;
				instance.y = 0f;
				instance.isOnline = false;
				instance.spawnTime = 0u;
				instance.isAlive = false;
				instance.deathTime = 0u;
				Pool.Free<Member>(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose Member with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(Member instance)
		{
			instance.steamId = steamId;
			instance.name = name;
			instance.x = x;
			instance.y = y;
			instance.isOnline = isOnline;
			instance.spawnTime = spawnTime;
			instance.isAlive = isAlive;
			instance.deathTime = deathTime;
		}

		public Member Copy()
		{
			Member member = Pool.Get<Member>();
			CopyTo(member);
			return member;
		}

		public static Member Deserialize(Stream stream)
		{
			Member member = Pool.Get<Member>();
			Deserialize(stream, member, isDelta: false);
			return member;
		}

		public static Member DeserializeLengthDelimited(Stream stream)
		{
			Member member = Pool.Get<Member>();
			DeserializeLengthDelimited(stream, member, isDelta: false);
			return member;
		}

		public static Member DeserializeLength(Stream stream, int length)
		{
			Member member = Pool.Get<Member>();
			DeserializeLength(stream, length, member, isDelta: false);
			return member;
		}

		public static Member Deserialize(byte[] buffer)
		{
			Member member = Pool.Get<Member>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, member, isDelta: false);
			return member;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, Member previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static Member Deserialize(byte[] buffer, Member instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static Member Deserialize(Stream stream, Member instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.steamId = 0uL;
				instance.x = 0f;
				instance.y = 0f;
				instance.isOnline = false;
				instance.spawnTime = 0u;
				instance.isAlive = false;
				instance.deathTime = 0u;
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.steamId = ProtocolParser.ReadUInt64(stream);
					continue;
				case 18:
					instance.name = ProtocolParser.ReadString(stream);
					continue;
				case 29:
					instance.x = ProtocolParser.ReadSingle(stream);
					continue;
				case 37:
					instance.y = ProtocolParser.ReadSingle(stream);
					continue;
				case 40:
					instance.isOnline = ProtocolParser.ReadBool(stream);
					continue;
				case 48:
					instance.spawnTime = ProtocolParser.ReadUInt32(stream);
					continue;
				case 56:
					instance.isAlive = ProtocolParser.ReadBool(stream);
					continue;
				case 64:
					instance.deathTime = ProtocolParser.ReadUInt32(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static Member DeserializeLengthDelimited(Stream stream, Member instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.steamId = 0uL;
				instance.x = 0f;
				instance.y = 0f;
				instance.isOnline = false;
				instance.spawnTime = 0u;
				instance.isAlive = false;
				instance.deathTime = 0u;
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.steamId = ProtocolParser.ReadUInt64(stream);
					continue;
				case 18:
					instance.name = ProtocolParser.ReadString(stream);
					continue;
				case 29:
					instance.x = ProtocolParser.ReadSingle(stream);
					continue;
				case 37:
					instance.y = ProtocolParser.ReadSingle(stream);
					continue;
				case 40:
					instance.isOnline = ProtocolParser.ReadBool(stream);
					continue;
				case 48:
					instance.spawnTime = ProtocolParser.ReadUInt32(stream);
					continue;
				case 56:
					instance.isAlive = ProtocolParser.ReadBool(stream);
					continue;
				case 64:
					instance.deathTime = ProtocolParser.ReadUInt32(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static Member DeserializeLength(Stream stream, int length, Member instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.steamId = 0uL;
				instance.x = 0f;
				instance.y = 0f;
				instance.isOnline = false;
				instance.spawnTime = 0u;
				instance.isAlive = false;
				instance.deathTime = 0u;
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.steamId = ProtocolParser.ReadUInt64(stream);
					continue;
				case 18:
					instance.name = ProtocolParser.ReadString(stream);
					continue;
				case 29:
					instance.x = ProtocolParser.ReadSingle(stream);
					continue;
				case 37:
					instance.y = ProtocolParser.ReadSingle(stream);
					continue;
				case 40:
					instance.isOnline = ProtocolParser.ReadBool(stream);
					continue;
				case 48:
					instance.spawnTime = ProtocolParser.ReadUInt32(stream);
					continue;
				case 56:
					instance.isAlive = ProtocolParser.ReadBool(stream);
					continue;
				case 64:
					instance.deathTime = ProtocolParser.ReadUInt32(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, Member instance, Member previous)
		{
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.steamId != previous.steamId)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, instance.steamId);
			}
			if (instance.name != previous.name)
			{
				if (instance.name == null)
				{
					throw new ArgumentNullException("name", "Required by proto specification.");
				}
				stream.WriteByte(18);
				ProtocolParser.WriteString(stream, instance.name);
			}
			if (instance.x != previous.x)
			{
				stream.WriteByte(29);
				ProtocolParser.WriteSingle(stream, instance.x);
			}
			if (instance.y != previous.y)
			{
				stream.WriteByte(37);
				ProtocolParser.WriteSingle(stream, instance.y);
			}
			stream.WriteByte(40);
			ProtocolParser.WriteBool(stream, instance.isOnline);
			if (instance.spawnTime != previous.spawnTime)
			{
				stream.WriteByte(48);
				ProtocolParser.WriteUInt32(stream, instance.spawnTime);
			}
			stream.WriteByte(56);
			ProtocolParser.WriteBool(stream, instance.isAlive);
			if (instance.deathTime != previous.deathTime)
			{
				stream.WriteByte(64);
				ProtocolParser.WriteUInt32(stream, instance.deathTime);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public static void Serialize(Stream stream, Member instance)
		{
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.steamId != 0L)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, instance.steamId);
			}
			if (instance.name == null)
			{
				throw new ArgumentNullException("name", "Required by proto specification.");
			}
			stream.WriteByte(18);
			ProtocolParser.WriteString(stream, instance.name);
			if (instance.x != 0f)
			{
				stream.WriteByte(29);
				ProtocolParser.WriteSingle(stream, instance.x);
			}
			if (instance.y != 0f)
			{
				stream.WriteByte(37);
				ProtocolParser.WriteSingle(stream, instance.y);
			}
			if (instance.isOnline)
			{
				stream.WriteByte(40);
				ProtocolParser.WriteBool(stream, instance.isOnline);
			}
			if (instance.spawnTime != 0)
			{
				stream.WriteByte(48);
				ProtocolParser.WriteUInt32(stream, instance.spawnTime);
			}
			if (instance.isAlive)
			{
				stream.WriteByte(56);
				ProtocolParser.WriteBool(stream, instance.isAlive);
			}
			if (instance.deathTime != 0)
			{
				stream.WriteByte(64);
				ProtocolParser.WriteUInt32(stream, instance.deathTime);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(Member instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, Member instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	public class Note : IDisposable, IPooled, IProto
	{
		[NonSerialized]
		public int type;

		[NonSerialized]
		public float x;

		[NonSerialized]
		public float y;

		[NonSerialized]
		public int icon;

		[NonSerialized]
		public int colourIndex;

		[NonSerialized]
		public string label;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(Note instance)
		{
			if (instance.ShouldPool)
			{
				instance.type = 0;
				instance.x = 0f;
				instance.y = 0f;
				instance.icon = 0;
				instance.colourIndex = 0;
				instance.label = string.Empty;
				Pool.Free<Note>(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose Note with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(Note instance)
		{
			instance.type = type;
			instance.x = x;
			instance.y = y;
			instance.icon = icon;
			instance.colourIndex = colourIndex;
			instance.label = label;
		}

		public Note Copy()
		{
			Note note = Pool.Get<Note>();
			CopyTo(note);
			return note;
		}

		public static Note Deserialize(Stream stream)
		{
			Note note = Pool.Get<Note>();
			Deserialize(stream, note, isDelta: false);
			return note;
		}

		public static Note DeserializeLengthDelimited(Stream stream)
		{
			Note note = Pool.Get<Note>();
			DeserializeLengthDelimited(stream, note, isDelta: false);
			return note;
		}

		public static Note DeserializeLength(Stream stream, int length)
		{
			Note note = Pool.Get<Note>();
			DeserializeLength(stream, length, note, isDelta: false);
			return note;
		}

		public static Note Deserialize(byte[] buffer)
		{
			Note note = Pool.Get<Note>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, note, isDelta: false);
			return note;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, Note previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static Note Deserialize(byte[] buffer, Note instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static Note Deserialize(Stream stream, Note instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.type = 0;
				instance.x = 0f;
				instance.y = 0f;
				instance.icon = 0;
				instance.colourIndex = 0;
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 16:
					instance.type = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 29:
					instance.x = ProtocolParser.ReadSingle(stream);
					continue;
				case 37:
					instance.y = ProtocolParser.ReadSingle(stream);
					continue;
				case 40:
					instance.icon = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 48:
					instance.colourIndex = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 58:
					instance.label = ProtocolParser.ReadString(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static Note DeserializeLengthDelimited(Stream stream, Note instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.type = 0;
				instance.x = 0f;
				instance.y = 0f;
				instance.icon = 0;
				instance.colourIndex = 0;
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 16:
					instance.type = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 29:
					instance.x = ProtocolParser.ReadSingle(stream);
					continue;
				case 37:
					instance.y = ProtocolParser.ReadSingle(stream);
					continue;
				case 40:
					instance.icon = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 48:
					instance.colourIndex = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 58:
					instance.label = ProtocolParser.ReadString(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static Note DeserializeLength(Stream stream, int length, Note instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.type = 0;
				instance.x = 0f;
				instance.y = 0f;
				instance.icon = 0;
				instance.colourIndex = 0;
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 16:
					instance.type = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 29:
					instance.x = ProtocolParser.ReadSingle(stream);
					continue;
				case 37:
					instance.y = ProtocolParser.ReadSingle(stream);
					continue;
				case 40:
					instance.icon = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 48:
					instance.colourIndex = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 58:
					instance.label = ProtocolParser.ReadString(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, Note instance, Note previous)
		{
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.type != previous.type)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.type);
			}
			if (instance.x != previous.x)
			{
				stream.WriteByte(29);
				ProtocolParser.WriteSingle(stream, instance.x);
			}
			if (instance.y != previous.y)
			{
				stream.WriteByte(37);
				ProtocolParser.WriteSingle(stream, instance.y);
			}
			if (instance.icon != previous.icon)
			{
				stream.WriteByte(40);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.icon);
			}
			if (instance.colourIndex != previous.colourIndex)
			{
				stream.WriteByte(48);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.colourIndex);
			}
			if (instance.label != null && instance.label != previous.label)
			{
				stream.WriteByte(58);
				ProtocolParser.WriteString(stream, instance.label);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public static void Serialize(Stream stream, Note instance)
		{
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.type != 0)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.type);
			}
			if (instance.x != 0f)
			{
				stream.WriteByte(29);
				ProtocolParser.WriteSingle(stream, instance.x);
			}
			if (instance.y != 0f)
			{
				stream.WriteByte(37);
				ProtocolParser.WriteSingle(stream, instance.y);
			}
			if (instance.icon != 0)
			{
				stream.WriteByte(40);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.icon);
			}
			if (instance.colourIndex != 0)
			{
				stream.WriteByte(48);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.colourIndex);
			}
			if (instance.label != null)
			{
				stream.WriteByte(58);
				ProtocolParser.WriteString(stream, instance.label);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(Note instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, Note instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	[NonSerialized]
	public ulong leaderSteamId;

	[NonSerialized]
	public List<Member> members;

	[NonSerialized]
	public List<Note> mapNotes;

	[NonSerialized]
	public List<Note> leaderMapNotes;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(AppTeamInfo instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		instance.leaderSteamId = 0uL;
		if (instance.members != null)
		{
			for (int i = 0; i < instance.members.Count; i++)
			{
				if (instance.members[i] != null)
				{
					instance.members[i].ResetToPool();
					instance.members[i] = null;
				}
			}
			List<Member> list = instance.members;
			Pool.Free<Member>(ref list, false);
			instance.members = list;
		}
		if (instance.mapNotes != null)
		{
			for (int j = 0; j < instance.mapNotes.Count; j++)
			{
				if (instance.mapNotes[j] != null)
				{
					instance.mapNotes[j].ResetToPool();
					instance.mapNotes[j] = null;
				}
			}
			List<Note> list2 = instance.mapNotes;
			Pool.Free<Note>(ref list2, false);
			instance.mapNotes = list2;
		}
		if (instance.leaderMapNotes != null)
		{
			for (int k = 0; k < instance.leaderMapNotes.Count; k++)
			{
				if (instance.leaderMapNotes[k] != null)
				{
					instance.leaderMapNotes[k].ResetToPool();
					instance.leaderMapNotes[k] = null;
				}
			}
			List<Note> list3 = instance.leaderMapNotes;
			Pool.Free<Note>(ref list3, false);
			instance.leaderMapNotes = list3;
		}
		Pool.Free<AppTeamInfo>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose AppTeamInfo with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(AppTeamInfo instance)
	{
		instance.leaderSteamId = leaderSteamId;
		if (members != null)
		{
			instance.members = Pool.Get<List<Member>>();
			for (int i = 0; i < members.Count; i++)
			{
				Member item = members[i].Copy();
				instance.members.Add(item);
			}
		}
		else
		{
			instance.members = null;
		}
		if (mapNotes != null)
		{
			instance.mapNotes = Pool.Get<List<Note>>();
			for (int j = 0; j < mapNotes.Count; j++)
			{
				Note item2 = mapNotes[j].Copy();
				instance.mapNotes.Add(item2);
			}
		}
		else
		{
			instance.mapNotes = null;
		}
		if (leaderMapNotes != null)
		{
			instance.leaderMapNotes = Pool.Get<List<Note>>();
			for (int k = 0; k < leaderMapNotes.Count; k++)
			{
				Note item3 = leaderMapNotes[k].Copy();
				instance.leaderMapNotes.Add(item3);
			}
		}
		else
		{
			instance.leaderMapNotes = null;
		}
	}

	public AppTeamInfo Copy()
	{
		AppTeamInfo appTeamInfo = Pool.Get<AppTeamInfo>();
		CopyTo(appTeamInfo);
		return appTeamInfo;
	}

	public static AppTeamInfo Deserialize(Stream stream)
	{
		AppTeamInfo appTeamInfo = Pool.Get<AppTeamInfo>();
		Deserialize(stream, appTeamInfo, isDelta: false);
		return appTeamInfo;
	}

	public static AppTeamInfo DeserializeLengthDelimited(Stream stream)
	{
		AppTeamInfo appTeamInfo = Pool.Get<AppTeamInfo>();
		DeserializeLengthDelimited(stream, appTeamInfo, isDelta: false);
		return appTeamInfo;
	}

	public static AppTeamInfo DeserializeLength(Stream stream, int length)
	{
		AppTeamInfo appTeamInfo = Pool.Get<AppTeamInfo>();
		DeserializeLength(stream, length, appTeamInfo, isDelta: false);
		return appTeamInfo;
	}

	public static AppTeamInfo Deserialize(byte[] buffer)
	{
		AppTeamInfo appTeamInfo = Pool.Get<AppTeamInfo>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, appTeamInfo, isDelta: false);
		return appTeamInfo;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, AppTeamInfo previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static AppTeamInfo Deserialize(byte[] buffer, AppTeamInfo instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static AppTeamInfo Deserialize(Stream stream, AppTeamInfo instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.leaderSteamId = 0uL;
			if (instance.members == null)
			{
				instance.members = Pool.Get<List<Member>>();
			}
			if (instance.mapNotes == null)
			{
				instance.mapNotes = Pool.Get<List<Note>>();
			}
			if (instance.leaderMapNotes == null)
			{
				instance.leaderMapNotes = Pool.Get<List<Note>>();
			}
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.leaderSteamId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.members.Add(Member.DeserializeLengthDelimited(stream));
				continue;
			case 26:
				instance.mapNotes.Add(Note.DeserializeLengthDelimited(stream));
				continue;
			case 34:
				instance.leaderMapNotes.Add(Note.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static AppTeamInfo DeserializeLengthDelimited(Stream stream, AppTeamInfo instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.leaderSteamId = 0uL;
			if (instance.members == null)
			{
				instance.members = Pool.Get<List<Member>>();
			}
			if (instance.mapNotes == null)
			{
				instance.mapNotes = Pool.Get<List<Note>>();
			}
			if (instance.leaderMapNotes == null)
			{
				instance.leaderMapNotes = Pool.Get<List<Note>>();
			}
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.leaderSteamId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.members.Add(Member.DeserializeLengthDelimited(stream));
				continue;
			case 26:
				instance.mapNotes.Add(Note.DeserializeLengthDelimited(stream));
				continue;
			case 34:
				instance.leaderMapNotes.Add(Note.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static AppTeamInfo DeserializeLength(Stream stream, int length, AppTeamInfo instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.leaderSteamId = 0uL;
			if (instance.members == null)
			{
				instance.members = Pool.Get<List<Member>>();
			}
			if (instance.mapNotes == null)
			{
				instance.mapNotes = Pool.Get<List<Note>>();
			}
			if (instance.leaderMapNotes == null)
			{
				instance.leaderMapNotes = Pool.Get<List<Note>>();
			}
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.leaderSteamId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.members.Add(Member.DeserializeLengthDelimited(stream));
				continue;
			case 26:
				instance.mapNotes.Add(Note.DeserializeLengthDelimited(stream));
				continue;
			case 34:
				instance.leaderMapNotes.Add(Note.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, AppTeamInfo instance, AppTeamInfo previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.leaderSteamId != previous.leaderSteamId)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.leaderSteamId);
		}
		if (instance.members != null)
		{
			for (int i = 0; i < instance.members.Count; i++)
			{
				Member member = instance.members[i];
				stream.WriteByte(18);
				memoryStream.SetLength(0L);
				Member.SerializeDelta(memoryStream, member, member);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.mapNotes != null)
		{
			for (int j = 0; j < instance.mapNotes.Count; j++)
			{
				Note note = instance.mapNotes[j];
				stream.WriteByte(26);
				memoryStream.SetLength(0L);
				Note.SerializeDelta(memoryStream, note, note);
				uint num2 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
			}
		}
		if (instance.leaderMapNotes != null)
		{
			for (int k = 0; k < instance.leaderMapNotes.Count; k++)
			{
				Note note2 = instance.leaderMapNotes[k];
				stream.WriteByte(34);
				memoryStream.SetLength(0L);
				Note.SerializeDelta(memoryStream, note2, note2);
				uint num3 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num3);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num3);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, AppTeamInfo instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.leaderSteamId != 0L)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.leaderSteamId);
		}
		if (instance.members != null)
		{
			for (int i = 0; i < instance.members.Count; i++)
			{
				Member instance2 = instance.members[i];
				stream.WriteByte(18);
				memoryStream.SetLength(0L);
				Member.Serialize(memoryStream, instance2);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.mapNotes != null)
		{
			for (int j = 0; j < instance.mapNotes.Count; j++)
			{
				Note instance3 = instance.mapNotes[j];
				stream.WriteByte(26);
				memoryStream.SetLength(0L);
				Note.Serialize(memoryStream, instance3);
				uint num2 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
			}
		}
		if (instance.leaderMapNotes != null)
		{
			for (int k = 0; k < instance.leaderMapNotes.Count; k++)
			{
				Note instance4 = instance.leaderMapNotes[k];
				stream.WriteByte(34);
				memoryStream.SetLength(0L);
				Note.Serialize(memoryStream, instance4);
				uint num3 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num3);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num3);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(AppTeamInfo instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, AppTeamInfo instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (members != null)
		{
			for (int i = 0; i < members.Count; i++)
			{
				members[i]?.InspectUids(action);
			}
		}
		if (mapNotes != null)
		{
			for (int j = 0; j < mapNotes.Count; j++)
			{
				mapNotes[j]?.InspectUids(action);
			}
		}
		if (leaderMapNotes != null)
		{
			for (int k = 0; k < leaderMapNotes.Count; k++)
			{
				leaderMapNotes[k]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class AppTeamMessage : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public ulong steamId;

	[NonSerialized]
	public string name;

	[NonSerialized]
	public string message;

	[NonSerialized]
	public string color;

	[NonSerialized]
	public uint time;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(AppTeamMessage instance)
	{
		if (instance.ShouldPool)
		{
			instance.steamId = 0uL;
			instance.name = string.Empty;
			instance.message = string.Empty;
			instance.color = string.Empty;
			instance.time = 0u;
			Pool.Free<AppTeamMessage>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose AppTeamMessage with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(AppTeamMessage instance)
	{
		instance.steamId = steamId;
		instance.name = name;
		instance.message = message;
		instance.color = color;
		instance.time = time;
	}

	public AppTeamMessage Copy()
	{
		AppTeamMessage appTeamMessage = Pool.Get<AppTeamMessage>();
		CopyTo(appTeamMessage);
		return appTeamMessage;
	}

	public static AppTeamMessage Deserialize(Stream stream)
	{
		AppTeamMessage appTeamMessage = Pool.Get<AppTeamMessage>();
		Deserialize(stream, appTeamMessage, isDelta: false);
		return appTeamMessage;
	}

	public static AppTeamMessage DeserializeLengthDelimited(Stream stream)
	{
		AppTeamMessage appTeamMessage = Pool.Get<AppTeamMessage>();
		DeserializeLengthDelimited(stream, appTeamMessage, isDelta: false);
		return appTeamMessage;
	}

	public static AppTeamMessage DeserializeLength(Stream stream, int length)
	{
		AppTeamMessage appTeamMessage = Pool.Get<AppTeamMessage>();
		DeserializeLength(stream, length, appTeamMessage, isDelta: false);
		return appTeamMessage;
	}

	public static AppTeamMessage Deserialize(byte[] buffer)
	{
		AppTeamMessage appTeamMessage = Pool.Get<AppTeamMessage>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, appTeamMessage, isDelta: false);
		return appTeamMessage;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, AppTeamMessage previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static AppTeamMessage Deserialize(byte[] buffer, AppTeamMessage instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static AppTeamMessage Deserialize(Stream stream, AppTeamMessage instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.steamId = 0uL;
			instance.time = 0u;
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.steamId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.name = ProtocolParser.ReadString(stream);
				continue;
			case 26:
				instance.message = ProtocolParser.ReadString(stream);
				continue;
			case 34:
				instance.color = ProtocolParser.ReadString(stream);
				continue;
			case 40:
				instance.time = ProtocolParser.ReadUInt32(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static AppTeamMessage DeserializeLengthDelimited(Stream stream, AppTeamMessage instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.steamId = 0uL;
			instance.time = 0u;
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.steamId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.name = ProtocolParser.ReadString(stream);
				continue;
			case 26:
				instance.message = ProtocolParser.ReadString(stream);
				continue;
			case 34:
				instance.color = ProtocolParser.ReadString(stream);
				continue;
			case 40:
				instance.time = ProtocolParser.ReadUInt32(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static AppTeamMessage DeserializeLength(Stream stream, int length, AppTeamMessage instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.steamId = 0uL;
			instance.time = 0u;
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.steamId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.name = ProtocolParser.ReadString(stream);
				continue;
			case 26:
				instance.message = ProtocolParser.ReadString(stream);
				continue;
			case 34:
				instance.color = ProtocolParser.ReadString(stream);
				continue;
			case 40:
				instance.time = ProtocolParser.ReadUInt32(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, AppTeamMessage instance, AppTeamMessage previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.steamId != previous.steamId)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.steamId);
		}
		if (instance.name != previous.name)
		{
			if (instance.name == null)
			{
				throw new ArgumentNullException("name", "Required by proto specification.");
			}
			stream.WriteByte(18);
			ProtocolParser.WriteString(stream, instance.name);
		}
		if (instance.message != previous.message)
		{
			if (instance.message == null)
			{
				throw new ArgumentNullException("message", "Required by proto specification.");
			}
			stream.WriteByte(26);
			ProtocolParser.WriteString(stream, instance.message);
		}
		if (instance.color != previous.color)
		{
			if (instance.color == null)
			{
				throw new ArgumentNullException("color", "Required by proto specification.");
			}
			stream.WriteByte(34);
			ProtocolParser.WriteString(stream, instance.color);
		}
		if (instance.time != previous.time)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt32(stream, instance.time);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, AppTeamMessage instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.steamId != 0L)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.steamId);
		}
		if (instance.name == null)
		{
			throw new ArgumentNullException("name", "Required by proto specification.");
		}
		stream.WriteByte(18);
		ProtocolParser.WriteString(stream, instance.name);
		if (instance.message == null)
		{
			throw new ArgumentNullException("message", "Required by proto specification.");
		}
		stream.WriteByte(26);
		ProtocolParser.WriteString(stream, instance.message);
		if (instance.color == null)
		{
			throw new ArgumentNullException("color", "Required by proto specification.");
		}
		stream.WriteByte(34);
		ProtocolParser.WriteString(stream, instance.color);
		if (instance.time != 0)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt32(stream, instance.time);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(AppTeamMessage instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, AppTeamMessage instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class AppTeamChat : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public List<AppTeamMessage> messages;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(AppTeamChat instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.messages != null)
		{
			for (int i = 0; i < instance.messages.Count; i++)
			{
				if (instance.messages[i] != null)
				{
					instance.messages[i].ResetToPool();
					instance.messages[i] = null;
				}
			}
			List<AppTeamMessage> list = instance.messages;
			Pool.Free<AppTeamMessage>(ref list, false);
			instance.messages = list;
		}
		Pool.Free<AppTeamChat>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose AppTeamChat with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(AppTeamChat instance)
	{
		if (messages != null)
		{
			instance.messages = Pool.Get<List<AppTeamMessage>>();
			for (int i = 0; i < messages.Count; i++)
			{
				AppTeamMessage item = messages[i].Copy();
				instance.messages.Add(item);
			}
		}
		else
		{
			instance.messages = null;
		}
	}

	public AppTeamChat Copy()
	{
		AppTeamChat appTeamChat = Pool.Get<AppTeamChat>();
		CopyTo(appTeamChat);
		return appTeamChat;
	}

	public static AppTeamChat Deserialize(Stream stream)
	{
		AppTeamChat appTeamChat = Pool.Get<AppTeamChat>();
		Deserialize(stream, appTeamChat, isDelta: false);
		return appTeamChat;
	}

	public static AppTeamChat DeserializeLengthDelimited(Stream stream)
	{
		AppTeamChat appTeamChat = Pool.Get<AppTeamChat>();
		DeserializeLengthDelimited(stream, appTeamChat, isDelta: false);
		return appTeamChat;
	}

	public static AppTeamChat DeserializeLength(Stream stream, int length)
	{
		AppTeamChat appTeamChat = Pool.Get<AppTeamChat>();
		DeserializeLength(stream, length, appTeamChat, isDelta: false);
		return appTeamChat;
	}

	public static AppTeamChat Deserialize(byte[] buffer)
	{
		AppTeamChat appTeamChat = Pool.Get<AppTeamChat>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, appTeamChat, isDelta: false);
		return appTeamChat;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, AppTeamChat previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static AppTeamChat Deserialize(byte[] buffer, AppTeamChat instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static AppTeamChat Deserialize(Stream stream, AppTeamChat instance, bool isDelta)
	{
		if (!isDelta && instance.messages == null)
		{
			instance.messages = Pool.Get<List<AppTeamMessage>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.messages.Add(AppTeamMessage.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static AppTeamChat DeserializeLengthDelimited(Stream stream, AppTeamChat instance, bool isDelta)
	{
		if (!isDelta && instance.messages == null)
		{
			instance.messages = Pool.Get<List<AppTeamMessage>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.messages.Add(AppTeamMessage.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static AppTeamChat DeserializeLength(Stream stream, int length, AppTeamChat instance, bool isDelta)
	{
		if (!isDelta && instance.messages == null)
		{
			instance.messages = Pool.Get<List<AppTeamMessage>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.messages.Add(AppTeamMessage.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, AppTeamChat instance, AppTeamChat previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.messages != null)
		{
			for (int i = 0; i < instance.messages.Count; i++)
			{
				AppTeamMessage appTeamMessage = instance.messages[i];
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				AppTeamMessage.SerializeDelta(memoryStream, appTeamMessage, appTeamMessage);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, AppTeamChat instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.messages != null)
		{
			for (int i = 0; i < instance.messages.Count; i++)
			{
				AppTeamMessage instance2 = instance.messages[i];
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				AppTeamMessage.Serialize(memoryStream, instance2);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(AppTeamChat instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, AppTeamChat instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (messages != null)
		{
			for (int i = 0; i < messages.Count; i++)
			{
				messages[i]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class AppMarker : IDisposable, IPooled, IProto
{
	public class SellOrder : IDisposable, IPooled, IProto
	{
		[NonSerialized]
		public int itemId;

		[NonSerialized]
		public int quantity;

		[NonSerialized]
		public int currencyId;

		[NonSerialized]
		public int costPerItem;

		[NonSerialized]
		public int amountInStock;

		[NonSerialized]
		public bool itemIsBlueprint;

		[NonSerialized]
		public bool currencyIsBlueprint;

		[NonSerialized]
		public float itemCondition;

		[NonSerialized]
		public float itemConditionMax;

		[NonSerialized]
		public float priceMultiplier;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(SellOrder instance)
		{
			if (instance.ShouldPool)
			{
				instance.itemId = 0;
				instance.quantity = 0;
				instance.currencyId = 0;
				instance.costPerItem = 0;
				instance.amountInStock = 0;
				instance.itemIsBlueprint = false;
				instance.currencyIsBlueprint = false;
				instance.itemCondition = 0f;
				instance.itemConditionMax = 0f;
				instance.priceMultiplier = 0f;
				Pool.Free<SellOrder>(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose SellOrder with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(SellOrder instance)
		{
			instance.itemId = itemId;
			instance.quantity = quantity;
			instance.currencyId = currencyId;
			instance.costPerItem = costPerItem;
			instance.amountInStock = amountInStock;
			instance.itemIsBlueprint = itemIsBlueprint;
			instance.currencyIsBlueprint = currencyIsBlueprint;
			instance.itemCondition = itemCondition;
			instance.itemConditionMax = itemConditionMax;
			instance.priceMultiplier = priceMultiplier;
		}

		public SellOrder Copy()
		{
			SellOrder sellOrder = Pool.Get<SellOrder>();
			CopyTo(sellOrder);
			return sellOrder;
		}

		public static SellOrder Deserialize(Stream stream)
		{
			SellOrder sellOrder = Pool.Get<SellOrder>();
			Deserialize(stream, sellOrder, isDelta: false);
			return sellOrder;
		}

		public static SellOrder DeserializeLengthDelimited(Stream stream)
		{
			SellOrder sellOrder = Pool.Get<SellOrder>();
			DeserializeLengthDelimited(stream, sellOrder, isDelta: false);
			return sellOrder;
		}

		public static SellOrder DeserializeLength(Stream stream, int length)
		{
			SellOrder sellOrder = Pool.Get<SellOrder>();
			DeserializeLength(stream, length, sellOrder, isDelta: false);
			return sellOrder;
		}

		public static SellOrder Deserialize(byte[] buffer)
		{
			SellOrder sellOrder = Pool.Get<SellOrder>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, sellOrder, isDelta: false);
			return sellOrder;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, SellOrder previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static SellOrder Deserialize(byte[] buffer, SellOrder instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static SellOrder Deserialize(Stream stream, SellOrder instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.itemId = 0;
				instance.quantity = 0;
				instance.currencyId = 0;
				instance.costPerItem = 0;
				instance.amountInStock = 0;
				instance.itemIsBlueprint = false;
				instance.currencyIsBlueprint = false;
				instance.itemCondition = 0f;
				instance.itemConditionMax = 0f;
				instance.priceMultiplier = 0f;
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.itemId = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.quantity = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.currencyId = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 32:
					instance.costPerItem = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 40:
					instance.amountInStock = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 48:
					instance.itemIsBlueprint = ProtocolParser.ReadBool(stream);
					continue;
				case 56:
					instance.currencyIsBlueprint = ProtocolParser.ReadBool(stream);
					continue;
				case 69:
					instance.itemCondition = ProtocolParser.ReadSingle(stream);
					continue;
				case 77:
					instance.itemConditionMax = ProtocolParser.ReadSingle(stream);
					continue;
				case 85:
					instance.priceMultiplier = ProtocolParser.ReadSingle(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static SellOrder DeserializeLengthDelimited(Stream stream, SellOrder instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.itemId = 0;
				instance.quantity = 0;
				instance.currencyId = 0;
				instance.costPerItem = 0;
				instance.amountInStock = 0;
				instance.itemIsBlueprint = false;
				instance.currencyIsBlueprint = false;
				instance.itemCondition = 0f;
				instance.itemConditionMax = 0f;
				instance.priceMultiplier = 0f;
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.itemId = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.quantity = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.currencyId = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 32:
					instance.costPerItem = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 40:
					instance.amountInStock = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 48:
					instance.itemIsBlueprint = ProtocolParser.ReadBool(stream);
					continue;
				case 56:
					instance.currencyIsBlueprint = ProtocolParser.ReadBool(stream);
					continue;
				case 69:
					instance.itemCondition = ProtocolParser.ReadSingle(stream);
					continue;
				case 77:
					instance.itemConditionMax = ProtocolParser.ReadSingle(stream);
					continue;
				case 85:
					instance.priceMultiplier = ProtocolParser.ReadSingle(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static SellOrder DeserializeLength(Stream stream, int length, SellOrder instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.itemId = 0;
				instance.quantity = 0;
				instance.currencyId = 0;
				instance.costPerItem = 0;
				instance.amountInStock = 0;
				instance.itemIsBlueprint = false;
				instance.currencyIsBlueprint = false;
				instance.itemCondition = 0f;
				instance.itemConditionMax = 0f;
				instance.priceMultiplier = 0f;
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.itemId = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.quantity = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.currencyId = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 32:
					instance.costPerItem = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 40:
					instance.amountInStock = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 48:
					instance.itemIsBlueprint = ProtocolParser.ReadBool(stream);
					continue;
				case 56:
					instance.currencyIsBlueprint = ProtocolParser.ReadBool(stream);
					continue;
				case 69:
					instance.itemCondition = ProtocolParser.ReadSingle(stream);
					continue;
				case 77:
					instance.itemConditionMax = ProtocolParser.ReadSingle(stream);
					continue;
				case 85:
					instance.priceMultiplier = ProtocolParser.ReadSingle(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, SellOrder instance, SellOrder previous)
		{
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.itemId != previous.itemId)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.itemId);
			}
			if (instance.quantity != previous.quantity)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.quantity);
			}
			if (instance.currencyId != previous.currencyId)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.currencyId);
			}
			if (instance.costPerItem != previous.costPerItem)
			{
				stream.WriteByte(32);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.costPerItem);
			}
			if (instance.amountInStock != previous.amountInStock)
			{
				stream.WriteByte(40);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.amountInStock);
			}
			stream.WriteByte(48);
			ProtocolParser.WriteBool(stream, instance.itemIsBlueprint);
			stream.WriteByte(56);
			ProtocolParser.WriteBool(stream, instance.currencyIsBlueprint);
			if (instance.itemCondition != previous.itemCondition)
			{
				stream.WriteByte(69);
				ProtocolParser.WriteSingle(stream, instance.itemCondition);
			}
			if (instance.itemConditionMax != previous.itemConditionMax)
			{
				stream.WriteByte(77);
				ProtocolParser.WriteSingle(stream, instance.itemConditionMax);
			}
			if (instance.priceMultiplier != previous.priceMultiplier)
			{
				stream.WriteByte(85);
				ProtocolParser.WriteSingle(stream, instance.priceMultiplier);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public static void Serialize(Stream stream, SellOrder instance)
		{
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.itemId != 0)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.itemId);
			}
			if (instance.quantity != 0)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.quantity);
			}
			if (instance.currencyId != 0)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.currencyId);
			}
			if (instance.costPerItem != 0)
			{
				stream.WriteByte(32);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.costPerItem);
			}
			if (instance.amountInStock != 0)
			{
				stream.WriteByte(40);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.amountInStock);
			}
			if (instance.itemIsBlueprint)
			{
				stream.WriteByte(48);
				ProtocolParser.WriteBool(stream, instance.itemIsBlueprint);
			}
			if (instance.currencyIsBlueprint)
			{
				stream.WriteByte(56);
				ProtocolParser.WriteBool(stream, instance.currencyIsBlueprint);
			}
			if (instance.itemCondition != 0f)
			{
				stream.WriteByte(69);
				ProtocolParser.WriteSingle(stream, instance.itemCondition);
			}
			if (instance.itemConditionMax != 0f)
			{
				stream.WriteByte(77);
				ProtocolParser.WriteSingle(stream, instance.itemConditionMax);
			}
			if (instance.priceMultiplier != 0f)
			{
				stream.WriteByte(85);
				ProtocolParser.WriteSingle(stream, instance.priceMultiplier);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(SellOrder instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, SellOrder instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	[NonSerialized]
	public NetworkableId id;

	[NonSerialized]
	public AppMarkerType type;

	[NonSerialized]
	public float x;

	[NonSerialized]
	public float y;

	[NonSerialized]
	public ulong steamId;

	[NonSerialized]
	public float rotation;

	[NonSerialized]
	public float radius;

	[NonSerialized]
	public Vector4 color1;

	[NonSerialized]
	public Vector4 color2;

	[NonSerialized]
	public float alpha;

	[NonSerialized]
	public string name;

	[NonSerialized]
	public bool outOfStock;

	[NonSerialized]
	public List<SellOrder> sellOrders;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(AppMarker instance)
	{
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		if (!instance.ShouldPool)
		{
			return;
		}
		instance.id = default(NetworkableId);
		instance.type = AppMarkerType.Undefined;
		instance.x = 0f;
		instance.y = 0f;
		instance.steamId = 0uL;
		instance.rotation = 0f;
		instance.radius = 0f;
		instance.color1 = default(Vector4);
		instance.color2 = default(Vector4);
		instance.alpha = 0f;
		instance.name = string.Empty;
		instance.outOfStock = false;
		if (instance.sellOrders != null)
		{
			for (int i = 0; i < instance.sellOrders.Count; i++)
			{
				if (instance.sellOrders[i] != null)
				{
					instance.sellOrders[i].ResetToPool();
					instance.sellOrders[i] = null;
				}
			}
			List<SellOrder> list = instance.sellOrders;
			Pool.Free<SellOrder>(ref list, false);
			instance.sellOrders = list;
		}
		Pool.Free<AppMarker>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose AppMarker with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(AppMarker instance)
	{
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		instance.id = id;
		instance.type = type;
		instance.x = x;
		instance.y = y;
		instance.steamId = steamId;
		instance.rotation = rotation;
		instance.radius = radius;
		instance.color1 = color1;
		instance.color2 = color2;
		instance.alpha = alpha;
		instance.name = name;
		instance.outOfStock = outOfStock;
		if (sellOrders != null)
		{
			instance.sellOrders = Pool.Get<List<SellOrder>>();
			for (int i = 0; i < sellOrders.Count; i++)
			{
				SellOrder item = sellOrders[i].Copy();
				instance.sellOrders.Add(item);
			}
		}
		else
		{
			instance.sellOrders = null;
		}
	}

	public AppMarker Copy()
	{
		AppMarker appMarker = Pool.Get<AppMarker>();
		CopyTo(appMarker);
		return appMarker;
	}

	public static AppMarker Deserialize(Stream stream)
	{
		AppMarker appMarker = Pool.Get<AppMarker>();
		Deserialize(stream, appMarker, isDelta: false);
		return appMarker;
	}

	public static AppMarker DeserializeLengthDelimited(Stream stream)
	{
		AppMarker appMarker = Pool.Get<AppMarker>();
		DeserializeLengthDelimited(stream, appMarker, isDelta: false);
		return appMarker;
	}

	public static AppMarker DeserializeLength(Stream stream, int length)
	{
		AppMarker appMarker = Pool.Get<AppMarker>();
		DeserializeLength(stream, length, appMarker, isDelta: false);
		return appMarker;
	}

	public static AppMarker Deserialize(byte[] buffer)
	{
		AppMarker appMarker = Pool.Get<AppMarker>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, appMarker, isDelta: false);
		return appMarker;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, AppMarker previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static AppMarker Deserialize(byte[] buffer, AppMarker instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static AppMarker Deserialize(Stream stream, AppMarker instance, bool isDelta)
	{
		//IL_0183: Unknown result type (might be due to invalid IL or missing references)
		//IL_0196: Unknown result type (might be due to invalid IL or missing references)
		if (!isDelta)
		{
			instance.x = 0f;
			instance.y = 0f;
			instance.steamId = 0uL;
			instance.rotation = 0f;
			instance.radius = 0f;
			instance.alpha = 0f;
			instance.outOfStock = false;
			if (instance.sellOrders == null)
			{
				instance.sellOrders = Pool.Get<List<SellOrder>>();
			}
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.id = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 16:
				instance.type = (AppMarkerType)ProtocolParser.ReadUInt64(stream);
				continue;
			case 29:
				instance.x = ProtocolParser.ReadSingle(stream);
				continue;
			case 37:
				instance.y = ProtocolParser.ReadSingle(stream);
				continue;
			case 40:
				instance.steamId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 53:
				instance.rotation = ProtocolParser.ReadSingle(stream);
				continue;
			case 61:
				instance.radius = ProtocolParser.ReadSingle(stream);
				continue;
			case 66:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.color1, isDelta);
				continue;
			case 74:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.color2, isDelta);
				continue;
			case 85:
				instance.alpha = ProtocolParser.ReadSingle(stream);
				continue;
			case 90:
				instance.name = ProtocolParser.ReadString(stream);
				continue;
			case 96:
				instance.outOfStock = ProtocolParser.ReadBool(stream);
				continue;
			case 106:
				instance.sellOrders.Add(SellOrder.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static AppMarker DeserializeLengthDelimited(Stream stream, AppMarker instance, bool isDelta)
	{
		//IL_01b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ca: Unknown result type (might be due to invalid IL or missing references)
		if (!isDelta)
		{
			instance.x = 0f;
			instance.y = 0f;
			instance.steamId = 0uL;
			instance.rotation = 0f;
			instance.radius = 0f;
			instance.alpha = 0f;
			instance.outOfStock = false;
			if (instance.sellOrders == null)
			{
				instance.sellOrders = Pool.Get<List<SellOrder>>();
			}
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.id = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 16:
				instance.type = (AppMarkerType)ProtocolParser.ReadUInt64(stream);
				continue;
			case 29:
				instance.x = ProtocolParser.ReadSingle(stream);
				continue;
			case 37:
				instance.y = ProtocolParser.ReadSingle(stream);
				continue;
			case 40:
				instance.steamId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 53:
				instance.rotation = ProtocolParser.ReadSingle(stream);
				continue;
			case 61:
				instance.radius = ProtocolParser.ReadSingle(stream);
				continue;
			case 66:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.color1, isDelta);
				continue;
			case 74:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.color2, isDelta);
				continue;
			case 85:
				instance.alpha = ProtocolParser.ReadSingle(stream);
				continue;
			case 90:
				instance.name = ProtocolParser.ReadString(stream);
				continue;
			case 96:
				instance.outOfStock = ProtocolParser.ReadBool(stream);
				continue;
			case 106:
				instance.sellOrders.Add(SellOrder.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static AppMarker DeserializeLength(Stream stream, int length, AppMarker instance, bool isDelta)
	{
		//IL_01b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c3: Unknown result type (might be due to invalid IL or missing references)
		if (!isDelta)
		{
			instance.x = 0f;
			instance.y = 0f;
			instance.steamId = 0uL;
			instance.rotation = 0f;
			instance.radius = 0f;
			instance.alpha = 0f;
			instance.outOfStock = false;
			if (instance.sellOrders == null)
			{
				instance.sellOrders = Pool.Get<List<SellOrder>>();
			}
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.id = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 16:
				instance.type = (AppMarkerType)ProtocolParser.ReadUInt64(stream);
				continue;
			case 29:
				instance.x = ProtocolParser.ReadSingle(stream);
				continue;
			case 37:
				instance.y = ProtocolParser.ReadSingle(stream);
				continue;
			case 40:
				instance.steamId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 53:
				instance.rotation = ProtocolParser.ReadSingle(stream);
				continue;
			case 61:
				instance.radius = ProtocolParser.ReadSingle(stream);
				continue;
			case 66:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.color1, isDelta);
				continue;
			case 74:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.color2, isDelta);
				continue;
			case 85:
				instance.alpha = ProtocolParser.ReadSingle(stream);
				continue;
			case 90:
				instance.name = ProtocolParser.ReadString(stream);
				continue;
			case 96:
				instance.outOfStock = ProtocolParser.ReadBool(stream);
				continue;
			case 106:
				instance.sellOrders.Add(SellOrder.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, AppMarker instance, AppMarker previous)
	{
		//IL_00de: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		//IL_0136: Unknown result type (might be due to invalid IL or missing references)
		//IL_0102: Unknown result type (might be due to invalid IL or missing references)
		//IL_0108: Unknown result type (might be due to invalid IL or missing references)
		//IL_0154: Unknown result type (might be due to invalid IL or missing references)
		//IL_015a: Unknown result type (might be due to invalid IL or missing references)
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		stream.WriteByte(8);
		ProtocolParser.WriteUInt64(stream, instance.id.Value);
		stream.WriteByte(16);
		ProtocolParser.WriteUInt64(stream, (ulong)instance.type);
		if (instance.x != previous.x)
		{
			stream.WriteByte(29);
			ProtocolParser.WriteSingle(stream, instance.x);
		}
		if (instance.y != previous.y)
		{
			stream.WriteByte(37);
			ProtocolParser.WriteSingle(stream, instance.y);
		}
		if (instance.steamId != previous.steamId)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, instance.steamId);
		}
		if (instance.rotation != previous.rotation)
		{
			stream.WriteByte(53);
			ProtocolParser.WriteSingle(stream, instance.rotation);
		}
		if (instance.radius != previous.radius)
		{
			stream.WriteByte(61);
			ProtocolParser.WriteSingle(stream, instance.radius);
		}
		if (instance.color1 != previous.color1)
		{
			stream.WriteByte(66);
			memoryStream.SetLength(0L);
			Vector4Serialized.SerializeDelta(memoryStream, instance.color1, previous.color1);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		if (instance.color2 != previous.color2)
		{
			stream.WriteByte(74);
			memoryStream.SetLength(0L);
			Vector4Serialized.SerializeDelta(memoryStream, instance.color2, previous.color2);
			uint num2 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
		}
		if (instance.alpha != previous.alpha)
		{
			stream.WriteByte(85);
			ProtocolParser.WriteSingle(stream, instance.alpha);
		}
		if (instance.name != null && instance.name != previous.name)
		{
			stream.WriteByte(90);
			ProtocolParser.WriteString(stream, instance.name);
		}
		stream.WriteByte(96);
		ProtocolParser.WriteBool(stream, instance.outOfStock);
		if (instance.sellOrders != null)
		{
			for (int i = 0; i < instance.sellOrders.Count; i++)
			{
				SellOrder sellOrder = instance.sellOrders[i];
				stream.WriteByte(106);
				memoryStream.SetLength(0L);
				SellOrder.SerializeDelta(memoryStream, sellOrder, sellOrder);
				uint num3 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num3);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num3);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, AppMarker instance)
	{
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_0140: Unknown result type (might be due to invalid IL or missing references)
		//IL_0146: Unknown result type (might be due to invalid IL or missing references)
		//IL_0111: Unknown result type (might be due to invalid IL or missing references)
		//IL_0160: Unknown result type (might be due to invalid IL or missing references)
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.id != default(NetworkableId))
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.id.Value);
		}
		stream.WriteByte(16);
		ProtocolParser.WriteUInt64(stream, (ulong)instance.type);
		if (instance.x != 0f)
		{
			stream.WriteByte(29);
			ProtocolParser.WriteSingle(stream, instance.x);
		}
		if (instance.y != 0f)
		{
			stream.WriteByte(37);
			ProtocolParser.WriteSingle(stream, instance.y);
		}
		if (instance.steamId != 0L)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, instance.steamId);
		}
		if (instance.rotation != 0f)
		{
			stream.WriteByte(53);
			ProtocolParser.WriteSingle(stream, instance.rotation);
		}
		if (instance.radius != 0f)
		{
			stream.WriteByte(61);
			ProtocolParser.WriteSingle(stream, instance.radius);
		}
		if (instance.color1 != default(Vector4))
		{
			stream.WriteByte(66);
			memoryStream.SetLength(0L);
			Vector4Serialized.Serialize(memoryStream, instance.color1);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		if (instance.color2 != default(Vector4))
		{
			stream.WriteByte(74);
			memoryStream.SetLength(0L);
			Vector4Serialized.Serialize(memoryStream, instance.color2);
			uint num2 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
		}
		if (instance.alpha != 0f)
		{
			stream.WriteByte(85);
			ProtocolParser.WriteSingle(stream, instance.alpha);
		}
		if (instance.name != null)
		{
			stream.WriteByte(90);
			ProtocolParser.WriteString(stream, instance.name);
		}
		if (instance.outOfStock)
		{
			stream.WriteByte(96);
			ProtocolParser.WriteBool(stream, instance.outOfStock);
		}
		if (instance.sellOrders != null)
		{
			for (int i = 0; i < instance.sellOrders.Count; i++)
			{
				SellOrder instance2 = instance.sellOrders[i];
				stream.WriteByte(106);
				memoryStream.SetLength(0L);
				SellOrder.Serialize(memoryStream, instance2);
				uint num3 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num3);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num3);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(AppMarker instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, AppMarker instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		action(UidType.NetworkableId, ref id.Value);
		if (sellOrders != null)
		{
			for (int i = 0; i < sellOrders.Count; i++)
			{
				sellOrders[i]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class AppMapMarkers : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public List<AppMarker> markers;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(AppMapMarkers instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.markers != null)
		{
			for (int i = 0; i < instance.markers.Count; i++)
			{
				if (instance.markers[i] != null)
				{
					instance.markers[i].ResetToPool();
					instance.markers[i] = null;
				}
			}
			List<AppMarker> list = instance.markers;
			Pool.Free<AppMarker>(ref list, false);
			instance.markers = list;
		}
		Pool.Free<AppMapMarkers>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose AppMapMarkers with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(AppMapMarkers instance)
	{
		if (markers != null)
		{
			instance.markers = Pool.Get<List<AppMarker>>();
			for (int i = 0; i < markers.Count; i++)
			{
				AppMarker item = markers[i].Copy();
				instance.markers.Add(item);
			}
		}
		else
		{
			instance.markers = null;
		}
	}

	public AppMapMarkers Copy()
	{
		AppMapMarkers appMapMarkers = Pool.Get<AppMapMarkers>();
		CopyTo(appMapMarkers);
		return appMapMarkers;
	}

	public static AppMapMarkers Deserialize(Stream stream)
	{
		AppMapMarkers appMapMarkers = Pool.Get<AppMapMarkers>();
		Deserialize(stream, appMapMarkers, isDelta: false);
		return appMapMarkers;
	}

	public static AppMapMarkers DeserializeLengthDelimited(Stream stream)
	{
		AppMapMarkers appMapMarkers = Pool.Get<AppMapMarkers>();
		DeserializeLengthDelimited(stream, appMapMarkers, isDelta: false);
		return appMapMarkers;
	}

	public static AppMapMarkers DeserializeLength(Stream stream, int length)
	{
		AppMapMarkers appMapMarkers = Pool.Get<AppMapMarkers>();
		DeserializeLength(stream, length, appMapMarkers, isDelta: false);
		return appMapMarkers;
	}

	public static AppMapMarkers Deserialize(byte[] buffer)
	{
		AppMapMarkers appMapMarkers = Pool.Get<AppMapMarkers>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, appMapMarkers, isDelta: false);
		return appMapMarkers;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, AppMapMarkers previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static AppMapMarkers Deserialize(byte[] buffer, AppMapMarkers instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static AppMapMarkers Deserialize(Stream stream, AppMapMarkers instance, bool isDelta)
	{
		if (!isDelta && instance.markers == null)
		{
			instance.markers = Pool.Get<List<AppMarker>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.markers.Add(AppMarker.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static AppMapMarkers DeserializeLengthDelimited(Stream stream, AppMapMarkers instance, bool isDelta)
	{
		if (!isDelta && instance.markers == null)
		{
			instance.markers = Pool.Get<List<AppMarker>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.markers.Add(AppMarker.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static AppMapMarkers DeserializeLength(Stream stream, int length, AppMapMarkers instance, bool isDelta)
	{
		if (!isDelta && instance.markers == null)
		{
			instance.markers = Pool.Get<List<AppMarker>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.markers.Add(AppMarker.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, AppMapMarkers instance, AppMapMarkers previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.markers != null)
		{
			for (int i = 0; i < instance.markers.Count; i++)
			{
				AppMarker appMarker = instance.markers[i];
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				AppMarker.SerializeDelta(memoryStream, appMarker, appMarker);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, AppMapMarkers instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.markers != null)
		{
			for (int i = 0; i < instance.markers.Count; i++)
			{
				AppMarker instance2 = instance.markers[i];
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				AppMarker.Serialize(memoryStream, instance2);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(AppMapMarkers instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, AppMapMarkers instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (markers != null)
		{
			for (int i = 0; i < markers.Count; i++)
			{
				markers[i]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class AppClanInfo : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public ClanInfo clanInfo;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(AppClanInfo instance)
	{
		if (instance.ShouldPool)
		{
			if (instance.clanInfo != null)
			{
				instance.clanInfo.ResetToPool();
				instance.clanInfo = null;
			}
			Pool.Free<AppClanInfo>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose AppClanInfo with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(AppClanInfo instance)
	{
		if (clanInfo != null)
		{
			if (instance.clanInfo == null)
			{
				instance.clanInfo = clanInfo.Copy();
			}
			else
			{
				clanInfo.CopyTo(instance.clanInfo);
			}
		}
		else
		{
			instance.clanInfo = null;
		}
	}

	public AppClanInfo Copy()
	{
		AppClanInfo appClanInfo = Pool.Get<AppClanInfo>();
		CopyTo(appClanInfo);
		return appClanInfo;
	}

	public static AppClanInfo Deserialize(Stream stream)
	{
		AppClanInfo appClanInfo = Pool.Get<AppClanInfo>();
		Deserialize(stream, appClanInfo, isDelta: false);
		return appClanInfo;
	}

	public static AppClanInfo DeserializeLengthDelimited(Stream stream)
	{
		AppClanInfo appClanInfo = Pool.Get<AppClanInfo>();
		DeserializeLengthDelimited(stream, appClanInfo, isDelta: false);
		return appClanInfo;
	}

	public static AppClanInfo DeserializeLength(Stream stream, int length)
	{
		AppClanInfo appClanInfo = Pool.Get<AppClanInfo>();
		DeserializeLength(stream, length, appClanInfo, isDelta: false);
		return appClanInfo;
	}

	public static AppClanInfo Deserialize(byte[] buffer)
	{
		AppClanInfo appClanInfo = Pool.Get<AppClanInfo>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, appClanInfo, isDelta: false);
		return appClanInfo;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, AppClanInfo previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static AppClanInfo Deserialize(byte[] buffer, AppClanInfo instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static AppClanInfo Deserialize(Stream stream, AppClanInfo instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				if (instance.clanInfo == null)
				{
					instance.clanInfo = ClanInfo.DeserializeLengthDelimited(stream);
				}
				else
				{
					ClanInfo.DeserializeLengthDelimited(stream, instance.clanInfo, isDelta);
				}
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static AppClanInfo DeserializeLengthDelimited(Stream stream, AppClanInfo instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.clanInfo == null)
				{
					instance.clanInfo = ClanInfo.DeserializeLengthDelimited(stream);
				}
				else
				{
					ClanInfo.DeserializeLengthDelimited(stream, instance.clanInfo, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static AppClanInfo DeserializeLength(Stream stream, int length, AppClanInfo instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.clanInfo == null)
				{
					instance.clanInfo = ClanInfo.DeserializeLengthDelimited(stream);
				}
				else
				{
					ClanInfo.DeserializeLengthDelimited(stream, instance.clanInfo, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, AppClanInfo instance, AppClanInfo previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.clanInfo != null)
		{
			stream.WriteByte(10);
			memoryStream.SetLength(0L);
			ClanInfo.SerializeDelta(memoryStream, instance.clanInfo, previous.clanInfo);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, AppClanInfo instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.clanInfo != null)
		{
			stream.WriteByte(10);
			memoryStream.SetLength(0L);
			ClanInfo.Serialize(memoryStream, instance.clanInfo);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(AppClanInfo instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, AppClanInfo instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		clanInfo?.InspectUids(action);
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class AppClanMessage : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public ulong steamId;

	[NonSerialized]
	public string name;

	[NonSerialized]
	public string message;

	[NonSerialized]
	public long time;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(AppClanMessage instance)
	{
		if (instance.ShouldPool)
		{
			instance.steamId = 0uL;
			instance.name = string.Empty;
			instance.message = string.Empty;
			instance.time = 0L;
			Pool.Free<AppClanMessage>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose AppClanMessage with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(AppClanMessage instance)
	{
		instance.steamId = steamId;
		instance.name = name;
		instance.message = message;
		instance.time = time;
	}

	public AppClanMessage Copy()
	{
		AppClanMessage appClanMessage = Pool.Get<AppClanMessage>();
		CopyTo(appClanMessage);
		return appClanMessage;
	}

	public static AppClanMessage Deserialize(Stream stream)
	{
		AppClanMessage appClanMessage = Pool.Get<AppClanMessage>();
		Deserialize(stream, appClanMessage, isDelta: false);
		return appClanMessage;
	}

	public static AppClanMessage DeserializeLengthDelimited(Stream stream)
	{
		AppClanMessage appClanMessage = Pool.Get<AppClanMessage>();
		DeserializeLengthDelimited(stream, appClanMessage, isDelta: false);
		return appClanMessage;
	}

	public static AppClanMessage DeserializeLength(Stream stream, int length)
	{
		AppClanMessage appClanMessage = Pool.Get<AppClanMessage>();
		DeserializeLength(stream, length, appClanMessage, isDelta: false);
		return appClanMessage;
	}

	public static AppClanMessage Deserialize(byte[] buffer)
	{
		AppClanMessage appClanMessage = Pool.Get<AppClanMessage>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, appClanMessage, isDelta: false);
		return appClanMessage;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, AppClanMessage previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static AppClanMessage Deserialize(byte[] buffer, AppClanMessage instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static AppClanMessage Deserialize(Stream stream, AppClanMessage instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.steamId = 0uL;
			instance.time = 0L;
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.steamId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.name = ProtocolParser.ReadString(stream);
				continue;
			case 26:
				instance.message = ProtocolParser.ReadString(stream);
				continue;
			case 32:
				instance.time = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static AppClanMessage DeserializeLengthDelimited(Stream stream, AppClanMessage instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.steamId = 0uL;
			instance.time = 0L;
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.steamId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.name = ProtocolParser.ReadString(stream);
				continue;
			case 26:
				instance.message = ProtocolParser.ReadString(stream);
				continue;
			case 32:
				instance.time = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static AppClanMessage DeserializeLength(Stream stream, int length, AppClanMessage instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.steamId = 0uL;
			instance.time = 0L;
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.steamId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.name = ProtocolParser.ReadString(stream);
				continue;
			case 26:
				instance.message = ProtocolParser.ReadString(stream);
				continue;
			case 32:
				instance.time = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, AppClanMessage instance, AppClanMessage previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.steamId != previous.steamId)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.steamId);
		}
		if (instance.name != previous.name)
		{
			if (instance.name == null)
			{
				throw new ArgumentNullException("name", "Required by proto specification.");
			}
			stream.WriteByte(18);
			ProtocolParser.WriteString(stream, instance.name);
		}
		if (instance.message != previous.message)
		{
			if (instance.message == null)
			{
				throw new ArgumentNullException("message", "Required by proto specification.");
			}
			stream.WriteByte(26);
			ProtocolParser.WriteString(stream, instance.message);
		}
		stream.WriteByte(32);
		ProtocolParser.WriteUInt64(stream, (ulong)instance.time);
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, AppClanMessage instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.steamId != 0L)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.steamId);
		}
		if (instance.name == null)
		{
			throw new ArgumentNullException("name", "Required by proto specification.");
		}
		stream.WriteByte(18);
		ProtocolParser.WriteString(stream, instance.name);
		if (instance.message == null)
		{
			throw new ArgumentNullException("message", "Required by proto specification.");
		}
		stream.WriteByte(26);
		ProtocolParser.WriteString(stream, instance.message);
		if (instance.time != 0L)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.time);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(AppClanMessage instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, AppClanMessage instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class AppClanChat : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public List<AppClanMessage> messages;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(AppClanChat instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.messages != null)
		{
			for (int i = 0; i < instance.messages.Count; i++)
			{
				if (instance.messages[i] != null)
				{
					instance.messages[i].ResetToPool();
					instance.messages[i] = null;
				}
			}
			List<AppClanMessage> list = instance.messages;
			Pool.Free<AppClanMessage>(ref list, false);
			instance.messages = list;
		}
		Pool.Free<AppClanChat>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose AppClanChat with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(AppClanChat instance)
	{
		if (messages != null)
		{
			instance.messages = Pool.Get<List<AppClanMessage>>();
			for (int i = 0; i < messages.Count; i++)
			{
				AppClanMessage item = messages[i].Copy();
				instance.messages.Add(item);
			}
		}
		else
		{
			instance.messages = null;
		}
	}

	public AppClanChat Copy()
	{
		AppClanChat appClanChat = Pool.Get<AppClanChat>();
		CopyTo(appClanChat);
		return appClanChat;
	}

	public static AppClanChat Deserialize(Stream stream)
	{
		AppClanChat appClanChat = Pool.Get<AppClanChat>();
		Deserialize(stream, appClanChat, isDelta: false);
		return appClanChat;
	}

	public static AppClanChat DeserializeLengthDelimited(Stream stream)
	{
		AppClanChat appClanChat = Pool.Get<AppClanChat>();
		DeserializeLengthDelimited(stream, appClanChat, isDelta: false);
		return appClanChat;
	}

	public static AppClanChat DeserializeLength(Stream stream, int length)
	{
		AppClanChat appClanChat = Pool.Get<AppClanChat>();
		DeserializeLength(stream, length, appClanChat, isDelta: false);
		return appClanChat;
	}

	public static AppClanChat Deserialize(byte[] buffer)
	{
		AppClanChat appClanChat = Pool.Get<AppClanChat>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, appClanChat, isDelta: false);
		return appClanChat;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, AppClanChat previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static AppClanChat Deserialize(byte[] buffer, AppClanChat instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static AppClanChat Deserialize(Stream stream, AppClanChat instance, bool isDelta)
	{
		if (!isDelta && instance.messages == null)
		{
			instance.messages = Pool.Get<List<AppClanMessage>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.messages.Add(AppClanMessage.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static AppClanChat DeserializeLengthDelimited(Stream stream, AppClanChat instance, bool isDelta)
	{
		if (!isDelta && instance.messages == null)
		{
			instance.messages = Pool.Get<List<AppClanMessage>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.messages.Add(AppClanMessage.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static AppClanChat DeserializeLength(Stream stream, int length, AppClanChat instance, bool isDelta)
	{
		if (!isDelta && instance.messages == null)
		{
			instance.messages = Pool.Get<List<AppClanMessage>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.messages.Add(AppClanMessage.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, AppClanChat instance, AppClanChat previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.messages != null)
		{
			for (int i = 0; i < instance.messages.Count; i++)
			{
				AppClanMessage appClanMessage = instance.messages[i];
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				AppClanMessage.SerializeDelta(memoryStream, appClanMessage, appClanMessage);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, AppClanChat instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.messages != null)
		{
			for (int i = 0; i < instance.messages.Count; i++)
			{
				AppClanMessage instance2 = instance.messages[i];
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				AppClanMessage.Serialize(memoryStream, instance2);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(AppClanChat instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, AppClanChat instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (messages != null)
		{
			for (int i = 0; i < messages.Count; i++)
			{
				messages[i]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class AppNexusAuth : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public string serverId;

	[NonSerialized]
	public int playerToken;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(AppNexusAuth instance)
	{
		if (instance.ShouldPool)
		{
			instance.serverId = string.Empty;
			instance.playerToken = 0;
			Pool.Free<AppNexusAuth>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose AppNexusAuth with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(AppNexusAuth instance)
	{
		instance.serverId = serverId;
		instance.playerToken = playerToken;
	}

	public AppNexusAuth Copy()
	{
		AppNexusAuth appNexusAuth = Pool.Get<AppNexusAuth>();
		CopyTo(appNexusAuth);
		return appNexusAuth;
	}

	public static AppNexusAuth Deserialize(Stream stream)
	{
		AppNexusAuth appNexusAuth = Pool.Get<AppNexusAuth>();
		Deserialize(stream, appNexusAuth, isDelta: false);
		return appNexusAuth;
	}

	public static AppNexusAuth DeserializeLengthDelimited(Stream stream)
	{
		AppNexusAuth appNexusAuth = Pool.Get<AppNexusAuth>();
		DeserializeLengthDelimited(stream, appNexusAuth, isDelta: false);
		return appNexusAuth;
	}

	public static AppNexusAuth DeserializeLength(Stream stream, int length)
	{
		AppNexusAuth appNexusAuth = Pool.Get<AppNexusAuth>();
		DeserializeLength(stream, length, appNexusAuth, isDelta: false);
		return appNexusAuth;
	}

	public static AppNexusAuth Deserialize(byte[] buffer)
	{
		AppNexusAuth appNexusAuth = Pool.Get<AppNexusAuth>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, appNexusAuth, isDelta: false);
		return appNexusAuth;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, AppNexusAuth previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static AppNexusAuth Deserialize(byte[] buffer, AppNexusAuth instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static AppNexusAuth Deserialize(Stream stream, AppNexusAuth instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.playerToken = 0;
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.serverId = ProtocolParser.ReadString(stream);
				continue;
			case 16:
				instance.playerToken = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static AppNexusAuth DeserializeLengthDelimited(Stream stream, AppNexusAuth instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.playerToken = 0;
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.serverId = ProtocolParser.ReadString(stream);
				continue;
			case 16:
				instance.playerToken = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static AppNexusAuth DeserializeLength(Stream stream, int length, AppNexusAuth instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.playerToken = 0;
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.serverId = ProtocolParser.ReadString(stream);
				continue;
			case 16:
				instance.playerToken = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, AppNexusAuth instance, AppNexusAuth previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.serverId != previous.serverId)
		{
			if (instance.serverId == null)
			{
				throw new ArgumentNullException("serverId", "Required by proto specification.");
			}
			stream.WriteByte(10);
			ProtocolParser.WriteString(stream, instance.serverId);
		}
		if (instance.playerToken != previous.playerToken)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.playerToken);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, AppNexusAuth instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.serverId == null)
		{
			throw new ArgumentNullException("serverId", "Required by proto specification.");
		}
		stream.WriteByte(10);
		ProtocolParser.WriteString(stream, instance.serverId);
		if (instance.playerToken != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.playerToken);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(AppNexusAuth instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, AppNexusAuth instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class AppCameraInfo : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public int width;

	[NonSerialized]
	public int height;

	[NonSerialized]
	public float nearPlane;

	[NonSerialized]
	public float farPlane;

	[NonSerialized]
	public int controlFlags;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(AppCameraInfo instance)
	{
		if (instance.ShouldPool)
		{
			instance.width = 0;
			instance.height = 0;
			instance.nearPlane = 0f;
			instance.farPlane = 0f;
			instance.controlFlags = 0;
			Pool.Free<AppCameraInfo>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose AppCameraInfo with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(AppCameraInfo instance)
	{
		instance.width = width;
		instance.height = height;
		instance.nearPlane = nearPlane;
		instance.farPlane = farPlane;
		instance.controlFlags = controlFlags;
	}

	public AppCameraInfo Copy()
	{
		AppCameraInfo appCameraInfo = Pool.Get<AppCameraInfo>();
		CopyTo(appCameraInfo);
		return appCameraInfo;
	}

	public static AppCameraInfo Deserialize(Stream stream)
	{
		AppCameraInfo appCameraInfo = Pool.Get<AppCameraInfo>();
		Deserialize(stream, appCameraInfo, isDelta: false);
		return appCameraInfo;
	}

	public static AppCameraInfo DeserializeLengthDelimited(Stream stream)
	{
		AppCameraInfo appCameraInfo = Pool.Get<AppCameraInfo>();
		DeserializeLengthDelimited(stream, appCameraInfo, isDelta: false);
		return appCameraInfo;
	}

	public static AppCameraInfo DeserializeLength(Stream stream, int length)
	{
		AppCameraInfo appCameraInfo = Pool.Get<AppCameraInfo>();
		DeserializeLength(stream, length, appCameraInfo, isDelta: false);
		return appCameraInfo;
	}

	public static AppCameraInfo Deserialize(byte[] buffer)
	{
		AppCameraInfo appCameraInfo = Pool.Get<AppCameraInfo>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, appCameraInfo, isDelta: false);
		return appCameraInfo;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, AppCameraInfo previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static AppCameraInfo Deserialize(byte[] buffer, AppCameraInfo instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static AppCameraInfo Deserialize(Stream stream, AppCameraInfo instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.width = 0;
			instance.height = 0;
			instance.nearPlane = 0f;
			instance.farPlane = 0f;
			instance.controlFlags = 0;
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.width = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.height = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 29:
				instance.nearPlane = ProtocolParser.ReadSingle(stream);
				continue;
			case 37:
				instance.farPlane = ProtocolParser.ReadSingle(stream);
				continue;
			case 40:
				instance.controlFlags = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static AppCameraInfo DeserializeLengthDelimited(Stream stream, AppCameraInfo instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.width = 0;
			instance.height = 0;
			instance.nearPlane = 0f;
			instance.farPlane = 0f;
			instance.controlFlags = 0;
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.width = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.height = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 29:
				instance.nearPlane = ProtocolParser.ReadSingle(stream);
				continue;
			case 37:
				instance.farPlane = ProtocolParser.ReadSingle(stream);
				continue;
			case 40:
				instance.controlFlags = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static AppCameraInfo DeserializeLength(Stream stream, int length, AppCameraInfo instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.width = 0;
			instance.height = 0;
			instance.nearPlane = 0f;
			instance.farPlane = 0f;
			instance.controlFlags = 0;
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.width = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.height = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 29:
				instance.nearPlane = ProtocolParser.ReadSingle(stream);
				continue;
			case 37:
				instance.farPlane = ProtocolParser.ReadSingle(stream);
				continue;
			case 40:
				instance.controlFlags = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, AppCameraInfo instance, AppCameraInfo previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.width != previous.width)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.width);
		}
		if (instance.height != previous.height)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.height);
		}
		if (instance.nearPlane != previous.nearPlane)
		{
			stream.WriteByte(29);
			ProtocolParser.WriteSingle(stream, instance.nearPlane);
		}
		if (instance.farPlane != previous.farPlane)
		{
			stream.WriteByte(37);
			ProtocolParser.WriteSingle(stream, instance.farPlane);
		}
		if (instance.controlFlags != previous.controlFlags)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.controlFlags);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, AppCameraInfo instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.width != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.width);
		}
		if (instance.height != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.height);
		}
		if (instance.nearPlane != 0f)
		{
			stream.WriteByte(29);
			ProtocolParser.WriteSingle(stream, instance.nearPlane);
		}
		if (instance.farPlane != 0f)
		{
			stream.WriteByte(37);
			ProtocolParser.WriteSingle(stream, instance.farPlane);
		}
		if (instance.controlFlags != 0)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.controlFlags);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(AppCameraInfo instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, AppCameraInfo instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class AppTeamChanged : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public ulong playerId;

	[NonSerialized]
	public AppTeamInfo teamInfo;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(AppTeamChanged instance)
	{
		if (instance.ShouldPool)
		{
			instance.playerId = 0uL;
			if (instance.teamInfo != null)
			{
				instance.teamInfo.ResetToPool();
				instance.teamInfo = null;
			}
			Pool.Free<AppTeamChanged>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose AppTeamChanged with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(AppTeamChanged instance)
	{
		instance.playerId = playerId;
		if (teamInfo != null)
		{
			if (instance.teamInfo == null)
			{
				instance.teamInfo = teamInfo.Copy();
			}
			else
			{
				teamInfo.CopyTo(instance.teamInfo);
			}
		}
		else
		{
			instance.teamInfo = null;
		}
	}

	public AppTeamChanged Copy()
	{
		AppTeamChanged appTeamChanged = Pool.Get<AppTeamChanged>();
		CopyTo(appTeamChanged);
		return appTeamChanged;
	}

	public static AppTeamChanged Deserialize(Stream stream)
	{
		AppTeamChanged appTeamChanged = Pool.Get<AppTeamChanged>();
		Deserialize(stream, appTeamChanged, isDelta: false);
		return appTeamChanged;
	}

	public static AppTeamChanged DeserializeLengthDelimited(Stream stream)
	{
		AppTeamChanged appTeamChanged = Pool.Get<AppTeamChanged>();
		DeserializeLengthDelimited(stream, appTeamChanged, isDelta: false);
		return appTeamChanged;
	}

	public static AppTeamChanged DeserializeLength(Stream stream, int length)
	{
		AppTeamChanged appTeamChanged = Pool.Get<AppTeamChanged>();
		DeserializeLength(stream, length, appTeamChanged, isDelta: false);
		return appTeamChanged;
	}

	public static AppTeamChanged Deserialize(byte[] buffer)
	{
		AppTeamChanged appTeamChanged = Pool.Get<AppTeamChanged>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, appTeamChanged, isDelta: false);
		return appTeamChanged;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, AppTeamChanged previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static AppTeamChanged Deserialize(byte[] buffer, AppTeamChanged instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static AppTeamChanged Deserialize(Stream stream, AppTeamChanged instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.playerId = 0uL;
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.playerId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				if (instance.teamInfo == null)
				{
					instance.teamInfo = AppTeamInfo.DeserializeLengthDelimited(stream);
				}
				else
				{
					AppTeamInfo.DeserializeLengthDelimited(stream, instance.teamInfo, isDelta);
				}
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static AppTeamChanged DeserializeLengthDelimited(Stream stream, AppTeamChanged instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.playerId = 0uL;
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.playerId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				if (instance.teamInfo == null)
				{
					instance.teamInfo = AppTeamInfo.DeserializeLengthDelimited(stream);
				}
				else
				{
					AppTeamInfo.DeserializeLengthDelimited(stream, instance.teamInfo, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static AppTeamChanged DeserializeLength(Stream stream, int length, AppTeamChanged instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.playerId = 0uL;
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.playerId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				if (instance.teamInfo == null)
				{
					instance.teamInfo = AppTeamInfo.DeserializeLengthDelimited(stream);
				}
				else
				{
					AppTeamInfo.DeserializeLengthDelimited(stream, instance.teamInfo, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, AppTeamChanged instance, AppTeamChanged previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.playerId != previous.playerId)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.playerId);
		}
		if (instance.teamInfo == null)
		{
			throw new ArgumentNullException("teamInfo", "Required by proto specification.");
		}
		stream.WriteByte(18);
		memoryStream.SetLength(0L);
		AppTeamInfo.SerializeDelta(memoryStream, instance.teamInfo, previous.teamInfo);
		uint num = (uint)memoryStream.Length;
		ProtocolParser.WriteUInt32(stream, num);
		stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, AppTeamChanged instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.playerId != 0L)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.playerId);
		}
		if (instance.teamInfo == null)
		{
			throw new ArgumentNullException("teamInfo", "Required by proto specification.");
		}
		stream.WriteByte(18);
		memoryStream.SetLength(0L);
		AppTeamInfo.Serialize(memoryStream, instance.teamInfo);
		uint num = (uint)memoryStream.Length;
		ProtocolParser.WriteUInt32(stream, num);
		stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(AppTeamChanged instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, AppTeamChanged instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		teamInfo?.InspectUids(action);
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class AppNewTeamMessage : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public AppTeamMessage message;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(AppNewTeamMessage instance)
	{
		if (instance.ShouldPool)
		{
			if (instance.message != null)
			{
				instance.message.ResetToPool();
				instance.message = null;
			}
			Pool.Free<AppNewTeamMessage>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose AppNewTeamMessage with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(AppNewTeamMessage instance)
	{
		if (message != null)
		{
			if (instance.message == null)
			{
				instance.message = message.Copy();
			}
			else
			{
				message.CopyTo(instance.message);
			}
		}
		else
		{
			instance.message = null;
		}
	}

	public AppNewTeamMessage Copy()
	{
		AppNewTeamMessage appNewTeamMessage = Pool.Get<AppNewTeamMessage>();
		CopyTo(appNewTeamMessage);
		return appNewTeamMessage;
	}

	public static AppNewTeamMessage Deserialize(Stream stream)
	{
		AppNewTeamMessage appNewTeamMessage = Pool.Get<AppNewTeamMessage>();
		Deserialize(stream, appNewTeamMessage, isDelta: false);
		return appNewTeamMessage;
	}

	public static AppNewTeamMessage DeserializeLengthDelimited(Stream stream)
	{
		AppNewTeamMessage appNewTeamMessage = Pool.Get<AppNewTeamMessage>();
		DeserializeLengthDelimited(stream, appNewTeamMessage, isDelta: false);
		return appNewTeamMessage;
	}

	public static AppNewTeamMessage DeserializeLength(Stream stream, int length)
	{
		AppNewTeamMessage appNewTeamMessage = Pool.Get<AppNewTeamMessage>();
		DeserializeLength(stream, length, appNewTeamMessage, isDelta: false);
		return appNewTeamMessage;
	}

	public static AppNewTeamMessage Deserialize(byte[] buffer)
	{
		AppNewTeamMessage appNewTeamMessage = Pool.Get<AppNewTeamMessage>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, appNewTeamMessage, isDelta: false);
		return appNewTeamMessage;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, AppNewTeamMessage previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static AppNewTeamMessage Deserialize(byte[] buffer, AppNewTeamMessage instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static AppNewTeamMessage Deserialize(Stream stream, AppNewTeamMessage instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				if (instance.message == null)
				{
					instance.message = AppTeamMessage.DeserializeLengthDelimited(stream);
				}
				else
				{
					AppTeamMessage.DeserializeLengthDelimited(stream, instance.message, isDelta);
				}
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static AppNewTeamMessage DeserializeLengthDelimited(Stream stream, AppNewTeamMessage instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.message == null)
				{
					instance.message = AppTeamMessage.DeserializeLengthDelimited(stream);
				}
				else
				{
					AppTeamMessage.DeserializeLengthDelimited(stream, instance.message, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static AppNewTeamMessage DeserializeLength(Stream stream, int length, AppNewTeamMessage instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.message == null)
				{
					instance.message = AppTeamMessage.DeserializeLengthDelimited(stream);
				}
				else
				{
					AppTeamMessage.DeserializeLengthDelimited(stream, instance.message, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, AppNewTeamMessage instance, AppNewTeamMessage previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.message == null)
		{
			throw new ArgumentNullException("message", "Required by proto specification.");
		}
		stream.WriteByte(10);
		memoryStream.SetLength(0L);
		AppTeamMessage.SerializeDelta(memoryStream, instance.message, previous.message);
		uint num = (uint)memoryStream.Length;
		ProtocolParser.WriteUInt32(stream, num);
		stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, AppNewTeamMessage instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.message == null)
		{
			throw new ArgumentNullException("message", "Required by proto specification.");
		}
		stream.WriteByte(10);
		memoryStream.SetLength(0L);
		AppTeamMessage.Serialize(memoryStream, instance.message);
		uint num = (uint)memoryStream.Length;
		ProtocolParser.WriteUInt32(stream, num);
		stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(AppNewTeamMessage instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, AppNewTeamMessage instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		message?.InspectUids(action);
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class AppEntityChanged : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public NetworkableId entityId;

	[NonSerialized]
	public AppEntityPayload payload;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(AppEntityChanged instance)
	{
		if (instance.ShouldPool)
		{
			instance.entityId = default(NetworkableId);
			if (instance.payload != null)
			{
				instance.payload.ResetToPool();
				instance.payload = null;
			}
			Pool.Free<AppEntityChanged>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose AppEntityChanged with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(AppEntityChanged instance)
	{
		instance.entityId = entityId;
		if (payload != null)
		{
			if (instance.payload == null)
			{
				instance.payload = payload.Copy();
			}
			else
			{
				payload.CopyTo(instance.payload);
			}
		}
		else
		{
			instance.payload = null;
		}
	}

	public AppEntityChanged Copy()
	{
		AppEntityChanged appEntityChanged = Pool.Get<AppEntityChanged>();
		CopyTo(appEntityChanged);
		return appEntityChanged;
	}

	public static AppEntityChanged Deserialize(Stream stream)
	{
		AppEntityChanged appEntityChanged = Pool.Get<AppEntityChanged>();
		Deserialize(stream, appEntityChanged, isDelta: false);
		return appEntityChanged;
	}

	public static AppEntityChanged DeserializeLengthDelimited(Stream stream)
	{
		AppEntityChanged appEntityChanged = Pool.Get<AppEntityChanged>();
		DeserializeLengthDelimited(stream, appEntityChanged, isDelta: false);
		return appEntityChanged;
	}

	public static AppEntityChanged DeserializeLength(Stream stream, int length)
	{
		AppEntityChanged appEntityChanged = Pool.Get<AppEntityChanged>();
		DeserializeLength(stream, length, appEntityChanged, isDelta: false);
		return appEntityChanged;
	}

	public static AppEntityChanged Deserialize(byte[] buffer)
	{
		AppEntityChanged appEntityChanged = Pool.Get<AppEntityChanged>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, appEntityChanged, isDelta: false);
		return appEntityChanged;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, AppEntityChanged previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static AppEntityChanged Deserialize(byte[] buffer, AppEntityChanged instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static AppEntityChanged Deserialize(Stream stream, AppEntityChanged instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.entityId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 18:
				if (instance.payload == null)
				{
					instance.payload = AppEntityPayload.DeserializeLengthDelimited(stream);
				}
				else
				{
					AppEntityPayload.DeserializeLengthDelimited(stream, instance.payload, isDelta);
				}
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static AppEntityChanged DeserializeLengthDelimited(Stream stream, AppEntityChanged instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.entityId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 18:
				if (instance.payload == null)
				{
					instance.payload = AppEntityPayload.DeserializeLengthDelimited(stream);
				}
				else
				{
					AppEntityPayload.DeserializeLengthDelimited(stream, instance.payload, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static AppEntityChanged DeserializeLength(Stream stream, int length, AppEntityChanged instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.entityId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 18:
				if (instance.payload == null)
				{
					instance.payload = AppEntityPayload.DeserializeLengthDelimited(stream);
				}
				else
				{
					AppEntityPayload.DeserializeLengthDelimited(stream, instance.payload, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, AppEntityChanged instance, AppEntityChanged previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		stream.WriteByte(8);
		ProtocolParser.WriteUInt64(stream, instance.entityId.Value);
		if (instance.payload == null)
		{
			throw new ArgumentNullException("payload", "Required by proto specification.");
		}
		stream.WriteByte(18);
		memoryStream.SetLength(0L);
		AppEntityPayload.SerializeDelta(memoryStream, instance.payload, previous.payload);
		uint num = (uint)memoryStream.Length;
		ProtocolParser.WriteUInt32(stream, num);
		stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, AppEntityChanged instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.entityId != default(NetworkableId))
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.entityId.Value);
		}
		if (instance.payload == null)
		{
			throw new ArgumentNullException("payload", "Required by proto specification.");
		}
		stream.WriteByte(18);
		memoryStream.SetLength(0L);
		AppEntityPayload.Serialize(memoryStream, instance.payload);
		uint num = (uint)memoryStream.Length;
		ProtocolParser.WriteUInt32(stream, num);
		stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(AppEntityChanged instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, AppEntityChanged instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		action(UidType.NetworkableId, ref entityId.Value);
		payload?.InspectUids(action);
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class AppClanChanged : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public ClanInfo clanInfo;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(AppClanChanged instance)
	{
		if (instance.ShouldPool)
		{
			if (instance.clanInfo != null)
			{
				instance.clanInfo.ResetToPool();
				instance.clanInfo = null;
			}
			Pool.Free<AppClanChanged>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose AppClanChanged with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(AppClanChanged instance)
	{
		if (clanInfo != null)
		{
			if (instance.clanInfo == null)
			{
				instance.clanInfo = clanInfo.Copy();
			}
			else
			{
				clanInfo.CopyTo(instance.clanInfo);
			}
		}
		else
		{
			instance.clanInfo = null;
		}
	}

	public AppClanChanged Copy()
	{
		AppClanChanged appClanChanged = Pool.Get<AppClanChanged>();
		CopyTo(appClanChanged);
		return appClanChanged;
	}

	public static AppClanChanged Deserialize(Stream stream)
	{
		AppClanChanged appClanChanged = Pool.Get<AppClanChanged>();
		Deserialize(stream, appClanChanged, isDelta: false);
		return appClanChanged;
	}

	public static AppClanChanged DeserializeLengthDelimited(Stream stream)
	{
		AppClanChanged appClanChanged = Pool.Get<AppClanChanged>();
		DeserializeLengthDelimited(stream, appClanChanged, isDelta: false);
		return appClanChanged;
	}

	public static AppClanChanged DeserializeLength(Stream stream, int length)
	{
		AppClanChanged appClanChanged = Pool.Get<AppClanChanged>();
		DeserializeLength(stream, length, appClanChanged, isDelta: false);
		return appClanChanged;
	}

	public static AppClanChanged Deserialize(byte[] buffer)
	{
		AppClanChanged appClanChanged = Pool.Get<AppClanChanged>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, appClanChanged, isDelta: false);
		return appClanChanged;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, AppClanChanged previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static AppClanChanged Deserialize(byte[] buffer, AppClanChanged instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static AppClanChanged Deserialize(Stream stream, AppClanChanged instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				if (instance.clanInfo == null)
				{
					instance.clanInfo = ClanInfo.DeserializeLengthDelimited(stream);
				}
				else
				{
					ClanInfo.DeserializeLengthDelimited(stream, instance.clanInfo, isDelta);
				}
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static AppClanChanged DeserializeLengthDelimited(Stream stream, AppClanChanged instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.clanInfo == null)
				{
					instance.clanInfo = ClanInfo.DeserializeLengthDelimited(stream);
				}
				else
				{
					ClanInfo.DeserializeLengthDelimited(stream, instance.clanInfo, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static AppClanChanged DeserializeLength(Stream stream, int length, AppClanChanged instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.clanInfo == null)
				{
					instance.clanInfo = ClanInfo.DeserializeLengthDelimited(stream);
				}
				else
				{
					ClanInfo.DeserializeLengthDelimited(stream, instance.clanInfo, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, AppClanChanged instance, AppClanChanged previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.clanInfo != null)
		{
			stream.WriteByte(10);
			memoryStream.SetLength(0L);
			ClanInfo.SerializeDelta(memoryStream, instance.clanInfo, previous.clanInfo);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, AppClanChanged instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.clanInfo != null)
		{
			stream.WriteByte(10);
			memoryStream.SetLength(0L);
			ClanInfo.Serialize(memoryStream, instance.clanInfo);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(AppClanChanged instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, AppClanChanged instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		clanInfo?.InspectUids(action);
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class AppNewClanMessage : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public long clanId;

	[NonSerialized]
	public AppClanMessage message;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(AppNewClanMessage instance)
	{
		if (instance.ShouldPool)
		{
			instance.clanId = 0L;
			if (instance.message != null)
			{
				instance.message.ResetToPool();
				instance.message = null;
			}
			Pool.Free<AppNewClanMessage>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose AppNewClanMessage with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(AppNewClanMessage instance)
	{
		instance.clanId = clanId;
		if (message != null)
		{
			if (instance.message == null)
			{
				instance.message = message.Copy();
			}
			else
			{
				message.CopyTo(instance.message);
			}
		}
		else
		{
			instance.message = null;
		}
	}

	public AppNewClanMessage Copy()
	{
		AppNewClanMessage appNewClanMessage = Pool.Get<AppNewClanMessage>();
		CopyTo(appNewClanMessage);
		return appNewClanMessage;
	}

	public static AppNewClanMessage Deserialize(Stream stream)
	{
		AppNewClanMessage appNewClanMessage = Pool.Get<AppNewClanMessage>();
		Deserialize(stream, appNewClanMessage, isDelta: false);
		return appNewClanMessage;
	}

	public static AppNewClanMessage DeserializeLengthDelimited(Stream stream)
	{
		AppNewClanMessage appNewClanMessage = Pool.Get<AppNewClanMessage>();
		DeserializeLengthDelimited(stream, appNewClanMessage, isDelta: false);
		return appNewClanMessage;
	}

	public static AppNewClanMessage DeserializeLength(Stream stream, int length)
	{
		AppNewClanMessage appNewClanMessage = Pool.Get<AppNewClanMessage>();
		DeserializeLength(stream, length, appNewClanMessage, isDelta: false);
		return appNewClanMessage;
	}

	public static AppNewClanMessage Deserialize(byte[] buffer)
	{
		AppNewClanMessage appNewClanMessage = Pool.Get<AppNewClanMessage>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, appNewClanMessage, isDelta: false);
		return appNewClanMessage;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, AppNewClanMessage previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static AppNewClanMessage Deserialize(byte[] buffer, AppNewClanMessage instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static AppNewClanMessage Deserialize(Stream stream, AppNewClanMessage instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.clanId = 0L;
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.clanId = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				if (instance.message == null)
				{
					instance.message = AppClanMessage.DeserializeLengthDelimited(stream);
				}
				else
				{
					AppClanMessage.DeserializeLengthDelimited(stream, instance.message, isDelta);
				}
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static AppNewClanMessage DeserializeLengthDelimited(Stream stream, AppNewClanMessage instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.clanId = 0L;
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.clanId = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				if (instance.message == null)
				{
					instance.message = AppClanMessage.DeserializeLengthDelimited(stream);
				}
				else
				{
					AppClanMessage.DeserializeLengthDelimited(stream, instance.message, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static AppNewClanMessage DeserializeLength(Stream stream, int length, AppNewClanMessage instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.clanId = 0L;
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.clanId = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				if (instance.message == null)
				{
					instance.message = AppClanMessage.DeserializeLengthDelimited(stream);
				}
				else
				{
					AppClanMessage.DeserializeLengthDelimited(stream, instance.message, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, AppNewClanMessage instance, AppNewClanMessage previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		stream.WriteByte(8);
		ProtocolParser.WriteUInt64(stream, (ulong)instance.clanId);
		if (instance.message == null)
		{
			throw new ArgumentNullException("message", "Required by proto specification.");
		}
		stream.WriteByte(18);
		memoryStream.SetLength(0L);
		AppClanMessage.SerializeDelta(memoryStream, instance.message, previous.message);
		uint num = (uint)memoryStream.Length;
		ProtocolParser.WriteUInt32(stream, num);
		stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, AppNewClanMessage instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.clanId != 0L)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.clanId);
		}
		if (instance.message == null)
		{
			throw new ArgumentNullException("message", "Required by proto specification.");
		}
		stream.WriteByte(18);
		memoryStream.SetLength(0L);
		AppClanMessage.Serialize(memoryStream, instance.message);
		uint num = (uint)memoryStream.Length;
		ProtocolParser.WriteUInt32(stream, num);
		stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(AppNewClanMessage instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, AppNewClanMessage instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		message?.InspectUids(action);
	}
}


using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class AppCameraRays : IDisposable, IPooled, IProto
{
	public enum EntityType
	{
		Tree = 1,
		Player
	}

	public class Entity : IDisposable, IPooled, IProto
	{
		[NonSerialized]
		public NetworkableId entityId;

		[NonSerialized]
		public EntityType type;

		[NonSerialized]
		public Vector3 position;

		[NonSerialized]
		public Vector3 rotation;

		[NonSerialized]
		public Vector3 size;

		[NonSerialized]
		public string name;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(Entity instance)
		{
			//IL_0022: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_003a: Unknown result type (might be due to invalid IL or missing references)
			if (instance.ShouldPool)
			{
				instance.entityId = default(NetworkableId);
				instance.type = (EntityType)0;
				instance.position = default(Vector3);
				instance.rotation = default(Vector3);
				instance.size = default(Vector3);
				instance.name = string.Empty;
				Pool.Free<Entity>(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose Entity with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(Entity instance)
		{
			//IL_001a: Unknown result type (might be due to invalid IL or missing references)
			//IL_001f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0026: Unknown result type (might be due to invalid IL or missing references)
			//IL_002b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			instance.entityId = entityId;
			instance.type = type;
			instance.position = position;
			instance.rotation = rotation;
			instance.size = size;
			instance.name = name;
		}

		public Entity Copy()
		{
			Entity entity = Pool.Get<Entity>();
			CopyTo(entity);
			return entity;
		}

		public static Entity Deserialize(Stream stream)
		{
			Entity entity = Pool.Get<Entity>();
			Deserialize(stream, entity, isDelta: false);
			return entity;
		}

		public static Entity DeserializeLengthDelimited(Stream stream)
		{
			Entity entity = Pool.Get<Entity>();
			DeserializeLengthDelimited(stream, entity, isDelta: false);
			return entity;
		}

		public static Entity DeserializeLength(Stream stream, int length)
		{
			Entity entity = Pool.Get<Entity>();
			DeserializeLength(stream, length, entity, isDelta: false);
			return entity;
		}

		public static Entity Deserialize(byte[] buffer)
		{
			Entity entity = Pool.Get<Entity>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, entity, isDelta: false);
			return entity;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, Entity previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static Entity Deserialize(byte[] buffer, Entity instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static Entity Deserialize(Stream stream, Entity instance, bool isDelta)
		{
			//IL_0070: Unknown result type (might be due to invalid IL or missing references)
			//IL_0080: Unknown result type (might be due to invalid IL or missing references)
			//IL_0060: Unknown result type (might be due to invalid IL or missing references)
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.entityId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
					continue;
				case 16:
					instance.type = (EntityType)ProtocolParser.ReadUInt64(stream);
					continue;
				case 26:
					Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.position, isDelta);
					continue;
				case 34:
					Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.rotation, isDelta);
					continue;
				case 42:
					Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.size, isDelta);
					continue;
				case 50:
					instance.name = ProtocolParser.ReadString(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static Entity DeserializeLengthDelimited(Stream stream, Entity instance, bool isDelta)
		{
			//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
			//IL_0094: Unknown result type (might be due to invalid IL or missing references)
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.entityId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
					continue;
				case 16:
					instance.type = (EntityType)ProtocolParser.ReadUInt64(stream);
					continue;
				case 26:
					Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.position, isDelta);
					continue;
				case 34:
					Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.rotation, isDelta);
					continue;
				case 42:
					Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.size, isDelta);
					continue;
				case 50:
					instance.name = ProtocolParser.ReadString(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static Entity DeserializeLength(Stream stream, int length, Entity instance, bool isDelta)
		{
			//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
			//IL_008d: Unknown result type (might be due to invalid IL or missing references)
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.entityId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
					continue;
				case 16:
					instance.type = (EntityType)ProtocolParser.ReadUInt64(stream);
					continue;
				case 26:
					Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.position, isDelta);
					continue;
				case 34:
					Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.rotation, isDelta);
					continue;
				case 42:
					Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.size, isDelta);
					continue;
				case 50:
					instance.name = ProtocolParser.ReadString(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, Entity instance, Entity previous)
		{
			//IL_0034: Unknown result type (might be due to invalid IL or missing references)
			//IL_003a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0086: Unknown result type (might be due to invalid IL or missing references)
			//IL_008c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0058: Unknown result type (might be due to invalid IL or missing references)
			//IL_005e: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
			//IL_00de: Unknown result type (might be due to invalid IL or missing references)
			//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
			//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
			//IL_0102: Unknown result type (might be due to invalid IL or missing references)
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.entityId.Value);
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.type);
			if (instance.position != previous.position)
			{
				stream.WriteByte(26);
				memoryStream.SetLength(0L);
				Vector3Serialized.SerializeDelta(memoryStream, instance.position, previous.position);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
			if (instance.rotation != previous.rotation)
			{
				stream.WriteByte(34);
				memoryStream.SetLength(0L);
				Vector3Serialized.SerializeDelta(memoryStream, instance.rotation, previous.rotation);
				uint num2 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
			}
			if (instance.size != previous.size)
			{
				stream.WriteByte(42);
				memoryStream.SetLength(0L);
				Vector3Serialized.SerializeDelta(memoryStream, instance.size, previous.size);
				uint num3 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num3);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num3);
			}
			if (instance.name != null && instance.name != previous.name)
			{
				stream.WriteByte(50);
				ProtocolParser.WriteString(stream, instance.name);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public static void Serialize(Stream stream, Entity instance)
		{
			//IL_004a: Unknown result type (might be due to invalid IL or missing references)
			//IL_0051: Unknown result type (might be due to invalid IL or missing references)
			//IL_0057: Unknown result type (might be due to invalid IL or missing references)
			//IL_0099: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
			//IL_0071: Unknown result type (might be due to invalid IL or missing references)
			//IL_00eb: Unknown result type (might be due to invalid IL or missing references)
			//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
			//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
			//IL_0112: Unknown result type (might be due to invalid IL or missing references)
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.entityId != default(NetworkableId))
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, instance.entityId.Value);
			}
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.type);
			if (instance.position != default(Vector3))
			{
				stream.WriteByte(26);
				memoryStream.SetLength(0L);
				Vector3Serialized.Serialize(memoryStream, instance.position);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
			if (instance.rotation != default(Vector3))
			{
				stream.WriteByte(34);
				memoryStream.SetLength(0L);
				Vector3Serialized.Serialize(memoryStream, instance.rotation);
				uint num2 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
			}
			if (instance.size != default(Vector3))
			{
				stream.WriteByte(42);
				memoryStream.SetLength(0L);
				Vector3Serialized.Serialize(memoryStream, instance.size);
				uint num3 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num3);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num3);
			}
			if (instance.name != null)
			{
				stream.WriteByte(50);
				ProtocolParser.WriteString(stream, instance.name);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(Entity instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, Entity instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
			action(UidType.NetworkableId, ref entityId.Value);
		}
	}

	[NonSerialized]
	public float verticalFov;

	[NonSerialized]
	public int sampleOffset;

	[NonSerialized]
	public ArraySegment<byte> rayData;

	[NonSerialized]
	public float distance;

	[NonSerialized]
	public List<Entity> entities;

	[NonSerialized]
	public float timeOfDay;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(AppCameraRays instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		instance.verticalFov = 0f;
		instance.sampleOffset = 0;
		if (instance.rayData.Array != null)
		{
			ArrayPool<byte>.Shared.Return(instance.rayData.Array);
		}
		instance.rayData = default(ArraySegment<byte>);
		instance.distance = 0f;
		if (instance.entities != null)
		{
			for (int i = 0; i < instance.entities.Count; i++)
			{
				if (instance.entities[i] != null)
				{
					instance.entities[i].ResetToPool();
					instance.entities[i] = null;
				}
			}
			List<Entity> list = instance.entities;
			Pool.Free<Entity>(ref list, false);
			instance.entities = list;
		}
		instance.timeOfDay = 0f;
		Pool.Free<AppCameraRays>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose AppCameraRays with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(AppCameraRays instance)
	{
		instance.verticalFov = verticalFov;
		instance.sampleOffset = sampleOffset;
		if (rayData.Array == null)
		{
			instance.rayData = default(ArraySegment<byte>);
		}
		else
		{
			byte[] array = ArrayPool<byte>.Shared.Rent(rayData.Count);
			Array.Copy(rayData.Array, 0, array, 0, rayData.Count);
			instance.rayData = new ArraySegment<byte>(array, 0, rayData.Count);
		}
		instance.distance = distance;
		if (entities != null)
		{
			instance.entities = Pool.Get<List<Entity>>();
			for (int i = 0; i < entities.Count; i++)
			{
				Entity item = entities[i].Copy();
				instance.entities.Add(item);
			}
		}
		else
		{
			instance.entities = null;
		}
		instance.timeOfDay = timeOfDay;
	}

	public AppCameraRays Copy()
	{
		AppCameraRays appCameraRays = Pool.Get<AppCameraRays>();
		CopyTo(appCameraRays);
		return appCameraRays;
	}

	public static AppCameraRays Deserialize(Stream stream)
	{
		AppCameraRays appCameraRays = Pool.Get<AppCameraRays>();
		Deserialize(stream, appCameraRays, isDelta: false);
		return appCameraRays;
	}

	public static AppCameraRays DeserializeLengthDelimited(Stream stream)
	{
		AppCameraRays appCameraRays = Pool.Get<AppCameraRays>();
		DeserializeLengthDelimited(stream, appCameraRays, isDelta: false);
		return appCameraRays;
	}

	public static AppCameraRays DeserializeLength(Stream stream, int length)
	{
		AppCameraRays appCameraRays = Pool.Get<AppCameraRays>();
		DeserializeLength(stream, length, appCameraRays, isDelta: false);
		return appCameraRays;
	}

	public static AppCameraRays Deserialize(byte[] buffer)
	{
		AppCameraRays appCameraRays = Pool.Get<AppCameraRays>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, appCameraRays, isDelta: false);
		return appCameraRays;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, AppCameraRays previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static AppCameraRays Deserialize(byte[] buffer, AppCameraRays instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static AppCameraRays Deserialize(Stream stream, AppCameraRays instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.verticalFov = 0f;
			instance.sampleOffset = 0;
			instance.distance = 0f;
			if (instance.entities == null)
			{
				instance.entities = Pool.Get<List<Entity>>();
			}
			instance.timeOfDay = 1f;
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 13:
				instance.verticalFov = ProtocolParser.ReadSingle(stream);
				continue;
			case 16:
				instance.sampleOffset = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 26:
				instance.rayData = ProtocolParser.ReadPooledBytes(stream);
				continue;
			case 37:
				instance.distance = ProtocolParser.ReadSingle(stream);
				continue;
			case 42:
				instance.entities.Add(Entity.DeserializeLengthDelimited(stream));
				continue;
			case 53:
				instance.timeOfDay = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static AppCameraRays DeserializeLengthDelimited(Stream stream, AppCameraRays instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.verticalFov = 0f;
			instance.sampleOffset = 0;
			instance.distance = 0f;
			if (instance.entities == null)
			{
				instance.entities = Pool.Get<List<Entity>>();
			}
			instance.timeOfDay = 1f;
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.verticalFov = ProtocolParser.ReadSingle(stream);
				continue;
			case 16:
				instance.sampleOffset = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 26:
				instance.rayData = ProtocolParser.ReadPooledBytes(stream);
				continue;
			case 37:
				instance.distance = ProtocolParser.ReadSingle(stream);
				continue;
			case 42:
				instance.entities.Add(Entity.DeserializeLengthDelimited(stream));
				continue;
			case 53:
				instance.timeOfDay = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static AppCameraRays DeserializeLength(Stream stream, int length, AppCameraRays instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.verticalFov = 0f;
			instance.sampleOffset = 0;
			instance.distance = 0f;
			if (instance.entities == null)
			{
				instance.entities = Pool.Get<List<Entity>>();
			}
			instance.timeOfDay = 1f;
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.verticalFov = ProtocolParser.ReadSingle(stream);
				continue;
			case 16:
				instance.sampleOffset = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 26:
				instance.rayData = ProtocolParser.ReadPooledBytes(stream);
				continue;
			case 37:
				instance.distance = ProtocolParser.ReadSingle(stream);
				continue;
			case 42:
				instance.entities.Add(Entity.DeserializeLengthDelimited(stream));
				continue;
			case 53:
				instance.timeOfDay = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, AppCameraRays instance, AppCameraRays previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.verticalFov != previous.verticalFov)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.verticalFov);
		}
		if (instance.sampleOffset != previous.sampleOffset)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.sampleOffset);
		}
		if (instance.rayData.Array == null)
		{
			throw new ArgumentNullException("rayData", "Required by proto specification.");
		}
		stream.WriteByte(26);
		ProtocolParser.WritePooledBytes(stream, instance.rayData);
		if (instance.distance != previous.distance)
		{
			stream.WriteByte(37);
			ProtocolParser.WriteSingle(stream, instance.distance);
		}
		if (instance.entities != null)
		{
			for (int i = 0; i < instance.entities.Count; i++)
			{
				Entity entity = instance.entities[i];
				stream.WriteByte(42);
				memoryStream.SetLength(0L);
				Entity.SerializeDelta(memoryStream, entity, entity);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.timeOfDay != previous.timeOfDay)
		{
			stream.WriteByte(53);
			ProtocolParser.WriteSingle(stream, instance.timeOfDay);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, AppCameraRays instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.verticalFov != 0f)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.verticalFov);
		}
		if (instance.sampleOffset != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.sampleOffset);
		}
		if (instance.rayData.Array == null)
		{
			throw new ArgumentNullException("rayData", "Required by proto specification.");
		}
		stream.WriteByte(26);
		ProtocolParser.WritePooledBytes(stream, instance.rayData);
		if (instance.distance != 0f)
		{
			stream.WriteByte(37);
			ProtocolParser.WriteSingle(stream, instance.distance);
		}
		if (instance.entities != null)
		{
			for (int i = 0; i < instance.entities.Count; i++)
			{
				Entity instance2 = instance.entities[i];
				stream.WriteByte(42);
				memoryStream.SetLength(0L);
				Entity.Serialize(memoryStream, instance2);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.timeOfDay != 1f)
		{
			stream.WriteByte(53);
			ProtocolParser.WriteSingle(stream, instance.timeOfDay);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(AppCameraRays instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, AppCameraRays instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (entities != null)
		{
			for (int i = 0; i < entities.Count; i++)
			{
				entities[i]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class AIDesign : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public List<int> availableStates;

	[NonSerialized]
	public List<AIStateContainer> stateContainers;

	[NonSerialized]
	public int defaultStateContainer;

	[NonSerialized]
	public string description;

	[NonSerialized]
	public int scope;

	[NonSerialized]
	public int intialViewStateID;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(AIDesign instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.availableStates != null)
		{
			List<int> list = instance.availableStates;
			Pool.FreeUnmanaged<int>(ref list);
			instance.availableStates = list;
		}
		if (instance.stateContainers != null)
		{
			for (int i = 0; i < instance.stateContainers.Count; i++)
			{
				if (instance.stateContainers[i] != null)
				{
					instance.stateContainers[i].ResetToPool();
					instance.stateContainers[i] = null;
				}
			}
			List<AIStateContainer> list2 = instance.stateContainers;
			Pool.Free<AIStateContainer>(ref list2, false);
			instance.stateContainers = list2;
		}
		instance.defaultStateContainer = 0;
		instance.description = string.Empty;
		instance.scope = 0;
		instance.intialViewStateID = 0;
		Pool.Free<AIDesign>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose AIDesign with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(AIDesign instance)
	{
		if (availableStates != null)
		{
			instance.availableStates = Pool.Get<List<int>>();
			for (int i = 0; i < availableStates.Count; i++)
			{
				int item = availableStates[i];
				instance.availableStates.Add(item);
			}
		}
		else
		{
			instance.availableStates = null;
		}
		if (stateContainers != null)
		{
			instance.stateContainers = Pool.Get<List<AIStateContainer>>();
			for (int j = 0; j < stateContainers.Count; j++)
			{
				AIStateContainer item2 = stateContainers[j].Copy();
				instance.stateContainers.Add(item2);
			}
		}
		else
		{
			instance.stateContainers = null;
		}
		instance.defaultStateContainer = defaultStateContainer;
		instance.description = description;
		instance.scope = scope;
		instance.intialViewStateID = intialViewStateID;
	}

	public AIDesign Copy()
	{
		AIDesign aIDesign = Pool.Get<AIDesign>();
		CopyTo(aIDesign);
		return aIDesign;
	}

	public static AIDesign Deserialize(Stream stream)
	{
		AIDesign aIDesign = Pool.Get<AIDesign>();
		Deserialize(stream, aIDesign, isDelta: false);
		return aIDesign;
	}

	public static AIDesign DeserializeLengthDelimited(Stream stream)
	{
		AIDesign aIDesign = Pool.Get<AIDesign>();
		DeserializeLengthDelimited(stream, aIDesign, isDelta: false);
		return aIDesign;
	}

	public static AIDesign DeserializeLength(Stream stream, int length)
	{
		AIDesign aIDesign = Pool.Get<AIDesign>();
		DeserializeLength(stream, length, aIDesign, isDelta: false);
		return aIDesign;
	}

	public static AIDesign Deserialize(byte[] buffer)
	{
		AIDesign aIDesign = Pool.Get<AIDesign>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, aIDesign, isDelta: false);
		return aIDesign;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, AIDesign previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static AIDesign Deserialize(byte[] buffer, AIDesign instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static AIDesign Deserialize(Stream stream, AIDesign instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.availableStates == null)
			{
				instance.availableStates = Pool.Get<List<int>>();
			}
			if (instance.stateContainers == null)
			{
				instance.stateContainers = Pool.Get<List<AIStateContainer>>();
			}
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.availableStates.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			case 18:
				instance.stateContainers.Add(AIStateContainer.DeserializeLengthDelimited(stream));
				continue;
			case 24:
				instance.defaultStateContainer = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 34:
				instance.description = ProtocolParser.ReadString(stream);
				continue;
			case 40:
				instance.scope = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.intialViewStateID = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static AIDesign DeserializeLengthDelimited(Stream stream, AIDesign instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.availableStates == null)
			{
				instance.availableStates = Pool.Get<List<int>>();
			}
			if (instance.stateContainers == null)
			{
				instance.stateContainers = Pool.Get<List<AIStateContainer>>();
			}
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.availableStates.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			case 18:
				instance.stateContainers.Add(AIStateContainer.DeserializeLengthDelimited(stream));
				continue;
			case 24:
				instance.defaultStateContainer = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 34:
				instance.description = ProtocolParser.ReadString(stream);
				continue;
			case 40:
				instance.scope = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.intialViewStateID = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static AIDesign DeserializeLength(Stream stream, int length, AIDesign instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.availableStates == null)
			{
				instance.availableStates = Pool.Get<List<int>>();
			}
			if (instance.stateContainers == null)
			{
				instance.stateContainers = Pool.Get<List<AIStateContainer>>();
			}
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.availableStates.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			case 18:
				instance.stateContainers.Add(AIStateContainer.DeserializeLengthDelimited(stream));
				continue;
			case 24:
				instance.defaultStateContainer = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 34:
				instance.description = ProtocolParser.ReadString(stream);
				continue;
			case 40:
				instance.scope = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.intialViewStateID = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, AIDesign instance, AIDesign previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.availableStates != null)
		{
			for (int i = 0; i < instance.availableStates.Count; i++)
			{
				int num = instance.availableStates[i];
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)num);
			}
		}
		if (instance.stateContainers != null)
		{
			for (int j = 0; j < instance.stateContainers.Count; j++)
			{
				AIStateContainer aIStateContainer = instance.stateContainers[j];
				stream.WriteByte(18);
				memoryStream.SetLength(0L);
				AIStateContainer.SerializeDelta(memoryStream, aIStateContainer, aIStateContainer);
				uint num2 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
			}
		}
		if (instance.defaultStateContainer != previous.defaultStateContainer)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.defaultStateContainer);
		}
		if (instance.description != null && instance.description != previous.description)
		{
			stream.WriteByte(34);
			ProtocolParser.WriteString(stream, instance.description);
		}
		if (instance.scope != previous.scope)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.scope);
		}
		if (instance.intialViewStateID != previous.intialViewStateID)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.intialViewStateID);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, AIDesign instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.availableStates != null)
		{
			for (int i = 0; i < instance.availableStates.Count; i++)
			{
				int num = instance.availableStates[i];
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)num);
			}
		}
		if (instance.stateContainers != null)
		{
			for (int j = 0; j < instance.stateContainers.Count; j++)
			{
				AIStateContainer instance2 = instance.stateContainers[j];
				stream.WriteByte(18);
				memoryStream.SetLength(0L);
				AIStateContainer.Serialize(memoryStream, instance2);
				uint num2 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
			}
		}
		if (instance.defaultStateContainer != 0)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.defaultStateContainer);
		}
		if (instance.description != null)
		{
			stream.WriteByte(34);
			ProtocolParser.WriteString(stream, instance.description);
		}
		if (instance.scope != 0)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.scope);
		}
		if (instance.intialViewStateID != 0)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.intialViewStateID);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(AIDesign instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, AIDesign instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (stateContainers != null)
		{
			for (int i = 0; i < stateContainers.Count; i++)
			{
				stateContainers[i]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class AIStateContainer : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public int id;

	[NonSerialized]
	public int state;

	[NonSerialized]
	public List<AIEventData> events;

	[NonSerialized]
	public int inputMemorySlot;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(AIStateContainer instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		instance.id = 0;
		instance.state = 0;
		if (instance.events != null)
		{
			for (int i = 0; i < instance.events.Count; i++)
			{
				if (instance.events[i] != null)
				{
					instance.events[i].ResetToPool();
					instance.events[i] = null;
				}
			}
			List<AIEventData> list = instance.events;
			Pool.Free<AIEventData>(ref list, false);
			instance.events = list;
		}
		instance.inputMemorySlot = 0;
		Pool.Free<AIStateContainer>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose AIStateContainer with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(AIStateContainer instance)
	{
		instance.id = id;
		instance.state = state;
		if (events != null)
		{
			instance.events = Pool.Get<List<AIEventData>>();
			for (int i = 0; i < events.Count; i++)
			{
				AIEventData item = events[i].Copy();
				instance.events.Add(item);
			}
		}
		else
		{
			instance.events = null;
		}
		instance.inputMemorySlot = inputMemorySlot;
	}

	public AIStateContainer Copy()
	{
		AIStateContainer aIStateContainer = Pool.Get<AIStateContainer>();
		CopyTo(aIStateContainer);
		return aIStateContainer;
	}

	public static AIStateContainer Deserialize(Stream stream)
	{
		AIStateContainer aIStateContainer = Pool.Get<AIStateContainer>();
		Deserialize(stream, aIStateContainer, isDelta: false);
		return aIStateContainer;
	}

	public static AIStateContainer DeserializeLengthDelimited(Stream stream)
	{
		AIStateContainer aIStateContainer = Pool.Get<AIStateContainer>();
		DeserializeLengthDelimited(stream, aIStateContainer, isDelta: false);
		return aIStateContainer;
	}

	public static AIStateContainer DeserializeLength(Stream stream, int length)
	{
		AIStateContainer aIStateContainer = Pool.Get<AIStateContainer>();
		DeserializeLength(stream, length, aIStateContainer, isDelta: false);
		return aIStateContainer;
	}

	public static AIStateContainer Deserialize(byte[] buffer)
	{
		AIStateContainer aIStateContainer = Pool.Get<AIStateContainer>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, aIStateContainer, isDelta: false);
		return aIStateContainer;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, AIStateContainer previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static AIStateContainer Deserialize(byte[] buffer, AIStateContainer instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static AIStateContainer Deserialize(Stream stream, AIStateContainer instance, bool isDelta)
	{
		if (!isDelta && instance.events == null)
		{
			instance.events = Pool.Get<List<AIEventData>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.id = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.state = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 26:
				instance.events.Add(AIEventData.DeserializeLengthDelimited(stream));
				continue;
			case 32:
				instance.inputMemorySlot = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static AIStateContainer DeserializeLengthDelimited(Stream stream, AIStateContainer instance, bool isDelta)
	{
		if (!isDelta && instance.events == null)
		{
			instance.events = Pool.Get<List<AIEventData>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.id = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.state = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 26:
				instance.events.Add(AIEventData.DeserializeLengthDelimited(stream));
				continue;
			case 32:
				instance.inputMemorySlot = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static AIStateContainer DeserializeLength(Stream stream, int length, AIStateContainer instance, bool isDelta)
	{
		if (!isDelta && instance.events == null)
		{
			instance.events = Pool.Get<List<AIEventData>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.id = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.state = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 26:
				instance.events.Add(AIEventData.DeserializeLengthDelimited(stream));
				continue;
			case 32:
				instance.inputMemorySlot = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, AIStateContainer instance, AIStateContainer previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.id != previous.id)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.id);
		}
		if (instance.state != previous.state)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.state);
		}
		if (instance.events != null)
		{
			for (int i = 0; i < instance.events.Count; i++)
			{
				AIEventData aIEventData = instance.events[i];
				stream.WriteByte(26);
				memoryStream.SetLength(0L);
				AIEventData.SerializeDelta(memoryStream, aIEventData, aIEventData);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.inputMemorySlot != previous.inputMemorySlot)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.inputMemorySlot);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, AIStateContainer instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.id != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.id);
		}
		if (instance.state != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.state);
		}
		if (instance.events != null)
		{
			for (int i = 0; i < instance.events.Count; i++)
			{
				AIEventData instance2 = instance.events[i];
				stream.WriteByte(26);
				memoryStream.SetLength(0L);
				AIEventData.Serialize(memoryStream, instance2);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.inputMemorySlot != 0)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.inputMemorySlot);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(AIStateContainer instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, AIStateContainer instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (events != null)
		{
			for (int i = 0; i < events.Count; i++)
			{
				events[i]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class AIEventData : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public int eventType;

	[NonSerialized]
	public int triggerStateContainer;

	[NonSerialized]
	public bool inverted;

	[NonSerialized]
	public int inputMemorySlot;

	[NonSerialized]
	public int outputMemorySlot;

	[NonSerialized]
	public int id;

	[NonSerialized]
	public TimerAIEventData timerData;

	[NonSerialized]
	public PlayerDetectedAIEventData playerDetectedData;

	[NonSerialized]
	public HealthBelowAIEventData healthBelowData;

	[NonSerialized]
	public InRangeAIEventData inRangeData;

	[NonSerialized]
	public HungerAboveAIEventData hungerAboveData;

	[NonSerialized]
	public TirednessAboveAIEventData tirednessAboveData;

	[NonSerialized]
	public ThreatDetectedAIEventData threatDetectedData;

	[NonSerialized]
	public TargetDetectedAIEventData targetDetectedData;

	[NonSerialized]
	public AmmoBelowAIEventData ammoBelowData;

	[NonSerialized]
	public ChanceAIEventData chanceData;

	[NonSerialized]
	public TimeSinceThreatAIEventData timeSinceThreatData;

	[NonSerialized]
	public AggressionTimerAIEventData aggressionTimerData;

	[NonSerialized]
	public InRangeOfHomeAIEventData inRangeOfHomeData;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(AIEventData instance)
	{
		if (instance.ShouldPool)
		{
			instance.eventType = 0;
			instance.triggerStateContainer = 0;
			instance.inverted = false;
			instance.inputMemorySlot = 0;
			instance.outputMemorySlot = 0;
			instance.id = 0;
			if (instance.timerData != null)
			{
				instance.timerData.ResetToPool();
				instance.timerData = null;
			}
			if (instance.playerDetectedData != null)
			{
				instance.playerDetectedData.ResetToPool();
				instance.playerDetectedData = null;
			}
			if (instance.healthBelowData != null)
			{
				instance.healthBelowData.ResetToPool();
				instance.healthBelowData = null;
			}
			if (instance.inRangeData != null)
			{
				instance.inRangeData.ResetToPool();
				instance.inRangeData = null;
			}
			if (instance.hungerAboveData != null)
			{
				instance.hungerAboveData.ResetToPool();
				instance.hungerAboveData = null;
			}
			if (instance.tirednessAboveData != null)
			{
				instance.tirednessAboveData.ResetToPool();
				instance.tirednessAboveData = null;
			}
			if (instance.threatDetectedData != null)
			{
				instance.threatDetectedData.ResetToPool();
				instance.threatDetectedData = null;
			}
			if (instance.targetDetectedData != null)
			{
				instance.targetDetectedData.ResetToPool();
				instance.targetDetectedData = null;
			}
			if (instance.ammoBelowData != null)
			{
				instance.ammoBelowData.ResetToPool();
				instance.ammoBelowData = null;
			}
			if (instance.chanceData != null)
			{
				instance.chanceData.ResetToPool();
				instance.chanceData = null;
			}
			if (instance.timeSinceThreatData != null)
			{
				instance.timeSinceThreatData.ResetToPool();
				instance.timeSinceThreatData = null;
			}
			if (instance.aggressionTimerData != null)
			{
				instance.aggressionTimerData.ResetToPool();
				instance.aggressionTimerData = null;
			}
			if (instance.inRangeOfHomeData != null)
			{
				instance.inRangeOfHomeData.ResetToPool();
				instance.inRangeOfHomeData = null;
			}
			Pool.Free<AIEventData>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose AIEventData with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(AIEventData instance)
	{
		instance.eventType = eventType;
		instance.triggerStateContainer = triggerStateContainer;
		instance.inverted = inverted;
		instance.inputMemorySlot = inputMemorySlot;
		instance.outputMemorySlot = outputMemorySlot;
		instance.id = id;
		if (timerData != null)
		{
			if (instance.timerData == null)
			{
				instance.timerData = timerData.Copy();
			}
			else
			{
				timerData.CopyTo(instance.timerData);
			}
		}
		else
		{
			instance.timerData = null;
		}
		if (playerDetectedData != null)
		{
			if (instance.playerDetectedData == null)
			{
				instance.playerDetectedData = playerDetectedData.Copy();
			}
			else
			{
				playerDetectedData.CopyTo(instance.playerDetectedData);
			}
		}
		else
		{
			instance.playerDetectedData = null;
		}
		if (healthBelowData != null)
		{
			if (instance.healthBelowData == null)
			{
				instance.healthBelowData = healthBelowData.Copy();
			}
			else
			{
				healthBelowData.CopyTo(instance.healthBelowData);
			}
		}
		else
		{
			instance.healthBelowData = null;
		}
		if (inRangeData != null)
		{
			if (instance.inRangeData == null)
			{
				instance.inRangeData = inRangeData.Copy();
			}
			else
			{
				inRangeData.CopyTo(instance.inRangeData);
			}
		}
		else
		{
			instance.inRangeData = null;
		}
		if (hungerAboveData != null)
		{
			if (instance.hungerAboveData == null)
			{
				instance.hungerAboveData = hungerAboveData.Copy();
			}
			else
			{
				hungerAboveData.CopyTo(instance.hungerAboveData);
			}
		}
		else
		{
			instance.hungerAboveData = null;
		}
		if (tirednessAboveData != null)
		{
			if (instance.tirednessAboveData == null)
			{
				instance.tirednessAboveData = tirednessAboveData.Copy();
			}
			else
			{
				tirednessAboveData.CopyTo(instance.tirednessAboveData);
			}
		}
		else
		{
			instance.tirednessAboveData = null;
		}
		if (threatDetectedData != null)
		{
			if (instance.threatDetectedData == null)
			{
				instance.threatDetectedData = threatDetectedData.Copy();
			}
			else
			{
				threatDetectedData.CopyTo(instance.threatDetectedData);
			}
		}
		else
		{
			instance.threatDetectedData = null;
		}
		if (targetDetectedData != null)
		{
			if (instance.targetDetectedData == null)
			{
				instance.targetDetectedData = targetDetectedData.Copy();
			}
			else
			{
				targetDetectedData.CopyTo(instance.targetDetectedData);
			}
		}
		else
		{
			instance.targetDetectedData = null;
		}
		if (ammoBelowData != null)
		{
			if (instance.ammoBelowData == null)
			{
				instance.ammoBelowData = ammoBelowData.Copy();
			}
			else
			{
				ammoBelowData.CopyTo(instance.ammoBelowData);
			}
		}
		else
		{
			instance.ammoBelowData = null;
		}
		if (chanceData != null)
		{
			if (instance.chanceData == null)
			{
				instance.chanceData = chanceData.Copy();
			}
			else
			{
				chanceData.CopyTo(instance.chanceData);
			}
		}
		else
		{
			instance.chanceData = null;
		}
		if (timeSinceThreatData != null)
		{
			if (instance.timeSinceThreatData == null)
			{
				instance.timeSinceThreatData = timeSinceThreatData.Copy();
			}
			else
			{
				timeSinceThreatData.CopyTo(instance.timeSinceThreatData);
			}
		}
		else
		{
			instance.timeSinceThreatData = null;
		}
		if (aggressionTimerData != null)
		{
			if (instance.aggressionTimerData == null)
			{
				instance.aggressionTimerData = aggressionTimerData.Copy();
			}
			else
			{
				aggressionTimerData.CopyTo(instance.aggressionTimerData);
			}
		}
		else
		{
			instance.aggressionTimerData = null;
		}
		if (inRangeOfHomeData != null)
		{
			if (instance.inRangeOfHomeData == null)
			{
				instance.inRangeOfHomeData = inRangeOfHomeData.Copy();
			}
			else
			{
				inRangeOfHomeData.CopyTo(instance.inRangeOfHomeData);
			}
		}
		else
		{
			instance.inRangeOfHomeData = null;
		}
	}

	public AIEventData Copy()
	{
		AIEventData aIEventData = Pool.Get<AIEventData>();
		CopyTo(aIEventData);
		return aIEventData;
	}

	public static AIEventData Deserialize(Stream stream)
	{
		AIEventData aIEventData = Pool.Get<AIEventData>();
		Deserialize(stream, aIEventData, isDelta: false);
		return aIEventData;
	}

	public static AIEventData DeserializeLengthDelimited(Stream stream)
	{
		AIEventData aIEventData = Pool.Get<AIEventData>();
		DeserializeLengthDelimited(stream, aIEventData, isDelta: false);
		return aIEventData;
	}

	public static AIEventData DeserializeLength(Stream stream, int length)
	{
		AIEventData aIEventData = Pool.Get<AIEventData>();
		DeserializeLength(stream, length, aIEventData, isDelta: false);
		return aIEventData;
	}

	public static AIEventData Deserialize(byte[] buffer)
	{
		AIEventData aIEventData = Pool.Get<AIEventData>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, aIEventData, isDelta: false);
		return aIEventData;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, AIEventData previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static AIEventData Deserialize(byte[] buffer, AIEventData instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static AIEventData Deserialize(Stream stream, AIEventData instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.eventType = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.triggerStateContainer = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.inverted = ProtocolParser.ReadBool(stream);
				continue;
			case 32:
				instance.inputMemorySlot = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.outputMemorySlot = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.id = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			switch (key.Field)
			{
			case 0u:
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			case 100u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.timerData == null)
					{
						instance.timerData = TimerAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						TimerAIEventData.DeserializeLengthDelimited(stream, instance.timerData, isDelta);
					}
				}
				break;
			case 101u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.playerDetectedData == null)
					{
						instance.playerDetectedData = PlayerDetectedAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						PlayerDetectedAIEventData.DeserializeLengthDelimited(stream, instance.playerDetectedData, isDelta);
					}
				}
				break;
			case 102u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.healthBelowData == null)
					{
						instance.healthBelowData = HealthBelowAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						HealthBelowAIEventData.DeserializeLengthDelimited(stream, instance.healthBelowData, isDelta);
					}
				}
				break;
			case 103u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.inRangeData == null)
					{
						instance.inRangeData = InRangeAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						InRangeAIEventData.DeserializeLengthDelimited(stream, instance.inRangeData, isDelta);
					}
				}
				break;
			case 104u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.hungerAboveData == null)
					{
						instance.hungerAboveData = HungerAboveAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						HungerAboveAIEventData.DeserializeLengthDelimited(stream, instance.hungerAboveData, isDelta);
					}
				}
				break;
			case 105u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.tirednessAboveData == null)
					{
						instance.tirednessAboveData = TirednessAboveAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						TirednessAboveAIEventData.DeserializeLengthDelimited(stream, instance.tirednessAboveData, isDelta);
					}
				}
				break;
			case 106u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.threatDetectedData == null)
					{
						instance.threatDetectedData = ThreatDetectedAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						ThreatDetectedAIEventData.DeserializeLengthDelimited(stream, instance.threatDetectedData, isDelta);
					}
				}
				break;
			case 107u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.targetDetectedData == null)
					{
						instance.targetDetectedData = TargetDetectedAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						TargetDetectedAIEventData.DeserializeLengthDelimited(stream, instance.targetDetectedData, isDelta);
					}
				}
				break;
			case 108u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.ammoBelowData == null)
					{
						instance.ammoBelowData = AmmoBelowAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						AmmoBelowAIEventData.DeserializeLengthDelimited(stream, instance.ammoBelowData, isDelta);
					}
				}
				break;
			case 109u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.chanceData == null)
					{
						instance.chanceData = ChanceAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						ChanceAIEventData.DeserializeLengthDelimited(stream, instance.chanceData, isDelta);
					}
				}
				break;
			case 110u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.timeSinceThreatData == null)
					{
						instance.timeSinceThreatData = TimeSinceThreatAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						TimeSinceThreatAIEventData.DeserializeLengthDelimited(stream, instance.timeSinceThreatData, isDelta);
					}
				}
				break;
			case 111u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.aggressionTimerData == null)
					{
						instance.aggressionTimerData = AggressionTimerAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						AggressionTimerAIEventData.DeserializeLengthDelimited(stream, instance.aggressionTimerData, isDelta);
					}
				}
				break;
			case 112u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.inRangeOfHomeData == null)
					{
						instance.inRangeOfHomeData = InRangeOfHomeAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						InRangeOfHomeAIEventData.DeserializeLengthDelimited(stream, instance.inRangeOfHomeData, isDelta);
					}
				}
				break;
			default:
				ProtocolParser.SkipKey(stream, key);
				break;
			}
		}
	}

	public static AIEventData DeserializeLengthDelimited(Stream stream, AIEventData instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.eventType = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.triggerStateContainer = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.inverted = ProtocolParser.ReadBool(stream);
				continue;
			case 32:
				instance.inputMemorySlot = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.outputMemorySlot = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.id = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			switch (key.Field)
			{
			case 0u:
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			case 100u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.timerData == null)
					{
						instance.timerData = TimerAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						TimerAIEventData.DeserializeLengthDelimited(stream, instance.timerData, isDelta);
					}
				}
				break;
			case 101u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.playerDetectedData == null)
					{
						instance.playerDetectedData = PlayerDetectedAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						PlayerDetectedAIEventData.DeserializeLengthDelimited(stream, instance.playerDetectedData, isDelta);
					}
				}
				break;
			case 102u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.healthBelowData == null)
					{
						instance.healthBelowData = HealthBelowAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						HealthBelowAIEventData.DeserializeLengthDelimited(stream, instance.healthBelowData, isDelta);
					}
				}
				break;
			case 103u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.inRangeData == null)
					{
						instance.inRangeData = InRangeAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						InRangeAIEventData.DeserializeLengthDelimited(stream, instance.inRangeData, isDelta);
					}
				}
				break;
			case 104u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.hungerAboveData == null)
					{
						instance.hungerAboveData = HungerAboveAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						HungerAboveAIEventData.DeserializeLengthDelimited(stream, instance.hungerAboveData, isDelta);
					}
				}
				break;
			case 105u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.tirednessAboveData == null)
					{
						instance.tirednessAboveData = TirednessAboveAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						TirednessAboveAIEventData.DeserializeLengthDelimited(stream, instance.tirednessAboveData, isDelta);
					}
				}
				break;
			case 106u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.threatDetectedData == null)
					{
						instance.threatDetectedData = ThreatDetectedAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						ThreatDetectedAIEventData.DeserializeLengthDelimited(stream, instance.threatDetectedData, isDelta);
					}
				}
				break;
			case 107u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.targetDetectedData == null)
					{
						instance.targetDetectedData = TargetDetectedAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						TargetDetectedAIEventData.DeserializeLengthDelimited(stream, instance.targetDetectedData, isDelta);
					}
				}
				break;
			case 108u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.ammoBelowData == null)
					{
						instance.ammoBelowData = AmmoBelowAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						AmmoBelowAIEventData.DeserializeLengthDelimited(stream, instance.ammoBelowData, isDelta);
					}
				}
				break;
			case 109u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.chanceData == null)
					{
						instance.chanceData = ChanceAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						ChanceAIEventData.DeserializeLengthDelimited(stream, instance.chanceData, isDelta);
					}
				}
				break;
			case 110u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.timeSinceThreatData == null)
					{
						instance.timeSinceThreatData = TimeSinceThreatAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						TimeSinceThreatAIEventData.DeserializeLengthDelimited(stream, instance.timeSinceThreatData, isDelta);
					}
				}
				break;
			case 111u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.aggressionTimerData == null)
					{
						instance.aggressionTimerData = AggressionTimerAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						AggressionTimerAIEventData.DeserializeLengthDelimited(stream, instance.aggressionTimerData, isDelta);
					}
				}
				break;
			case 112u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.inRangeOfHomeData == null)
					{
						instance.inRangeOfHomeData = InRangeOfHomeAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						InRangeOfHomeAIEventData.DeserializeLengthDelimited(stream, instance.inRangeOfHomeData, isDelta);
					}
				}
				break;
			default:
				ProtocolParser.SkipKey(stream, key);
				break;
			}
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static AIEventData DeserializeLength(Stream stream, int length, AIEventData instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.eventType = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.triggerStateContainer = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.inverted = ProtocolParser.ReadBool(stream);
				continue;
			case 32:
				instance.inputMemorySlot = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.outputMemorySlot = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.id = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			switch (key.Field)
			{
			case 0u:
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			case 100u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.timerData == null)
					{
						instance.timerData = TimerAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						TimerAIEventData.DeserializeLengthDelimited(stream, instance.timerData, isDelta);
					}
				}
				break;
			case 101u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.playerDetectedData == null)
					{
						instance.playerDetectedData = PlayerDetectedAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						PlayerDetectedAIEventData.DeserializeLengthDelimited(stream, instance.playerDetectedData, isDelta);
					}
				}
				break;
			case 102u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.healthBelowData == null)
					{
						instance.healthBelowData = HealthBelowAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						HealthBelowAIEventData.DeserializeLengthDelimited(stream, instance.healthBelowData, isDelta);
					}
				}
				break;
			case 103u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.inRangeData == null)
					{
						instance.inRangeData = InRangeAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						InRangeAIEventData.DeserializeLengthDelimited(stream, instance.inRangeData, isDelta);
					}
				}
				break;
			case 104u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.hungerAboveData == null)
					{
						instance.hungerAboveData = HungerAboveAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						HungerAboveAIEventData.DeserializeLengthDelimited(stream, instance.hungerAboveData, isDelta);
					}
				}
				break;
			case 105u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.tirednessAboveData == null)
					{
						instance.tirednessAboveData = TirednessAboveAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						TirednessAboveAIEventData.DeserializeLengthDelimited(stream, instance.tirednessAboveData, isDelta);
					}
				}
				break;
			case 106u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.threatDetectedData == null)
					{
						instance.threatDetectedData = ThreatDetectedAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						ThreatDetectedAIEventData.DeserializeLengthDelimited(stream, instance.threatDetectedData, isDelta);
					}
				}
				break;
			case 107u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.targetDetectedData == null)
					{
						instance.targetDetectedData = TargetDetectedAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						TargetDetectedAIEventData.DeserializeLengthDelimited(stream, instance.targetDetectedData, isDelta);
					}
				}
				break;
			case 108u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.ammoBelowData == null)
					{
						instance.ammoBelowData = AmmoBelowAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						AmmoBelowAIEventData.DeserializeLengthDelimited(stream, instance.ammoBelowData, isDelta);
					}
				}
				break;
			case 109u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.chanceData == null)
					{
						instance.chanceData = ChanceAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						ChanceAIEventData.DeserializeLengthDelimited(stream, instance.chanceData, isDelta);
					}
				}
				break;
			case 110u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.timeSinceThreatData == null)
					{
						instance.timeSinceThreatData = TimeSinceThreatAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						TimeSinceThreatAIEventData.DeserializeLengthDelimited(stream, instance.timeSinceThreatData, isDelta);
					}
				}
				break;
			case 111u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.aggressionTimerData == null)
					{
						instance.aggressionTimerData = AggressionTimerAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						AggressionTimerAIEventData.DeserializeLengthDelimited(stream, instance.aggressionTimerData, isDelta);
					}
				}
				break;
			case 112u:
				if (key.WireType == Wire.LengthDelimited)
				{
					if (instance.inRangeOfHomeData == null)
					{
						instance.inRangeOfHomeData = InRangeOfHomeAIEventData.DeserializeLengthDelimited(stream);
					}
					else
					{
						InRangeOfHomeAIEventData.DeserializeLengthDelimited(stream, instance.inRangeOfHomeData, isDelta);
					}
				}
				break;
			default:
				ProtocolParser.SkipKey(stream, key);
				break;
			}
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, AIEventData instance, AIEventData previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.eventType != previous.eventType)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.eventType);
		}
		if (instance.triggerStateContainer != previous.triggerStateContainer)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.triggerStateContainer);
		}
		stream.WriteByte(24);
		ProtocolParser.WriteBool(stream, instance.inverted);
		if (instance.inputMemorySlot != previous.inputMemorySlot)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.inputMemorySlot);
		}
		if (instance.outputMemorySlot != previous.outputMemorySlot)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.outputMemorySlot);
		}
		if (instance.id != previous.id)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.id);
		}
		if (instance.timerData != null)
		{
			stream.WriteByte(162);
			stream.WriteByte(6);
			memoryStream.SetLength(0L);
			TimerAIEventData.SerializeDelta(memoryStream, instance.timerData, previous.timerData);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		if (instance.playerDetectedData != null)
		{
			stream.WriteByte(170);
			stream.WriteByte(6);
			memoryStream.SetLength(0L);
			PlayerDetectedAIEventData.SerializeDelta(memoryStream, instance.playerDetectedData, previous.playerDetectedData);
			uint num2 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
		}
		if (instance.healthBelowData != null)
		{
			stream.WriteByte(178);
			stream.WriteByte(6);
			memoryStream.SetLength(0L);
			HealthBelowAIEventData.SerializeDelta(memoryStream, instance.healthBelowData, previous.healthBelowData);
			uint num3 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num3);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num3);
		}
		if (instance.inRangeData != null)
		{
			stream.WriteByte(186);
			stream.WriteByte(6);
			memoryStream.SetLength(0L);
			InRangeAIEventData.SerializeDelta(memoryStream, instance.inRangeData, previous.inRangeData);
			uint num4 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num4);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num4);
		}
		if (instance.hungerAboveData != null)
		{
			stream.WriteByte(194);
			stream.WriteByte(6);
			memoryStream.SetLength(0L);
			HungerAboveAIEventData.SerializeDelta(memoryStream, instance.hungerAboveData, previous.hungerAboveData);
			uint num5 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num5);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num5);
		}
		if (instance.tirednessAboveData != null)
		{
			stream.WriteByte(202);
			stream.WriteByte(6);
			memoryStream.SetLength(0L);
			TirednessAboveAIEventData.SerializeDelta(memoryStream, instance.tirednessAboveData, previous.tirednessAboveData);
			uint num6 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num6);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num6);
		}
		if (instance.threatDetectedData != null)
		{
			stream.WriteByte(210);
			stream.WriteByte(6);
			memoryStream.SetLength(0L);
			ThreatDetectedAIEventData.SerializeDelta(memoryStream, instance.threatDetectedData, previous.threatDetectedData);
			uint num7 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num7);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num7);
		}
		if (instance.targetDetectedData != null)
		{
			stream.WriteByte(218);
			stream.WriteByte(6);
			memoryStream.SetLength(0L);
			TargetDetectedAIEventData.SerializeDelta(memoryStream, instance.targetDetectedData, previous.targetDetectedData);
			uint num8 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num8);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num8);
		}
		if (instance.ammoBelowData != null)
		{
			stream.WriteByte(226);
			stream.WriteByte(6);
			memoryStream.SetLength(0L);
			AmmoBelowAIEventData.SerializeDelta(memoryStream, instance.ammoBelowData, previous.ammoBelowData);
			uint num9 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num9);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num9);
		}
		if (instance.chanceData != null)
		{
			stream.WriteByte(234);
			stream.WriteByte(6);
			memoryStream.SetLength(0L);
			ChanceAIEventData.SerializeDelta(memoryStream, instance.chanceData, previous.chanceData);
			uint num10 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num10);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num10);
		}
		if (instance.timeSinceThreatData != null)
		{
			stream.WriteByte(242);
			stream.WriteByte(6);
			memoryStream.SetLength(0L);
			TimeSinceThreatAIEventData.SerializeDelta(memoryStream, instance.timeSinceThreatData, previous.timeSinceThreatData);
			uint num11 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num11);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num11);
		}
		if (instance.aggressionTimerData != null)
		{
			stream.WriteByte(250);
			stream.WriteByte(6);
			memoryStream.SetLength(0L);
			AggressionTimerAIEventData.SerializeDelta(memoryStream, instance.aggressionTimerData, previous.aggressionTimerData);
			uint num12 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num12);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num12);
		}
		if (instance.inRangeOfHomeData != null)
		{
			stream.WriteByte(130);
			stream.WriteByte(7);
			memoryStream.SetLength(0L);
			InRangeOfHomeAIEventData.SerializeDelta(memoryStream, instance.inRangeOfHomeData, previous.inRangeOfHomeData);
			uint num13 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num13);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num13);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, AIEventData instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.eventType != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.eventType);
		}
		if (instance.triggerStateContainer != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.triggerStateContainer);
		}
		if (instance.inverted)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteBool(stream, instance.inverted);
		}
		if (instance.inputMemorySlot != 0)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.inputMemorySlot);
		}
		if (instance.outputMemorySlot != 0)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.outputMemorySlot);
		}
		if (instance.id != 0)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.id);
		}
		if (instance.timerData != null)
		{
			stream.WriteByte(162);
			stream.WriteByte(6);
			memoryStream.SetLength(0L);
			TimerAIEventData.Serialize(memoryStream, instance.timerData);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		if (instance.playerDetectedData != null)
		{
			stream.WriteByte(170);
			stream.WriteByte(6);
			memoryStream.SetLength(0L);
			PlayerDetectedAIEventData.Serialize(memoryStream, instance.playerDetectedData);
			uint num2 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
		}
		if (instance.healthBelowData != null)
		{
			stream.WriteByte(178);
			stream.WriteByte(6);
			memoryStream.SetLength(0L);
			HealthBelowAIEventData.Serialize(memoryStream, instance.healthBelowData);
			uint num3 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num3);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num3);
		}
		if (instance.inRangeData != null)
		{
			stream.WriteByte(186);
			stream.WriteByte(6);
			memoryStream.SetLength(0L);
			InRangeAIEventData.Serialize(memoryStream, instance.inRangeData);
			uint num4 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num4);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num4);
		}
		if (instance.hungerAboveData != null)
		{
			stream.WriteByte(194);
			stream.WriteByte(6);
			memoryStream.SetLength(0L);
			HungerAboveAIEventData.Serialize(memoryStream, instance.hungerAboveData);
			uint num5 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num5);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num5);
		}
		if (instance.tirednessAboveData != null)
		{
			stream.WriteByte(202);
			stream.WriteByte(6);
			memoryStream.SetLength(0L);
			TirednessAboveAIEventData.Serialize(memoryStream, instance.tirednessAboveData);
			uint num6 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num6);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num6);
		}
		if (instance.threatDetectedData != null)
		{
			stream.WriteByte(210);
			stream.WriteByte(6);
			memoryStream.SetLength(0L);
			ThreatDetectedAIEventData.Serialize(memoryStream, instance.threatDetectedData);
			uint num7 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num7);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num7);
		}
		if (instance.targetDetectedData != null)
		{
			stream.WriteByte(218);
			stream.WriteByte(6);
			memoryStream.SetLength(0L);
			TargetDetectedAIEventData.Serialize(memoryStream, instance.targetDetectedData);
			uint num8 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num8);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num8);
		}
		if (instance.ammoBelowData != null)
		{
			stream.WriteByte(226);
			stream.WriteByte(6);
			memoryStream.SetLength(0L);
			AmmoBelowAIEventData.Serialize(memoryStream, instance.ammoBelowData);
			uint num9 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num9);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num9);
		}
		if (instance.chanceData != null)
		{
			stream.WriteByte(234);
			stream.WriteByte(6);
			memoryStream.SetLength(0L);
			ChanceAIEventData.Serialize(memoryStream, instance.chanceData);
			uint num10 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num10);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num10);
		}
		if (instance.timeSinceThreatData != null)
		{
			stream.WriteByte(242);
			stream.WriteByte(6);
			memoryStream.SetLength(0L);
			TimeSinceThreatAIEventData.Serialize(memoryStream, instance.timeSinceThreatData);
			uint num11 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num11);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num11);
		}
		if (instance.aggressionTimerData != null)
		{
			stream.WriteByte(250);
			stream.WriteByte(6);
			memoryStream.SetLength(0L);
			AggressionTimerAIEventData.Serialize(memoryStream, instance.aggressionTimerData);
			uint num12 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num12);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num12);
		}
		if (instance.inRangeOfHomeData != null)
		{
			stream.WriteByte(130);
			stream.WriteByte(7);
			memoryStream.SetLength(0L);
			InRangeOfHomeAIEventData.Serialize(memoryStream, instance.inRangeOfHomeData);
			uint num13 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num13);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num13);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(AIEventData instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, AIEventData instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		timerData?.InspectUids(action);
		playerDetectedData?.InspectUids(action);
		healthBelowData?.InspectUids(action);
		inRangeData?.InspectUids(action);
		hungerAboveData?.InspectUids(action);
		tirednessAboveData?.InspectUids(action);
		threatDetectedData?.InspectUids(action);
		targetDetectedData?.InspectUids(action);
		ammoBelowData?.InspectUids(action);
		chanceData?.InspectUids(action);
		timeSinceThreatData?.InspectUids(action);
		aggressionTimerData?.InspectUids(action);
		inRangeOfHomeData?.InspectUids(action);
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class TimerAIEventData : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public float duration;

	[NonSerialized]
	public float durationMax;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(TimerAIEventData instance)
	{
		if (instance.ShouldPool)
		{
			instance.duration = 0f;
			instance.durationMax = 0f;
			Pool.Free<TimerAIEventData>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose TimerAIEventData with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(TimerAIEventData instance)
	{
		instance.duration = duration;
		instance.durationMax = durationMax;
	}

	public TimerAIEventData Copy()
	{
		TimerAIEventData timerAIEventData = Pool.Get<TimerAIEventData>();
		CopyTo(timerAIEventData);
		return timerAIEventData;
	}

	public static TimerAIEventData Deserialize(Stream stream)
	{
		TimerAIEventData timerAIEventData = Pool.Get<TimerAIEventData>();
		Deserialize(stream, timerAIEventData, isDelta: false);
		return timerAIEventData;
	}

	public static TimerAIEventData DeserializeLengthDelimited(Stream stream)
	{
		TimerAIEventData timerAIEventData = Pool.Get<TimerAIEventData>();
		DeserializeLengthDelimited(stream, timerAIEventData, isDelta: false);
		return timerAIEventData;
	}

	public static TimerAIEventData DeserializeLength(Stream stream, int length)
	{
		TimerAIEventData timerAIEventData = Pool.Get<TimerAIEventData>();
		DeserializeLength(stream, length, timerAIEventData, isDelta: false);
		return timerAIEventData;
	}

	public static TimerAIEventData Deserialize(byte[] buffer)
	{
		TimerAIEventData timerAIEventData = Pool.Get<TimerAIEventData>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, timerAIEventData, isDelta: false);
		return timerAIEventData;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, TimerAIEventData previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static TimerAIEventData Deserialize(byte[] buffer, TimerAIEventData instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static TimerAIEventData Deserialize(Stream stream, TimerAIEventData instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 13:
				instance.duration = ProtocolParser.ReadSingle(stream);
				continue;
			case 21:
				instance.durationMax = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static TimerAIEventData DeserializeLengthDelimited(Stream stream, TimerAIEventData instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.duration = ProtocolParser.ReadSingle(stream);
				continue;
			case 21:
				instance.durationMax = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static TimerAIEventData DeserializeLength(Stream stream, int length, TimerAIEventData instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.duration = ProtocolParser.ReadSingle(stream);
				continue;
			case 21:
				instance.durationMax = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, TimerAIEventData instance, TimerAIEventData previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.duration != previous.duration)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.duration);
		}
		if (instance.durationMax != previous.durationMax)
		{
			stream.WriteByte(21);
			ProtocolParser.WriteSingle(stream, instance.durationMax);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, TimerAIEventData instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.duration != 0f)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.duration);
		}
		if (instance.durationMax != 0f)
		{
			stream.WriteByte(21);
			ProtocolParser.WriteSingle(stream, instance.durationMax);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(TimerAIEventData instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, TimerAIEventData instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class PlayerDetectedAIEventData : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public float range;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(PlayerDetectedAIEventData instance)
	{
		if (instance.ShouldPool)
		{
			instance.range = 0f;
			Pool.Free<PlayerDetectedAIEventData>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose PlayerDetectedAIEventData with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(PlayerDetectedAIEventData instance)
	{
		instance.range = range;
	}

	public PlayerDetectedAIEventData Copy()
	{
		PlayerDetectedAIEventData playerDetectedAIEventData = Pool.Get<PlayerDetectedAIEventData>();
		CopyTo(playerDetectedAIEventData);
		return playerDetectedAIEventData;
	}

	public static PlayerDetectedAIEventData Deserialize(Stream stream)
	{
		PlayerDetectedAIEventData playerDetectedAIEventData = Pool.Get<PlayerDetectedAIEventData>();
		Deserialize(stream, playerDetectedAIEventData, isDelta: false);
		return playerDetectedAIEventData;
	}

	public static PlayerDetectedAIEventData DeserializeLengthDelimited(Stream stream)
	{
		PlayerDetectedAIEventData playerDetectedAIEventData = Pool.Get<PlayerDetectedAIEventData>();
		DeserializeLengthDelimited(stream, playerDetectedAIEventData, isDelta: false);
		return playerDetectedAIEventData;
	}

	public static PlayerDetectedAIEventData DeserializeLength(Stream stream, int length)
	{
		PlayerDetectedAIEventData playerDetectedAIEventData = Pool.Get<PlayerDetectedAIEventData>();
		DeserializeLength(stream, length, playerDetectedAIEventData, isDelta: false);
		return playerDetectedAIEventData;
	}

	public static PlayerDetectedAIEventData Deserialize(byte[] buffer)
	{
		PlayerDetectedAIEventData playerDetectedAIEventData = Pool.Get<PlayerDetectedAIEventData>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, playerDetectedAIEventData, isDelta: false);
		return playerDetectedAIEventData;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, PlayerDetectedAIEventData previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static PlayerDetectedAIEventData Deserialize(byte[] buffer, PlayerDetectedAIEventData instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static PlayerDetectedAIEventData Deserialize(Stream stream, PlayerDetectedAIEventData instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 13:
				instance.range = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static PlayerDetectedAIEventData DeserializeLengthDelimited(Stream stream, PlayerDetectedAIEventData instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.range = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static PlayerDetectedAIEventData DeserializeLength(Stream stream, int length, PlayerDetectedAIEventData instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.range = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, PlayerDetectedAIEventData instance, PlayerDetectedAIEventData previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.range != previous.range)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.range);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, PlayerDetectedAIEventData instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.range != 0f)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.range);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(PlayerDetectedAIEventData instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, PlayerDetectedAIEventData instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class HealthBelowAIEventData : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public float healthFraction;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(HealthBelowAIEventData instance)
	{
		if (instance.ShouldPool)
		{
			instance.healthFraction = 0f;
			Pool.Free<HealthBelowAIEventData>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose HealthBelowAIEventData with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(HealthBelowAIEventData instance)
	{
		instance.healthFraction = healthFraction;
	}

	public HealthBelowAIEventData Copy()
	{
		HealthBelowAIEventData healthBelowAIEventData = Pool.Get<HealthBelowAIEventData>();
		CopyTo(healthBelowAIEventData);
		return healthBelowAIEventData;
	}

	public static HealthBelowAIEventData Deserialize(Stream stream)
	{
		HealthBelowAIEventData healthBelowAIEventData = Pool.Get<HealthBelowAIEventData>();
		Deserialize(stream, healthBelowAIEventData, isDelta: false);
		return healthBelowAIEventData;
	}

	public static HealthBelowAIEventData DeserializeLengthDelimited(Stream stream)
	{
		HealthBelowAIEventData healthBelowAIEventData = Pool.Get<HealthBelowAIEventData>();
		DeserializeLengthDelimited(stream, healthBelowAIEventData, isDelta: false);
		return healthBelowAIEventData;
	}

	public static HealthBelowAIEventData DeserializeLength(Stream stream, int length)
	{
		HealthBelowAIEventData healthBelowAIEventData = Pool.Get<HealthBelowAIEventData>();
		DeserializeLength(stream, length, healthBelowAIEventData, isDelta: false);
		return healthBelowAIEventData;
	}

	public static HealthBelowAIEventData Deserialize(byte[] buffer)
	{
		HealthBelowAIEventData healthBelowAIEventData = Pool.Get<HealthBelowAIEventData>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, healthBelowAIEventData, isDelta: false);
		return healthBelowAIEventData;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, HealthBelowAIEventData previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static HealthBelowAIEventData Deserialize(byte[] buffer, HealthBelowAIEventData instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static HealthBelowAIEventData Deserialize(Stream stream, HealthBelowAIEventData instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 13:
				instance.healthFraction = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static HealthBelowAIEventData DeserializeLengthDelimited(Stream stream, HealthBelowAIEventData instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.healthFraction = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static HealthBelowAIEventData DeserializeLength(Stream stream, int length, HealthBelowAIEventData instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.healthFraction = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, HealthBelowAIEventData instance, HealthBelowAIEventData previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.healthFraction != previous.healthFraction)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.healthFraction);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, HealthBelowAIEventData instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.healthFraction != 0f)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.healthFraction);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(HealthBelowAIEventData instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, HealthBelowAIEventData instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class InRangeAIEventData : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public float range;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(InRangeAIEventData instance)
	{
		if (instance.ShouldPool)
		{
			instance.range = 0f;
			Pool.Free<InRangeAIEventData>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose InRangeAIEventData with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(InRangeAIEventData instance)
	{
		instance.range = range;
	}

	public InRangeAIEventData Copy()
	{
		InRangeAIEventData inRangeAIEventData = Pool.Get<InRangeAIEventData>();
		CopyTo(inRangeAIEventData);
		return inRangeAIEventData;
	}

	public static InRangeAIEventData Deserialize(Stream stream)
	{
		InRangeAIEventData inRangeAIEventData = Pool.Get<InRangeAIEventData>();
		Deserialize(stream, inRangeAIEventData, isDelta: false);
		return inRangeAIEventData;
	}

	public static InRangeAIEventData DeserializeLengthDelimited(Stream stream)
	{
		InRangeAIEventData inRangeAIEventData = Pool.Get<InRangeAIEventData>();
		DeserializeLengthDelimited(stream, inRangeAIEventData, isDelta: false);
		return inRangeAIEventData;
	}

	public static InRangeAIEventData DeserializeLength(Stream stream, int length)
	{
		InRangeAIEventData inRangeAIEventData = Pool.Get<InRangeAIEventData>();
		DeserializeLength(stream, length, inRangeAIEventData, isDelta: false);
		return inRangeAIEventData;
	}

	public static InRangeAIEventData Deserialize(byte[] buffer)
	{
		InRangeAIEventData inRangeAIEventData = Pool.Get<InRangeAIEventData>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, inRangeAIEventData, isDelta: false);
		return inRangeAIEventData;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, InRangeAIEventData previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static InRangeAIEventData Deserialize(byte[] buffer, InRangeAIEventData instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static InRangeAIEventData Deserialize(Stream stream, InRangeAIEventData instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 13:
				instance.range = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static InRangeAIEventData DeserializeLengthDelimited(Stream stream, InRangeAIEventData instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.range = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static InRangeAIEventData DeserializeLength(Stream stream, int length, InRangeAIEventData instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.range = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, InRangeAIEventData instance, InRangeAIEventData previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.range != previous.range)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.range);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, InRangeAIEventData instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.range != 0f)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.range);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(InRangeAIEventData instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, InRangeAIEventData instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class HungerAboveAIEventData : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public float value;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(HungerAboveAIEventData instance)
	{
		if (instance.ShouldPool)
		{
			instance.value = 0f;
			Pool.Free<HungerAboveAIEventData>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose HungerAboveAIEventData with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(HungerAboveAIEventData instance)
	{
		instance.value = value;
	}

	public HungerAboveAIEventData Copy()
	{
		HungerAboveAIEventData hungerAboveAIEventData = Pool.Get<HungerAboveAIEventData>();
		CopyTo(hungerAboveAIEventData);
		return hungerAboveAIEventData;
	}

	public static HungerAboveAIEventData Deserialize(Stream stream)
	{
		HungerAboveAIEventData hungerAboveAIEventData = Pool.Get<HungerAboveAIEventData>();
		Deserialize(stream, hungerAboveAIEventData, isDelta: false);
		return hungerAboveAIEventData;
	}

	public static HungerAboveAIEventData DeserializeLengthDelimited(Stream stream)
	{
		HungerAboveAIEventData hungerAboveAIEventData = Pool.Get<HungerAboveAIEventData>();
		DeserializeLengthDelimited(stream, hungerAboveAIEventData, isDelta: false);
		return hungerAboveAIEventData;
	}

	public static HungerAboveAIEventData DeserializeLength(Stream stream, int length)
	{
		HungerAboveAIEventData hungerAboveAIEventData = Pool.Get<HungerAboveAIEventData>();
		DeserializeLength(stream, length, hungerAboveAIEventData, isDelta: false);
		return hungerAboveAIEventData;
	}

	public static HungerAboveAIEventData Deserialize(byte[] buffer)
	{
		HungerAboveAIEventData hungerAboveAIEventData = Pool.Get<HungerAboveAIEventData>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, hungerAboveAIEventData, isDelta: false);
		return hungerAboveAIEventData;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, HungerAboveAIEventData previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static HungerAboveAIEventData Deserialize(byte[] buffer, HungerAboveAIEventData instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static HungerAboveAIEventData Deserialize(Stream stream, HungerAboveAIEventData instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 13:
				instance.value = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static HungerAboveAIEventData DeserializeLengthDelimited(Stream stream, HungerAboveAIEventData instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.value = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static HungerAboveAIEventData DeserializeLength(Stream stream, int length, HungerAboveAIEventData instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.value = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, HungerAboveAIEventData instance, HungerAboveAIEventData previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.value != previous.value)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.value);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, HungerAboveAIEventData instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.value != 0f)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.value);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(HungerAboveAIEventData instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, HungerAboveAIEventData instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class TirednessAboveAIEventData : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public float value;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(TirednessAboveAIEventData instance)
	{
		if (instance.ShouldPool)
		{
			instance.value = 0f;
			Pool.Free<TirednessAboveAIEventData>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose TirednessAboveAIEventData with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(TirednessAboveAIEventData instance)
	{
		instance.value = value;
	}

	public TirednessAboveAIEventData Copy()
	{
		TirednessAboveAIEventData tirednessAboveAIEventData = Pool.Get<TirednessAboveAIEventData>();
		CopyTo(tirednessAboveAIEventData);
		return tirednessAboveAIEventData;
	}

	public static TirednessAboveAIEventData Deserialize(Stream stream)
	{
		TirednessAboveAIEventData tirednessAboveAIEventData = Pool.Get<TirednessAboveAIEventData>();
		Deserialize(stream, tirednessAboveAIEventData, isDelta: false);
		return tirednessAboveAIEventData;
	}

	public static TirednessAboveAIEventData DeserializeLengthDelimited(Stream stream)
	{
		TirednessAboveAIEventData tirednessAboveAIEventData = Pool.Get<TirednessAboveAIEventData>();
		DeserializeLengthDelimited(stream, tirednessAboveAIEventData, isDelta: false);
		return tirednessAboveAIEventData;
	}

	public static TirednessAboveAIEventData DeserializeLength(Stream stream, int length)
	{
		TirednessAboveAIEventData tirednessAboveAIEventData = Pool.Get<TirednessAboveAIEventData>();
		DeserializeLength(stream, length, tirednessAboveAIEventData, isDelta: false);
		return tirednessAboveAIEventData;
	}

	public static TirednessAboveAIEventData Deserialize(byte[] buffer)
	{
		TirednessAboveAIEventData tirednessAboveAIEventData = Pool.Get<TirednessAboveAIEventData>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, tirednessAboveAIEventData, isDelta: false);
		return tirednessAboveAIEventData;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, TirednessAboveAIEventData previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static TirednessAboveAIEventData Deserialize(byte[] buffer, TirednessAboveAIEventData instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static TirednessAboveAIEventData Deserialize(Stream stream, TirednessAboveAIEventData instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 13:
				instance.value = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static TirednessAboveAIEventData DeserializeLengthDelimited(Stream stream, TirednessAboveAIEventData instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.value = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static TirednessAboveAIEventData DeserializeLength(Stream stream, int length, TirednessAboveAIEventData instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.value = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, TirednessAboveAIEventData instance, TirednessAboveAIEventData previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.value != previous.value)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.value);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, TirednessAboveAIEventData instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.value != 0f)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.value);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(TirednessAboveAIEventData instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, TirednessAboveAIEventData instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class AmmoBelowAIEventData : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public float value;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(AmmoBelowAIEventData instance)
	{
		if (instance.ShouldPool)
		{
			instance.value = 0f;
			Pool.Free<AmmoBelowAIEventData>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose AmmoBelowAIEventData with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(AmmoBelowAIEventData instance)
	{
		instance.value = value;
	}

	public AmmoBelowAIEventData Copy()
	{
		AmmoBelowAIEventData ammoBelowAIEventData = Pool.Get<AmmoBelowAIEventData>();
		CopyTo(ammoBelowAIEventData);
		return ammoBelowAIEventData;
	}

	public static AmmoBelowAIEventData Deserialize(Stream stream)
	{
		AmmoBelowAIEventData ammoBelowAIEventData = Pool.Get<AmmoBelowAIEventData>();
		Deserialize(stream, ammoBelowAIEventData, isDelta: false);
		return ammoBelowAIEventData;
	}

	public static AmmoBelowAIEventData DeserializeLengthDelimited(Stream stream)
	{
		AmmoBelowAIEventData ammoBelowAIEventData = Pool.Get<AmmoBelowAIEventData>();
		DeserializeLengthDelimited(stream, ammoBelowAIEventData, isDelta: false);
		return ammoBelowAIEventData;
	}

	public static AmmoBelowAIEventData DeserializeLength(Stream stream, int length)
	{
		AmmoBelowAIEventData ammoBelowAIEventData = Pool.Get<AmmoBelowAIEventData>();
		DeserializeLength(stream, length, ammoBelowAIEventData, isDelta: false);
		return ammoBelowAIEventData;
	}

	public static AmmoBelowAIEventData Deserialize(byte[] buffer)
	{
		AmmoBelowAIEventData ammoBelowAIEventData = Pool.Get<AmmoBelowAIEventData>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, ammoBelowAIEventData, isDelta: false);
		return ammoBelowAIEventData;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, AmmoBelowAIEventData previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static AmmoBelowAIEventData Deserialize(byte[] buffer, AmmoBelowAIEventData instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static AmmoBelowAIEventData Deserialize(Stream stream, AmmoBelowAIEventData instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 13:
				instance.value = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static AmmoBelowAIEventData DeserializeLengthDelimited(Stream stream, AmmoBelowAIEventData instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.value = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static AmmoBelowAIEventData DeserializeLength(Stream stream, int length, AmmoBelowAIEventData instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.value = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, AmmoBelowAIEventData instance, AmmoBelowAIEventData previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.value != previous.value)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.value);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, AmmoBelowAIEventData instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.value != 0f)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.value);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(AmmoBelowAIEventData instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, AmmoBelowAIEventData instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class ThreatDetectedAIEventData : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public float range;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(ThreatDetectedAIEventData instance)
	{
		if (instance.ShouldPool)
		{
			instance.range = 0f;
			Pool.Free<ThreatDetectedAIEventData>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose ThreatDetectedAIEventData with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(ThreatDetectedAIEventData instance)
	{
		instance.range = range;
	}

	public ThreatDetectedAIEventData Copy()
	{
		ThreatDetectedAIEventData threatDetectedAIEventData = Pool.Get<ThreatDetectedAIEventData>();
		CopyTo(threatDetectedAIEventData);
		return threatDetectedAIEventData;
	}

	public static ThreatDetectedAIEventData Deserialize(Stream stream)
	{
		ThreatDetectedAIEventData threatDetectedAIEventData = Pool.Get<ThreatDetectedAIEventData>();
		Deserialize(stream, threatDetectedAIEventData, isDelta: false);
		return threatDetectedAIEventData;
	}

	public static ThreatDetectedAIEventData DeserializeLengthDelimited(Stream stream)
	{
		ThreatDetectedAIEventData threatDetectedAIEventData = Pool.Get<ThreatDetectedAIEventData>();
		DeserializeLengthDelimited(stream, threatDetectedAIEventData, isDelta: false);
		return threatDetectedAIEventData;
	}

	public static ThreatDetectedAIEventData DeserializeLength(Stream stream, int length)
	{
		ThreatDetectedAIEventData threatDetectedAIEventData = Pool.Get<ThreatDetectedAIEventData>();
		DeserializeLength(stream, length, threatDetectedAIEventData, isDelta: false);
		return threatDetectedAIEventData;
	}

	public static ThreatDetectedAIEventData Deserialize(byte[] buffer)
	{
		ThreatDetectedAIEventData threatDetectedAIEventData = Pool.Get<ThreatDetectedAIEventData>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, threatDetectedAIEventData, isDelta: false);
		return threatDetectedAIEventData;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, ThreatDetectedAIEventData previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static ThreatDetectedAIEventData Deserialize(byte[] buffer, ThreatDetectedAIEventData instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static ThreatDetectedAIEventData Deserialize(Stream stream, ThreatDetectedAIEventData instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 13:
				instance.range = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static ThreatDetectedAIEventData DeserializeLengthDelimited(Stream stream, ThreatDetectedAIEventData instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.range = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static ThreatDetectedAIEventData DeserializeLength(Stream stream, int length, ThreatDetectedAIEventData instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.range = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, ThreatDetectedAIEventData instance, ThreatDetectedAIEventData previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.range != previous.range)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.range);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, ThreatDetectedAIEventData instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.range != 0f)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.range);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(ThreatDetectedAIEventData instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, ThreatDetectedAIEventData instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class TargetDetectedAIEventData : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public float range;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(TargetDetectedAIEventData instance)
	{
		if (instance.ShouldPool)
		{
			instance.range = 0f;
			Pool.Free<TargetDetectedAIEventData>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose TargetDetectedAIEventData with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(TargetDetectedAIEventData instance)
	{
		instance.range = range;
	}

	public TargetDetectedAIEventData Copy()
	{
		TargetDetectedAIEventData targetDetectedAIEventData = Pool.Get<TargetDetectedAIEventData>();
		CopyTo(targetDetectedAIEventData);
		return targetDetectedAIEventData;
	}

	public static TargetDetectedAIEventData Deserialize(Stream stream)
	{
		TargetDetectedAIEventData targetDetectedAIEventData = Pool.Get<TargetDetectedAIEventData>();
		Deserialize(stream, targetDetectedAIEventData, isDelta: false);
		return targetDetectedAIEventData;
	}

	public static TargetDetectedAIEventData DeserializeLengthDelimited(Stream stream)
	{
		TargetDetectedAIEventData targetDetectedAIEventData = Pool.Get<TargetDetectedAIEventData>();
		DeserializeLengthDelimited(stream, targetDetectedAIEventData, isDelta: false);
		return targetDetectedAIEventData;
	}

	public static TargetDetectedAIEventData DeserializeLength(Stream stream, int length)
	{
		TargetDetectedAIEventData targetDetectedAIEventData = Pool.Get<TargetDetectedAIEventData>();
		DeserializeLength(stream, length, targetDetectedAIEventData, isDelta: false);
		return targetDetectedAIEventData;
	}

	public static TargetDetectedAIEventData Deserialize(byte[] buffer)
	{
		TargetDetectedAIEventData targetDetectedAIEventData = Pool.Get<TargetDetectedAIEventData>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, targetDetectedAIEventData, isDelta: false);
		return targetDetectedAIEventData;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, TargetDetectedAIEventData previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static TargetDetectedAIEventData Deserialize(byte[] buffer, TargetDetectedAIEventData instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static TargetDetectedAIEventData Deserialize(Stream stream, TargetDetectedAIEventData instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 13:
				instance.range = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static TargetDetectedAIEventData DeserializeLengthDelimited(Stream stream, TargetDetectedAIEventData instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.range = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static TargetDetectedAIEventData DeserializeLength(Stream stream, int length, TargetDetectedAIEventData instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.range = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, TargetDetectedAIEventData instance, TargetDetectedAIEventData previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.range != previous.range)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.range);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, TargetDetectedAIEventData instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.range != 0f)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.range);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(TargetDetectedAIEventData instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, TargetDetectedAIEventData instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class ChanceAIEventData : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public float value;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(ChanceAIEventData instance)
	{
		if (instance.ShouldPool)
		{
			instance.value = 0f;
			Pool.Free<ChanceAIEventData>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose ChanceAIEventData with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(ChanceAIEventData instance)
	{
		instance.value = value;
	}

	public ChanceAIEventData Copy()
	{
		ChanceAIEventData chanceAIEventData = Pool.Get<ChanceAIEventData>();
		CopyTo(chanceAIEventData);
		return chanceAIEventData;
	}

	public static ChanceAIEventData Deserialize(Stream stream)
	{
		ChanceAIEventData chanceAIEventData = Pool.Get<ChanceAIEventData>();
		Deserialize(stream, chanceAIEventData, isDelta: false);
		return chanceAIEventData;
	}

	public static ChanceAIEventData DeserializeLengthDelimited(Stream stream)
	{
		ChanceAIEventData chanceAIEventData = Pool.Get<ChanceAIEventData>();
		DeserializeLengthDelimited(stream, chanceAIEventData, isDelta: false);
		return chanceAIEventData;
	}

	public static ChanceAIEventData DeserializeLength(Stream stream, int length)
	{
		ChanceAIEventData chanceAIEventData = Pool.Get<ChanceAIEventData>();
		DeserializeLength(stream, length, chanceAIEventData, isDelta: false);
		return chanceAIEventData;
	}

	public static ChanceAIEventData Deserialize(byte[] buffer)
	{
		ChanceAIEventData chanceAIEventData = Pool.Get<ChanceAIEventData>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, chanceAIEventData, isDelta: false);
		return chanceAIEventData;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, ChanceAIEventData previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static ChanceAIEventData Deserialize(byte[] buffer, ChanceAIEventData instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static ChanceAIEventData Deserialize(Stream stream, ChanceAIEventData instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 13:
				instance.value = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static ChanceAIEventData DeserializeLengthDelimited(Stream stream, ChanceAIEventData instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.value = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static ChanceAIEventData DeserializeLength(Stream stream, int length, ChanceAIEventData instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.value = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, ChanceAIEventData instance, ChanceAIEventData previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.value != previous.value)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.value);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, ChanceAIEventData instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.value != 0f)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.value);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(ChanceAIEventData instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, ChanceAIEventData instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class TimeSinceThreatAIEventData : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public float value;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(TimeSinceThreatAIEventData instance)
	{
		if (instance.ShouldPool)
		{
			instance.value = 0f;
			Pool.Free<TimeSinceThreatAIEventData>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose TimeSinceThreatAIEventData with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(TimeSinceThreatAIEventData instance)
	{
		instance.value = value;
	}

	public TimeSinceThreatAIEventData Copy()
	{
		TimeSinceThreatAIEventData timeSinceThreatAIEventData = Pool.Get<TimeSinceThreatAIEventData>();
		CopyTo(timeSinceThreatAIEventData);
		return timeSinceThreatAIEventData;
	}

	public static TimeSinceThreatAIEventData Deserialize(Stream stream)
	{
		TimeSinceThreatAIEventData timeSinceThreatAIEventData = Pool.Get<TimeSinceThreatAIEventData>();
		Deserialize(stream, timeSinceThreatAIEventData, isDelta: false);
		return timeSinceThreatAIEventData;
	}

	public static TimeSinceThreatAIEventData DeserializeLengthDelimited(Stream stream)
	{
		TimeSinceThreatAIEventData timeSinceThreatAIEventData = Pool.Get<TimeSinceThreatAIEventData>();
		DeserializeLengthDelimited(stream, timeSinceThreatAIEventData, isDelta: false);
		return timeSinceThreatAIEventData;
	}

	public static TimeSinceThreatAIEventData DeserializeLength(Stream stream, int length)
	{
		TimeSinceThreatAIEventData timeSinceThreatAIEventData = Pool.Get<TimeSinceThreatAIEventData>();
		DeserializeLength(stream, length, timeSinceThreatAIEventData, isDelta: false);
		return timeSinceThreatAIEventData;
	}

	public static TimeSinceThreatAIEventData Deserialize(byte[] buffer)
	{
		TimeSinceThreatAIEventData timeSinceThreatAIEventData = Pool.Get<TimeSinceThreatAIEventData>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, timeSinceThreatAIEventData, isDelta: false);
		return timeSinceThreatAIEventData;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, TimeSinceThreatAIEventData previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static TimeSinceThreatAIEventData Deserialize(byte[] buffer, TimeSinceThreatAIEventData instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static TimeSinceThreatAIEventData Deserialize(Stream stream, TimeSinceThreatAIEventData instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 13:
				instance.value = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static TimeSinceThreatAIEventData DeserializeLengthDelimited(Stream stream, TimeSinceThreatAIEventData instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.value = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static TimeSinceThreatAIEventData DeserializeLength(Stream stream, int length, TimeSinceThreatAIEventData instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.value = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, TimeSinceThreatAIEventData instance, TimeSinceThreatAIEventData previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.value != previous.value)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.value);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, TimeSinceThreatAIEventData instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.value != 0f)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.value);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(TimeSinceThreatAIEventData instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, TimeSinceThreatAIEventData instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class AggressionTimerAIEventData : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public float value;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(AggressionTimerAIEventData instance)
	{
		if (instance.ShouldPool)
		{
			instance.value = 0f;
			Pool.Free<AggressionTimerAIEventData>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose AggressionTimerAIEventData with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(AggressionTimerAIEventData instance)
	{
		instance.value = value;
	}

	public AggressionTimerAIEventData Copy()
	{
		AggressionTimerAIEventData aggressionTimerAIEventData = Pool.Get<AggressionTimerAIEventData>();
		CopyTo(aggressionTimerAIEventData);
		return aggressionTimerAIEventData;
	}

	public static AggressionTimerAIEventData Deserialize(Stream stream)
	{
		AggressionTimerAIEventData aggressionTimerAIEventData = Pool.Get<AggressionTimerAIEventData>();
		Deserialize(stream, aggressionTimerAIEventData, isDelta: false);
		return aggressionTimerAIEventData;
	}

	public static AggressionTimerAIEventData DeserializeLengthDelimited(Stream stream)
	{
		AggressionTimerAIEventData aggressionTimerAIEventData = Pool.Get<AggressionTimerAIEventData>();
		DeserializeLengthDelimited(stream, aggressionTimerAIEventData, isDelta: false);
		return aggressionTimerAIEventData;
	}

	public static AggressionTimerAIEventData DeserializeLength(Stream stream, int length)
	{
		AggressionTimerAIEventData aggressionTimerAIEventData = Pool.Get<AggressionTimerAIEventData>();
		DeserializeLength(stream, length, aggressionTimerAIEventData, isDelta: false);
		return aggressionTimerAIEventData;
	}

	public static AggressionTimerAIEventData Deserialize(byte[] buffer)
	{
		AggressionTimerAIEventData aggressionTimerAIEventData = Pool.Get<AggressionTimerAIEventData>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, aggressionTimerAIEventData, isDelta: false);
		return aggressionTimerAIEventData;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, AggressionTimerAIEventData previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static AggressionTimerAIEventData Deserialize(byte[] buffer, AggressionTimerAIEventData instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static AggressionTimerAIEventData Deserialize(Stream stream, AggressionTimerAIEventData instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 13:
				instance.value = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static AggressionTimerAIEventData DeserializeLengthDelimited(Stream stream, AggressionTimerAIEventData instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.value = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static AggressionTimerAIEventData DeserializeLength(Stream stream, int length, AggressionTimerAIEventData instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.value = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, AggressionTimerAIEventData instance, AggressionTimerAIEventData previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.value != previous.value)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.value);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, AggressionTimerAIEventData instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.value != 0f)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.value);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(AggressionTimerAIEventData instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, AggressionTimerAIEventData instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class MemoryBank : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public int type;

	[NonSerialized]
	public int slotCount;

	[NonSerialized]
	public List<int> slots;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(MemoryBank instance)
	{
		if (instance.ShouldPool)
		{
			instance.type = 0;
			instance.slotCount = 0;
			if (instance.slots != null)
			{
				List<int> list = instance.slots;
				Pool.FreeUnmanaged<int>(ref list);
				instance.slots = list;
			}
			Pool.Free<MemoryBank>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose MemoryBank with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(MemoryBank instance)
	{
		instance.type = type;
		instance.slotCount = slotCount;
		if (slots != null)
		{
			instance.slots = Pool.Get<List<int>>();
			for (int i = 0; i < slots.Count; i++)
			{
				int item = slots[i];
				instance.slots.Add(item);
			}
		}
		else
		{
			instance.slots = null;
		}
	}

	public MemoryBank Copy()
	{
		MemoryBank memoryBank = Pool.Get<MemoryBank>();
		CopyTo(memoryBank);
		return memoryBank;
	}

	public static MemoryBank Deserialize(Stream stream)
	{
		MemoryBank memoryBank = Pool.Get<MemoryBank>();
		Deserialize(stream, memoryBank, isDelta: false);
		return memoryBank;
	}

	public static MemoryBank DeserializeLengthDelimited(Stream stream)
	{
		MemoryBank memoryBank = Pool.Get<MemoryBank>();
		DeserializeLengthDelimited(stream, memoryBank, isDelta: false);
		return memoryBank;
	}

	public static MemoryBank DeserializeLength(Stream stream, int length)
	{
		MemoryBank memoryBank = Pool.Get<MemoryBank>();
		DeserializeLength(stream, length, memoryBank, isDelta: false);
		return memoryBank;
	}

	public static MemoryBank Deserialize(byte[] buffer)
	{
		MemoryBank memoryBank = Pool.Get<MemoryBank>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, memoryBank, isDelta: false);
		return memoryBank;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, MemoryBank previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static MemoryBank Deserialize(byte[] buffer, MemoryBank instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static MemoryBank Deserialize(Stream stream, MemoryBank instance, bool isDelta)
	{
		if (!isDelta && instance.slots == null)
		{
			instance.slots = Pool.Get<List<int>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.type = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.slotCount = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.slots.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static MemoryBank DeserializeLengthDelimited(Stream stream, MemoryBank instance, bool isDelta)
	{
		if (!isDelta && instance.slots == null)
		{
			instance.slots = Pool.Get<List<int>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.type = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.slotCount = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.slots.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static MemoryBank DeserializeLength(Stream stream, int length, MemoryBank instance, bool isDelta)
	{
		if (!isDelta && instance.slots == null)
		{
			instance.slots = Pool.Get<List<int>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.type = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.slotCount = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.slots.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, MemoryBank instance, MemoryBank previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.type != previous.type)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.type);
		}
		if (instance.slotCount != previous.slotCount)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.slotCount);
		}
		if (instance.slots != null)
		{
			for (int i = 0; i < instance.slots.Count; i++)
			{
				int num = instance.slots[i];
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, MemoryBank instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.type != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.type);
		}
		if (instance.slotCount != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.slotCount);
		}
		if (instance.slots != null)
		{
			for (int i = 0; i < instance.slots.Count; i++)
			{
				int num = instance.slots[i];
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(MemoryBank instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, MemoryBank instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class InRangeOfHomeAIEventData : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public float range;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(InRangeOfHomeAIEventData instance)
	{
		if (instance.ShouldPool)
		{
			instance.range = 0f;
			Pool.Free<InRangeOfHomeAIEventData>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose InRangeOfHomeAIEventData with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(InRangeOfHomeAIEventData instance)
	{
		instance.range = range;
	}

	public InRangeOfHomeAIEventData Copy()
	{
		InRangeOfHomeAIEventData inRangeOfHomeAIEventData = Pool.Get<InRangeOfHomeAIEventData>();
		CopyTo(inRangeOfHomeAIEventData);
		return inRangeOfHomeAIEventData;
	}

	public static InRangeOfHomeAIEventData Deserialize(Stream stream)
	{
		InRangeOfHomeAIEventData inRangeOfHomeAIEventData = Pool.Get<InRangeOfHomeAIEventData>();
		Deserialize(stream, inRangeOfHomeAIEventData, isDelta: false);
		return inRangeOfHomeAIEventData;
	}

	public static InRangeOfHomeAIEventData DeserializeLengthDelimited(Stream stream)
	{
		InRangeOfHomeAIEventData inRangeOfHomeAIEventData = Pool.Get<InRangeOfHomeAIEventData>();
		DeserializeLengthDelimited(stream, inRangeOfHomeAIEventData, isDelta: false);
		return inRangeOfHomeAIEventData;
	}

	public static InRangeOfHomeAIEventData DeserializeLength(Stream stream, int length)
	{
		InRangeOfHomeAIEventData inRangeOfHomeAIEventData = Pool.Get<InRangeOfHomeAIEventData>();
		DeserializeLength(stream, length, inRangeOfHomeAIEventData, isDelta: false);
		return inRangeOfHomeAIEventData;
	}

	public static InRangeOfHomeAIEventData Deserialize(byte[] buffer)
	{
		InRangeOfHomeAIEventData inRangeOfHomeAIEventData = Pool.Get<InRangeOfHomeAIEventData>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, inRangeOfHomeAIEventData, isDelta: false);
		return inRangeOfHomeAIEventData;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, InRangeOfHomeAIEventData previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static InRangeOfHomeAIEventData Deserialize(byte[] buffer, InRangeOfHomeAIEventData instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static InRangeOfHomeAIEventData Deserialize(Stream stream, InRangeOfHomeAIEventData instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 13:
				instance.range = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static InRangeOfHomeAIEventData DeserializeLengthDelimited(Stream stream, InRangeOfHomeAIEventData instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.range = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static InRangeOfHomeAIEventData DeserializeLength(Stream stream, int length, InRangeOfHomeAIEventData instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 13:
				instance.range = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, InRangeOfHomeAIEventData instance, InRangeOfHomeAIEventData previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.range != previous.range)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.range);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, InRangeOfHomeAIEventData instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.range != 0f)
		{
			stream.WriteByte(13);
			ProtocolParser.WriteSingle(stream, instance.range);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(InRangeOfHomeAIEventData instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, InRangeOfHomeAIEventData instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class GlobalEntityData : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public uint prefabId;

	[NonSerialized]
	public NetworkableId uid;

	[NonSerialized]
	public Vector3 pos;

	[NonSerialized]
	public Vector3 rot;

	[NonSerialized]
	public int modelState;

	[NonSerialized]
	public int grade;

	[NonSerialized]
	public int flags;

	[NonSerialized]
	public ulong skin;

	[NonSerialized]
	public int customColor;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(GlobalEntityData instance)
	{
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		if (instance.ShouldPool)
		{
			instance.prefabId = 0u;
			instance.uid = default(NetworkableId);
			instance.pos = default(Vector3);
			instance.rot = default(Vector3);
			instance.modelState = 0;
			instance.grade = 0;
			instance.flags = 0;
			instance.skin = 0uL;
			instance.customColor = 0;
			Pool.Free<GlobalEntityData>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose GlobalEntityData with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(GlobalEntityData instance)
	{
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		instance.prefabId = prefabId;
		instance.uid = uid;
		instance.pos = pos;
		instance.rot = rot;
		instance.modelState = modelState;
		instance.grade = grade;
		instance.flags = flags;
		instance.skin = skin;
		instance.customColor = customColor;
	}

	public GlobalEntityData Copy()
	{
		GlobalEntityData globalEntityData = Pool.Get<GlobalEntityData>();
		CopyTo(globalEntityData);
		return globalEntityData;
	}

	public static GlobalEntityData Deserialize(Stream stream)
	{
		GlobalEntityData globalEntityData = Pool.Get<GlobalEntityData>();
		Deserialize(stream, globalEntityData, isDelta: false);
		return globalEntityData;
	}

	public static GlobalEntityData DeserializeLengthDelimited(Stream stream)
	{
		GlobalEntityData globalEntityData = Pool.Get<GlobalEntityData>();
		DeserializeLengthDelimited(stream, globalEntityData, isDelta: false);
		return globalEntityData;
	}

	public static GlobalEntityData DeserializeLength(Stream stream, int length)
	{
		GlobalEntityData globalEntityData = Pool.Get<GlobalEntityData>();
		DeserializeLength(stream, length, globalEntityData, isDelta: false);
		return globalEntityData;
	}

	public static GlobalEntityData Deserialize(byte[] buffer)
	{
		GlobalEntityData globalEntityData = Pool.Get<GlobalEntityData>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, globalEntityData, isDelta: false);
		return globalEntityData;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, GlobalEntityData previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static GlobalEntityData Deserialize(byte[] buffer, GlobalEntityData instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static GlobalEntityData Deserialize(Stream stream, GlobalEntityData instance, bool isDelta)
	{
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.prefabId = ProtocolParser.ReadUInt32(stream);
				continue;
			case 16:
				instance.uid = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 26:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.pos, isDelta);
				continue;
			case 34:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.rot, isDelta);
				continue;
			case 40:
				instance.modelState = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.grade = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 56:
				instance.flags = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 64:
				instance.skin = ProtocolParser.ReadUInt64(stream);
				continue;
			case 72:
				instance.customColor = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static GlobalEntityData DeserializeLengthDelimited(Stream stream, GlobalEntityData instance, bool isDelta)
	{
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.prefabId = ProtocolParser.ReadUInt32(stream);
				continue;
			case 16:
				instance.uid = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 26:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.pos, isDelta);
				continue;
			case 34:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.rot, isDelta);
				continue;
			case 40:
				instance.modelState = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.grade = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 56:
				instance.flags = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 64:
				instance.skin = ProtocolParser.ReadUInt64(stream);
				continue;
			case 72:
				instance.customColor = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static GlobalEntityData DeserializeLength(Stream stream, int length, GlobalEntityData instance, bool isDelta)
	{
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.prefabId = ProtocolParser.ReadUInt32(stream);
				continue;
			case 16:
				instance.uid = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 26:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.pos, isDelta);
				continue;
			case 34:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.rot, isDelta);
				continue;
			case 40:
				instance.modelState = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.grade = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 56:
				instance.flags = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 64:
				instance.skin = ProtocolParser.ReadUInt64(stream);
				continue;
			case 72:
				instance.customColor = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, GlobalEntityData instance, GlobalEntityData previous)
	{
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.prefabId != previous.prefabId)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt32(stream, instance.prefabId);
		}
		stream.WriteByte(16);
		ProtocolParser.WriteUInt64(stream, instance.uid.Value);
		if (instance.pos != previous.pos)
		{
			stream.WriteByte(26);
			memoryStream.SetLength(0L);
			Vector3Serialized.SerializeDelta(memoryStream, instance.pos, previous.pos);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		if (instance.rot != previous.rot)
		{
			stream.WriteByte(34);
			memoryStream.SetLength(0L);
			Vector3Serialized.SerializeDelta(memoryStream, instance.rot, previous.rot);
			uint num2 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
		}
		if (instance.modelState != previous.modelState)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.modelState);
		}
		if (instance.grade != previous.grade)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.grade);
		}
		if (instance.flags != previous.flags)
		{
			stream.WriteByte(56);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.flags);
		}
		if (instance.skin != previous.skin)
		{
			stream.WriteByte(64);
			ProtocolParser.WriteUInt64(stream, instance.skin);
		}
		if (instance.customColor != previous.customColor)
		{
			stream.WriteByte(72);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.customColor);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, GlobalEntityData instance)
	{
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.prefabId != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt32(stream, instance.prefabId);
		}
		if (instance.uid != default(NetworkableId))
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, instance.uid.Value);
		}
		if (instance.pos != default(Vector3))
		{
			stream.WriteByte(26);
			memoryStream.SetLength(0L);
			Vector3Serialized.Serialize(memoryStream, instance.pos);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		if (instance.rot != default(Vector3))
		{
			stream.WriteByte(34);
			memoryStream.SetLength(0L);
			Vector3Serialized.Serialize(memoryStream, instance.rot);
			uint num2 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
		}
		if (instance.modelState != 0)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.modelState);
		}
		if (instance.grade != 0)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.grade);
		}
		if (instance.flags != 0)
		{
			stream.WriteByte(56);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.flags);
		}
		if (instance.skin != 0L)
		{
			stream.WriteByte(64);
			ProtocolParser.WriteUInt64(stream, instance.skin);
		}
		if (instance.customColor != 0)
		{
			stream.WriteByte(72);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.customColor);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(GlobalEntityData instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, GlobalEntityData instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		action(UidType.NetworkableId, ref uid.Value);
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class GlobalEntityCollection : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public List<GlobalEntityData> entities;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(GlobalEntityCollection instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.entities != null)
		{
			for (int i = 0; i < instance.entities.Count; i++)
			{
				if (instance.entities[i] != null)
				{
					instance.entities[i].ResetToPool();
					instance.entities[i] = null;
				}
			}
			List<GlobalEntityData> list = instance.entities;
			Pool.Free<GlobalEntityData>(ref list, false);
			instance.entities = list;
		}
		Pool.Free<GlobalEntityCollection>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose GlobalEntityCollection with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(GlobalEntityCollection instance)
	{
		if (entities != null)
		{
			instance.entities = Pool.Get<List<GlobalEntityData>>();
			for (int i = 0; i < entities.Count; i++)
			{
				GlobalEntityData item = entities[i].Copy();
				instance.entities.Add(item);
			}
		}
		else
		{
			instance.entities = null;
		}
	}

	public GlobalEntityCollection Copy()
	{
		GlobalEntityCollection globalEntityCollection = Pool.Get<GlobalEntityCollection>();
		CopyTo(globalEntityCollection);
		return globalEntityCollection;
	}

	public static GlobalEntityCollection Deserialize(Stream stream)
	{
		GlobalEntityCollection globalEntityCollection = Pool.Get<GlobalEntityCollection>();
		Deserialize(stream, globalEntityCollection, isDelta: false);
		return globalEntityCollection;
	}

	public static GlobalEntityCollection DeserializeLengthDelimited(Stream stream)
	{
		GlobalEntityCollection globalEntityCollection = Pool.Get<GlobalEntityCollection>();
		DeserializeLengthDelimited(stream, globalEntityCollection, isDelta: false);
		return globalEntityCollection;
	}

	public static GlobalEntityCollection DeserializeLength(Stream stream, int length)
	{
		GlobalEntityCollection globalEntityCollection = Pool.Get<GlobalEntityCollection>();
		DeserializeLength(stream, length, globalEntityCollection, isDelta: false);
		return globalEntityCollection;
	}

	public static GlobalEntityCollection Deserialize(byte[] buffer)
	{
		GlobalEntityCollection globalEntityCollection = Pool.Get<GlobalEntityCollection>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, globalEntityCollection, isDelta: false);
		return globalEntityCollection;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, GlobalEntityCollection previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static GlobalEntityCollection Deserialize(byte[] buffer, GlobalEntityCollection instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static GlobalEntityCollection Deserialize(Stream stream, GlobalEntityCollection instance, bool isDelta)
	{
		if (!isDelta && instance.entities == null)
		{
			instance.entities = Pool.Get<List<GlobalEntityData>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.entities.Add(GlobalEntityData.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static GlobalEntityCollection DeserializeLengthDelimited(Stream stream, GlobalEntityCollection instance, bool isDelta)
	{
		if (!isDelta && instance.entities == null)
		{
			instance.entities = Pool.Get<List<GlobalEntityData>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.entities.Add(GlobalEntityData.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static GlobalEntityCollection DeserializeLength(Stream stream, int length, GlobalEntityCollection instance, bool isDelta)
	{
		if (!isDelta && instance.entities == null)
		{
			instance.entities = Pool.Get<List<GlobalEntityData>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.entities.Add(GlobalEntityData.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, GlobalEntityCollection instance, GlobalEntityCollection previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.entities != null)
		{
			for (int i = 0; i < instance.entities.Count; i++)
			{
				GlobalEntityData globalEntityData = instance.entities[i];
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				GlobalEntityData.SerializeDelta(memoryStream, globalEntityData, globalEntityData);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, GlobalEntityCollection instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.entities != null)
		{
			for (int i = 0; i < instance.entities.Count; i++)
			{
				GlobalEntityData instance2 = instance.entities[i];
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				GlobalEntityData.Serialize(memoryStream, instance2);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(GlobalEntityCollection instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, GlobalEntityCollection instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (entities != null)
		{
			for (int i = 0; i < entities.Count; i++)
			{
				entities[i]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class ClanActionResult : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public int requestId;

	[NonSerialized]
	public int result;

	[NonSerialized]
	public bool hasClanInfo;

	[NonSerialized]
	public ClanInfo clanInfo;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(ClanActionResult instance)
	{
		if (instance.ShouldPool)
		{
			instance.requestId = 0;
			instance.result = 0;
			instance.hasClanInfo = false;
			if (instance.clanInfo != null)
			{
				instance.clanInfo.ResetToPool();
				instance.clanInfo = null;
			}
			Pool.Free<ClanActionResult>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose ClanActionResult with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(ClanActionResult instance)
	{
		instance.requestId = requestId;
		instance.result = result;
		instance.hasClanInfo = hasClanInfo;
		if (clanInfo != null)
		{
			if (instance.clanInfo == null)
			{
				instance.clanInfo = clanInfo.Copy();
			}
			else
			{
				clanInfo.CopyTo(instance.clanInfo);
			}
		}
		else
		{
			instance.clanInfo = null;
		}
	}

	public ClanActionResult Copy()
	{
		ClanActionResult instance = Pool.Get<ClanActionResult>();
		CopyTo(instance);
		return instance;
	}

	public static ClanActionResult Deserialize(Stream stream)
	{
		ClanActionResult instance = Pool.Get<ClanActionResult>();
		Deserialize(stream, instance, isDelta: false);
		return instance;
	}

	public static ClanActionResult DeserializeLengthDelimited(Stream stream)
	{
		ClanActionResult instance = Pool.Get<ClanActionResult>();
		DeserializeLengthDelimited(stream, instance, isDelta: false);
		return instance;
	}

	public static ClanActionResult DeserializeLength(Stream stream, int length)
	{
		ClanActionResult instance = Pool.Get<ClanActionResult>();
		DeserializeLength(stream, length, instance, isDelta: false);
		return instance;
	}

	public static ClanActionResult Deserialize(byte[] buffer)
	{
		ClanActionResult instance = Pool.Get<ClanActionResult>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta: false);
		return instance;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, ClanActionResult previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static ClanActionResult Deserialize(byte[] buffer, ClanActionResult instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static ClanActionResult Deserialize(Stream stream, ClanActionResult instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.requestId = 0;
			instance.result = 0;
			instance.hasClanInfo = false;
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.requestId = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.result = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.hasClanInfo = ProtocolParser.ReadBool(stream);
				continue;
			case 34:
				if (instance.clanInfo == null)
				{
					instance.clanInfo = ClanInfo.DeserializeLengthDelimited(stream);
				}
				else
				{
					ClanInfo.DeserializeLengthDelimited(stream, instance.clanInfo, isDelta);
				}
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static ClanActionResult DeserializeLengthDelimited(Stream stream, ClanActionResult instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.requestId = 0;
			instance.result = 0;
			instance.hasClanInfo = false;
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.requestId = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.result = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.hasClanInfo = ProtocolParser.ReadBool(stream);
				continue;
			case 34:
				if (instance.clanInfo == null)
				{
					instance.clanInfo = ClanInfo.DeserializeLengthDelimited(stream);
				}
				else
				{
					ClanInfo.DeserializeLengthDelimited(stream, instance.clanInfo, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static ClanActionResult DeserializeLength(Stream stream, int length, ClanActionResult instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.requestId = 0;
			instance.result = 0;
			instance.hasClanInfo = false;
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.requestId = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.result = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.hasClanInfo = ProtocolParser.ReadBool(stream);
				continue;
			case 34:
				if (instance.clanInfo == null)
				{
					instance.clanInfo = ClanInfo.DeserializeLengthDelimited(stream);
				}
				else
				{
					ClanInfo.DeserializeLengthDelimited(stream, instance.clanInfo, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, ClanActionResult instance, ClanActionResult previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.requestId != previous.requestId)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.requestId);
		}
		if (instance.result != previous.result)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.result);
		}
		stream.WriteByte(24);
		ProtocolParser.WriteBool(stream, instance.hasClanInfo);
		if (instance.clanInfo != null)
		{
			stream.WriteByte(34);
			memoryStream.SetLength(0L);
			ClanInfo.SerializeDelta(memoryStream, instance.clanInfo, previous.clanInfo);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, ClanActionResult instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.requestId != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.requestId);
		}
		if (instance.result != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.result);
		}
		if (instance.hasClanInfo)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteBool(stream, instance.hasClanInfo);
		}
		if (instance.clanInfo != null)
		{
			stream.WriteByte(34);
			memoryStream.SetLength(0L);
			ClanInfo.Serialize(memoryStream, instance.clanInfo);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(ClanActionResult instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, ClanActionResult instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		clanInfo?.InspectUids(action);
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class ClanInfo : IDisposable, IPooled, IProto
{
	public class Role : IDisposable, IPooled, IProto
	{
		[NonSerialized]
		public int roleId;

		[NonSerialized]
		public int rank;

		[NonSerialized]
		public string name;

		[NonSerialized]
		public bool canSetMotd;

		[NonSerialized]
		public bool canSetLogo;

		[NonSerialized]
		public bool canInvite;

		[NonSerialized]
		public bool canKick;

		[NonSerialized]
		public bool canPromote;

		[NonSerialized]
		public bool canDemote;

		[NonSerialized]
		public bool canSetPlayerNotes;

		[NonSerialized]
		public bool canAccessLogs;

		[NonSerialized]
		public bool canAccessScoreEvents;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(Role instance)
		{
			if (instance.ShouldPool)
			{
				instance.roleId = 0;
				instance.rank = 0;
				instance.name = string.Empty;
				instance.canSetMotd = false;
				instance.canSetLogo = false;
				instance.canInvite = false;
				instance.canKick = false;
				instance.canPromote = false;
				instance.canDemote = false;
				instance.canSetPlayerNotes = false;
				instance.canAccessLogs = false;
				instance.canAccessScoreEvents = false;
				Pool.Free<Role>(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose Role with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(Role instance)
		{
			instance.roleId = roleId;
			instance.rank = rank;
			instance.name = name;
			instance.canSetMotd = canSetMotd;
			instance.canSetLogo = canSetLogo;
			instance.canInvite = canInvite;
			instance.canKick = canKick;
			instance.canPromote = canPromote;
			instance.canDemote = canDemote;
			instance.canSetPlayerNotes = canSetPlayerNotes;
			instance.canAccessLogs = canAccessLogs;
			instance.canAccessScoreEvents = canAccessScoreEvents;
		}

		public Role Copy()
		{
			Role role = Pool.Get<Role>();
			CopyTo(role);
			return role;
		}

		public static Role Deserialize(Stream stream)
		{
			Role role = Pool.Get<Role>();
			Deserialize(stream, role, isDelta: false);
			return role;
		}

		public static Role DeserializeLengthDelimited(Stream stream)
		{
			Role role = Pool.Get<Role>();
			DeserializeLengthDelimited(stream, role, isDelta: false);
			return role;
		}

		public static Role DeserializeLength(Stream stream, int length)
		{
			Role role = Pool.Get<Role>();
			DeserializeLength(stream, length, role, isDelta: false);
			return role;
		}

		public static Role Deserialize(byte[] buffer)
		{
			Role role = Pool.Get<Role>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, role, isDelta: false);
			return role;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, Role previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static Role Deserialize(byte[] buffer, Role instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static Role Deserialize(Stream stream, Role instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.roleId = 0;
				instance.rank = 0;
				instance.canSetMotd = false;
				instance.canSetLogo = false;
				instance.canInvite = false;
				instance.canKick = false;
				instance.canPromote = false;
				instance.canDemote = false;
				instance.canSetPlayerNotes = false;
				instance.canAccessLogs = false;
				instance.canAccessScoreEvents = false;
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.roleId = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.rank = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 26:
					instance.name = ProtocolParser.ReadString(stream);
					continue;
				case 32:
					instance.canSetMotd = ProtocolParser.ReadBool(stream);
					continue;
				case 40:
					instance.canSetLogo = ProtocolParser.ReadBool(stream);
					continue;
				case 48:
					instance.canInvite = ProtocolParser.ReadBool(stream);
					continue;
				case 56:
					instance.canKick = ProtocolParser.ReadBool(stream);
					continue;
				case 64:
					instance.canPromote = ProtocolParser.ReadBool(stream);
					continue;
				case 72:
					instance.canDemote = ProtocolParser.ReadBool(stream);
					continue;
				case 80:
					instance.canSetPlayerNotes = ProtocolParser.ReadBool(stream);
					continue;
				case 88:
					instance.canAccessLogs = ProtocolParser.ReadBool(stream);
					continue;
				case 96:
					instance.canAccessScoreEvents = ProtocolParser.ReadBool(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static Role DeserializeLengthDelimited(Stream stream, Role instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.roleId = 0;
				instance.rank = 0;
				instance.canSetMotd = false;
				instance.canSetLogo = false;
				instance.canInvite = false;
				instance.canKick = false;
				instance.canPromote = false;
				instance.canDemote = false;
				instance.canSetPlayerNotes = false;
				instance.canAccessLogs = false;
				instance.canAccessScoreEvents = false;
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.roleId = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.rank = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 26:
					instance.name = ProtocolParser.ReadString(stream);
					continue;
				case 32:
					instance.canSetMotd = ProtocolParser.ReadBool(stream);
					continue;
				case 40:
					instance.canSetLogo = ProtocolParser.ReadBool(stream);
					continue;
				case 48:
					instance.canInvite = ProtocolParser.ReadBool(stream);
					continue;
				case 56:
					instance.canKick = ProtocolParser.ReadBool(stream);
					continue;
				case 64:
					instance.canPromote = ProtocolParser.ReadBool(stream);
					continue;
				case 72:
					instance.canDemote = ProtocolParser.ReadBool(stream);
					continue;
				case 80:
					instance.canSetPlayerNotes = ProtocolParser.ReadBool(stream);
					continue;
				case 88:
					instance.canAccessLogs = ProtocolParser.ReadBool(stream);
					continue;
				case 96:
					instance.canAccessScoreEvents = ProtocolParser.ReadBool(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static Role DeserializeLength(Stream stream, int length, Role instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.roleId = 0;
				instance.rank = 0;
				instance.canSetMotd = false;
				instance.canSetLogo = false;
				instance.canInvite = false;
				instance.canKick = false;
				instance.canPromote = false;
				instance.canDemote = false;
				instance.canSetPlayerNotes = false;
				instance.canAccessLogs = false;
				instance.canAccessScoreEvents = false;
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.roleId = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.rank = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 26:
					instance.name = ProtocolParser.ReadString(stream);
					continue;
				case 32:
					instance.canSetMotd = ProtocolParser.ReadBool(stream);
					continue;
				case 40:
					instance.canSetLogo = ProtocolParser.ReadBool(stream);
					continue;
				case 48:
					instance.canInvite = ProtocolParser.ReadBool(stream);
					continue;
				case 56:
					instance.canKick = ProtocolParser.ReadBool(stream);
					continue;
				case 64:
					instance.canPromote = ProtocolParser.ReadBool(stream);
					continue;
				case 72:
					instance.canDemote = ProtocolParser.ReadBool(stream);
					continue;
				case 80:
					instance.canSetPlayerNotes = ProtocolParser.ReadBool(stream);
					continue;
				case 88:
					instance.canAccessLogs = ProtocolParser.ReadBool(stream);
					continue;
				case 96:
					instance.canAccessScoreEvents = ProtocolParser.ReadBool(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, Role instance, Role previous)
		{
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.roleId != previous.roleId)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.roleId);
			}
			if (instance.rank != previous.rank)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.rank);
			}
			if (instance.name != previous.name)
			{
				if (instance.name == null)
				{
					throw new ArgumentNullException("name", "Required by proto specification.");
				}
				stream.WriteByte(26);
				ProtocolParser.WriteString(stream, instance.name);
			}
			stream.WriteByte(32);
			ProtocolParser.WriteBool(stream, instance.canSetMotd);
			stream.WriteByte(40);
			ProtocolParser.WriteBool(stream, instance.canSetLogo);
			stream.WriteByte(48);
			ProtocolParser.WriteBool(stream, instance.canInvite);
			stream.WriteByte(56);
			ProtocolParser.WriteBool(stream, instance.canKick);
			stream.WriteByte(64);
			ProtocolParser.WriteBool(stream, instance.canPromote);
			stream.WriteByte(72);
			ProtocolParser.WriteBool(stream, instance.canDemote);
			stream.WriteByte(80);
			ProtocolParser.WriteBool(stream, instance.canSetPlayerNotes);
			stream.WriteByte(88);
			ProtocolParser.WriteBool(stream, instance.canAccessLogs);
			stream.WriteByte(96);
			ProtocolParser.WriteBool(stream, instance.canAccessScoreEvents);
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public static void Serialize(Stream stream, Role instance)
		{
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.roleId != 0)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.roleId);
			}
			if (instance.rank != 0)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.rank);
			}
			if (instance.name == null)
			{
				throw new ArgumentNullException("name", "Required by proto specification.");
			}
			stream.WriteByte(26);
			ProtocolParser.WriteString(stream, instance.name);
			if (instance.canSetMotd)
			{
				stream.WriteByte(32);
				ProtocolParser.WriteBool(stream, instance.canSetMotd);
			}
			if (instance.canSetLogo)
			{
				stream.WriteByte(40);
				ProtocolParser.WriteBool(stream, instance.canSetLogo);
			}
			if (instance.canInvite)
			{
				stream.WriteByte(48);
				ProtocolParser.WriteBool(stream, instance.canInvite);
			}
			if (instance.canKick)
			{
				stream.WriteByte(56);
				ProtocolParser.WriteBool(stream, instance.canKick);
			}
			if (instance.canPromote)
			{
				stream.WriteByte(64);
				ProtocolParser.WriteBool(stream, instance.canPromote);
			}
			if (instance.canDemote)
			{
				stream.WriteByte(72);
				ProtocolParser.WriteBool(stream, instance.canDemote);
			}
			if (instance.canSetPlayerNotes)
			{
				stream.WriteByte(80);
				ProtocolParser.WriteBool(stream, instance.canSetPlayerNotes);
			}
			if (instance.canAccessLogs)
			{
				stream.WriteByte(88);
				ProtocolParser.WriteBool(stream, instance.canAccessLogs);
			}
			if (instance.canAccessScoreEvents)
			{
				stream.WriteByte(96);
				ProtocolParser.WriteBool(stream, instance.canAccessScoreEvents);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(Role instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, Role instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	public class Member : IDisposable, IPooled, IProto
	{
		[NonSerialized]
		public ulong steamId;

		[NonSerialized]
		public int roleId;

		[NonSerialized]
		public long joined;

		[NonSerialized]
		public long lastSeen;

		[NonSerialized]
		public string notes;

		[NonSerialized]
		public bool online;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(Member instance)
		{
			if (instance.ShouldPool)
			{
				instance.steamId = 0uL;
				instance.roleId = 0;
				instance.joined = 0L;
				instance.lastSeen = 0L;
				instance.notes = string.Empty;
				instance.online = false;
				Pool.Free<Member>(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose Member with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(Member instance)
		{
			instance.steamId = steamId;
			instance.roleId = roleId;
			instance.joined = joined;
			instance.lastSeen = lastSeen;
			instance.notes = notes;
			instance.online = online;
		}

		public Member Copy()
		{
			Member member = Pool.Get<Member>();
			CopyTo(member);
			return member;
		}

		public static Member Deserialize(Stream stream)
		{
			Member member = Pool.Get<Member>();
			Deserialize(stream, member, isDelta: false);
			return member;
		}

		public static Member DeserializeLengthDelimited(Stream stream)
		{
			Member member = Pool.Get<Member>();
			DeserializeLengthDelimited(stream, member, isDelta: false);
			return member;
		}

		public static Member DeserializeLength(Stream stream, int length)
		{
			Member member = Pool.Get<Member>();
			DeserializeLength(stream, length, member, isDelta: false);
			return member;
		}

		public static Member Deserialize(byte[] buffer)
		{
			Member member = Pool.Get<Member>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, member, isDelta: false);
			return member;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, Member previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static Member Deserialize(byte[] buffer, Member instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static Member Deserialize(Stream stream, Member instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.steamId = 0uL;
				instance.roleId = 0;
				instance.joined = 0L;
				instance.lastSeen = 0L;
				instance.online = false;
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.steamId = ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.roleId = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.joined = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case 32:
					instance.lastSeen = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case 42:
					instance.notes = ProtocolParser.ReadString(stream);
					continue;
				case 48:
					instance.online = ProtocolParser.ReadBool(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static Member DeserializeLengthDelimited(Stream stream, Member instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.steamId = 0uL;
				instance.roleId = 0;
				instance.joined = 0L;
				instance.lastSeen = 0L;
				instance.online = false;
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.steamId = ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.roleId = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.joined = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case 32:
					instance.lastSeen = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case 42:
					instance.notes = ProtocolParser.ReadString(stream);
					continue;
				case 48:
					instance.online = ProtocolParser.ReadBool(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static Member DeserializeLength(Stream stream, int length, Member instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.steamId = 0uL;
				instance.roleId = 0;
				instance.joined = 0L;
				instance.lastSeen = 0L;
				instance.online = false;
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.steamId = ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.roleId = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.joined = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case 32:
					instance.lastSeen = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case 42:
					instance.notes = ProtocolParser.ReadString(stream);
					continue;
				case 48:
					instance.online = ProtocolParser.ReadBool(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, Member instance, Member previous)
		{
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.steamId != previous.steamId)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, instance.steamId);
			}
			if (instance.roleId != previous.roleId)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.roleId);
			}
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.joined);
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.lastSeen);
			if (instance.notes != null && instance.notes != previous.notes)
			{
				stream.WriteByte(42);
				ProtocolParser.WriteString(stream, instance.notes);
			}
			stream.WriteByte(48);
			ProtocolParser.WriteBool(stream, instance.online);
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public static void Serialize(Stream stream, Member instance)
		{
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.steamId != 0L)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, instance.steamId);
			}
			if (instance.roleId != 0)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.roleId);
			}
			if (instance.joined != 0L)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.joined);
			}
			if (instance.lastSeen != 0L)
			{
				stream.WriteByte(32);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.lastSeen);
			}
			if (instance.notes != null)
			{
				stream.WriteByte(42);
				ProtocolParser.WriteString(stream, instance.notes);
			}
			if (instance.online)
			{
				stream.WriteByte(48);
				ProtocolParser.WriteBool(stream, instance.online);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(Member instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, Member instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	public class Invite : IDisposable, IPooled, IProto
	{
		[NonSerialized]
		public ulong steamId;

		[NonSerialized]
		public ulong recruiter;

		[NonSerialized]
		public long timestamp;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(Invite instance)
		{
			if (instance.ShouldPool)
			{
				instance.steamId = 0uL;
				instance.recruiter = 0uL;
				instance.timestamp = 0L;
				Pool.Free<Invite>(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose Invite with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(Invite instance)
		{
			instance.steamId = steamId;
			instance.recruiter = recruiter;
			instance.timestamp = timestamp;
		}

		public Invite Copy()
		{
			Invite invite = Pool.Get<Invite>();
			CopyTo(invite);
			return invite;
		}

		public static Invite Deserialize(Stream stream)
		{
			Invite invite = Pool.Get<Invite>();
			Deserialize(stream, invite, isDelta: false);
			return invite;
		}

		public static Invite DeserializeLengthDelimited(Stream stream)
		{
			Invite invite = Pool.Get<Invite>();
			DeserializeLengthDelimited(stream, invite, isDelta: false);
			return invite;
		}

		public static Invite DeserializeLength(Stream stream, int length)
		{
			Invite invite = Pool.Get<Invite>();
			DeserializeLength(stream, length, invite, isDelta: false);
			return invite;
		}

		public static Invite Deserialize(byte[] buffer)
		{
			Invite invite = Pool.Get<Invite>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, invite, isDelta: false);
			return invite;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, Invite previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static Invite Deserialize(byte[] buffer, Invite instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static Invite Deserialize(Stream stream, Invite instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.steamId = 0uL;
				instance.recruiter = 0uL;
				instance.timestamp = 0L;
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.steamId = ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.recruiter = ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.timestamp = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static Invite DeserializeLengthDelimited(Stream stream, Invite instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.steamId = 0uL;
				instance.recruiter = 0uL;
				instance.timestamp = 0L;
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.steamId = ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.recruiter = ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.timestamp = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static Invite DeserializeLength(Stream stream, int length, Invite instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.steamId = 0uL;
				instance.recruiter = 0uL;
				instance.timestamp = 0L;
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.steamId = ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.recruiter = ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.timestamp = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, Invite instance, Invite previous)
		{
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.steamId != previous.steamId)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, instance.steamId);
			}
			if (instance.recruiter != previous.recruiter)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, instance.recruiter);
			}
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.timestamp);
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public static void Serialize(Stream stream, Invite instance)
		{
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.steamId != 0L)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, instance.steamId);
			}
			if (instance.recruiter != 0L)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, instance.recruiter);
			}
			if (instance.timestamp != 0L)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.timestamp);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(Invite instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, Invite instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	[NonSerialized]
	public long clanId;

	[NonSerialized]
	public string name;

	[NonSerialized]
	public long created;

	[NonSerialized]
	public ulong creator;

	[NonSerialized]
	public string motd;

	[NonSerialized]
	public long motdTimestamp;

	[NonSerialized]
	public ulong motdAuthor;

	[NonSerialized]
	public byte[] logo;

	[NonSerialized]
	public int color;

	[NonSerialized]
	public List<Role> roles;

	[NonSerialized]
	public List<Member> members;

	[NonSerialized]
	public List<Invite> invites;

	[NonSerialized]
	public int maxMemberCount;

	[NonSerialized]
	public long score;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(ClanInfo instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		instance.clanId = 0L;
		instance.name = string.Empty;
		instance.created = 0L;
		instance.creator = 0uL;
		instance.motd = string.Empty;
		instance.motdTimestamp = 0L;
		instance.motdAuthor = 0uL;
		instance.logo = null;
		instance.color = 0;
		if (instance.roles != null)
		{
			for (int i = 0; i < instance.roles.Count; i++)
			{
				if (instance.roles[i] != null)
				{
					instance.roles[i].ResetToPool();
					instance.roles[i] = null;
				}
			}
			List<Role> list = instance.roles;
			Pool.Free<Role>(ref list, false);
			instance.roles = list;
		}
		if (instance.members != null)
		{
			for (int j = 0; j < instance.members.Count; j++)
			{
				if (instance.members[j] != null)
				{
					instance.members[j].ResetToPool();
					instance.members[j] = null;
				}
			}
			List<Member> list2 = instance.members;
			Pool.Free<Member>(ref list2, false);
			instance.members = list2;
		}
		if (instance.invites != null)
		{
			for (int k = 0; k < instance.invites.Count; k++)
			{
				if (instance.invites[k] != null)
				{
					instance.invites[k].ResetToPool();
					instance.invites[k] = null;
				}
			}
			List<Invite> list3 = instance.invites;
			Pool.Free<Invite>(ref list3, false);
			instance.invites = list3;
		}
		instance.maxMemberCount = 0;
		instance.score = 0L;
		Pool.Free<ClanInfo>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose ClanInfo with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(ClanInfo instance)
	{
		instance.clanId = clanId;
		instance.name = name;
		instance.created = created;
		instance.creator = creator;
		instance.motd = motd;
		instance.motdTimestamp = motdTimestamp;
		instance.motdAuthor = motdAuthor;
		if (logo == null)
		{
			instance.logo = null;
		}
		else
		{
			instance.logo = new byte[logo.Length];
			Array.Copy(logo, instance.logo, instance.logo.Length);
		}
		instance.color = color;
		if (roles != null)
		{
			instance.roles = Pool.Get<List<Role>>();
			for (int i = 0; i < roles.Count; i++)
			{
				Role item = roles[i].Copy();
				instance.roles.Add(item);
			}
		}
		else
		{
			instance.roles = null;
		}
		if (members != null)
		{
			instance.members = Pool.Get<List<Member>>();
			for (int j = 0; j < members.Count; j++)
			{
				Member item2 = members[j].Copy();
				instance.members.Add(item2);
			}
		}
		else
		{
			instance.members = null;
		}
		if (invites != null)
		{
			instance.invites = Pool.Get<List<Invite>>();
			for (int k = 0; k < invites.Count; k++)
			{
				Invite item3 = invites[k].Copy();
				instance.invites.Add(item3);
			}
		}
		else
		{
			instance.invites = null;
		}
		instance.maxMemberCount = maxMemberCount;
		instance.score = score;
	}

	public ClanInfo Copy()
	{
		ClanInfo clanInfo = Pool.Get<ClanInfo>();
		CopyTo(clanInfo);
		return clanInfo;
	}

	public static ClanInfo Deserialize(Stream stream)
	{
		ClanInfo clanInfo = Pool.Get<ClanInfo>();
		Deserialize(stream, clanInfo, isDelta: false);
		return clanInfo;
	}

	public static ClanInfo DeserializeLengthDelimited(Stream stream)
	{
		ClanInfo clanInfo = Pool.Get<ClanInfo>();
		DeserializeLengthDelimited(stream, clanInfo, isDelta: false);
		return clanInfo;
	}

	public static ClanInfo DeserializeLength(Stream stream, int length)
	{
		ClanInfo clanInfo = Pool.Get<ClanInfo>();
		DeserializeLength(stream, length, clanInfo, isDelta: false);
		return clanInfo;
	}

	public static ClanInfo Deserialize(byte[] buffer)
	{
		ClanInfo clanInfo = Pool.Get<ClanInfo>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, clanInfo, isDelta: false);
		return clanInfo;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, ClanInfo previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static ClanInfo Deserialize(byte[] buffer, ClanInfo instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static ClanInfo Deserialize(Stream stream, ClanInfo instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.clanId = 0L;
			instance.created = 0L;
			instance.creator = 0uL;
			instance.motdTimestamp = 0L;
			instance.motdAuthor = 0uL;
			instance.color = 0;
			if (instance.roles == null)
			{
				instance.roles = Pool.Get<List<Role>>();
			}
			if (instance.members == null)
			{
				instance.members = Pool.Get<List<Member>>();
			}
			if (instance.invites == null)
			{
				instance.invites = Pool.Get<List<Invite>>();
			}
			instance.maxMemberCount = 0;
			instance.score = 0L;
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.clanId = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.name = ProtocolParser.ReadString(stream);
				continue;
			case 24:
				instance.created = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.creator = ProtocolParser.ReadUInt64(stream);
				continue;
			case 42:
				instance.motd = ProtocolParser.ReadString(stream);
				continue;
			case 48:
				instance.motdTimestamp = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 56:
				instance.motdAuthor = ProtocolParser.ReadUInt64(stream);
				continue;
			case 66:
				instance.logo = ProtocolParser.ReadBytes(stream);
				continue;
			case 72:
				instance.color = ProtocolParser.ReadZInt32(stream);
				continue;
			case 82:
				instance.roles.Add(Role.DeserializeLengthDelimited(stream));
				continue;
			case 90:
				instance.members.Add(Member.DeserializeLengthDelimited(stream));
				continue;
			case 98:
				instance.invites.Add(Invite.DeserializeLengthDelimited(stream));
				continue;
			case 104:
				instance.maxMemberCount = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 112:
				instance.score = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static ClanInfo DeserializeLengthDelimited(Stream stream, ClanInfo instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.clanId = 0L;
			instance.created = 0L;
			instance.creator = 0uL;
			instance.motdTimestamp = 0L;
			instance.motdAuthor = 0uL;
			instance.color = 0;
			if (instance.roles == null)
			{
				instance.roles = Pool.Get<List<Role>>();
			}
			if (instance.members == null)
			{
				instance.members = Pool.Get<List<Member>>();
			}
			if (instance.invites == null)
			{
				instance.invites = Pool.Get<List<Invite>>();
			}
			instance.maxMemberCount = 0;
			instance.score = 0L;
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.clanId = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.name = ProtocolParser.ReadString(stream);
				continue;
			case 24:
				instance.created = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.creator = ProtocolParser.ReadUInt64(stream);
				continue;
			case 42:
				instance.motd = ProtocolParser.ReadString(stream);
				continue;
			case 48:
				instance.motdTimestamp = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 56:
				instance.motdAuthor = ProtocolParser.ReadUInt64(stream);
				continue;
			case 66:
				instance.logo = ProtocolParser.ReadBytes(stream);
				continue;
			case 72:
				instance.color = ProtocolParser.ReadZInt32(stream);
				continue;
			case 82:
				instance.roles.Add(Role.DeserializeLengthDelimited(stream));
				continue;
			case 90:
				instance.members.Add(Member.DeserializeLengthDelimited(stream));
				continue;
			case 98:
				instance.invites.Add(Invite.DeserializeLengthDelimited(stream));
				continue;
			case 104:
				instance.maxMemberCount = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 112:
				instance.score = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static ClanInfo DeserializeLength(Stream stream, int length, ClanInfo instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.clanId = 0L;
			instance.created = 0L;
			instance.creator = 0uL;
			instance.motdTimestamp = 0L;
			instance.motdAuthor = 0uL;
			instance.color = 0;
			if (instance.roles == null)
			{
				instance.roles = Pool.Get<List<Role>>();
			}
			if (instance.members == null)
			{
				instance.members = Pool.Get<List<Member>>();
			}
			if (instance.invites == null)
			{
				instance.invites = Pool.Get<List<Invite>>();
			}
			instance.maxMemberCount = 0;
			instance.score = 0L;
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.clanId = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.name = ProtocolParser.ReadString(stream);
				continue;
			case 24:
				instance.created = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.creator = ProtocolParser.ReadUInt64(stream);
				continue;
			case 42:
				instance.motd = ProtocolParser.ReadString(stream);
				continue;
			case 48:
				instance.motdTimestamp = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 56:
				instance.motdAuthor = ProtocolParser.ReadUInt64(stream);
				continue;
			case 66:
				instance.logo = ProtocolParser.ReadBytes(stream);
				continue;
			case 72:
				instance.color = ProtocolParser.ReadZInt32(stream);
				continue;
			case 82:
				instance.roles.Add(Role.DeserializeLengthDelimited(stream));
				continue;
			case 90:
				instance.members.Add(Member.DeserializeLengthDelimited(stream));
				continue;
			case 98:
				instance.invites.Add(Invite.DeserializeLengthDelimited(stream));
				continue;
			case 104:
				instance.maxMemberCount = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 112:
				instance.score = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, ClanInfo instance, ClanInfo previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		stream.WriteByte(8);
		ProtocolParser.WriteUInt64(stream, (ulong)instance.clanId);
		if (instance.name != previous.name)
		{
			if (instance.name == null)
			{
				throw new ArgumentNullException("name", "Required by proto specification.");
			}
			stream.WriteByte(18);
			ProtocolParser.WriteString(stream, instance.name);
		}
		stream.WriteByte(24);
		ProtocolParser.WriteUInt64(stream, (ulong)instance.created);
		if (instance.creator != previous.creator)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, instance.creator);
		}
		if (instance.motd != null && instance.motd != previous.motd)
		{
			stream.WriteByte(42);
			ProtocolParser.WriteString(stream, instance.motd);
		}
		stream.WriteByte(48);
		ProtocolParser.WriteUInt64(stream, (ulong)instance.motdTimestamp);
		if (instance.motdAuthor != previous.motdAuthor)
		{
			stream.WriteByte(56);
			ProtocolParser.WriteUInt64(stream, instance.motdAuthor);
		}
		if (instance.logo != null)
		{
			stream.WriteByte(66);
			ProtocolParser.WriteBytes(stream, instance.logo);
		}
		stream.WriteByte(72);
		ProtocolParser.WriteZInt32(stream, instance.color);
		if (instance.roles != null)
		{
			for (int i = 0; i < instance.roles.Count; i++)
			{
				Role role = instance.roles[i];
				stream.WriteByte(82);
				memoryStream.SetLength(0L);
				Role.SerializeDelta(memoryStream, role, role);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.members != null)
		{
			for (int j = 0; j < instance.members.Count; j++)
			{
				Member member = instance.members[j];
				stream.WriteByte(90);
				memoryStream.SetLength(0L);
				Member.SerializeDelta(memoryStream, member, member);
				uint num2 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
			}
		}
		if (instance.invites != null)
		{
			for (int k = 0; k < instance.invites.Count; k++)
			{
				Invite invite = instance.invites[k];
				stream.WriteByte(98);
				memoryStream.SetLength(0L);
				Invite.SerializeDelta(memoryStream, invite, invite);
				uint num3 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num3);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num3);
			}
		}
		if (instance.maxMemberCount != previous.maxMemberCount)
		{
			stream.WriteByte(104);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.maxMemberCount);
		}
		stream.WriteByte(112);
		ProtocolParser.WriteUInt64(stream, (ulong)instance.score);
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, ClanInfo instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.clanId != 0L)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.clanId);
		}
		if (instance.name == null)
		{
			throw new ArgumentNullException("name", "Required by proto specification.");
		}
		stream.WriteByte(18);
		ProtocolParser.WriteString(stream, instance.name);
		if (instance.created != 0L)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.created);
		}
		if (instance.creator != 0L)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, instance.creator);
		}
		if (instance.motd != null)
		{
			stream.WriteByte(42);
			ProtocolParser.WriteString(stream, instance.motd);
		}
		if (instance.motdTimestamp != 0L)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.motdTimestamp);
		}
		if (instance.motdAuthor != 0L)
		{
			stream.WriteByte(56);
			ProtocolParser.WriteUInt64(stream, instance.motdAuthor);
		}
		if (instance.logo != null)
		{
			stream.WriteByte(66);
			ProtocolParser.WriteBytes(stream, instance.logo);
		}
		if (instance.color != 0)
		{
			stream.WriteByte(72);
			ProtocolParser.WriteZInt32(stream, instance.color);
		}
		if (instance.roles != null)
		{
			for (int i = 0; i < instance.roles.Count; i++)
			{
				Role instance2 = instance.roles[i];
				stream.WriteByte(82);
				memoryStream.SetLength(0L);
				Role.Serialize(memoryStream, instance2);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.members != null)
		{
			for (int j = 0; j < instance.members.Count; j++)
			{
				Member instance3 = instance.members[j];
				stream.WriteByte(90);
				memoryStream.SetLength(0L);
				Member.Serialize(memoryStream, instance3);
				uint num2 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
			}
		}
		if (instance.invites != null)
		{
			for (int k = 0; k < instance.invites.Count; k++)
			{
				Invite instance4 = instance.invites[k];
				stream.WriteByte(98);
				memoryStream.SetLength(0L);
				Invite.Serialize(memoryStream, instance4);
				uint num3 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num3);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num3);
			}
		}
		if (instance.maxMemberCount != 0)
		{
			stream.WriteByte(104);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.maxMemberCount);
		}
		if (instance.score != 0L)
		{
			stream.WriteByte(112);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.score);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(ClanInfo instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, ClanInfo instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (roles != null)
		{
			for (int i = 0; i < roles.Count; i++)
			{
				roles[i]?.InspectUids(action);
			}
		}
		if (members != null)
		{
			for (int j = 0; j < members.Count; j++)
			{
				members[j]?.InspectUids(action);
			}
		}
		if (invites != null)
		{
			for (int k = 0; k < invites.Count; k++)
			{
				invites[k]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class ClanLog : IDisposable, IPooled, IProto
{
	public class Entry : IDisposable, IPooled, IProto
	{
		[NonSerialized]
		public long timestamp;

		[NonSerialized]
		public string eventKey;

		[NonSerialized]
		public string arg1;

		[NonSerialized]
		public string arg2;

		[NonSerialized]
		public string arg3;

		[NonSerialized]
		public string arg4;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(Entry instance)
		{
			if (instance.ShouldPool)
			{
				instance.timestamp = 0L;
				instance.eventKey = string.Empty;
				instance.arg1 = string.Empty;
				instance.arg2 = string.Empty;
				instance.arg3 = string.Empty;
				instance.arg4 = string.Empty;
				Pool.Free<Entry>(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose Entry with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(Entry instance)
		{
			instance.timestamp = timestamp;
			instance.eventKey = eventKey;
			instance.arg1 = arg1;
			instance.arg2 = arg2;
			instance.arg3 = arg3;
			instance.arg4 = arg4;
		}

		public Entry Copy()
		{
			Entry entry = Pool.Get<Entry>();
			CopyTo(entry);
			return entry;
		}

		public static Entry Deserialize(Stream stream)
		{
			Entry entry = Pool.Get<Entry>();
			Deserialize(stream, entry, isDelta: false);
			return entry;
		}

		public static Entry DeserializeLengthDelimited(Stream stream)
		{
			Entry entry = Pool.Get<Entry>();
			DeserializeLengthDelimited(stream, entry, isDelta: false);
			return entry;
		}

		public static Entry DeserializeLength(Stream stream, int length)
		{
			Entry entry = Pool.Get<Entry>();
			DeserializeLength(stream, length, entry, isDelta: false);
			return entry;
		}

		public static Entry Deserialize(byte[] buffer)
		{
			Entry entry = Pool.Get<Entry>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, entry, isDelta: false);
			return entry;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, Entry previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static Entry Deserialize(byte[] buffer, Entry instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static Entry Deserialize(Stream stream, Entry instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.timestamp = 0L;
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.timestamp = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case 18:
					instance.eventKey = ProtocolParser.ReadString(stream);
					continue;
				case 26:
					instance.arg1 = ProtocolParser.ReadString(stream);
					continue;
				case 34:
					instance.arg2 = ProtocolParser.ReadString(stream);
					continue;
				case 42:
					instance.arg3 = ProtocolParser.ReadString(stream);
					continue;
				case 50:
					instance.arg4 = ProtocolParser.ReadString(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static Entry DeserializeLengthDelimited(Stream stream, Entry instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.timestamp = 0L;
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.timestamp = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case 18:
					instance.eventKey = ProtocolParser.ReadString(stream);
					continue;
				case 26:
					instance.arg1 = ProtocolParser.ReadString(stream);
					continue;
				case 34:
					instance.arg2 = ProtocolParser.ReadString(stream);
					continue;
				case 42:
					instance.arg3 = ProtocolParser.ReadString(stream);
					continue;
				case 50:
					instance.arg4 = ProtocolParser.ReadString(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static Entry DeserializeLength(Stream stream, int length, Entry instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.timestamp = 0L;
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.timestamp = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case 18:
					instance.eventKey = ProtocolParser.ReadString(stream);
					continue;
				case 26:
					instance.arg1 = ProtocolParser.ReadString(stream);
					continue;
				case 34:
					instance.arg2 = ProtocolParser.ReadString(stream);
					continue;
				case 42:
					instance.arg3 = ProtocolParser.ReadString(stream);
					continue;
				case 50:
					instance.arg4 = ProtocolParser.ReadString(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, Entry instance, Entry previous)
		{
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.timestamp);
			if (instance.eventKey != previous.eventKey)
			{
				if (instance.eventKey == null)
				{
					throw new ArgumentNullException("eventKey", "Required by proto specification.");
				}
				stream.WriteByte(18);
				ProtocolParser.WriteString(stream, instance.eventKey);
			}
			if (instance.arg1 != null && instance.arg1 != previous.arg1)
			{
				stream.WriteByte(26);
				ProtocolParser.WriteString(stream, instance.arg1);
			}
			if (instance.arg2 != null && instance.arg2 != previous.arg2)
			{
				stream.WriteByte(34);
				ProtocolParser.WriteString(stream, instance.arg2);
			}
			if (instance.arg3 != null && instance.arg3 != previous.arg3)
			{
				stream.WriteByte(42);
				ProtocolParser.WriteString(stream, instance.arg3);
			}
			if (instance.arg4 != null && instance.arg4 != previous.arg4)
			{
				stream.WriteByte(50);
				ProtocolParser.WriteString(stream, instance.arg4);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public static void Serialize(Stream stream, Entry instance)
		{
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.timestamp != 0L)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.timestamp);
			}
			if (instance.eventKey == null)
			{
				throw new ArgumentNullException("eventKey", "Required by proto specification.");
			}
			stream.WriteByte(18);
			ProtocolParser.WriteString(stream, instance.eventKey);
			if (instance.arg1 != null)
			{
				stream.WriteByte(26);
				ProtocolParser.WriteString(stream, instance.arg1);
			}
			if (instance.arg2 != null)
			{
				stream.WriteByte(34);
				ProtocolParser.WriteString(stream, instance.arg2);
			}
			if (instance.arg3 != null)
			{
				stream.WriteByte(42);
				ProtocolParser.WriteString(stream, instance.arg3);
			}
			if (instance.arg4 != null)
			{
				stream.WriteByte(50);
				ProtocolParser.WriteString(stream, instance.arg4);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(Entry instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, Entry instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	[NonSerialized]
	public long clanId;

	[NonSerialized]
	public List<Entry> logEntries;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(ClanLog instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		instance.clanId = 0L;
		if (instance.logEntries != null)
		{
			for (int i = 0; i < instance.logEntries.Count; i++)
			{
				if (instance.logEntries[i] != null)
				{
					instance.logEntries[i].ResetToPool();
					instance.logEntries[i] = null;
				}
			}
			List<Entry> list = instance.logEntries;
			Pool.Free<Entry>(ref list, false);
			instance.logEntries = list;
		}
		Pool.Free<ClanLog>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose ClanLog with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(ClanLog instance)
	{
		instance.clanId = clanId;
		if (logEntries != null)
		{
			instance.logEntries = Pool.Get<List<Entry>>();
			for (int i = 0; i < logEntries.Count; i++)
			{
				Entry item = logEntries[i].Copy();
				instance.logEntries.Add(item);
			}
		}
		else
		{
			instance.logEntries = null;
		}
	}

	public ClanLog Copy()
	{
		ClanLog clanLog = Pool.Get<ClanLog>();
		CopyTo(clanLog);
		return clanLog;
	}

	public static ClanLog Deserialize(Stream stream)
	{
		ClanLog clanLog = Pool.Get<ClanLog>();
		Deserialize(stream, clanLog, isDelta: false);
		return clanLog;
	}

	public static ClanLog DeserializeLengthDelimited(Stream stream)
	{
		ClanLog clanLog = Pool.Get<ClanLog>();
		DeserializeLengthDelimited(stream, clanLog, isDelta: false);
		return clanLog;
	}

	public static ClanLog DeserializeLength(Stream stream, int length)
	{
		ClanLog clanLog = Pool.Get<ClanLog>();
		DeserializeLength(stream, length, clanLog, isDelta: false);
		return clanLog;
	}

	public static ClanLog Deserialize(byte[] buffer)
	{
		ClanLog clanLog = Pool.Get<ClanLog>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, clanLog, isDelta: false);
		return clanLog;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, ClanLog previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static ClanLog Deserialize(byte[] buffer, ClanLog instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static ClanLog Deserialize(Stream stream, ClanLog instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.clanId = 0L;
			if (instance.logEntries == null)
			{
				instance.logEntries = Pool.Get<List<Entry>>();
			}
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.clanId = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.logEntries.Add(Entry.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static ClanLog DeserializeLengthDelimited(Stream stream, ClanLog instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.clanId = 0L;
			if (instance.logEntries == null)
			{
				instance.logEntries = Pool.Get<List<Entry>>();
			}
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.clanId = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.logEntries.Add(Entry.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static ClanLog DeserializeLength(Stream stream, int length, ClanLog instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.clanId = 0L;
			if (instance.logEntries == null)
			{
				instance.logEntries = Pool.Get<List<Entry>>();
			}
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.clanId = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.logEntries.Add(Entry.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, ClanLog instance, ClanLog previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		stream.WriteByte(8);
		ProtocolParser.WriteUInt64(stream, (ulong)instance.clanId);
		if (instance.logEntries != null)
		{
			for (int i = 0; i < instance.logEntries.Count; i++)
			{
				Entry entry = instance.logEntries[i];
				stream.WriteByte(18);
				memoryStream.SetLength(0L);
				Entry.SerializeDelta(memoryStream, entry, entry);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, ClanLog instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.clanId != 0L)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.clanId);
		}
		if (instance.logEntries != null)
		{
			for (int i = 0; i < instance.logEntries.Count; i++)
			{
				Entry instance2 = instance.logEntries[i];
				stream.WriteByte(18);
				memoryStream.SetLength(0L);
				Entry.Serialize(memoryStream, instance2);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(ClanLog instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, ClanLog instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (logEntries != null)
		{
			for (int i = 0; i < logEntries.Count; i++)
			{
				logEntries[i]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class ClanScoreEvents : IDisposable, IPooled, IProto
{
	public class Entry : IDisposable, IPooled, IProto
	{
		[NonSerialized]
		public long timestamp;

		[NonSerialized]
		public int type;

		[NonSerialized]
		public int score;

		[NonSerialized]
		public int multiplier;

		[NonSerialized]
		public ulong steamId;

		[NonSerialized]
		public ulong otherSteamId;

		[NonSerialized]
		public long otherClanId;

		[NonSerialized]
		public string arg1;

		[NonSerialized]
		public string arg2;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(Entry instance)
		{
			if (instance.ShouldPool)
			{
				instance.timestamp = 0L;
				instance.type = 0;
				instance.score = 0;
				instance.multiplier = 0;
				instance.steamId = 0uL;
				instance.otherSteamId = 0uL;
				instance.otherClanId = 0L;
				instance.arg1 = string.Empty;
				instance.arg2 = string.Empty;
				Pool.Free<Entry>(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose Entry with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(Entry instance)
		{
			instance.timestamp = timestamp;
			instance.type = type;
			instance.score = score;
			instance.multiplier = multiplier;
			instance.steamId = steamId;
			instance.otherSteamId = otherSteamId;
			instance.otherClanId = otherClanId;
			instance.arg1 = arg1;
			instance.arg2 = arg2;
		}

		public Entry Copy()
		{
			Entry entry = Pool.Get<Entry>();
			CopyTo(entry);
			return entry;
		}

		public static Entry Deserialize(Stream stream)
		{
			Entry entry = Pool.Get<Entry>();
			Deserialize(stream, entry, isDelta: false);
			return entry;
		}

		public static Entry DeserializeLengthDelimited(Stream stream)
		{
			Entry entry = Pool.Get<Entry>();
			DeserializeLengthDelimited(stream, entry, isDelta: false);
			return entry;
		}

		public static Entry DeserializeLength(Stream stream, int length)
		{
			Entry entry = Pool.Get<Entry>();
			DeserializeLength(stream, length, entry, isDelta: false);
			return entry;
		}

		public static Entry Deserialize(byte[] buffer)
		{
			Entry entry = Pool.Get<Entry>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, entry, isDelta: false);
			return entry;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, Entry previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static Entry Deserialize(byte[] buffer, Entry instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static Entry Deserialize(Stream stream, Entry instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.timestamp = 0L;
				instance.type = 0;
				instance.score = 0;
				instance.multiplier = 0;
				instance.steamId = 0uL;
				instance.otherSteamId = 0uL;
				instance.otherClanId = 0L;
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.timestamp = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.type = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.score = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 32:
					instance.multiplier = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 40:
					instance.steamId = ProtocolParser.ReadUInt64(stream);
					continue;
				case 48:
					instance.otherSteamId = ProtocolParser.ReadUInt64(stream);
					continue;
				case 56:
					instance.otherClanId = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case 66:
					instance.arg1 = ProtocolParser.ReadString(stream);
					continue;
				case 74:
					instance.arg2 = ProtocolParser.ReadString(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static Entry DeserializeLengthDelimited(Stream stream, Entry instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.timestamp = 0L;
				instance.type = 0;
				instance.score = 0;
				instance.multiplier = 0;
				instance.steamId = 0uL;
				instance.otherSteamId = 0uL;
				instance.otherClanId = 0L;
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.timestamp = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.type = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.score = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 32:
					instance.multiplier = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 40:
					instance.steamId = ProtocolParser.ReadUInt64(stream);
					continue;
				case 48:
					instance.otherSteamId = ProtocolParser.ReadUInt64(stream);
					continue;
				case 56:
					instance.otherClanId = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case 66:
					instance.arg1 = ProtocolParser.ReadString(stream);
					continue;
				case 74:
					instance.arg2 = ProtocolParser.ReadString(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static Entry DeserializeLength(Stream stream, int length, Entry instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.timestamp = 0L;
				instance.type = 0;
				instance.score = 0;
				instance.multiplier = 0;
				instance.steamId = 0uL;
				instance.otherSteamId = 0uL;
				instance.otherClanId = 0L;
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.timestamp = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.type = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.score = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 32:
					instance.multiplier = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 40:
					instance.steamId = ProtocolParser.ReadUInt64(stream);
					continue;
				case 48:
					instance.otherSteamId = ProtocolParser.ReadUInt64(stream);
					continue;
				case 56:
					instance.otherClanId = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case 66:
					instance.arg1 = ProtocolParser.ReadString(stream);
					continue;
				case 74:
					instance.arg2 = ProtocolParser.ReadString(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, Entry instance, Entry previous)
		{
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.timestamp);
			if (instance.type != previous.type)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.type);
			}
			if (instance.score != previous.score)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.score);
			}
			if (instance.multiplier != previous.multiplier)
			{
				stream.WriteByte(32);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.multiplier);
			}
			if (instance.steamId != previous.steamId)
			{
				stream.WriteByte(40);
				ProtocolParser.WriteUInt64(stream, instance.steamId);
			}
			if (instance.otherSteamId != previous.otherSteamId)
			{
				stream.WriteByte(48);
				ProtocolParser.WriteUInt64(stream, instance.otherSteamId);
			}
			stream.WriteByte(56);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.otherClanId);
			if (instance.arg1 != null && instance.arg1 != previous.arg1)
			{
				stream.WriteByte(66);
				ProtocolParser.WriteString(stream, instance.arg1);
			}
			if (instance.arg2 != null && instance.arg2 != previous.arg2)
			{
				stream.WriteByte(74);
				ProtocolParser.WriteString(stream, instance.arg2);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public static void Serialize(Stream stream, Entry instance)
		{
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.timestamp != 0L)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.timestamp);
			}
			if (instance.type != 0)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.type);
			}
			if (instance.score != 0)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.score);
			}
			if (instance.multiplier != 0)
			{
				stream.WriteByte(32);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.multiplier);
			}
			if (instance.steamId != 0L)
			{
				stream.WriteByte(40);
				ProtocolParser.WriteUInt64(stream, instance.steamId);
			}
			if (instance.otherSteamId != 0L)
			{
				stream.WriteByte(48);
				ProtocolParser.WriteUInt64(stream, instance.otherSteamId);
			}
			if (instance.otherClanId != 0L)
			{
				stream.WriteByte(56);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.otherClanId);
			}
			if (instance.arg1 != null)
			{
				stream.WriteByte(66);
				ProtocolParser.WriteString(stream, instance.arg1);
			}
			if (instance.arg2 != null)
			{
				stream.WriteByte(74);
				ProtocolParser.WriteString(stream, instance.arg2);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(Entry instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, Entry instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	[NonSerialized]
	public long clanId;

	[NonSerialized]
	public List<Entry> scoreEvents;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(ClanScoreEvents instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		instance.clanId = 0L;
		if (instance.scoreEvents != null)
		{
			for (int i = 0; i < instance.scoreEvents.Count; i++)
			{
				if (instance.scoreEvents[i] != null)
				{
					instance.scoreEvents[i].ResetToPool();
					instance.scoreEvents[i] = null;
				}
			}
			List<Entry> list = instance.scoreEvents;
			Pool.Free<Entry>(ref list, false);
			instance.scoreEvents = list;
		}
		Pool.Free<ClanScoreEvents>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose ClanScoreEvents with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(ClanScoreEvents instance)
	{
		instance.clanId = clanId;
		if (scoreEvents != null)
		{
			instance.scoreEvents = Pool.Get<List<Entry>>();
			for (int i = 0; i < scoreEvents.Count; i++)
			{
				Entry item = scoreEvents[i].Copy();
				instance.scoreEvents.Add(item);
			}
		}
		else
		{
			instance.scoreEvents = null;
		}
	}

	public ClanScoreEvents Copy()
	{
		ClanScoreEvents clanScoreEvents = Pool.Get<ClanScoreEvents>();
		CopyTo(clanScoreEvents);
		return clanScoreEvents;
	}

	public static ClanScoreEvents Deserialize(Stream stream)
	{
		ClanScoreEvents clanScoreEvents = Pool.Get<ClanScoreEvents>();
		Deserialize(stream, clanScoreEvents, isDelta: false);
		return clanScoreEvents;
	}

	public static ClanScoreEvents DeserializeLengthDelimited(Stream stream)
	{
		ClanScoreEvents clanScoreEvents = Pool.Get<ClanScoreEvents>();
		DeserializeLengthDelimited(stream, clanScoreEvents, isDelta: false);
		return clanScoreEvents;
	}

	public static ClanScoreEvents DeserializeLength(Stream stream, int length)
	{
		ClanScoreEvents clanScoreEvents = Pool.Get<ClanScoreEvents>();
		DeserializeLength(stream, length, clanScoreEvents, isDelta: false);
		return clanScoreEvents;
	}

	public static ClanScoreEvents Deserialize(byte[] buffer)
	{
		ClanScoreEvents clanScoreEvents = Pool.Get<ClanScoreEvents>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, clanScoreEvents, isDelta: false);
		return clanScoreEvents;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, ClanScoreEvents previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static ClanScoreEvents Deserialize(byte[] buffer, ClanScoreEvents instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static ClanScoreEvents Deserialize(Stream stream, ClanScoreEvents instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.clanId = 0L;
			if (instance.scoreEvents == null)
			{
				instance.scoreEvents = Pool.Get<List<Entry>>();
			}
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.clanId = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.scoreEvents.Add(Entry.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static ClanScoreEvents DeserializeLengthDelimited(Stream stream, ClanScoreEvents instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.clanId = 0L;
			if (instance.scoreEvents == null)
			{
				instance.scoreEvents = Pool.Get<List<Entry>>();
			}
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.clanId = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.scoreEvents.Add(Entry.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static ClanScoreEvents DeserializeLength(Stream stream, int length, ClanScoreEvents instance, bool isDelta)
	{
		if (!isDelta)
		{
			instance.clanId = 0L;
			if (instance.scoreEvents == null)
			{
				instance.scoreEvents = Pool.Get<List<Entry>>();
			}
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.clanId = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.scoreEvents.Add(Entry.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, ClanScoreEvents instance, ClanScoreEvents previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		stream.WriteByte(8);
		ProtocolParser.WriteUInt64(stream, (ulong)instance.clanId);
		if (instance.scoreEvents != null)
		{
			for (int i = 0; i < instance.scoreEvents.Count; i++)
			{
				Entry entry = instance.scoreEvents[i];
				stream.WriteByte(18);
				memoryStream.SetLength(0L);
				Entry.SerializeDelta(memoryStream, entry, entry);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, ClanScoreEvents instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.clanId != 0L)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.clanId);
		}
		if (instance.scoreEvents != null)
		{
			for (int i = 0; i < instance.scoreEvents.Count; i++)
			{
				Entry instance2 = instance.scoreEvents[i];
				stream.WriteByte(18);
				memoryStream.SetLength(0L);
				Entry.Serialize(memoryStream, instance2);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(ClanScoreEvents instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, ClanScoreEvents instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (scoreEvents != null)
		{
			for (int i = 0; i < scoreEvents.Count; i++)
			{
				scoreEvents[i]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class ClanInvitations : IDisposable, IPooled, IProto
{
	public class Invitation : IDisposable, IPooled, IProto
	{
		[NonSerialized]
		public long clanId;

		[NonSerialized]
		public ulong recruiter;

		[NonSerialized]
		public long timestamp;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(Invitation instance)
		{
			if (instance.ShouldPool)
			{
				instance.clanId = 0L;
				instance.recruiter = 0uL;
				instance.timestamp = 0L;
				Pool.Free<Invitation>(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose Invitation with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(Invitation instance)
		{
			instance.clanId = clanId;
			instance.recruiter = recruiter;
			instance.timestamp = timestamp;
		}

		public Invitation Copy()
		{
			Invitation invitation = Pool.Get<Invitation>();
			CopyTo(invitation);
			return invitation;
		}

		public static Invitation Deserialize(Stream stream)
		{
			Invitation invitation = Pool.Get<Invitation>();
			Deserialize(stream, invitation, isDelta: false);
			return invitation;
		}

		public static Invitation DeserializeLengthDelimited(Stream stream)
		{
			Invitation invitation = Pool.Get<Invitation>();
			DeserializeLengthDelimited(stream, invitation, isDelta: false);
			return invitation;
		}

		public static Invitation DeserializeLength(Stream stream, int length)
		{
			Invitation invitation = Pool.Get<Invitation>();
			DeserializeLength(stream, length, invitation, isDelta: false);
			return invitation;
		}

		public static Invitation Deserialize(byte[] buffer)
		{
			Invitation invitation = Pool.Get<Invitation>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, invitation, isDelta: false);
			return invitation;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, Invitation previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static Invitation Deserialize(byte[] buffer, Invitation instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static Invitation Deserialize(Stream stream, Invitation instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.clanId = 0L;
				instance.recruiter = 0uL;
				instance.timestamp = 0L;
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.clanId = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.recruiter = ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.timestamp = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static Invitation DeserializeLengthDelimited(Stream stream, Invitation instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.clanId = 0L;
				instance.recruiter = 0uL;
				instance.timestamp = 0L;
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.clanId = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.recruiter = ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.timestamp = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static Invitation DeserializeLength(Stream stream, int length, Invitation instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.clanId = 0L;
				instance.recruiter = 0uL;
				instance.timestamp = 0L;
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.clanId = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.recruiter = ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.timestamp = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, Invitation instance, Invitation previous)
		{
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.clanId);
			if (instance.recruiter != previous.recruiter)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, instance.recruiter);
			}
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.timestamp);
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public static void Serialize(Stream stream, Invitation instance)
		{
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.clanId != 0L)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.clanId);
			}
			if (instance.recruiter != 0L)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, instance.recruiter);
			}
			if (instance.timestamp != 0L)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.timestamp);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(Invitation instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, Invitation instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	[NonSerialized]
	public List<Invitation> invitations;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(ClanInvitations instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.invitations != null)
		{
			for (int i = 0; i < instance.invitations.Count; i++)
			{
				if (instance.invitations[i] != null)
				{
					instance.invitations[i].ResetToPool();
					instance.invitations[i] = null;
				}
			}
			List<Invitation> list = instance.invitations;
			Pool.Free<Invitation>(ref list, false);
			instance.invitations = list;
		}
		Pool.Free<ClanInvitations>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose ClanInvitations with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(ClanInvitations instance)
	{
		if (invitations != null)
		{
			instance.invitations = Pool.Get<List<Invitation>>();
			for (int i = 0; i < invitations.Count; i++)
			{
				Invitation item = invitations[i].Copy();
				instance.invitations.Add(item);
			}
		}
		else
		{
			instance.invitations = null;
		}
	}

	public ClanInvitations Copy()
	{
		ClanInvitations clanInvitations = Pool.Get<ClanInvitations>();
		CopyTo(clanInvitations);
		return clanInvitations;
	}

	public static ClanInvitations Deserialize(Stream stream)
	{
		ClanInvitations clanInvitations = Pool.Get<ClanInvitations>();
		Deserialize(stream, clanInvitations, isDelta: false);
		return clanInvitations;
	}

	public static ClanInvitations DeserializeLengthDelimited(Stream stream)
	{
		ClanInvitations clanInvitations = Pool.Get<ClanInvitations>();
		DeserializeLengthDelimited(stream, clanInvitations, isDelta: false);
		return clanInvitations;
	}

	public static ClanInvitations DeserializeLength(Stream stream, int length)
	{
		ClanInvitations clanInvitations = Pool.Get<ClanInvitations>();
		DeserializeLength(stream, length, clanInvitations, isDelta: false);
		return clanInvitations;
	}

	public static ClanInvitations Deserialize(byte[] buffer)
	{
		ClanInvitations clanInvitations = Pool.Get<ClanInvitations>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, clanInvitations, isDelta: false);
		return clanInvitations;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, ClanInvitations previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static ClanInvitations Deserialize(byte[] buffer, ClanInvitations instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static ClanInvitations Deserialize(Stream stream, ClanInvitations instance, bool isDelta)
	{
		if (!isDelta && instance.invitations == null)
		{
			instance.invitations = Pool.Get<List<Invitation>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.invitations.Add(Invitation.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static ClanInvitations DeserializeLengthDelimited(Stream stream, ClanInvitations instance, bool isDelta)
	{
		if (!isDelta && instance.invitations == null)
		{
			instance.invitations = Pool.Get<List<Invitation>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.invitations.Add(Invitation.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static ClanInvitations DeserializeLength(Stream stream, int length, ClanInvitations instance, bool isDelta)
	{
		if (!isDelta && instance.invitations == null)
		{
			instance.invitations = Pool.Get<List<Invitation>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.invitations.Add(Invitation.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, ClanInvitations instance, ClanInvitations previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.invitations != null)
		{
			for (int i = 0; i < instance.invitations.Count; i++)
			{
				Invitation invitation = instance.invitations[i];
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				Invitation.SerializeDelta(memoryStream, invitation, invitation);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, ClanInvitations instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.invitations != null)
		{
			for (int i = 0; i < instance.invitations.Count; i++)
			{
				Invitation instance2 = instance.invitations[i];
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				Invitation.Serialize(memoryStream, instance2);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(ClanInvitations instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, ClanInvitations instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (invitations != null)
		{
			for (int i = 0; i < invitations.Count; i++)
			{
				invitations[i]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class ClanLeaderboard : IDisposable, IPooled, IProto
{
	public class Entry : IDisposable, IPooled, IProto
	{
		[NonSerialized]
		public long clanId;

		[NonSerialized]
		public string name;

		[NonSerialized]
		public long score;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(Entry instance)
		{
			if (instance.ShouldPool)
			{
				instance.clanId = 0L;
				instance.name = string.Empty;
				instance.score = 0L;
				Pool.Free<Entry>(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose Entry with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(Entry instance)
		{
			instance.clanId = clanId;
			instance.name = name;
			instance.score = score;
		}

		public Entry Copy()
		{
			Entry entry = Pool.Get<Entry>();
			CopyTo(entry);
			return entry;
		}

		public static Entry Deserialize(Stream stream)
		{
			Entry entry = Pool.Get<Entry>();
			Deserialize(stream, entry, isDelta: false);
			return entry;
		}

		public static Entry DeserializeLengthDelimited(Stream stream)
		{
			Entry entry = Pool.Get<Entry>();
			DeserializeLengthDelimited(stream, entry, isDelta: false);
			return entry;
		}

		public static Entry DeserializeLength(Stream stream, int length)
		{
			Entry entry = Pool.Get<Entry>();
			DeserializeLength(stream, length, entry, isDelta: false);
			return entry;
		}

		public static Entry Deserialize(byte[] buffer)
		{
			Entry entry = Pool.Get<Entry>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, entry, isDelta: false);
			return entry;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, Entry previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static Entry Deserialize(byte[] buffer, Entry instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static Entry Deserialize(Stream stream, Entry instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.clanId = 0L;
				instance.score = 0L;
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.clanId = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case 18:
					instance.name = ProtocolParser.ReadString(stream);
					continue;
				case 24:
					instance.score = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static Entry DeserializeLengthDelimited(Stream stream, Entry instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.clanId = 0L;
				instance.score = 0L;
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.clanId = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case 18:
					instance.name = ProtocolParser.ReadString(stream);
					continue;
				case 24:
					instance.score = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static Entry DeserializeLength(Stream stream, int length, Entry instance, bool isDelta)
		{
			if (!isDelta)
			{
				instance.clanId = 0L;
				instance.score = 0L;
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.clanId = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case 18:
					instance.name = ProtocolParser.ReadString(stream);
					continue;
				case 24:
					instance.score = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, Entry instance, Entry previous)
		{
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.clanId);
			if (instance.name != previous.name)
			{
				if (instance.name == null)
				{
					throw new ArgumentNullException("name", "Required by proto specification.");
				}
				stream.WriteByte(18);
				ProtocolParser.WriteString(stream, instance.name);
			}
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.score);
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public static void Serialize(Stream stream, Entry instance)
		{
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.clanId != 0L)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.clanId);
			}
			if (instance.name == null)
			{
				throw new ArgumentNullException("name", "Required by proto specification.");
			}
			stream.WriteByte(18);
			ProtocolParser.WriteString(stream, instance.name);
			if (instance.score != 0L)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.score);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(Entry instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, Entry instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	[NonSerialized]
	public List<Entry> entries;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(ClanLeaderboard instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.entries != null)
		{
			for (int i = 0; i < instance.entries.Count; i++)
			{
				if (instance.entries[i] != null)
				{
					instance.entries[i].ResetToPool();
					instance.entries[i] = null;
				}
			}
			List<Entry> list = instance.entries;
			Pool.Free<Entry>(ref list, false);
			instance.entries = list;
		}
		Pool.Free<ClanLeaderboard>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose ClanLeaderboard with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(ClanLeaderboard instance)
	{
		if (entries != null)
		{
			instance.entries = Pool.Get<List<Entry>>();
			for (int i = 0; i < entries.Count; i++)
			{
				Entry item = entries[i].Copy();
				instance.entries.Add(item);
			}
		}
		else
		{
			instance.entries = null;
		}
	}

	public ClanLeaderboard Copy()
	{
		ClanLeaderboard clanLeaderboard = Pool.Get<ClanLeaderboard>();
		CopyTo(clanLeaderboard);
		return clanLeaderboard;
	}

	public static ClanLeaderboard Deserialize(Stream stream)
	{
		ClanLeaderboard clanLeaderboard = Pool.Get<ClanLeaderboard>();
		Deserialize(stream, clanLeaderboard, isDelta: false);
		return clanLeaderboard;
	}

	public static ClanLeaderboard DeserializeLengthDelimited(Stream stream)
	{
		ClanLeaderboard clanLeaderboard = Pool.Get<ClanLeaderboard>();
		DeserializeLengthDelimited(stream, clanLeaderboard, isDelta: false);
		return clanLeaderboard;
	}

	public static ClanLeaderboard DeserializeLength(Stream stream, int length)
	{
		ClanLeaderboard clanLeaderboard = Pool.Get<ClanLeaderboard>();
		DeserializeLength(stream, length, clanLeaderboard, isDelta: false);
		return clanLeaderboard;
	}

	public static ClanLeaderboard Deserialize(byte[] buffer)
	{
		ClanLeaderboard clanLeaderboard = Pool.Get<ClanLeaderboard>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, clanLeaderboard, isDelta: false);
		return clanLeaderboard;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, ClanLeaderboard previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static ClanLeaderboard Deserialize(byte[] buffer, ClanLeaderboard instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static ClanLeaderboard Deserialize(Stream stream, ClanLeaderboard instance, bool isDelta)
	{
		if (!isDelta && instance.entries == null)
		{
			instance.entries = Pool.Get<List<Entry>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.entries.Add(Entry.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static ClanLeaderboard DeserializeLengthDelimited(Stream stream, ClanLeaderboard instance, bool isDelta)
	{
		if (!isDelta && instance.entries == null)
		{
			instance.entries = Pool.Get<List<Entry>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.entries.Add(Entry.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static ClanLeaderboard DeserializeLength(Stream stream, int length, ClanLeaderboard instance, bool isDelta)
	{
		if (!isDelta && instance.entries == null)
		{
			instance.entries = Pool.Get<List<Entry>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.entries.Add(Entry.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, ClanLeaderboard instance, ClanLeaderboard previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.entries != null)
		{
			for (int i = 0; i < instance.entries.Count; i++)
			{
				Entry entry = instance.entries[i];
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				Entry.SerializeDelta(memoryStream, entry, entry);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, ClanLeaderboard instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.entries != null)
		{
			for (int i = 0; i < instance.entries.Count; i++)
			{
				Entry instance2 = instance.entries[i];
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				Entry.Serialize(memoryStream, instance2);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(ClanLeaderboard instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, ClanLeaderboard instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (entries != null)
		{
			for (int i = 0; i < entries.Count; i++)
			{
				entries[i]?.InspectUids(action);
			}
		}
	}
}


public enum AppEntityType
{
	Switch = 1,
	Alarm,
	StorageMonitor
}


public enum AppMarkerType
{
	Undefined,
	Player,
	Explosion,
	VendingMachine,
	CH47,
	CargoShip,
	Crate,
	GenericRadius,
	PatrolHelicopter,
	TravellingVendor
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf.Nexus;
using SilentOrbit.ProtocolBuffers;

public class Packet : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public uint protocol;

	[NonSerialized]
	public int sourceZone;

	[NonSerialized]
	public Request request;

	[NonSerialized]
	public Response response;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(Packet instance)
	{
		if (instance.ShouldPool)
		{
			instance.protocol = 0u;
			instance.sourceZone = 0;
			if (instance.request != null)
			{
				instance.request.ResetToPool();
				instance.request = null;
			}
			if (instance.response != null)
			{
				instance.response.ResetToPool();
				instance.response = null;
			}
			Pool.Free<Packet>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose Packet with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(Packet instance)
	{
		instance.protocol = protocol;
		instance.sourceZone = sourceZone;
		if (request != null)
		{
			if (instance.request == null)
			{
				instance.request = request.Copy();
			}
			else
			{
				request.CopyTo(instance.request);
			}
		}
		else
		{
			instance.request = null;
		}
		if (response != null)
		{
			if (instance.response == null)
			{
				instance.response = response.Copy();
			}
			else
			{
				response.CopyTo(instance.response);
			}
		}
		else
		{
			instance.response = null;
		}
	}

	public Packet Copy()
	{
		Packet packet = Pool.Get<Packet>();
		CopyTo(packet);
		return packet;
	}

	public static Packet Deserialize(Stream stream)
	{
		Packet packet = Pool.Get<Packet>();
		Deserialize(stream, packet, isDelta: false);
		return packet;
	}

	public static Packet DeserializeLengthDelimited(Stream stream)
	{
		Packet packet = Pool.Get<Packet>();
		DeserializeLengthDelimited(stream, packet, isDelta: false);
		return packet;
	}

	public static Packet DeserializeLength(Stream stream, int length)
	{
		Packet packet = Pool.Get<Packet>();
		DeserializeLength(stream, length, packet, isDelta: false);
		return packet;
	}

	public static Packet Deserialize(byte[] buffer)
	{
		Packet packet = Pool.Get<Packet>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, packet, isDelta: false);
		return packet;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, Packet previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static Packet Deserialize(byte[] buffer, Packet instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static Packet Deserialize(Stream stream, Packet instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.protocol = ProtocolParser.ReadUInt32(stream);
				continue;
			case 16:
				instance.sourceZone = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 26:
				if (instance.request == null)
				{
					instance.request = Request.DeserializeLengthDelimited(stream);
				}
				else
				{
					Request.DeserializeLengthDelimited(stream, instance.request, isDelta);
				}
				continue;
			case 34:
				if (instance.response == null)
				{
					instance.response = Response.DeserializeLengthDelimited(stream);
				}
				else
				{
					Response.DeserializeLengthDelimited(stream, instance.response, isDelta);
				}
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static Packet DeserializeLengthDelimited(Stream stream, Packet instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.protocol = ProtocolParser.ReadUInt32(stream);
				continue;
			case 16:
				instance.sourceZone = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 26:
				if (instance.request == null)
				{
					instance.request = Request.DeserializeLengthDelimited(stream);
				}
				else
				{
					Request.DeserializeLengthDelimited(stream, instance.request, isDelta);
				}
				continue;
			case 34:
				if (instance.response == null)
				{
					instance.response = Response.DeserializeLengthDelimited(stream);
				}
				else
				{
					Response.DeserializeLengthDelimited(stream, instance.response, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Packet DeserializeLength(Stream stream, int length, Packet instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.protocol = ProtocolParser.ReadUInt32(stream);
				continue;
			case 16:
				instance.sourceZone = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 26:
				if (instance.request == null)
				{
					instance.request = Request.DeserializeLengthDelimited(stream);
				}
				else
				{
					Request.DeserializeLengthDelimited(stream, instance.request, isDelta);
				}
				continue;
			case 34:
				if (instance.response == null)
				{
					instance.response = Response.DeserializeLengthDelimited(stream);
				}
				else
				{
					Response.DeserializeLengthDelimited(stream, instance.response, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, Packet instance, Packet previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.protocol != previous.protocol)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt32(stream, instance.protocol);
		}
		if (instance.sourceZone != previous.sourceZone)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.sourceZone);
		}
		if (instance.request != null)
		{
			stream.WriteByte(26);
			memoryStream.SetLength(0L);
			Request.SerializeDelta(memoryStream, instance.request, previous.request);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		if (instance.response != null)
		{
			stream.WriteByte(34);
			memoryStream.SetLength(0L);
			Response.SerializeDelta(memoryStream, instance.response, previous.response);
			uint num2 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, Packet instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.protocol != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt32(stream, instance.protocol);
		}
		if (instance.sourceZone != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.sourceZone);
		}
		if (instance.request != null)
		{
			stream.WriteByte(26);
			memoryStream.SetLength(0L);
			Request.Serialize(memoryStream, instance.request);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		if (instance.response != null)
		{
			stream.WriteByte(34);
			memoryStream.SetLength(0L);
			Response.Serialize(memoryStream, instance.response);
			uint num2 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(Packet instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, Packet instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		request?.InspectUids(action);
		response?.InspectUids(action);
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf.Nexus;
using SilentOrbit.ProtocolBuffers;

public class Request : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public bool isFireAndForget;

	[NonSerialized]
	public TransferRequest transfer;

	[NonSerialized]
	public PingRequest ping;

	[NonSerialized]
	public SpawnOptionsRequest spawnOptions;

	[NonSerialized]
	public SleepingBagRespawnRequest respawnAtBag;

	[NonSerialized]
	public SleepingBagDestroyRequest destroyBag;

	[NonSerialized]
	public FerryStatusRequest ferryStatus;

	[NonSerialized]
	public FerryRetireRequest ferryRetire;

	[NonSerialized]
	public FerryUpdateScheduleRequest ferryUpdateSchedule;

	[NonSerialized]
	public ClanChatBatchRequest clanChatBatch;

	[NonSerialized]
	public PlayerManifestRequest playerManifest;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(Request instance)
	{
		if (instance.ShouldPool)
		{
			instance.isFireAndForget = false;
			if (instance.transfer != null)
			{
				instance.transfer.ResetToPool();
				instance.transfer = null;
			}
			if (instance.ping != null)
			{
				instance.ping.ResetToPool();
				instance.ping = null;
			}
			if (instance.spawnOptions != null)
			{
				instance.spawnOptions.ResetToPool();
				instance.spawnOptions = null;
			}
			if (instance.respawnAtBag != null)
			{
				instance.respawnAtBag.ResetToPool();
				instance.respawnAtBag = null;
			}
			if (instance.destroyBag != null)
			{
				instance.destroyBag.ResetToPool();
				instance.destroyBag = null;
			}
			if (instance.ferryStatus != null)
			{
				instance.ferryStatus.ResetToPool();
				instance.ferryStatus = null;
			}
			if (instance.ferryRetire != null)
			{
				instance.ferryRetire.ResetToPool();
				instance.ferryRetire = null;
			}
			if (instance.ferryUpdateSchedule != null)
			{
				instance.ferryUpdateSchedule.ResetToPool();
				instance.ferryUpdateSchedule = null;
			}
			if (instance.clanChatBatch != null)
			{
				instance.clanChatBatch.ResetToPool();
				instance.clanChatBatch = null;
			}
			if (instance.playerManifest != null)
			{
				instance.playerManifest.ResetToPool();
				instance.playerManifest = null;
			}
			Pool.Free<Request>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose Request with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(Request instance)
	{
		instance.isFireAndForget = isFireAndForget;
		if (transfer != null)
		{
			if (instance.transfer == null)
			{
				instance.transfer = transfer.Copy();
			}
			else
			{
				transfer.CopyTo(instance.transfer);
			}
		}
		else
		{
			instance.transfer = null;
		}
		if (ping != null)
		{
			if (instance.ping == null)
			{
				instance.ping = ping.Copy();
			}
			else
			{
				ping.CopyTo(instance.ping);
			}
		}
		else
		{
			instance.ping = null;
		}
		if (spawnOptions != null)
		{
			if (instance.spawnOptions == null)
			{
				instance.spawnOptions = spawnOptions.Copy();
			}
			else
			{
				spawnOptions.CopyTo(instance.spawnOptions);
			}
		}
		else
		{
			instance.spawnOptions = null;
		}
		if (respawnAtBag != null)
		{
			if (instance.respawnAtBag == null)
			{
				instance.respawnAtBag = respawnAtBag.Copy();
			}
			else
			{
				respawnAtBag.CopyTo(instance.respawnAtBag);
			}
		}
		else
		{
			instance.respawnAtBag = null;
		}
		if (destroyBag != null)
		{
			if (instance.destroyBag == null)
			{
				instance.destroyBag = destroyBag.Copy();
			}
			else
			{
				destroyBag.CopyTo(instance.destroyBag);
			}
		}
		else
		{
			instance.destroyBag = null;
		}
		if (ferryStatus != null)
		{
			if (instance.ferryStatus == null)
			{
				instance.ferryStatus = ferryStatus.Copy();
			}
			else
			{
				ferryStatus.CopyTo(instance.ferryStatus);
			}
		}
		else
		{
			instance.ferryStatus = null;
		}
		if (ferryRetire != null)
		{
			if (instance.ferryRetire == null)
			{
				instance.ferryRetire = ferryRetire.Copy();
			}
			else
			{
				ferryRetire.CopyTo(instance.ferryRetire);
			}
		}
		else
		{
			instance.ferryRetire = null;
		}
		if (ferryUpdateSchedule != null)
		{
			if (instance.ferryUpdateSchedule == null)
			{
				instance.ferryUpdateSchedule = ferryUpdateSchedule.Copy();
			}
			else
			{
				ferryUpdateSchedule.CopyTo(instance.ferryUpdateSchedule);
			}
		}
		else
		{
			instance.ferryUpdateSchedule = null;
		}
		if (clanChatBatch != null)
		{
			if (instance.clanChatBatch == null)
			{
				instance.clanChatBatch = clanChatBatch.Copy();
			}
			else
			{
				clanChatBatch.CopyTo(instance.clanChatBatch);
			}
		}
		else
		{
			instance.clanChatBatch = null;
		}
		if (playerManifest != null)
		{
			if (instance.playerManifest == null)
			{
				instance.playerManifest = playerManifest.Copy();
			}
			else
			{
				playerManifest.CopyTo(instance.playerManifest);
			}
		}
		else
		{
			instance.playerManifest = null;
		}
	}

	public Request Copy()
	{
		Request request = Pool.Get<Request>();
		CopyTo(request);
		return request;
	}

	public static Request Deserialize(Stream stream)
	{
		Request request = Pool.Get<Request>();
		Deserialize(stream, request, isDelta: false);
		return request;
	}

	public static Request DeserializeLengthDelimited(Stream stream)
	{
		Request request = Pool.Get<Request>();
		DeserializeLengthDelimited(stream, request, isDelta: false);
		return request;
	}

	public static Request DeserializeLength(Stream stream, int length)
	{
		Request request = Pool.Get<Request>();
		DeserializeLength(stream, length, request, isDelta: false);
		return request;
	}

	public static Request Deserialize(byte[] buffer)
	{
		Request request = Pool.Get<Request>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, request, isDelta: false);
		return request;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, Request previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static Request Deserialize(byte[] buffer, Request instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static Request Deserialize(Stream stream, Request instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.isFireAndForget = ProtocolParser.ReadBool(stream);
				continue;
			case 18:
				if (instance.transfer == null)
				{
					instance.transfer = TransferRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					TransferRequest.DeserializeLengthDelimited(stream, instance.transfer, isDelta);
				}
				continue;
			case 26:
				if (instance.ping == null)
				{
					instance.ping = PingRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					PingRequest.DeserializeLengthDelimited(stream, instance.ping, isDelta);
				}
				continue;
			case 34:
				if (instance.spawnOptions == null)
				{
					instance.spawnOptions = SpawnOptionsRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					SpawnOptionsRequest.DeserializeLengthDelimited(stream, instance.spawnOptions, isDelta);
				}
				continue;
			case 42:
				if (instance.respawnAtBag == null)
				{
					instance.respawnAtBag = SleepingBagRespawnRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					SleepingBagRespawnRequest.DeserializeLengthDelimited(stream, instance.respawnAtBag, isDelta);
				}
				continue;
			case 50:
				if (instance.destroyBag == null)
				{
					instance.destroyBag = SleepingBagDestroyRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					SleepingBagDestroyRequest.DeserializeLengthDelimited(stream, instance.destroyBag, isDelta);
				}
				continue;
			case 58:
				if (instance.ferryStatus == null)
				{
					instance.ferryStatus = FerryStatusRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					FerryStatusRequest.DeserializeLengthDelimited(stream, instance.ferryStatus, isDelta);
				}
				continue;
			case 66:
				if (instance.ferryRetire == null)
				{
					instance.ferryRetire = FerryRetireRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					FerryRetireRequest.DeserializeLengthDelimited(stream, instance.ferryRetire, isDelta);
				}
				continue;
			case 74:
				if (instance.ferryUpdateSchedule == null)
				{
					instance.ferryUpdateSchedule = FerryUpdateScheduleRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					FerryUpdateScheduleRequest.DeserializeLengthDelimited(stream, instance.ferryUpdateSchedule, isDelta);
				}
				continue;
			case 82:
				if (instance.clanChatBatch == null)
				{
					instance.clanChatBatch = ClanChatBatchRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					ClanChatBatchRequest.DeserializeLengthDelimited(stream, instance.clanChatBatch, isDelta);
				}
				continue;
			case 90:
				if (instance.playerManifest == null)
				{
					instance.playerManifest = PlayerManifestRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					PlayerManifestRequest.DeserializeLengthDelimited(stream, instance.playerManifest, isDelta);
				}
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static Request DeserializeLengthDelimited(Stream stream, Request instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.isFireAndForget = ProtocolParser.ReadBool(stream);
				continue;
			case 18:
				if (instance.transfer == null)
				{
					instance.transfer = TransferRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					TransferRequest.DeserializeLengthDelimited(stream, instance.transfer, isDelta);
				}
				continue;
			case 26:
				if (instance.ping == null)
				{
					instance.ping = PingRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					PingRequest.DeserializeLengthDelimited(stream, instance.ping, isDelta);
				}
				continue;
			case 34:
				if (instance.spawnOptions == null)
				{
					instance.spawnOptions = SpawnOptionsRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					SpawnOptionsRequest.DeserializeLengthDelimited(stream, instance.spawnOptions, isDelta);
				}
				continue;
			case 42:
				if (instance.respawnAtBag == null)
				{
					instance.respawnAtBag = SleepingBagRespawnRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					SleepingBagRespawnRequest.DeserializeLengthDelimited(stream, instance.respawnAtBag, isDelta);
				}
				continue;
			case 50:
				if (instance.destroyBag == null)
				{
					instance.destroyBag = SleepingBagDestroyRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					SleepingBagDestroyRequest.DeserializeLengthDelimited(stream, instance.destroyBag, isDelta);
				}
				continue;
			case 58:
				if (instance.ferryStatus == null)
				{
					instance.ferryStatus = FerryStatusRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					FerryStatusRequest.DeserializeLengthDelimited(stream, instance.ferryStatus, isDelta);
				}
				continue;
			case 66:
				if (instance.ferryRetire == null)
				{
					instance.ferryRetire = FerryRetireRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					FerryRetireRequest.DeserializeLengthDelimited(stream, instance.ferryRetire, isDelta);
				}
				continue;
			case 74:
				if (instance.ferryUpdateSchedule == null)
				{
					instance.ferryUpdateSchedule = FerryUpdateScheduleRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					FerryUpdateScheduleRequest.DeserializeLengthDelimited(stream, instance.ferryUpdateSchedule, isDelta);
				}
				continue;
			case 82:
				if (instance.clanChatBatch == null)
				{
					instance.clanChatBatch = ClanChatBatchRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					ClanChatBatchRequest.DeserializeLengthDelimited(stream, instance.clanChatBatch, isDelta);
				}
				continue;
			case 90:
				if (instance.playerManifest == null)
				{
					instance.playerManifest = PlayerManifestRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					PlayerManifestRequest.DeserializeLengthDelimited(stream, instance.playerManifest, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Request DeserializeLength(Stream stream, int length, Request instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.isFireAndForget = ProtocolParser.ReadBool(stream);
				continue;
			case 18:
				if (instance.transfer == null)
				{
					instance.transfer = TransferRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					TransferRequest.DeserializeLengthDelimited(stream, instance.transfer, isDelta);
				}
				continue;
			case 26:
				if (instance.ping == null)
				{
					instance.ping = PingRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					PingRequest.DeserializeLengthDelimited(stream, instance.ping, isDelta);
				}
				continue;
			case 34:
				if (instance.spawnOptions == null)
				{
					instance.spawnOptions = SpawnOptionsRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					SpawnOptionsRequest.DeserializeLengthDelimited(stream, instance.spawnOptions, isDelta);
				}
				continue;
			case 42:
				if (instance.respawnAtBag == null)
				{
					instance.respawnAtBag = SleepingBagRespawnRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					SleepingBagRespawnRequest.DeserializeLengthDelimited(stream, instance.respawnAtBag, isDelta);
				}
				continue;
			case 50:
				if (instance.destroyBag == null)
				{
					instance.destroyBag = SleepingBagDestroyRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					SleepingBagDestroyRequest.DeserializeLengthDelimited(stream, instance.destroyBag, isDelta);
				}
				continue;
			case 58:
				if (instance.ferryStatus == null)
				{
					instance.ferryStatus = FerryStatusRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					FerryStatusRequest.DeserializeLengthDelimited(stream, instance.ferryStatus, isDelta);
				}
				continue;
			case 66:
				if (instance.ferryRetire == null)
				{
					instance.ferryRetire = FerryRetireRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					FerryRetireRequest.DeserializeLengthDelimited(stream, instance.ferryRetire, isDelta);
				}
				continue;
			case 74:
				if (instance.ferryUpdateSchedule == null)
				{
					instance.ferryUpdateSchedule = FerryUpdateScheduleRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					FerryUpdateScheduleRequest.DeserializeLengthDelimited(stream, instance.ferryUpdateSchedule, isDelta);
				}
				continue;
			case 82:
				if (instance.clanChatBatch == null)
				{
					instance.clanChatBatch = ClanChatBatchRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					ClanChatBatchRequest.DeserializeLengthDelimited(stream, instance.clanChatBatch, isDelta);
				}
				continue;
			case 90:
				if (instance.playerManifest == null)
				{
					instance.playerManifest = PlayerManifestRequest.DeserializeLengthDelimited(stream);
				}
				else
				{
					PlayerManifestRequest.DeserializeLengthDelimited(stream, instance.playerManifest, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, Request instance, Request previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		stream.WriteByte(8);
		ProtocolParser.WriteBool(stream, instance.isFireAndForget);
		if (instance.transfer != null)
		{
			stream.WriteByte(18);
			memoryStream.SetLength(0L);
			TransferRequest.SerializeDelta(memoryStream, instance.transfer, previous.transfer);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		if (instance.ping != null)
		{
			stream.WriteByte(26);
			memoryStream.SetLength(0L);
			PingRequest.SerializeDelta(memoryStream, instance.ping, previous.ping);
			uint num2 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
		}
		if (instance.spawnOptions != null)
		{
			stream.WriteByte(34);
			memoryStream.SetLength(0L);
			SpawnOptionsRequest.SerializeDelta(memoryStream, instance.spawnOptions, previous.spawnOptions);
			uint num3 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num3);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num3);
		}
		if (instance.respawnAtBag != null)
		{
			stream.WriteByte(42);
			memoryStream.SetLength(0L);
			SleepingBagRespawnRequest.SerializeDelta(memoryStream, instance.respawnAtBag, previous.respawnAtBag);
			uint num4 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num4);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num4);
		}
		if (instance.destroyBag != null)
		{
			stream.WriteByte(50);
			memoryStream.SetLength(0L);
			SleepingBagDestroyRequest.SerializeDelta(memoryStream, instance.destroyBag, previous.destroyBag);
			uint num5 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num5);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num5);
		}
		if (instance.ferryStatus != null)
		{
			stream.WriteByte(58);
			memoryStream.SetLength(0L);
			FerryStatusRequest.SerializeDelta(memoryStream, instance.ferryStatus, previous.ferryStatus);
			uint num6 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num6);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num6);
		}
		if (instance.ferryRetire != null)
		{
			stream.WriteByte(66);
			memoryStream.SetLength(0L);
			FerryRetireRequest.SerializeDelta(memoryStream, instance.ferryRetire, previous.ferryRetire);
			uint num7 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num7);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num7);
		}
		if (instance.ferryUpdateSchedule != null)
		{
			stream.WriteByte(74);
			memoryStream.SetLength(0L);
			FerryUpdateScheduleRequest.SerializeDelta(memoryStream, instance.ferryUpdateSchedule, previous.ferryUpdateSchedule);
			uint num8 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num8);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num8);
		}
		if (instance.clanChatBatch != null)
		{
			stream.WriteByte(82);
			memoryStream.SetLength(0L);
			ClanChatBatchRequest.SerializeDelta(memoryStream, instance.clanChatBatch, previous.clanChatBatch);
			uint num9 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num9);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num9);
		}
		if (instance.playerManifest != null)
		{
			stream.WriteByte(90);
			memoryStream.SetLength(0L);
			PlayerManifestRequest.SerializeDelta(memoryStream, instance.playerManifest, previous.playerManifest);
			uint num10 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num10);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num10);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, Request instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.isFireAndForget)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteBool(stream, instance.isFireAndForget);
		}
		if (instance.transfer != null)
		{
			stream.WriteByte(18);
			memoryStream.SetLength(0L);
			TransferRequest.Serialize(memoryStream, instance.transfer);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		if (instance.ping != null)
		{
			stream.WriteByte(26);
			memoryStream.SetLength(0L);
			PingRequest.Serialize(memoryStream, instance.ping);
			uint num2 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
		}
		if (instance.spawnOptions != null)
		{
			stream.WriteByte(34);
			memoryStream.SetLength(0L);
			SpawnOptionsRequest.Serialize(memoryStream, instance.spawnOptions);
			uint num3 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num3);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num3);
		}
		if (instance.respawnAtBag != null)
		{
			stream.WriteByte(42);
			memoryStream.SetLength(0L);
			SleepingBagRespawnRequest.Serialize(memoryStream, instance.respawnAtBag);
			uint num4 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num4);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num4);
		}
		if (instance.destroyBag != null)
		{
			stream.WriteByte(50);
			memoryStream.SetLength(0L);
			SleepingBagDestroyRequest.Serialize(memoryStream, instance.destroyBag);
			uint num5 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num5);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num5);
		}
		if (instance.ferryStatus != null)
		{
			stream.WriteByte(58);
			memoryStream.SetLength(0L);
			FerryStatusRequest.Serialize(memoryStream, instance.ferryStatus);
			uint num6 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num6);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num6);
		}
		if (instance.ferryRetire != null)
		{
			stream.WriteByte(66);
			memoryStream.SetLength(0L);
			FerryRetireRequest.Serialize(memoryStream, instance.ferryRetire);
			uint num7 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num7);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num7);
		}
		if (instance.ferryUpdateSchedule != null)
		{
			stream.WriteByte(74);
			memoryStream.SetLength(0L);
			FerryUpdateScheduleRequest.Serialize(memoryStream, instance.ferryUpdateSchedule);
			uint num8 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num8);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num8);
		}
		if (instance.clanChatBatch != null)
		{
			stream.WriteByte(82);
			memoryStream.SetLength(0L);
			ClanChatBatchRequest.Serialize(memoryStream, instance.clanChatBatch);
			uint num9 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num9);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num9);
		}
		if (instance.playerManifest != null)
		{
			stream.WriteByte(90);
			memoryStream.SetLength(0L);
			PlayerManifestRequest.Serialize(memoryStream, instance.playerManifest);
			uint num10 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num10);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num10);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(Request instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, Request instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		transfer?.InspectUids(action);
		ping?.InspectUids(action);
		spawnOptions?.InspectUids(action);
		respawnAtBag?.InspectUids(action);
		destroyBag?.InspectUids(action);
		ferryStatus?.InspectUids(action);
		ferryRetire?.InspectUids(action);
		ferryUpdateSchedule?.InspectUids(action);
		clanChatBatch?.InspectUids(action);
		playerManifest?.InspectUids(action);
	}
}


using System;
using System.IO;
using Facepunch;
using Facepunch.Nexus;
using ProtoBuf.Nexus;
using SilentOrbit.ProtocolBuffers;

public class Response : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public Uuid id;

	[NonSerialized]
	public Status status;

	[NonSerialized]
	public PingResponse ping;

	[NonSerialized]
	public SpawnOptionsResponse spawnOptions;

	[NonSerialized]
	public FerryStatusResponse ferryStatus;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(Response instance)
	{
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		if (instance.ShouldPool)
		{
			instance.id = default(Uuid);
			if (instance.status != null)
			{
				instance.status.ResetToPool();
				instance.status = null;
			}
			if (instance.ping != null)
			{
				instance.ping.ResetToPool();
				instance.ping = null;
			}
			if (instance.spawnOptions != null)
			{
				instance.spawnOptions.ResetToPool();
				instance.spawnOptions = null;
			}
			if (instance.ferryStatus != null)
			{
				instance.ferryStatus.ResetToPool();
				instance.ferryStatus = null;
			}
			Pool.Free<Response>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose Response with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(Response instance)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		instance.id = id;
		if (status != null)
		{
			if (instance.status == null)
			{
				instance.status = status.Copy();
			}
			else
			{
				status.CopyTo(instance.status);
			}
		}
		else
		{
			instance.status = null;
		}
		if (ping != null)
		{
			if (instance.ping == null)
			{
				instance.ping = ping.Copy();
			}
			else
			{
				ping.CopyTo(instance.ping);
			}
		}
		else
		{
			instance.ping = null;
		}
		if (spawnOptions != null)
		{
			if (instance.spawnOptions == null)
			{
				instance.spawnOptions = spawnOptions.Copy();
			}
			else
			{
				spawnOptions.CopyTo(instance.spawnOptions);
			}
		}
		else
		{
			instance.spawnOptions = null;
		}
		if (ferryStatus != null)
		{
			if (instance.ferryStatus == null)
			{
				instance.ferryStatus = ferryStatus.Copy();
			}
			else
			{
				ferryStatus.CopyTo(instance.ferryStatus);
			}
		}
		else
		{
			instance.ferryStatus = null;
		}
	}

	public Response Copy()
	{
		Response response = Pool.Get<Response>();
		CopyTo(response);
		return response;
	}

	public static Response Deserialize(Stream stream)
	{
		Response response = Pool.Get<Response>();
		Deserialize(stream, response, isDelta: false);
		return response;
	}

	public static Response DeserializeLengthDelimited(Stream stream)
	{
		Response response = Pool.Get<Response>();
		DeserializeLengthDelimited(stream, response, isDelta: false);
		return response;
	}

	public static Response DeserializeLength(Stream stream, int length)
	{
		Response response = Pool.Get<Response>();
		DeserializeLength(stream, length, response, isDelta: false);
		return response;
	}

	public static Response Deserialize(byte[] buffer)
	{
		Response response = Pool.Get<Response>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, response, isDelta: false);
		return response;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, Response previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static Response Deserialize(byte[] buffer, Response instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static Response Deserialize(Stream stream, Response instance, bool isDelta)
	{
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				UuidSerialized.DeserializeLengthDelimited(stream, ref instance.id, isDelta);
				continue;
			case 18:
				if (instance.status == null)
				{
					instance.status = Status.DeserializeLengthDelimited(stream);
				}
				else
				{
					Status.DeserializeLengthDelimited(stream, instance.status, isDelta);
				}
				continue;
			case 26:
				if (instance.ping == null)
				{
					instance.ping = PingResponse.DeserializeLengthDelimited(stream);
				}
				else
				{
					PingResponse.DeserializeLengthDelimited(stream, instance.ping, isDelta);
				}
				continue;
			case 34:
				if (instance.spawnOptions == null)
				{
					instance.spawnOptions = SpawnOptionsResponse.DeserializeLengthDelimited(stream);
				}
				else
				{
					SpawnOptionsResponse.DeserializeLengthDelimited(stream, instance.spawnOptions, isDelta);
				}
				continue;
			case 42:
				if (instance.ferryStatus == null)
				{
					instance.ferryStatus = FerryStatusResponse.DeserializeLengthDelimited(stream);
				}
				else
				{
					FerryStatusResponse.DeserializeLengthDelimited(stream, instance.ferryStatus, isDelta);
				}
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static Response DeserializeLengthDelimited(Stream stream, Response instance, bool isDelta)
	{
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				UuidSerialized.DeserializeLengthDelimited(stream, ref instance.id, isDelta);
				continue;
			case 18:
				if (instance.status == null)
				{
					instance.status = Status.DeserializeLengthDelimited(stream);
				}
				else
				{
					Status.DeserializeLengthDelimited(stream, instance.status, isDelta);
				}
				continue;
			case 26:
				if (instance.ping == null)
				{
					instance.ping = PingResponse.DeserializeLengthDelimited(stream);
				}
				else
				{
					PingResponse.DeserializeLengthDelimited(stream, instance.ping, isDelta);
				}
				continue;
			case 34:
				if (instance.spawnOptions == null)
				{
					instance.spawnOptions = SpawnOptionsResponse.DeserializeLengthDelimited(stream);
				}
				else
				{
					SpawnOptionsResponse.DeserializeLengthDelimited(stream, instance.spawnOptions, isDelta);
				}
				continue;
			case 42:
				if (instance.ferryStatus == null)
				{
					instance.ferryStatus = FerryStatusResponse.DeserializeLengthDelimited(stream);
				}
				else
				{
					FerryStatusResponse.DeserializeLengthDelimited(stream, instance.ferryStatus, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Response DeserializeLength(Stream stream, int length, Response instance, bool isDelta)
	{
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				UuidSerialized.DeserializeLengthDelimited(stream, ref instance.id, isDelta);
				continue;
			case 18:
				if (instance.status == null)
				{
					instance.status = Status.DeserializeLengthDelimited(stream);
				}
				else
				{
					Status.DeserializeLengthDelimited(stream, instance.status, isDelta);
				}
				continue;
			case 26:
				if (instance.ping == null)
				{
					instance.ping = PingResponse.DeserializeLengthDelimited(stream);
				}
				else
				{
					PingResponse.DeserializeLengthDelimited(stream, instance.ping, isDelta);
				}
				continue;
			case 34:
				if (instance.spawnOptions == null)
				{
					instance.spawnOptions = SpawnOptionsResponse.DeserializeLengthDelimited(stream);
				}
				else
				{
					SpawnOptionsResponse.DeserializeLengthDelimited(stream, instance.spawnOptions, isDelta);
				}
				continue;
			case 42:
				if (instance.ferryStatus == null)
				{
					instance.ferryStatus = FerryStatusResponse.DeserializeLengthDelimited(stream);
				}
				else
				{
					FerryStatusResponse.DeserializeLengthDelimited(stream, instance.ferryStatus, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, Response instance, Response previous)
	{
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		stream.WriteByte(10);
		memoryStream.SetLength(0L);
		UuidSerialized.SerializeDelta(memoryStream, instance.id, previous.id);
		uint num = (uint)memoryStream.Length;
		ProtocolParser.WriteUInt32(stream, num);
		stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		if (instance.status == null)
		{
			throw new ArgumentNullException("status", "Required by proto specification.");
		}
		stream.WriteByte(18);
		memoryStream.SetLength(0L);
		Status.SerializeDelta(memoryStream, instance.status, previous.status);
		uint num2 = (uint)memoryStream.Length;
		ProtocolParser.WriteUInt32(stream, num2);
		stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
		if (instance.ping != null)
		{
			stream.WriteByte(26);
			memoryStream.SetLength(0L);
			PingResponse.SerializeDelta(memoryStream, instance.ping, previous.ping);
			uint num3 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num3);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num3);
		}
		if (instance.spawnOptions != null)
		{
			stream.WriteByte(34);
			memoryStream.SetLength(0L);
			SpawnOptionsResponse.SerializeDelta(memoryStream, instance.spawnOptions, previous.spawnOptions);
			uint num4 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num4);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num4);
		}
		if (instance.ferryStatus != null)
		{
			stream.WriteByte(42);
			memoryStream.SetLength(0L);
			FerryStatusResponse.SerializeDelta(memoryStream, instance.ferryStatus, previous.ferryStatus);
			uint num5 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num5);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num5);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, Response instance)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.id != default(Uuid))
		{
			stream.WriteByte(10);
			memoryStream.SetLength(0L);
			UuidSerialized.Serialize(memoryStream, instance.id);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		if (instance.status == null)
		{
			throw new ArgumentNullException("status", "Required by proto specification.");
		}
		stream.WriteByte(18);
		memoryStream.SetLength(0L);
		Status.Serialize(memoryStream, instance.status);
		uint num2 = (uint)memoryStream.Length;
		ProtocolParser.WriteUInt32(stream, num2);
		stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
		if (instance.ping != null)
		{
			stream.WriteByte(26);
			memoryStream.SetLength(0L);
			PingResponse.Serialize(memoryStream, instance.ping);
			uint num3 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num3);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num3);
		}
		if (instance.spawnOptions != null)
		{
			stream.WriteByte(34);
			memoryStream.SetLength(0L);
			SpawnOptionsResponse.Serialize(memoryStream, instance.spawnOptions);
			uint num4 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num4);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num4);
		}
		if (instance.ferryStatus != null)
		{
			stream.WriteByte(42);
			memoryStream.SetLength(0L);
			FerryStatusResponse.Serialize(memoryStream, instance.ferryStatus);
			uint num5 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num5);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num5);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(Response instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, Response instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		status?.InspectUids(action);
		ping?.InspectUids(action);
		spawnOptions?.InspectUids(action);
		ferryStatus?.InspectUids(action);
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf.Nexus;
using SilentOrbit.ProtocolBuffers;

public class Status : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public bool success;

	[NonSerialized]
	public string errorMessage;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(Status instance)
	{
		if (instance.ShouldPool)
		{
			instance.success = false;
			instance.errorMessage = string.Empty;
			Pool.Free<Status>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose Status with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(Status instance)
	{
		instance.success = success;
		instance.errorMessage = errorMessage;
	}

	public Status Copy()
	{
		Status status = Pool.Get<Status>();
		CopyTo(status);
		return status;
	}

	public static Status Deserialize(Stream stream)
	{
		Status status = Pool.Get<Status>();
		Deserialize(stream, status, isDelta: false);
		return status;
	}

	public static Status DeserializeLengthDelimited(Stream stream)
	{
		Status status = Pool.Get<Status>();
		DeserializeLengthDelimited(stream, status, isDelta: false);
		return status;
	}

	public static Status DeserializeLength(Stream stream, int length)
	{
		Status status = Pool.Get<Status>();
		DeserializeLength(stream, length, status, isDelta: false);
		return status;
	}

	public static Status Deserialize(byte[] buffer)
	{
		Status status = Pool.Get<Status>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, status, isDelta: false);
		return status;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, Status previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static Status Deserialize(byte[] buffer, Status instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static Status Deserialize(Stream stream, Status instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.success = ProtocolParser.ReadBool(stream);
				continue;
			case 18:
				instance.errorMessage = ProtocolParser.ReadString(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static Status DeserializeLengthDelimited(Stream stream, Status instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.success = ProtocolParser.ReadBool(stream);
				continue;
			case 18:
				instance.errorMessage = ProtocolParser.ReadString(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Status DeserializeLength(Stream stream, int length, Status instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.success = ProtocolParser.ReadBool(stream);
				continue;
			case 18:
				instance.errorMessage = ProtocolParser.ReadString(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, Status instance, Status previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		stream.WriteByte(8);
		ProtocolParser.WriteBool(stream, instance.success);
		if (instance.errorMessage != null && instance.errorMessage != previous.errorMessage)
		{
			stream.WriteByte(18);
			ProtocolParser.WriteString(stream, instance.errorMessage);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, Status instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.success)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteBool(stream, instance.success);
		}
		if (instance.errorMessage != null)
		{
			stream.WriteByte(18);
			ProtocolParser.WriteString(stream, instance.errorMessage);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(Status instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, Status instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf.Nexus;
using SilentOrbit.ProtocolBuffers;

public class PingRequest : IDisposable, IPooled, IProto
{
	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(PingRequest instance)
	{
		if (instance.ShouldPool)
		{
			Pool.Free<PingRequest>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose PingRequest with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(PingRequest instance)
	{
	}

	public PingRequest Copy()
	{
		PingRequest pingRequest = Pool.Get<PingRequest>();
		CopyTo(pingRequest);
		return pingRequest;
	}

	public static PingRequest Deserialize(Stream stream)
	{
		PingRequest pingRequest = Pool.Get<PingRequest>();
		Deserialize(stream, pingRequest, isDelta: false);
		return pingRequest;
	}

	public static PingRequest DeserializeLengthDelimited(Stream stream)
	{
		PingRequest pingRequest = Pool.Get<PingRequest>();
		DeserializeLengthDelimited(stream, pingRequest, isDelta: false);
		return pingRequest;
	}

	public static PingRequest DeserializeLength(Stream stream, int length)
	{
		PingRequest pingRequest = Pool.Get<PingRequest>();
		DeserializeLength(stream, length, pingRequest, isDelta: false);
		return pingRequest;
	}

	public static PingRequest Deserialize(byte[] buffer)
	{
		PingRequest pingRequest = Pool.Get<PingRequest>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, pingRequest, isDelta: false);
		return pingRequest;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, PingRequest previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static PingRequest Deserialize(byte[] buffer, PingRequest instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static PingRequest Deserialize(Stream stream, PingRequest instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			if (num == -1)
			{
				break;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		return instance;
	}

	public static PingRequest DeserializeLengthDelimited(Stream stream, PingRequest instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (true)
		{
			if (stream.Position >= num)
			{
				if (stream.Position == num)
				{
					break;
				}
				throw new ProtocolBufferException("Read past max limit");
			}
			int num2 = stream.ReadByte();
			if (num2 == -1)
			{
				throw new EndOfStreamException();
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		return instance;
	}

	public static PingRequest DeserializeLength(Stream stream, int length, PingRequest instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (true)
		{
			if (stream.Position >= num)
			{
				if (stream.Position == num)
				{
					break;
				}
				throw new ProtocolBufferException("Read past max limit");
			}
			int num2 = stream.ReadByte();
			if (num2 == -1)
			{
				throw new EndOfStreamException();
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, PingRequest instance, PingRequest previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, PingRequest instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(PingRequest instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, PingRequest instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf.Nexus;
using SilentOrbit.ProtocolBuffers;

public class PingResponse : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public int players;

	[NonSerialized]
	public int maxPlayers;

	[NonSerialized]
	public int queuedPlayers;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(PingResponse instance)
	{
		if (instance.ShouldPool)
		{
			instance.players = 0;
			instance.maxPlayers = 0;
			instance.queuedPlayers = 0;
			Pool.Free<PingResponse>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose PingResponse with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(PingResponse instance)
	{
		instance.players = players;
		instance.maxPlayers = maxPlayers;
		instance.queuedPlayers = queuedPlayers;
	}

	public PingResponse Copy()
	{
		PingResponse pingResponse = Pool.Get<PingResponse>();
		CopyTo(pingResponse);
		return pingResponse;
	}

	public static PingResponse Deserialize(Stream stream)
	{
		PingResponse pingResponse = Pool.Get<PingResponse>();
		Deserialize(stream, pingResponse, isDelta: false);
		return pingResponse;
	}

	public static PingResponse DeserializeLengthDelimited(Stream stream)
	{
		PingResponse pingResponse = Pool.Get<PingResponse>();
		DeserializeLengthDelimited(stream, pingResponse, isDelta: false);
		return pingResponse;
	}

	public static PingResponse DeserializeLength(Stream stream, int length)
	{
		PingResponse pingResponse = Pool.Get<PingResponse>();
		DeserializeLength(stream, length, pingResponse, isDelta: false);
		return pingResponse;
	}

	public static PingResponse Deserialize(byte[] buffer)
	{
		PingResponse pingResponse = Pool.Get<PingResponse>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, pingResponse, isDelta: false);
		return pingResponse;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, PingResponse previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static PingResponse Deserialize(byte[] buffer, PingResponse instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static PingResponse Deserialize(Stream stream, PingResponse instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.players = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.maxPlayers = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.queuedPlayers = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static PingResponse DeserializeLengthDelimited(Stream stream, PingResponse instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.players = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.maxPlayers = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.queuedPlayers = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static PingResponse DeserializeLength(Stream stream, int length, PingResponse instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.players = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.maxPlayers = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.queuedPlayers = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, PingResponse instance, PingResponse previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.players != previous.players)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.players);
		}
		if (instance.maxPlayers != previous.maxPlayers)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.maxPlayers);
		}
		if (instance.queuedPlayers != previous.queuedPlayers)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.queuedPlayers);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, PingResponse instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.players != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.players);
		}
		if (instance.maxPlayers != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.maxPlayers);
		}
		if (instance.queuedPlayers != 0)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.queuedPlayers);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(PingResponse instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, PingResponse instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using ProtoBuf.Nexus;
using SilentOrbit.ProtocolBuffers;

public class TransferRequest : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public string method;

	[NonSerialized]
	public string from;

	[NonSerialized]
	public string to;

	[NonSerialized]
	public List<Entity> entities;

	[NonSerialized]
	public List<PlayerSecondaryData> secondaryData;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(TransferRequest instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		instance.method = string.Empty;
		instance.from = string.Empty;
		instance.to = string.Empty;
		if (instance.entities != null)
		{
			for (int i = 0; i < instance.entities.Count; i++)
			{
				if (instance.entities[i] != null)
				{
					instance.entities[i].ResetToPool();
					instance.entities[i] = null;
				}
			}
			List<Entity> list = instance.entities;
			Pool.Free<Entity>(ref list, false);
			instance.entities = list;
		}
		if (instance.secondaryData != null)
		{
			for (int j = 0; j < instance.secondaryData.Count; j++)
			{
				if (instance.secondaryData[j] != null)
				{
					instance.secondaryData[j].ResetToPool();
					instance.secondaryData[j] = null;
				}
			}
			List<PlayerSecondaryData> list2 = instance.secondaryData;
			Pool.Free<PlayerSecondaryData>(ref list2, false);
			instance.secondaryData = list2;
		}
		Pool.Free<TransferRequest>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose TransferRequest with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(TransferRequest instance)
	{
		instance.method = method;
		instance.from = from;
		instance.to = to;
		if (entities != null)
		{
			instance.entities = Pool.Get<List<Entity>>();
			for (int i = 0; i < entities.Count; i++)
			{
				Entity item = entities[i].Copy();
				instance.entities.Add(item);
			}
		}
		else
		{
			instance.entities = null;
		}
		if (secondaryData != null)
		{
			instance.secondaryData = Pool.Get<List<PlayerSecondaryData>>();
			for (int j = 0; j < secondaryData.Count; j++)
			{
				PlayerSecondaryData item2 = secondaryData[j].Copy();
				instance.secondaryData.Add(item2);
			}
		}
		else
		{
			instance.secondaryData = null;
		}
	}

	public TransferRequest Copy()
	{
		TransferRequest transferRequest = Pool.Get<TransferRequest>();
		CopyTo(transferRequest);
		return transferRequest;
	}

	public static TransferRequest Deserialize(Stream stream)
	{
		TransferRequest transferRequest = Pool.Get<TransferRequest>();
		Deserialize(stream, transferRequest, isDelta: false);
		return transferRequest;
	}

	public static TransferRequest DeserializeLengthDelimited(Stream stream)
	{
		TransferRequest transferRequest = Pool.Get<TransferRequest>();
		DeserializeLengthDelimited(stream, transferRequest, isDelta: false);
		return transferRequest;
	}

	public static TransferRequest DeserializeLength(Stream stream, int length)
	{
		TransferRequest transferRequest = Pool.Get<TransferRequest>();
		DeserializeLength(stream, length, transferRequest, isDelta: false);
		return transferRequest;
	}

	public static TransferRequest Deserialize(byte[] buffer)
	{
		TransferRequest transferRequest = Pool.Get<TransferRequest>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, transferRequest, isDelta: false);
		return transferRequest;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, TransferRequest previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static TransferRequest Deserialize(byte[] buffer, TransferRequest instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static TransferRequest Deserialize(Stream stream, TransferRequest instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.entities == null)
			{
				instance.entities = Pool.Get<List<Entity>>();
			}
			if (instance.secondaryData == null)
			{
				instance.secondaryData = Pool.Get<List<PlayerSecondaryData>>();
			}
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.method = ProtocolParser.ReadString(stream);
				continue;
			case 18:
				instance.from = ProtocolParser.ReadString(stream);
				continue;
			case 26:
				instance.to = ProtocolParser.ReadString(stream);
				continue;
			case 34:
				instance.entities.Add(Entity.DeserializeLengthDelimited(stream));
				continue;
			case 42:
				instance.secondaryData.Add(PlayerSecondaryData.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static TransferRequest DeserializeLengthDelimited(Stream stream, TransferRequest instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.entities == null)
			{
				instance.entities = Pool.Get<List<Entity>>();
			}
			if (instance.secondaryData == null)
			{
				instance.secondaryData = Pool.Get<List<PlayerSecondaryData>>();
			}
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.method = ProtocolParser.ReadString(stream);
				continue;
			case 18:
				instance.from = ProtocolParser.ReadString(stream);
				continue;
			case 26:
				instance.to = ProtocolParser.ReadString(stream);
				continue;
			case 34:
				instance.entities.Add(Entity.DeserializeLengthDelimited(stream));
				continue;
			case 42:
				instance.secondaryData.Add(PlayerSecondaryData.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static TransferRequest DeserializeLength(Stream stream, int length, TransferRequest instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.entities == null)
			{
				instance.entities = Pool.Get<List<Entity>>();
			}
			if (instance.secondaryData == null)
			{
				instance.secondaryData = Pool.Get<List<PlayerSecondaryData>>();
			}
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.method = ProtocolParser.ReadString(stream);
				continue;
			case 18:
				instance.from = ProtocolParser.ReadString(stream);
				continue;
			case 26:
				instance.to = ProtocolParser.ReadString(stream);
				continue;
			case 34:
				instance.entities.Add(Entity.DeserializeLengthDelimited(stream));
				continue;
			case 42:
				instance.secondaryData.Add(PlayerSecondaryData.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, TransferRequest instance, TransferRequest previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.method != null && instance.method != previous.method)
		{
			stream.WriteByte(10);
			ProtocolParser.WriteString(stream, instance.method);
		}
		if (instance.from != null && instance.from != previous.from)
		{
			stream.WriteByte(18);
			ProtocolParser.WriteString(stream, instance.from);
		}
		if (instance.to != null && instance.to != previous.to)
		{
			stream.WriteByte(26);
			ProtocolParser.WriteString(stream, instance.to);
		}
		if (instance.entities != null)
		{
			for (int i = 0; i < instance.entities.Count; i++)
			{
				Entity entity = instance.entities[i];
				stream.WriteByte(34);
				memoryStream.SetLength(0L);
				Entity.SerializeDelta(memoryStream, entity, entity);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.secondaryData != null)
		{
			for (int j = 0; j < instance.secondaryData.Count; j++)
			{
				PlayerSecondaryData playerSecondaryData = instance.secondaryData[j];
				stream.WriteByte(42);
				memoryStream.SetLength(0L);
				PlayerSecondaryData.SerializeDelta(memoryStream, playerSecondaryData, playerSecondaryData);
				uint num2 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, TransferRequest instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.method != null)
		{
			stream.WriteByte(10);
			ProtocolParser.WriteString(stream, instance.method);
		}
		if (instance.from != null)
		{
			stream.WriteByte(18);
			ProtocolParser.WriteString(stream, instance.from);
		}
		if (instance.to != null)
		{
			stream.WriteByte(26);
			ProtocolParser.WriteString(stream, instance.to);
		}
		if (instance.entities != null)
		{
			for (int i = 0; i < instance.entities.Count; i++)
			{
				Entity instance2 = instance.entities[i];
				stream.WriteByte(34);
				memoryStream.SetLength(0L);
				Entity.Serialize(memoryStream, instance2);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.secondaryData != null)
		{
			for (int j = 0; j < instance.secondaryData.Count; j++)
			{
				PlayerSecondaryData instance3 = instance.secondaryData[j];
				stream.WriteByte(42);
				memoryStream.SetLength(0L);
				PlayerSecondaryData.Serialize(memoryStream, instance3);
				uint num2 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(TransferRequest instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, TransferRequest instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (entities != null)
		{
			for (int i = 0; i < entities.Count; i++)
			{
				entities[i]?.InspectUids(action);
			}
		}
		if (secondaryData != null)
		{
			for (int j = 0; j < secondaryData.Count; j++)
			{
				secondaryData[j]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.Buffers;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using ProtoBuf.Nexus;
using SilentOrbit.ProtocolBuffers;

public class PlayerSecondaryData : IDisposable, IPooled, IProto
{
	public class RelationshipData : IDisposable, IPooled, IProto
	{
		[NonSerialized]
		public RelationshipManager.PlayerRelationshipInfo info;

		[NonSerialized]
		public ArraySegment<byte> mugshotData;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(RelationshipData instance)
		{
			if (instance.ShouldPool)
			{
				if (instance.info != null)
				{
					instance.info.ResetToPool();
					instance.info = null;
				}
				if (instance.mugshotData.Array != null)
				{
					ArrayPool<byte>.Shared.Return(instance.mugshotData.Array);
				}
				instance.mugshotData = default(ArraySegment<byte>);
				Pool.Free<RelationshipData>(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose RelationshipData with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(RelationshipData instance)
		{
			if (info != null)
			{
				if (instance.info == null)
				{
					instance.info = info.Copy();
				}
				else
				{
					info.CopyTo(instance.info);
				}
			}
			else
			{
				instance.info = null;
			}
			if (mugshotData.Array == null)
			{
				instance.mugshotData = default(ArraySegment<byte>);
				return;
			}
			byte[] array = ArrayPool<byte>.Shared.Rent(mugshotData.Count);
			Array.Copy(mugshotData.Array, 0, array, 0, mugshotData.Count);
			instance.mugshotData = new ArraySegment<byte>(array, 0, mugshotData.Count);
		}

		public RelationshipData Copy()
		{
			RelationshipData relationshipData = Pool.Get<RelationshipData>();
			CopyTo(relationshipData);
			return relationshipData;
		}

		public static RelationshipData Deserialize(Stream stream)
		{
			RelationshipData relationshipData = Pool.Get<RelationshipData>();
			Deserialize(stream, relationshipData, isDelta: false);
			return relationshipData;
		}

		public static RelationshipData DeserializeLengthDelimited(Stream stream)
		{
			RelationshipData relationshipData = Pool.Get<RelationshipData>();
			DeserializeLengthDelimited(stream, relationshipData, isDelta: false);
			return relationshipData;
		}

		public static RelationshipData DeserializeLength(Stream stream, int length)
		{
			RelationshipData relationshipData = Pool.Get<RelationshipData>();
			DeserializeLength(stream, length, relationshipData, isDelta: false);
			return relationshipData;
		}

		public static RelationshipData Deserialize(byte[] buffer)
		{
			RelationshipData relationshipData = Pool.Get<RelationshipData>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, relationshipData, isDelta: false);
			return relationshipData;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, RelationshipData previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static RelationshipData Deserialize(byte[] buffer, RelationshipData instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static RelationshipData Deserialize(Stream stream, RelationshipData instance, bool isDelta)
		{
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 10:
					if (instance.info == null)
					{
						instance.info = RelationshipManager.PlayerRelationshipInfo.DeserializeLengthDelimited(stream);
					}
					else
					{
						RelationshipManager.PlayerRelationshipInfo.DeserializeLengthDelimited(stream, instance.info, isDelta);
					}
					continue;
				case 18:
					instance.mugshotData = ProtocolParser.ReadPooledBytes(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static RelationshipData DeserializeLengthDelimited(Stream stream, RelationshipData instance, bool isDelta)
		{
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					if (instance.info == null)
					{
						instance.info = RelationshipManager.PlayerRelationshipInfo.DeserializeLengthDelimited(stream);
					}
					else
					{
						RelationshipManager.PlayerRelationshipInfo.DeserializeLengthDelimited(stream, instance.info, isDelta);
					}
					continue;
				case 18:
					instance.mugshotData = ProtocolParser.ReadPooledBytes(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static RelationshipData DeserializeLength(Stream stream, int length, RelationshipData instance, bool isDelta)
		{
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					if (instance.info == null)
					{
						instance.info = RelationshipManager.PlayerRelationshipInfo.DeserializeLengthDelimited(stream);
					}
					else
					{
						RelationshipManager.PlayerRelationshipInfo.DeserializeLengthDelimited(stream, instance.info, isDelta);
					}
					continue;
				case 18:
					instance.mugshotData = ProtocolParser.ReadPooledBytes(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, RelationshipData instance, RelationshipData previous)
		{
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.info == null)
			{
				throw new ArgumentNullException("info", "Required by proto specification.");
			}
			stream.WriteByte(10);
			memoryStream.SetLength(0L);
			RelationshipManager.PlayerRelationshipInfo.SerializeDelta(memoryStream, instance.info, previous.info);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			if (instance.mugshotData.Array != null)
			{
				stream.WriteByte(18);
				ProtocolParser.WritePooledBytes(stream, instance.mugshotData);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public static void Serialize(Stream stream, RelationshipData instance)
		{
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.info == null)
			{
				throw new ArgumentNullException("info", "Required by proto specification.");
			}
			stream.WriteByte(10);
			memoryStream.SetLength(0L);
			RelationshipManager.PlayerRelationshipInfo.Serialize(memoryStream, instance.info);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			if (instance.mugshotData.Array != null)
			{
				stream.WriteByte(18);
				ProtocolParser.WritePooledBytes(stream, instance.mugshotData);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(RelationshipData instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, RelationshipData instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
			info?.InspectUids(action);
		}
	}

	[NonSerialized]
	public ulong userId;

	[NonSerialized]
	public PlayerState playerState;

	[NonSerialized]
	public List<RelationshipData> relationships;

	[NonSerialized]
	public ulong teamId;

	[NonSerialized]
	public bool isTeamLeader;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(PlayerSecondaryData instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		instance.userId = 0uL;
		if (instance.playerState != null)
		{
			instance.playerState.ResetToPool();
			instance.playerState = null;
		}
		if (instance.relationships != null)
		{
			for (int i = 0; i < instance.relationships.Count; i++)
			{
				if (instance.relationships[i] != null)
				{
					instance.relationships[i].ResetToPool();
					instance.relationships[i] = null;
				}
			}
			List<RelationshipData> list = instance.relationships;
			Pool.Free<RelationshipData>(ref list, false);
			instance.relationships = list;
		}
		instance.teamId = 0uL;
		instance.isTeamLeader = false;
		Pool.Free<PlayerSecondaryData>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose PlayerSecondaryData with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(PlayerSecondaryData instance)
	{
		instance.userId = userId;
		if (playerState != null)
		{
			if (instance.playerState == null)
			{
				instance.playerState = playerState.Copy();
			}
			else
			{
				playerState.CopyTo(instance.playerState);
			}
		}
		else
		{
			instance.playerState = null;
		}
		if (relationships != null)
		{
			instance.relationships = Pool.Get<List<RelationshipData>>();
			for (int i = 0; i < relationships.Count; i++)
			{
				RelationshipData item = relationships[i].Copy();
				instance.relationships.Add(item);
			}
		}
		else
		{
			instance.relationships = null;
		}
		instance.teamId = teamId;
		instance.isTeamLeader = isTeamLeader;
	}

	public PlayerSecondaryData Copy()
	{
		PlayerSecondaryData playerSecondaryData = Pool.Get<PlayerSecondaryData>();
		CopyTo(playerSecondaryData);
		return playerSecondaryData;
	}

	public static PlayerSecondaryData Deserialize(Stream stream)
	{
		PlayerSecondaryData playerSecondaryData = Pool.Get<PlayerSecondaryData>();
		Deserialize(stream, playerSecondaryData, isDelta: false);
		return playerSecondaryData;
	}

	public static PlayerSecondaryData DeserializeLengthDelimited(Stream stream)
	{
		PlayerSecondaryData playerSecondaryData = Pool.Get<PlayerSecondaryData>();
		DeserializeLengthDelimited(stream, playerSecondaryData, isDelta: false);
		return playerSecondaryData;
	}

	public static PlayerSecondaryData DeserializeLength(Stream stream, int length)
	{
		PlayerSecondaryData playerSecondaryData = Pool.Get<PlayerSecondaryData>();
		DeserializeLength(stream, length, playerSecondaryData, isDelta: false);
		return playerSecondaryData;
	}

	public static PlayerSecondaryData Deserialize(byte[] buffer)
	{
		PlayerSecondaryData playerSecondaryData = Pool.Get<PlayerSecondaryData>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, playerSecondaryData, isDelta: false);
		return playerSecondaryData;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, PlayerSecondaryData previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static PlayerSecondaryData Deserialize(byte[] buffer, PlayerSecondaryData instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static PlayerSecondaryData Deserialize(Stream stream, PlayerSecondaryData instance, bool isDelta)
	{
		if (!isDelta && instance.relationships == null)
		{
			instance.relationships = Pool.Get<List<RelationshipData>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.userId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				if (instance.playerState == null)
				{
					instance.playerState = PlayerState.DeserializeLengthDelimited(stream);
				}
				else
				{
					PlayerState.DeserializeLengthDelimited(stream, instance.playerState, isDelta);
				}
				continue;
			case 26:
				instance.relationships.Add(RelationshipData.DeserializeLengthDelimited(stream));
				continue;
			case 32:
				instance.teamId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.isTeamLeader = ProtocolParser.ReadBool(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static PlayerSecondaryData DeserializeLengthDelimited(Stream stream, PlayerSecondaryData instance, bool isDelta)
	{
		if (!isDelta && instance.relationships == null)
		{
			instance.relationships = Pool.Get<List<RelationshipData>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.userId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				if (instance.playerState == null)
				{
					instance.playerState = PlayerState.DeserializeLengthDelimited(stream);
				}
				else
				{
					PlayerState.DeserializeLengthDelimited(stream, instance.playerState, isDelta);
				}
				continue;
			case 26:
				instance.relationships.Add(RelationshipData.DeserializeLengthDelimited(stream));
				continue;
			case 32:
				instance.teamId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.isTeamLeader = ProtocolParser.ReadBool(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static PlayerSecondaryData DeserializeLength(Stream stream, int length, PlayerSecondaryData instance, bool isDelta)
	{
		if (!isDelta && instance.relationships == null)
		{
			instance.relationships = Pool.Get<List<RelationshipData>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.userId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				if (instance.playerState == null)
				{
					instance.playerState = PlayerState.DeserializeLengthDelimited(stream);
				}
				else
				{
					PlayerState.DeserializeLengthDelimited(stream, instance.playerState, isDelta);
				}
				continue;
			case 26:
				instance.relationships.Add(RelationshipData.DeserializeLengthDelimited(stream));
				continue;
			case 32:
				instance.teamId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.isTeamLeader = ProtocolParser.ReadBool(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, PlayerSecondaryData instance, PlayerSecondaryData previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.userId != previous.userId)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.userId);
		}
		if (instance.playerState != null)
		{
			stream.WriteByte(18);
			memoryStream.SetLength(0L);
			PlayerState.SerializeDelta(memoryStream, instance.playerState, previous.playerState);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		if (instance.relationships != null)
		{
			for (int i = 0; i < instance.relationships.Count; i++)
			{
				RelationshipData relationshipData = instance.relationships[i];
				stream.WriteByte(26);
				memoryStream.SetLength(0L);
				RelationshipData.SerializeDelta(memoryStream, relationshipData, relationshipData);
				uint num2 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
			}
		}
		if (instance.teamId != previous.teamId)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, instance.teamId);
		}
		stream.WriteByte(40);
		ProtocolParser.WriteBool(stream, instance.isTeamLeader);
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, PlayerSecondaryData instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.userId != 0L)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.userId);
		}
		if (instance.playerState != null)
		{
			stream.WriteByte(18);
			memoryStream.SetLength(0L);
			PlayerState.Serialize(memoryStream, instance.playerState);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		if (instance.relationships != null)
		{
			for (int i = 0; i < instance.relationships.Count; i++)
			{
				RelationshipData instance2 = instance.relationships[i];
				stream.WriteByte(26);
				memoryStream.SetLength(0L);
				RelationshipData.Serialize(memoryStream, instance2);
				uint num2 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
			}
		}
		if (instance.teamId != 0L)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, instance.teamId);
		}
		if (instance.isTeamLeader)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteBool(stream, instance.isTeamLeader);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(PlayerSecondaryData instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, PlayerSecondaryData instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		playerState?.InspectUids(action);
		if (relationships != null)
		{
			for (int i = 0; i < relationships.Count; i++)
			{
				relationships[i]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf.Nexus;
using SilentOrbit.ProtocolBuffers;

public class SpawnOptionsRequest : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public ulong userId;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(SpawnOptionsRequest instance)
	{
		if (instance.ShouldPool)
		{
			instance.userId = 0uL;
			Pool.Free<SpawnOptionsRequest>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose SpawnOptionsRequest with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(SpawnOptionsRequest instance)
	{
		instance.userId = userId;
	}

	public SpawnOptionsRequest Copy()
	{
		SpawnOptionsRequest spawnOptionsRequest = Pool.Get<SpawnOptionsRequest>();
		CopyTo(spawnOptionsRequest);
		return spawnOptionsRequest;
	}

	public static SpawnOptionsRequest Deserialize(Stream stream)
	{
		SpawnOptionsRequest spawnOptionsRequest = Pool.Get<SpawnOptionsRequest>();
		Deserialize(stream, spawnOptionsRequest, isDelta: false);
		return spawnOptionsRequest;
	}

	public static SpawnOptionsRequest DeserializeLengthDelimited(Stream stream)
	{
		SpawnOptionsRequest spawnOptionsRequest = Pool.Get<SpawnOptionsRequest>();
		DeserializeLengthDelimited(stream, spawnOptionsRequest, isDelta: false);
		return spawnOptionsRequest;
	}

	public static SpawnOptionsRequest DeserializeLength(Stream stream, int length)
	{
		SpawnOptionsRequest spawnOptionsRequest = Pool.Get<SpawnOptionsRequest>();
		DeserializeLength(stream, length, spawnOptionsRequest, isDelta: false);
		return spawnOptionsRequest;
	}

	public static SpawnOptionsRequest Deserialize(byte[] buffer)
	{
		SpawnOptionsRequest spawnOptionsRequest = Pool.Get<SpawnOptionsRequest>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, spawnOptionsRequest, isDelta: false);
		return spawnOptionsRequest;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, SpawnOptionsRequest previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static SpawnOptionsRequest Deserialize(byte[] buffer, SpawnOptionsRequest instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static SpawnOptionsRequest Deserialize(Stream stream, SpawnOptionsRequest instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.userId = ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static SpawnOptionsRequest DeserializeLengthDelimited(Stream stream, SpawnOptionsRequest instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.userId = ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static SpawnOptionsRequest DeserializeLength(Stream stream, int length, SpawnOptionsRequest instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.userId = ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, SpawnOptionsRequest instance, SpawnOptionsRequest previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.userId != previous.userId)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.userId);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, SpawnOptionsRequest instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.userId != 0L)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.userId);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(SpawnOptionsRequest instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, SpawnOptionsRequest instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using ProtoBuf.Nexus;
using SilentOrbit.ProtocolBuffers;

public class SpawnOptionsResponse : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public List<RespawnInformation.SpawnOptions> spawnOptions;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(SpawnOptionsResponse instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.spawnOptions != null)
		{
			for (int i = 0; i < instance.spawnOptions.Count; i++)
			{
				if (instance.spawnOptions[i] != null)
				{
					instance.spawnOptions[i].ResetToPool();
					instance.spawnOptions[i] = null;
				}
			}
			List<RespawnInformation.SpawnOptions> list = instance.spawnOptions;
			Pool.Free<RespawnInformation.SpawnOptions>(ref list, false);
			instance.spawnOptions = list;
		}
		Pool.Free<SpawnOptionsResponse>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose SpawnOptionsResponse with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(SpawnOptionsResponse instance)
	{
		if (spawnOptions != null)
		{
			instance.spawnOptions = Pool.Get<List<RespawnInformation.SpawnOptions>>();
			for (int i = 0; i < spawnOptions.Count; i++)
			{
				RespawnInformation.SpawnOptions item = spawnOptions[i].Copy();
				instance.spawnOptions.Add(item);
			}
		}
		else
		{
			instance.spawnOptions = null;
		}
	}

	public SpawnOptionsResponse Copy()
	{
		SpawnOptionsResponse spawnOptionsResponse = Pool.Get<SpawnOptionsResponse>();
		CopyTo(spawnOptionsResponse);
		return spawnOptionsResponse;
	}

	public static SpawnOptionsResponse Deserialize(Stream stream)
	{
		SpawnOptionsResponse spawnOptionsResponse = Pool.Get<SpawnOptionsResponse>();
		Deserialize(stream, spawnOptionsResponse, isDelta: false);
		return spawnOptionsResponse;
	}

	public static SpawnOptionsResponse DeserializeLengthDelimited(Stream stream)
	{
		SpawnOptionsResponse spawnOptionsResponse = Pool.Get<SpawnOptionsResponse>();
		DeserializeLengthDelimited(stream, spawnOptionsResponse, isDelta: false);
		return spawnOptionsResponse;
	}

	public static SpawnOptionsResponse DeserializeLength(Stream stream, int length)
	{
		SpawnOptionsResponse spawnOptionsResponse = Pool.Get<SpawnOptionsResponse>();
		DeserializeLength(stream, length, spawnOptionsResponse, isDelta: false);
		return spawnOptionsResponse;
	}

	public static SpawnOptionsResponse Deserialize(byte[] buffer)
	{
		SpawnOptionsResponse spawnOptionsResponse = Pool.Get<SpawnOptionsResponse>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, spawnOptionsResponse, isDelta: false);
		return spawnOptionsResponse;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, SpawnOptionsResponse previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static SpawnOptionsResponse Deserialize(byte[] buffer, SpawnOptionsResponse instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static SpawnOptionsResponse Deserialize(Stream stream, SpawnOptionsResponse instance, bool isDelta)
	{
		if (!isDelta && instance.spawnOptions == null)
		{
			instance.spawnOptions = Pool.Get<List<RespawnInformation.SpawnOptions>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.spawnOptions.Add(RespawnInformation.SpawnOptions.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static SpawnOptionsResponse DeserializeLengthDelimited(Stream stream, SpawnOptionsResponse instance, bool isDelta)
	{
		if (!isDelta && instance.spawnOptions == null)
		{
			instance.spawnOptions = Pool.Get<List<RespawnInformation.SpawnOptions>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.spawnOptions.Add(RespawnInformation.SpawnOptions.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static SpawnOptionsResponse DeserializeLength(Stream stream, int length, SpawnOptionsResponse instance, bool isDelta)
	{
		if (!isDelta && instance.spawnOptions == null)
		{
			instance.spawnOptions = Pool.Get<List<RespawnInformation.SpawnOptions>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.spawnOptions.Add(RespawnInformation.SpawnOptions.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, SpawnOptionsResponse instance, SpawnOptionsResponse previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.spawnOptions != null)
		{
			for (int i = 0; i < instance.spawnOptions.Count; i++)
			{
				RespawnInformation.SpawnOptions spawnOptions = instance.spawnOptions[i];
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				RespawnInformation.SpawnOptions.SerializeDelta(memoryStream, spawnOptions, spawnOptions);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, SpawnOptionsResponse instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.spawnOptions != null)
		{
			for (int i = 0; i < instance.spawnOptions.Count; i++)
			{
				RespawnInformation.SpawnOptions instance2 = instance.spawnOptions[i];
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				RespawnInformation.SpawnOptions.Serialize(memoryStream, instance2);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(SpawnOptionsResponse instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, SpawnOptionsResponse instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (spawnOptions != null)
		{
			for (int i = 0; i < spawnOptions.Count; i++)
			{
				spawnOptions[i]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf.Nexus;
using SilentOrbit.ProtocolBuffers;

public class SleepingBagRespawnRequest : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public ulong userId;

	[NonSerialized]
	public NetworkableId sleepingBagId;

	[NonSerialized]
	public PlayerSecondaryData secondaryData;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(SleepingBagRespawnRequest instance)
	{
		if (instance.ShouldPool)
		{
			instance.userId = 0uL;
			instance.sleepingBagId = default(NetworkableId);
			if (instance.secondaryData != null)
			{
				instance.secondaryData.ResetToPool();
				instance.secondaryData = null;
			}
			Pool.Free<SleepingBagRespawnRequest>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose SleepingBagRespawnRequest with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(SleepingBagRespawnRequest instance)
	{
		instance.userId = userId;
		instance.sleepingBagId = sleepingBagId;
		if (secondaryData != null)
		{
			if (instance.secondaryData == null)
			{
				instance.secondaryData = secondaryData.Copy();
			}
			else
			{
				secondaryData.CopyTo(instance.secondaryData);
			}
		}
		else
		{
			instance.secondaryData = null;
		}
	}

	public SleepingBagRespawnRequest Copy()
	{
		SleepingBagRespawnRequest sleepingBagRespawnRequest = Pool.Get<SleepingBagRespawnRequest>();
		CopyTo(sleepingBagRespawnRequest);
		return sleepingBagRespawnRequest;
	}

	public static SleepingBagRespawnRequest Deserialize(Stream stream)
	{
		SleepingBagRespawnRequest sleepingBagRespawnRequest = Pool.Get<SleepingBagRespawnRequest>();
		Deserialize(stream, sleepingBagRespawnRequest, isDelta: false);
		return sleepingBagRespawnRequest;
	}

	public static SleepingBagRespawnRequest DeserializeLengthDelimited(Stream stream)
	{
		SleepingBagRespawnRequest sleepingBagRespawnRequest = Pool.Get<SleepingBagRespawnRequest>();
		DeserializeLengthDelimited(stream, sleepingBagRespawnRequest, isDelta: false);
		return sleepingBagRespawnRequest;
	}

	public static SleepingBagRespawnRequest DeserializeLength(Stream stream, int length)
	{
		SleepingBagRespawnRequest sleepingBagRespawnRequest = Pool.Get<SleepingBagRespawnRequest>();
		DeserializeLength(stream, length, sleepingBagRespawnRequest, isDelta: false);
		return sleepingBagRespawnRequest;
	}

	public static SleepingBagRespawnRequest Deserialize(byte[] buffer)
	{
		SleepingBagRespawnRequest sleepingBagRespawnRequest = Pool.Get<SleepingBagRespawnRequest>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, sleepingBagRespawnRequest, isDelta: false);
		return sleepingBagRespawnRequest;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, SleepingBagRespawnRequest previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static SleepingBagRespawnRequest Deserialize(byte[] buffer, SleepingBagRespawnRequest instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static SleepingBagRespawnRequest Deserialize(Stream stream, SleepingBagRespawnRequest instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.userId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.sleepingBagId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 26:
				if (instance.secondaryData == null)
				{
					instance.secondaryData = PlayerSecondaryData.DeserializeLengthDelimited(stream);
				}
				else
				{
					PlayerSecondaryData.DeserializeLengthDelimited(stream, instance.secondaryData, isDelta);
				}
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static SleepingBagRespawnRequest DeserializeLengthDelimited(Stream stream, SleepingBagRespawnRequest instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.userId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.sleepingBagId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 26:
				if (instance.secondaryData == null)
				{
					instance.secondaryData = PlayerSecondaryData.DeserializeLengthDelimited(stream);
				}
				else
				{
					PlayerSecondaryData.DeserializeLengthDelimited(stream, instance.secondaryData, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static SleepingBagRespawnRequest DeserializeLength(Stream stream, int length, SleepingBagRespawnRequest instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.userId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.sleepingBagId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 26:
				if (instance.secondaryData == null)
				{
					instance.secondaryData = PlayerSecondaryData.DeserializeLengthDelimited(stream);
				}
				else
				{
					PlayerSecondaryData.DeserializeLengthDelimited(stream, instance.secondaryData, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, SleepingBagRespawnRequest instance, SleepingBagRespawnRequest previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.userId != previous.userId)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.userId);
		}
		stream.WriteByte(16);
		ProtocolParser.WriteUInt64(stream, instance.sleepingBagId.Value);
		if (instance.secondaryData == null)
		{
			throw new ArgumentNullException("secondaryData", "Required by proto specification.");
		}
		stream.WriteByte(26);
		memoryStream.SetLength(0L);
		PlayerSecondaryData.SerializeDelta(memoryStream, instance.secondaryData, previous.secondaryData);
		uint num = (uint)memoryStream.Length;
		ProtocolParser.WriteUInt32(stream, num);
		stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, SleepingBagRespawnRequest instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.userId != 0L)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.userId);
		}
		if (instance.sleepingBagId != default(NetworkableId))
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, instance.sleepingBagId.Value);
		}
		if (instance.secondaryData == null)
		{
			throw new ArgumentNullException("secondaryData", "Required by proto specification.");
		}
		stream.WriteByte(26);
		memoryStream.SetLength(0L);
		PlayerSecondaryData.Serialize(memoryStream, instance.secondaryData);
		uint num = (uint)memoryStream.Length;
		ProtocolParser.WriteUInt32(stream, num);
		stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(SleepingBagRespawnRequest instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, SleepingBagRespawnRequest instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		action(UidType.NetworkableId, ref sleepingBagId.Value);
		secondaryData?.InspectUids(action);
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf.Nexus;
using SilentOrbit.ProtocolBuffers;

public class SleepingBagDestroyRequest : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public ulong userId;

	[NonSerialized]
	public NetworkableId sleepingBagId;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(SleepingBagDestroyRequest instance)
	{
		if (instance.ShouldPool)
		{
			instance.userId = 0uL;
			instance.sleepingBagId = default(NetworkableId);
			Pool.Free<SleepingBagDestroyRequest>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose SleepingBagDestroyRequest with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(SleepingBagDestroyRequest instance)
	{
		instance.userId = userId;
		instance.sleepingBagId = sleepingBagId;
	}

	public SleepingBagDestroyRequest Copy()
	{
		SleepingBagDestroyRequest sleepingBagDestroyRequest = Pool.Get<SleepingBagDestroyRequest>();
		CopyTo(sleepingBagDestroyRequest);
		return sleepingBagDestroyRequest;
	}

	public static SleepingBagDestroyRequest Deserialize(Stream stream)
	{
		SleepingBagDestroyRequest sleepingBagDestroyRequest = Pool.Get<SleepingBagDestroyRequest>();
		Deserialize(stream, sleepingBagDestroyRequest, isDelta: false);
		return sleepingBagDestroyRequest;
	}

	public static SleepingBagDestroyRequest DeserializeLengthDelimited(Stream stream)
	{
		SleepingBagDestroyRequest sleepingBagDestroyRequest = Pool.Get<SleepingBagDestroyRequest>();
		DeserializeLengthDelimited(stream, sleepingBagDestroyRequest, isDelta: false);
		return sleepingBagDestroyRequest;
	}

	public static SleepingBagDestroyRequest DeserializeLength(Stream stream, int length)
	{
		SleepingBagDestroyRequest sleepingBagDestroyRequest = Pool.Get<SleepingBagDestroyRequest>();
		DeserializeLength(stream, length, sleepingBagDestroyRequest, isDelta: false);
		return sleepingBagDestroyRequest;
	}

	public static SleepingBagDestroyRequest Deserialize(byte[] buffer)
	{
		SleepingBagDestroyRequest sleepingBagDestroyRequest = Pool.Get<SleepingBagDestroyRequest>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, sleepingBagDestroyRequest, isDelta: false);
		return sleepingBagDestroyRequest;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, SleepingBagDestroyRequest previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static SleepingBagDestroyRequest Deserialize(byte[] buffer, SleepingBagDestroyRequest instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static SleepingBagDestroyRequest Deserialize(Stream stream, SleepingBagDestroyRequest instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.userId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.sleepingBagId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static SleepingBagDestroyRequest DeserializeLengthDelimited(Stream stream, SleepingBagDestroyRequest instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.userId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.sleepingBagId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static SleepingBagDestroyRequest DeserializeLength(Stream stream, int length, SleepingBagDestroyRequest instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.userId = ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.sleepingBagId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, SleepingBagDestroyRequest instance, SleepingBagDestroyRequest previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.userId != previous.userId)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.userId);
		}
		stream.WriteByte(16);
		ProtocolParser.WriteUInt64(stream, instance.sleepingBagId.Value);
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, SleepingBagDestroyRequest instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.userId != 0L)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.userId);
		}
		if (instance.sleepingBagId != default(NetworkableId))
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, instance.sleepingBagId.Value);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(SleepingBagDestroyRequest instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, SleepingBagDestroyRequest instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		action(UidType.NetworkableId, ref sleepingBagId.Value);
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf.Nexus;
using SilentOrbit.ProtocolBuffers;

public class FerryStatusRequest : IDisposable, IPooled, IProto
{
	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(FerryStatusRequest instance)
	{
		if (instance.ShouldPool)
		{
			Pool.Free<FerryStatusRequest>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose FerryStatusRequest with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(FerryStatusRequest instance)
	{
	}

	public FerryStatusRequest Copy()
	{
		FerryStatusRequest ferryStatusRequest = Pool.Get<FerryStatusRequest>();
		CopyTo(ferryStatusRequest);
		return ferryStatusRequest;
	}

	public static FerryStatusRequest Deserialize(Stream stream)
	{
		FerryStatusRequest ferryStatusRequest = Pool.Get<FerryStatusRequest>();
		Deserialize(stream, ferryStatusRequest, isDelta: false);
		return ferryStatusRequest;
	}

	public static FerryStatusRequest DeserializeLengthDelimited(Stream stream)
	{
		FerryStatusRequest ferryStatusRequest = Pool.Get<FerryStatusRequest>();
		DeserializeLengthDelimited(stream, ferryStatusRequest, isDelta: false);
		return ferryStatusRequest;
	}

	public static FerryStatusRequest DeserializeLength(Stream stream, int length)
	{
		FerryStatusRequest ferryStatusRequest = Pool.Get<FerryStatusRequest>();
		DeserializeLength(stream, length, ferryStatusRequest, isDelta: false);
		return ferryStatusRequest;
	}

	public static FerryStatusRequest Deserialize(byte[] buffer)
	{
		FerryStatusRequest ferryStatusRequest = Pool.Get<FerryStatusRequest>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, ferryStatusRequest, isDelta: false);
		return ferryStatusRequest;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, FerryStatusRequest previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static FerryStatusRequest Deserialize(byte[] buffer, FerryStatusRequest instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static FerryStatusRequest Deserialize(Stream stream, FerryStatusRequest instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			if (num == -1)
			{
				break;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		return instance;
	}

	public static FerryStatusRequest DeserializeLengthDelimited(Stream stream, FerryStatusRequest instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (true)
		{
			if (stream.Position >= num)
			{
				if (stream.Position == num)
				{
					break;
				}
				throw new ProtocolBufferException("Read past max limit");
			}
			int num2 = stream.ReadByte();
			if (num2 == -1)
			{
				throw new EndOfStreamException();
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		return instance;
	}

	public static FerryStatusRequest DeserializeLength(Stream stream, int length, FerryStatusRequest instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (true)
		{
			if (stream.Position >= num)
			{
				if (stream.Position == num)
				{
					break;
				}
				throw new ProtocolBufferException("Read past max limit");
			}
			int num2 = stream.ReadByte();
			if (num2 == -1)
			{
				throw new EndOfStreamException();
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, FerryStatusRequest instance, FerryStatusRequest previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, FerryStatusRequest instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(FerryStatusRequest instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, FerryStatusRequest instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf.Nexus;
using SilentOrbit.ProtocolBuffers;

public class FerryStatusResponse : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public List<FerryStatus> statuses;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(FerryStatusResponse instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.statuses != null)
		{
			for (int i = 0; i < instance.statuses.Count; i++)
			{
				if (instance.statuses[i] != null)
				{
					instance.statuses[i].ResetToPool();
					instance.statuses[i] = null;
				}
			}
			List<FerryStatus> list = instance.statuses;
			Pool.Free<FerryStatus>(ref list, false);
			instance.statuses = list;
		}
		Pool.Free<FerryStatusResponse>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose FerryStatusResponse with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(FerryStatusResponse instance)
	{
		if (statuses != null)
		{
			instance.statuses = Pool.Get<List<FerryStatus>>();
			for (int i = 0; i < statuses.Count; i++)
			{
				FerryStatus item = statuses[i].Copy();
				instance.statuses.Add(item);
			}
		}
		else
		{
			instance.statuses = null;
		}
	}

	public FerryStatusResponse Copy()
	{
		FerryStatusResponse ferryStatusResponse = Pool.Get<FerryStatusResponse>();
		CopyTo(ferryStatusResponse);
		return ferryStatusResponse;
	}

	public static FerryStatusResponse Deserialize(Stream stream)
	{
		FerryStatusResponse ferryStatusResponse = Pool.Get<FerryStatusResponse>();
		Deserialize(stream, ferryStatusResponse, isDelta: false);
		return ferryStatusResponse;
	}

	public static FerryStatusResponse DeserializeLengthDelimited(Stream stream)
	{
		FerryStatusResponse ferryStatusResponse = Pool.Get<FerryStatusResponse>();
		DeserializeLengthDelimited(stream, ferryStatusResponse, isDelta: false);
		return ferryStatusResponse;
	}

	public static FerryStatusResponse DeserializeLength(Stream stream, int length)
	{
		FerryStatusResponse ferryStatusResponse = Pool.Get<FerryStatusResponse>();
		DeserializeLength(stream, length, ferryStatusResponse, isDelta: false);
		return ferryStatusResponse;
	}

	public static FerryStatusResponse Deserialize(byte[] buffer)
	{
		FerryStatusResponse ferryStatusResponse = Pool.Get<FerryStatusResponse>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, ferryStatusResponse, isDelta: false);
		return ferryStatusResponse;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, FerryStatusResponse previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static FerryStatusResponse Deserialize(byte[] buffer, FerryStatusResponse instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static FerryStatusResponse Deserialize(Stream stream, FerryStatusResponse instance, bool isDelta)
	{
		if (!isDelta && instance.statuses == null)
		{
			instance.statuses = Pool.Get<List<FerryStatus>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.statuses.Add(FerryStatus.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static FerryStatusResponse DeserializeLengthDelimited(Stream stream, FerryStatusResponse instance, bool isDelta)
	{
		if (!isDelta && instance.statuses == null)
		{
			instance.statuses = Pool.Get<List<FerryStatus>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.statuses.Add(FerryStatus.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static FerryStatusResponse DeserializeLength(Stream stream, int length, FerryStatusResponse instance, bool isDelta)
	{
		if (!isDelta && instance.statuses == null)
		{
			instance.statuses = Pool.Get<List<FerryStatus>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.statuses.Add(FerryStatus.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, FerryStatusResponse instance, FerryStatusResponse previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.statuses != null)
		{
			for (int i = 0; i < instance.statuses.Count; i++)
			{
				FerryStatus ferryStatus = instance.statuses[i];
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				FerryStatus.SerializeDelta(memoryStream, ferryStatus, ferryStatus);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, FerryStatusResponse instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.statuses != null)
		{
			for (int i = 0; i < instance.statuses.Count; i++)
			{
				FerryStatus instance2 = instance.statuses[i];
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				FerryStatus.Serialize(memoryStream, instance2);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(FerryStatusResponse instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, FerryStatusResponse instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (statuses != null)
		{
			for (int i = 0; i < statuses.Count; i++)
			{
				statuses[i]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf.Nexus;
using SilentOrbit.ProtocolBuffers;

public class FerryStatus : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public NetworkableId entityId;

	[NonSerialized]
	public long timestamp;

	[NonSerialized]
	public string ownerZone;

	[NonSerialized]
	public List<string> schedule;

	[NonSerialized]
	public int scheduleIndex;

	[NonSerialized]
	public int state;

	[NonSerialized]
	public bool isRetiring;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(FerryStatus instance)
	{
		if (instance.ShouldPool)
		{
			instance.entityId = default(NetworkableId);
			instance.timestamp = 0L;
			instance.ownerZone = string.Empty;
			if (instance.schedule != null)
			{
				List<string> list = instance.schedule;
				Pool.FreeUnmanaged<string>(ref list);
				instance.schedule = list;
			}
			instance.scheduleIndex = 0;
			instance.state = 0;
			instance.isRetiring = false;
			Pool.Free<FerryStatus>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose FerryStatus with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(FerryStatus instance)
	{
		instance.entityId = entityId;
		instance.timestamp = timestamp;
		instance.ownerZone = ownerZone;
		if (schedule != null)
		{
			instance.schedule = Pool.Get<List<string>>();
			for (int i = 0; i < schedule.Count; i++)
			{
				string item = schedule[i];
				instance.schedule.Add(item);
			}
		}
		else
		{
			instance.schedule = null;
		}
		instance.scheduleIndex = scheduleIndex;
		instance.state = state;
		instance.isRetiring = isRetiring;
	}

	public FerryStatus Copy()
	{
		FerryStatus ferryStatus = Pool.Get<FerryStatus>();
		CopyTo(ferryStatus);
		return ferryStatus;
	}

	public static FerryStatus Deserialize(Stream stream)
	{
		FerryStatus ferryStatus = Pool.Get<FerryStatus>();
		Deserialize(stream, ferryStatus, isDelta: false);
		return ferryStatus;
	}

	public static FerryStatus DeserializeLengthDelimited(Stream stream)
	{
		FerryStatus ferryStatus = Pool.Get<FerryStatus>();
		DeserializeLengthDelimited(stream, ferryStatus, isDelta: false);
		return ferryStatus;
	}

	public static FerryStatus DeserializeLength(Stream stream, int length)
	{
		FerryStatus ferryStatus = Pool.Get<FerryStatus>();
		DeserializeLength(stream, length, ferryStatus, isDelta: false);
		return ferryStatus;
	}

	public static FerryStatus Deserialize(byte[] buffer)
	{
		FerryStatus ferryStatus = Pool.Get<FerryStatus>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, ferryStatus, isDelta: false);
		return ferryStatus;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, FerryStatus previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static FerryStatus Deserialize(byte[] buffer, FerryStatus instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static FerryStatus Deserialize(Stream stream, FerryStatus instance, bool isDelta)
	{
		if (!isDelta && instance.schedule == null)
		{
			instance.schedule = Pool.Get<List<string>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.entityId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 16:
				instance.timestamp = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 26:
				instance.ownerZone = ProtocolParser.ReadString(stream);
				continue;
			case 34:
				instance.schedule.Add(ProtocolParser.ReadString(stream));
				continue;
			case 40:
				instance.scheduleIndex = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.state = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 56:
				instance.isRetiring = ProtocolParser.ReadBool(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static FerryStatus DeserializeLengthDelimited(Stream stream, FerryStatus instance, bool isDelta)
	{
		if (!isDelta && instance.schedule == null)
		{
			instance.schedule = Pool.Get<List<string>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.entityId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 16:
				instance.timestamp = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 26:
				instance.ownerZone = ProtocolParser.ReadString(stream);
				continue;
			case 34:
				instance.schedule.Add(ProtocolParser.ReadString(stream));
				continue;
			case 40:
				instance.scheduleIndex = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.state = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 56:
				instance.isRetiring = ProtocolParser.ReadBool(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static FerryStatus DeserializeLength(Stream stream, int length, FerryStatus instance, bool isDelta)
	{
		if (!isDelta && instance.schedule == null)
		{
			instance.schedule = Pool.Get<List<string>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.entityId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 16:
				instance.timestamp = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 26:
				instance.ownerZone = ProtocolParser.ReadString(stream);
				continue;
			case 34:
				instance.schedule.Add(ProtocolParser.ReadString(stream));
				continue;
			case 40:
				instance.scheduleIndex = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.state = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 56:
				instance.isRetiring = ProtocolParser.ReadBool(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, FerryStatus instance, FerryStatus previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		stream.WriteByte(8);
		ProtocolParser.WriteUInt64(stream, instance.entityId.Value);
		stream.WriteByte(16);
		ProtocolParser.WriteUInt64(stream, (ulong)instance.timestamp);
		if (instance.ownerZone != previous.ownerZone)
		{
			if (instance.ownerZone == null)
			{
				throw new ArgumentNullException("ownerZone", "Required by proto specification.");
			}
			stream.WriteByte(26);
			ProtocolParser.WriteString(stream, instance.ownerZone);
		}
		if (instance.schedule != null)
		{
			for (int i = 0; i < instance.schedule.Count; i++)
			{
				string val = instance.schedule[i];
				stream.WriteByte(34);
				ProtocolParser.WriteString(stream, val);
			}
		}
		if (instance.scheduleIndex != previous.scheduleIndex)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.scheduleIndex);
		}
		if (instance.state != previous.state)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.state);
		}
		stream.WriteByte(56);
		ProtocolParser.WriteBool(stream, instance.isRetiring);
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, FerryStatus instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.entityId != default(NetworkableId))
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.entityId.Value);
		}
		if (instance.timestamp != 0L)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.timestamp);
		}
		if (instance.ownerZone == null)
		{
			throw new ArgumentNullException("ownerZone", "Required by proto specification.");
		}
		stream.WriteByte(26);
		ProtocolParser.WriteString(stream, instance.ownerZone);
		if (instance.schedule != null)
		{
			for (int i = 0; i < instance.schedule.Count; i++)
			{
				string val = instance.schedule[i];
				stream.WriteByte(34);
				ProtocolParser.WriteString(stream, val);
			}
		}
		if (instance.scheduleIndex != 0)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.scheduleIndex);
		}
		if (instance.state != 0)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.state);
		}
		if (instance.isRetiring)
		{
			stream.WriteByte(56);
			ProtocolParser.WriteBool(stream, instance.isRetiring);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(FerryStatus instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, FerryStatus instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		action(UidType.NetworkableId, ref entityId.Value);
	}
}


using System;
using System.IO;
using Facepunch;
using ProtoBuf.Nexus;
using SilentOrbit.ProtocolBuffers;

public class FerryRetireRequest : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public NetworkableId entityId;

	[NonSerialized]
	public long timestamp;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(FerryRetireRequest instance)
	{
		if (instance.ShouldPool)
		{
			instance.entityId = default(NetworkableId);
			instance.timestamp = 0L;
			Pool.Free<FerryRetireRequest>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose FerryRetireRequest with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(FerryRetireRequest instance)
	{
		instance.entityId = entityId;
		instance.timestamp = timestamp;
	}

	public FerryRetireRequest Copy()
	{
		FerryRetireRequest ferryRetireRequest = Pool.Get<FerryRetireRequest>();
		CopyTo(ferryRetireRequest);
		return ferryRetireRequest;
	}

	public static FerryRetireRequest Deserialize(Stream stream)
	{
		FerryRetireRequest ferryRetireRequest = Pool.Get<FerryRetireRequest>();
		Deserialize(stream, ferryRetireRequest, isDelta: false);
		return ferryRetireRequest;
	}

	public static FerryRetireRequest DeserializeLengthDelimited(Stream stream)
	{
		FerryRetireRequest ferryRetireRequest = Pool.Get<FerryRetireRequest>();
		DeserializeLengthDelimited(stream, ferryRetireRequest, isDelta: false);
		return ferryRetireRequest;
	}

	public static FerryRetireRequest DeserializeLength(Stream stream, int length)
	{
		FerryRetireRequest ferryRetireRequest = Pool.Get<FerryRetireRequest>();
		DeserializeLength(stream, length, ferryRetireRequest, isDelta: false);
		return ferryRetireRequest;
	}

	public static FerryRetireRequest Deserialize(byte[] buffer)
	{
		FerryRetireRequest ferryRetireRequest = Pool.Get<FerryRetireRequest>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, ferryRetireRequest, isDelta: false);
		return ferryRetireRequest;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, FerryRetireRequest previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static FerryRetireRequest Deserialize(byte[] buffer, FerryRetireRequest instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static FerryRetireRequest Deserialize(Stream stream, FerryRetireRequest instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.entityId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 16:
				instance.timestamp = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static FerryRetireRequest DeserializeLengthDelimited(Stream stream, FerryRetireRequest instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.entityId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 16:
				instance.timestamp = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static FerryRetireRequest DeserializeLength(Stream stream, int length, FerryRetireRequest instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.entityId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 16:
				instance.timestamp = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, FerryRetireRequest instance, FerryRetireRequest previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		stream.WriteByte(8);
		ProtocolParser.WriteUInt64(stream, instance.entityId.Value);
		stream.WriteByte(16);
		ProtocolParser.WriteUInt64(stream, (ulong)instance.timestamp);
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, FerryRetireRequest instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.entityId != default(NetworkableId))
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.entityId.Value);
		}
		if (instance.timestamp != 0L)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.timestamp);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(FerryRetireRequest instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, FerryRetireRequest instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		action(UidType.NetworkableId, ref entityId.Value);
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf.Nexus;
using SilentOrbit.ProtocolBuffers;

public class FerryUpdateScheduleRequest : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public NetworkableId entityId;

	[NonSerialized]
	public long timestamp;

	[NonSerialized]
	public List<string> schedule;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(FerryUpdateScheduleRequest instance)
	{
		if (instance.ShouldPool)
		{
			instance.entityId = default(NetworkableId);
			instance.timestamp = 0L;
			if (instance.schedule != null)
			{
				List<string> list = instance.schedule;
				Pool.FreeUnmanaged<string>(ref list);
				instance.schedule = list;
			}
			Pool.Free<FerryUpdateScheduleRequest>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose FerryUpdateScheduleRequest with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(FerryUpdateScheduleRequest instance)
	{
		instance.entityId = entityId;
		instance.timestamp = timestamp;
		if (schedule != null)
		{
			instance.schedule = Pool.Get<List<string>>();
			for (int i = 0; i < schedule.Count; i++)
			{
				string item = schedule[i];
				instance.schedule.Add(item);
			}
		}
		else
		{
			instance.schedule = null;
		}
	}

	public FerryUpdateScheduleRequest Copy()
	{
		FerryUpdateScheduleRequest ferryUpdateScheduleRequest = Pool.Get<FerryUpdateScheduleRequest>();
		CopyTo(ferryUpdateScheduleRequest);
		return ferryUpdateScheduleRequest;
	}

	public static FerryUpdateScheduleRequest Deserialize(Stream stream)
	{
		FerryUpdateScheduleRequest ferryUpdateScheduleRequest = Pool.Get<FerryUpdateScheduleRequest>();
		Deserialize(stream, ferryUpdateScheduleRequest, isDelta: false);
		return ferryUpdateScheduleRequest;
	}

	public static FerryUpdateScheduleRequest DeserializeLengthDelimited(Stream stream)
	{
		FerryUpdateScheduleRequest ferryUpdateScheduleRequest = Pool.Get<FerryUpdateScheduleRequest>();
		DeserializeLengthDelimited(stream, ferryUpdateScheduleRequest, isDelta: false);
		return ferryUpdateScheduleRequest;
	}

	public static FerryUpdateScheduleRequest DeserializeLength(Stream stream, int length)
	{
		FerryUpdateScheduleRequest ferryUpdateScheduleRequest = Pool.Get<FerryUpdateScheduleRequest>();
		DeserializeLength(stream, length, ferryUpdateScheduleRequest, isDelta: false);
		return ferryUpdateScheduleRequest;
	}

	public static FerryUpdateScheduleRequest Deserialize(byte[] buffer)
	{
		FerryUpdateScheduleRequest ferryUpdateScheduleRequest = Pool.Get<FerryUpdateScheduleRequest>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, ferryUpdateScheduleRequest, isDelta: false);
		return ferryUpdateScheduleRequest;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, FerryUpdateScheduleRequest previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static FerryUpdateScheduleRequest Deserialize(byte[] buffer, FerryUpdateScheduleRequest instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static FerryUpdateScheduleRequest Deserialize(Stream stream, FerryUpdateScheduleRequest instance, bool isDelta)
	{
		if (!isDelta && instance.schedule == null)
		{
			instance.schedule = Pool.Get<List<string>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.entityId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 16:
				instance.timestamp = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 26:
				instance.schedule.Add(ProtocolParser.ReadString(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static FerryUpdateScheduleRequest DeserializeLengthDelimited(Stream stream, FerryUpdateScheduleRequest instance, bool isDelta)
	{
		if (!isDelta && instance.schedule == null)
		{
			instance.schedule = Pool.Get<List<string>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.entityId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 16:
				instance.timestamp = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 26:
				instance.schedule.Add(ProtocolParser.ReadString(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static FerryUpdateScheduleRequest DeserializeLength(Stream stream, int length, FerryUpdateScheduleRequest instance, bool isDelta)
	{
		if (!isDelta && instance.schedule == null)
		{
			instance.schedule = Pool.Get<List<string>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.entityId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 16:
				instance.timestamp = (long)ProtocolParser.ReadUInt64(stream);
				continue;
			case 26:
				instance.schedule.Add(ProtocolParser.ReadString(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, FerryUpdateScheduleRequest instance, FerryUpdateScheduleRequest previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		stream.WriteByte(8);
		ProtocolParser.WriteUInt64(stream, instance.entityId.Value);
		stream.WriteByte(16);
		ProtocolParser.WriteUInt64(stream, (ulong)instance.timestamp);
		if (instance.schedule != null)
		{
			for (int i = 0; i < instance.schedule.Count; i++)
			{
				string val = instance.schedule[i];
				stream.WriteByte(26);
				ProtocolParser.WriteString(stream, val);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, FerryUpdateScheduleRequest instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.entityId != default(NetworkableId))
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.entityId.Value);
		}
		if (instance.timestamp != 0L)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.timestamp);
		}
		if (instance.schedule != null)
		{
			for (int i = 0; i < instance.schedule.Count; i++)
			{
				string val = instance.schedule[i];
				stream.WriteByte(26);
				ProtocolParser.WriteString(stream, val);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(FerryUpdateScheduleRequest instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, FerryUpdateScheduleRequest instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		action(UidType.NetworkableId, ref entityId.Value);
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf.Nexus;
using SilentOrbit.ProtocolBuffers;

public class ClanChatBatchRequest : IDisposable, IPooled, IProto
{
	public class Message : IDisposable, IPooled, IProto
	{
		[NonSerialized]
		public long clanId;

		[NonSerialized]
		public ulong userId;

		[NonSerialized]
		public string text;

		[NonSerialized]
		public string name;

		[NonSerialized]
		public long timestamp;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(Message instance)
		{
			if (instance.ShouldPool)
			{
				instance.clanId = 0L;
				instance.userId = 0uL;
				instance.text = string.Empty;
				instance.name = string.Empty;
				instance.timestamp = 0L;
				Pool.Free<Message>(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose Message with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(Message instance)
		{
			instance.clanId = clanId;
			instance.userId = userId;
			instance.text = text;
			instance.name = name;
			instance.timestamp = timestamp;
		}

		public Message Copy()
		{
			Message message = Pool.Get<Message>();
			CopyTo(message);
			return message;
		}

		public static Message Deserialize(Stream stream)
		{
			Message message = Pool.Get<Message>();
			Deserialize(stream, message, isDelta: false);
			return message;
		}

		public static Message DeserializeLengthDelimited(Stream stream)
		{
			Message message = Pool.Get<Message>();
			DeserializeLengthDelimited(stream, message, isDelta: false);
			return message;
		}

		public static Message DeserializeLength(Stream stream, int length)
		{
			Message message = Pool.Get<Message>();
			DeserializeLength(stream, length, message, isDelta: false);
			return message;
		}

		public static Message Deserialize(byte[] buffer)
		{
			Message message = Pool.Get<Message>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, message, isDelta: false);
			return message;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, Message previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static Message Deserialize(byte[] buffer, Message instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static Message Deserialize(Stream stream, Message instance, bool isDelta)
		{
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.clanId = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.userId = ProtocolParser.ReadUInt64(stream);
					continue;
				case 26:
					instance.text = ProtocolParser.ReadString(stream);
					continue;
				case 34:
					instance.name = ProtocolParser.ReadString(stream);
					continue;
				case 40:
					instance.timestamp = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static Message DeserializeLengthDelimited(Stream stream, Message instance, bool isDelta)
		{
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.clanId = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.userId = ProtocolParser.ReadUInt64(stream);
					continue;
				case 26:
					instance.text = ProtocolParser.ReadString(stream);
					continue;
				case 34:
					instance.name = ProtocolParser.ReadString(stream);
					continue;
				case 40:
					instance.timestamp = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static Message DeserializeLength(Stream stream, int length, Message instance, bool isDelta)
		{
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.clanId = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.userId = ProtocolParser.ReadUInt64(stream);
					continue;
				case 26:
					instance.text = ProtocolParser.ReadString(stream);
					continue;
				case 34:
					instance.name = ProtocolParser.ReadString(stream);
					continue;
				case 40:
					instance.timestamp = (long)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, Message instance, Message previous)
		{
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.clanId);
			if (instance.userId != previous.userId)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, instance.userId);
			}
			if (instance.text != previous.text)
			{
				if (instance.text == null)
				{
					throw new ArgumentNullException("text", "Required by proto specification.");
				}
				stream.WriteByte(26);
				ProtocolParser.WriteString(stream, instance.text);
			}
			if (instance.name != previous.name)
			{
				if (instance.name == null)
				{
					throw new ArgumentNullException("name", "Required by proto specification.");
				}
				stream.WriteByte(34);
				ProtocolParser.WriteString(stream, instance.name);
			}
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.timestamp);
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public static void Serialize(Stream stream, Message instance)
		{
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.clanId != 0L)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.clanId);
			}
			if (instance.userId != 0L)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, instance.userId);
			}
			if (instance.text == null)
			{
				throw new ArgumentNullException("text", "Required by proto specification.");
			}
			stream.WriteByte(26);
			ProtocolParser.WriteString(stream, instance.text);
			if (instance.name == null)
			{
				throw new ArgumentNullException("name", "Required by proto specification.");
			}
			stream.WriteByte(34);
			ProtocolParser.WriteString(stream, instance.name);
			if (instance.timestamp != 0L)
			{
				stream.WriteByte(40);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.timestamp);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(Message instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, Message instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	[NonSerialized]
	public List<Message> messages;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(ClanChatBatchRequest instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.messages != null)
		{
			for (int i = 0; i < instance.messages.Count; i++)
			{
				if (instance.messages[i] != null)
				{
					instance.messages[i].ResetToPool();
					instance.messages[i] = null;
				}
			}
			List<Message> list = instance.messages;
			Pool.Free<Message>(ref list, false);
			instance.messages = list;
		}
		Pool.Free<ClanChatBatchRequest>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose ClanChatBatchRequest with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(ClanChatBatchRequest instance)
	{
		if (messages != null)
		{
			instance.messages = Pool.Get<List<Message>>();
			for (int i = 0; i < messages.Count; i++)
			{
				Message item = messages[i].Copy();
				instance.messages.Add(item);
			}
		}
		else
		{
			instance.messages = null;
		}
	}

	public ClanChatBatchRequest Copy()
	{
		ClanChatBatchRequest clanChatBatchRequest = Pool.Get<ClanChatBatchRequest>();
		CopyTo(clanChatBatchRequest);
		return clanChatBatchRequest;
	}

	public static ClanChatBatchRequest Deserialize(Stream stream)
	{
		ClanChatBatchRequest clanChatBatchRequest = Pool.Get<ClanChatBatchRequest>();
		Deserialize(stream, clanChatBatchRequest, isDelta: false);
		return clanChatBatchRequest;
	}

	public static ClanChatBatchRequest DeserializeLengthDelimited(Stream stream)
	{
		ClanChatBatchRequest clanChatBatchRequest = Pool.Get<ClanChatBatchRequest>();
		DeserializeLengthDelimited(stream, clanChatBatchRequest, isDelta: false);
		return clanChatBatchRequest;
	}

	public static ClanChatBatchRequest DeserializeLength(Stream stream, int length)
	{
		ClanChatBatchRequest clanChatBatchRequest = Pool.Get<ClanChatBatchRequest>();
		DeserializeLength(stream, length, clanChatBatchRequest, isDelta: false);
		return clanChatBatchRequest;
	}

	public static ClanChatBatchRequest Deserialize(byte[] buffer)
	{
		ClanChatBatchRequest clanChatBatchRequest = Pool.Get<ClanChatBatchRequest>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, clanChatBatchRequest, isDelta: false);
		return clanChatBatchRequest;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, ClanChatBatchRequest previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static ClanChatBatchRequest Deserialize(byte[] buffer, ClanChatBatchRequest instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static ClanChatBatchRequest Deserialize(Stream stream, ClanChatBatchRequest instance, bool isDelta)
	{
		if (!isDelta && instance.messages == null)
		{
			instance.messages = Pool.Get<List<Message>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.messages.Add(Message.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static ClanChatBatchRequest DeserializeLengthDelimited(Stream stream, ClanChatBatchRequest instance, bool isDelta)
	{
		if (!isDelta && instance.messages == null)
		{
			instance.messages = Pool.Get<List<Message>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.messages.Add(Message.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static ClanChatBatchRequest DeserializeLength(Stream stream, int length, ClanChatBatchRequest instance, bool isDelta)
	{
		if (!isDelta && instance.messages == null)
		{
			instance.messages = Pool.Get<List<Message>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.messages.Add(Message.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, ClanChatBatchRequest instance, ClanChatBatchRequest previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.messages != null)
		{
			for (int i = 0; i < instance.messages.Count; i++)
			{
				Message message = instance.messages[i];
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				Message.SerializeDelta(memoryStream, message, message);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, ClanChatBatchRequest instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.messages != null)
		{
			for (int i = 0; i < instance.messages.Count; i++)
			{
				Message instance2 = instance.messages[i];
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				Message.Serialize(memoryStream, instance2);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(ClanChatBatchRequest instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, ClanChatBatchRequest instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (messages != null)
		{
			for (int i = 0; i < messages.Count; i++)
			{
				messages[i]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf.Nexus;
using SilentOrbit.ProtocolBuffers;

public class PlayerManifestRequest : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public List<ulong> userIds;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(PlayerManifestRequest instance)
	{
		if (instance.ShouldPool)
		{
			if (instance.userIds != null)
			{
				List<ulong> list = instance.userIds;
				Pool.FreeUnmanaged<ulong>(ref list);
				instance.userIds = list;
			}
			Pool.Free<PlayerManifestRequest>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose PlayerManifestRequest with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(PlayerManifestRequest instance)
	{
		if (userIds != null)
		{
			instance.userIds = Pool.Get<List<ulong>>();
			for (int i = 0; i < userIds.Count; i++)
			{
				ulong item = userIds[i];
				instance.userIds.Add(item);
			}
		}
		else
		{
			instance.userIds = null;
		}
	}

	public PlayerManifestRequest Copy()
	{
		PlayerManifestRequest playerManifestRequest = Pool.Get<PlayerManifestRequest>();
		CopyTo(playerManifestRequest);
		return playerManifestRequest;
	}

	public static PlayerManifestRequest Deserialize(Stream stream)
	{
		PlayerManifestRequest playerManifestRequest = Pool.Get<PlayerManifestRequest>();
		Deserialize(stream, playerManifestRequest, isDelta: false);
		return playerManifestRequest;
	}

	public static PlayerManifestRequest DeserializeLengthDelimited(Stream stream)
	{
		PlayerManifestRequest playerManifestRequest = Pool.Get<PlayerManifestRequest>();
		DeserializeLengthDelimited(stream, playerManifestRequest, isDelta: false);
		return playerManifestRequest;
	}

	public static PlayerManifestRequest DeserializeLength(Stream stream, int length)
	{
		PlayerManifestRequest playerManifestRequest = Pool.Get<PlayerManifestRequest>();
		DeserializeLength(stream, length, playerManifestRequest, isDelta: false);
		return playerManifestRequest;
	}

	public static PlayerManifestRequest Deserialize(byte[] buffer)
	{
		PlayerManifestRequest playerManifestRequest = Pool.Get<PlayerManifestRequest>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, playerManifestRequest, isDelta: false);
		return playerManifestRequest;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, PlayerManifestRequest previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static PlayerManifestRequest Deserialize(byte[] buffer, PlayerManifestRequest instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static PlayerManifestRequest Deserialize(Stream stream, PlayerManifestRequest instance, bool isDelta)
	{
		if (!isDelta && instance.userIds == null)
		{
			instance.userIds = Pool.Get<List<ulong>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.userIds.Add(ProtocolParser.ReadUInt64(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static PlayerManifestRequest DeserializeLengthDelimited(Stream stream, PlayerManifestRequest instance, bool isDelta)
	{
		if (!isDelta && instance.userIds == null)
		{
			instance.userIds = Pool.Get<List<ulong>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.userIds.Add(ProtocolParser.ReadUInt64(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static PlayerManifestRequest DeserializeLength(Stream stream, int length, PlayerManifestRequest instance, bool isDelta)
	{
		if (!isDelta && instance.userIds == null)
		{
			instance.userIds = Pool.Get<List<ulong>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.userIds.Add(ProtocolParser.ReadUInt64(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, PlayerManifestRequest instance, PlayerManifestRequest previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.userIds != null)
		{
			for (int i = 0; i < instance.userIds.Count; i++)
			{
				ulong val = instance.userIds[i];
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, val);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, PlayerManifestRequest instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.userIds != null)
		{
			for (int i = 0; i < instance.userIds.Count; i++)
			{
				ulong val = instance.userIds[i];
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, val);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(PlayerManifestRequest instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, PlayerManifestRequest instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


public enum Flag
{
	Ducked = 1,
	Jumped = 2,
	OnGround = 4,
	Sleeping = 8,
	Sprinting = 0x10,
	OnLadder = 0x20,
	Flying = 0x40,
	Aiming = 0x80,
	Prone = 0x100,
	Mounted = 0x200,
	Relaxed = 0x400,
	OnPhone = 0x800,
	Crawling = 0x1000,
	Loading = 0x2000,
	HeadLook = 0x4000,
	HasParachute = 0x8000,
	Blocking = 0x10000,
	Ragdolling = 0x20000
}


private struct MonoScriptData
{
	public byte[] FilePathsData;

	public byte[] TypesData;

	public int TotalTypes;

	public int TotalFiles;

	public bool IsEditorOnly;
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class Private : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public List<ItemContainer> container;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(Private instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.container != null)
		{
			for (int i = 0; i < instance.container.Count; i++)
			{
				if (instance.container[i] != null)
				{
					instance.container[i].ResetToPool();
					instance.container[i] = null;
				}
			}
			List<ItemContainer> list = instance.container;
			Pool.Free<ItemContainer>(ref list, false);
			instance.container = list;
		}
		Pool.Free<Private>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose Private with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(Private instance)
	{
		if (container != null)
		{
			instance.container = Pool.Get<List<ItemContainer>>();
			for (int i = 0; i < container.Count; i++)
			{
				ItemContainer item = container[i].Copy();
				instance.container.Add(item);
			}
		}
		else
		{
			instance.container = null;
		}
	}

	public Private Copy()
	{
		Private @private = Pool.Get<Private>();
		CopyTo(@private);
		return @private;
	}

	public static Private Deserialize(Stream stream)
	{
		Private @private = Pool.Get<Private>();
		Deserialize(stream, @private, isDelta: false);
		return @private;
	}

	public static Private DeserializeLengthDelimited(Stream stream)
	{
		Private @private = Pool.Get<Private>();
		DeserializeLengthDelimited(stream, @private, isDelta: false);
		return @private;
	}

	public static Private DeserializeLength(Stream stream, int length)
	{
		Private @private = Pool.Get<Private>();
		DeserializeLength(stream, length, @private, isDelta: false);
		return @private;
	}

	public static Private Deserialize(byte[] buffer)
	{
		Private @private = Pool.Get<Private>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, @private, isDelta: false);
		return @private;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, Private previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static Private Deserialize(byte[] buffer, Private instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static Private Deserialize(Stream stream, Private instance, bool isDelta)
	{
		if (!isDelta && instance.container == null)
		{
			instance.container = Pool.Get<List<ItemContainer>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.container.Add(ItemContainer.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static Private DeserializeLengthDelimited(Stream stream, Private instance, bool isDelta)
	{
		if (!isDelta && instance.container == null)
		{
			instance.container = Pool.Get<List<ItemContainer>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.container.Add(ItemContainer.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Private DeserializeLength(Stream stream, int length, Private instance, bool isDelta)
	{
		if (!isDelta && instance.container == null)
		{
			instance.container = Pool.Get<List<ItemContainer>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.container.Add(ItemContainer.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, Private instance, Private previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.container != null)
		{
			for (int i = 0; i < instance.container.Count; i++)
			{
				ItemContainer itemContainer = instance.container[i];
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				ItemContainer.SerializeDelta(memoryStream, itemContainer, itemContainer);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, Private instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.container != null)
		{
			for (int i = 0; i < instance.container.Count; i++)
			{
				ItemContainer instance2 = instance.container[i];
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				ItemContainer.Serialize(memoryStream, instance2);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(Private instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, Private instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (container != null)
		{
			for (int i = 0; i < container.Count; i++)
			{
				container[i]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class Private : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public string code;

	[NonSerialized]
	public List<ulong> users;

	[NonSerialized]
	public string guestCode;

	[NonSerialized]
	public List<ulong> guestUsers;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(Private instance)
	{
		if (instance.ShouldPool)
		{
			instance.code = string.Empty;
			if (instance.users != null)
			{
				List<ulong> list = instance.users;
				Pool.FreeUnmanaged<ulong>(ref list);
				instance.users = list;
			}
			instance.guestCode = string.Empty;
			if (instance.guestUsers != null)
			{
				List<ulong> list2 = instance.guestUsers;
				Pool.FreeUnmanaged<ulong>(ref list2);
				instance.guestUsers = list2;
			}
			Pool.Free<Private>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose Private with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(Private instance)
	{
		instance.code = code;
		if (users != null)
		{
			instance.users = Pool.Get<List<ulong>>();
			for (int i = 0; i < users.Count; i++)
			{
				ulong item = users[i];
				instance.users.Add(item);
			}
		}
		else
		{
			instance.users = null;
		}
		instance.guestCode = guestCode;
		if (guestUsers != null)
		{
			instance.guestUsers = Pool.Get<List<ulong>>();
			for (int j = 0; j < guestUsers.Count; j++)
			{
				ulong item2 = guestUsers[j];
				instance.guestUsers.Add(item2);
			}
		}
		else
		{
			instance.guestUsers = null;
		}
	}

	public Private Copy()
	{
		Private @private = Pool.Get<Private>();
		CopyTo(@private);
		return @private;
	}

	public static Private Deserialize(Stream stream)
	{
		Private @private = Pool.Get<Private>();
		Deserialize(stream, @private, isDelta: false);
		return @private;
	}

	public static Private DeserializeLengthDelimited(Stream stream)
	{
		Private @private = Pool.Get<Private>();
		DeserializeLengthDelimited(stream, @private, isDelta: false);
		return @private;
	}

	public static Private DeserializeLength(Stream stream, int length)
	{
		Private @private = Pool.Get<Private>();
		DeserializeLength(stream, length, @private, isDelta: false);
		return @private;
	}

	public static Private Deserialize(byte[] buffer)
	{
		Private @private = Pool.Get<Private>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, @private, isDelta: false);
		return @private;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, Private previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static Private Deserialize(byte[] buffer, Private instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static Private Deserialize(Stream stream, Private instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.users == null)
			{
				instance.users = Pool.Get<List<ulong>>();
			}
			if (instance.guestUsers == null)
			{
				instance.guestUsers = Pool.Get<List<ulong>>();
			}
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.code = ProtocolParser.ReadString(stream);
				continue;
			case 16:
				instance.users.Add(ProtocolParser.ReadUInt64(stream));
				continue;
			case 34:
				instance.guestCode = ProtocolParser.ReadString(stream);
				continue;
			case 40:
				instance.guestUsers.Add(ProtocolParser.ReadUInt64(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static Private DeserializeLengthDelimited(Stream stream, Private instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.users == null)
			{
				instance.users = Pool.Get<List<ulong>>();
			}
			if (instance.guestUsers == null)
			{
				instance.guestUsers = Pool.Get<List<ulong>>();
			}
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.code = ProtocolParser.ReadString(stream);
				continue;
			case 16:
				instance.users.Add(ProtocolParser.ReadUInt64(stream));
				continue;
			case 34:
				instance.guestCode = ProtocolParser.ReadString(stream);
				continue;
			case 40:
				instance.guestUsers.Add(ProtocolParser.ReadUInt64(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Private DeserializeLength(Stream stream, int length, Private instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.users == null)
			{
				instance.users = Pool.Get<List<ulong>>();
			}
			if (instance.guestUsers == null)
			{
				instance.guestUsers = Pool.Get<List<ulong>>();
			}
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.code = ProtocolParser.ReadString(stream);
				continue;
			case 16:
				instance.users.Add(ProtocolParser.ReadUInt64(stream));
				continue;
			case 34:
				instance.guestCode = ProtocolParser.ReadString(stream);
				continue;
			case 40:
				instance.guestUsers.Add(ProtocolParser.ReadUInt64(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, Private instance, Private previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.code != null && instance.code != previous.code)
		{
			stream.WriteByte(10);
			ProtocolParser.WriteString(stream, instance.code);
		}
		if (instance.users != null)
		{
			for (int i = 0; i < instance.users.Count; i++)
			{
				ulong val = instance.users[i];
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, val);
			}
		}
		if (instance.guestCode != null && instance.guestCode != previous.guestCode)
		{
			stream.WriteByte(34);
			ProtocolParser.WriteString(stream, instance.guestCode);
		}
		if (instance.guestUsers != null)
		{
			for (int j = 0; j < instance.guestUsers.Count; j++)
			{
				ulong val2 = instance.guestUsers[j];
				stream.WriteByte(40);
				ProtocolParser.WriteUInt64(stream, val2);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, Private instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.code != null)
		{
			stream.WriteByte(10);
			ProtocolParser.WriteString(stream, instance.code);
		}
		if (instance.users != null)
		{
			for (int i = 0; i < instance.users.Count; i++)
			{
				ulong val = instance.users[i];
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, val);
			}
		}
		if (instance.guestCode != null)
		{
			stream.WriteByte(34);
			ProtocolParser.WriteString(stream, instance.guestCode);
		}
		if (instance.guestUsers != null)
		{
			for (int j = 0; j < instance.guestUsers.Count; j++)
			{
				ulong val2 = instance.guestUsers[j];
				stream.WriteByte(40);
				ProtocolParser.WriteUInt64(stream, val2);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(Private instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, Private instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class SpawnedEnt : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public uint uid;

	[NonSerialized]
	public uint spawnPointIndex;

	[NonSerialized]
	public bool mobile;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(SpawnedEnt instance)
	{
		if (instance.ShouldPool)
		{
			instance.uid = 0u;
			instance.spawnPointIndex = 0u;
			instance.mobile = false;
			Pool.Free<SpawnedEnt>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose SpawnedEnt with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(SpawnedEnt instance)
	{
		instance.uid = uid;
		instance.spawnPointIndex = spawnPointIndex;
		instance.mobile = mobile;
	}

	public SpawnedEnt Copy()
	{
		SpawnedEnt spawnedEnt = Pool.Get<SpawnedEnt>();
		CopyTo(spawnedEnt);
		return spawnedEnt;
	}

	public static SpawnedEnt Deserialize(Stream stream)
	{
		SpawnedEnt spawnedEnt = Pool.Get<SpawnedEnt>();
		Deserialize(stream, spawnedEnt, isDelta: false);
		return spawnedEnt;
	}

	public static SpawnedEnt DeserializeLengthDelimited(Stream stream)
	{
		SpawnedEnt spawnedEnt = Pool.Get<SpawnedEnt>();
		DeserializeLengthDelimited(stream, spawnedEnt, isDelta: false);
		return spawnedEnt;
	}

	public static SpawnedEnt DeserializeLength(Stream stream, int length)
	{
		SpawnedEnt spawnedEnt = Pool.Get<SpawnedEnt>();
		DeserializeLength(stream, length, spawnedEnt, isDelta: false);
		return spawnedEnt;
	}

	public static SpawnedEnt Deserialize(byte[] buffer)
	{
		SpawnedEnt spawnedEnt = Pool.Get<SpawnedEnt>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, spawnedEnt, isDelta: false);
		return spawnedEnt;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, SpawnedEnt previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static SpawnedEnt Deserialize(byte[] buffer, SpawnedEnt instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static SpawnedEnt Deserialize(Stream stream, SpawnedEnt instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.uid = ProtocolParser.ReadUInt32(stream);
				continue;
			case 16:
				instance.spawnPointIndex = ProtocolParser.ReadUInt32(stream);
				continue;
			case 24:
				instance.mobile = ProtocolParser.ReadBool(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static SpawnedEnt DeserializeLengthDelimited(Stream stream, SpawnedEnt instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.uid = ProtocolParser.ReadUInt32(stream);
				continue;
			case 16:
				instance.spawnPointIndex = ProtocolParser.ReadUInt32(stream);
				continue;
			case 24:
				instance.mobile = ProtocolParser.ReadBool(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static SpawnedEnt DeserializeLength(Stream stream, int length, SpawnedEnt instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.uid = ProtocolParser.ReadUInt32(stream);
				continue;
			case 16:
				instance.spawnPointIndex = ProtocolParser.ReadUInt32(stream);
				continue;
			case 24:
				instance.mobile = ProtocolParser.ReadBool(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, SpawnedEnt instance, SpawnedEnt previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.uid != previous.uid)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt32(stream, instance.uid);
		}
		if (instance.spawnPointIndex != previous.spawnPointIndex)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt32(stream, instance.spawnPointIndex);
		}
		stream.WriteByte(24);
		ProtocolParser.WriteBool(stream, instance.mobile);
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, SpawnedEnt instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.uid != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt32(stream, instance.uid);
		}
		if (instance.spawnPointIndex != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt32(stream, instance.spawnPointIndex);
		}
		if (instance.mobile)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteBool(stream, instance.mobile);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(SpawnedEnt instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, SpawnedEnt instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class MountPoint : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public int index;

	[NonSerialized]
	public NetworkableId mountableId;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(MountPoint instance)
	{
		if (instance.ShouldPool)
		{
			instance.index = 0;
			instance.mountableId = default(NetworkableId);
			Pool.Free<MountPoint>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose MountPoint with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(MountPoint instance)
	{
		instance.index = index;
		instance.mountableId = mountableId;
	}

	public MountPoint Copy()
	{
		MountPoint mountPoint = Pool.Get<MountPoint>();
		CopyTo(mountPoint);
		return mountPoint;
	}

	public static MountPoint Deserialize(Stream stream)
	{
		MountPoint mountPoint = Pool.Get<MountPoint>();
		Deserialize(stream, mountPoint, isDelta: false);
		return mountPoint;
	}

	public static MountPoint DeserializeLengthDelimited(Stream stream)
	{
		MountPoint mountPoint = Pool.Get<MountPoint>();
		DeserializeLengthDelimited(stream, mountPoint, isDelta: false);
		return mountPoint;
	}

	public static MountPoint DeserializeLength(Stream stream, int length)
	{
		MountPoint mountPoint = Pool.Get<MountPoint>();
		DeserializeLength(stream, length, mountPoint, isDelta: false);
		return mountPoint;
	}

	public static MountPoint Deserialize(byte[] buffer)
	{
		MountPoint mountPoint = Pool.Get<MountPoint>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, mountPoint, isDelta: false);
		return mountPoint;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, MountPoint previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static MountPoint Deserialize(byte[] buffer, MountPoint instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static MountPoint Deserialize(Stream stream, MountPoint instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.index = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.mountableId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static MountPoint DeserializeLengthDelimited(Stream stream, MountPoint instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.index = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.mountableId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static MountPoint DeserializeLength(Stream stream, int length, MountPoint instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.index = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.mountableId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, MountPoint instance, MountPoint previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.index != previous.index)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.index);
		}
		stream.WriteByte(16);
		ProtocolParser.WriteUInt64(stream, instance.mountableId.Value);
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, MountPoint instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.index != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.index);
		}
		if (instance.mountableId != default(NetworkableId))
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, instance.mountableId.Value);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(MountPoint instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, MountPoint instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		action(UidType.NetworkableId, ref mountableId.Value);
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class SellOrder : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public int itemToSellID;

	[NonSerialized]
	public int itemToSellAmount;

	[NonSerialized]
	public int currencyID;

	[NonSerialized]
	public int currencyAmountPerItem;

	[NonSerialized]
	public int inStock;

	[NonSerialized]
	public bool currencyIsBP;

	[NonSerialized]
	public bool itemToSellIsBP;

	[NonSerialized]
	public float itemCondition;

	[NonSerialized]
	public float itemConditionMax;

	[NonSerialized]
	public int instanceData;

	[NonSerialized]
	public List<int> attachmentsList;

	[NonSerialized]
	public int totalAttachmentSlots;

	[NonSerialized]
	public float priceMultiplier;

	[NonSerialized]
	public int ammoType;

	[NonSerialized]
	public int ammoCount;

	[NonSerialized]
	public float receivedQuantityMultiplier;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(SellOrder instance)
	{
		if (instance.ShouldPool)
		{
			instance.itemToSellID = 0;
			instance.itemToSellAmount = 0;
			instance.currencyID = 0;
			instance.currencyAmountPerItem = 0;
			instance.inStock = 0;
			instance.currencyIsBP = false;
			instance.itemToSellIsBP = false;
			instance.itemCondition = 0f;
			instance.itemConditionMax = 0f;
			instance.instanceData = 0;
			if (instance.attachmentsList != null)
			{
				List<int> list = instance.attachmentsList;
				Pool.FreeUnmanaged<int>(ref list);
				instance.attachmentsList = list;
			}
			instance.totalAttachmentSlots = 0;
			instance.priceMultiplier = 0f;
			instance.ammoType = 0;
			instance.ammoCount = 0;
			instance.receivedQuantityMultiplier = 0f;
			Pool.Free<SellOrder>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose SellOrder with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(SellOrder instance)
	{
		instance.itemToSellID = itemToSellID;
		instance.itemToSellAmount = itemToSellAmount;
		instance.currencyID = currencyID;
		instance.currencyAmountPerItem = currencyAmountPerItem;
		instance.inStock = inStock;
		instance.currencyIsBP = currencyIsBP;
		instance.itemToSellIsBP = itemToSellIsBP;
		instance.itemCondition = itemCondition;
		instance.itemConditionMax = itemConditionMax;
		instance.instanceData = instanceData;
		if (attachmentsList != null)
		{
			instance.attachmentsList = Pool.Get<List<int>>();
			for (int i = 0; i < attachmentsList.Count; i++)
			{
				int item = attachmentsList[i];
				instance.attachmentsList.Add(item);
			}
		}
		else
		{
			instance.attachmentsList = null;
		}
		instance.totalAttachmentSlots = totalAttachmentSlots;
		instance.priceMultiplier = priceMultiplier;
		instance.ammoType = ammoType;
		instance.ammoCount = ammoCount;
		instance.receivedQuantityMultiplier = receivedQuantityMultiplier;
	}

	public SellOrder Copy()
	{
		SellOrder sellOrder = Pool.Get<SellOrder>();
		CopyTo(sellOrder);
		return sellOrder;
	}

	public static SellOrder Deserialize(Stream stream)
	{
		SellOrder sellOrder = Pool.Get<SellOrder>();
		Deserialize(stream, sellOrder, isDelta: false);
		return sellOrder;
	}

	public static SellOrder DeserializeLengthDelimited(Stream stream)
	{
		SellOrder sellOrder = Pool.Get<SellOrder>();
		DeserializeLengthDelimited(stream, sellOrder, isDelta: false);
		return sellOrder;
	}

	public static SellOrder DeserializeLength(Stream stream, int length)
	{
		SellOrder sellOrder = Pool.Get<SellOrder>();
		DeserializeLength(stream, length, sellOrder, isDelta: false);
		return sellOrder;
	}

	public static SellOrder Deserialize(byte[] buffer)
	{
		SellOrder sellOrder = Pool.Get<SellOrder>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, sellOrder, isDelta: false);
		return sellOrder;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, SellOrder previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static SellOrder Deserialize(byte[] buffer, SellOrder instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static SellOrder Deserialize(Stream stream, SellOrder instance, bool isDelta)
	{
		if (!isDelta && instance.attachmentsList == null)
		{
			instance.attachmentsList = Pool.Get<List<int>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.itemToSellID = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.itemToSellAmount = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.currencyID = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.currencyAmountPerItem = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.inStock = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.currencyIsBP = ProtocolParser.ReadBool(stream);
				continue;
			case 56:
				instance.itemToSellIsBP = ProtocolParser.ReadBool(stream);
				continue;
			case 69:
				instance.itemCondition = ProtocolParser.ReadSingle(stream);
				continue;
			case 77:
				instance.itemConditionMax = ProtocolParser.ReadSingle(stream);
				continue;
			case 80:
				instance.instanceData = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 88:
				instance.attachmentsList.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			case 96:
				instance.totalAttachmentSlots = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 109:
				instance.priceMultiplier = ProtocolParser.ReadSingle(stream);
				continue;
			case 112:
				instance.ammoType = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 120:
				instance.ammoCount = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			switch (key.Field)
			{
			case 0u:
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			case 16u:
				if (key.WireType == Wire.Fixed32)
				{
					instance.receivedQuantityMultiplier = ProtocolParser.ReadSingle(stream);
				}
				break;
			default:
				ProtocolParser.SkipKey(stream, key);
				break;
			}
		}
	}

	public static SellOrder DeserializeLengthDelimited(Stream stream, SellOrder instance, bool isDelta)
	{
		if (!isDelta && instance.attachmentsList == null)
		{
			instance.attachmentsList = Pool.Get<List<int>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.itemToSellID = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.itemToSellAmount = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.currencyID = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.currencyAmountPerItem = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.inStock = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.currencyIsBP = ProtocolParser.ReadBool(stream);
				continue;
			case 56:
				instance.itemToSellIsBP = ProtocolParser.ReadBool(stream);
				continue;
			case 69:
				instance.itemCondition = ProtocolParser.ReadSingle(stream);
				continue;
			case 77:
				instance.itemConditionMax = ProtocolParser.ReadSingle(stream);
				continue;
			case 80:
				instance.instanceData = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 88:
				instance.attachmentsList.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			case 96:
				instance.totalAttachmentSlots = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 109:
				instance.priceMultiplier = ProtocolParser.ReadSingle(stream);
				continue;
			case 112:
				instance.ammoType = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 120:
				instance.ammoCount = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			switch (key.Field)
			{
			case 0u:
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			case 16u:
				if (key.WireType == Wire.Fixed32)
				{
					instance.receivedQuantityMultiplier = ProtocolParser.ReadSingle(stream);
				}
				break;
			default:
				ProtocolParser.SkipKey(stream, key);
				break;
			}
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static SellOrder DeserializeLength(Stream stream, int length, SellOrder instance, bool isDelta)
	{
		if (!isDelta && instance.attachmentsList == null)
		{
			instance.attachmentsList = Pool.Get<List<int>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.itemToSellID = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.itemToSellAmount = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.currencyID = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.currencyAmountPerItem = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.inStock = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.currencyIsBP = ProtocolParser.ReadBool(stream);
				continue;
			case 56:
				instance.itemToSellIsBP = ProtocolParser.ReadBool(stream);
				continue;
			case 69:
				instance.itemCondition = ProtocolParser.ReadSingle(stream);
				continue;
			case 77:
				instance.itemConditionMax = ProtocolParser.ReadSingle(stream);
				continue;
			case 80:
				instance.instanceData = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 88:
				instance.attachmentsList.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			case 96:
				instance.totalAttachmentSlots = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 109:
				instance.priceMultiplier = ProtocolParser.ReadSingle(stream);
				continue;
			case 112:
				instance.ammoType = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 120:
				instance.ammoCount = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			switch (key.Field)
			{
			case 0u:
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			case 16u:
				if (key.WireType == Wire.Fixed32)
				{
					instance.receivedQuantityMultiplier = ProtocolParser.ReadSingle(stream);
				}
				break;
			default:
				ProtocolParser.SkipKey(stream, key);
				break;
			}
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, SellOrder instance, SellOrder previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.itemToSellID != previous.itemToSellID)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.itemToSellID);
		}
		if (instance.itemToSellAmount != previous.itemToSellAmount)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.itemToSellAmount);
		}
		if (instance.currencyID != previous.currencyID)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.currencyID);
		}
		if (instance.currencyAmountPerItem != previous.currencyAmountPerItem)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.currencyAmountPerItem);
		}
		if (instance.inStock != previous.inStock)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.inStock);
		}
		stream.WriteByte(48);
		ProtocolParser.WriteBool(stream, instance.currencyIsBP);
		stream.WriteByte(56);
		ProtocolParser.WriteBool(stream, instance.itemToSellIsBP);
		if (instance.itemCondition != previous.itemCondition)
		{
			stream.WriteByte(69);
			ProtocolParser.WriteSingle(stream, instance.itemCondition);
		}
		if (instance.itemConditionMax != previous.itemConditionMax)
		{
			stream.WriteByte(77);
			ProtocolParser.WriteSingle(stream, instance.itemConditionMax);
		}
		if (instance.instanceData != previous.instanceData)
		{
			stream.WriteByte(80);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.instanceData);
		}
		if (instance.attachmentsList != null)
		{
			for (int i = 0; i < instance.attachmentsList.Count; i++)
			{
				int num = instance.attachmentsList[i];
				stream.WriteByte(88);
				ProtocolParser.WriteUInt64(stream, (ulong)num);
			}
		}
		if (instance.totalAttachmentSlots != previous.totalAttachmentSlots)
		{
			stream.WriteByte(96);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.totalAttachmentSlots);
		}
		if (instance.priceMultiplier != previous.priceMultiplier)
		{
			stream.WriteByte(109);
			ProtocolParser.WriteSingle(stream, instance.priceMultiplier);
		}
		if (instance.ammoType != previous.ammoType)
		{
			stream.WriteByte(112);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.ammoType);
		}
		if (instance.ammoCount != previous.ammoCount)
		{
			stream.WriteByte(120);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.ammoCount);
		}
		if (instance.receivedQuantityMultiplier != previous.receivedQuantityMultiplier)
		{
			stream.WriteByte(133);
			stream.WriteByte(1);
			ProtocolParser.WriteSingle(stream, instance.receivedQuantityMultiplier);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, SellOrder instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.itemToSellID != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.itemToSellID);
		}
		if (instance.itemToSellAmount != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.itemToSellAmount);
		}
		if (instance.currencyID != 0)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.currencyID);
		}
		if (instance.currencyAmountPerItem != 0)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.currencyAmountPerItem);
		}
		if (instance.inStock != 0)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.inStock);
		}
		if (instance.currencyIsBP)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteBool(stream, instance.currencyIsBP);
		}
		if (instance.itemToSellIsBP)
		{
			stream.WriteByte(56);
			ProtocolParser.WriteBool(stream, instance.itemToSellIsBP);
		}
		if (instance.itemCondition != 0f)
		{
			stream.WriteByte(69);
			ProtocolParser.WriteSingle(stream, instance.itemCondition);
		}
		if (instance.itemConditionMax != 0f)
		{
			stream.WriteByte(77);
			ProtocolParser.WriteSingle(stream, instance.itemConditionMax);
		}
		if (instance.instanceData != 0)
		{
			stream.WriteByte(80);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.instanceData);
		}
		if (instance.attachmentsList != null)
		{
			for (int i = 0; i < instance.attachmentsList.Count; i++)
			{
				int num = instance.attachmentsList[i];
				stream.WriteByte(88);
				ProtocolParser.WriteUInt64(stream, (ulong)num);
			}
		}
		if (instance.totalAttachmentSlots != 0)
		{
			stream.WriteByte(96);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.totalAttachmentSlots);
		}
		if (instance.priceMultiplier != 0f)
		{
			stream.WriteByte(109);
			ProtocolParser.WriteSingle(stream, instance.priceMultiplier);
		}
		if (instance.ammoType != 0)
		{
			stream.WriteByte(112);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.ammoType);
		}
		if (instance.ammoCount != 0)
		{
			stream.WriteByte(120);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.ammoCount);
		}
		if (instance.receivedQuantityMultiplier != 0f)
		{
			stream.WriteByte(133);
			stream.WriteByte(1);
			ProtocolParser.WriteSingle(stream, instance.receivedQuantityMultiplier);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(SellOrder instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, SellOrder instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class SellOrderContainer : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public List<SellOrder> sellOrders;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(SellOrderContainer instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.sellOrders != null)
		{
			for (int i = 0; i < instance.sellOrders.Count; i++)
			{
				if (instance.sellOrders[i] != null)
				{
					instance.sellOrders[i].ResetToPool();
					instance.sellOrders[i] = null;
				}
			}
			List<SellOrder> list = instance.sellOrders;
			Pool.Free<SellOrder>(ref list, false);
			instance.sellOrders = list;
		}
		Pool.Free<SellOrderContainer>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose SellOrderContainer with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(SellOrderContainer instance)
	{
		if (sellOrders != null)
		{
			instance.sellOrders = Pool.Get<List<SellOrder>>();
			for (int i = 0; i < sellOrders.Count; i++)
			{
				SellOrder item = sellOrders[i].Copy();
				instance.sellOrders.Add(item);
			}
		}
		else
		{
			instance.sellOrders = null;
		}
	}

	public SellOrderContainer Copy()
	{
		SellOrderContainer sellOrderContainer = Pool.Get<SellOrderContainer>();
		CopyTo(sellOrderContainer);
		return sellOrderContainer;
	}

	public static SellOrderContainer Deserialize(Stream stream)
	{
		SellOrderContainer sellOrderContainer = Pool.Get<SellOrderContainer>();
		Deserialize(stream, sellOrderContainer, isDelta: false);
		return sellOrderContainer;
	}

	public static SellOrderContainer DeserializeLengthDelimited(Stream stream)
	{
		SellOrderContainer sellOrderContainer = Pool.Get<SellOrderContainer>();
		DeserializeLengthDelimited(stream, sellOrderContainer, isDelta: false);
		return sellOrderContainer;
	}

	public static SellOrderContainer DeserializeLength(Stream stream, int length)
	{
		SellOrderContainer sellOrderContainer = Pool.Get<SellOrderContainer>();
		DeserializeLength(stream, length, sellOrderContainer, isDelta: false);
		return sellOrderContainer;
	}

	public static SellOrderContainer Deserialize(byte[] buffer)
	{
		SellOrderContainer sellOrderContainer = Pool.Get<SellOrderContainer>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, sellOrderContainer, isDelta: false);
		return sellOrderContainer;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, SellOrderContainer previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static SellOrderContainer Deserialize(byte[] buffer, SellOrderContainer instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static SellOrderContainer Deserialize(Stream stream, SellOrderContainer instance, bool isDelta)
	{
		if (!isDelta && instance.sellOrders == null)
		{
			instance.sellOrders = Pool.Get<List<SellOrder>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.sellOrders.Add(SellOrder.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static SellOrderContainer DeserializeLengthDelimited(Stream stream, SellOrderContainer instance, bool isDelta)
	{
		if (!isDelta && instance.sellOrders == null)
		{
			instance.sellOrders = Pool.Get<List<SellOrder>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.sellOrders.Add(SellOrder.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static SellOrderContainer DeserializeLength(Stream stream, int length, SellOrderContainer instance, bool isDelta)
	{
		if (!isDelta && instance.sellOrders == null)
		{
			instance.sellOrders = Pool.Get<List<SellOrder>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.sellOrders.Add(SellOrder.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, SellOrderContainer instance, SellOrderContainer previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.sellOrders != null)
		{
			for (int i = 0; i < instance.sellOrders.Count; i++)
			{
				SellOrder sellOrder = instance.sellOrders[i];
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				SellOrder.SerializeDelta(memoryStream, sellOrder, sellOrder);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, SellOrderContainer instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.sellOrders != null)
		{
			for (int i = 0; i < instance.sellOrders.Count; i++)
			{
				SellOrder instance2 = instance.sellOrders[i];
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				SellOrder.Serialize(memoryStream, instance2);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(SellOrderContainer instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, SellOrderContainer instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (sellOrders != null)
		{
			for (int i = 0; i < sellOrders.Count; i++)
			{
				sellOrders[i]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class IOConnection : IDisposable, IPooled, IProto
{
	public class LineVec : IDisposable, IPooled, IProto
	{
		[NonSerialized]
		public Vector4 vec;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(LineVec instance)
		{
			//IL_000f: Unknown result type (might be due to invalid IL or missing references)
			if (instance.ShouldPool)
			{
				instance.vec = default(Vector4);
				Pool.Free<LineVec>(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose LineVec with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(LineVec instance)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			instance.vec = vec;
		}

		public LineVec Copy()
		{
			LineVec lineVec = Pool.Get<LineVec>();
			CopyTo(lineVec);
			return lineVec;
		}

		public static LineVec Deserialize(Stream stream)
		{
			LineVec lineVec = Pool.Get<LineVec>();
			Deserialize(stream, lineVec, isDelta: false);
			return lineVec;
		}

		public static LineVec DeserializeLengthDelimited(Stream stream)
		{
			LineVec lineVec = Pool.Get<LineVec>();
			DeserializeLengthDelimited(stream, lineVec, isDelta: false);
			return lineVec;
		}

		public static LineVec DeserializeLength(Stream stream, int length)
		{
			LineVec lineVec = Pool.Get<LineVec>();
			DeserializeLength(stream, length, lineVec, isDelta: false);
			return lineVec;
		}

		public static LineVec Deserialize(byte[] buffer)
		{
			LineVec lineVec = Pool.Get<LineVec>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, lineVec, isDelta: false);
			return lineVec;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, LineVec previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static LineVec Deserialize(byte[] buffer, LineVec instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static LineVec Deserialize(Stream stream, LineVec instance, bool isDelta)
		{
			//IL_001a: Unknown result type (might be due to invalid IL or missing references)
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 10:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.vec, isDelta);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static LineVec DeserializeLengthDelimited(Stream stream, LineVec instance, bool isDelta)
		{
			//IL_004e: Unknown result type (might be due to invalid IL or missing references)
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.vec, isDelta);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static LineVec DeserializeLength(Stream stream, int length, LineVec instance, bool isDelta)
		{
			//IL_0047: Unknown result type (might be due to invalid IL or missing references)
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.vec, isDelta);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, LineVec instance, LineVec previous)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Unknown result type (might be due to invalid IL or missing references)
			//IL_002b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0031: Unknown result type (might be due to invalid IL or missing references)
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.vec != previous.vec)
			{
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				Vector4Serialized.SerializeDelta(memoryStream, instance.vec, previous.vec);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public static void Serialize(Stream stream, LineVec instance)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.vec != default(Vector4))
			{
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				Vector4Serialized.Serialize(memoryStream, instance.vec);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(LineVec instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, LineVec instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	public class LinePointList : IDisposable, IPooled, IProto
	{
		[NonSerialized]
		public Vector4 a;

		[NonSerialized]
		public Vector4 b;

		[NonSerialized]
		public Vector4 c;

		[NonSerialized]
		public Vector4 d;

		[NonSerialized]
		public Vector4 e;

		[NonSerialized]
		public Vector4 f;

		[NonSerialized]
		public Vector4 g;

		[NonSerialized]
		public Vector4 h;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(LinePointList instance)
		{
			//IL_000f: Unknown result type (might be due to invalid IL or missing references)
			//IL_001b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0027: Unknown result type (might be due to invalid IL or missing references)
			//IL_0033: Unknown result type (might be due to invalid IL or missing references)
			//IL_003f: Unknown result type (might be due to invalid IL or missing references)
			//IL_004b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0057: Unknown result type (might be due to invalid IL or missing references)
			//IL_0063: Unknown result type (might be due to invalid IL or missing references)
			if (instance.ShouldPool)
			{
				instance.a = default(Vector4);
				instance.b = default(Vector4);
				instance.c = default(Vector4);
				instance.d = default(Vector4);
				instance.e = default(Vector4);
				instance.f = default(Vector4);
				instance.g = default(Vector4);
				instance.h = default(Vector4);
				Pool.Free<LinePointList>(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose LinePointList with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(LinePointList instance)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0013: Unknown result type (might be due to invalid IL or missing references)
			//IL_001a: Unknown result type (might be due to invalid IL or missing references)
			//IL_001f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0026: Unknown result type (might be due to invalid IL or missing references)
			//IL_002b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			//IL_0037: Unknown result type (might be due to invalid IL or missing references)
			//IL_003e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0043: Unknown result type (might be due to invalid IL or missing references)
			//IL_004a: Unknown result type (might be due to invalid IL or missing references)
			//IL_004f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0056: Unknown result type (might be due to invalid IL or missing references)
			//IL_005b: Unknown result type (might be due to invalid IL or missing references)
			instance.a = a;
			instance.b = b;
			instance.c = c;
			instance.d = d;
			instance.e = e;
			instance.f = f;
			instance.g = g;
			instance.h = h;
		}

		public LinePointList Copy()
		{
			LinePointList linePointList = Pool.Get<LinePointList>();
			CopyTo(linePointList);
			return linePointList;
		}

		public static LinePointList Deserialize(Stream stream)
		{
			LinePointList linePointList = Pool.Get<LinePointList>();
			Deserialize(stream, linePointList, isDelta: false);
			return linePointList;
		}

		public static LinePointList DeserializeLengthDelimited(Stream stream)
		{
			LinePointList linePointList = Pool.Get<LinePointList>();
			DeserializeLengthDelimited(stream, linePointList, isDelta: false);
			return linePointList;
		}

		public static LinePointList DeserializeLength(Stream stream, int length)
		{
			LinePointList linePointList = Pool.Get<LinePointList>();
			DeserializeLength(stream, length, linePointList, isDelta: false);
			return linePointList;
		}

		public static LinePointList Deserialize(byte[] buffer)
		{
			LinePointList linePointList = Pool.Get<LinePointList>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, linePointList, isDelta: false);
			return linePointList;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, LinePointList previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static LinePointList Deserialize(byte[] buffer, LinePointList instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static LinePointList Deserialize(Stream stream, LinePointList instance, bool isDelta)
		{
			//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
			//IL_0086: Unknown result type (might be due to invalid IL or missing references)
			//IL_0066: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
			//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
			//IL_0099: Unknown result type (might be due to invalid IL or missing references)
			//IL_0076: Unknown result type (might be due to invalid IL or missing references)
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 10:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.a, isDelta);
					continue;
				case 18:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.b, isDelta);
					continue;
				case 26:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.c, isDelta);
					continue;
				case 34:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.d, isDelta);
					continue;
				case 42:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.e, isDelta);
					continue;
				case 50:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.f, isDelta);
					continue;
				case 58:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.g, isDelta);
					continue;
				case 66:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.h, isDelta);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static LinePointList DeserializeLengthDelimited(Stream stream, LinePointList instance, bool isDelta)
		{
			//IL_010c: Unknown result type (might be due to invalid IL or missing references)
			//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
			//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
			//IL_009a: Unknown result type (might be due to invalid IL or missing references)
			//IL_011f: Unknown result type (might be due to invalid IL or missing references)
			//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.a, isDelta);
					continue;
				case 18:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.b, isDelta);
					continue;
				case 26:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.c, isDelta);
					continue;
				case 34:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.d, isDelta);
					continue;
				case 42:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.e, isDelta);
					continue;
				case 50:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.f, isDelta);
					continue;
				case 58:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.g, isDelta);
					continue;
				case 66:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.h, isDelta);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static LinePointList DeserializeLength(Stream stream, int length, LinePointList instance, bool isDelta)
		{
			//IL_0105: Unknown result type (might be due to invalid IL or missing references)
			//IL_00df: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
			//IL_0093: Unknown result type (might be due to invalid IL or missing references)
			//IL_0118: Unknown result type (might be due to invalid IL or missing references)
			//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
			//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.a, isDelta);
					continue;
				case 18:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.b, isDelta);
					continue;
				case 26:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.c, isDelta);
					continue;
				case 34:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.d, isDelta);
					continue;
				case 42:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.e, isDelta);
					continue;
				case 50:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.f, isDelta);
					continue;
				case 58:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.g, isDelta);
					continue;
				case 66:
					Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.h, isDelta);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, LinePointList instance, LinePointList previous)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0059: Unknown result type (might be due to invalid IL or missing references)
			//IL_005f: Unknown result type (might be due to invalid IL or missing references)
			//IL_002b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0031: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
			//IL_007d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0083: Unknown result type (might be due to invalid IL or missing references)
			//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
			//IL_0103: Unknown result type (might be due to invalid IL or missing references)
			//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
			//IL_0152: Unknown result type (might be due to invalid IL or missing references)
			//IL_0158: Unknown result type (might be due to invalid IL or missing references)
			//IL_0121: Unknown result type (might be due to invalid IL or missing references)
			//IL_0127: Unknown result type (might be due to invalid IL or missing references)
			//IL_01a7: Unknown result type (might be due to invalid IL or missing references)
			//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
			//IL_0176: Unknown result type (might be due to invalid IL or missing references)
			//IL_017c: Unknown result type (might be due to invalid IL or missing references)
			//IL_01fc: Unknown result type (might be due to invalid IL or missing references)
			//IL_0202: Unknown result type (might be due to invalid IL or missing references)
			//IL_01cb: Unknown result type (might be due to invalid IL or missing references)
			//IL_01d1: Unknown result type (might be due to invalid IL or missing references)
			//IL_0251: Unknown result type (might be due to invalid IL or missing references)
			//IL_0257: Unknown result type (might be due to invalid IL or missing references)
			//IL_0220: Unknown result type (might be due to invalid IL or missing references)
			//IL_0226: Unknown result type (might be due to invalid IL or missing references)
			//IL_0275: Unknown result type (might be due to invalid IL or missing references)
			//IL_027b: Unknown result type (might be due to invalid IL or missing references)
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.a != previous.a)
			{
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				Vector4Serialized.SerializeDelta(memoryStream, instance.a, previous.a);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
			if (instance.b != previous.b)
			{
				stream.WriteByte(18);
				memoryStream.SetLength(0L);
				Vector4Serialized.SerializeDelta(memoryStream, instance.b, previous.b);
				uint num2 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
			}
			if (instance.c != previous.c)
			{
				stream.WriteByte(26);
				memoryStream.SetLength(0L);
				Vector4Serialized.SerializeDelta(memoryStream, instance.c, previous.c);
				uint num3 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num3);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num3);
			}
			if (instance.d != previous.d)
			{
				stream.WriteByte(34);
				memoryStream.SetLength(0L);
				Vector4Serialized.SerializeDelta(memoryStream, instance.d, previous.d);
				uint num4 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num4);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num4);
			}
			if (instance.e != previous.e)
			{
				stream.WriteByte(42);
				memoryStream.SetLength(0L);
				Vector4Serialized.SerializeDelta(memoryStream, instance.e, previous.e);
				uint num5 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num5);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num5);
			}
			if (instance.f != previous.f)
			{
				stream.WriteByte(50);
				memoryStream.SetLength(0L);
				Vector4Serialized.SerializeDelta(memoryStream, instance.f, previous.f);
				uint num6 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num6);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num6);
			}
			if (instance.g != previous.g)
			{
				stream.WriteByte(58);
				memoryStream.SetLength(0L);
				Vector4Serialized.SerializeDelta(memoryStream, instance.g, previous.g);
				uint num7 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num7);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num7);
			}
			if (instance.h != previous.h)
			{
				stream.WriteByte(66);
				memoryStream.SetLength(0L);
				Vector4Serialized.SerializeDelta(memoryStream, instance.h, previous.h);
				uint num8 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num8);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num8);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public static void Serialize(Stream stream, LinePointList instance)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0056: Unknown result type (might be due to invalid IL or missing references)
			//IL_005d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0063: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
			//IL_007d: Unknown result type (might be due to invalid IL or missing references)
			//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
			//IL_0104: Unknown result type (might be due to invalid IL or missing references)
			//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
			//IL_0149: Unknown result type (might be due to invalid IL or missing references)
			//IL_0150: Unknown result type (might be due to invalid IL or missing references)
			//IL_0156: Unknown result type (might be due to invalid IL or missing references)
			//IL_011e: Unknown result type (might be due to invalid IL or missing references)
			//IL_019b: Unknown result type (might be due to invalid IL or missing references)
			//IL_01a2: Unknown result type (might be due to invalid IL or missing references)
			//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
			//IL_0170: Unknown result type (might be due to invalid IL or missing references)
			//IL_01ed: Unknown result type (might be due to invalid IL or missing references)
			//IL_01f4: Unknown result type (might be due to invalid IL or missing references)
			//IL_01fa: Unknown result type (might be due to invalid IL or missing references)
			//IL_01c2: Unknown result type (might be due to invalid IL or missing references)
			//IL_023f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0246: Unknown result type (might be due to invalid IL or missing references)
			//IL_024c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0214: Unknown result type (might be due to invalid IL or missing references)
			//IL_0266: Unknown result type (might be due to invalid IL or missing references)
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.a != default(Vector4))
			{
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				Vector4Serialized.Serialize(memoryStream, instance.a);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
			if (instance.b != default(Vector4))
			{
				stream.WriteByte(18);
				memoryStream.SetLength(0L);
				Vector4Serialized.Serialize(memoryStream, instance.b);
				uint num2 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
			}
			if (instance.c != default(Vector4))
			{
				stream.WriteByte(26);
				memoryStream.SetLength(0L);
				Vector4Serialized.Serialize(memoryStream, instance.c);
				uint num3 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num3);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num3);
			}
			if (instance.d != default(Vector4))
			{
				stream.WriteByte(34);
				memoryStream.SetLength(0L);
				Vector4Serialized.Serialize(memoryStream, instance.d);
				uint num4 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num4);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num4);
			}
			if (instance.e != default(Vector4))
			{
				stream.WriteByte(42);
				memoryStream.SetLength(0L);
				Vector4Serialized.Serialize(memoryStream, instance.e);
				uint num5 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num5);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num5);
			}
			if (instance.f != default(Vector4))
			{
				stream.WriteByte(50);
				memoryStream.SetLength(0L);
				Vector4Serialized.Serialize(memoryStream, instance.f);
				uint num6 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num6);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num6);
			}
			if (instance.g != default(Vector4))
			{
				stream.WriteByte(58);
				memoryStream.SetLength(0L);
				Vector4Serialized.Serialize(memoryStream, instance.g);
				uint num7 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num7);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num7);
			}
			if (instance.h != default(Vector4))
			{
				stream.WriteByte(66);
				memoryStream.SetLength(0L);
				Vector4Serialized.Serialize(memoryStream, instance.h);
				uint num8 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num8);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num8);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(LinePointList instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, LinePointList instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	[NonSerialized]
	public string niceName;

	[NonSerialized]
	public int type;

	[NonSerialized]
	public NetworkableId connectedID;

	[NonSerialized]
	public int connectedToSlot;

	[NonSerialized]
	public bool inUse;

	[NonSerialized]
	public List<LineVec> linePointList;

	[NonSerialized]
	public int colour;

	[NonSerialized]
	public Vector3 worldSpaceRotation;

	[NonSerialized]
	public float lineThickness;

	[NonSerialized]
	public List<WireLineAnchorInfo> lineAnchorList;

	[NonSerialized]
	public Vector3 originPosition;

	[NonSerialized]
	public Vector3 originRotation;

	[NonSerialized]
	public List<float> slackLevels;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(IOConnection instance)
	{
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0119: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		if (!instance.ShouldPool)
		{
			return;
		}
		instance.niceName = string.Empty;
		instance.type = 0;
		instance.connectedID = default(NetworkableId);
		instance.connectedToSlot = 0;
		instance.inUse = false;
		if (instance.linePointList != null)
		{
			for (int i = 0; i < instance.linePointList.Count; i++)
			{
				if (instance.linePointList[i] != null)
				{
					instance.linePointList[i].ResetToPool();
					instance.linePointList[i] = null;
				}
			}
			List<LineVec> list = instance.linePointList;
			Pool.Free<LineVec>(ref list, false);
			instance.linePointList = list;
		}
		instance.colour = 0;
		instance.worldSpaceRotation = default(Vector3);
		instance.lineThickness = 0f;
		if (instance.lineAnchorList != null)
		{
			for (int j = 0; j < instance.lineAnchorList.Count; j++)
			{
				if (instance.lineAnchorList[j] != null)
				{
					instance.lineAnchorList[j].ResetToPool();
					instance.lineAnchorList[j] = null;
				}
			}
			List<WireLineAnchorInfo> list2 = instance.lineAnchorList;
			Pool.Free<WireLineAnchorInfo>(ref list2, false);
			instance.lineAnchorList = list2;
		}
		instance.originPosition = default(Vector3);
		instance.originRotation = default(Vector3);
		if (instance.slackLevels != null)
		{
			List<float> list3 = instance.slackLevels;
			Pool.FreeUnmanaged<float>(ref list3);
			instance.slackLevels = list3;
		}
		Pool.Free<IOConnection>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose IOConnection with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(IOConnection instance)
	{
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0102: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		//IL_010e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0113: Unknown result type (might be due to invalid IL or missing references)
		instance.niceName = niceName;
		instance.type = type;
		instance.connectedID = connectedID;
		instance.connectedToSlot = connectedToSlot;
		instance.inUse = inUse;
		if (linePointList != null)
		{
			instance.linePointList = Pool.Get<List<LineVec>>();
			for (int i = 0; i < linePointList.Count; i++)
			{
				LineVec item = linePointList[i].Copy();
				instance.linePointList.Add(item);
			}
		}
		else
		{
			instance.linePointList = null;
		}
		instance.colour = colour;
		instance.worldSpaceRotation = worldSpaceRotation;
		instance.lineThickness = lineThickness;
		if (lineAnchorList != null)
		{
			instance.lineAnchorList = Pool.Get<List<WireLineAnchorInfo>>();
			for (int j = 0; j < lineAnchorList.Count; j++)
			{
				WireLineAnchorInfo item2 = lineAnchorList[j].Copy();
				instance.lineAnchorList.Add(item2);
			}
		}
		else
		{
			instance.lineAnchorList = null;
		}
		instance.originPosition = originPosition;
		instance.originRotation = originRotation;
		if (slackLevels != null)
		{
			instance.slackLevels = Pool.Get<List<float>>();
			for (int k = 0; k < slackLevels.Count; k++)
			{
				float item3 = slackLevels[k];
				instance.slackLevels.Add(item3);
			}
		}
		else
		{
			instance.slackLevels = null;
		}
	}

	public IOConnection Copy()
	{
		IOConnection iOConnection = Pool.Get<IOConnection>();
		CopyTo(iOConnection);
		return iOConnection;
	}

	public static IOConnection Deserialize(Stream stream)
	{
		IOConnection iOConnection = Pool.Get<IOConnection>();
		Deserialize(stream, iOConnection, isDelta: false);
		return iOConnection;
	}

	public static IOConnection DeserializeLengthDelimited(Stream stream)
	{
		IOConnection iOConnection = Pool.Get<IOConnection>();
		DeserializeLengthDelimited(stream, iOConnection, isDelta: false);
		return iOConnection;
	}

	public static IOConnection DeserializeLength(Stream stream, int length)
	{
		IOConnection iOConnection = Pool.Get<IOConnection>();
		DeserializeLength(stream, length, iOConnection, isDelta: false);
		return iOConnection;
	}

	public static IOConnection Deserialize(byte[] buffer)
	{
		IOConnection iOConnection = Pool.Get<IOConnection>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, iOConnection, isDelta: false);
		return iOConnection;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, IOConnection previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static IOConnection Deserialize(byte[] buffer, IOConnection instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static IOConnection Deserialize(Stream stream, IOConnection instance, bool isDelta)
	{
		//IL_01b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_016b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a5: Unknown result type (might be due to invalid IL or missing references)
		if (!isDelta)
		{
			if (instance.linePointList == null)
			{
				instance.linePointList = Pool.Get<List<LineVec>>();
			}
			if (instance.lineAnchorList == null)
			{
				instance.lineAnchorList = Pool.Get<List<WireLineAnchorInfo>>();
			}
			if (instance.slackLevels == null)
			{
				instance.slackLevels = Pool.Get<List<float>>();
			}
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.niceName = ProtocolParser.ReadString(stream);
				continue;
			case 16:
				instance.type = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.connectedID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 32:
				instance.connectedToSlot = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.inUse = ProtocolParser.ReadBool(stream);
				continue;
			case 50:
				instance.linePointList.Add(LineVec.DeserializeLengthDelimited(stream));
				continue;
			case 56:
				instance.colour = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 66:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.worldSpaceRotation, isDelta);
				continue;
			case 77:
				instance.lineThickness = ProtocolParser.ReadSingle(stream);
				continue;
			case 82:
				instance.lineAnchorList.Add(WireLineAnchorInfo.DeserializeLengthDelimited(stream));
				continue;
			case 90:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.originPosition, isDelta);
				continue;
			case 98:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.originRotation, isDelta);
				continue;
			case 109:
				instance.slackLevels.Add(ProtocolParser.ReadSingle(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static IOConnection DeserializeLengthDelimited(Stream stream, IOConnection instance, bool isDelta)
	{
		//IL_01ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_019f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d9: Unknown result type (might be due to invalid IL or missing references)
		if (!isDelta)
		{
			if (instance.linePointList == null)
			{
				instance.linePointList = Pool.Get<List<LineVec>>();
			}
			if (instance.lineAnchorList == null)
			{
				instance.lineAnchorList = Pool.Get<List<WireLineAnchorInfo>>();
			}
			if (instance.slackLevels == null)
			{
				instance.slackLevels = Pool.Get<List<float>>();
			}
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.niceName = ProtocolParser.ReadString(stream);
				continue;
			case 16:
				instance.type = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.connectedID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 32:
				instance.connectedToSlot = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.inUse = ProtocolParser.ReadBool(stream);
				continue;
			case 50:
				instance.linePointList.Add(LineVec.DeserializeLengthDelimited(stream));
				continue;
			case 56:
				instance.colour = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 66:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.worldSpaceRotation, isDelta);
				continue;
			case 77:
				instance.lineThickness = ProtocolParser.ReadSingle(stream);
				continue;
			case 82:
				instance.lineAnchorList.Add(WireLineAnchorInfo.DeserializeLengthDelimited(stream));
				continue;
			case 90:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.originPosition, isDelta);
				continue;
			case 98:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.originRotation, isDelta);
				continue;
			case 109:
				instance.slackLevels.Add(ProtocolParser.ReadSingle(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static IOConnection DeserializeLength(Stream stream, int length, IOConnection instance, bool isDelta)
	{
		//IL_01e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0198: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d2: Unknown result type (might be due to invalid IL or missing references)
		if (!isDelta)
		{
			if (instance.linePointList == null)
			{
				instance.linePointList = Pool.Get<List<LineVec>>();
			}
			if (instance.lineAnchorList == null)
			{
				instance.lineAnchorList = Pool.Get<List<WireLineAnchorInfo>>();
			}
			if (instance.slackLevels == null)
			{
				instance.slackLevels = Pool.Get<List<float>>();
			}
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.niceName = ProtocolParser.ReadString(stream);
				continue;
			case 16:
				instance.type = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.connectedID = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 32:
				instance.connectedToSlot = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.inUse = ProtocolParser.ReadBool(stream);
				continue;
			case 50:
				instance.linePointList.Add(LineVec.DeserializeLengthDelimited(stream));
				continue;
			case 56:
				instance.colour = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 66:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.worldSpaceRotation, isDelta);
				continue;
			case 77:
				instance.lineThickness = ProtocolParser.ReadSingle(stream);
				continue;
			case 82:
				instance.lineAnchorList.Add(WireLineAnchorInfo.DeserializeLengthDelimited(stream));
				continue;
			case 90:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.originPosition, isDelta);
				continue;
			case 98:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.originRotation, isDelta);
				continue;
			case 109:
				instance.slackLevels.Add(ProtocolParser.ReadSingle(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, IOConnection instance, IOConnection previous)
	{
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0132: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_0156: Unknown result type (might be due to invalid IL or missing references)
		//IL_020e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0214: Unknown result type (might be due to invalid IL or missing references)
		//IL_0263: Unknown result type (might be due to invalid IL or missing references)
		//IL_0269: Unknown result type (might be due to invalid IL or missing references)
		//IL_0232: Unknown result type (might be due to invalid IL or missing references)
		//IL_0238: Unknown result type (might be due to invalid IL or missing references)
		//IL_0287: Unknown result type (might be due to invalid IL or missing references)
		//IL_028d: Unknown result type (might be due to invalid IL or missing references)
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.niceName != null && instance.niceName != previous.niceName)
		{
			stream.WriteByte(10);
			ProtocolParser.WriteString(stream, instance.niceName);
		}
		if (instance.type != previous.type)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.type);
		}
		stream.WriteByte(24);
		ProtocolParser.WriteUInt64(stream, instance.connectedID.Value);
		if (instance.connectedToSlot != previous.connectedToSlot)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.connectedToSlot);
		}
		stream.WriteByte(40);
		ProtocolParser.WriteBool(stream, instance.inUse);
		if (instance.linePointList != null)
		{
			for (int i = 0; i < instance.linePointList.Count; i++)
			{
				LineVec lineVec = instance.linePointList[i];
				stream.WriteByte(50);
				memoryStream.SetLength(0L);
				LineVec.SerializeDelta(memoryStream, lineVec, lineVec);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.colour != previous.colour)
		{
			stream.WriteByte(56);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.colour);
		}
		if (instance.worldSpaceRotation != previous.worldSpaceRotation)
		{
			stream.WriteByte(66);
			memoryStream.SetLength(0L);
			Vector3Serialized.SerializeDelta(memoryStream, instance.worldSpaceRotation, previous.worldSpaceRotation);
			uint num2 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
		}
		if (instance.lineThickness != previous.lineThickness)
		{
			stream.WriteByte(77);
			ProtocolParser.WriteSingle(stream, instance.lineThickness);
		}
		if (instance.lineAnchorList != null)
		{
			for (int j = 0; j < instance.lineAnchorList.Count; j++)
			{
				WireLineAnchorInfo wireLineAnchorInfo = instance.lineAnchorList[j];
				stream.WriteByte(82);
				memoryStream.SetLength(0L);
				WireLineAnchorInfo.SerializeDelta(memoryStream, wireLineAnchorInfo, wireLineAnchorInfo);
				uint num3 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num3);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num3);
			}
		}
		if (instance.originPosition != previous.originPosition)
		{
			stream.WriteByte(90);
			memoryStream.SetLength(0L);
			Vector3Serialized.SerializeDelta(memoryStream, instance.originPosition, previous.originPosition);
			uint num4 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num4);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num4);
		}
		if (instance.originRotation != previous.originRotation)
		{
			stream.WriteByte(98);
			memoryStream.SetLength(0L);
			Vector3Serialized.SerializeDelta(memoryStream, instance.originRotation, previous.originRotation);
			uint num5 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num5);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num5);
		}
		if (instance.slackLevels != null)
		{
			for (int k = 0; k < instance.slackLevels.Count; k++)
			{
				float f = instance.slackLevels[k];
				stream.WriteByte(109);
				ProtocolParser.WriteSingle(stream, f);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, IOConnection instance)
	{
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_012e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0134: Unknown result type (might be due to invalid IL or missing references)
		//IL_014f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0204: Unknown result type (might be due to invalid IL or missing references)
		//IL_020b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0211: Unknown result type (might be due to invalid IL or missing references)
		//IL_0257: Unknown result type (might be due to invalid IL or missing references)
		//IL_025e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0264: Unknown result type (might be due to invalid IL or missing references)
		//IL_022c: Unknown result type (might be due to invalid IL or missing references)
		//IL_027f: Unknown result type (might be due to invalid IL or missing references)
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.niceName != null)
		{
			stream.WriteByte(10);
			ProtocolParser.WriteString(stream, instance.niceName);
		}
		if (instance.type != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.type);
		}
		if (instance.connectedID != default(NetworkableId))
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, instance.connectedID.Value);
		}
		if (instance.connectedToSlot != 0)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.connectedToSlot);
		}
		if (instance.inUse)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteBool(stream, instance.inUse);
		}
		if (instance.linePointList != null)
		{
			for (int i = 0; i < instance.linePointList.Count; i++)
			{
				LineVec instance2 = instance.linePointList[i];
				stream.WriteByte(50);
				memoryStream.SetLength(0L);
				LineVec.Serialize(memoryStream, instance2);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.colour != 0)
		{
			stream.WriteByte(56);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.colour);
		}
		if (instance.worldSpaceRotation != default(Vector3))
		{
			stream.WriteByte(66);
			memoryStream.SetLength(0L);
			Vector3Serialized.Serialize(memoryStream, instance.worldSpaceRotation);
			uint num2 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
		}
		if (instance.lineThickness != 0f)
		{
			stream.WriteByte(77);
			ProtocolParser.WriteSingle(stream, instance.lineThickness);
		}
		if (instance.lineAnchorList != null)
		{
			for (int j = 0; j < instance.lineAnchorList.Count; j++)
			{
				WireLineAnchorInfo instance3 = instance.lineAnchorList[j];
				stream.WriteByte(82);
				memoryStream.SetLength(0L);
				WireLineAnchorInfo.Serialize(memoryStream, instance3);
				uint num3 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num3);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num3);
			}
		}
		if (instance.originPosition != default(Vector3))
		{
			stream.WriteByte(90);
			memoryStream.SetLength(0L);
			Vector3Serialized.Serialize(memoryStream, instance.originPosition);
			uint num4 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num4);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num4);
		}
		if (instance.originRotation != default(Vector3))
		{
			stream.WriteByte(98);
			memoryStream.SetLength(0L);
			Vector3Serialized.Serialize(memoryStream, instance.originRotation);
			uint num5 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num5);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num5);
		}
		if (instance.slackLevels != null)
		{
			for (int k = 0; k < instance.slackLevels.Count; k++)
			{
				float f = instance.slackLevels[k];
				stream.WriteByte(109);
				ProtocolParser.WriteSingle(stream, f);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(IOConnection instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, IOConnection instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		action(UidType.NetworkableId, ref connectedID.Value);
		if (linePointList != null)
		{
			for (int i = 0; i < linePointList.Count; i++)
			{
				linePointList[i]?.InspectUids(action);
			}
		}
		if (lineAnchorList != null)
		{
			for (int j = 0; j < lineAnchorList.Count; j++)
			{
				lineAnchorList[j]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class PlayerRelationshipInfo : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public ulong playerID;

	[NonSerialized]
	public int type;

	[NonSerialized]
	public int weight;

	[NonSerialized]
	public uint mugshotCrc;

	[NonSerialized]
	public string displayName;

	[NonSerialized]
	public string notes;

	[NonSerialized]
	public float timeSinceSeen;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(PlayerRelationshipInfo instance)
	{
		if (instance.ShouldPool)
		{
			instance.playerID = 0uL;
			instance.type = 0;
			instance.weight = 0;
			instance.mugshotCrc = 0u;
			instance.displayName = string.Empty;
			instance.notes = string.Empty;
			instance.timeSinceSeen = 0f;
			Pool.Free<PlayerRelationshipInfo>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose PlayerRelationshipInfo with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(PlayerRelationshipInfo instance)
	{
		instance.playerID = playerID;
		instance.type = type;
		instance.weight = weight;
		instance.mugshotCrc = mugshotCrc;
		instance.displayName = displayName;
		instance.notes = notes;
		instance.timeSinceSeen = timeSinceSeen;
	}

	public PlayerRelationshipInfo Copy()
	{
		PlayerRelationshipInfo playerRelationshipInfo = Pool.Get<PlayerRelationshipInfo>();
		CopyTo(playerRelationshipInfo);
		return playerRelationshipInfo;
	}

	public static PlayerRelationshipInfo Deserialize(Stream stream)
	{
		PlayerRelationshipInfo playerRelationshipInfo = Pool.Get<PlayerRelationshipInfo>();
		Deserialize(stream, playerRelationshipInfo, isDelta: false);
		return playerRelationshipInfo;
	}

	public static PlayerRelationshipInfo DeserializeLengthDelimited(Stream stream)
	{
		PlayerRelationshipInfo playerRelationshipInfo = Pool.Get<PlayerRelationshipInfo>();
		DeserializeLengthDelimited(stream, playerRelationshipInfo, isDelta: false);
		return playerRelationshipInfo;
	}

	public static PlayerRelationshipInfo DeserializeLength(Stream stream, int length)
	{
		PlayerRelationshipInfo playerRelationshipInfo = Pool.Get<PlayerRelationshipInfo>();
		DeserializeLength(stream, length, playerRelationshipInfo, isDelta: false);
		return playerRelationshipInfo;
	}

	public static PlayerRelationshipInfo Deserialize(byte[] buffer)
	{
		PlayerRelationshipInfo playerRelationshipInfo = Pool.Get<PlayerRelationshipInfo>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, playerRelationshipInfo, isDelta: false);
		return playerRelationshipInfo;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, PlayerRelationshipInfo previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static PlayerRelationshipInfo Deserialize(byte[] buffer, PlayerRelationshipInfo instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static PlayerRelationshipInfo Deserialize(Stream stream, PlayerRelationshipInfo instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.playerID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.type = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.weight = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.mugshotCrc = ProtocolParser.ReadUInt32(stream);
				continue;
			case 42:
				instance.displayName = ProtocolParser.ReadString(stream);
				continue;
			case 50:
				instance.notes = ProtocolParser.ReadString(stream);
				continue;
			case 61:
				instance.timeSinceSeen = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static PlayerRelationshipInfo DeserializeLengthDelimited(Stream stream, PlayerRelationshipInfo instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.playerID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.type = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.weight = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.mugshotCrc = ProtocolParser.ReadUInt32(stream);
				continue;
			case 42:
				instance.displayName = ProtocolParser.ReadString(stream);
				continue;
			case 50:
				instance.notes = ProtocolParser.ReadString(stream);
				continue;
			case 61:
				instance.timeSinceSeen = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static PlayerRelationshipInfo DeserializeLength(Stream stream, int length, PlayerRelationshipInfo instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.playerID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.type = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.weight = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.mugshotCrc = ProtocolParser.ReadUInt32(stream);
				continue;
			case 42:
				instance.displayName = ProtocolParser.ReadString(stream);
				continue;
			case 50:
				instance.notes = ProtocolParser.ReadString(stream);
				continue;
			case 61:
				instance.timeSinceSeen = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, PlayerRelationshipInfo instance, PlayerRelationshipInfo previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.playerID != previous.playerID)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.playerID);
		}
		if (instance.type != previous.type)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.type);
		}
		if (instance.weight != previous.weight)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.weight);
		}
		if (instance.mugshotCrc != previous.mugshotCrc)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt32(stream, instance.mugshotCrc);
		}
		if (instance.displayName != null && instance.displayName != previous.displayName)
		{
			stream.WriteByte(42);
			ProtocolParser.WriteString(stream, instance.displayName);
		}
		if (instance.notes != null && instance.notes != previous.notes)
		{
			stream.WriteByte(50);
			ProtocolParser.WriteString(stream, instance.notes);
		}
		if (instance.timeSinceSeen != previous.timeSinceSeen)
		{
			stream.WriteByte(61);
			ProtocolParser.WriteSingle(stream, instance.timeSinceSeen);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, PlayerRelationshipInfo instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.playerID != 0L)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.playerID);
		}
		if (instance.type != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.type);
		}
		if (instance.weight != 0)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.weight);
		}
		if (instance.mugshotCrc != 0)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt32(stream, instance.mugshotCrc);
		}
		if (instance.displayName != null)
		{
			stream.WriteByte(42);
			ProtocolParser.WriteString(stream, instance.displayName);
		}
		if (instance.notes != null)
		{
			stream.WriteByte(50);
			ProtocolParser.WriteString(stream, instance.notes);
		}
		if (instance.timeSinceSeen != 0f)
		{
			stream.WriteByte(61);
			ProtocolParser.WriteSingle(stream, instance.timeSinceSeen);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(PlayerRelationshipInfo instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, PlayerRelationshipInfo instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class PlayerRelationships : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public ulong playerID;

	[NonSerialized]
	public List<PlayerRelationshipInfo> relations;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(PlayerRelationships instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		instance.playerID = 0uL;
		if (instance.relations != null)
		{
			for (int i = 0; i < instance.relations.Count; i++)
			{
				if (instance.relations[i] != null)
				{
					instance.relations[i].ResetToPool();
					instance.relations[i] = null;
				}
			}
			List<PlayerRelationshipInfo> list = instance.relations;
			Pool.Free<PlayerRelationshipInfo>(ref list, false);
			instance.relations = list;
		}
		Pool.Free<PlayerRelationships>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose PlayerRelationships with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(PlayerRelationships instance)
	{
		instance.playerID = playerID;
		if (relations != null)
		{
			instance.relations = Pool.Get<List<PlayerRelationshipInfo>>();
			for (int i = 0; i < relations.Count; i++)
			{
				PlayerRelationshipInfo item = relations[i].Copy();
				instance.relations.Add(item);
			}
		}
		else
		{
			instance.relations = null;
		}
	}

	public PlayerRelationships Copy()
	{
		PlayerRelationships playerRelationships = Pool.Get<PlayerRelationships>();
		CopyTo(playerRelationships);
		return playerRelationships;
	}

	public static PlayerRelationships Deserialize(Stream stream)
	{
		PlayerRelationships playerRelationships = Pool.Get<PlayerRelationships>();
		Deserialize(stream, playerRelationships, isDelta: false);
		return playerRelationships;
	}

	public static PlayerRelationships DeserializeLengthDelimited(Stream stream)
	{
		PlayerRelationships playerRelationships = Pool.Get<PlayerRelationships>();
		DeserializeLengthDelimited(stream, playerRelationships, isDelta: false);
		return playerRelationships;
	}

	public static PlayerRelationships DeserializeLength(Stream stream, int length)
	{
		PlayerRelationships playerRelationships = Pool.Get<PlayerRelationships>();
		DeserializeLength(stream, length, playerRelationships, isDelta: false);
		return playerRelationships;
	}

	public static PlayerRelationships Deserialize(byte[] buffer)
	{
		PlayerRelationships playerRelationships = Pool.Get<PlayerRelationships>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, playerRelationships, isDelta: false);
		return playerRelationships;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, PlayerRelationships previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static PlayerRelationships Deserialize(byte[] buffer, PlayerRelationships instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static PlayerRelationships Deserialize(Stream stream, PlayerRelationships instance, bool isDelta)
	{
		if (!isDelta && instance.relations == null)
		{
			instance.relations = Pool.Get<List<PlayerRelationshipInfo>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.playerID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.relations.Add(PlayerRelationshipInfo.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static PlayerRelationships DeserializeLengthDelimited(Stream stream, PlayerRelationships instance, bool isDelta)
	{
		if (!isDelta && instance.relations == null)
		{
			instance.relations = Pool.Get<List<PlayerRelationshipInfo>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.playerID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.relations.Add(PlayerRelationshipInfo.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static PlayerRelationships DeserializeLength(Stream stream, int length, PlayerRelationships instance, bool isDelta)
	{
		if (!isDelta && instance.relations == null)
		{
			instance.relations = Pool.Get<List<PlayerRelationshipInfo>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.playerID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.relations.Add(PlayerRelationshipInfo.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, PlayerRelationships instance, PlayerRelationships previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.playerID != previous.playerID)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.playerID);
		}
		if (instance.relations != null)
		{
			for (int i = 0; i < instance.relations.Count; i++)
			{
				PlayerRelationshipInfo playerRelationshipInfo = instance.relations[i];
				stream.WriteByte(18);
				memoryStream.SetLength(0L);
				PlayerRelationshipInfo.SerializeDelta(memoryStream, playerRelationshipInfo, playerRelationshipInfo);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, PlayerRelationships instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.playerID != 0L)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.playerID);
		}
		if (instance.relations != null)
		{
			for (int i = 0; i < instance.relations.Count; i++)
			{
				PlayerRelationshipInfo instance2 = instance.relations[i];
				stream.WriteByte(18);
				memoryStream.SetLength(0L);
				PlayerRelationshipInfo.Serialize(memoryStream, instance2);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(PlayerRelationships instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, PlayerRelationships instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (relations != null)
		{
			for (int i = 0; i < relations.Count; i++)
			{
				relations[i]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class EggHunter : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public string displayName;

	[NonSerialized]
	public int numEggs;

	[NonSerialized]
	public ulong playerID;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(EggHunter instance)
	{
		if (instance.ShouldPool)
		{
			instance.displayName = string.Empty;
			instance.numEggs = 0;
			instance.playerID = 0uL;
			Pool.Free<EggHunter>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose EggHunter with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(EggHunter instance)
	{
		instance.displayName = displayName;
		instance.numEggs = numEggs;
		instance.playerID = playerID;
	}

	public EggHunter Copy()
	{
		EggHunter eggHunter = Pool.Get<EggHunter>();
		CopyTo(eggHunter);
		return eggHunter;
	}

	public static EggHunter Deserialize(Stream stream)
	{
		EggHunter eggHunter = Pool.Get<EggHunter>();
		Deserialize(stream, eggHunter, isDelta: false);
		return eggHunter;
	}

	public static EggHunter DeserializeLengthDelimited(Stream stream)
	{
		EggHunter eggHunter = Pool.Get<EggHunter>();
		DeserializeLengthDelimited(stream, eggHunter, isDelta: false);
		return eggHunter;
	}

	public static EggHunter DeserializeLength(Stream stream, int length)
	{
		EggHunter eggHunter = Pool.Get<EggHunter>();
		DeserializeLength(stream, length, eggHunter, isDelta: false);
		return eggHunter;
	}

	public static EggHunter Deserialize(byte[] buffer)
	{
		EggHunter eggHunter = Pool.Get<EggHunter>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, eggHunter, isDelta: false);
		return eggHunter;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, EggHunter previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static EggHunter Deserialize(byte[] buffer, EggHunter instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static EggHunter Deserialize(Stream stream, EggHunter instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.displayName = ProtocolParser.ReadString(stream);
				continue;
			case 16:
				instance.numEggs = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.playerID = ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static EggHunter DeserializeLengthDelimited(Stream stream, EggHunter instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.displayName = ProtocolParser.ReadString(stream);
				continue;
			case 16:
				instance.numEggs = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.playerID = ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static EggHunter DeserializeLength(Stream stream, int length, EggHunter instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.displayName = ProtocolParser.ReadString(stream);
				continue;
			case 16:
				instance.numEggs = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.playerID = ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, EggHunter instance, EggHunter previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.displayName != null && instance.displayName != previous.displayName)
		{
			stream.WriteByte(10);
			ProtocolParser.WriteString(stream, instance.displayName);
		}
		if (instance.numEggs != previous.numEggs)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.numEggs);
		}
		if (instance.playerID != previous.playerID)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, instance.playerID);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, EggHunter instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.displayName != null)
		{
			stream.WriteByte(10);
			ProtocolParser.WriteString(stream, instance.displayName);
		}
		if (instance.numEggs != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.numEggs);
		}
		if (instance.playerID != 0L)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, instance.playerID);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(EggHunter instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, EggHunter instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class ScoreEntry : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public ulong playerID;

	[NonSerialized]
	public string displayName;

	[NonSerialized]
	public int score;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(ScoreEntry instance)
	{
		if (instance.ShouldPool)
		{
			instance.playerID = 0uL;
			instance.displayName = string.Empty;
			instance.score = 0;
			Pool.Free<ScoreEntry>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose ScoreEntry with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(ScoreEntry instance)
	{
		instance.playerID = playerID;
		instance.displayName = displayName;
		instance.score = score;
	}

	public ScoreEntry Copy()
	{
		ScoreEntry scoreEntry = Pool.Get<ScoreEntry>();
		CopyTo(scoreEntry);
		return scoreEntry;
	}

	public static ScoreEntry Deserialize(Stream stream)
	{
		ScoreEntry scoreEntry = Pool.Get<ScoreEntry>();
		Deserialize(stream, scoreEntry, isDelta: false);
		return scoreEntry;
	}

	public static ScoreEntry DeserializeLengthDelimited(Stream stream)
	{
		ScoreEntry scoreEntry = Pool.Get<ScoreEntry>();
		DeserializeLengthDelimited(stream, scoreEntry, isDelta: false);
		return scoreEntry;
	}

	public static ScoreEntry DeserializeLength(Stream stream, int length)
	{
		ScoreEntry scoreEntry = Pool.Get<ScoreEntry>();
		DeserializeLength(stream, length, scoreEntry, isDelta: false);
		return scoreEntry;
	}

	public static ScoreEntry Deserialize(byte[] buffer)
	{
		ScoreEntry scoreEntry = Pool.Get<ScoreEntry>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, scoreEntry, isDelta: false);
		return scoreEntry;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, ScoreEntry previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static ScoreEntry Deserialize(byte[] buffer, ScoreEntry instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static ScoreEntry Deserialize(Stream stream, ScoreEntry instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.playerID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.displayName = ProtocolParser.ReadString(stream);
				continue;
			case 24:
				instance.score = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static ScoreEntry DeserializeLengthDelimited(Stream stream, ScoreEntry instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.playerID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.displayName = ProtocolParser.ReadString(stream);
				continue;
			case 24:
				instance.score = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static ScoreEntry DeserializeLength(Stream stream, int length, ScoreEntry instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.playerID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.displayName = ProtocolParser.ReadString(stream);
				continue;
			case 24:
				instance.score = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, ScoreEntry instance, ScoreEntry previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.playerID != previous.playerID)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.playerID);
		}
		if (instance.displayName != null && instance.displayName != previous.displayName)
		{
			stream.WriteByte(18);
			ProtocolParser.WriteString(stream, instance.displayName);
		}
		if (instance.score != previous.score)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.score);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, ScoreEntry instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.playerID != 0L)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.playerID);
		}
		if (instance.displayName != null)
		{
			stream.WriteByte(18);
			ProtocolParser.WriteString(stream, instance.displayName);
		}
		if (instance.score != 0)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.score);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(ScoreEntry instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, ScoreEntry instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class StringPoint : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public Vector3 point;

	[NonSerialized]
	public Vector3 normal;

	[NonSerialized]
	public float slack;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(StringPoint instance)
	{
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		if (instance.ShouldPool)
		{
			instance.point = default(Vector3);
			instance.normal = default(Vector3);
			instance.slack = 0f;
			Pool.Free<StringPoint>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose StringPoint with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(StringPoint instance)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		instance.point = point;
		instance.normal = normal;
		instance.slack = slack;
	}

	public StringPoint Copy()
	{
		StringPoint stringPoint = Pool.Get<StringPoint>();
		CopyTo(stringPoint);
		return stringPoint;
	}

	public static StringPoint Deserialize(Stream stream)
	{
		StringPoint stringPoint = Pool.Get<StringPoint>();
		Deserialize(stream, stringPoint, isDelta: false);
		return stringPoint;
	}

	public static StringPoint DeserializeLengthDelimited(Stream stream)
	{
		StringPoint stringPoint = Pool.Get<StringPoint>();
		DeserializeLengthDelimited(stream, stringPoint, isDelta: false);
		return stringPoint;
	}

	public static StringPoint DeserializeLength(Stream stream, int length)
	{
		StringPoint stringPoint = Pool.Get<StringPoint>();
		DeserializeLength(stream, length, stringPoint, isDelta: false);
		return stringPoint;
	}

	public static StringPoint Deserialize(byte[] buffer)
	{
		StringPoint stringPoint = Pool.Get<StringPoint>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, stringPoint, isDelta: false);
		return stringPoint;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, StringPoint previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static StringPoint Deserialize(byte[] buffer, StringPoint instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static StringPoint Deserialize(Stream stream, StringPoint instance, bool isDelta)
	{
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.point, isDelta);
				continue;
			case 18:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.normal, isDelta);
				continue;
			case 29:
				instance.slack = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static StringPoint DeserializeLengthDelimited(Stream stream, StringPoint instance, bool isDelta)
	{
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.point, isDelta);
				continue;
			case 18:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.normal, isDelta);
				continue;
			case 29:
				instance.slack = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static StringPoint DeserializeLength(Stream stream, int length, StringPoint instance, bool isDelta)
	{
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.point, isDelta);
				continue;
			case 18:
				Vector3Serialized.DeserializeLengthDelimited(stream, ref instance.normal, isDelta);
				continue;
			case 29:
				instance.slack = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, StringPoint instance, StringPoint previous)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.point != previous.point)
		{
			stream.WriteByte(10);
			memoryStream.SetLength(0L);
			Vector3Serialized.SerializeDelta(memoryStream, instance.point, previous.point);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		if (instance.normal != previous.normal)
		{
			stream.WriteByte(18);
			memoryStream.SetLength(0L);
			Vector3Serialized.SerializeDelta(memoryStream, instance.normal, previous.normal);
			uint num2 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
		}
		if (instance.slack != previous.slack)
		{
			stream.WriteByte(29);
			ProtocolParser.WriteSingle(stream, instance.slack);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, StringPoint instance)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.point != default(Vector3))
		{
			stream.WriteByte(10);
			memoryStream.SetLength(0L);
			Vector3Serialized.Serialize(memoryStream, instance.point);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		if (instance.normal != default(Vector3))
		{
			stream.WriteByte(18);
			memoryStream.SetLength(0L);
			Vector3Serialized.Serialize(memoryStream, instance.normal);
			uint num2 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
		}
		if (instance.slack != 0f)
		{
			stream.WriteByte(29);
			ProtocolParser.WriteSingle(stream, instance.slack);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(StringPoint instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, StringPoint instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class PlayerStorage : IDisposable, IPooled, IProto
{
	public class PlayerStoredVehicle : IDisposable, IPooled, IProto
	{
		[NonSerialized]
		public string shortname;

		[NonSerialized]
		public string resourcePath;

		[NonSerialized]
		public float health;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(PlayerStoredVehicle instance)
		{
			if (instance.ShouldPool)
			{
				instance.shortname = string.Empty;
				instance.resourcePath = string.Empty;
				instance.health = 0f;
				Pool.Free<PlayerStoredVehicle>(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose PlayerStoredVehicle with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(PlayerStoredVehicle instance)
		{
			instance.shortname = shortname;
			instance.resourcePath = resourcePath;
			instance.health = health;
		}

		public PlayerStoredVehicle Copy()
		{
			PlayerStoredVehicle playerStoredVehicle = Pool.Get<PlayerStoredVehicle>();
			CopyTo(playerStoredVehicle);
			return playerStoredVehicle;
		}

		public static PlayerStoredVehicle Deserialize(Stream stream)
		{
			PlayerStoredVehicle playerStoredVehicle = Pool.Get<PlayerStoredVehicle>();
			Deserialize(stream, playerStoredVehicle, isDelta: false);
			return playerStoredVehicle;
		}

		public static PlayerStoredVehicle DeserializeLengthDelimited(Stream stream)
		{
			PlayerStoredVehicle playerStoredVehicle = Pool.Get<PlayerStoredVehicle>();
			DeserializeLengthDelimited(stream, playerStoredVehicle, isDelta: false);
			return playerStoredVehicle;
		}

		public static PlayerStoredVehicle DeserializeLength(Stream stream, int length)
		{
			PlayerStoredVehicle playerStoredVehicle = Pool.Get<PlayerStoredVehicle>();
			DeserializeLength(stream, length, playerStoredVehicle, isDelta: false);
			return playerStoredVehicle;
		}

		public static PlayerStoredVehicle Deserialize(byte[] buffer)
		{
			PlayerStoredVehicle playerStoredVehicle = Pool.Get<PlayerStoredVehicle>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, playerStoredVehicle, isDelta: false);
			return playerStoredVehicle;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, PlayerStoredVehicle previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static PlayerStoredVehicle Deserialize(byte[] buffer, PlayerStoredVehicle instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static PlayerStoredVehicle Deserialize(Stream stream, PlayerStoredVehicle instance, bool isDelta)
		{
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 10:
					instance.shortname = ProtocolParser.ReadString(stream);
					continue;
				case 18:
					instance.resourcePath = ProtocolParser.ReadString(stream);
					continue;
				case 29:
					instance.health = ProtocolParser.ReadSingle(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static PlayerStoredVehicle DeserializeLengthDelimited(Stream stream, PlayerStoredVehicle instance, bool isDelta)
		{
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					instance.shortname = ProtocolParser.ReadString(stream);
					continue;
				case 18:
					instance.resourcePath = ProtocolParser.ReadString(stream);
					continue;
				case 29:
					instance.health = ProtocolParser.ReadSingle(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static PlayerStoredVehicle DeserializeLength(Stream stream, int length, PlayerStoredVehicle instance, bool isDelta)
		{
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					instance.shortname = ProtocolParser.ReadString(stream);
					continue;
				case 18:
					instance.resourcePath = ProtocolParser.ReadString(stream);
					continue;
				case 29:
					instance.health = ProtocolParser.ReadSingle(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, PlayerStoredVehicle instance, PlayerStoredVehicle previous)
		{
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.shortname != null && instance.shortname != previous.shortname)
			{
				stream.WriteByte(10);
				ProtocolParser.WriteString(stream, instance.shortname);
			}
			if (instance.resourcePath != null && instance.resourcePath != previous.resourcePath)
			{
				stream.WriteByte(18);
				ProtocolParser.WriteString(stream, instance.resourcePath);
			}
			if (instance.health != previous.health)
			{
				stream.WriteByte(29);
				ProtocolParser.WriteSingle(stream, instance.health);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public static void Serialize(Stream stream, PlayerStoredVehicle instance)
		{
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.shortname != null)
			{
				stream.WriteByte(10);
				ProtocolParser.WriteString(stream, instance.shortname);
			}
			if (instance.resourcePath != null)
			{
				stream.WriteByte(18);
				ProtocolParser.WriteString(stream, instance.resourcePath);
			}
			if (instance.health != 0f)
			{
				stream.WriteByte(29);
				ProtocolParser.WriteSingle(stream, instance.health);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(PlayerStoredVehicle instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, PlayerStoredVehicle instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	[NonSerialized]
	public ulong userid;

	[NonSerialized]
	public List<PlayerStoredVehicle> storedVehicles;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(PlayerStorage instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		instance.userid = 0uL;
		if (instance.storedVehicles != null)
		{
			for (int i = 0; i < instance.storedVehicles.Count; i++)
			{
				if (instance.storedVehicles[i] != null)
				{
					instance.storedVehicles[i].ResetToPool();
					instance.storedVehicles[i] = null;
				}
			}
			List<PlayerStoredVehicle> list = instance.storedVehicles;
			Pool.Free<PlayerStoredVehicle>(ref list, false);
			instance.storedVehicles = list;
		}
		Pool.Free<PlayerStorage>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose PlayerStorage with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(PlayerStorage instance)
	{
		instance.userid = userid;
		if (storedVehicles != null)
		{
			instance.storedVehicles = Pool.Get<List<PlayerStoredVehicle>>();
			for (int i = 0; i < storedVehicles.Count; i++)
			{
				PlayerStoredVehicle item = storedVehicles[i].Copy();
				instance.storedVehicles.Add(item);
			}
		}
		else
		{
			instance.storedVehicles = null;
		}
	}

	public PlayerStorage Copy()
	{
		PlayerStorage playerStorage = Pool.Get<PlayerStorage>();
		CopyTo(playerStorage);
		return playerStorage;
	}

	public static PlayerStorage Deserialize(Stream stream)
	{
		PlayerStorage playerStorage = Pool.Get<PlayerStorage>();
		Deserialize(stream, playerStorage, isDelta: false);
		return playerStorage;
	}

	public static PlayerStorage DeserializeLengthDelimited(Stream stream)
	{
		PlayerStorage playerStorage = Pool.Get<PlayerStorage>();
		DeserializeLengthDelimited(stream, playerStorage, isDelta: false);
		return playerStorage;
	}

	public static PlayerStorage DeserializeLength(Stream stream, int length)
	{
		PlayerStorage playerStorage = Pool.Get<PlayerStorage>();
		DeserializeLength(stream, length, playerStorage, isDelta: false);
		return playerStorage;
	}

	public static PlayerStorage Deserialize(byte[] buffer)
	{
		PlayerStorage playerStorage = Pool.Get<PlayerStorage>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, playerStorage, isDelta: false);
		return playerStorage;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, PlayerStorage previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static PlayerStorage Deserialize(byte[] buffer, PlayerStorage instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static PlayerStorage Deserialize(Stream stream, PlayerStorage instance, bool isDelta)
	{
		if (!isDelta && instance.storedVehicles == null)
		{
			instance.storedVehicles = Pool.Get<List<PlayerStoredVehicle>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.userid = ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.storedVehicles.Add(PlayerStoredVehicle.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static PlayerStorage DeserializeLengthDelimited(Stream stream, PlayerStorage instance, bool isDelta)
	{
		if (!isDelta && instance.storedVehicles == null)
		{
			instance.storedVehicles = Pool.Get<List<PlayerStoredVehicle>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.userid = ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.storedVehicles.Add(PlayerStoredVehicle.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static PlayerStorage DeserializeLength(Stream stream, int length, PlayerStorage instance, bool isDelta)
	{
		if (!isDelta && instance.storedVehicles == null)
		{
			instance.storedVehicles = Pool.Get<List<PlayerStoredVehicle>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.userid = ProtocolParser.ReadUInt64(stream);
				continue;
			case 18:
				instance.storedVehicles.Add(PlayerStoredVehicle.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, PlayerStorage instance, PlayerStorage previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.userid != previous.userid)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.userid);
		}
		if (instance.storedVehicles != null)
		{
			for (int i = 0; i < instance.storedVehicles.Count; i++)
			{
				PlayerStoredVehicle playerStoredVehicle = instance.storedVehicles[i];
				stream.WriteByte(18);
				memoryStream.SetLength(0L);
				PlayerStoredVehicle.SerializeDelta(memoryStream, playerStoredVehicle, playerStoredVehicle);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, PlayerStorage instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.userid != 0L)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.userid);
		}
		if (instance.storedVehicles != null)
		{
			for (int i = 0; i < instance.storedVehicles.Count; i++)
			{
				PlayerStoredVehicle instance2 = instance.storedVehicles[i];
				stream.WriteByte(18);
				memoryStream.SetLength(0L);
				PlayerStoredVehicle.Serialize(memoryStream, instance2);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(PlayerStorage instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, PlayerStorage instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (storedVehicles != null)
		{
			for (int i = 0; i < storedVehicles.Count; i++)
			{
				storedVehicles[i]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class Lights : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public Color topLeft;

	[NonSerialized]
	public Color topRight;

	[NonSerialized]
	public Color bottomLeft;

	[NonSerialized]
	public Color bottomRight;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(Lights instance)
	{
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		if (instance.ShouldPool)
		{
			instance.topLeft = default(Color);
			instance.topRight = default(Color);
			instance.bottomLeft = default(Color);
			instance.bottomRight = default(Color);
			Pool.Free<Lights>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose Lights with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(Lights instance)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		instance.topLeft = topLeft;
		instance.topRight = topRight;
		instance.bottomLeft = bottomLeft;
		instance.bottomRight = bottomRight;
	}

	public Lights Copy()
	{
		Lights lights = Pool.Get<Lights>();
		CopyTo(lights);
		return lights;
	}

	public static Lights Deserialize(Stream stream)
	{
		Lights lights = Pool.Get<Lights>();
		Deserialize(stream, lights, isDelta: false);
		return lights;
	}

	public static Lights DeserializeLengthDelimited(Stream stream)
	{
		Lights lights = Pool.Get<Lights>();
		DeserializeLengthDelimited(stream, lights, isDelta: false);
		return lights;
	}

	public static Lights DeserializeLength(Stream stream, int length)
	{
		Lights lights = Pool.Get<Lights>();
		DeserializeLength(stream, length, lights, isDelta: false);
		return lights;
	}

	public static Lights Deserialize(byte[] buffer)
	{
		Lights lights = Pool.Get<Lights>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, lights, isDelta: false);
		return lights;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, Lights previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static Lights Deserialize(byte[] buffer, Lights instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static Lights Deserialize(Stream stream, Lights instance, bool isDelta)
	{
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				ColorSerialized.DeserializeLengthDelimited(stream, ref instance.topLeft, isDelta);
				continue;
			case 18:
				ColorSerialized.DeserializeLengthDelimited(stream, ref instance.topRight, isDelta);
				continue;
			case 26:
				ColorSerialized.DeserializeLengthDelimited(stream, ref instance.bottomLeft, isDelta);
				continue;
			case 34:
				ColorSerialized.DeserializeLengthDelimited(stream, ref instance.bottomRight, isDelta);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static Lights DeserializeLengthDelimited(Stream stream, Lights instance, bool isDelta)
	{
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				ColorSerialized.DeserializeLengthDelimited(stream, ref instance.topLeft, isDelta);
				continue;
			case 18:
				ColorSerialized.DeserializeLengthDelimited(stream, ref instance.topRight, isDelta);
				continue;
			case 26:
				ColorSerialized.DeserializeLengthDelimited(stream, ref instance.bottomLeft, isDelta);
				continue;
			case 34:
				ColorSerialized.DeserializeLengthDelimited(stream, ref instance.bottomRight, isDelta);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Lights DeserializeLength(Stream stream, int length, Lights instance, bool isDelta)
	{
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0092: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				ColorSerialized.DeserializeLengthDelimited(stream, ref instance.topLeft, isDelta);
				continue;
			case 18:
				ColorSerialized.DeserializeLengthDelimited(stream, ref instance.topRight, isDelta);
				continue;
			case 26:
				ColorSerialized.DeserializeLengthDelimited(stream, ref instance.bottomLeft, isDelta);
				continue;
			case 34:
				ColorSerialized.DeserializeLengthDelimited(stream, ref instance.bottomRight, isDelta);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, Lights instance, Lights previous)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0121: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.topLeft != previous.topLeft)
		{
			stream.WriteByte(10);
			memoryStream.SetLength(0L);
			ColorSerialized.SerializeDelta(memoryStream, instance.topLeft, previous.topLeft);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		if (instance.topRight != previous.topRight)
		{
			stream.WriteByte(18);
			memoryStream.SetLength(0L);
			ColorSerialized.SerializeDelta(memoryStream, instance.topRight, previous.topRight);
			uint num2 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
		}
		if (instance.bottomLeft != previous.bottomLeft)
		{
			stream.WriteByte(26);
			memoryStream.SetLength(0L);
			ColorSerialized.SerializeDelta(memoryStream, instance.bottomLeft, previous.bottomLeft);
			uint num3 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num3);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num3);
		}
		if (instance.bottomRight != previous.bottomRight)
		{
			stream.WriteByte(34);
			memoryStream.SetLength(0L);
			ColorSerialized.SerializeDelta(memoryStream, instance.bottomRight, previous.bottomRight);
			uint num4 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num4);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num4);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, Lights instance)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0104: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_011e: Unknown result type (might be due to invalid IL or missing references)
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.topLeft != default(Color))
		{
			stream.WriteByte(10);
			memoryStream.SetLength(0L);
			ColorSerialized.Serialize(memoryStream, instance.topLeft);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		if (instance.topRight != default(Color))
		{
			stream.WriteByte(18);
			memoryStream.SetLength(0L);
			ColorSerialized.Serialize(memoryStream, instance.topRight);
			uint num2 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
		}
		if (instance.bottomLeft != default(Color))
		{
			stream.WriteByte(26);
			memoryStream.SetLength(0L);
			ColorSerialized.Serialize(memoryStream, instance.bottomLeft);
			uint num3 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num3);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num3);
		}
		if (instance.bottomRight != default(Color))
		{
			stream.WriteByte(34);
			memoryStream.SetLength(0L);
			ColorSerialized.Serialize(memoryStream, instance.bottomRight);
			uint num4 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num4);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num4);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(Lights instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, Lights instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class PendingOrder : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public NetworkableId vendingMachineId;

	[NonSerialized]
	public NetworkableId droneId;

	[NonSerialized]
	public TimeUntil timeUntilExpiry;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(PendingOrder instance)
	{
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		if (instance.ShouldPool)
		{
			instance.vendingMachineId = default(NetworkableId);
			instance.droneId = default(NetworkableId);
			instance.timeUntilExpiry = TimeUntil.op_Implicit(0f);
			Pool.Free<PendingOrder>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose PendingOrder with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(PendingOrder instance)
	{
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		instance.vendingMachineId = vendingMachineId;
		instance.droneId = droneId;
		instance.timeUntilExpiry = timeUntilExpiry;
	}

	public PendingOrder Copy()
	{
		PendingOrder pendingOrder = Pool.Get<PendingOrder>();
		CopyTo(pendingOrder);
		return pendingOrder;
	}

	public static PendingOrder Deserialize(Stream stream)
	{
		PendingOrder pendingOrder = Pool.Get<PendingOrder>();
		Deserialize(stream, pendingOrder, isDelta: false);
		return pendingOrder;
	}

	public static PendingOrder DeserializeLengthDelimited(Stream stream)
	{
		PendingOrder pendingOrder = Pool.Get<PendingOrder>();
		DeserializeLengthDelimited(stream, pendingOrder, isDelta: false);
		return pendingOrder;
	}

	public static PendingOrder DeserializeLength(Stream stream, int length)
	{
		PendingOrder pendingOrder = Pool.Get<PendingOrder>();
		DeserializeLength(stream, length, pendingOrder, isDelta: false);
		return pendingOrder;
	}

	public static PendingOrder Deserialize(byte[] buffer)
	{
		PendingOrder pendingOrder = Pool.Get<PendingOrder>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, pendingOrder, isDelta: false);
		return pendingOrder;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, PendingOrder previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static PendingOrder Deserialize(byte[] buffer, PendingOrder instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static PendingOrder Deserialize(Stream stream, PendingOrder instance, bool isDelta)
	{
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.vendingMachineId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 24:
				instance.droneId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 37:
				instance.timeUntilExpiry = TimeUntil.op_Implicit(ProtocolParser.ReadSingle(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static PendingOrder DeserializeLengthDelimited(Stream stream, PendingOrder instance, bool isDelta)
	{
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.vendingMachineId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 24:
				instance.droneId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 37:
				instance.timeUntilExpiry = TimeUntil.op_Implicit(ProtocolParser.ReadSingle(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static PendingOrder DeserializeLength(Stream stream, int length, PendingOrder instance, bool isDelta)
	{
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.vendingMachineId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 24:
				instance.droneId = new NetworkableId(ProtocolParser.ReadUInt64(stream));
				continue;
			case 37:
				instance.timeUntilExpiry = TimeUntil.op_Implicit(ProtocolParser.ReadSingle(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, PendingOrder instance, PendingOrder previous)
	{
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		stream.WriteByte(8);
		ProtocolParser.WriteUInt64(stream, instance.vendingMachineId.Value);
		stream.WriteByte(24);
		ProtocolParser.WriteUInt64(stream, instance.droneId.Value);
		if (TimeUntil.op_Implicit(instance.timeUntilExpiry) != TimeUntil.op_Implicit(previous.timeUntilExpiry))
		{
			stream.WriteByte(37);
			ProtocolParser.WriteSingle(stream, TimeUntil.op_Implicit(instance.timeUntilExpiry));
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, PendingOrder instance)
	{
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.vendingMachineId != default(NetworkableId))
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.vendingMachineId.Value);
		}
		if (instance.droneId != default(NetworkableId))
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, instance.droneId.Value);
		}
		if (TimeUntil.op_Implicit(instance.timeUntilExpiry) != 0f)
		{
			stream.WriteByte(37);
			ProtocolParser.WriteSingle(stream, TimeUntil.op_Implicit(instance.timeUntilExpiry));
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(PendingOrder instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, PendingOrder instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		action(UidType.NetworkableId, ref vendingMachineId.Value);
		action(UidType.NetworkableId, ref droneId.Value);
	}
}


using System;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class TeamInfo : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public int score;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(TeamInfo instance)
	{
		if (instance.ShouldPool)
		{
			instance.score = 0;
			Pool.Free<TeamInfo>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose TeamInfo with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(TeamInfo instance)
	{
		instance.score = score;
	}

	public TeamInfo Copy()
	{
		TeamInfo teamInfo = Pool.Get<TeamInfo>();
		CopyTo(teamInfo);
		return teamInfo;
	}

	public static TeamInfo Deserialize(Stream stream)
	{
		TeamInfo teamInfo = Pool.Get<TeamInfo>();
		Deserialize(stream, teamInfo, isDelta: false);
		return teamInfo;
	}

	public static TeamInfo DeserializeLengthDelimited(Stream stream)
	{
		TeamInfo teamInfo = Pool.Get<TeamInfo>();
		DeserializeLengthDelimited(stream, teamInfo, isDelta: false);
		return teamInfo;
	}

	public static TeamInfo DeserializeLength(Stream stream, int length)
	{
		TeamInfo teamInfo = Pool.Get<TeamInfo>();
		DeserializeLength(stream, length, teamInfo, isDelta: false);
		return teamInfo;
	}

	public static TeamInfo Deserialize(byte[] buffer)
	{
		TeamInfo teamInfo = Pool.Get<TeamInfo>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, teamInfo, isDelta: false);
		return teamInfo;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, TeamInfo previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static TeamInfo Deserialize(byte[] buffer, TeamInfo instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static TeamInfo Deserialize(Stream stream, TeamInfo instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.score = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static TeamInfo DeserializeLengthDelimited(Stream stream, TeamInfo instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.score = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static TeamInfo DeserializeLength(Stream stream, int length, TeamInfo instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.score = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, TeamInfo instance, TeamInfo previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.score != previous.score)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.score);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, TeamInfo instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.score != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.score);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(TeamInfo instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, TeamInfo instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class ScoreColumn : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public string name;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(ScoreColumn instance)
	{
		if (instance.ShouldPool)
		{
			instance.name = string.Empty;
			Pool.Free<ScoreColumn>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose ScoreColumn with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(ScoreColumn instance)
	{
		instance.name = name;
	}

	public ScoreColumn Copy()
	{
		ScoreColumn scoreColumn = Pool.Get<ScoreColumn>();
		CopyTo(scoreColumn);
		return scoreColumn;
	}

	public static ScoreColumn Deserialize(Stream stream)
	{
		ScoreColumn scoreColumn = Pool.Get<ScoreColumn>();
		Deserialize(stream, scoreColumn, isDelta: false);
		return scoreColumn;
	}

	public static ScoreColumn DeserializeLengthDelimited(Stream stream)
	{
		ScoreColumn scoreColumn = Pool.Get<ScoreColumn>();
		DeserializeLengthDelimited(stream, scoreColumn, isDelta: false);
		return scoreColumn;
	}

	public static ScoreColumn DeserializeLength(Stream stream, int length)
	{
		ScoreColumn scoreColumn = Pool.Get<ScoreColumn>();
		DeserializeLength(stream, length, scoreColumn, isDelta: false);
		return scoreColumn;
	}

	public static ScoreColumn Deserialize(byte[] buffer)
	{
		ScoreColumn scoreColumn = Pool.Get<ScoreColumn>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, scoreColumn, isDelta: false);
		return scoreColumn;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, ScoreColumn previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static ScoreColumn Deserialize(byte[] buffer, ScoreColumn instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static ScoreColumn Deserialize(Stream stream, ScoreColumn instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.name = ProtocolParser.ReadString(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static ScoreColumn DeserializeLengthDelimited(Stream stream, ScoreColumn instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.name = ProtocolParser.ReadString(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static ScoreColumn DeserializeLength(Stream stream, int length, ScoreColumn instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.name = ProtocolParser.ReadString(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, ScoreColumn instance, ScoreColumn previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.name != previous.name)
		{
			if (instance.name == null)
			{
				throw new ArgumentNullException("name", "Required by proto specification.");
			}
			stream.WriteByte(10);
			ProtocolParser.WriteString(stream, instance.name);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, ScoreColumn instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.name == null)
		{
			throw new ArgumentNullException("name", "Required by proto specification.");
		}
		stream.WriteByte(10);
		ProtocolParser.WriteString(stream, instance.name);
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(ScoreColumn instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, ScoreColumn instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class PlayerScore : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public string playerName;

	[NonSerialized]
	public ulong userid;

	[NonSerialized]
	public List<int> scores;

	[NonSerialized]
	public int team;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(PlayerScore instance)
	{
		if (instance.ShouldPool)
		{
			instance.playerName = string.Empty;
			instance.userid = 0uL;
			if (instance.scores != null)
			{
				List<int> list = instance.scores;
				Pool.FreeUnmanaged<int>(ref list);
				instance.scores = list;
			}
			instance.team = 0;
			Pool.Free<PlayerScore>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose PlayerScore with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(PlayerScore instance)
	{
		instance.playerName = playerName;
		instance.userid = userid;
		if (scores != null)
		{
			instance.scores = Pool.Get<List<int>>();
			for (int i = 0; i < scores.Count; i++)
			{
				int item = scores[i];
				instance.scores.Add(item);
			}
		}
		else
		{
			instance.scores = null;
		}
		instance.team = team;
	}

	public PlayerScore Copy()
	{
		PlayerScore playerScore = Pool.Get<PlayerScore>();
		CopyTo(playerScore);
		return playerScore;
	}

	public static PlayerScore Deserialize(Stream stream)
	{
		PlayerScore playerScore = Pool.Get<PlayerScore>();
		Deserialize(stream, playerScore, isDelta: false);
		return playerScore;
	}

	public static PlayerScore DeserializeLengthDelimited(Stream stream)
	{
		PlayerScore playerScore = Pool.Get<PlayerScore>();
		DeserializeLengthDelimited(stream, playerScore, isDelta: false);
		return playerScore;
	}

	public static PlayerScore DeserializeLength(Stream stream, int length)
	{
		PlayerScore playerScore = Pool.Get<PlayerScore>();
		DeserializeLength(stream, length, playerScore, isDelta: false);
		return playerScore;
	}

	public static PlayerScore Deserialize(byte[] buffer)
	{
		PlayerScore playerScore = Pool.Get<PlayerScore>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, playerScore, isDelta: false);
		return playerScore;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, PlayerScore previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static PlayerScore Deserialize(byte[] buffer, PlayerScore instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static PlayerScore Deserialize(Stream stream, PlayerScore instance, bool isDelta)
	{
		if (!isDelta && instance.scores == null)
		{
			instance.scores = Pool.Get<List<int>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.playerName = ProtocolParser.ReadString(stream);
				continue;
			case 16:
				instance.userid = ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.scores.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			case 32:
				instance.team = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static PlayerScore DeserializeLengthDelimited(Stream stream, PlayerScore instance, bool isDelta)
	{
		if (!isDelta && instance.scores == null)
		{
			instance.scores = Pool.Get<List<int>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.playerName = ProtocolParser.ReadString(stream);
				continue;
			case 16:
				instance.userid = ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.scores.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			case 32:
				instance.team = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static PlayerScore DeserializeLength(Stream stream, int length, PlayerScore instance, bool isDelta)
	{
		if (!isDelta && instance.scores == null)
		{
			instance.scores = Pool.Get<List<int>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.playerName = ProtocolParser.ReadString(stream);
				continue;
			case 16:
				instance.userid = ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.scores.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			case 32:
				instance.team = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, PlayerScore instance, PlayerScore previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.playerName != previous.playerName)
		{
			if (instance.playerName == null)
			{
				throw new ArgumentNullException("playerName", "Required by proto specification.");
			}
			stream.WriteByte(10);
			ProtocolParser.WriteString(stream, instance.playerName);
		}
		if (instance.userid != previous.userid)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, instance.userid);
		}
		if (instance.scores != null)
		{
			for (int i = 0; i < instance.scores.Count; i++)
			{
				int num = instance.scores[i];
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)num);
			}
		}
		if (instance.team != previous.team)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.team);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, PlayerScore instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.playerName == null)
		{
			throw new ArgumentNullException("playerName", "Required by proto specification.");
		}
		stream.WriteByte(10);
		ProtocolParser.WriteString(stream, instance.playerName);
		if (instance.userid != 0L)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, instance.userid);
		}
		if (instance.scores != null)
		{
			for (int i = 0; i < instance.scores.Count; i++)
			{
				int num = instance.scores[i];
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)num);
			}
		}
		if (instance.team != 0)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.team);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(PlayerScore instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, PlayerScore instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class ReclaimInfo : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public ulong victimID;

	[NonSerialized]
	public ItemContainer mainInventory;

	[NonSerialized]
	public ItemContainer wearInventory;

	[NonSerialized]
	public ItemContainer beltInventory;

	[NonSerialized]
	public ItemContainer backpackInventory;

	[NonSerialized]
	public int reclaimId;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(ReclaimInfo instance)
	{
		if (instance.ShouldPool)
		{
			instance.victimID = 0uL;
			if (instance.mainInventory != null)
			{
				instance.mainInventory.ResetToPool();
				instance.mainInventory = null;
			}
			if (instance.wearInventory != null)
			{
				instance.wearInventory.ResetToPool();
				instance.wearInventory = null;
			}
			if (instance.beltInventory != null)
			{
				instance.beltInventory.ResetToPool();
				instance.beltInventory = null;
			}
			if (instance.backpackInventory != null)
			{
				instance.backpackInventory.ResetToPool();
				instance.backpackInventory = null;
			}
			instance.reclaimId = 0;
			Pool.Free<ReclaimInfo>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose ReclaimInfo with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(ReclaimInfo instance)
	{
		instance.victimID = victimID;
		if (mainInventory != null)
		{
			if (instance.mainInventory == null)
			{
				instance.mainInventory = mainInventory.Copy();
			}
			else
			{
				mainInventory.CopyTo(instance.mainInventory);
			}
		}
		else
		{
			instance.mainInventory = null;
		}
		if (wearInventory != null)
		{
			if (instance.wearInventory == null)
			{
				instance.wearInventory = wearInventory.Copy();
			}
			else
			{
				wearInventory.CopyTo(instance.wearInventory);
			}
		}
		else
		{
			instance.wearInventory = null;
		}
		if (beltInventory != null)
		{
			if (instance.beltInventory == null)
			{
				instance.beltInventory = beltInventory.Copy();
			}
			else
			{
				beltInventory.CopyTo(instance.beltInventory);
			}
		}
		else
		{
			instance.beltInventory = null;
		}
		if (backpackInventory != null)
		{
			if (instance.backpackInventory == null)
			{
				instance.backpackInventory = backpackInventory.Copy();
			}
			else
			{
				backpackInventory.CopyTo(instance.backpackInventory);
			}
		}
		else
		{
			instance.backpackInventory = null;
		}
		instance.reclaimId = reclaimId;
	}

	public ReclaimInfo Copy()
	{
		ReclaimInfo reclaimInfo = Pool.Get<ReclaimInfo>();
		CopyTo(reclaimInfo);
		return reclaimInfo;
	}

	public static ReclaimInfo Deserialize(Stream stream)
	{
		ReclaimInfo reclaimInfo = Pool.Get<ReclaimInfo>();
		Deserialize(stream, reclaimInfo, isDelta: false);
		return reclaimInfo;
	}

	public static ReclaimInfo DeserializeLengthDelimited(Stream stream)
	{
		ReclaimInfo reclaimInfo = Pool.Get<ReclaimInfo>();
		DeserializeLengthDelimited(stream, reclaimInfo, isDelta: false);
		return reclaimInfo;
	}

	public static ReclaimInfo DeserializeLength(Stream stream, int length)
	{
		ReclaimInfo reclaimInfo = Pool.Get<ReclaimInfo>();
		DeserializeLength(stream, length, reclaimInfo, isDelta: false);
		return reclaimInfo;
	}

	public static ReclaimInfo Deserialize(byte[] buffer)
	{
		ReclaimInfo reclaimInfo = Pool.Get<ReclaimInfo>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, reclaimInfo, isDelta: false);
		return reclaimInfo;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, ReclaimInfo previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static ReclaimInfo Deserialize(byte[] buffer, ReclaimInfo instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static ReclaimInfo Deserialize(Stream stream, ReclaimInfo instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.victimID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 34:
				if (instance.mainInventory == null)
				{
					instance.mainInventory = ItemContainer.DeserializeLengthDelimited(stream);
				}
				else
				{
					ItemContainer.DeserializeLengthDelimited(stream, instance.mainInventory, isDelta);
				}
				continue;
			case 42:
				if (instance.wearInventory == null)
				{
					instance.wearInventory = ItemContainer.DeserializeLengthDelimited(stream);
				}
				else
				{
					ItemContainer.DeserializeLengthDelimited(stream, instance.wearInventory, isDelta);
				}
				continue;
			case 50:
				if (instance.beltInventory == null)
				{
					instance.beltInventory = ItemContainer.DeserializeLengthDelimited(stream);
				}
				else
				{
					ItemContainer.DeserializeLengthDelimited(stream, instance.beltInventory, isDelta);
				}
				continue;
			case 58:
				if (instance.backpackInventory == null)
				{
					instance.backpackInventory = ItemContainer.DeserializeLengthDelimited(stream);
				}
				else
				{
					ItemContainer.DeserializeLengthDelimited(stream, instance.backpackInventory, isDelta);
				}
				continue;
			case 64:
				instance.reclaimId = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static ReclaimInfo DeserializeLengthDelimited(Stream stream, ReclaimInfo instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.victimID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 34:
				if (instance.mainInventory == null)
				{
					instance.mainInventory = ItemContainer.DeserializeLengthDelimited(stream);
				}
				else
				{
					ItemContainer.DeserializeLengthDelimited(stream, instance.mainInventory, isDelta);
				}
				continue;
			case 42:
				if (instance.wearInventory == null)
				{
					instance.wearInventory = ItemContainer.DeserializeLengthDelimited(stream);
				}
				else
				{
					ItemContainer.DeserializeLengthDelimited(stream, instance.wearInventory, isDelta);
				}
				continue;
			case 50:
				if (instance.beltInventory == null)
				{
					instance.beltInventory = ItemContainer.DeserializeLengthDelimited(stream);
				}
				else
				{
					ItemContainer.DeserializeLengthDelimited(stream, instance.beltInventory, isDelta);
				}
				continue;
			case 58:
				if (instance.backpackInventory == null)
				{
					instance.backpackInventory = ItemContainer.DeserializeLengthDelimited(stream);
				}
				else
				{
					ItemContainer.DeserializeLengthDelimited(stream, instance.backpackInventory, isDelta);
				}
				continue;
			case 64:
				instance.reclaimId = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static ReclaimInfo DeserializeLength(Stream stream, int length, ReclaimInfo instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.victimID = ProtocolParser.ReadUInt64(stream);
				continue;
			case 34:
				if (instance.mainInventory == null)
				{
					instance.mainInventory = ItemContainer.DeserializeLengthDelimited(stream);
				}
				else
				{
					ItemContainer.DeserializeLengthDelimited(stream, instance.mainInventory, isDelta);
				}
				continue;
			case 42:
				if (instance.wearInventory == null)
				{
					instance.wearInventory = ItemContainer.DeserializeLengthDelimited(stream);
				}
				else
				{
					ItemContainer.DeserializeLengthDelimited(stream, instance.wearInventory, isDelta);
				}
				continue;
			case 50:
				if (instance.beltInventory == null)
				{
					instance.beltInventory = ItemContainer.DeserializeLengthDelimited(stream);
				}
				else
				{
					ItemContainer.DeserializeLengthDelimited(stream, instance.beltInventory, isDelta);
				}
				continue;
			case 58:
				if (instance.backpackInventory == null)
				{
					instance.backpackInventory = ItemContainer.DeserializeLengthDelimited(stream);
				}
				else
				{
					ItemContainer.DeserializeLengthDelimited(stream, instance.backpackInventory, isDelta);
				}
				continue;
			case 64:
				instance.reclaimId = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, ReclaimInfo instance, ReclaimInfo previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.victimID != previous.victimID)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.victimID);
		}
		if (instance.mainInventory == null)
		{
			throw new ArgumentNullException("mainInventory", "Required by proto specification.");
		}
		stream.WriteByte(34);
		memoryStream.SetLength(0L);
		ItemContainer.SerializeDelta(memoryStream, instance.mainInventory, previous.mainInventory);
		uint num = (uint)memoryStream.Length;
		ProtocolParser.WriteUInt32(stream, num);
		stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		if (instance.wearInventory == null)
		{
			throw new ArgumentNullException("wearInventory", "Required by proto specification.");
		}
		stream.WriteByte(42);
		memoryStream.SetLength(0L);
		ItemContainer.SerializeDelta(memoryStream, instance.wearInventory, previous.wearInventory);
		uint num2 = (uint)memoryStream.Length;
		ProtocolParser.WriteUInt32(stream, num2);
		stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
		if (instance.beltInventory == null)
		{
			throw new ArgumentNullException("beltInventory", "Required by proto specification.");
		}
		stream.WriteByte(50);
		memoryStream.SetLength(0L);
		ItemContainer.SerializeDelta(memoryStream, instance.beltInventory, previous.beltInventory);
		uint num3 = (uint)memoryStream.Length;
		ProtocolParser.WriteUInt32(stream, num3);
		stream.Write(memoryStream.GetBuffer(), 0, (int)num3);
		if (instance.backpackInventory == null)
		{
			throw new ArgumentNullException("backpackInventory", "Required by proto specification.");
		}
		stream.WriteByte(58);
		memoryStream.SetLength(0L);
		ItemContainer.SerializeDelta(memoryStream, instance.backpackInventory, previous.backpackInventory);
		uint num4 = (uint)memoryStream.Length;
		ProtocolParser.WriteUInt32(stream, num4);
		stream.Write(memoryStream.GetBuffer(), 0, (int)num4);
		if (instance.reclaimId != previous.reclaimId)
		{
			stream.WriteByte(64);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.reclaimId);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, ReclaimInfo instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.victimID != 0L)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.victimID);
		}
		if (instance.mainInventory == null)
		{
			throw new ArgumentNullException("mainInventory", "Required by proto specification.");
		}
		stream.WriteByte(34);
		memoryStream.SetLength(0L);
		ItemContainer.Serialize(memoryStream, instance.mainInventory);
		uint num = (uint)memoryStream.Length;
		ProtocolParser.WriteUInt32(stream, num);
		stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		if (instance.wearInventory == null)
		{
			throw new ArgumentNullException("wearInventory", "Required by proto specification.");
		}
		stream.WriteByte(42);
		memoryStream.SetLength(0L);
		ItemContainer.Serialize(memoryStream, instance.wearInventory);
		uint num2 = (uint)memoryStream.Length;
		ProtocolParser.WriteUInt32(stream, num2);
		stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
		if (instance.beltInventory == null)
		{
			throw new ArgumentNullException("beltInventory", "Required by proto specification.");
		}
		stream.WriteByte(50);
		memoryStream.SetLength(0L);
		ItemContainer.Serialize(memoryStream, instance.beltInventory);
		uint num3 = (uint)memoryStream.Length;
		ProtocolParser.WriteUInt32(stream, num3);
		stream.Write(memoryStream.GetBuffer(), 0, (int)num3);
		if (instance.backpackInventory == null)
		{
			throw new ArgumentNullException("backpackInventory", "Required by proto specification.");
		}
		stream.WriteByte(58);
		memoryStream.SetLength(0L);
		ItemContainer.Serialize(memoryStream, instance.backpackInventory);
		uint num4 = (uint)memoryStream.Length;
		ProtocolParser.WriteUInt32(stream, num4);
		stream.Write(memoryStream.GetBuffer(), 0, (int)num4);
		if (instance.reclaimId != 0)
		{
			stream.WriteByte(64);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.reclaimId);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(ReclaimInfo instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, ReclaimInfo instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		mainInventory?.InspectUids(action);
		wearInventory?.InspectUids(action);
		beltInventory?.InspectUids(action);
		backpackInventory?.InspectUids(action);
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class CardPlayer : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public ulong userid;

	[NonSerialized]
	public List<int> cards;

	[NonSerialized]
	public int scrap;

	[NonSerialized]
	public int state;

	[NonSerialized]
	public int availableInputs;

	[NonSerialized]
	public int betThisRound;

	[NonSerialized]
	public int betThisTurn;

	[NonSerialized]
	public bool leftRoundEarly;

	[NonSerialized]
	public bool sendCardDetails;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(CardPlayer instance)
	{
		if (instance.ShouldPool)
		{
			instance.userid = 0uL;
			if (instance.cards != null)
			{
				List<int> list = instance.cards;
				Pool.FreeUnmanaged<int>(ref list);
				instance.cards = list;
			}
			instance.scrap = 0;
			instance.state = 0;
			instance.availableInputs = 0;
			instance.betThisRound = 0;
			instance.betThisTurn = 0;
			instance.leftRoundEarly = false;
			instance.sendCardDetails = false;
			Pool.Free<CardPlayer>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose CardPlayer with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(CardPlayer instance)
	{
		instance.userid = userid;
		if (cards != null)
		{
			instance.cards = Pool.Get<List<int>>();
			for (int i = 0; i < cards.Count; i++)
			{
				int item = cards[i];
				instance.cards.Add(item);
			}
		}
		else
		{
			instance.cards = null;
		}
		instance.scrap = scrap;
		instance.state = state;
		instance.availableInputs = availableInputs;
		instance.betThisRound = betThisRound;
		instance.betThisTurn = betThisTurn;
		instance.leftRoundEarly = leftRoundEarly;
		instance.sendCardDetails = sendCardDetails;
	}

	public CardPlayer Copy()
	{
		CardPlayer cardPlayer = Pool.Get<CardPlayer>();
		CopyTo(cardPlayer);
		return cardPlayer;
	}

	public static CardPlayer Deserialize(Stream stream)
	{
		CardPlayer cardPlayer = Pool.Get<CardPlayer>();
		Deserialize(stream, cardPlayer, isDelta: false);
		return cardPlayer;
	}

	public static CardPlayer DeserializeLengthDelimited(Stream stream)
	{
		CardPlayer cardPlayer = Pool.Get<CardPlayer>();
		DeserializeLengthDelimited(stream, cardPlayer, isDelta: false);
		return cardPlayer;
	}

	public static CardPlayer DeserializeLength(Stream stream, int length)
	{
		CardPlayer cardPlayer = Pool.Get<CardPlayer>();
		DeserializeLength(stream, length, cardPlayer, isDelta: false);
		return cardPlayer;
	}

	public static CardPlayer Deserialize(byte[] buffer)
	{
		CardPlayer cardPlayer = Pool.Get<CardPlayer>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, cardPlayer, isDelta: false);
		return cardPlayer;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, CardPlayer previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static CardPlayer Deserialize(byte[] buffer, CardPlayer instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static CardPlayer Deserialize(Stream stream, CardPlayer instance, bool isDelta)
	{
		if (!isDelta && instance.cards == null)
		{
			instance.cards = Pool.Get<List<int>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.userid = ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.cards.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			case 24:
				instance.scrap = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.state = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.availableInputs = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.betThisRound = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 56:
				instance.betThisTurn = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 64:
				instance.leftRoundEarly = ProtocolParser.ReadBool(stream);
				continue;
			case 72:
				instance.sendCardDetails = ProtocolParser.ReadBool(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static CardPlayer DeserializeLengthDelimited(Stream stream, CardPlayer instance, bool isDelta)
	{
		if (!isDelta && instance.cards == null)
		{
			instance.cards = Pool.Get<List<int>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.userid = ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.cards.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			case 24:
				instance.scrap = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.state = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.availableInputs = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.betThisRound = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 56:
				instance.betThisTurn = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 64:
				instance.leftRoundEarly = ProtocolParser.ReadBool(stream);
				continue;
			case 72:
				instance.sendCardDetails = ProtocolParser.ReadBool(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static CardPlayer DeserializeLength(Stream stream, int length, CardPlayer instance, bool isDelta)
	{
		if (!isDelta && instance.cards == null)
		{
			instance.cards = Pool.Get<List<int>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.userid = ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.cards.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			case 24:
				instance.scrap = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.state = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 40:
				instance.availableInputs = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 48:
				instance.betThisRound = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 56:
				instance.betThisTurn = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 64:
				instance.leftRoundEarly = ProtocolParser.ReadBool(stream);
				continue;
			case 72:
				instance.sendCardDetails = ProtocolParser.ReadBool(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, CardPlayer instance, CardPlayer previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.userid != previous.userid)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.userid);
		}
		if (instance.cards != null)
		{
			for (int i = 0; i < instance.cards.Count; i++)
			{
				int num = instance.cards[i];
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)num);
			}
		}
		if (instance.scrap != previous.scrap)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.scrap);
		}
		if (instance.state != previous.state)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.state);
		}
		if (instance.availableInputs != previous.availableInputs)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.availableInputs);
		}
		if (instance.betThisRound != previous.betThisRound)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.betThisRound);
		}
		if (instance.betThisTurn != previous.betThisTurn)
		{
			stream.WriteByte(56);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.betThisTurn);
		}
		stream.WriteByte(64);
		ProtocolParser.WriteBool(stream, instance.leftRoundEarly);
		stream.WriteByte(72);
		ProtocolParser.WriteBool(stream, instance.sendCardDetails);
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, CardPlayer instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.userid != 0L)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, instance.userid);
		}
		if (instance.cards != null)
		{
			for (int i = 0; i < instance.cards.Count; i++)
			{
				int num = instance.cards[i];
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)num);
			}
		}
		if (instance.scrap != 0)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.scrap);
		}
		if (instance.state != 0)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.state);
		}
		if (instance.availableInputs != 0)
		{
			stream.WriteByte(40);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.availableInputs);
		}
		if (instance.betThisRound != 0)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.betThisRound);
		}
		if (instance.betThisTurn != 0)
		{
			stream.WriteByte(56);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.betThisTurn);
		}
		if (instance.leftRoundEarly)
		{
			stream.WriteByte(64);
			ProtocolParser.WriteBool(stream, instance.leftRoundEarly);
		}
		if (instance.sendCardDetails)
		{
			stream.WriteByte(72);
			ProtocolParser.WriteBool(stream, instance.sendCardDetails);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(CardPlayer instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, CardPlayer instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class TexasHoldEm : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public int dealerIndex;

	[NonSerialized]
	public List<int> communityCards;

	[NonSerialized]
	public int biggestRaiseThisTurn;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(TexasHoldEm instance)
	{
		if (instance.ShouldPool)
		{
			instance.dealerIndex = 0;
			if (instance.communityCards != null)
			{
				List<int> list = instance.communityCards;
				Pool.FreeUnmanaged<int>(ref list);
				instance.communityCards = list;
			}
			instance.biggestRaiseThisTurn = 0;
			Pool.Free<TexasHoldEm>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose TexasHoldEm with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(TexasHoldEm instance)
	{
		instance.dealerIndex = dealerIndex;
		if (communityCards != null)
		{
			instance.communityCards = Pool.Get<List<int>>();
			for (int i = 0; i < communityCards.Count; i++)
			{
				int item = communityCards[i];
				instance.communityCards.Add(item);
			}
		}
		else
		{
			instance.communityCards = null;
		}
		instance.biggestRaiseThisTurn = biggestRaiseThisTurn;
	}

	public TexasHoldEm Copy()
	{
		TexasHoldEm texasHoldEm = Pool.Get<TexasHoldEm>();
		CopyTo(texasHoldEm);
		return texasHoldEm;
	}

	public static TexasHoldEm Deserialize(Stream stream)
	{
		TexasHoldEm texasHoldEm = Pool.Get<TexasHoldEm>();
		Deserialize(stream, texasHoldEm, isDelta: false);
		return texasHoldEm;
	}

	public static TexasHoldEm DeserializeLengthDelimited(Stream stream)
	{
		TexasHoldEm texasHoldEm = Pool.Get<TexasHoldEm>();
		DeserializeLengthDelimited(stream, texasHoldEm, isDelta: false);
		return texasHoldEm;
	}

	public static TexasHoldEm DeserializeLength(Stream stream, int length)
	{
		TexasHoldEm texasHoldEm = Pool.Get<TexasHoldEm>();
		DeserializeLength(stream, length, texasHoldEm, isDelta: false);
		return texasHoldEm;
	}

	public static TexasHoldEm Deserialize(byte[] buffer)
	{
		TexasHoldEm texasHoldEm = Pool.Get<TexasHoldEm>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, texasHoldEm, isDelta: false);
		return texasHoldEm;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, TexasHoldEm previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static TexasHoldEm Deserialize(byte[] buffer, TexasHoldEm instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static TexasHoldEm Deserialize(Stream stream, TexasHoldEm instance, bool isDelta)
	{
		if (!isDelta && instance.communityCards == null)
		{
			instance.communityCards = Pool.Get<List<int>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.dealerIndex = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.communityCards.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			case 24:
				instance.biggestRaiseThisTurn = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static TexasHoldEm DeserializeLengthDelimited(Stream stream, TexasHoldEm instance, bool isDelta)
	{
		if (!isDelta && instance.communityCards == null)
		{
			instance.communityCards = Pool.Get<List<int>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.dealerIndex = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.communityCards.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			case 24:
				instance.biggestRaiseThisTurn = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static TexasHoldEm DeserializeLength(Stream stream, int length, TexasHoldEm instance, bool isDelta)
	{
		if (!isDelta && instance.communityCards == null)
		{
			instance.communityCards = Pool.Get<List<int>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.dealerIndex = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.communityCards.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			case 24:
				instance.biggestRaiseThisTurn = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, TexasHoldEm instance, TexasHoldEm previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.dealerIndex != previous.dealerIndex)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.dealerIndex);
		}
		if (instance.communityCards != null)
		{
			for (int i = 0; i < instance.communityCards.Count; i++)
			{
				int num = instance.communityCards[i];
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)num);
			}
		}
		if (instance.biggestRaiseThisTurn != previous.biggestRaiseThisTurn)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.biggestRaiseThisTurn);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, TexasHoldEm instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.dealerIndex != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.dealerIndex);
		}
		if (instance.communityCards != null)
		{
			for (int i = 0; i < instance.communityCards.Count; i++)
			{
				int num = instance.communityCards[i];
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)num);
			}
		}
		if (instance.biggestRaiseThisTurn != 0)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.biggestRaiseThisTurn);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(TexasHoldEm instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, TexasHoldEm instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class RoundResults : IDisposable, IPooled, IProto
{
	public class Result : IDisposable, IPooled, IProto
	{
		[NonSerialized]
		public ulong ID;

		[NonSerialized]
		public int winnings;

		[NonSerialized]
		public int resultCode;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(Result instance)
		{
			if (instance.ShouldPool)
			{
				instance.ID = 0uL;
				instance.winnings = 0;
				instance.resultCode = 0;
				Pool.Free<Result>(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose Result with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(Result instance)
		{
			instance.ID = ID;
			instance.winnings = winnings;
			instance.resultCode = resultCode;
		}

		public Result Copy()
		{
			Result result = Pool.Get<Result>();
			CopyTo(result);
			return result;
		}

		public static Result Deserialize(Stream stream)
		{
			Result result = Pool.Get<Result>();
			Deserialize(stream, result, isDelta: false);
			return result;
		}

		public static Result DeserializeLengthDelimited(Stream stream)
		{
			Result result = Pool.Get<Result>();
			DeserializeLengthDelimited(stream, result, isDelta: false);
			return result;
		}

		public static Result DeserializeLength(Stream stream, int length)
		{
			Result result = Pool.Get<Result>();
			DeserializeLength(stream, length, result, isDelta: false);
			return result;
		}

		public static Result Deserialize(byte[] buffer)
		{
			Result result = Pool.Get<Result>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, result, isDelta: false);
			return result;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, Result previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static Result Deserialize(byte[] buffer, Result instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static Result Deserialize(Stream stream, Result instance, bool isDelta)
		{
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.ID = ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.winnings = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.resultCode = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static Result DeserializeLengthDelimited(Stream stream, Result instance, bool isDelta)
		{
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.ID = ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.winnings = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.resultCode = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static Result DeserializeLength(Stream stream, int length, Result instance, bool isDelta)
		{
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.ID = ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.winnings = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				case 24:
					instance.resultCode = (int)ProtocolParser.ReadUInt64(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, Result instance, Result previous)
		{
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.ID != previous.ID)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, instance.ID);
			}
			if (instance.winnings != previous.winnings)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.winnings);
			}
			if (instance.resultCode != previous.resultCode)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.resultCode);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public static void Serialize(Stream stream, Result instance)
		{
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.ID != 0L)
			{
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, instance.ID);
			}
			if (instance.winnings != 0)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.winnings);
			}
			if (instance.resultCode != 0)
			{
				stream.WriteByte(24);
				ProtocolParser.WriteUInt64(stream, (ulong)instance.resultCode);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(Result instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, Result instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	[NonSerialized]
	public List<Result> results;

	[NonSerialized]
	public int winningScore;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(RoundResults instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.results != null)
		{
			for (int i = 0; i < instance.results.Count; i++)
			{
				if (instance.results[i] != null)
				{
					instance.results[i].ResetToPool();
					instance.results[i] = null;
				}
			}
			List<Result> list = instance.results;
			Pool.Free<Result>(ref list, false);
			instance.results = list;
		}
		instance.winningScore = 0;
		Pool.Free<RoundResults>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose RoundResults with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(RoundResults instance)
	{
		if (results != null)
		{
			instance.results = Pool.Get<List<Result>>();
			for (int i = 0; i < results.Count; i++)
			{
				Result item = results[i].Copy();
				instance.results.Add(item);
			}
		}
		else
		{
			instance.results = null;
		}
		instance.winningScore = winningScore;
	}

	public RoundResults Copy()
	{
		RoundResults roundResults = Pool.Get<RoundResults>();
		CopyTo(roundResults);
		return roundResults;
	}

	public static RoundResults Deserialize(Stream stream)
	{
		RoundResults roundResults = Pool.Get<RoundResults>();
		Deserialize(stream, roundResults, isDelta: false);
		return roundResults;
	}

	public static RoundResults DeserializeLengthDelimited(Stream stream)
	{
		RoundResults roundResults = Pool.Get<RoundResults>();
		DeserializeLengthDelimited(stream, roundResults, isDelta: false);
		return roundResults;
	}

	public static RoundResults DeserializeLength(Stream stream, int length)
	{
		RoundResults roundResults = Pool.Get<RoundResults>();
		DeserializeLength(stream, length, roundResults, isDelta: false);
		return roundResults;
	}

	public static RoundResults Deserialize(byte[] buffer)
	{
		RoundResults roundResults = Pool.Get<RoundResults>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, roundResults, isDelta: false);
		return roundResults;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, RoundResults previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static RoundResults Deserialize(byte[] buffer, RoundResults instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static RoundResults Deserialize(Stream stream, RoundResults instance, bool isDelta)
	{
		if (!isDelta && instance.results == null)
		{
			instance.results = Pool.Get<List<Result>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.results.Add(Result.DeserializeLengthDelimited(stream));
				continue;
			case 16:
				instance.winningScore = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static RoundResults DeserializeLengthDelimited(Stream stream, RoundResults instance, bool isDelta)
	{
		if (!isDelta && instance.results == null)
		{
			instance.results = Pool.Get<List<Result>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.results.Add(Result.DeserializeLengthDelimited(stream));
				continue;
			case 16:
				instance.winningScore = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static RoundResults DeserializeLength(Stream stream, int length, RoundResults instance, bool isDelta)
	{
		if (!isDelta && instance.results == null)
		{
			instance.results = Pool.Get<List<Result>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.results.Add(Result.DeserializeLengthDelimited(stream));
				continue;
			case 16:
				instance.winningScore = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, RoundResults instance, RoundResults previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.results != null)
		{
			for (int i = 0; i < instance.results.Count; i++)
			{
				Result result = instance.results[i];
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				Result.SerializeDelta(memoryStream, result, result);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.winningScore != previous.winningScore)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.winningScore);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, RoundResults instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.results != null)
		{
			for (int i = 0; i < instance.results.Count; i++)
			{
				Result instance2 = instance.results[i];
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				Result.Serialize(memoryStream, instance2);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.winningScore != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.winningScore);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(RoundResults instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, RoundResults instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (results != null)
		{
			for (int i = 0; i < results.Count; i++)
			{
				results[i]?.InspectUids(action);
			}
		}
	}
}


using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class Blackjack : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public List<int> dealerCards;

	[NonSerialized]
	public List<BlackjackCardPlayer> players;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(Blackjack instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.dealerCards != null)
		{
			List<int> list = instance.dealerCards;
			Pool.FreeUnmanaged<int>(ref list);
			instance.dealerCards = list;
		}
		if (instance.players != null)
		{
			for (int i = 0; i < instance.players.Count; i++)
			{
				if (instance.players[i] != null)
				{
					instance.players[i].ResetToPool();
					instance.players[i] = null;
				}
			}
			List<BlackjackCardPlayer> list2 = instance.players;
			Pool.Free<BlackjackCardPlayer>(ref list2, false);
			instance.players = list2;
		}
		Pool.Free<Blackjack>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose Blackjack with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(Blackjack instance)
	{
		if (dealerCards != null)
		{
			instance.dealerCards = Pool.Get<List<int>>();
			for (int i = 0; i < dealerCards.Count; i++)
			{
				int item = dealerCards[i];
				instance.dealerCards.Add(item);
			}
		}
		else
		{
			instance.dealerCards = null;
		}
		if (players != null)
		{
			instance.players = Pool.Get<List<BlackjackCardPlayer>>();
			for (int j = 0; j < players.Count; j++)
			{
				BlackjackCardPlayer item2 = players[j].Copy();
				instance.players.Add(item2);
			}
		}
		else
		{
			instance.players = null;
		}
	}

	public Blackjack Copy()
	{
		Blackjack blackjack = Pool.Get<Blackjack>();
		CopyTo(blackjack);
		return blackjack;
	}

	public static Blackjack Deserialize(Stream stream)
	{
		Blackjack blackjack = Pool.Get<Blackjack>();
		Deserialize(stream, blackjack, isDelta: false);
		return blackjack;
	}

	public static Blackjack DeserializeLengthDelimited(Stream stream)
	{
		Blackjack blackjack = Pool.Get<Blackjack>();
		DeserializeLengthDelimited(stream, blackjack, isDelta: false);
		return blackjack;
	}

	public static Blackjack DeserializeLength(Stream stream, int length)
	{
		Blackjack blackjack = Pool.Get<Blackjack>();
		DeserializeLength(stream, length, blackjack, isDelta: false);
		return blackjack;
	}

	public static Blackjack Deserialize(byte[] buffer)
	{
		Blackjack blackjack = Pool.Get<Blackjack>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, blackjack, isDelta: false);
		return blackjack;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, Blackjack previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static Blackjack Deserialize(byte[] buffer, Blackjack instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static Blackjack Deserialize(Stream stream, Blackjack instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.dealerCards == null)
			{
				instance.dealerCards = Pool.Get<List<int>>();
			}
			if (instance.players == null)
			{
				instance.players = Pool.Get<List<BlackjackCardPlayer>>();
			}
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.dealerCards.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			case 18:
				instance.players.Add(BlackjackCardPlayer.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static Blackjack DeserializeLengthDelimited(Stream stream, Blackjack instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.dealerCards == null)
			{
				instance.dealerCards = Pool.Get<List<int>>();
			}
			if (instance.players == null)
			{
				instance.players = Pool.Get<List<BlackjackCardPlayer>>();
			}
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.dealerCards.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			case 18:
				instance.players.Add(BlackjackCardPlayer.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Blackjack DeserializeLength(Stream stream, int length, Blackjack instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.dealerCards == null)
			{
				instance.dealerCards = Pool.Get<List<int>>();
			}
			if (instance.players == null)
			{
				instance.players = Pool.Get<List<BlackjackCardPlayer>>();
			}
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.dealerCards.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			case 18:
				instance.players.Add(BlackjackCardPlayer.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, Blackjack instance, Blackjack previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.dealerCards != null)
		{
			for (int i = 0; i < instance.dealerCards.Count; i++)
			{
				int num = instance.dealerCards[i];
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)num);
			}
		}
		if (instance.players != null)
		{
			for (int j = 0; j < instance.players.Count; j++)
			{
				BlackjackCardPlayer blackjackCardPlayer = instance.players[j];
				stream.WriteByte(18);
				memoryStream.SetLength(0L);
				BlackjackCardPlayer.SerializeDelta(memoryStream, blackjackCardPlayer, blackjackCardPlayer);
				uint num2 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, Blackjack instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.dealerCards != null)
		{
			for (int i = 0; i < instance.dealerCards.Count; i++)
			{
				int num = instance.dealerCards[i];
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)num);
			}
		}
		if (instance.players != null)
		{
			for (int j = 0; j < instance.players.Count; j++)
			{
				BlackjackCardPlayer instance2 = instance.players[j];
				stream.WriteByte(18);
				memoryStream.SetLength(0L);
				BlackjackCardPlayer.Serialize(memoryStream, instance2);
				uint num2 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(Blackjack instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, Blackjack instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (players != null)
		{
			for (int i = 0; i < players.Count; i++)
			{
				players[i]?.InspectUids(action);
			}
		}
	}
}


