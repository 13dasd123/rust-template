using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class NeonSign : IDisposable, IPooled, IProto
{
	public class Lights : IDisposable, IPooled, IProto
	{
		[NonSerialized]
		public Color topLeft;

		[NonSerialized]
		public Color topRight;

		[NonSerialized]
		public Color bottomLeft;

		[NonSerialized]
		public Color bottomRight;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(Lights instance)
		{
			//IL_000f: Unknown result type (might be due to invalid IL or missing references)
			//IL_001b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0027: Unknown result type (might be due to invalid IL or missing references)
			//IL_0033: Unknown result type (might be due to invalid IL or missing references)
			if (instance.ShouldPool)
			{
				instance.topLeft = default(Color);
				instance.topRight = default(Color);
				instance.bottomLeft = default(Color);
				instance.bottomRight = default(Color);
				Pool.Free<Lights>(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!ShouldPool)
			{
				throw new Exception("Trying to dispose Lights with ShouldPool set to false!");
			}
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public void CopyTo(Lights instance)
		{
			//IL_0002: Unknown result type (might be due to invalid IL or missing references)
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0013: Unknown result type (might be due to invalid IL or missing references)
			//IL_001a: Unknown result type (might be due to invalid IL or missing references)
			//IL_001f: Unknown result type (might be due to invalid IL or missing references)
			//IL_0026: Unknown result type (might be due to invalid IL or missing references)
			//IL_002b: Unknown result type (might be due to invalid IL or missing references)
			instance.topLeft = topLeft;
			instance.topRight = topRight;
			instance.bottomLeft = bottomLeft;
			instance.bottomRight = bottomRight;
		}

		public Lights Copy()
		{
			Lights lights = Pool.Get<Lights>();
			CopyTo(lights);
			return lights;
		}

		public static Lights Deserialize(Stream stream)
		{
			Lights lights = Pool.Get<Lights>();
			Deserialize(stream, lights, isDelta: false);
			return lights;
		}

		public static Lights DeserializeLengthDelimited(Stream stream)
		{
			Lights lights = Pool.Get<Lights>();
			DeserializeLengthDelimited(stream, lights, isDelta: false);
			return lights;
		}

		public static Lights DeserializeLength(Stream stream, int length)
		{
			Lights lights = Pool.Get<Lights>();
			DeserializeLength(stream, length, lights, isDelta: false);
			return lights;
		}

		public static Lights Deserialize(byte[] buffer)
		{
			Lights lights = Pool.Get<Lights>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, lights, isDelta: false);
			return lights;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, Lights previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public static Lights Deserialize(byte[] buffer, Lights instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static Lights Deserialize(Stream stream, Lights instance, bool isDelta)
		{
			//IL_0055: Unknown result type (might be due to invalid IL or missing references)
			//IL_0035: Unknown result type (might be due to invalid IL or missing references)
			//IL_0065: Unknown result type (might be due to invalid IL or missing references)
			//IL_0045: Unknown result type (might be due to invalid IL or missing references)
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 10:
					ColorSerialized.DeserializeLengthDelimited(stream, ref instance.topLeft, isDelta);
					continue;
				case 18:
					ColorSerialized.DeserializeLengthDelimited(stream, ref instance.topRight, isDelta);
					continue;
				case 26:
					ColorSerialized.DeserializeLengthDelimited(stream, ref instance.bottomLeft, isDelta);
					continue;
				case 34:
					ColorSerialized.DeserializeLengthDelimited(stream, ref instance.bottomRight, isDelta);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static Lights DeserializeLengthDelimited(Stream stream, Lights instance, bool isDelta)
		{
			//IL_0089: Unknown result type (might be due to invalid IL or missing references)
			//IL_0069: Unknown result type (might be due to invalid IL or missing references)
			//IL_0099: Unknown result type (might be due to invalid IL or missing references)
			//IL_0079: Unknown result type (might be due to invalid IL or missing references)
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					ColorSerialized.DeserializeLengthDelimited(stream, ref instance.topLeft, isDelta);
					continue;
				case 18:
					ColorSerialized.DeserializeLengthDelimited(stream, ref instance.topRight, isDelta);
					continue;
				case 26:
					ColorSerialized.DeserializeLengthDelimited(stream, ref instance.bottomLeft, isDelta);
					continue;
				case 34:
					ColorSerialized.DeserializeLengthDelimited(stream, ref instance.bottomRight, isDelta);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static Lights DeserializeLength(Stream stream, int length, Lights instance, bool isDelta)
		{
			//IL_0082: Unknown result type (might be due to invalid IL or missing references)
			//IL_0062: Unknown result type (might be due to invalid IL or missing references)
			//IL_0092: Unknown result type (might be due to invalid IL or missing references)
			//IL_0072: Unknown result type (might be due to invalid IL or missing references)
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					ColorSerialized.DeserializeLengthDelimited(stream, ref instance.topLeft, isDelta);
					continue;
				case 18:
					ColorSerialized.DeserializeLengthDelimited(stream, ref instance.topRight, isDelta);
					continue;
				case 26:
					ColorSerialized.DeserializeLengthDelimited(stream, ref instance.bottomLeft, isDelta);
					continue;
				case 34:
					ColorSerialized.DeserializeLengthDelimited(stream, ref instance.bottomRight, isDelta);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, Lights instance, Lights previous)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0059: Unknown result type (might be due to invalid IL or missing references)
			//IL_005f: Unknown result type (might be due to invalid IL or missing references)
			//IL_002b: Unknown result type (might be due to invalid IL or missing references)
			//IL_0031: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
			//IL_007d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0083: Unknown result type (might be due to invalid IL or missing references)
			//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
			//IL_0103: Unknown result type (might be due to invalid IL or missing references)
			//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
			//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
			//IL_0121: Unknown result type (might be due to invalid IL or missing references)
			//IL_0127: Unknown result type (might be due to invalid IL or missing references)
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.topLeft != previous.topLeft)
			{
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				ColorSerialized.SerializeDelta(memoryStream, instance.topLeft, previous.topLeft);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
			if (instance.topRight != previous.topRight)
			{
				stream.WriteByte(18);
				memoryStream.SetLength(0L);
				ColorSerialized.SerializeDelta(memoryStream, instance.topRight, previous.topRight);
				uint num2 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
			}
			if (instance.bottomLeft != previous.bottomLeft)
			{
				stream.WriteByte(26);
				memoryStream.SetLength(0L);
				ColorSerialized.SerializeDelta(memoryStream, instance.bottomLeft, previous.bottomLeft);
				uint num3 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num3);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num3);
			}
			if (instance.bottomRight != previous.bottomRight)
			{
				stream.WriteByte(34);
				memoryStream.SetLength(0L);
				ColorSerialized.SerializeDelta(memoryStream, instance.bottomRight, previous.bottomRight);
				uint num4 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num4);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num4);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public static void Serialize(Stream stream, Lights instance)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0014: Unknown result type (might be due to invalid IL or missing references)
			//IL_0056: Unknown result type (might be due to invalid IL or missing references)
			//IL_005d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0063: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
			//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
			//IL_007d: Unknown result type (might be due to invalid IL or missing references)
			//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
			//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
			//IL_0104: Unknown result type (might be due to invalid IL or missing references)
			//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
			//IL_011e: Unknown result type (might be due to invalid IL or missing references)
			MemoryStream memoryStream = Pool.Get<MemoryStream>();
			if (instance.topLeft != default(Color))
			{
				stream.WriteByte(10);
				memoryStream.SetLength(0L);
				ColorSerialized.Serialize(memoryStream, instance.topLeft);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
			if (instance.topRight != default(Color))
			{
				stream.WriteByte(18);
				memoryStream.SetLength(0L);
				ColorSerialized.Serialize(memoryStream, instance.topRight);
				uint num2 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
			}
			if (instance.bottomLeft != default(Color))
			{
				stream.WriteByte(26);
				memoryStream.SetLength(0L);
				ColorSerialized.Serialize(memoryStream, instance.bottomLeft);
				uint num3 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num3);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num3);
			}
			if (instance.bottomRight != default(Color))
			{
				stream.WriteByte(34);
				memoryStream.SetLength(0L);
				ColorSerialized.Serialize(memoryStream, instance.bottomRight);
				uint num4 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num4);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num4);
			}
			Pool.FreeUnmanaged(ref memoryStream);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(Lights instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, Lights instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}

		public void InspectUids(UidInspector<ulong> action)
		{
		}
	}

	[NonSerialized]
	public List<Lights> frameLighting;

	[NonSerialized]
	public int currentFrame;

	[NonSerialized]
	public float animationSpeed;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(NeonSign instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.frameLighting != null)
		{
			for (int i = 0; i < instance.frameLighting.Count; i++)
			{
				if (instance.frameLighting[i] != null)
				{
					instance.frameLighting[i].ResetToPool();
					instance.frameLighting[i] = null;
				}
			}
			List<Lights> list = instance.frameLighting;
			Pool.Free<Lights>(ref list, false);
			instance.frameLighting = list;
		}
		instance.currentFrame = 0;
		instance.animationSpeed = 0f;
		Pool.Free<NeonSign>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose NeonSign with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(NeonSign instance)
	{
		if (frameLighting != null)
		{
			instance.frameLighting = Pool.Get<List<Lights>>();
			for (int i = 0; i < frameLighting.Count; i++)
			{
				Lights item = frameLighting[i].Copy();
				instance.frameLighting.Add(item);
			}
		}
		else
		{
			instance.frameLighting = null;
		}
		instance.currentFrame = currentFrame;
		instance.animationSpeed = animationSpeed;
	}

	public NeonSign Copy()
	{
		NeonSign neonSign = Pool.Get<NeonSign>();
		CopyTo(neonSign);
		return neonSign;
	}

	public static NeonSign Deserialize(Stream stream)
	{
		NeonSign neonSign = Pool.Get<NeonSign>();
		Deserialize(stream, neonSign, isDelta: false);
		return neonSign;
	}

	public static NeonSign DeserializeLengthDelimited(Stream stream)
	{
		NeonSign neonSign = Pool.Get<NeonSign>();
		DeserializeLengthDelimited(stream, neonSign, isDelta: false);
		return neonSign;
	}

	public static NeonSign DeserializeLength(Stream stream, int length)
	{
		NeonSign neonSign = Pool.Get<NeonSign>();
		DeserializeLength(stream, length, neonSign, isDelta: false);
		return neonSign;
	}

	public static NeonSign Deserialize(byte[] buffer)
	{
		NeonSign neonSign = Pool.Get<NeonSign>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, neonSign, isDelta: false);
		return neonSign;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, NeonSign previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static NeonSign Deserialize(byte[] buffer, NeonSign instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static NeonSign Deserialize(Stream stream, NeonSign instance, bool isDelta)
	{
		if (!isDelta && instance.frameLighting == null)
		{
			instance.frameLighting = Pool.Get<List<Lights>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 42:
				instance.frameLighting.Add(Lights.DeserializeLengthDelimited(stream));
				continue;
			case 48:
				instance.currentFrame = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 61:
				instance.animationSpeed = ProtocolParser.ReadSingle(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static NeonSign DeserializeLengthDelimited(Stream stream, NeonSign instance, bool isDelta)
	{
		if (!isDelta && instance.frameLighting == null)
		{
			instance.frameLighting = Pool.Get<List<Lights>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 42:
				instance.frameLighting.Add(Lights.DeserializeLengthDelimited(stream));
				continue;
			case 48:
				instance.currentFrame = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 61:
				instance.animationSpeed = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static NeonSign DeserializeLength(Stream stream, int length, NeonSign instance, bool isDelta)
	{
		if (!isDelta && instance.frameLighting == null)
		{
			instance.frameLighting = Pool.Get<List<Lights>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 42:
				instance.frameLighting.Add(Lights.DeserializeLengthDelimited(stream));
				continue;
			case 48:
				instance.currentFrame = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 61:
				instance.animationSpeed = ProtocolParser.ReadSingle(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, NeonSign instance, NeonSign previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.frameLighting != null)
		{
			for (int i = 0; i < instance.frameLighting.Count; i++)
			{
				Lights lights = instance.frameLighting[i];
				stream.WriteByte(42);
				memoryStream.SetLength(0L);
				Lights.SerializeDelta(memoryStream, lights, lights);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.currentFrame != previous.currentFrame)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.currentFrame);
		}
		if (instance.animationSpeed != previous.animationSpeed)
		{
			stream.WriteByte(61);
			ProtocolParser.WriteSingle(stream, instance.animationSpeed);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, NeonSign instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.frameLighting != null)
		{
			for (int i = 0; i < instance.frameLighting.Count; i++)
			{
				Lights instance2 = instance.frameLighting[i];
				stream.WriteByte(42);
				memoryStream.SetLength(0L);
				Lights.Serialize(memoryStream, instance2);
				uint num = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.currentFrame != 0)
		{
			stream.WriteByte(48);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.currentFrame);
		}
		if (instance.animationSpeed != 0f)
		{
			stream.WriteByte(61);
			ProtocolParser.WriteSingle(stream, instance.animationSpeed);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(NeonSign instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, NeonSign instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (frameLighting != null)
		{
			for (int i = 0; i < frameLighting.Count; i++)
			{
				frameLighting[i]?.InspectUids(action);
			}
		}
	}
}
