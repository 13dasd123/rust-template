using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class Blackjack : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public List<int> dealerCards;

	[NonSerialized]
	public List<BlackjackCardPlayer> players;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(Blackjack instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.dealerCards != null)
		{
			List<int> list = instance.dealerCards;
			Pool.FreeUnmanaged<int>(ref list);
			instance.dealerCards = list;
		}
		if (instance.players != null)
		{
			for (int i = 0; i < instance.players.Count; i++)
			{
				if (instance.players[i] != null)
				{
					instance.players[i].ResetToPool();
					instance.players[i] = null;
				}
			}
			List<BlackjackCardPlayer> list2 = instance.players;
			Pool.Free<BlackjackCardPlayer>(ref list2, false);
			instance.players = list2;
		}
		Pool.Free<Blackjack>(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose Blackjack with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(Blackjack instance)
	{
		if (dealerCards != null)
		{
			instance.dealerCards = Pool.Get<List<int>>();
			for (int i = 0; i < dealerCards.Count; i++)
			{
				int item = dealerCards[i];
				instance.dealerCards.Add(item);
			}
		}
		else
		{
			instance.dealerCards = null;
		}
		if (players != null)
		{
			instance.players = Pool.Get<List<BlackjackCardPlayer>>();
			for (int j = 0; j < players.Count; j++)
			{
				BlackjackCardPlayer item2 = players[j].Copy();
				instance.players.Add(item2);
			}
		}
		else
		{
			instance.players = null;
		}
	}

	public Blackjack Copy()
	{
		Blackjack blackjack = Pool.Get<Blackjack>();
		CopyTo(blackjack);
		return blackjack;
	}

	public static Blackjack Deserialize(Stream stream)
	{
		Blackjack blackjack = Pool.Get<Blackjack>();
		Deserialize(stream, blackjack, isDelta: false);
		return blackjack;
	}

	public static Blackjack DeserializeLengthDelimited(Stream stream)
	{
		Blackjack blackjack = Pool.Get<Blackjack>();
		DeserializeLengthDelimited(stream, blackjack, isDelta: false);
		return blackjack;
	}

	public static Blackjack DeserializeLength(Stream stream, int length)
	{
		Blackjack blackjack = Pool.Get<Blackjack>();
		DeserializeLength(stream, length, blackjack, isDelta: false);
		return blackjack;
	}

	public static Blackjack Deserialize(byte[] buffer)
	{
		Blackjack blackjack = Pool.Get<Blackjack>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, blackjack, isDelta: false);
		return blackjack;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, Blackjack previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static Blackjack Deserialize(byte[] buffer, Blackjack instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static Blackjack Deserialize(Stream stream, Blackjack instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.dealerCards == null)
			{
				instance.dealerCards = Pool.Get<List<int>>();
			}
			if (instance.players == null)
			{
				instance.players = Pool.Get<List<BlackjackCardPlayer>>();
			}
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.dealerCards.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			case 18:
				instance.players.Add(BlackjackCardPlayer.DeserializeLengthDelimited(stream));
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static Blackjack DeserializeLengthDelimited(Stream stream, Blackjack instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.dealerCards == null)
			{
				instance.dealerCards = Pool.Get<List<int>>();
			}
			if (instance.players == null)
			{
				instance.players = Pool.Get<List<BlackjackCardPlayer>>();
			}
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.dealerCards.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			case 18:
				instance.players.Add(BlackjackCardPlayer.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Blackjack DeserializeLength(Stream stream, int length, Blackjack instance, bool isDelta)
	{
		if (!isDelta)
		{
			if (instance.dealerCards == null)
			{
				instance.dealerCards = Pool.Get<List<int>>();
			}
			if (instance.players == null)
			{
				instance.players = Pool.Get<List<BlackjackCardPlayer>>();
			}
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.dealerCards.Add((int)ProtocolParser.ReadUInt64(stream));
				continue;
			case 18:
				instance.players.Add(BlackjackCardPlayer.DeserializeLengthDelimited(stream));
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, Blackjack instance, Blackjack previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.dealerCards != null)
		{
			for (int i = 0; i < instance.dealerCards.Count; i++)
			{
				int num = instance.dealerCards[i];
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)num);
			}
		}
		if (instance.players != null)
		{
			for (int j = 0; j < instance.players.Count; j++)
			{
				BlackjackCardPlayer blackjackCardPlayer = instance.players[j];
				stream.WriteByte(18);
				memoryStream.SetLength(0L);
				BlackjackCardPlayer.SerializeDelta(memoryStream, blackjackCardPlayer, blackjackCardPlayer);
				uint num2 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, Blackjack instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.dealerCards != null)
		{
			for (int i = 0; i < instance.dealerCards.Count; i++)
			{
				int num = instance.dealerCards[i];
				stream.WriteByte(8);
				ProtocolParser.WriteUInt64(stream, (ulong)num);
			}
		}
		if (instance.players != null)
		{
			for (int j = 0; j < instance.players.Count; j++)
			{
				BlackjackCardPlayer instance2 = instance.players[j];
				stream.WriteByte(18);
				memoryStream.SetLength(0L);
				BlackjackCardPlayer.Serialize(memoryStream, instance2);
				uint num2 = (uint)memoryStream.Length;
				ProtocolParser.WriteUInt32(stream, num2);
				stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
			}
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(Blackjack instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, Blackjack instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
		if (players != null)
		{
			for (int i = 0; i < players.Count; i++)
			{
				players[i]?.InspectUids(action);
			}
		}
	}
}
