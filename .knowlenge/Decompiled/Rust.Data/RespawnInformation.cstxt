using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class RespawnInformation : IDisposable, Pool.IPooled, IProto
{
	public class SpawnOptions : IDisposable, Pool.IPooled, IProto
	{
		public enum RespawnType
		{
			SleepingBag = 1,
			Bed
		}

		[NonSerialized]
		public RespawnType type;

		[NonSerialized]
		public uint id;

		[NonSerialized]
		public string name;

		[NonSerialized]
		public float unlockSeconds;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(SpawnOptions instance)
		{
			if (instance.ShouldPool)
			{
				instance.type = (RespawnType)0;
				instance.id = 0u;
				instance.name = string.Empty;
				instance.unlockSeconds = 0f;
				Pool.Free(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, SpawnOptions previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public void CopyTo(SpawnOptions instance)
		{
			instance.type = type;
			instance.id = id;
			instance.name = name;
			instance.unlockSeconds = unlockSeconds;
		}

		public SpawnOptions Copy()
		{
			SpawnOptions spawnOptions = Pool.Get<SpawnOptions>();
			CopyTo(spawnOptions);
			return spawnOptions;
		}

		public static SpawnOptions Deserialize(Stream stream)
		{
			SpawnOptions spawnOptions = Pool.Get<SpawnOptions>();
			Deserialize(stream, spawnOptions, isDelta: false);
			return spawnOptions;
		}

		public static SpawnOptions DeserializeLengthDelimited(Stream stream)
		{
			SpawnOptions spawnOptions = Pool.Get<SpawnOptions>();
			DeserializeLengthDelimited(stream, spawnOptions, isDelta: false);
			return spawnOptions;
		}

		public static SpawnOptions DeserializeLength(Stream stream, int length)
		{
			SpawnOptions spawnOptions = Pool.Get<SpawnOptions>();
			DeserializeLength(stream, length, spawnOptions, isDelta: false);
			return spawnOptions;
		}

		public static SpawnOptions Deserialize(byte[] buffer)
		{
			SpawnOptions spawnOptions = Pool.Get<SpawnOptions>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, spawnOptions, isDelta: false);
			return spawnOptions;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public static SpawnOptions Deserialize(byte[] buffer, SpawnOptions instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static SpawnOptions Deserialize(Stream stream, SpawnOptions instance, bool isDelta)
		{
			if (!isDelta)
			{
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 8:
					instance.type = (RespawnType)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.id = ProtocolParser.ReadUInt32(stream);
					continue;
				case 26:
					instance.name = ProtocolParser.ReadString(stream);
					continue;
				case 37:
					instance.unlockSeconds = ProtocolParser.ReadSingle(stream);
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static SpawnOptions DeserializeLengthDelimited(Stream stream, SpawnOptions instance, bool isDelta)
		{
			if (!isDelta)
			{
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.type = (RespawnType)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.id = ProtocolParser.ReadUInt32(stream);
					continue;
				case 26:
					instance.name = ProtocolParser.ReadString(stream);
					continue;
				case 37:
					instance.unlockSeconds = ProtocolParser.ReadSingle(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static SpawnOptions DeserializeLength(Stream stream, int length, SpawnOptions instance, bool isDelta)
		{
			if (!isDelta)
			{
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 8:
					instance.type = (RespawnType)ProtocolParser.ReadUInt64(stream);
					continue;
				case 16:
					instance.id = ProtocolParser.ReadUInt32(stream);
					continue;
				case 26:
					instance.name = ProtocolParser.ReadString(stream);
					continue;
				case 37:
					instance.unlockSeconds = ProtocolParser.ReadSingle(stream);
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, SpawnOptions instance, SpawnOptions previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.type);
			if (instance.id != previous.id)
			{
				stream.WriteByte(16);
				ProtocolParser.WriteUInt32(stream, instance.id);
			}
			if (instance.name != previous.name)
			{
				if (instance.name == null)
				{
					throw new ArgumentNullException("name", "Required by proto specification.");
				}
				stream.WriteByte(26);
				ProtocolParser.WriteString(stream, instance.name);
			}
			if (instance.unlockSeconds != previous.unlockSeconds)
			{
				stream.WriteByte(37);
				ProtocolParser.WriteSingle(stream, instance.unlockSeconds);
			}
			Pool.FreeMemoryStream(ref obj);
		}

		public static void Serialize(Stream stream, SpawnOptions instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.type);
			stream.WriteByte(16);
			ProtocolParser.WriteUInt32(stream, instance.id);
			if (instance.name == null)
			{
				throw new ArgumentNullException("name", "Required by proto specification.");
			}
			stream.WriteByte(26);
			ProtocolParser.WriteString(stream, instance.name);
			stream.WriteByte(37);
			ProtocolParser.WriteSingle(stream, instance.unlockSeconds);
			Pool.FreeMemoryStream(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(SpawnOptions instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, SpawnOptions instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}
	}

	[NonSerialized]
	public List<SpawnOptions> spawnOptions;

	[NonSerialized]
	public PlayerLifeStory previousLife;

	[NonSerialized]
	public bool fadeIn;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(RespawnInformation instance)
	{
		if (!instance.ShouldPool)
		{
			return;
		}
		if (instance.spawnOptions != null)
		{
			for (int i = 0; i < instance.spawnOptions.Count; i++)
			{
				if (instance.spawnOptions[i] != null)
				{
					instance.spawnOptions[i].ResetToPool();
					instance.spawnOptions[i] = null;
				}
			}
			List<SpawnOptions> obj = instance.spawnOptions;
			Pool.FreeList(ref obj);
			instance.spawnOptions = obj;
		}
		if (instance.previousLife != null)
		{
			instance.previousLife.ResetToPool();
			instance.previousLife = null;
		}
		instance.fadeIn = false;
		Pool.Free(ref instance);
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, RespawnInformation previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public void CopyTo(RespawnInformation instance)
	{
		throw new NotImplementedException();
	}

	public RespawnInformation Copy()
	{
		RespawnInformation respawnInformation = Pool.Get<RespawnInformation>();
		CopyTo(respawnInformation);
		return respawnInformation;
	}

	public static RespawnInformation Deserialize(Stream stream)
	{
		RespawnInformation respawnInformation = Pool.Get<RespawnInformation>();
		Deserialize(stream, respawnInformation, isDelta: false);
		return respawnInformation;
	}

	public static RespawnInformation DeserializeLengthDelimited(Stream stream)
	{
		RespawnInformation respawnInformation = Pool.Get<RespawnInformation>();
		DeserializeLengthDelimited(stream, respawnInformation, isDelta: false);
		return respawnInformation;
	}

	public static RespawnInformation DeserializeLength(Stream stream, int length)
	{
		RespawnInformation respawnInformation = Pool.Get<RespawnInformation>();
		DeserializeLength(stream, length, respawnInformation, isDelta: false);
		return respawnInformation;
	}

	public static RespawnInformation Deserialize(byte[] buffer)
	{
		RespawnInformation respawnInformation = Pool.Get<RespawnInformation>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, respawnInformation, isDelta: false);
		return respawnInformation;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public static RespawnInformation Deserialize(byte[] buffer, RespawnInformation instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static RespawnInformation Deserialize(Stream stream, RespawnInformation instance, bool isDelta)
	{
		if (!isDelta && instance.spawnOptions == null)
		{
			instance.spawnOptions = Pool.Get<List<SpawnOptions>>();
		}
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.spawnOptions.Add(SpawnOptions.DeserializeLengthDelimited(stream));
				continue;
			case 18:
				if (instance.previousLife == null)
				{
					instance.previousLife = PlayerLifeStory.DeserializeLengthDelimited(stream);
				}
				else
				{
					PlayerLifeStory.DeserializeLengthDelimited(stream, instance.previousLife, isDelta);
				}
				continue;
			case 24:
				instance.fadeIn = ProtocolParser.ReadBool(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static RespawnInformation DeserializeLengthDelimited(Stream stream, RespawnInformation instance, bool isDelta)
	{
		if (!isDelta && instance.spawnOptions == null)
		{
			instance.spawnOptions = Pool.Get<List<SpawnOptions>>();
		}
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.spawnOptions.Add(SpawnOptions.DeserializeLengthDelimited(stream));
				continue;
			case 18:
				if (instance.previousLife == null)
				{
					instance.previousLife = PlayerLifeStory.DeserializeLengthDelimited(stream);
				}
				else
				{
					PlayerLifeStory.DeserializeLengthDelimited(stream, instance.previousLife, isDelta);
				}
				continue;
			case 24:
				instance.fadeIn = ProtocolParser.ReadBool(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static RespawnInformation DeserializeLength(Stream stream, int length, RespawnInformation instance, bool isDelta)
	{
		if (!isDelta && instance.spawnOptions == null)
		{
			instance.spawnOptions = Pool.Get<List<SpawnOptions>>();
		}
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.spawnOptions.Add(SpawnOptions.DeserializeLengthDelimited(stream));
				continue;
			case 18:
				if (instance.previousLife == null)
				{
					instance.previousLife = PlayerLifeStory.DeserializeLengthDelimited(stream);
				}
				else
				{
					PlayerLifeStory.DeserializeLengthDelimited(stream, instance.previousLife, isDelta);
				}
				continue;
			case 24:
				instance.fadeIn = ProtocolParser.ReadBool(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, RespawnInformation instance, RespawnInformation previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.spawnOptions != null)
		{
			for (int i = 0; i < instance.spawnOptions.Count; i++)
			{
				SpawnOptions spawnOptions = instance.spawnOptions[i];
				stream.WriteByte(10);
				obj.SetLength(0L);
				SpawnOptions.SerializeDelta(obj, spawnOptions, spawnOptions);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.previousLife != null)
		{
			stream.WriteByte(18);
			obj.SetLength(0L);
			PlayerLifeStory.SerializeDelta(obj, instance.previousLife, previous.previousLife);
			uint num2 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(obj.GetBuffer(), 0, (int)num2);
		}
		stream.WriteByte(24);
		ProtocolParser.WriteBool(stream, instance.fadeIn);
		Pool.FreeMemoryStream(ref obj);
	}

	public static void Serialize(Stream stream, RespawnInformation instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.spawnOptions != null)
		{
			for (int i = 0; i < instance.spawnOptions.Count; i++)
			{
				SpawnOptions instance2 = instance.spawnOptions[i];
				stream.WriteByte(10);
				obj.SetLength(0L);
				SpawnOptions.Serialize(obj, instance2);
				uint num = (uint)obj.Length;
				ProtocolParser.WriteUInt32(stream, num);
				stream.Write(obj.GetBuffer(), 0, (int)num);
			}
		}
		if (instance.previousLife != null)
		{
			stream.WriteByte(18);
			obj.SetLength(0L);
			PlayerLifeStory.Serialize(obj, instance.previousLife);
			uint num2 = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(obj.GetBuffer(), 0, (int)num2);
		}
		stream.WriteByte(24);
		ProtocolParser.WriteBool(stream, instance.fadeIn);
		Pool.FreeMemoryStream(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(RespawnInformation instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, RespawnInformation instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}
}
