using System;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public class LinePointList : IDisposable, IPooled, IProto
{
	[NonSerialized]
	public Vector4 a;

	[NonSerialized]
	public Vector4 b;

	[NonSerialized]
	public Vector4 c;

	[NonSerialized]
	public Vector4 d;

	[NonSerialized]
	public Vector4 e;

	[NonSerialized]
	public Vector4 f;

	[NonSerialized]
	public Vector4 g;

	[NonSerialized]
	public Vector4 h;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(LinePointList instance)
	{
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		if (instance.ShouldPool)
		{
			instance.a = default(Vector4);
			instance.b = default(Vector4);
			instance.c = default(Vector4);
			instance.d = default(Vector4);
			instance.e = default(Vector4);
			instance.f = default(Vector4);
			instance.g = default(Vector4);
			instance.h = default(Vector4);
			Pool.Free<LinePointList>(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose LinePointList with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(LinePointList instance)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		instance.a = a;
		instance.b = b;
		instance.c = c;
		instance.d = d;
		instance.e = e;
		instance.f = f;
		instance.g = g;
		instance.h = h;
	}

	public LinePointList Copy()
	{
		LinePointList linePointList = Pool.Get<LinePointList>();
		CopyTo(linePointList);
		return linePointList;
	}

	public static LinePointList Deserialize(Stream stream)
	{
		LinePointList linePointList = Pool.Get<LinePointList>();
		Deserialize(stream, linePointList, isDelta: false);
		return linePointList;
	}

	public static LinePointList DeserializeLengthDelimited(Stream stream)
	{
		LinePointList linePointList = Pool.Get<LinePointList>();
		DeserializeLengthDelimited(stream, linePointList, isDelta: false);
		return linePointList;
	}

	public static LinePointList DeserializeLength(Stream stream, int length)
	{
		LinePointList linePointList = Pool.Get<LinePointList>();
		DeserializeLength(stream, length, linePointList, isDelta: false);
		return linePointList;
	}

	public static LinePointList Deserialize(byte[] buffer)
	{
		LinePointList linePointList = Pool.Get<LinePointList>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, linePointList, isDelta: false);
		return linePointList;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, LinePointList previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static LinePointList Deserialize(byte[] buffer, LinePointList instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static LinePointList Deserialize(Stream stream, LinePointList instance, bool isDelta)
	{
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.a, isDelta);
				continue;
			case 18:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.b, isDelta);
				continue;
			case 26:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.c, isDelta);
				continue;
			case 34:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.d, isDelta);
				continue;
			case 42:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.e, isDelta);
				continue;
			case 50:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.f, isDelta);
				continue;
			case 58:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.g, isDelta);
				continue;
			case 66:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.h, isDelta);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static LinePointList DeserializeLengthDelimited(Stream stream, LinePointList instance, bool isDelta)
	{
		//IL_010c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.a, isDelta);
				continue;
			case 18:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.b, isDelta);
				continue;
			case 26:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.c, isDelta);
				continue;
			case 34:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.d, isDelta);
				continue;
			case 42:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.e, isDelta);
				continue;
			case 50:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.f, isDelta);
				continue;
			case 58:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.g, isDelta);
				continue;
			case 66:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.h, isDelta);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static LinePointList DeserializeLength(Stream stream, int length, LinePointList instance, bool isDelta)
	{
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_00df: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_0118: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.a, isDelta);
				continue;
			case 18:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.b, isDelta);
				continue;
			case 26:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.c, isDelta);
				continue;
			case 34:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.d, isDelta);
				continue;
			case 42:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.e, isDelta);
				continue;
			case 50:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.f, isDelta);
				continue;
			case 58:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.g, isDelta);
				continue;
			case 66:
				Vector4Serialized.DeserializeLengthDelimited(stream, ref instance.h, isDelta);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, LinePointList instance, LinePointList previous)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_0152: Unknown result type (might be due to invalid IL or missing references)
		//IL_0158: Unknown result type (might be due to invalid IL or missing references)
		//IL_0121: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_0176: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0202: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0251: Unknown result type (might be due to invalid IL or missing references)
		//IL_0257: Unknown result type (might be due to invalid IL or missing references)
		//IL_0220: Unknown result type (might be due to invalid IL or missing references)
		//IL_0226: Unknown result type (might be due to invalid IL or missing references)
		//IL_0275: Unknown result type (might be due to invalid IL or missing references)
		//IL_027b: Unknown result type (might be due to invalid IL or missing references)
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.a != previous.a)
		{
			stream.WriteByte(10);
			memoryStream.SetLength(0L);
			Vector4Serialized.SerializeDelta(memoryStream, instance.a, previous.a);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		if (instance.b != previous.b)
		{
			stream.WriteByte(18);
			memoryStream.SetLength(0L);
			Vector4Serialized.SerializeDelta(memoryStream, instance.b, previous.b);
			uint num2 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
		}
		if (instance.c != previous.c)
		{
			stream.WriteByte(26);
			memoryStream.SetLength(0L);
			Vector4Serialized.SerializeDelta(memoryStream, instance.c, previous.c);
			uint num3 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num3);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num3);
		}
		if (instance.d != previous.d)
		{
			stream.WriteByte(34);
			memoryStream.SetLength(0L);
			Vector4Serialized.SerializeDelta(memoryStream, instance.d, previous.d);
			uint num4 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num4);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num4);
		}
		if (instance.e != previous.e)
		{
			stream.WriteByte(42);
			memoryStream.SetLength(0L);
			Vector4Serialized.SerializeDelta(memoryStream, instance.e, previous.e);
			uint num5 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num5);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num5);
		}
		if (instance.f != previous.f)
		{
			stream.WriteByte(50);
			memoryStream.SetLength(0L);
			Vector4Serialized.SerializeDelta(memoryStream, instance.f, previous.f);
			uint num6 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num6);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num6);
		}
		if (instance.g != previous.g)
		{
			stream.WriteByte(58);
			memoryStream.SetLength(0L);
			Vector4Serialized.SerializeDelta(memoryStream, instance.g, previous.g);
			uint num7 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num7);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num7);
		}
		if (instance.h != previous.h)
		{
			stream.WriteByte(66);
			memoryStream.SetLength(0L);
			Vector4Serialized.SerializeDelta(memoryStream, instance.h, previous.h);
			uint num8 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num8);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num8);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, LinePointList instance)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_0104: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0149: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_0156: Unknown result type (might be due to invalid IL or missing references)
		//IL_011e: Unknown result type (might be due to invalid IL or missing references)
		//IL_019b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0170: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_023f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0246: Unknown result type (might be due to invalid IL or missing references)
		//IL_024c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0214: Unknown result type (might be due to invalid IL or missing references)
		//IL_0266: Unknown result type (might be due to invalid IL or missing references)
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (instance.a != default(Vector4))
		{
			stream.WriteByte(10);
			memoryStream.SetLength(0L);
			Vector4Serialized.Serialize(memoryStream, instance.a);
			uint num = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num);
		}
		if (instance.b != default(Vector4))
		{
			stream.WriteByte(18);
			memoryStream.SetLength(0L);
			Vector4Serialized.Serialize(memoryStream, instance.b);
			uint num2 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num2);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num2);
		}
		if (instance.c != default(Vector4))
		{
			stream.WriteByte(26);
			memoryStream.SetLength(0L);
			Vector4Serialized.Serialize(memoryStream, instance.c);
			uint num3 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num3);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num3);
		}
		if (instance.d != default(Vector4))
		{
			stream.WriteByte(34);
			memoryStream.SetLength(0L);
			Vector4Serialized.Serialize(memoryStream, instance.d);
			uint num4 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num4);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num4);
		}
		if (instance.e != default(Vector4))
		{
			stream.WriteByte(42);
			memoryStream.SetLength(0L);
			Vector4Serialized.Serialize(memoryStream, instance.e);
			uint num5 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num5);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num5);
		}
		if (instance.f != default(Vector4))
		{
			stream.WriteByte(50);
			memoryStream.SetLength(0L);
			Vector4Serialized.Serialize(memoryStream, instance.f);
			uint num6 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num6);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num6);
		}
		if (instance.g != default(Vector4))
		{
			stream.WriteByte(58);
			memoryStream.SetLength(0L);
			Vector4Serialized.Serialize(memoryStream, instance.g);
			uint num7 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num7);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num7);
		}
		if (instance.h != default(Vector4))
		{
			stream.WriteByte(66);
			memoryStream.SetLength(0L);
			Vector4Serialized.Serialize(memoryStream, instance.h);
			uint num8 = (uint)memoryStream.Length;
			ProtocolParser.WriteUInt32(stream, num8);
			stream.Write(memoryStream.GetBuffer(), 0, (int)num8);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(LinePointList instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, LinePointList instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}
