using System;
using System.IO;
using Facepunch;
using SilentOrbit.ProtocolBuffers;

public class InstanceData : IDisposable, Pool.IPooled, IProto
{
	public bool ShouldPool = true;

	private bool _disposed;

	[NonSerialized]
	public int dataInt;

	[NonSerialized]
	public int blueprintTarget;

	[NonSerialized]
	public int blueprintAmount;

	[NonSerialized]
	public uint subEntity;

	public static void ResetToPool(InstanceData instance)
	{
		if (instance.ShouldPool)
		{
			instance.dataInt = 0;
			instance.blueprintTarget = 0;
			instance.blueprintAmount = 0;
			instance.subEntity = 0u;
			Pool.Free(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!ShouldPool)
		{
			throw new Exception("Trying to dispose InstanceData with ShouldPool set to false!");
		}
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public void CopyTo(InstanceData instance)
	{
		instance.dataInt = dataInt;
		instance.blueprintTarget = blueprintTarget;
		instance.blueprintAmount = blueprintAmount;
		instance.subEntity = subEntity;
	}

	public InstanceData Copy()
	{
		InstanceData instanceData = Pool.Get<InstanceData>();
		CopyTo(instanceData);
		return instanceData;
	}

	public static InstanceData Deserialize(Stream stream)
	{
		InstanceData instanceData = Pool.Get<InstanceData>();
		Deserialize(stream, instanceData, isDelta: false);
		return instanceData;
	}

	public static InstanceData DeserializeLengthDelimited(Stream stream)
	{
		InstanceData instanceData = Pool.Get<InstanceData>();
		DeserializeLengthDelimited(stream, instanceData, isDelta: false);
		return instanceData;
	}

	public static InstanceData DeserializeLength(Stream stream, int length)
	{
		InstanceData instanceData = Pool.Get<InstanceData>();
		DeserializeLength(stream, length, instanceData, isDelta: false);
		return instanceData;
	}

	public static InstanceData Deserialize(byte[] buffer)
	{
		InstanceData instanceData = Pool.Get<InstanceData>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instanceData, isDelta: false);
		return instanceData;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, InstanceData previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public static InstanceData Deserialize(byte[] buffer, InstanceData instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static InstanceData Deserialize(Stream stream, InstanceData instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				instance.dataInt = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.blueprintTarget = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.blueprintAmount = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.subEntity = ProtocolParser.ReadUInt32(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static InstanceData DeserializeLengthDelimited(Stream stream, InstanceData instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.dataInt = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.blueprintTarget = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.blueprintAmount = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.subEntity = ProtocolParser.ReadUInt32(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static InstanceData DeserializeLength(Stream stream, int length, InstanceData instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				instance.dataInt = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				instance.blueprintTarget = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				instance.blueprintAmount = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 32:
				instance.subEntity = ProtocolParser.ReadUInt32(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, InstanceData instance, InstanceData previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.dataInt != previous.dataInt)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.dataInt);
		}
		if (instance.blueprintTarget != previous.blueprintTarget)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.blueprintTarget);
		}
		if (instance.blueprintAmount != previous.blueprintAmount)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, (ulong)instance.blueprintAmount);
		}
		if (instance.subEntity != previous.subEntity)
		{
			stream.WriteByte(32);
			ProtocolParser.WriteUInt32(stream, instance.subEntity);
		}
		Pool.FreeMemoryStream(ref obj);
	}

	public static void Serialize(Stream stream, InstanceData instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		stream.WriteByte(8);
		ProtocolParser.WriteUInt64(stream, (ulong)instance.dataInt);
		stream.WriteByte(16);
		ProtocolParser.WriteUInt64(stream, (ulong)instance.blueprintTarget);
		stream.WriteByte(24);
		ProtocolParser.WriteUInt64(stream, (ulong)instance.blueprintAmount);
		stream.WriteByte(32);
		ProtocolParser.WriteUInt32(stream, instance.subEntity);
		Pool.FreeMemoryStream(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(InstanceData instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, InstanceData instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}
}
