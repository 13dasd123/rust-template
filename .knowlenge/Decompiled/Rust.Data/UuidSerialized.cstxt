using System.IO;
using Facepunch;
using Facepunch.Nexus;
using SilentOrbit.ProtocolBuffers;

public class UuidSerialized
{
	public static void ResetToPool(Uuid instance)
	{
		((Uuid)(ref instance)).NodeId = 0;
		((Uuid)(ref instance)).Sequence = 0;
		((Uuid)(ref instance)).Timestamp = 0uL;
	}

	public static Uuid Deserialize(byte[] buffer, ref Uuid instance, bool isDelta = false)
	{
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		using (MemoryStream stream = new MemoryStream(buffer))
		{
			Deserialize(stream, ref instance, isDelta);
		}
		return instance;
	}

	public static Uuid Deserialize(Stream stream, ref Uuid instance, bool isDelta)
	{
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 8:
				((Uuid)(ref instance)).NodeId = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				((Uuid)(ref instance)).Sequence = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				((Uuid)(ref instance)).Timestamp = ProtocolParser.ReadUInt64(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static Uuid DeserializeLengthDelimited(Stream stream, ref Uuid instance, bool isDelta)
	{
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				((Uuid)(ref instance)).NodeId = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				((Uuid)(ref instance)).Sequence = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				((Uuid)(ref instance)).Timestamp = ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static Uuid DeserializeLength(Stream stream, int length, ref Uuid instance, bool isDelta)
	{
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 8:
				((Uuid)(ref instance)).NodeId = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 16:
				((Uuid)(ref instance)).Sequence = (int)ProtocolParser.ReadUInt64(stream);
				continue;
			case 24:
				((Uuid)(ref instance)).Timestamp = ProtocolParser.ReadUInt64(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, Uuid instance, Uuid previous)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (((Uuid)(ref instance)).NodeId != ((Uuid)(ref previous)).NodeId)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)((Uuid)(ref instance)).NodeId);
		}
		if (((Uuid)(ref instance)).Sequence != ((Uuid)(ref previous)).Sequence)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)((Uuid)(ref instance)).Sequence);
		}
		if (((Uuid)(ref instance)).Timestamp != ((Uuid)(ref previous)).Timestamp)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, ((Uuid)(ref instance)).Timestamp);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static void Serialize(Stream stream, Uuid instance)
	{
		MemoryStream memoryStream = Pool.Get<MemoryStream>();
		if (((Uuid)(ref instance)).NodeId != 0)
		{
			stream.WriteByte(8);
			ProtocolParser.WriteUInt64(stream, (ulong)((Uuid)(ref instance)).NodeId);
		}
		if (((Uuid)(ref instance)).Sequence != 0)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt64(stream, (ulong)((Uuid)(ref instance)).Sequence);
		}
		if (((Uuid)(ref instance)).Timestamp != 0L)
		{
			stream.WriteByte(24);
			ProtocolParser.WriteUInt64(stream, ((Uuid)(ref instance)).Timestamp);
		}
		Pool.FreeUnmanaged(ref memoryStream);
	}

	public static byte[] SerializeToBytes(Uuid instance)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, Uuid instance)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}

	public void InspectUids(UidInspector<ulong> action)
	{
	}
}
