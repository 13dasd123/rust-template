using System;
using System.Collections.Generic;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class CodeLock : IDisposable, Pool.IPooled, IProto
{
	public class Private : IDisposable, Pool.IPooled, IProto
	{
		[NonSerialized]
		public string code;

		[NonSerialized]
		public List<ulong> users;

		[NonSerialized]
		public List<ulong> guests;

		[NonSerialized]
		public string guestCode;

		[NonSerialized]
		public List<ulong> guestUsers;

		public bool ShouldPool = true;

		private bool _disposed;

		public static void ResetToPool(Private instance)
		{
			if (instance.ShouldPool)
			{
				instance.code = string.Empty;
				if (instance.users != null)
				{
					List<ulong> obj = instance.users;
					Pool.FreeList(ref obj);
					instance.users = obj;
				}
				if (instance.guests != null)
				{
					List<ulong> obj2 = instance.guests;
					Pool.FreeList(ref obj2);
					instance.guests = obj2;
				}
				instance.guestCode = string.Empty;
				if (instance.guestUsers != null)
				{
					List<ulong> obj3 = instance.guestUsers;
					Pool.FreeList(ref obj3);
					instance.guestUsers = obj3;
				}
				Pool.Free(ref instance);
			}
		}

		public void ResetToPool()
		{
			ResetToPool(this);
		}

		public virtual void Dispose()
		{
			if (!_disposed)
			{
				ResetToPool();
				_disposed = true;
			}
		}

		public virtual void EnterPool()
		{
			_disposed = true;
		}

		public virtual void LeavePool()
		{
			_disposed = false;
		}

		public virtual void WriteToStream(Stream stream)
		{
			Serialize(stream, this);
		}

		public virtual void WriteToStreamDelta(Stream stream, Private previous)
		{
			if (previous == null)
			{
				Serialize(stream, this);
			}
			else
			{
				SerializeDelta(stream, this, previous);
			}
		}

		public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
		{
			DeserializeLength(stream, size, this, isDelta);
		}

		public void CopyTo(Private instance)
		{
			instance.code = code;
			throw new NotImplementedException();
		}

		public Private Copy()
		{
			Private @private = Pool.Get<Private>();
			CopyTo(@private);
			return @private;
		}

		public static Private Deserialize(Stream stream)
		{
			Private @private = Pool.Get<Private>();
			Deserialize(stream, @private, isDelta: false);
			return @private;
		}

		public static Private DeserializeLengthDelimited(Stream stream)
		{
			Private @private = Pool.Get<Private>();
			DeserializeLengthDelimited(stream, @private, isDelta: false);
			return @private;
		}

		public static Private DeserializeLength(Stream stream, int length)
		{
			Private @private = Pool.Get<Private>();
			DeserializeLength(stream, length, @private, isDelta: false);
			return @private;
		}

		public static Private Deserialize(byte[] buffer)
		{
			Private @private = Pool.Get<Private>();
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, @private, isDelta: false);
			return @private;
		}

		public void FromProto(Stream stream, bool isDelta = false)
		{
			Deserialize(stream, this, isDelta);
		}

		public static Private Deserialize(byte[] buffer, Private instance, bool isDelta = false)
		{
			using MemoryStream stream = new MemoryStream(buffer);
			Deserialize(stream, instance, isDelta);
			return instance;
		}

		public static Private Deserialize(Stream stream, Private instance, bool isDelta)
		{
			if (!isDelta)
			{
				if (instance.users == null)
				{
					instance.users = Pool.Get<List<ulong>>();
				}
				if (instance.guests == null)
				{
					instance.guests = Pool.Get<List<ulong>>();
				}
				if (instance.guestUsers == null)
				{
					instance.guestUsers = Pool.Get<List<ulong>>();
				}
			}
			while (true)
			{
				int num = stream.ReadByte();
				switch (num)
				{
				case 10:
					instance.code = ProtocolParser.ReadString(stream);
					continue;
				case 16:
					instance.users.Add(ProtocolParser.ReadUInt64(stream));
					continue;
				case 24:
					instance.guests.Add(ProtocolParser.ReadUInt64(stream));
					continue;
				case 34:
					instance.guestCode = ProtocolParser.ReadString(stream);
					continue;
				case 40:
					instance.guestUsers.Add(ProtocolParser.ReadUInt64(stream));
					continue;
				case -1:
					return instance;
				}
				Key key = ProtocolParser.ReadKey((byte)num, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
		}

		public static Private DeserializeLengthDelimited(Stream stream, Private instance, bool isDelta)
		{
			if (!isDelta)
			{
				if (instance.users == null)
				{
					instance.users = Pool.Get<List<ulong>>();
				}
				if (instance.guests == null)
				{
					instance.guests = Pool.Get<List<ulong>>();
				}
				if (instance.guestUsers == null)
				{
					instance.guestUsers = Pool.Get<List<ulong>>();
				}
			}
			long num = ProtocolParser.ReadUInt32(stream);
			num += stream.Position;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					instance.code = ProtocolParser.ReadString(stream);
					continue;
				case 16:
					instance.users.Add(ProtocolParser.ReadUInt64(stream));
					continue;
				case 24:
					instance.guests.Add(ProtocolParser.ReadUInt64(stream));
					continue;
				case 34:
					instance.guestCode = ProtocolParser.ReadString(stream);
					continue;
				case 40:
					instance.guestUsers.Add(ProtocolParser.ReadUInt64(stream));
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static Private DeserializeLength(Stream stream, int length, Private instance, bool isDelta)
		{
			if (!isDelta)
			{
				if (instance.users == null)
				{
					instance.users = Pool.Get<List<ulong>>();
				}
				if (instance.guests == null)
				{
					instance.guests = Pool.Get<List<ulong>>();
				}
				if (instance.guestUsers == null)
				{
					instance.guestUsers = Pool.Get<List<ulong>>();
				}
			}
			long num = stream.Position + length;
			while (stream.Position < num)
			{
				int num2 = stream.ReadByte();
				switch (num2)
				{
				case -1:
					throw new EndOfStreamException();
				case 10:
					instance.code = ProtocolParser.ReadString(stream);
					continue;
				case 16:
					instance.users.Add(ProtocolParser.ReadUInt64(stream));
					continue;
				case 24:
					instance.guests.Add(ProtocolParser.ReadUInt64(stream));
					continue;
				case 34:
					instance.guestCode = ProtocolParser.ReadString(stream);
					continue;
				case 40:
					instance.guestUsers.Add(ProtocolParser.ReadUInt64(stream));
					continue;
				}
				Key key = ProtocolParser.ReadKey((byte)num2, stream);
				if (key.Field == 0)
				{
					throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
				}
				ProtocolParser.SkipKey(stream, key);
			}
			if (stream.Position != num)
			{
				throw new ProtocolBufferException("Read past max limit");
			}
			return instance;
		}

		public static void SerializeDelta(Stream stream, Private instance, Private previous)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.code != null && instance.code != previous.code)
			{
				stream.WriteByte(10);
				ProtocolParser.WriteString(stream, instance.code);
			}
			if (instance.users != null)
			{
				for (int i = 0; i < instance.users.Count; i++)
				{
					ulong val = instance.users[i];
					stream.WriteByte(16);
					ProtocolParser.WriteUInt64(stream, val);
				}
			}
			if (instance.guests != null)
			{
				for (int j = 0; j < instance.guests.Count; j++)
				{
					ulong val2 = instance.guests[j];
					stream.WriteByte(24);
					ProtocolParser.WriteUInt64(stream, val2);
				}
			}
			if (instance.guestCode != null && instance.guestCode != previous.guestCode)
			{
				stream.WriteByte(34);
				ProtocolParser.WriteString(stream, instance.guestCode);
			}
			if (instance.guestUsers != null)
			{
				for (int k = 0; k < instance.guestUsers.Count; k++)
				{
					ulong val3 = instance.guestUsers[k];
					stream.WriteByte(40);
					ProtocolParser.WriteUInt64(stream, val3);
				}
			}
			Pool.FreeMemoryStream(ref obj);
		}

		public static void Serialize(Stream stream, Private instance)
		{
			MemoryStream obj = Pool.Get<MemoryStream>();
			if (instance.code != null)
			{
				stream.WriteByte(10);
				ProtocolParser.WriteString(stream, instance.code);
			}
			if (instance.users != null)
			{
				for (int i = 0; i < instance.users.Count; i++)
				{
					ulong val = instance.users[i];
					stream.WriteByte(16);
					ProtocolParser.WriteUInt64(stream, val);
				}
			}
			if (instance.guests != null)
			{
				for (int j = 0; j < instance.guests.Count; j++)
				{
					ulong val2 = instance.guests[j];
					stream.WriteByte(24);
					ProtocolParser.WriteUInt64(stream, val2);
				}
			}
			if (instance.guestCode != null)
			{
				stream.WriteByte(34);
				ProtocolParser.WriteString(stream, instance.guestCode);
			}
			if (instance.guestUsers != null)
			{
				for (int k = 0; k < instance.guestUsers.Count; k++)
				{
					ulong val3 = instance.guestUsers[k];
					stream.WriteByte(40);
					ProtocolParser.WriteUInt64(stream, val3);
				}
			}
			Pool.FreeMemoryStream(ref obj);
		}

		public byte[] ToProtoBytes()
		{
			return SerializeToBytes(this);
		}

		public void ToProto(Stream stream)
		{
			Serialize(stream, this);
		}

		public static byte[] SerializeToBytes(Private instance)
		{
			using MemoryStream memoryStream = new MemoryStream();
			Serialize(memoryStream, instance);
			return memoryStream.ToArray();
		}

		public static void SerializeLengthDelimited(Stream stream, Private instance)
		{
			byte[] array = SerializeToBytes(instance);
			ProtocolParser.WriteUInt32(stream, (uint)array.Length);
			stream.Write(array, 0, array.Length);
		}
	}

	[NonSerialized]
	public Private pv;

	[NonSerialized]
	public bool hasCode;

	[NonSerialized]
	public bool hasGuestCode;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(CodeLock instance)
	{
		if (instance.ShouldPool)
		{
			if (instance.pv != null)
			{
				instance.pv.ResetToPool();
				instance.pv = null;
			}
			instance.hasCode = false;
			instance.hasGuestCode = false;
			Pool.Free(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, CodeLock previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public void CopyTo(CodeLock instance)
	{
		if (pv != null)
		{
			if (instance.pv == null)
			{
				instance.pv = pv.Copy();
			}
			else
			{
				pv.CopyTo(instance.pv);
			}
		}
		else
		{
			instance.pv = null;
		}
		instance.hasCode = hasCode;
		instance.hasGuestCode = hasGuestCode;
	}

	public CodeLock Copy()
	{
		CodeLock codeLock = Pool.Get<CodeLock>();
		CopyTo(codeLock);
		return codeLock;
	}

	public static CodeLock Deserialize(Stream stream)
	{
		CodeLock codeLock = Pool.Get<CodeLock>();
		Deserialize(stream, codeLock, isDelta: false);
		return codeLock;
	}

	public static CodeLock DeserializeLengthDelimited(Stream stream)
	{
		CodeLock codeLock = Pool.Get<CodeLock>();
		DeserializeLengthDelimited(stream, codeLock, isDelta: false);
		return codeLock;
	}

	public static CodeLock DeserializeLength(Stream stream, int length)
	{
		CodeLock codeLock = Pool.Get<CodeLock>();
		DeserializeLength(stream, length, codeLock, isDelta: false);
		return codeLock;
	}

	public static CodeLock Deserialize(byte[] buffer)
	{
		CodeLock codeLock = Pool.Get<CodeLock>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, codeLock, isDelta: false);
		return codeLock;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public static CodeLock Deserialize(byte[] buffer, CodeLock instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static CodeLock Deserialize(Stream stream, CodeLock instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				if (instance.pv == null)
				{
					instance.pv = Private.DeserializeLengthDelimited(stream);
				}
				else
				{
					Private.DeserializeLengthDelimited(stream, instance.pv, isDelta);
				}
				continue;
			case 16:
				instance.hasCode = ProtocolParser.ReadBool(stream);
				continue;
			case 24:
				instance.hasGuestCode = ProtocolParser.ReadBool(stream);
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static CodeLock DeserializeLengthDelimited(Stream stream, CodeLock instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.pv == null)
				{
					instance.pv = Private.DeserializeLengthDelimited(stream);
				}
				else
				{
					Private.DeserializeLengthDelimited(stream, instance.pv, isDelta);
				}
				continue;
			case 16:
				instance.hasCode = ProtocolParser.ReadBool(stream);
				continue;
			case 24:
				instance.hasGuestCode = ProtocolParser.ReadBool(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static CodeLock DeserializeLength(Stream stream, int length, CodeLock instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				if (instance.pv == null)
				{
					instance.pv = Private.DeserializeLengthDelimited(stream);
				}
				else
				{
					Private.DeserializeLengthDelimited(stream, instance.pv, isDelta);
				}
				continue;
			case 16:
				instance.hasCode = ProtocolParser.ReadBool(stream);
				continue;
			case 24:
				instance.hasGuestCode = ProtocolParser.ReadBool(stream);
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, CodeLock instance, CodeLock previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.pv != null)
		{
			stream.WriteByte(10);
			obj.SetLength(0L);
			Private.SerializeDelta(obj, instance.pv, previous.pv);
			uint num = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(obj.GetBuffer(), 0, (int)num);
		}
		stream.WriteByte(16);
		ProtocolParser.WriteBool(stream, instance.hasCode);
		stream.WriteByte(24);
		ProtocolParser.WriteBool(stream, instance.hasGuestCode);
		Pool.FreeMemoryStream(ref obj);
	}

	public static void Serialize(Stream stream, CodeLock instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.pv != null)
		{
			stream.WriteByte(10);
			obj.SetLength(0L);
			Private.Serialize(obj, instance.pv);
			uint num = (uint)obj.Length;
			ProtocolParser.WriteUInt32(stream, num);
			stream.Write(obj.GetBuffer(), 0, (int)num);
		}
		stream.WriteByte(16);
		ProtocolParser.WriteBool(stream, instance.hasCode);
		stream.WriteByte(24);
		ProtocolParser.WriteBool(stream, instance.hasGuestCode);
		Pool.FreeMemoryStream(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(CodeLock instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, CodeLock instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}
}
