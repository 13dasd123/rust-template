using System;
using System.IO;
using Facepunch;
using ProtoBuf;
using SilentOrbit.ProtocolBuffers;

public class PrefabData : IDisposable, Pool.IPooled, IProto
{
	[NonSerialized]
	public string category;

	[NonSerialized]
	public uint id;

	[NonSerialized]
	public VectorData position;

	[NonSerialized]
	public VectorData rotation;

	[NonSerialized]
	public VectorData scale;

	public bool ShouldPool = true;

	private bool _disposed;

	public static void ResetToPool(PrefabData instance)
	{
		if (instance.ShouldPool)
		{
			instance.category = string.Empty;
			instance.id = 0u;
			if (instance.position != null)
			{
				instance.position.ResetToPool();
				instance.position = null;
			}
			if (instance.rotation != null)
			{
				instance.rotation.ResetToPool();
				instance.rotation = null;
			}
			if (instance.scale != null)
			{
				instance.scale.ResetToPool();
				instance.scale = null;
			}
			Pool.Free(ref instance);
		}
	}

	public void ResetToPool()
	{
		ResetToPool(this);
	}

	public virtual void Dispose()
	{
		if (!_disposed)
		{
			ResetToPool();
			_disposed = true;
		}
	}

	public virtual void EnterPool()
	{
		_disposed = true;
	}

	public virtual void LeavePool()
	{
		_disposed = false;
	}

	public virtual void WriteToStream(Stream stream)
	{
		Serialize(stream, this);
	}

	public virtual void WriteToStreamDelta(Stream stream, PrefabData previous)
	{
		if (previous == null)
		{
			Serialize(stream, this);
		}
		else
		{
			SerializeDelta(stream, this, previous);
		}
	}

	public virtual void ReadFromStream(Stream stream, int size, bool isDelta = false)
	{
		DeserializeLength(stream, size, this, isDelta);
	}

	public void CopyTo(PrefabData instance)
	{
		instance.category = category;
		instance.id = id;
		if (position != null)
		{
			if (instance.position == null)
			{
				instance.position = position.Copy();
			}
			else
			{
				position.CopyTo(instance.position);
			}
		}
		else
		{
			instance.position = null;
		}
		if (rotation != null)
		{
			if (instance.rotation == null)
			{
				instance.rotation = rotation.Copy();
			}
			else
			{
				rotation.CopyTo(instance.rotation);
			}
		}
		else
		{
			instance.rotation = null;
		}
		if (scale != null)
		{
			if (instance.scale == null)
			{
				instance.scale = scale.Copy();
			}
			else
			{
				scale.CopyTo(instance.scale);
			}
		}
		else
		{
			instance.scale = null;
		}
	}

	public PrefabData Copy()
	{
		PrefabData prefabData = Pool.Get<PrefabData>();
		CopyTo(prefabData);
		return prefabData;
	}

	public static PrefabData Deserialize(Stream stream)
	{
		PrefabData prefabData = Pool.Get<PrefabData>();
		Deserialize(stream, prefabData, isDelta: false);
		return prefabData;
	}

	public static PrefabData DeserializeLengthDelimited(Stream stream)
	{
		PrefabData prefabData = Pool.Get<PrefabData>();
		DeserializeLengthDelimited(stream, prefabData, isDelta: false);
		return prefabData;
	}

	public static PrefabData DeserializeLength(Stream stream, int length)
	{
		PrefabData prefabData = Pool.Get<PrefabData>();
		DeserializeLength(stream, length, prefabData, isDelta: false);
		return prefabData;
	}

	public static PrefabData Deserialize(byte[] buffer)
	{
		PrefabData prefabData = Pool.Get<PrefabData>();
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, prefabData, isDelta: false);
		return prefabData;
	}

	public void FromProto(Stream stream, bool isDelta = false)
	{
		Deserialize(stream, this, isDelta);
	}

	public static PrefabData Deserialize(byte[] buffer, PrefabData instance, bool isDelta = false)
	{
		using MemoryStream stream = new MemoryStream(buffer);
		Deserialize(stream, instance, isDelta);
		return instance;
	}

	public static PrefabData Deserialize(Stream stream, PrefabData instance, bool isDelta)
	{
		while (true)
		{
			int num = stream.ReadByte();
			switch (num)
			{
			case 10:
				instance.category = ProtocolParser.ReadString(stream);
				continue;
			case 16:
				instance.id = ProtocolParser.ReadUInt32(stream);
				continue;
			case 26:
				if (instance.position == null)
				{
					instance.position = VectorData.DeserializeLengthDelimited(stream);
				}
				else
				{
					VectorData.DeserializeLengthDelimited(stream, instance.position, isDelta);
				}
				continue;
			case 34:
				if (instance.rotation == null)
				{
					instance.rotation = VectorData.DeserializeLengthDelimited(stream);
				}
				else
				{
					VectorData.DeserializeLengthDelimited(stream, instance.rotation, isDelta);
				}
				continue;
			case 42:
				if (instance.scale == null)
				{
					instance.scale = VectorData.DeserializeLengthDelimited(stream);
				}
				else
				{
					VectorData.DeserializeLengthDelimited(stream, instance.scale, isDelta);
				}
				continue;
			case -1:
				return instance;
			}
			Key key = ProtocolParser.ReadKey((byte)num, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
	}

	public static PrefabData DeserializeLengthDelimited(Stream stream, PrefabData instance, bool isDelta)
	{
		long num = ProtocolParser.ReadUInt32(stream);
		num += stream.Position;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.category = ProtocolParser.ReadString(stream);
				continue;
			case 16:
				instance.id = ProtocolParser.ReadUInt32(stream);
				continue;
			case 26:
				if (instance.position == null)
				{
					instance.position = VectorData.DeserializeLengthDelimited(stream);
				}
				else
				{
					VectorData.DeserializeLengthDelimited(stream, instance.position, isDelta);
				}
				continue;
			case 34:
				if (instance.rotation == null)
				{
					instance.rotation = VectorData.DeserializeLengthDelimited(stream);
				}
				else
				{
					VectorData.DeserializeLengthDelimited(stream, instance.rotation, isDelta);
				}
				continue;
			case 42:
				if (instance.scale == null)
				{
					instance.scale = VectorData.DeserializeLengthDelimited(stream);
				}
				else
				{
					VectorData.DeserializeLengthDelimited(stream, instance.scale, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static PrefabData DeserializeLength(Stream stream, int length, PrefabData instance, bool isDelta)
	{
		long num = stream.Position + length;
		while (stream.Position < num)
		{
			int num2 = stream.ReadByte();
			switch (num2)
			{
			case -1:
				throw new EndOfStreamException();
			case 10:
				instance.category = ProtocolParser.ReadString(stream);
				continue;
			case 16:
				instance.id = ProtocolParser.ReadUInt32(stream);
				continue;
			case 26:
				if (instance.position == null)
				{
					instance.position = VectorData.DeserializeLengthDelimited(stream);
				}
				else
				{
					VectorData.DeserializeLengthDelimited(stream, instance.position, isDelta);
				}
				continue;
			case 34:
				if (instance.rotation == null)
				{
					instance.rotation = VectorData.DeserializeLengthDelimited(stream);
				}
				else
				{
					VectorData.DeserializeLengthDelimited(stream, instance.rotation, isDelta);
				}
				continue;
			case 42:
				if (instance.scale == null)
				{
					instance.scale = VectorData.DeserializeLengthDelimited(stream);
				}
				else
				{
					VectorData.DeserializeLengthDelimited(stream, instance.scale, isDelta);
				}
				continue;
			}
			Key key = ProtocolParser.ReadKey((byte)num2, stream);
			if (key.Field == 0)
			{
				throw new ProtocolBufferException("Invalid field id: 0, something went wrong in the stream");
			}
			ProtocolParser.SkipKey(stream, key);
		}
		if (stream.Position != num)
		{
			throw new ProtocolBufferException("Read past max limit");
		}
		return instance;
	}

	public static void SerializeDelta(Stream stream, PrefabData instance, PrefabData previous)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.category != previous.category)
		{
			if (instance.category == null)
			{
				throw new ArgumentNullException("category", "Required by proto specification.");
			}
			stream.WriteByte(10);
			ProtocolParser.WriteString(stream, instance.category);
		}
		if (instance.id != previous.id)
		{
			stream.WriteByte(16);
			ProtocolParser.WriteUInt32(stream, instance.id);
		}
		if (instance.position == null)
		{
			throw new ArgumentNullException("position", "Required by proto specification.");
		}
		stream.WriteByte(26);
		obj.SetLength(0L);
		VectorData.SerializeDelta(obj, instance.position, previous.position);
		uint num = (uint)obj.Length;
		ProtocolParser.WriteUInt32(stream, num);
		stream.Write(obj.GetBuffer(), 0, (int)num);
		if (instance.rotation == null)
		{
			throw new ArgumentNullException("rotation", "Required by proto specification.");
		}
		stream.WriteByte(34);
		obj.SetLength(0L);
		VectorData.SerializeDelta(obj, instance.rotation, previous.rotation);
		uint num2 = (uint)obj.Length;
		ProtocolParser.WriteUInt32(stream, num2);
		stream.Write(obj.GetBuffer(), 0, (int)num2);
		if (instance.scale == null)
		{
			throw new ArgumentNullException("scale", "Required by proto specification.");
		}
		stream.WriteByte(42);
		obj.SetLength(0L);
		VectorData.SerializeDelta(obj, instance.scale, previous.scale);
		uint num3 = (uint)obj.Length;
		ProtocolParser.WriteUInt32(stream, num3);
		stream.Write(obj.GetBuffer(), 0, (int)num3);
		Pool.FreeMemoryStream(ref obj);
	}

	public static void Serialize(Stream stream, PrefabData instance)
	{
		MemoryStream obj = Pool.Get<MemoryStream>();
		if (instance.category == null)
		{
			throw new ArgumentNullException("category", "Required by proto specification.");
		}
		stream.WriteByte(10);
		ProtocolParser.WriteString(stream, instance.category);
		stream.WriteByte(16);
		ProtocolParser.WriteUInt32(stream, instance.id);
		if (instance.position == null)
		{
			throw new ArgumentNullException("position", "Required by proto specification.");
		}
		stream.WriteByte(26);
		obj.SetLength(0L);
		VectorData.Serialize(obj, instance.position);
		uint num = (uint)obj.Length;
		ProtocolParser.WriteUInt32(stream, num);
		stream.Write(obj.GetBuffer(), 0, (int)num);
		if (instance.rotation == null)
		{
			throw new ArgumentNullException("rotation", "Required by proto specification.");
		}
		stream.WriteByte(34);
		obj.SetLength(0L);
		VectorData.Serialize(obj, instance.rotation);
		uint num2 = (uint)obj.Length;
		ProtocolParser.WriteUInt32(stream, num2);
		stream.Write(obj.GetBuffer(), 0, (int)num2);
		if (instance.scale == null)
		{
			throw new ArgumentNullException("scale", "Required by proto specification.");
		}
		stream.WriteByte(42);
		obj.SetLength(0L);
		VectorData.Serialize(obj, instance.scale);
		uint num3 = (uint)obj.Length;
		ProtocolParser.WriteUInt32(stream, num3);
		stream.Write(obj.GetBuffer(), 0, (int)num3);
		Pool.FreeMemoryStream(ref obj);
	}

	public byte[] ToProtoBytes()
	{
		return SerializeToBytes(this);
	}

	public void ToProto(Stream stream)
	{
		Serialize(stream, this);
	}

	public static byte[] SerializeToBytes(PrefabData instance)
	{
		using MemoryStream memoryStream = new MemoryStream();
		Serialize(memoryStream, instance);
		return memoryStream.ToArray();
	}

	public static void SerializeLengthDelimited(Stream stream, PrefabData instance)
	{
		byte[] array = SerializeToBytes(instance);
		ProtocolParser.WriteUInt32(stream, (uint)array.Length);
		stream.Write(array, 0, array.Length);
	}
}
