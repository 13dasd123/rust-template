using System;
using System.Collections.Generic;
using System.Diagnostics;
using UnityEngine;

public abstract class ObjectWorkQueue<T> : ObjectWorkQueue
{
	protected Queue<T> queue = new Queue<T>();

	protected HashSet<T> containerTest = new HashSet<T>();

	private readonly Stopwatch stopwatch = new Stopwatch();

	public override int QueueLength => queue.Count;

	public ObjectWorkQueue()
	{
		Name = GetType().Name;
		ObjectWorkQueue.All.Add(this);
	}

	public void Clear()
	{
		queue.Clear();
		containerTest.Clear();
		if (HashSetMaxLength > 256)
		{
			containerTest = new HashSet<T>();
			HashSetMaxLength = 0;
		}
	}

	public void RunQueue(double maximumMilliseconds)
	{
		LastExecutionTime = default(TimeSpan);
		LastProcessedCount = 0;
		base.LastQueueLength = QueueLength;
		if (queue.Count == 0)
		{
			return;
		}
		stopwatch.Restart();
		SortQueue();
		TimeWarning val = TimeWarning.New(Name, (int)WarningThreshold.TotalMilliseconds);
		try
		{
			while (queue.Count > 0)
			{
				LastProcessedCount++;
				TotalProcessedCount++;
				T val2 = queue.Dequeue();
				containerTest.Remove(val2);
				if (val2 != null)
				{
					RunJob(val2);
				}
				if (stopwatch.Elapsed.TotalMilliseconds >= maximumMilliseconds)
				{
					break;
				}
			}
			LastExecutionTime = stopwatch.Elapsed;
			TotalExecutionTime += LastExecutionTime;
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
		if (queue.Count == 0)
		{
			Clear();
		}
	}

	public void Add(T entity)
	{
		if (!Contains(entity) && ShouldAdd(entity))
		{
			queue.Enqueue(entity);
			containerTest.Add(entity);
			HashSetMaxLength = Mathf.Max(containerTest.Count, HashSetMaxLength);
		}
	}

	public void AddNoContainsCheck(T entity)
	{
		if (ShouldAdd(entity))
		{
			queue.Enqueue(entity);
		}
	}

	public bool Contains(T entity)
	{
		return containerTest.Contains(entity);
	}

	protected virtual void SortQueue()
	{
	}

	protected virtual bool ShouldAdd(T entity)
	{
		return true;
	}

	protected abstract void RunJob(T entity);

	public string Info()
	{
		return $"{QueueLength:n0}, lastCount: {LastProcessedCount:n0}, totCount: {TotalProcessedCount:n0}, totMS: {TotalExecutionTime:n0} ";
	}
}
