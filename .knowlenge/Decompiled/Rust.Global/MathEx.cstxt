using UnityEngine;

public static class MathEx
{
	public static float SnapTo(this float val, float snapValue)
	{
		if (snapValue == 0f)
		{
			return val;
		}
		return Mathf.Round(val / snapValue) * snapValue;
	}

	public static bool QuadTest(this Ray ray, Vector3 planeCenter, Quaternion planeRot, Vector2 planeSize, out Vector3 hitPosition, float gridSize = 0f)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0104: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_010e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0113: Unknown result type (might be due to invalid IL or missing references)
		//IL_0114: Unknown result type (might be due to invalid IL or missing references)
		//IL_0119: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0124: Unknown result type (might be due to invalid IL or missing references)
		//IL_0129: Unknown result type (might be due to invalid IL or missing references)
		//IL_0132: Unknown result type (might be due to invalid IL or missing references)
		//IL_0137: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_013d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0143: Unknown result type (might be due to invalid IL or missing references)
		//IL_0148: Unknown result type (might be due to invalid IL or missing references)
		//IL_014d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		Plane val = default(Plane);
		((Plane)(ref val))..ctor(planeRot * Vector3.forward, planeCenter);
		hitPosition = Vector3.zero;
		float num = 0f;
		if (!((Plane)(ref val)).Raycast(ray, ref num))
		{
			return false;
		}
		hitPosition = ((Ray)(ref ray)).origin + ((Ray)(ref ray)).direction * num;
		Vector3 val2 = hitPosition - planeCenter;
		float num2 = Vector3.Dot(val2, planeRot * Vector3.left);
		float num3 = Vector3.Dot(val2, planeRot * Vector3.up);
		if (Mathf.Abs(num2) > planeSize.x / 2f)
		{
			num2 = ((num2 < 0f) ? (0f - planeSize.x) : planeSize.x) / 2f;
		}
		if (Mathf.Abs(num3) > planeSize.y / 2f)
		{
			num3 = ((num3 < 0f) ? (0f - planeSize.y) : planeSize.y) / 2f;
		}
		if (gridSize > 0f)
		{
			num2 = num2.SnapTo(gridSize);
			num3 = num3.SnapTo(gridSize);
		}
		hitPosition = planeCenter;
		hitPosition += planeRot * Vector3.left * num2;
		hitPosition += planeRot * Vector3.up * num3;
		return true;
	}

	public static float BiasedLerp(float x, float bias)
	{
		float num = ((!(bias <= 0.5f)) ? (1f - Bias(1f - Mathf.Abs(x), 1f - bias)) : Bias(Mathf.Abs(x), bias));
		if (!(x < 0f))
		{
			return num;
		}
		return 0f - num;
	}

	public static float Bias(float x, float bias)
	{
		if (x <= 0f || bias <= 0f)
		{
			return 0f;
		}
		if (x >= 1f || bias >= 1f)
		{
			return 1f;
		}
		if (bias == 0.5f)
		{
			return x;
		}
		float num = Mathf.Log(bias) * -1.4427f;
		return Mathf.Pow(x, num);
	}
}
