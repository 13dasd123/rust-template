using Rust.Components.Camera;
using UnityEngine;

public class DepthOfFieldFocusPoint : ListComponent<DepthOfFieldFocusPoint>
{
	private Renderer cachedRenderer;

	public Vector3 FocusPoint
	{
		get
		{
			//IL_0006: Unknown result type (might be due to invalid IL or missing references)
			//IL_000b: Unknown result type (might be due to invalid IL or missing references)
			//IL_002e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0020: Unknown result type (might be due to invalid IL or missing references)
			//IL_0025: Unknown result type (might be due to invalid IL or missing references)
			//IL_0028: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Unknown result type (might be due to invalid IL or missing references)
			Vector3 result = ((Component)this).transform.position;
			if ((Object)(object)cachedRenderer != (Object)null)
			{
				Bounds bounds = cachedRenderer.bounds;
				result = ((Bounds)(ref bounds)).center;
			}
			return result;
		}
	}

	protected override void OnEnable()
	{
		((ListComponent)this).OnEnable();
		cachedRenderer = (Renderer)(object)((Component)this).GetComponentInChildren<MeshRenderer>(true);
		if ((Object)(object)cachedRenderer == (Object)null)
		{
			cachedRenderer = (Renderer)(object)((Component)this).GetComponentInChildren<SkinnedMeshRenderer>(true);
		}
	}

	public static DepthOfFieldFocusPoint Evaluate(Camera cam)
	{
		if (ListComponent<DepthOfFieldFocusPoint>.InstanceList == null || ListComponent<DepthOfFieldFocusPoint>.InstanceList.Count == 0)
		{
			return null;
		}
		DepthOfFieldFocusPoint result = null;
		float num = float.MaxValue;
		for (int i = 0; i < ListComponent<DepthOfFieldFocusPoint>.InstanceList.Count; i++)
		{
			float num2 = ListComponent<DepthOfFieldFocusPoint>.InstanceList[i].Score(cam);
			if (num2 < num)
			{
				num = num2;
				result = ListComponent<DepthOfFieldFocusPoint>.InstanceList[i];
			}
		}
		return result;
	}

	private float Score(Camera cam)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = cam.WorldToScreenPoint(FocusPoint);
		if (val.z < 0f)
		{
			return float.MaxValue;
		}
		Vector2 val2 = new Vector2(val.x, val.y) - new Vector2((float)(cam.pixelWidth / 2), (float)(cam.pixelHeight / 2));
		return ((Vector2)(ref val2)).sqrMagnitude + val.z * 128f;
	}
}
