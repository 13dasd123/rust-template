using System.Collections.Generic;
using System.Diagnostics;

public abstract class PersistentObjectWorkQueue<T>
{
	protected List<T> workList = new List<T>();

	public string listName = "Untitled PersistentObjectWorkQueue";

	public long warnTime = 200L;

	public double totalTime;

	public double lastMS;

	private int currentIndex;

	private Stopwatch stopwatch = new Stopwatch();

	public int listLength => workList.Count;

	public PersistentObjectWorkQueue()
	{
		listName = GetType().FullName;
	}

	public void Clear()
	{
		workList.Clear();
	}

	public void RunList(double maximumMilliseconds)
	{
		if (workList.Count == 0)
		{
			return;
		}
		using (TimeWarning.New(listName, (int)warnTime))
		{
			stopwatch.Reset();
			stopwatch.Start();
			int count = workList.Count;
			if (currentIndex >= workList.Count)
			{
				currentIndex = 0;
			}
			int num = currentIndex;
			int num2 = 0;
			while (num2 < count)
			{
				num2++;
				if (workList[currentIndex] != null)
				{
					RunJob(workList[currentIndex]);
				}
				currentIndex++;
				if (currentIndex >= count)
				{
					currentIndex = 0;
				}
				if (currentIndex == num || stopwatch.Elapsed.TotalMilliseconds >= maximumMilliseconds)
				{
					break;
				}
			}
			lastMS = stopwatch.Elapsed.TotalMilliseconds;
			totalTime += lastMS;
		}
	}

	public void Add(T entity)
	{
		if (!Contains(entity) && ShouldAdd(entity))
		{
			workList.Add(entity);
		}
	}

	public void Remove(T entity)
	{
		if (Contains(entity))
		{
			workList.Remove(entity);
		}
	}

	public bool Contains(T entity)
	{
		return workList.Contains(entity);
	}

	protected virtual bool ShouldAdd(T entity)
	{
		return true;
	}

	protected abstract void RunJob(T entity);

	public string Info()
	{
		return $"{listLength:n0}, totMS: {totalTime:n0} ";
	}
}
