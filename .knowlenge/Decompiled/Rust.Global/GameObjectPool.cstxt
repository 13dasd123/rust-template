using System.Collections;
using System.Linq;
using Facepunch;
using Rust;
using UnityEngine;

public class GameObjectPool<T> : ObjectPool<T> where T : Component
{
	private GameObject poolRoot;

	public override void AddToPool(T t)
	{
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Expected O, but got Unknown
		if (!Application.isQuitting)
		{
			if ((Object)(object)poolRoot == (Object)null)
			{
				poolRoot = new GameObject("GameObjectPool - " + typeof(T).Name);
				poolRoot.SetActive(false);
				Object.DontDestroyOnLoad((Object)(object)poolRoot);
			}
			base.AddToPool(t);
			((Component)t).gameObject.SetActive(false);
			((Component)t).transform.SetParent(poolRoot.transform, false);
		}
	}

	public void AddChildrenToPool(Transform t)
	{
		T[] array = (from Transform x in (IEnumerable)t
			select ((Component)x).GetComponent<T>() into x
			where (Object)(object)x != (Object)null
			select x).ToArray();
		foreach (T val in array)
		{
			if (!((Component)val).CompareTag("persist"))
			{
				AddToPool(val);
			}
		}
	}

	public T TakeOrInstantiate(GameObject prefabSource)
	{
		T val = TakeFromPool();
		if ((Object)(object)val != (Object)null)
		{
			((Component)val).gameObject.SetActive(true);
			return val;
		}
		GameObject obj = Instantiate.GameObject(prefabSource);
		Debug.Assert((Object)(object)obj != (Object)null, "GameObjectPool - passed prefab didn't have a valid component!");
		obj.transform.SetParent((Transform)null, false);
		obj.SetActive(true);
		return obj.GetComponent<T>();
	}
}
