using UnityEngine;

public struct Triangle
{
	public Vector3 point0;

	public Vector3 point1;

	public Vector3 point2;

	public Vector3 Normal
	{
		get
		{
			//IL_0001: Unknown result type (might be due to invalid IL or missing references)
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_000c: Unknown result type (might be due to invalid IL or missing references)
			//IL_0012: Unknown result type (might be due to invalid IL or missing references)
			//IL_0018: Unknown result type (might be due to invalid IL or missing references)
			//IL_001d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0022: Unknown result type (might be due to invalid IL or missing references)
			//IL_0023: Unknown result type (might be due to invalid IL or missing references)
			//IL_0024: Unknown result type (might be due to invalid IL or missing references)
			//IL_0029: Unknown result type (might be due to invalid IL or missing references)
			//IL_002c: Unknown result type (might be due to invalid IL or missing references)
			Vector3 val = point1 - point0;
			Vector3 val2 = point2 - point0;
			Vector3 val3 = Vector3.Cross(val, val2);
			return ((Vector3)(ref val3)).normalized;
		}
	}

	public Vector3 Center => (point0 + point1 + point2) / 3f;

	public Triangle(Vector3 point0, Vector3 point1, Vector3 point2)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		this.point0 = point0;
		this.point1 = point1;
		this.point2 = point2;
	}

	public bool Trace(Ray ray, float radius, out RaycastHit hit, float maxDistance = float.PositiveInfinity)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006a: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		//IL_0123: Unknown result type (might be due to invalid IL or missing references)
		//IL_010c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0112: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_014b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_0155: Unknown result type (might be due to invalid IL or missing references)
		//IL_015a: Unknown result type (might be due to invalid IL or missing references)
		//IL_015d: Unknown result type (might be due to invalid IL or missing references)
		//IL_016d: Unknown result type (might be due to invalid IL or missing references)
		//IL_016e: Unknown result type (might be due to invalid IL or missing references)
		//IL_016f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0174: Unknown result type (might be due to invalid IL or missing references)
		//IL_0178: Unknown result type (might be due to invalid IL or missing references)
		hit = default(RaycastHit);
		Vector3 val = point1 - point0;
		Vector3 val2 = point2 - point0;
		Vector3 val3 = Vector3.Cross(((Ray)(ref ray)).direction, val2);
		float num = Vector3.Dot(val, val3);
		if (num > 0f - Mathf.Epsilon && num < Mathf.Epsilon)
		{
			return false;
		}
		float num2 = 1f / num;
		Vector3 val4 = ((Ray)(ref ray)).origin - point0;
		float num3 = Vector3.Dot(val4, val3) * num2;
		if (num3 < 0f)
		{
			return LineTest(point0, point2, ray, radius, out hit, maxDistance);
		}
		if (num3 > 1f)
		{
			return LineTest(point1, point2, ray, radius, out hit, maxDistance);
		}
		Vector3 val5 = Vector3.Cross(val4, val);
		float num4 = Vector3.Dot(((Ray)(ref ray)).direction, val5) * num2;
		if (num4 < 0f)
		{
			return LineTest(point0, point1, ray, radius, out hit, maxDistance);
		}
		if (num3 + num4 > 1f)
		{
			return LineTest(point1, point2, ray, radius, out hit, maxDistance);
		}
		float num5 = Vector3.Dot(val2, val5) * num2;
		if (num5 < 0f || num5 > maxDistance)
		{
			return false;
		}
		Vector3 point = ((Ray)(ref ray)).origin + num5 * ((Ray)(ref ray)).direction;
		((RaycastHit)(ref hit)).point = point;
		((RaycastHit)(ref hit)).distance = num5;
		Vector3 val6 = Vector3.Cross(val, val2);
		((RaycastHit)(ref hit)).normal = ((Vector3)(ref val6)).normalized;
		return true;
	}

	private bool LineTest(Vector3 a, Vector3 b, Ray ray, float radius, out RaycastHit hit, float maxDistance)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		if (new Line(point0, point2).Trace(ray, radius, out hit, maxDistance))
		{
			((RaycastHit)(ref hit)).normal = Normal;
			return true;
		}
		return false;
	}

	public Vector3 ClosestPoint(Vector3 pos)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_021d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0224: Unknown result type (might be due to invalid IL or missing references)
		//IL_0225: Unknown result type (might be due to invalid IL or missing references)
		//IL_022a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0231: Unknown result type (might be due to invalid IL or missing references)
		//IL_0232: Unknown result type (might be due to invalid IL or missing references)
		//IL_0237: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = point0 - pos;
		Vector3 val2 = point1 - point0;
		Vector3 val3 = point2 - point0;
		float num = Vector3.Dot(val2, val2);
		float num2 = Vector3.Dot(val2, val3);
		float num3 = Vector3.Dot(val3, val3);
		float num4 = Vector3.Dot(val2, val);
		float num5 = Vector3.Dot(val3, val);
		float num6 = num * num3 - num2 * num2;
		float num7 = num2 * num5 - num3 * num4;
		float num8 = num2 * num4 - num * num5;
		if (num7 + num8 < num6)
		{
			if (num7 < 0f)
			{
				if (num8 < 0f)
				{
					if (num4 < 0f)
					{
						num7 = Mathf.Clamp01((0f - num4) / num);
						num8 = 0f;
					}
					else
					{
						num7 = 0f;
						num8 = Mathf.Clamp01((0f - num5) / num3);
					}
				}
				else
				{
					num7 = 0f;
					num8 = Mathf.Clamp01((0f - num5) / num3);
				}
			}
			else if (num8 < 0f)
			{
				num7 = Mathf.Clamp01((0f - num4) / num);
				num8 = 0f;
			}
			else
			{
				float num9 = 1f / num6;
				num7 *= num9;
				num8 *= num9;
			}
		}
		else if (num7 < 0f)
		{
			float num10 = num2 + num4;
			float num11 = num3 + num5;
			if (num11 > num10)
			{
				float num12 = num11 - num10;
				float num13 = num - 2f * num2 + num3;
				num7 = Mathf.Clamp01(num12 / num13);
				num8 = 1f - num7;
			}
			else
			{
				num8 = Mathf.Clamp01((0f - num5) / num3);
				num7 = 0f;
			}
		}
		else if (num8 < 0f)
		{
			if (num + num4 > num2 + num5)
			{
				float num14 = num3 + num5 - num2 - num4;
				float num15 = num - 2f * num2 + num3;
				num7 = Mathf.Clamp01(num14 / num15);
				num8 = 1f - num7;
			}
			else
			{
				num7 = Mathf.Clamp01((0f - num5) / num3);
				num8 = 0f;
			}
		}
		else
		{
			float num16 = num3 + num5 - num2 - num4;
			float num17 = num - 2f * num2 + num3;
			num7 = Mathf.Clamp01(num16 / num17);
			num8 = 1f - num7;
		}
		return point0 + num7 * val2 + num8 * val3;
	}

	public float Distance(Vector3 pos)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = pos - ClosestPoint(pos);
		return ((Vector3)(ref val)).magnitude;
	}

	public float SqrDistance(Vector3 pos)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = pos - ClosestPoint(pos);
		return ((Vector3)(ref val)).sqrMagnitude;
	}

	public float Area()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		float num = Vector3.Distance(point0, point1);
		float num2 = Vector3.Distance(point1, point2);
		float num3 = Vector3.Distance(point2, point0);
		return 0.25f * Mathf.Sqrt((num + num2 + num3) * (0f - num + num2 + num3) * (num - num2 + num3) * (num + num2 - num3));
	}
}
