using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Newtonsoft.Json;
using UnityEngine;

public class TextTable
{
	private class Row
	{
		public string[] values;

		public Row(string[] values)
		{
			this.values = values;
		}
	}

	private class Column
	{
		public string title;

		public int width;

		public Column(string title)
		{
			this.title = title;
			width = title.Length;
		}
	}

	private List<Row> rows = new List<Row>();

	private List<Column> columns = new List<Column>();

	private StringBuilder builder = new StringBuilder();

	private string text;

	private string jsonText;

	private static Encoding utf8NoBom = new UTF8Encoding(encoderShouldEmitUTF8Identifier: false);

	public void Clear()
	{
		rows.Clear();
		columns.Clear();
		MarkDirty();
	}

	public void AddColumns(params string[] values)
	{
		for (int i = 0; i < values.Length; i++)
		{
			columns.Add(new Column(values[i]));
		}
		MarkDirty();
	}

	public void AddColumn(string title)
	{
		columns.Add(new Column(title));
		MarkDirty();
	}

	public void AddRow(params string[] values)
	{
		int num = Mathf.Min(columns.Count, values.Length);
		for (int i = 0; i < num; i++)
		{
			columns[i].width = Mathf.Max(columns[i].width, values[i].Length);
		}
		rows.Add(new Row(values));
		MarkDirty();
	}

	public string ToJson()
	{
		if (jsonText == null)
		{
			using MemoryStream memoryStream = new MemoryStream();
			using (StreamWriter textWriter = new StreamWriter(memoryStream, utf8NoBom, 1024, leaveOpen: true))
			{
				using JsonTextWriter jsonTextWriter = new JsonTextWriter(textWriter);
				jsonTextWriter.WriteStartArray();
				foreach (Row row in rows)
				{
					jsonTextWriter.WriteStartObject();
					for (int i = 0; i < Math.Min(row.values.Length, columns.Count); i++)
					{
						jsonTextWriter.WritePropertyName(columns[i].title);
						jsonTextWriter.WriteValue(row.values[i]);
					}
					jsonTextWriter.WriteEndObject();
				}
				jsonTextWriter.WriteEndArray();
			}
			jsonText = Encoding.UTF8.GetString(memoryStream.GetBuffer(), 0, (int)memoryStream.Length);
		}
		return jsonText;
	}

	public override string ToString()
	{
		if (text == null)
		{
			builder.Clear();
			for (int i = 0; i < columns.Count; i++)
			{
				builder.Append(columns[i].title.PadRight(columns[i].width + 1));
			}
			builder.AppendLine();
			for (int j = 0; j < rows.Count; j++)
			{
				Row row = rows[j];
				int num = Mathf.Min(columns.Count, row.values.Length);
				for (int k = 0; k < num; k++)
				{
					builder.Append(row.values[k].PadRight(columns[k].width + 1));
				}
				builder.AppendLine();
			}
			text = builder.ToString();
		}
		return text;
	}

	private void MarkDirty()
	{
		jsonText = null;
		text = null;
	}
}
