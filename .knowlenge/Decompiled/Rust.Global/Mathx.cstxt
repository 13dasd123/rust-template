using System;
using UnityEngine;

public static class Mathx
{
	public unsafe static float Increment(float f)
	{
		if (float.IsNaN(f))
		{
			return f;
		}
		if (f == 0f)
		{
			return float.Epsilon;
		}
		int num = *(int*)(&f);
		num = ((f > 0f) ? (num + 1) : (num - 1));
		return *(float*)(&num);
	}

	public unsafe static float Decrement(float f)
	{
		if (float.IsNaN(f))
		{
			return f;
		}
		if (f == 0f)
		{
			return -1E-45f;
		}
		int num = *(int*)(&f);
		num = ((f > 0f) ? (num - 1) : (num + 1));
		return *(float*)(&num);
	}

	public static float Above(float latitude, float lower, float fade = 0.1f)
	{
		latitude -= fade * 0.5f;
		return Mathf.Clamp01((latitude - lower + fade) / fade);
	}

	public static float Tween(float latitude, float lower, float upper, float fade = 0.1f)
	{
		latitude -= fade * 0.5f;
		return Mathf.Clamp01((latitude - lower + fade) / fade) * Mathf.Clamp01((upper - latitude) / fade);
	}

	public static float Below(float latitude, float upper, float fade = 0.1f)
	{
		latitude -= fade * 0.5f;
		return Mathf.Clamp01((upper - latitude) / fade);
	}

	public static Color Lerp3(float f1, Color c1, float f2, Color c2, float f3, Color c3)
	{
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		if (f1 == 1f)
		{
			return c1;
		}
		if (f2 == 1f)
		{
			return c2;
		}
		if (f3 == 1f)
		{
			return c3;
		}
		if (f3 == 0f)
		{
			return f1 * c1 + f2 * c2;
		}
		if (f1 == 0f)
		{
			return f2 * c2 + f3 * c3;
		}
		return f1 * c1 + f2 * c2 + f3 * c3;
	}

	public static int Clamp(int v, int min, int max)
	{
		if (v >= min)
		{
			if (v <= max)
			{
				return v;
			}
			return max;
		}
		return min;
	}

	public static int Sign(int v)
	{
		return Math.Sign(v);
	}

	public static float SmoothMax(float a, float b, float fade = 0.1f)
	{
		return Mathf.SmoothStep(a, b, 0.5f + (b - a) / fade);
	}

	public static float Discretize01(float v, int steps)
	{
		return (float)Mathf.RoundToInt(Mathf.Clamp01(v) * (float)steps) / (float)steps;
	}

	public static float Min(float f1, float f2, float f3)
	{
		return Mathf.Min(Mathf.Min(f1, f2), f3);
	}

	public static float Min(float f1, float f2, float f3, float f4)
	{
		return Mathf.Min(Mathf.Min(f1, f2), Mathf.Min(f3, f4));
	}

	public static int Min(int f1, int f2, int f3)
	{
		return Mathf.Min(Mathf.Min(f1, f2), f3);
	}

	public static int Min(int f1, int f2, int f3, int f4)
	{
		return Mathf.Min(Mathf.Min(f1, f2), Mathf.Min(f3, f4));
	}

	public static float Max(float f1, float f2, float f3)
	{
		return Mathf.Max(Mathf.Max(f1, f2), f3);
	}

	public static float Max(float f1, float f2, float f3, float f4)
	{
		return Mathf.Max(Mathf.Max(f1, f2), Mathf.Max(f3, f4));
	}

	public static int Max(int f1, int f2, int f3)
	{
		return Mathf.Max(Mathf.Max(f1, f2), f3);
	}

	public static int Max(int f1, int f2, int f3, int f4)
	{
		return Mathf.Max(Mathf.Max(f1, f2), Mathf.Max(f3, f4));
	}

	public static uint Min(uint i1, uint i2)
	{
		if (i1 >= i2)
		{
			return i2;
		}
		return i1;
	}

	public static uint Max(uint i1, uint i2)
	{
		if (i1 <= i2)
		{
			return i2;
		}
		return i1;
	}

	public static float fsel(float c, float x, float y)
	{
		if (c >= 0f)
		{
			return x;
		}
		return y;
	}

	public static float RemapValClamped(float val, float A, float B, float C, float D)
	{
		if (A == B)
		{
			return fsel(val - B, D, C);
		}
		float num = (val - A) / (B - A);
		num = Mathf.Clamp(num, 0f, 1f);
		return C + (D - C) * num;
	}

	public static bool HasSignFlipped(int signA, int signB)
	{
		if (signA == 0 || signB == 0)
		{
			return false;
		}
		if (signA == signB || signB == signA)
		{
			return false;
		}
		return true;
	}

	public static int GetSignZero(float input, bool useApproximate = true)
	{
		if (useApproximate)
		{
			if (Mathf.Approximately(input, 0f))
			{
				return 0;
			}
			if (input == 0f)
			{
				return 0;
			}
		}
		if (!(input < 0f))
		{
			return 1;
		}
		return -1;
	}

	public static float Lerp(float from, float to, float speed, float deltaTime)
	{
		return Mathf.Lerp(to, from, Mathf.Pow(2f, (0f - speed) * deltaTime));
	}

	public static float Lerp(float from, float to, float speed)
	{
		return Lerp(from, to, speed, Time.deltaTime);
	}

	public static Vector3 Lerp(Vector3 from, Vector3 to, float speed, float deltaTime)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		return Vector3.Lerp(to, from, Mathf.Pow(2f, (0f - speed) * deltaTime));
	}

	public static Vector3 Lerp(Vector3 from, Vector3 to, float speed)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		return Lerp(from, to, speed, Time.deltaTime);
	}

	public static Quaternion Lerp(Quaternion from, Quaternion to, float speed, float deltaTime)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		return Quaternion.Lerp(to, from, Mathf.Pow(2f, (0f - speed) * deltaTime));
	}

	public static Quaternion Lerp(Quaternion from, Quaternion to, float speed)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		return Lerp(from, to, speed, Time.deltaTime);
	}
}
