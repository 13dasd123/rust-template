using UnityEngine;
using UnityEngine.Rendering;

public static class IndirectLighting
{
	private static SphericalHarmonicsL2[] lightProbe = (SphericalHarmonicsL2[])(object)new SphericalHarmonicsL2[1];

	public static SphericalHarmonicsL2[] LightProbe => lightProbe;

	public static void UpdateLightProbe()
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		LightProbes.GetInterpolatedProbe(Vector3.zero, (Renderer)null, ref lightProbe[0]);
	}

	public static void UpdateAmbientProbe()
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Invalid comparison between Unknown and I4
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Invalid comparison between Unknown and I4
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_013e: Unknown result type (might be due to invalid IL or missing references)
		//IL_017b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_0226: Unknown result type (might be due to invalid IL or missing references)
		//IL_0255: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0097: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bf: Unknown result type (might be due to invalid IL or missing references)
		SphericalHarmonicsL2 val = RenderSettings.ambientProbe;
		Color val2;
		if ((int)RenderSettings.ambientMode == 3)
		{
			val = default(SphericalHarmonicsL2);
			val2 = RenderSettings.ambientSkyColor;
			((SphericalHarmonicsL2)(ref val)).AddAmbientLight(((Color)(ref val2)).linear * RenderSettings.ambientIntensity);
		}
		else if ((int)RenderSettings.ambientMode == 1)
		{
			val2 = RenderSettings.ambientSkyColor;
			Color val3 = ((Color)(ref val2)).linear * RenderSettings.ambientIntensity;
			val2 = RenderSettings.ambientEquatorColor;
			Color val4 = ((Color)(ref val2)).linear * RenderSettings.ambientIntensity;
			val2 = RenderSettings.ambientGroundColor;
			Color val5 = ((Color)(ref val2)).linear * RenderSettings.ambientIntensity;
			val = default(SphericalHarmonicsL2);
			((SphericalHarmonicsL2)(ref val)).AddAmbientLight(val4);
			((SphericalHarmonicsL2)(ref val)).AddDirectionalLight(Vector3.up, val3 - val4, 0.5f);
			((SphericalHarmonicsL2)(ref val)).AddDirectionalLight(Vector3.down, val5 - val4, 0.5f);
		}
		Shader.SetGlobalVector("ambient_SHAr", new Vector4(((SphericalHarmonicsL2)(ref val))[0, 3], ((SphericalHarmonicsL2)(ref val))[0, 1], ((SphericalHarmonicsL2)(ref val))[0, 2], ((SphericalHarmonicsL2)(ref val))[0, 0] - ((SphericalHarmonicsL2)(ref val))[0, 6]));
		Shader.SetGlobalVector("ambient_SHAg", new Vector4(((SphericalHarmonicsL2)(ref val))[1, 3], ((SphericalHarmonicsL2)(ref val))[1, 1], ((SphericalHarmonicsL2)(ref val))[1, 2], ((SphericalHarmonicsL2)(ref val))[1, 0] - ((SphericalHarmonicsL2)(ref val))[1, 6]));
		Shader.SetGlobalVector("ambient_SHAb", new Vector4(((SphericalHarmonicsL2)(ref val))[2, 3], ((SphericalHarmonicsL2)(ref val))[2, 1], ((SphericalHarmonicsL2)(ref val))[2, 2], ((SphericalHarmonicsL2)(ref val))[2, 0] - ((SphericalHarmonicsL2)(ref val))[2, 6]));
		Shader.SetGlobalVector("ambient_SHBr", new Vector4(((SphericalHarmonicsL2)(ref val))[0, 4], ((SphericalHarmonicsL2)(ref val))[0, 5], ((SphericalHarmonicsL2)(ref val))[0, 6] * 3f, ((SphericalHarmonicsL2)(ref val))[0, 7]));
		Shader.SetGlobalVector("ambient_SHBg", new Vector4(((SphericalHarmonicsL2)(ref val))[1, 4], ((SphericalHarmonicsL2)(ref val))[1, 5], ((SphericalHarmonicsL2)(ref val))[1, 6] * 3f, ((SphericalHarmonicsL2)(ref val))[1, 7]));
		Shader.SetGlobalVector("ambient_SHBb", new Vector4(((SphericalHarmonicsL2)(ref val))[2, 4], ((SphericalHarmonicsL2)(ref val))[2, 5], ((SphericalHarmonicsL2)(ref val))[2, 6] * 3f, ((SphericalHarmonicsL2)(ref val))[2, 7]));
		Shader.SetGlobalVector("ambient_SHC", new Vector4(((SphericalHarmonicsL2)(ref val))[0, 8], ((SphericalHarmonicsL2)(ref val))[1, 8], ((SphericalHarmonicsL2)(ref val))[2, 8], 1f));
		Shader.SetGlobalFloat("global_MainLightingAtten", RenderSettings.ambientIntensity);
	}
}
