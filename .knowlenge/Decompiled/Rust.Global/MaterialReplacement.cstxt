using System;
using System.Collections.Generic;
using System.Linq;
using Facepunch;
using Facepunch.Extend;
using UnityEngine;

public class MaterialReplacement : MonoBehaviour
{
	private bool initialized;

	public Material[] Default;

	public Material[] Override;

	public Renderer Renderer;

	public static void ReplaceRecursive(GameObject go, Material mat)
	{
		List<Renderer> list = Pool.Get<List<Renderer>>();
		((Component)go.transform).GetComponentsInChildren<Renderer>(true, list);
		foreach (Renderer item in list)
		{
			if (!(item is ParticleSystemRenderer))
			{
				MaterialReplacement orAddComponent = TransformEx.GetOrAddComponent<MaterialReplacement>(((Component)item).transform);
				orAddComponent.Init();
				orAddComponent.Replace(mat);
			}
		}
		Pool.FreeUnmanaged<Renderer>(ref list);
	}

	public static void ReplaceRecursive(GameObject obj, Material[] find, Material[] replace)
	{
		if (find.Length != replace.Length)
		{
			Debug.LogWarning((object)$"Incorrect material array length: {find.Length} != {replace.Length} {((Object)obj).name}");
			return;
		}
		List<Renderer> list = Pool.Get<List<Renderer>>();
		obj.GetComponentsInChildren<Renderer>(true, list);
		foreach (Renderer item in list)
		{
			if (!(item is ParticleSystemRenderer) && MaterialsContainAny(item.sharedMaterials, find))
			{
				MaterialReplacement orAddComponent = TransformEx.GetOrAddComponent<MaterialReplacement>(((Component)item).transform);
				orAddComponent.Init();
				orAddComponent.Revert();
				orAddComponent.Replace(find, replace);
			}
		}
		Pool.FreeUnmanaged<Renderer>(ref list);
	}

	public static void Prepare(GameObject go)
	{
		List<Renderer> list = Pool.Get<List<Renderer>>();
		go.GetComponentsInChildren<Renderer>(true, list);
		foreach (Renderer item in list)
		{
			if (!(item is ParticleSystemRenderer))
			{
				TransformEx.GetOrAddComponent<MaterialReplacement>(((Component)item).transform).Init();
			}
		}
		Pool.FreeUnmanaged<Renderer>(ref list);
	}

	public static bool MaterialsContainAny(Material[] source, Material[] find)
	{
		for (int i = 0; i < source.Length; i++)
		{
			if (find.Contains(source[i]))
			{
				return true;
			}
		}
		return false;
	}

	public static void Reset(GameObject go)
	{
		List<MaterialReplacement> list = Pool.Get<List<MaterialReplacement>>();
		go.GetComponentsInChildren<MaterialReplacement>(true, list);
		foreach (MaterialReplacement item in list)
		{
			item.Revert();
		}
		Pool.FreeUnmanaged<MaterialReplacement>(ref list);
	}

	public void Init()
	{
		if (!initialized)
		{
			initialized = true;
			Renderer = ((Component)this).GetComponent<Renderer>();
			Default = Renderer.sharedMaterials;
			Override = (Material[])(object)new Material[Default.Length];
			Array.Copy(Default, Override, Default.Length);
		}
	}

	private void Replace(Material mat)
	{
		if (Object.op_Implicit((Object)(object)Renderer))
		{
			for (int i = 0; i < Override.Length; i++)
			{
				Override[i] = mat;
			}
			Renderer.sharedMaterials = Override;
		}
	}

	private void Replace(Material find, Material replace)
	{
		if (!Object.op_Implicit((Object)(object)Renderer))
		{
			return;
		}
		for (int i = 0; i < Default.Length; i++)
		{
			if ((Object)(object)find == (Object)(object)Default[i])
			{
				Override[i] = replace;
			}
		}
		Renderer.sharedMaterials = Override;
	}

	private void Replace(Material[] find, Material[] replace)
	{
		if (!Object.op_Implicit((Object)(object)Renderer))
		{
			return;
		}
		int num = Mathf.Min(find.Length, replace.Length);
		for (int i = 0; i < Default.Length; i++)
		{
			for (int j = 0; j < num; j++)
			{
				if ((Object)(object)find[j] == (Object)(object)Default[i])
				{
					Override[i] = replace[j];
				}
			}
		}
		Renderer.sharedMaterials = Override;
		if (Renderer.enabled)
		{
			Renderer.enabled = false;
			Renderer.enabled = true;
		}
	}

	private void Revert()
	{
		if (Renderer != null)
		{
			Renderer.sharedMaterials = Default;
			Array.Copy(Default, Override, Default.Length);
		}
	}
}
