using UnityEngine;

public struct Line
{
	public Vector3 point0;

	public Vector3 point1;

	public float Length => Vector3.Distance(point0, point1);

	public float LengthSqr => Vector3.SqrMagnitude(point1 - point0);

	public Line(Vector3 point0, Vector3 point1)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		this.point0 = point0;
		this.point1 = point1;
	}

	public Line(Vector3 origin, Vector3 direction, float length)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		point0 = origin;
		point1 = origin + direction * length;
	}

	public bool Trace(Ray ray, float radius, out RaycastHit hit, float maxDistance = float.PositiveInfinity)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0104: Unknown result type (might be due to invalid IL or missing references)
		//IL_0108: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_011b: Unknown result type (might be due to invalid IL or missing references)
		hit = default(RaycastHit);
		if (radius <= 0f)
		{
			return false;
		}
		Vector3 val = point1 - point0;
		Vector3 direction = ((Ray)(ref ray)).direction;
		Vector3 val2 = point0 - ((Ray)(ref ray)).origin;
		float num = Vector3.Dot(val, val);
		float num2 = Vector3.Dot(val, direction);
		float num3 = Vector3.Dot(direction, val2);
		float num4 = num - num2 * num2;
		float num5 = 0f;
		float num6 = num3;
		if (num4 >= Mathf.Epsilon)
		{
			float num7 = Vector3.Dot(val, val2);
			float num8 = 1f / num4;
			num5 = num8 * (num2 * num3 - num7);
			num6 = num8 * (num * num3 - num2 * num7);
			num5 = Mathf.Clamp01(num5);
		}
		if (num6 < 0f || num6 > maxDistance)
		{
			return false;
		}
		Vector3 val3 = point0 + num5 * val;
		Vector3 val4 = ((Ray)(ref ray)).origin + num6 * direction - val3;
		float magnitude = ((Vector3)(ref val4)).magnitude;
		if (magnitude > radius)
		{
			return false;
		}
		((RaycastHit)(ref hit)).point = val3;
		((RaycastHit)(ref hit)).normal = val4 / magnitude;
		((RaycastHit)(ref hit)).distance = Vector3.Distance(((Ray)(ref ray)).origin, ((RaycastHit)(ref hit)).point);
		return true;
	}

	public Vector3 ClosestPoint(Vector3 pos)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = point1 - point0;
		float magnitude = ((Vector3)(ref val)).magnitude;
		if (magnitude < 0.001f)
		{
			return point0;
		}
		Vector3 val2 = val / magnitude;
		return point0 + Mathf.Clamp(Vector3.Dot(pos - point0, val2), 0f, magnitude) * val2;
	}

	public Vector3 ClosestPoint2D(Vector3 pos)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = point1 - point0;
		float magnitude = ((Vector3)(ref val)).magnitude;
		if (magnitude < 0.001f)
		{
			return point0;
		}
		float num = val.Magnitude2D();
		Vector3 val2 = val / magnitude;
		return point0 + Mathf.Clamp(Vector3.Dot(pos.XZ3D() - point0.XZ3D(), val2.XZ3D()), 0f, num) * (magnitude / num) * val2;
	}

	public float Distance(Vector3 pos)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = pos - ClosestPoint(pos);
		return ((Vector3)(ref val)).magnitude;
	}

	public float SqrDistance(Vector3 pos)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = pos - ClosestPoint(pos);
		return ((Vector3)(ref val)).sqrMagnitude;
	}

	public Vector3 ClosestPoint(in Line other)
	{
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		ClosestPoints(in other, out var closestThis, out var _);
		return closestThis;
	}

	public void ClosestPoints(in Line other, out Vector3 closestThis, out Vector3 closestOther)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		//IL_006f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0074: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_015c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0161: Unknown result type (might be due to invalid IL or missing references)
		//IL_0164: Unknown result type (might be due to invalid IL or missing references)
		//IL_0169: Unknown result type (might be due to invalid IL or missing references)
		//IL_016e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0175: Unknown result type (might be due to invalid IL or missing references)
		//IL_017a: Unknown result type (might be due to invalid IL or missing references)
		//IL_017d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0182: Unknown result type (might be due to invalid IL or missing references)
		//IL_0187: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = point1 - point0;
		Vector3 val2 = other.point1 - other.point0;
		Vector3 val3 = point0 - other.point0;
		float sqrMagnitude = ((Vector3)(ref val)).sqrMagnitude;
		float sqrMagnitude2 = ((Vector3)(ref val2)).sqrMagnitude;
		float num = Vector3.Dot(val2, val3);
		if (sqrMagnitude <= Mathf.Epsilon && sqrMagnitude2 <= Mathf.Epsilon)
		{
			closestThis = point0;
			closestOther = other.point0;
			return;
		}
		float num2 = 0f;
		float num3 = 0f;
		if (sqrMagnitude <= Mathf.Epsilon)
		{
			num2 = 0f;
			num3 = Mathf.Clamp01(num / sqrMagnitude2);
		}
		else
		{
			float num4 = Vector3.Dot(val, val3);
			if (sqrMagnitude2 <= Mathf.Epsilon)
			{
				num3 = 0f;
				num2 = Mathf.Clamp01((0f - num4) / sqrMagnitude);
			}
			else
			{
				float num5 = Vector3.Dot(val, val2);
				float num6 = sqrMagnitude * sqrMagnitude2 - num5 * num5;
				num2 = ((num6 == 0f) ? 0f : Mathf.Clamp01((num5 * num - num4 * sqrMagnitude2) / num6));
				num3 = num5 * num2 + num;
				if (num3 < 0f)
				{
					num3 = 0f;
					num2 = Mathf.Clamp01((0f - num4) / sqrMagnitude);
				}
				else if (num3 > sqrMagnitude2)
				{
					num3 = 1f;
					num2 = Mathf.Clamp01((num5 - num4) / sqrMagnitude);
				}
				else
				{
					num3 /= sqrMagnitude2;
				}
			}
		}
		closestThis = point0 + val * num2;
		closestOther = other.point0 + val2 * num3;
	}

	public float Distance(Line other)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		ClosestPoints(in other, out var closestThis, out var closestOther);
		return Vector3.Distance(closestThis, closestOther);
	}

	public float SqrDistance(Line other)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		ClosestPoints(in other, out var closestThis, out var closestOther);
		return Vector3.SqrMagnitude(closestThis - closestOther);
	}
}
