using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using UnityEngine;

public static class StringEx
{
	public static string Replace(this string originalString, string oldValue, string newValue, StringComparison comparisonType)
	{
		int startIndex = 0;
		while (true)
		{
			startIndex = originalString.IndexOf(oldValue, startIndex, comparisonType);
			if (startIndex == -1)
			{
				break;
			}
			originalString = originalString.Substring(0, startIndex) + newValue + originalString.Substring(startIndex + oldValue.Length);
			startIndex += newValue.Length;
		}
		return originalString;
	}

	public static bool Contains(this string haystack, string needle, CompareOptions options)
	{
		return CultureInfo.InvariantCulture.CompareInfo.IndexOf(haystack, needle, options) >= 0;
	}

	public static bool IsLower(this string str)
	{
		for (int i = 0; i < str.Length; i++)
		{
			if (char.IsUpper(str[i]))
			{
				return false;
			}
		}
		return true;
	}

	public static string ToPrintable(this string str, int maxLength = int.MaxValue)
	{
		StringBuilder stringBuilder = new StringBuilder();
		if (!string.IsNullOrEmpty(str))
		{
			int num = Mathf.Min(str.Length, maxLength);
			for (int i = 0; i < num; i++)
			{
				char c = str[i];
				if (!char.IsControl(c))
				{
					stringBuilder.Append(c);
				}
			}
		}
		return stringBuilder.ToString();
	}

	public static IEnumerable<string> SplitToLines(this string input)
	{
		if (input == null)
		{
			yield break;
		}
		using StringReader reader = new StringReader(input);
		while (true)
		{
			string text;
			string line = (text = reader.ReadLine());
			if (text != null)
			{
				yield return line;
				continue;
			}
			break;
		}
	}

	public static IEnumerable<string> SplitToChunks(this string str, int chunkLength)
	{
		if (string.IsNullOrEmpty(str))
		{
			throw new ArgumentException("string cannot be null");
		}
		if (chunkLength < 1)
		{
			throw new ArgumentException("chunk length needs to be more than 0");
		}
		for (int i = 0; i < str.Length; i += chunkLength)
		{
			if (chunkLength + i >= str.Length)
			{
				chunkLength = str.Length - i;
			}
			yield return str.Substring(i, chunkLength);
		}
	}

	public static uint ManifestHash(this string str)
	{
		if (string.IsNullOrEmpty(str))
		{
			return 0u;
		}
		if (!str.IsLower())
		{
			str = str.ToLower();
		}
		MD5CryptoServiceProvider mD5CryptoServiceProvider = new MD5CryptoServiceProvider();
		byte[] value = mD5CryptoServiceProvider.ComputeHash(Encoding.UTF8.GetBytes(str));
		return BitConverter.ToUInt32(value, 0);
	}
}
