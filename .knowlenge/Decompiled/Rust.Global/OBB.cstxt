using UnityEngine;

public struct OBB
{
	public Quaternion rotation;

	public Vector3 position;

	public Vector3 extents;

	public Vector3 forward;

	public Vector3 right;

	public Vector3 up;

	public float reject;

	public OBB(Bounds bounds)
		: this(Vector3.zero, Vector3.one, Quaternion.identity, bounds)
	{
	}//IL_0001: Unknown result type (might be due to invalid IL or missing references)
	//IL_0006: Unknown result type (might be due to invalid IL or missing references)
	//IL_000b: Unknown result type (might be due to invalid IL or missing references)
	//IL_0010: Unknown result type (might be due to invalid IL or missing references)


	public OBB(Transform transform, Bounds bounds)
		: this(transform.position, transform.lossyScale, transform.rotation, bounds)
	{
	}//IL_0002: Unknown result type (might be due to invalid IL or missing references)
	//IL_0008: Unknown result type (might be due to invalid IL or missing references)
	//IL_000e: Unknown result type (might be due to invalid IL or missing references)
	//IL_0013: Unknown result type (might be due to invalid IL or missing references)


	public OBB(Vector3 position, Vector3 scale, Quaternion rotation, Bounds bounds)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_005d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0062: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		this.rotation = rotation;
		this.position = position + rotation * Vector3.Scale(scale, ((Bounds)(ref bounds)).center);
		extents = Vector3.Scale(scale, ((Bounds)(ref bounds)).extents);
		forward = rotation * Vector3.forward;
		right = rotation * Vector3.right;
		up = rotation * Vector3.up;
		reject = ((Vector3)(ref extents)).sqrMagnitude;
	}

	public OBB(Vector3 position, Quaternion rotation, Bounds bounds)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		this.rotation = rotation;
		this.position = position + rotation * ((Bounds)(ref bounds)).center;
		extents = ((Bounds)(ref bounds)).extents;
		forward = rotation * Vector3.forward;
		right = rotation * Vector3.right;
		up = rotation * Vector3.up;
		reject = ((Vector3)(ref extents)).sqrMagnitude;
	}

	public OBB(Vector3 position, Vector3 size, Quaternion rotation)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		this.rotation = rotation;
		this.position = position;
		extents = size * 0.5f;
		forward = rotation * Vector3.forward;
		right = rotation * Vector3.right;
		up = rotation * Vector3.up;
		reject = ((Vector3)(ref extents)).sqrMagnitude;
	}

	public void Transform(Vector3 position, Vector3 scale, Quaternion rotation)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		this.rotation *= rotation;
		this.position = position + rotation * Vector3.Scale(scale, this.position);
		extents = Vector3.Scale(scale, extents);
	}

	public Vector3 GetPoint(float x, float y, float z)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0058: Unknown result type (might be due to invalid IL or missing references)
		return position + x * extents.x * right + y * extents.y * up + z * extents.z * forward;
	}

	public Bounds ToBounds()
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_0066: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0079: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_009e: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00db: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0100: Unknown result type (might be due to invalid IL or missing references)
		//IL_0101: Unknown result type (might be due to invalid IL or missing references)
		//IL_0106: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		//IL_0114: Unknown result type (might be due to invalid IL or missing references)
		//IL_0119: Unknown result type (might be due to invalid IL or missing references)
		//IL_011a: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0120: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_0126: Unknown result type (might be due to invalid IL or missing references)
		//IL_0133: Unknown result type (might be due to invalid IL or missing references)
		//IL_0138: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_013e: Unknown result type (might be due to invalid IL or missing references)
		//IL_013f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0144: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		//IL_014f: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = extents.x * right;
		Vector3 val2 = extents.y * up;
		Vector3 val3 = extents.z * forward;
		Bounds result = default(Bounds);
		((Bounds)(ref result))..ctor(position, Vector3.zero);
		((Bounds)(ref result)).Encapsulate(position + val2 + val + val3);
		((Bounds)(ref result)).Encapsulate(position + val2 + val - val3);
		((Bounds)(ref result)).Encapsulate(position + val2 - val + val3);
		((Bounds)(ref result)).Encapsulate(position + val2 - val - val3);
		((Bounds)(ref result)).Encapsulate(position - val2 + val + val3);
		((Bounds)(ref result)).Encapsulate(position - val2 + val - val3);
		((Bounds)(ref result)).Encapsulate(position - val2 - val + val3);
		((Bounds)(ref result)).Encapsulate(position - val2 - val - val3);
		return result;
	}

	public bool Contains(Vector3 target)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = target - position;
		if (((Vector3)(ref val)).sqrMagnitude > reject)
		{
			return false;
		}
		return ClosestPoint(target) == target;
	}

	public bool Intersects(OBB target)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0042: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_0103: Unknown result type (might be due to invalid IL or missing references)
		//IL_0119: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0148: Unknown result type (might be due to invalid IL or missing references)
		//IL_015f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0175: Unknown result type (might be due to invalid IL or missing references)
		//IL_018b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c5: Unknown result type (might be due to invalid IL or missing references)
		//IL_021d: Unknown result type (might be due to invalid IL or missing references)
		//IL_022c: Unknown result type (might be due to invalid IL or missing references)
		//IL_023c: Unknown result type (might be due to invalid IL or missing references)
		//IL_024d: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_032d: Unknown result type (might be due to invalid IL or missing references)
		//IL_033c: Unknown result type (might be due to invalid IL or missing references)
		//IL_034c: Unknown result type (might be due to invalid IL or missing references)
		//IL_038e: Unknown result type (might be due to invalid IL or missing references)
		//IL_03a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_03bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_03cd: Unknown result type (might be due to invalid IL or missing references)
		//IL_040f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0425: Unknown result type (might be due to invalid IL or missing references)
		//IL_043e: Unknown result type (might be due to invalid IL or missing references)
		//IL_044e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0490: Unknown result type (might be due to invalid IL or missing references)
		//IL_04a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_04bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_04cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_0511: Unknown result type (might be due to invalid IL or missing references)
		//IL_0527: Unknown result type (might be due to invalid IL or missing references)
		//IL_0540: Unknown result type (might be due to invalid IL or missing references)
		//IL_0550: Unknown result type (might be due to invalid IL or missing references)
		//IL_0592: Unknown result type (might be due to invalid IL or missing references)
		//IL_05a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_05c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_05d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_0613: Unknown result type (might be due to invalid IL or missing references)
		//IL_0629: Unknown result type (might be due to invalid IL or missing references)
		//IL_0642: Unknown result type (might be due to invalid IL or missing references)
		//IL_0652: Unknown result type (might be due to invalid IL or missing references)
		//IL_0694: Unknown result type (might be due to invalid IL or missing references)
		//IL_06aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_06c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_06d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0715: Unknown result type (might be due to invalid IL or missing references)
		//IL_072b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0744: Unknown result type (might be due to invalid IL or missing references)
		//IL_0754: Unknown result type (might be due to invalid IL or missing references)
		//IL_0796: Unknown result type (might be due to invalid IL or missing references)
		//IL_07ac: Unknown result type (might be due to invalid IL or missing references)
		Matrix4x4 val = Matrix4x4.Rotate(rotation);
		Matrix4x4 val2 = Matrix4x4.Rotate(target.rotation);
		Matrix4x4 inverse = ((Matrix4x4)(ref val)).inverse;
		Vector3 val3 = ((Matrix4x4)(ref inverse)).MultiplyPoint3x4(target.position - position);
		Matrix4x4 val4 = ((Matrix4x4)(ref val)).transpose * val2;
		Matrix4x4 identity = Matrix4x4.identity;
		for (int i = 0; i < 3; i++)
		{
			for (int j = 0; j < 3; j++)
			{
				((Matrix4x4)(ref identity))[i, j] = Mathf.Abs(((Matrix4x4)(ref val4))[i, j]) + Mathf.Epsilon;
			}
		}
		if (Mathf.Abs(val3.x) > extents.x + target.extents.x * ((Matrix4x4)(ref identity))[0, 0] + target.extents.y * ((Matrix4x4)(ref identity))[0, 1] + target.extents.z * ((Matrix4x4)(ref identity))[0, 2])
		{
			return false;
		}
		if (Mathf.Abs(val3.y) > extents.y + target.extents.x * ((Matrix4x4)(ref identity))[1, 0] + target.extents.y * ((Matrix4x4)(ref identity))[1, 1] + target.extents.z * ((Matrix4x4)(ref identity))[1, 2])
		{
			return false;
		}
		if (Mathf.Abs(val3.z) > extents.z + target.extents.x * ((Matrix4x4)(ref identity))[2, 0] + target.extents.y * ((Matrix4x4)(ref identity))[2, 1] + target.extents.z * ((Matrix4x4)(ref identity))[2, 2])
		{
			return false;
		}
		if (Mathf.Abs(val3.x * ((Matrix4x4)(ref val4))[0, 0] + val3.y * ((Matrix4x4)(ref val4))[1, 0] + val3.z * ((Matrix4x4)(ref val4))[2, 0]) > extents.x * ((Matrix4x4)(ref identity))[0, 0] + extents.y * ((Matrix4x4)(ref identity))[1, 0] + extents.z * ((Matrix4x4)(ref identity))[2, 0] + target.extents.x)
		{
			return false;
		}
		if (Mathf.Abs(val3.x * ((Matrix4x4)(ref val4))[0, 1] + val3.y * ((Matrix4x4)(ref val4))[1, 1] + val3.z * ((Matrix4x4)(ref val4))[2, 1]) > extents.x * ((Matrix4x4)(ref identity))[0, 1] + extents.y * ((Matrix4x4)(ref identity))[1, 1] + extents.z * ((Matrix4x4)(ref identity))[2, 1] + target.extents.y)
		{
			return false;
		}
		if (Mathf.Abs(val3.x * ((Matrix4x4)(ref val4))[0, 2] + val3.y * ((Matrix4x4)(ref val4))[1, 2] + val3.z * ((Matrix4x4)(ref val4))[2, 2]) > extents.x * ((Matrix4x4)(ref identity))[0, 2] + extents.y * ((Matrix4x4)(ref identity))[1, 2] + extents.z * ((Matrix4x4)(ref identity))[2, 2] + target.extents.z)
		{
			return false;
		}
		if (Mathf.Abs(val3.z * ((Matrix4x4)(ref val4))[1, 0] - val3.y * ((Matrix4x4)(ref val4))[2, 0]) > extents.y * ((Matrix4x4)(ref identity))[2, 0] + extents.z * ((Matrix4x4)(ref identity))[1, 0] + target.extents.y * ((Matrix4x4)(ref identity))[0, 2] + target.extents.z * ((Matrix4x4)(ref identity))[0, 1])
		{
			return false;
		}
		if (Mathf.Abs(val3.z * ((Matrix4x4)(ref val4))[1, 1] - val3.y * ((Matrix4x4)(ref val4))[2, 1]) > extents.y * ((Matrix4x4)(ref identity))[2, 1] + extents.z * ((Matrix4x4)(ref identity))[1, 1] + target.extents.x * ((Matrix4x4)(ref identity))[0, 2] + target.extents.z * ((Matrix4x4)(ref identity))[0, 0])
		{
			return false;
		}
		if (Mathf.Abs(val3.z * ((Matrix4x4)(ref val4))[1, 2] - val3.y * ((Matrix4x4)(ref val4))[2, 2]) > extents.y * ((Matrix4x4)(ref identity))[2, 2] + extents.z * ((Matrix4x4)(ref identity))[1, 2] + target.extents.x * ((Matrix4x4)(ref identity))[0, 1] + target.extents.y * ((Matrix4x4)(ref identity))[0, 0])
		{
			return false;
		}
		if (Mathf.Abs(val3.x * ((Matrix4x4)(ref val4))[2, 0] - val3.z * ((Matrix4x4)(ref val4))[0, 0]) > extents.x * ((Matrix4x4)(ref identity))[2, 0] + extents.z * ((Matrix4x4)(ref identity))[0, 0] + target.extents.y * ((Matrix4x4)(ref identity))[1, 2] + target.extents.z * ((Matrix4x4)(ref identity))[1, 1])
		{
			return false;
		}
		if (Mathf.Abs(val3.x * ((Matrix4x4)(ref val4))[2, 1] - val3.z * ((Matrix4x4)(ref val4))[0, 1]) > extents.x * ((Matrix4x4)(ref identity))[2, 1] + extents.z * ((Matrix4x4)(ref identity))[0, 1] + target.extents.x * ((Matrix4x4)(ref identity))[1, 2] + target.extents.z * ((Matrix4x4)(ref identity))[1, 0])
		{
			return false;
		}
		if (Mathf.Abs(val3.x * ((Matrix4x4)(ref val4))[2, 2] - val3.z * ((Matrix4x4)(ref val4))[0, 2]) > extents.x * ((Matrix4x4)(ref identity))[2, 2] + extents.z * ((Matrix4x4)(ref identity))[0, 2] + target.extents.x * ((Matrix4x4)(ref identity))[1, 1] + target.extents.y * ((Matrix4x4)(ref identity))[1, 0])
		{
			return false;
		}
		if (Mathf.Abs(val3.y * ((Matrix4x4)(ref val4))[0, 0] - val3.x * ((Matrix4x4)(ref val4))[1, 0]) > extents.x * ((Matrix4x4)(ref identity))[1, 0] + extents.y * ((Matrix4x4)(ref identity))[0, 0] + target.extents.y * ((Matrix4x4)(ref identity))[2, 2] + target.extents.z * ((Matrix4x4)(ref identity))[2, 1])
		{
			return false;
		}
		if (Mathf.Abs(val3.y * ((Matrix4x4)(ref val4))[0, 1] - val3.x * ((Matrix4x4)(ref val4))[1, 1]) > extents.x * ((Matrix4x4)(ref identity))[1, 1] + extents.y * ((Matrix4x4)(ref identity))[0, 1] + target.extents.x * ((Matrix4x4)(ref identity))[2, 2] + target.extents.z * ((Matrix4x4)(ref identity))[2, 0])
		{
			return false;
		}
		if (Mathf.Abs(val3.y * ((Matrix4x4)(ref val4))[0, 2] - val3.x * ((Matrix4x4)(ref val4))[1, 2]) > extents.x * ((Matrix4x4)(ref identity))[1, 2] + extents.y * ((Matrix4x4)(ref identity))[0, 2] + target.extents.x * ((Matrix4x4)(ref identity))[2, 1] + target.extents.y * ((Matrix4x4)(ref identity))[2, 0])
		{
			return false;
		}
		return true;
	}

	public bool Intersects2D(OBB target)
	{
		target.position.y = position.y;
		return Intersects(target);
	}

	public bool Intersects(Ray ray)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		RaycastHit hit;
		return Trace(ray, out hit);
	}

	public bool Trace(Ray ray, out RaycastHit hit, float maxDistance = float.PositiveInfinity)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_007f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ca: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cf: Unknown result type (might be due to invalid IL or missing references)
		hit = default(RaycastHit);
		Vector3 val = right;
		Vector3 val2 = up;
		Vector3 val3 = forward;
		float x = extents.x;
		float y = extents.y;
		float z = extents.z;
		Vector3 val4 = ((Ray)(ref ray)).origin - position;
		Vector3 direction = ((Ray)(ref ray)).direction;
		float num = Vector3.Dot(direction, val);
		float num2 = Vector3.Dot(direction, val2);
		float num3 = Vector3.Dot(direction, val3);
		float num4 = Vector3.Dot(val4, val);
		float num5 = Vector3.Dot(val4, val2);
		float num6 = Vector3.Dot(val4, val3);
		float f;
		float f2;
		if (num > 0f)
		{
			f = (0f - x - num4) / num;
			f2 = (x - num4) / num;
		}
		else if (num < 0f)
		{
			f = (x - num4) / num;
			f2 = (0f - x - num4) / num;
		}
		else
		{
			f = float.MinValue;
			f2 = float.MaxValue;
		}
		float f3;
		float f4;
		if (num2 > 0f)
		{
			f3 = (0f - y - num5) / num2;
			f4 = (y - num5) / num2;
		}
		else if (num2 < 0f)
		{
			f3 = (y - num5) / num2;
			f4 = (0f - y - num5) / num2;
		}
		else
		{
			f3 = float.MinValue;
			f4 = float.MaxValue;
		}
		float f5;
		float f6;
		if (num3 > 0f)
		{
			f5 = (0f - z - num6) / num3;
			f6 = (z - num6) / num3;
		}
		else if (num3 < 0f)
		{
			f5 = (z - num6) / num3;
			f6 = (0f - z - num6) / num3;
		}
		else
		{
			f5 = float.MinValue;
			f6 = float.MaxValue;
		}
		float num7 = Mathx.Min(f2, f4, f6);
		if (num7 < 0f)
		{
			return false;
		}
		float num8 = Mathx.Max(f, f3, f5);
		if (num8 > num7)
		{
			return false;
		}
		float num9 = Mathf.Clamp(0f, num8, num7);
		if (num9 > maxDistance)
		{
			return false;
		}
		((RaycastHit)(ref hit)).point = ((Ray)(ref ray)).origin + ((Ray)(ref ray)).direction * num9;
		((RaycastHit)(ref hit)).distance = num9;
		return true;
	}

	public Vector3 ClosestPoint(Vector3 target)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0036: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		//IL_0067: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_009c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		//IL_0109: Unknown result type (might be due to invalid IL or missing references)
		//IL_0110: Unknown result type (might be due to invalid IL or missing references)
		//IL_0115: Unknown result type (might be due to invalid IL or missing references)
		//IL_011a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0102: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0137: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_0149: Unknown result type (might be due to invalid IL or missing references)
		//IL_014e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0153: Unknown result type (might be due to invalid IL or missing references)
		//IL_0187: Unknown result type (might be due to invalid IL or missing references)
		//IL_0189: Unknown result type (might be due to invalid IL or missing references)
		//IL_0190: Unknown result type (might be due to invalid IL or missing references)
		//IL_0195: Unknown result type (might be due to invalid IL or missing references)
		//IL_019a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0166: Unknown result type (might be due to invalid IL or missing references)
		//IL_0168: Unknown result type (might be due to invalid IL or missing references)
		//IL_0178: Unknown result type (might be due to invalid IL or missing references)
		//IL_017d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0182: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a2: Unknown result type (might be due to invalid IL or missing references)
		bool flag = false;
		bool flag2 = false;
		bool flag3 = false;
		Vector3 val = position;
		Vector3 val2 = target - position;
		float num = Vector3.Dot(val2, right);
		if (num > extents.x)
		{
			val += right * extents.x;
		}
		else if (num < 0f - extents.x)
		{
			val -= right * extents.x;
		}
		else
		{
			flag = true;
			val += right * num;
		}
		float num2 = Vector3.Dot(val2, up);
		if (num2 > extents.y)
		{
			val += up * extents.y;
		}
		else if (num2 < 0f - extents.y)
		{
			val -= up * extents.y;
		}
		else
		{
			flag2 = true;
			val += up * num2;
		}
		float num3 = Vector3.Dot(val2, forward);
		if (num3 > extents.z)
		{
			val += forward * extents.z;
		}
		else if (num3 < 0f - extents.z)
		{
			val -= forward * extents.z;
		}
		else
		{
			flag3 = true;
			val += forward * num3;
		}
		if (flag && flag2 && flag3)
		{
			return target;
		}
		return val;
	}

	public float Distance(OBB other)
	{
		return GJK.Distance(this, other);
	}

	public float Distance(Vector3 position)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		return Vector3.Distance(position, ClosestPoint(position));
	}

	public float SqrDistance(OBB other)
	{
		return GJK.Distance2(this, other);
	}

	public float SqrDistance(Vector3 position)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = position - ClosestPoint(position);
		return ((Vector3)(ref val)).sqrMagnitude;
	}

	public void DebugDraw(Color colour, float duration)
	{
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0072: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_011a: Unknown result type (might be due to invalid IL or missing references)
		//IL_011f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0136: Unknown result type (might be due to invalid IL or missing references)
		//IL_014b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_0167: Unknown result type (might be due to invalid IL or missing references)
		//IL_017c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0181: Unknown result type (might be due to invalid IL or missing references)
		//IL_0198: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01de: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_020f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0214: Unknown result type (might be due to invalid IL or missing references)
		//IL_022b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0240: Unknown result type (might be due to invalid IL or missing references)
		//IL_0245: Unknown result type (might be due to invalid IL or missing references)
		Debug.DrawLine(GetPoint(-1f, -1f, -1f), GetPoint(1f, -1f, -1f), colour, duration);
		Debug.DrawLine(GetPoint(-1f, -1f, 1f), GetPoint(1f, -1f, 1f), colour, duration);
		Debug.DrawLine(GetPoint(-1f, -1f, -1f), GetPoint(-1f, -1f, 1f), colour, duration);
		Debug.DrawLine(GetPoint(1f, -1f, -1f), GetPoint(1f, -1f, 1f), colour, duration);
		Debug.DrawLine(GetPoint(-1f, -1f, -1f), GetPoint(-1f, 1f, -1f), colour, duration);
		Debug.DrawLine(GetPoint(-1f, -1f, 1f), GetPoint(-1f, 1f, 1f), colour, duration);
		Debug.DrawLine(GetPoint(1f, -1f, -1f), GetPoint(1f, 1f, -1f), colour, duration);
		Debug.DrawLine(GetPoint(1f, -1f, 1f), GetPoint(1f, 1f, 1f), colour, duration);
		Debug.DrawLine(GetPoint(-1f, 1f, -1f), GetPoint(1f, 1f, -1f), colour, duration);
		Debug.DrawLine(GetPoint(-1f, 1f, 1f), GetPoint(1f, 1f, 1f), colour, duration);
		Debug.DrawLine(GetPoint(-1f, 1f, -1f), GetPoint(-1f, 1f, 1f), colour, duration);
		Debug.DrawLine(GetPoint(1f, -1f, -1f), GetPoint(1f, 1f, 1f), colour, duration);
	}
}
