using System;
using System.Runtime.CompilerServices;
using Unity.Profiling;
using UnityEngine;
using UnityEngine.Assertions;

public static class GJK
{
	private static readonly ProfilerMarker p_Distance = new ProfilerMarker("GJK.Distance");

	private static readonly ProfilerMarker p_SolveDistance = new ProfilerMarker("Simplex.SolveDistance");

	private static readonly ProfilerMarker p_GetSupportingVertex = new ProfilerMarker("GetSupportingVertex");

	private const float MaxIterations = 32f;

	public unsafe static float Distance(OBB a, OBB b)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		ProfilerMarker val = p_Distance;
		AutoScope val2 = ((ProfilerMarker)(ref val)).Auto();
		try
		{
			Span<Vector3> span = new Span<Vector3>(stackalloc Vector3[8], 8);
			Span<Vector3> span2 = new Span<Vector3>(stackalloc Vector3[8], 8);
			PopulateVertices(a, span);
			PopulateVertices(b, span2);
			return DistanceInternal((ReadOnlySpan<Vector3>)span, (ReadOnlySpan<Vector3>)span2);
		}
		finally
		{
			((IDisposable)(AutoScope)(ref val2)/*cast due to .constrained prefix*/).Dispose();
		}
	}

	public unsafe static float Distance2(OBB a, OBB b)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		ProfilerMarker val = p_Distance;
		AutoScope val2 = ((ProfilerMarker)(ref val)).Auto();
		try
		{
			Span<Vector3> span = new Span<Vector3>(stackalloc Vector3[8], 8);
			Span<Vector3> span2 = new Span<Vector3>(stackalloc Vector3[8], 8);
			PopulateVertices(a, span);
			PopulateVertices(b, span2);
			return Distance2Internal((ReadOnlySpan<Vector3>)span, (ReadOnlySpan<Vector3>)span2);
		}
		finally
		{
			((IDisposable)(AutoScope)(ref val2)/*cast due to .constrained prefix*/).Dispose();
		}
	}

	private static float DistanceInternal(in ReadOnlySpan<Vector3> a, in ReadOnlySpan<Vector3> b)
	{
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		SolveDistanceSimplex(in a, in b, out var simplex);
		float num = Vector3.SqrMagnitude(simplex.Direction);
		float num2 = 1f / Mathf.Sqrt(num);
		if (num != 0f)
		{
			return simplex.ScaledDistance * num2;
		}
		return 0f;
	}

	private static float Distance2Internal(in ReadOnlySpan<Vector3> a, in ReadOnlySpan<Vector3> b)
	{
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		SolveDistanceSimplex(in a, in b, out var simplex);
		float num = Vector3.SqrMagnitude(simplex.Direction);
		if (num != 0f)
		{
			return simplex.ScaledDistance * simplex.ScaledDistance / num;
		}
		return 0f;
	}

	private static void SolveDistanceSimplex(in ReadOnlySpan<Vector3> a, in ReadOnlySpan<Vector3> b, out Simplex simplex)
	{
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0093: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_009b: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0100: Unknown result type (might be due to invalid IL or missing references)
		//IL_0104: Unknown result type (might be due to invalid IL or missing references)
		//IL_0109: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		Assert.IsTrue(a.Length > 0, "Distance function called with empty LHS collider");
		Assert.IsTrue(b.Length > 0, "Distance function called with empty RHS collider");
		Simplex simplex2 = new Simplex
		{
			size = 1
		};
		Vector3 direction = Vector3.up;
		simplex2.a = GetSupportingVertex(in a, in b, in direction);
		simplex = simplex2;
		simplex.Direction = simplex.a;
		simplex.ScaledDistance = Vector3.SqrMagnitude(simplex.a);
		float num = simplex.ScaledDistance;
		for (int i = 0; (float)i < 32f; i++)
		{
			direction = -simplex.Direction;
			Vector3 supportingVertex = GetSupportingVertex(in a, in b, in direction);
			float num2 = Vector3.Dot(simplex.a - supportingVertex, simplex.Direction);
			if (!(num2 * Mathf.Abs(num2) < 1E-08f * num))
			{
				switch (simplex.size++)
				{
				case 1:
					simplex.b = supportingVertex;
					break;
				case 2:
					simplex.c = supportingVertex;
					break;
				default:
					simplex.d = supportingVertex;
					break;
				}
				ProfilerMarker val = p_SolveDistance;
				AutoScope val2 = ((ProfilerMarker)(ref val)).Auto();
				try
				{
					simplex.SolveDistance();
				}
				finally
				{
					((IDisposable)(AutoScope)(ref val2)/*cast due to .constrained prefix*/).Dispose();
				}
				num = Vector3.SqrMagnitude(simplex.Direction);
				if (simplex.size == 4)
				{
					simplex.ScaledDistance = 0f;
					break;
				}
				continue;
			}
			break;
		}
	}

	private static Vector3 Support(in ReadOnlySpan<Vector3> vertices, in Vector3 direction)
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		float num = float.MinValue;
		Vector3 result = Vector3.zero;
		ReadOnlySpan<Vector3> readOnlySpan = vertices;
		for (int i = 0; i < readOnlySpan.Length; i++)
		{
			Vector3 val = readOnlySpan[i];
			float num2 = Vector3.Dot(val, direction);
			if (num2 > num)
			{
				num = num2;
				result = val;
			}
		}
		return result;
	}

	private static Vector3 GetSupportingVertex(in ReadOnlySpan<Vector3> verticesA, in ReadOnlySpan<Vector3> verticesB, in Vector3 direction)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		ProfilerMarker val = p_GetSupportingVertex;
		AutoScope val2 = ((ProfilerMarker)(ref val)).Auto();
		try
		{
			Vector3 val3 = Support(in verticesA, in direction);
			Vector3 direction2 = -direction;
			Vector3 val4 = Support(in verticesB, in direction2);
			direction2 = val3 - val4;
			return direction2;
		}
		finally
		{
			((IDisposable)(AutoScope)(ref val2)/*cast due to .constrained prefix*/).Dispose();
		}
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	private static void PopulateVertices(OBB obb, Span<Vector3> vertices)
	{
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0070: Unknown result type (might be due to invalid IL or missing references)
		//IL_0075: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_0084: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00af: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00da: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ec: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_010a: Unknown result type (might be due to invalid IL or missing references)
		//IL_010b: Unknown result type (might be due to invalid IL or missing references)
		//IL_010c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0113: Unknown result type (might be due to invalid IL or missing references)
		//IL_0118: Unknown result type (might be due to invalid IL or missing references)
		//IL_011d: Unknown result type (might be due to invalid IL or missing references)
		//IL_011e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_012f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		//IL_0137: Unknown result type (might be due to invalid IL or missing references)
		//IL_013c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0141: Unknown result type (might be due to invalid IL or missing references)
		//IL_014e: Unknown result type (might be due to invalid IL or missing references)
		//IL_014f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_0157: Unknown result type (might be due to invalid IL or missing references)
		//IL_015c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0161: Unknown result type (might be due to invalid IL or missing references)
		//IL_0162: Unknown result type (might be due to invalid IL or missing references)
		//IL_0169: Unknown result type (might be due to invalid IL or missing references)
		//IL_016e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0173: Unknown result type (might be due to invalid IL or missing references)
		//IL_0174: Unknown result type (might be due to invalid IL or missing references)
		//IL_017b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0180: Unknown result type (might be due to invalid IL or missing references)
		//IL_0185: Unknown result type (might be due to invalid IL or missing references)
		//IL_0192: Unknown result type (might be due to invalid IL or missing references)
		//IL_0193: Unknown result type (might be due to invalid IL or missing references)
		//IL_0194: Unknown result type (might be due to invalid IL or missing references)
		//IL_019b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a5: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b2: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_01df: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0203: Unknown result type (might be due to invalid IL or missing references)
		//IL_0208: Unknown result type (might be due to invalid IL or missing references)
		//IL_020d: Unknown result type (might be due to invalid IL or missing references)
		//IL_021a: Unknown result type (might be due to invalid IL or missing references)
		//IL_021b: Unknown result type (might be due to invalid IL or missing references)
		//IL_021c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0223: Unknown result type (might be due to invalid IL or missing references)
		//IL_0228: Unknown result type (might be due to invalid IL or missing references)
		//IL_022d: Unknown result type (might be due to invalid IL or missing references)
		//IL_022e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0235: Unknown result type (might be due to invalid IL or missing references)
		//IL_023a: Unknown result type (might be due to invalid IL or missing references)
		//IL_023f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0240: Unknown result type (might be due to invalid IL or missing references)
		//IL_0247: Unknown result type (might be due to invalid IL or missing references)
		//IL_024c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0251: Unknown result type (might be due to invalid IL or missing references)
		Assert.IsTrue(vertices.Length >= 8);
		Vector3 position = obb.position;
		Vector3 right = obb.right;
		Vector3 up = obb.up;
		Vector3 forward = obb.forward;
		Vector3 extents = obb.extents;
		vertices[0] = position + right * extents.x + up * extents.y + forward * extents.z;
		vertices[1] = position + right * extents.x + up * extents.y - forward * extents.z;
		vertices[2] = position + right * extents.x - up * extents.y + forward * extents.z;
		vertices[3] = position + right * extents.x - up * extents.y - forward * extents.z;
		vertices[4] = position - right * extents.x + up * extents.y + forward * extents.z;
		vertices[5] = position - right * extents.x + up * extents.y - forward * extents.z;
		vertices[6] = position - right * extents.x - up * extents.y + forward * extents.z;
		vertices[7] = position - right * extents.x - up * extents.y - forward * extents.z;
	}
}
