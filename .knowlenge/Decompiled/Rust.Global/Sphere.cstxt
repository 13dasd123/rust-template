using UnityEngine;

public struct Sphere
{
	public Vector3 position;

	public float radius;

	public Sphere(Vector3 position, float radius)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		this.position = position;
		this.radius = radius;
	}

	public bool Contains(Vector3 target)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		return ClosestPoint(target) == target;
	}

	public Vector3 ClosestPoint(Vector3 target)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0004: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_006e: Unknown result type (might be due to invalid IL or missing references)
		//IL_007c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		Vector3 result = target;
		Vector3 val = target - position;
		float magnitude = ((Vector3)(ref val)).magnitude;
		if (magnitude <= radius)
		{
			return result;
		}
		float num = radius / magnitude;
		result.x = position.x + val.x * num;
		result.y = position.y + val.y * num;
		result.z = position.z + val.z * num;
		return result;
	}

	public void Move(Vector3 direction, float distance, int layerMask = 0)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_0069: Unknown result type (might be due to invalid IL or missing references)
		RaycastHit val = default(RaycastHit);
		bool flag = Physics.SphereCast(position, radius, direction, ref val, distance, layerMask);
		if ((!((Object)(object)((RaycastHit)(ref val)).collider != (Object)null) || (LayerMask.op_Implicit(((RaycastHit)(ref val)).collider.excludeLayers) & 0x1000) == 0) && layerMask != 0 && flag)
		{
			position += direction * ((RaycastHit)(ref val)).distance;
		}
		else
		{
			position += direction * distance;
		}
	}

	public bool Trace(Ray ray, out RaycastHit hit, float maxDistance = float.PositiveInfinity)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0053: Unknown result type (might be due to invalid IL or missing references)
		//IL_0110: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0122: Unknown result type (might be due to invalid IL or missing references)
		//IL_0127: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0130: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d8: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e8: Unknown result type (might be due to invalid IL or missing references)
		hit = default(RaycastHit);
		if (radius <= 0f)
		{
			return false;
		}
		float num = 1f;
		float num2 = 2f * Vector3.Dot(((Ray)(ref ray)).direction, ((Ray)(ref ray)).origin - position);
		Vector3 val = ((Ray)(ref ray)).origin - position;
		float num3 = ((Vector3)(ref val)).sqrMagnitude - radius * radius;
		float num4 = num2 * num2 - 4f * num * num3;
		if (num4 < 0f)
		{
			return false;
		}
		float num5 = Mathf.Sqrt(num4);
		float num6 = 2f * num;
		float num7 = 0f - num2;
		float num8 = (num7 - num5) / num6;
		if (num8 >= 0f)
		{
			if (num8 <= maxDistance)
			{
				((RaycastHit)(ref hit)).point = ((Ray)(ref ray)).origin + num8 * ((Ray)(ref ray)).direction;
				((RaycastHit)(ref hit)).normal = (((RaycastHit)(ref hit)).point - position) / radius;
				((RaycastHit)(ref hit)).distance = num8;
				return true;
			}
			return false;
		}
		if ((num7 + num5) / num6 >= 0f)
		{
			((RaycastHit)(ref hit)).point = ((Ray)(ref ray)).origin;
			val = ((RaycastHit)(ref hit)).point - position;
			((RaycastHit)(ref hit)).normal = ((Vector3)(ref val)).normalized;
			((RaycastHit)(ref hit)).distance = 0f;
			return true;
		}
		return false;
	}
}
