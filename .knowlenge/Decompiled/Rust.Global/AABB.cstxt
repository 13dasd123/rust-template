using UnityEngine;

public struct AABB
{
	public Vector3 position;

	public Vector3 extents;

	public AABB(Vector3 position, Vector3 size)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		this.position = position;
		extents = size * 0.5f;
	}

	public bool Contains(Vector3 target)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		return ClosestPoint(target) == target;
	}

	public Vector3 ClosestPoint(Vector3 target)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_009a: Unknown result type (might be due to invalid IL or missing references)
		//IL_00df: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f4: Unknown result type (might be due to invalid IL or missing references)
		//IL_0107: Unknown result type (might be due to invalid IL or missing references)
		Vector3 result = target;
		float num = position.x - extents.x;
		float num2 = position.x + extents.x;
		if (target.x < num)
		{
			result.x = num;
		}
		else if (target.x > num2)
		{
			result.x = num2;
		}
		float num3 = position.y - extents.y;
		float num4 = position.y + extents.y;
		if (target.y < num3)
		{
			result.y = num3;
		}
		else if (target.y > num4)
		{
			result.y = num4;
		}
		float num5 = position.z - extents.z;
		float num6 = position.z + extents.z;
		if (target.z < num5)
		{
			result.z = num5;
		}
		else if (target.z > num6)
		{
			result.z = num6;
		}
		return result;
	}

	public bool Trace(Ray ray, out RaycastHit hit, float radius = 0f, float maxDistance = float.PositiveInfinity)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_002e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0034: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_006b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0073: Unknown result type (might be due to invalid IL or missing references)
		//IL_0080: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00cf: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d7: Unknown result type (might be due to invalid IL or missing references)
		//IL_00e4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f8: Unknown result type (might be due to invalid IL or missing references)
		//IL_0105: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cc: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_027e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0285: Unknown result type (might be due to invalid IL or missing references)
		//IL_028c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0291: Unknown result type (might be due to invalid IL or missing references)
		//IL_0297: Unknown result type (might be due to invalid IL or missing references)
		//IL_029d: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ad: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b8: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bd: Unknown result type (might be due to invalid IL or missing references)
		//IL_02c1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0315: Unknown result type (might be due to invalid IL or missing references)
		//IL_033f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0344: Unknown result type (might be due to invalid IL or missing references)
		//IL_0346: Unknown result type (might be due to invalid IL or missing references)
		//IL_0353: Unknown result type (might be due to invalid IL or missing references)
		//IL_0359: Unknown result type (might be due to invalid IL or missing references)
		//IL_0211: Unknown result type (might be due to invalid IL or missing references)
		//IL_0233: Unknown result type (might be due to invalid IL or missing references)
		//IL_0271: Unknown result type (might be due to invalid IL or missing references)
		//IL_0255: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = position - (extents + Vector3.one * radius);
		Vector3 val2 = position + (extents + Vector3.one * radius);
		hit = default(RaycastHit);
		float num = (val.x - ((Ray)(ref ray)).origin.x) / ((Ray)(ref ray)).direction.x;
		float num2 = (val2.x - ((Ray)(ref ray)).origin.x) / ((Ray)(ref ray)).direction.x;
		float num3 = (val.y - ((Ray)(ref ray)).origin.y) / ((Ray)(ref ray)).direction.y;
		float num4 = (val2.y - ((Ray)(ref ray)).origin.y) / ((Ray)(ref ray)).direction.y;
		float num5 = (val.z - ((Ray)(ref ray)).origin.z) / ((Ray)(ref ray)).direction.z;
		float num6 = (val2.z - ((Ray)(ref ray)).origin.z) / ((Ray)(ref ray)).direction.z;
		float num7 = ((num < num2) ? num : num2);
		float num8 = ((num3 < num4) ? num3 : num4);
		float num9 = ((num5 < num6) ? num5 : num6);
		float num10 = ((num > num2) ? num : num2);
		float num11 = ((num3 > num4) ? num3 : num4);
		float num12 = ((num5 > num6) ? num5 : num6);
		float num13 = ((num7 > num8) ? num7 : num8);
		float num14 = ((num10 < num11) ? num10 : num11);
		float num15 = ((num13 > num9) ? num13 : num9);
		float num16 = ((num14 < num12) ? num14 : num12);
		float num17 = ((num16 < 0f || num15 > num16) ? (-1f) : num15);
		if (num17 < 0f)
		{
			return false;
		}
		if (num17 == num)
		{
			((RaycastHit)(ref hit)).normal = new Vector3(-1f, 0f, 0f);
		}
		else if (num17 == num2)
		{
			((RaycastHit)(ref hit)).normal = new Vector3(1f, 0f, 0f);
		}
		else if (num17 == num3)
		{
			((RaycastHit)(ref hit)).normal = new Vector3(0f, -1f, 0f);
		}
		else if (num17 == num4)
		{
			((RaycastHit)(ref hit)).normal = new Vector3(0f, 1f, 0f);
		}
		else if (num17 == num5)
		{
			((RaycastHit)(ref hit)).normal = new Vector3(0f, 0f, -1f);
		}
		else
		{
			((RaycastHit)(ref hit)).normal = new Vector3(0f, 0f, 1f);
		}
		((RaycastHit)(ref hit)).point = ((Ray)(ref ray)).origin + ((Ray)(ref ray)).direction * num17 - ((RaycastHit)(ref hit)).normal * radius;
		Vector3 val3 = ((RaycastHit)(ref hit)).point - position;
		val3.x = Mathf.Clamp(val3.x, 0f - extents.x, extents.x);
		val3.y = Mathf.Clamp(val3.y, 0f - extents.y, extents.y);
		val3.z = Mathf.Clamp(val3.z, 0f - extents.z, extents.z);
		((RaycastHit)(ref hit)).point = position + val3;
		((RaycastHit)(ref hit)).distance = Vector3.Distance(((Ray)(ref ray)).origin, ((RaycastHit)(ref hit)).point);
		return ((RaycastHit)(ref hit)).distance < maxDistance;
	}
}
