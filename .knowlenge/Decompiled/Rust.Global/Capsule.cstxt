using UnityEngine;

public struct Capsule
{
	public Vector3 position;

	public float radius;

	public float extent;

	public Capsule(Vector3 position, float radius, float extent)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		this.position = position;
		this.radius = radius;
		this.extent = extent;
	}

	public bool Contains(Vector3 target)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		return ClosestPoint(target) == target;
	}

	public Vector3 ClosestPoint(Vector3 target)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		//IL_0004: Unknown result type (might be due to invalid IL or missing references)
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_0035: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		Vector3 result = target;
		Vector3 val = target - position;
		float num = val.Magnitude2D();
		if (num > radius)
		{
			float num2 = radius / num;
			result.x = position.x + val.x * num2;
			result.z = position.z + val.z * num2;
		}
		result.y = Mathf.Clamp(target.y, position.y - extent, position.y + extent);
		return result;
	}

	public void Move(Vector3 direction, float distance, int layerMask = 0)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0040: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_0085: Unknown result type (might be due to invalid IL or missing references)
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_005f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0064: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = position + Vector3.up * (extent - radius);
		Vector3 val2 = position - Vector3.up * (extent - radius);
		RaycastHit val3 = default(RaycastHit);
		if (layerMask != 0 && Physics.CapsuleCast(val, val2, radius, direction, ref val3, distance, layerMask))
		{
			position += direction * ((RaycastHit)(ref val3)).distance;
		}
		else
		{
			position += direction * distance;
		}
	}

	public bool Trace(Ray ray, out RaycastHit hit, float rayRadius = 0f, float maxDistance = float.PositiveInfinity)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0021: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_002c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_0033: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0048: Unknown result type (might be due to invalid IL or missing references)
		//IL_0076: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_008e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0090: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bb: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_005a: Unknown result type (might be due to invalid IL or missing references)
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0217: Unknown result type (might be due to invalid IL or missing references)
		//IL_020a: Unknown result type (might be due to invalid IL or missing references)
		//IL_020f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0210: Unknown result type (might be due to invalid IL or missing references)
		//IL_0219: Unknown result type (might be due to invalid IL or missing references)
		//IL_021d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0222: Unknown result type (might be due to invalid IL or missing references)
		//IL_022b: Unknown result type (might be due to invalid IL or missing references)
		//IL_022d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0170: Unknown result type (might be due to invalid IL or missing references)
		//IL_0177: Unknown result type (might be due to invalid IL or missing references)
		//IL_017e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0183: Unknown result type (might be due to invalid IL or missing references)
		//IL_018e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0193: Unknown result type (might be due to invalid IL or missing references)
		//IL_0194: Unknown result type (might be due to invalid IL or missing references)
		//IL_0199: Unknown result type (might be due to invalid IL or missing references)
		//IL_019b: Unknown result type (might be due to invalid IL or missing references)
		//IL_019d: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c4: Unknown result type (might be due to invalid IL or missing references)
		//IL_01c6: Unknown result type (might be due to invalid IL or missing references)
		//IL_01cb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d1: Unknown result type (might be due to invalid IL or missing references)
		//IL_01dd: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e3: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e9: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ee: Unknown result type (might be due to invalid IL or missing references)
		//IL_0282: Unknown result type (might be due to invalid IL or missing references)
		//IL_0289: Unknown result type (might be due to invalid IL or missing references)
		//IL_0294: Unknown result type (might be due to invalid IL or missing references)
		//IL_0299: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a4: Unknown result type (might be due to invalid IL or missing references)
		//IL_02a9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02aa: Unknown result type (might be due to invalid IL or missing references)
		//IL_02af: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02b3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_02bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_02d6: Unknown result type (might be due to invalid IL or missing references)
		//IL_02da: Unknown result type (might be due to invalid IL or missing references)
		//IL_02dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e1: Unknown result type (might be due to invalid IL or missing references)
		//IL_02e7: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f3: Unknown result type (might be due to invalid IL or missing references)
		//IL_02f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ff: Unknown result type (might be due to invalid IL or missing references)
		//IL_0304: Unknown result type (might be due to invalid IL or missing references)
		hit = default(RaycastHit);
		float num = radius + rayRadius;
		float num2 = extent + rayRadius - num;
		Vector3 val = position + Vector3.down * num2;
		Vector3 val2 = position + Vector3.up * num2;
		if (num2 < Mathf.Epsilon * 2f)
		{
			return new Sphere(position, radius).Trace(ray, out hit, maxDistance);
		}
		Vector3 val3 = val2 - val;
		Vector3 val4 = ((Ray)(ref ray)).origin - val;
		float num3 = Vector3.Dot(val3, val3);
		float num4 = Vector3.Dot(val3, ((Ray)(ref ray)).direction);
		float num5 = Vector3.Dot(val3, val4);
		float num6 = Vector3.Dot(((Ray)(ref ray)).direction, val4);
		float num7 = Vector3.Dot(val4, val4);
		float num8 = num3 - num4 * num4;
		float num9 = num3 * num6 - num5 * num4;
		float num10 = num3 * num7 - num5 * num5 - num * num * num3;
		float num11 = num9 * num9 - num8 * num10;
		if ((double)num11 >= 0.0)
		{
			float num12 = (0f - num9 - Mathf.Sqrt(num11)) / num8;
			float num13 = num5 + num12 * num4;
			if ((double)num13 > 0.0 && num13 < num3)
			{
				((RaycastHit)(ref hit)).distance = num12;
				if (((RaycastHit)(ref hit)).distance < 0f || ((RaycastHit)(ref hit)).distance > maxDistance)
				{
					return false;
				}
				((RaycastHit)(ref hit)).point = ((Ray)(ref ray)).origin + ((Ray)(ref ray)).direction * num12;
				Vector3 val5 = ((RaycastHit)(ref hit)).point - val;
				float num14 = Mathf.Clamp(Vector3.Dot(val5, val3) / Vector3.Dot(val3, val3), 0f, 1f);
				((RaycastHit)(ref hit)).normal = (val5 - num14 * val3) / num;
				((RaycastHit)(ref hit)).point = ((RaycastHit)(ref hit)).point - ((RaycastHit)(ref hit)).normal * rayRadius;
				return true;
			}
			Vector3 val6 = (((double)num13 <= 0.0) ? val4 : (((Ray)(ref ray)).origin - val2));
			num9 = Vector3.Dot(((Ray)(ref ray)).direction, val6);
			num10 = Vector3.Dot(val6, val6) - num * num;
			num11 = num9 * num9 - num10;
			if ((double)num11 > 0.0)
			{
				((RaycastHit)(ref hit)).distance = 0f - num9 - Mathf.Sqrt(num11);
				if (((RaycastHit)(ref hit)).distance < 0f || ((RaycastHit)(ref hit)).distance > maxDistance)
				{
					return false;
				}
				((RaycastHit)(ref hit)).point = ((Ray)(ref ray)).origin + ((Ray)(ref ray)).direction * ((RaycastHit)(ref hit)).distance;
				Vector3 val7 = ((RaycastHit)(ref hit)).point - val;
				float num15 = Mathf.Clamp(Vector3.Dot(val7, val3) / Vector3.Dot(val3, val3), 0f, 1f);
				((RaycastHit)(ref hit)).normal = (val7 - num15 * val3) / num;
				((RaycastHit)(ref hit)).point = ((RaycastHit)(ref hit)).point - ((RaycastHit)(ref hit)).normal * rayRadius;
				((RaycastHit)(ref hit)).distance = ((RaycastHit)(ref hit)).distance;
				return true;
			}
		}
		return false;
	}
}
