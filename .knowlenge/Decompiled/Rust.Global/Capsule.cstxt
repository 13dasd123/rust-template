using UnityEngine;

public struct Capsule
{
	public Vector3 position;

	public float radius;

	public float extent;

	public Capsule(Vector3 position, float radius, float extent)
	{
		this.position = position;
		this.radius = radius;
		this.extent = extent;
	}

	public bool Contains(Vector3 target)
	{
		return ClosestPoint(target) == target;
	}

	public Vector3 ClosestPoint(Vector3 target)
	{
		Vector3 result = target;
		Vector3 v = target - position;
		float num = v.Magnitude2D();
		if (num > radius)
		{
			float num2 = radius / num;
			result.x = position.x + v.x * num2;
			result.z = position.z + v.z * num2;
		}
		result.y = Mathf.Clamp(target.y, position.y - extent, position.y + extent);
		return result;
	}

	public void Move(Vector3 direction, float distance, int layerMask = 0)
	{
		Vector3 point = position + Vector3.up * (extent - radius);
		Vector3 point2 = position - Vector3.up * (extent - radius);
		if (layerMask != 0 && Physics.CapsuleCast(point, point2, radius, direction, out var hitInfo, distance, layerMask))
		{
			position += direction * hitInfo.distance;
		}
		else
		{
			position += direction * distance;
		}
	}
}
