using System;
using Facepunch.Extend;
using Rust;
using Rust.Components.Camera;
using Rust.ImageEffects;
using UnityEngine;
using UnityEngine.Rendering;

public class PropRenderer : MonoBehaviour, IClientComponent
{
	[Serializable]
	public class SkinViewerSettings
	{
		[Tooltip("If non-zero, will be used as a pivot point instead of the centre of the enclosing bounds")]
		public Vector3 customLocalPivot = Vector3.zero;

		[Tooltip("Additional camera offset only used in the skin viewer (as opposed to icon generation)")]
		public Vector3 camPosOffset;

		[Tooltip("For objects that rotate weirdly in other skin viewer pivot modes")]
		public bool forceCamUpPivot;

		public bool HasCustomPivot => customLocalPivot != Vector3.zero;
	}

	public delegate float LightIntensityScale(float intensity);

	public bool HideLowLods = true;

	public bool HideUnskinnable = true;

	public bool Outline = true;

	[Header("Rotation")]
	public Vector3 Rotation = Vector3.zero;

	public Vector3 PostRotation = Vector3.zero;

	[Header("Position Offset")]
	public Vector3 PositionalTweak = Vector3.zero;

	[Header("Misc")]
	public float FieldOfView = 40f;

	public float farClipPlane = 100f;

	public bool ForceLookAtProp;

	public Vector3 LookDirection = new Vector3(0.2f, 0.4f, 1f);

	public Vector3 UpDirection = Vector3.up;

	public GameObject[] HideDuringRender = (GameObject[])(object)new GameObject[0];

	public SkinViewerSettings skinViewerSettings;

	public void DebugAlign()
	{
		PreRender();
		Camera main = Camera.main;
		main.fieldOfView = FieldOfView;
		PositionCamera(main, isSkinViewer: true);
		PostRender();
	}

	public void PositionCamera(Camera cam, bool isSkinViewer = false)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0032: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		//IL_003e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0044: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0050: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_0056: Unknown result type (might be due to invalid IL or missing references)
		//IL_005b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0086: Unknown result type (might be due to invalid IL or missing references)
		//IL_0087: Unknown result type (might be due to invalid IL or missing references)
		//IL_0099: Unknown result type (might be due to invalid IL or missing references)
		//IL_00af: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00be: Unknown result type (might be due to invalid IL or missing references)
		//IL_00c3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d4: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ea: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ef: Unknown result type (might be due to invalid IL or missing references)
		//IL_00f9: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fe: Unknown result type (might be due to invalid IL or missing references)
		//IL_010f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0134: Unknown result type (might be due to invalid IL or missing references)
		//IL_0139: Unknown result type (might be due to invalid IL or missing references)
		//IL_0150: Unknown result type (might be due to invalid IL or missing references)
		//IL_016b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0170: Unknown result type (might be due to invalid IL or missing references)
		//IL_017a: Unknown result type (might be due to invalid IL or missing references)
		//IL_017f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0190: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ab: Unknown result type (might be due to invalid IL or missing references)
		//IL_01b0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ba: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bf: Unknown result type (might be due to invalid IL or missing references)
		//IL_01d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01fa: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ff: Unknown result type (might be due to invalid IL or missing references)
		Vector3 val = Quaternion.Euler(Rotation) * ((Vector3)(ref LookDirection)).normalized;
		Vector3 val2 = Quaternion.Euler(Rotation) * ((Vector3)(ref UpDirection)).normalized;
		val = Quaternion.Euler(PostRotation) * val;
		val2 = Quaternion.Euler(PostRotation) * val2;
		cam.fieldOfView = FieldOfView;
		cam.nearClipPlane = 0.01f;
		cam.farClipPlane = farClipPlane;
		CameraEx.FocusOnRenderer(cam, ((Component)this).gameObject, val, val2, 2048);
		Transform transform = ((Component)cam).transform;
		transform.position += PositionalTweak.x * ((Component)cam).transform.right * 0.01f;
		Transform transform2 = ((Component)cam).transform;
		transform2.position += PositionalTweak.y * ((Component)cam).transform.up * 0.01f;
		Transform transform3 = ((Component)cam).transform;
		transform3.position += PositionalTweak.z * ((Component)cam).transform.forward * 0.1f;
		if (isSkinViewer)
		{
			Transform transform4 = ((Component)cam).transform;
			transform4.position += skinViewerSettings.camPosOffset.x * ((Component)cam).transform.right * 0.01f;
			Transform transform5 = ((Component)cam).transform;
			transform5.position += skinViewerSettings.camPosOffset.y * ((Component)cam).transform.up * 0.01f;
			Transform transform6 = ((Component)cam).transform;
			transform6.position += skinViewerSettings.camPosOffset.z * ((Component)cam).transform.forward * 0.1f;
		}
	}

	public void PreRender()
	{
		PreRender(((Component)this).gameObject, HideLowLods, HideUnskinnable, HideDuringRender);
	}

	public static void PreRender(GameObject gameObject, bool hideLowLODs, bool hideUnskinnable, GameObject[] hideDuringRender = null)
	{
		Renderer[] componentsInChildren = gameObject.GetComponentsInChildren<Renderer>();
		foreach (Renderer val in componentsInChildren)
		{
			if (!(val is ParticleSystemRenderer) && !((Component)val).gameObject.CompareTag("StripFromStorePreview") && (!hideLowLODs || (!((Object)((Component)val).gameObject).name.EndsWith("lod01", StringComparison.InvariantCultureIgnoreCase) && !((Object)((Component)val).gameObject).name.EndsWith("lod02", StringComparison.InvariantCultureIgnoreCase) && !((Object)((Component)val).gameObject).name.EndsWith("lod03", StringComparison.InvariantCultureIgnoreCase) && !((Object)((Component)val).gameObject).name.EndsWith("lod04", StringComparison.InvariantCultureIgnoreCase) && !((Object)((Component)val).gameObject).name.EndsWith("lod1", StringComparison.InvariantCultureIgnoreCase) && !((Object)((Component)val).gameObject).name.EndsWith("lod2", StringComparison.InvariantCultureIgnoreCase) && !((Object)((Component)val).gameObject).name.EndsWith("lod3", StringComparison.InvariantCultureIgnoreCase) && !((Object)((Component)val).gameObject).name.EndsWith("lod4", StringComparison.InvariantCultureIgnoreCase))))
			{
				((Component)val).gameObject.layer = 11;
				SkinnedMeshRenderer val2 = (SkinnedMeshRenderer)(object)((val is SkinnedMeshRenderer) ? val : null);
				if (Object.op_Implicit((Object)(object)val2))
				{
					val2.updateWhenOffscreen = true;
				}
			}
		}
	}

	public void PostRender()
	{
		Renderer[] componentsInChildren = ((Component)this).GetComponentsInChildren<Renderer>();
		foreach (Renderer val in componentsInChildren)
		{
			if (!(val is ParticleSystemRenderer))
			{
				((Component)val).gameObject.layer = 0;
				SkinnedMeshRenderer val2 = (SkinnedMeshRenderer)(object)((val is SkinnedMeshRenderer) ? val : null);
				if (Object.op_Implicit((Object)(object)val2))
				{
					val2.updateWhenOffscreen = false;
				}
			}
		}
	}

	[ContextMenu("Create 512x512 Icon")]
	public void CreateIcon()
	{
		GameObject gameObject = ((Component)this).gameObject;
		Debug.Log((object)("Saving To " + Application.dataPath + "/" + ((Object)gameObject).name + ".icon.png"));
		CreateScreenshot(Application.dataPath + "/" + ((Object)gameObject).name + ".icon.png", 512, 512, 4);
	}

	[ContextMenu("Create Large Render")]
	public void CreateRender()
	{
		GameObject gameObject = ((Component)this).gameObject;
		Debug.Log((object)("Saving To " + Application.dataPath + "/" + ((Object)gameObject).name + ".large.png"));
		CreateScreenshot(Application.dataPath + "/" + ((Object)gameObject).name + ".large.png", 4096, 4096);
	}

	private static float DefaultLightIntensityScale(float intensity)
	{
		return Mathf.GammaToLinearSpace(intensity) * (float)Math.PI;
	}

	public void CreateScreenshot(string filename, int width, int height, int SuperSampleSize = 1, LightIntensityScale lightIntensityScale = null)
	{
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_0029: Expected O, but got Unknown
		//IL_004c: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d0: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d5: Unknown result type (might be due to invalid IL or missing references)
		//IL_00fd: Unknown result type (might be due to invalid IL or missing references)
		//IL_0117: Unknown result type (might be due to invalid IL or missing references)
		//IL_011c: Unknown result type (might be due to invalid IL or missing references)
		//IL_012c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0131: Unknown result type (might be due to invalid IL or missing references)
		//IL_0142: Unknown result type (might be due to invalid IL or missing references)
		//IL_0157: Unknown result type (might be due to invalid IL or missing references)
		//IL_0181: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ed: Unknown result type (might be due to invalid IL or missing references)
		//IL_01f2: Unknown result type (might be due to invalid IL or missing references)
		//IL_0203: Unknown result type (might be due to invalid IL or missing references)
		//IL_0218: Unknown result type (might be due to invalid IL or missing references)
		//IL_0242: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ca: Unknown result type (might be due to invalid IL or missing references)
		if (lightIntensityScale == null)
		{
			lightIntensityScale = DefaultLightIntensityScale;
		}
		bool streamingTextureForceLoadAll = Texture.streamingTextureForceLoadAll;
		Texture.streamingTextureForceLoadAll = true;
		GameObject val = new GameObject("Temporary Camera");
		Camera val2 = val.AddComponent<Camera>();
		val2.clearFlags = (CameraClearFlags)3;
		val2.backgroundColor = new Color(1f, 1f, 1f, 0f);
		val2.allowHDR = true;
		val2.allowMSAA = false;
		val.AddComponent<StreamingController>();
		Type type = Type.GetType("DeferredExtension,Assembly-CSharp");
		if (type != null)
		{
			val.AddComponent(type);
		}
		Type type2 = Type.GetType("DeferredDecalRenderer,Assembly-CSharp");
		if (type != null)
		{
			val.AddComponent(type2);
		}
		if ((Object)(object)ReflectionProbe.defaultTexture != (Object)null)
		{
			Shader.SetGlobalTexture("global_SkyReflection", ReflectionProbe.defaultTexture);
			Shader.SetGlobalVector("global_SkyReflection_HDR", Vector4.op_Implicit(new Vector2(0.2f, 0.01f)));
		}
		if (Outline)
		{
			val.AddComponent<IconOutline>();
		}
		LightingOverride lightingOverride = val.AddComponent<LightingOverride>();
		lightingOverride.overrideAmbientLight = true;
		lightingOverride.ambientMode = (AmbientMode)3;
		lightingOverride.ambientLight = new Color(0.4f, 0.4f, 0.4f, 1f);
		lightingOverride.overrideSkyReflection = true;
		GameObject val3 = new GameObject("Temporary Light");
		val3.transform.SetParent(((Component)val2).transform);
		val3.transform.localRotation = Quaternion.Euler(115f, 60f, 0f);
		Light val4 = val3.AddComponent<Light>();
		val4.type = (LightType)1;
		val4.color = new Color(1f, 1f, 0.96f);
		val4.intensity = 2f;
		val4.cullingMask = 2048;
		val4.shadows = (LightShadows)2;
		val4.shadowBias = 0.01f;
		val4.shadowNormalBias = 0.01f;
		val4.shadowStrength = 0.9f;
		if (lightIntensityScale != null)
		{
			val4.intensity = lightIntensityScale(val4.intensity);
		}
		GameObject val5 = new GameObject("Temporary Light");
		val5.transform.SetParent(((Component)val2).transform);
		val5.transform.localRotation = Quaternion.Euler(5f, -35f, 0f);
		Light val6 = val5.AddComponent<Light>();
		val6.type = (LightType)1;
		val6.color = new Color(1f, 1f, 1f);
		val6.intensity = 1f;
		val6.cullingMask = 2048;
		val6.shadows = (LightShadows)2;
		val6.shadowBias = 0.01f;
		val6.shadowNormalBias = 0.01f;
		val6.shadowStrength = 0.9f;
		if (lightIntensityScale != null)
		{
			val6.intensity = lightIntensityScale(val6.intensity);
		}
		PreRender();
		try
		{
			val2.cullingMask = 2048;
			PositionCamera(val2);
			CameraEx.SaveScreenshot(val2, filename, width, height, true, SuperSampleSize, (Color?)val2.backgroundColor);
		}
		finally
		{
			Texture.streamingTextureForceLoadAll = streamingTextureForceLoadAll;
			Object.DestroyImmediate((Object)(object)val);
			PostRender();
		}
	}

	public static bool RenderScreenshot(GameObject prefab, string filename, int width, int height, int SuperSampleSize = 1)
	{
		if ((Object)(object)prefab == (Object)null)
		{
			Debug.Log((object)"RenderScreenshot - prefab is null", (Object)(object)prefab);
			return false;
		}
		PropRenderer propRenderer = null;
		PropRenderer propRenderer2 = prefab.GetComponent<PropRenderer>();
		if ((Object)(object)propRenderer2 == (Object)null)
		{
			propRenderer = prefab.AddComponent<PropRenderer>();
			propRenderer2 = propRenderer;
		}
		propRenderer2.CreateScreenshot(filename, width, height, SuperSampleSize);
		if ((Object)(object)propRenderer != (Object)null)
		{
			Object.DestroyImmediate((Object)(object)propRenderer);
		}
		return true;
	}
}
