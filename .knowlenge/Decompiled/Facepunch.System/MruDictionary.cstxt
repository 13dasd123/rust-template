using System.Collections.Generic;

public class MruDictionary<Key, Value>
{
	private int capacity;

	private Queue<LinkedListNode<KeyValuePair<Key, Value>>> recycled;

	private LinkedList<KeyValuePair<Key, Value>> list;

	private Dictionary<Key, LinkedListNode<KeyValuePair<Key, Value>>> dict;

	public int Count => list.Count;

	public MruDictionary(int capacity)
	{
		this.capacity = capacity;
		list = new LinkedList<KeyValuePair<Key, Value>>();
		dict = new Dictionary<Key, LinkedListNode<KeyValuePair<Key, Value>>>(capacity);
		recycled = new Queue<LinkedListNode<KeyValuePair<Key, Value>>>(capacity);
		for (int i = 0; i < capacity; i++)
		{
			recycled.Enqueue(new LinkedListNode<KeyValuePair<Key, Value>>(new KeyValuePair<Key, Value>(default(Key), default(Value))));
		}
	}

	public void Clear()
	{
		list.Clear();
		dict.Clear();
	}

	public void Add(Key key, Value value)
	{
		if (dict.TryGetValue(key, out var value2))
		{
			list.Remove(value2);
			list.AddFirst(value2);
			return;
		}
		if (dict.Count == capacity - 1)
		{
			RemoveLast();
		}
		value2 = recycled.Dequeue();
		value2.Value = new KeyValuePair<Key, Value>(key, value);
		list.AddFirst(value2);
		dict.Add(key, list.First);
	}

	public KeyValuePair<Key, Value> GetLast()
	{
		return list.Last.Value;
	}

	public void RemoveLast()
	{
		recycled.Enqueue(list.Last);
		dict.Remove(list.Last.Value.Key);
		list.RemoveLast();
	}

	public bool TryGetValue(Key key, out Value value)
	{
		if (dict.TryGetValue(key, out var value2))
		{
			value = value2.Value.Value;
			return true;
		}
		value = default(Value);
		return false;
	}

	public bool Touch(Key key)
	{
		if (dict.TryGetValue(key, out var value))
		{
			list.Remove(value);
			list.AddFirst(value);
			return true;
		}
		return false;
	}
}
