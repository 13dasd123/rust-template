using System;
using System.Collections.Generic;

public static class List
{
	public static void Compare<T>(this IList<T> a, IList<T> b, List<T> added, List<T> removed, List<T> remained)
	{
		if (a == null && b == null)
		{
			return;
		}
		if (a == null)
		{
			added?.AddRange(b);
		}
		else if (b == null)
		{
			removed?.AddRange(a);
		}
		else
		{
			if (a.Count == 0 && b.Count == 0)
			{
				return;
			}
			added?.AddRange(b);
			removed?.AddRange(a);
			foreach (T item in b)
			{
				if (!a.Contains(item))
				{
					continue;
				}
				remained?.Add(item);
				if (added != null)
				{
					while (added.Remove(item))
					{
					}
				}
				if (removed != null)
				{
					while (removed.Remove(item))
					{
					}
				}
			}
		}
	}

	public static TItem FindWith<TItem, TKey>(this List<TItem> items, Func<TItem, TKey> selector, TKey search) where TKey : IEquatable<TKey>
	{
		foreach (TItem item in items)
		{
			if (selector(item).Equals(search))
			{
				return item;
			}
		}
		return default(TItem);
	}

	public static TItem? TryFindWith<TItem, TKey>(this List<TItem> items, Func<TItem, TKey> selector, TKey search, IEqualityComparer<TItem> comparer = null) where TItem : struct
	{
		comparer = comparer ?? EqualityComparer<TItem>.Default;
		foreach (TItem item in items)
		{
			if (selector(item).Equals(search))
			{
				return item;
			}
		}
		return null;
	}
}
