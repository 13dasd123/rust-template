using System;
using System.Collections.Generic;
using Facepunch.Models.Analytics;

internal class Stat : Dictionary<string, Stat.Container>
{
	public class Container
	{
		public class Average
		{
			public double Sum;

			public int Cnt;

			public double Min;

			public double Max;
		}

		public Dictionary<string, Average> avg;

		public Dictionary<string, double> cnt;

		internal void AddSum(string label, double value)
		{
			if (cnt == null)
			{
				cnt = new Dictionary<string, double>();
			}
			double value2 = 0.0;
			if (cnt.TryGetValue(label, out value2))
			{
				cnt[label] = value2 + value;
			}
			else
			{
				cnt.Add(label, value);
			}
		}

		internal void AddReplace(string label, double value)
		{
			if (cnt == null)
			{
				cnt = new Dictionary<string, double>();
			}
			if (cnt.ContainsKey(label))
			{
				cnt[label] = value;
			}
			else
			{
				cnt.Add(label, value);
			}
		}

		internal void AddAverage(string label, double value)
		{
			if (avg == null)
			{
				avg = new Dictionary<string, Average>();
			}
			Average value2 = null;
			if (!avg.TryGetValue(label, out value2))
			{
				value2 = new Average();
				avg.Add(label, value2);
			}
			value2.Sum += value;
			value2.Cnt++;
			if (value2.Cnt == 1)
			{
				value2.Min = value;
				value2.Max = value;
			}
			else
			{
				value2.Min = Math.Min(value, value2.Min);
				value2.Max = Math.Max(value, value2.Max);
			}
		}
	}

	public Container GetCategory(string name)
	{
		if (TryGetValue(name, out var value))
		{
			return value;
		}
		value = new Container();
		Add(name, value);
		return value;
	}
}
