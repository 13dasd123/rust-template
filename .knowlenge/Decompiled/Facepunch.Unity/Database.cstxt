using System;
using System.Collections.Specialized;
using System.Linq;
using System.Net;
using System.Text;
using Facepunch;
using Facepunch.Models.Database;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

public static class Database
{
	public static void Insert(string parent, object contents, Action<bool> onFinished = null)
	{
		if (Application.Manifest == null || string.IsNullOrEmpty(Application.Manifest.DatabaseUrl))
		{
			return;
		}
		Add add = new Add();
		add.Auth = Application.Integration.Auth;
		add.Content = JsonConvert.SerializeObject(contents);
		add.Parent = parent;
		Add value = add;
		NameValueCollection nameValueCollection = new NameValueCollection();
		nameValueCollection.Add("data", JsonConvert.SerializeObject(value));
		Uri address = new Uri(Application.Manifest.DatabaseUrl.Replace("{action}", "add"));
		WebClient webClient = new WebClient();
		webClient.Encoding = Encoding.UTF8;
		WebClient webClient2 = webClient;
		if (onFinished != null)
		{
			webClient2.UploadValuesCompleted += delegate(object s, UploadValuesCompletedEventArgs e)
			{
				onFinished(Encoding.UTF8.GetString(e.Result) == "\"ok\"");
			};
		}
		webClient2.UploadValuesAsync(address, "POST", nameValueCollection);
	}

	public static Result<T> Query<T>(string parent, int limit, Action<Result<T>> onFinished = null)
	{
		Result<T> result = new Result<T>();
		result.Running = true;
		string text = Application.Manifest.DatabaseUrl.Replace("{action}", "query");
		text = text + "&parent=" + parent;
		text = text + "&limit=" + limit;
		WebClient webClient = new WebClient();
		webClient.Encoding = Encoding.UTF8;
		WebClient webClient2 = webClient;
		webClient2.DownloadStringCompleted += delegate(object s, DownloadStringCompletedEventArgs e)
		{
			result.Running = false;
			try
			{
				QueryResponse[] source = JsonConvert.DeserializeObject<QueryResponse[]>(e.Result);
				result.Entries = source.Select((QueryResponse x) => new Result<T>.Entry
				{
					Id = x.Id,
					Created = x.Created,
					Updated = x.Updated,
					AuthorId = x.AuthorId,
					AuthType = x.AuthType,
					Content = JsonConvert.DeserializeObject<T>(x.Content)
				}).ToArray();
				result.Success = true;
			}
			catch (Exception)
			{
				result.Success = false;
			}
			if (onFinished != null)
			{
				Threading.QueueOnMainThread(delegate
				{
					onFinished(result);
				});
			}
		};
		webClient2.DownloadStringAsync(new Uri(text));
		return result;
	}

	public static void Count(string parent, Action<int> onResult)
	{
		if (onResult == null)
		{
			throw new ArgumentNullException("onResult");
		}
		string text = Application.Manifest.DatabaseUrl.Replace("{action}", "count");
		text = text + "&parent=" + parent;
		WebClient webClient = new WebClient();
		webClient.Encoding = Encoding.UTF8;
		WebClient webClient2 = webClient;
		webClient2.DownloadStringCompleted += delegate(object s, DownloadStringCompletedEventArgs e)
		{
			int count = 0;
			try
			{
				JToken jToken = JToken.Parse(e.Result);
				if (jToken.Type == JTokenType.Integer)
				{
					count = (int)jToken;
				}
			}
			catch (Exception)
			{
				count = -1;
			}
			Threading.QueueOnMainThread(delegate
			{
				onResult(count);
			});
		};
		webClient2.DownloadStringAsync(new Uri(text));
	}
}
