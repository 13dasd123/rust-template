using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Text;
using Facepunch;
using Facepunch.Extend;
using Facepunch.Math;
using Newtonsoft.Json;
using Rust;
using UnityEngine;
using UnityEngine.SceneManagement;

public class ExceptionReporter : MonoBehaviour
{
	private static readonly Stopwatch LastReportTime = Stopwatch.StartNew();

	private static int _reportsSentCounter;

	public static bool Disabled { get; set; }

	public static string PublicKey { get; private set; }

	public static string SecretKey { get; private set; }

	public static string Host { get; private set; }

	public static string ProjectId { get; private set; }

	public static int ReportMessageMaxLength { get; set; }

	private static Dictionary<string, string> Headers
	{
		get
		{
			string text = Epoch.Current.ToString();
			Dictionary<string, string> dictionary = new Dictionary<string, string>();
			dictionary.Add("X-Sentry-Auth", "Sentry sentry_version=5, sentry_client=FacepunchER/1.0, sentry_timestamp=" + text + ", sentry_key=" + PublicKey + ", sentry_secret=" + SecretKey);
			return dictionary;
		}
	}

	internal static void InstallHooks()
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Expected O, but got Unknown
		Application.logMessageReceived += new LogCallback(OnLogMessage);
	}

	private static void OnLogMessage(string message, string stackTrace, LogType type)
	{
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0078: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Invalid comparison between Unknown and I4
		//IL_00f3: Unknown result type (might be due to invalid IL or missing references)
		if (Disabled || !Application.Integration.ShouldReportException(message, stackTrace, type))
		{
			return;
		}
		if (LastReportTime.Elapsed.TotalSeconds > 60.0)
		{
			LastReportTime.Reset();
			LastReportTime.Start();
			_reportsSentCounter = 0;
		}
		if (_reportsSentCounter >= 5)
		{
			return;
		}
		LastReportTime.Reset();
		LastReportTime.Start();
		_reportsSentCounter++;
		if ((int)type == 4)
		{
			if (message.Contains("NullReferenceException"))
			{
				string[] array = stackTrace.Split('\n');
				message = message + ": " + array[0];
			}
			if (message.Contains("IndexOutOfRangeException"))
			{
				string[] array2 = stackTrace.Split('\n');
				message = message + ": " + array2[0];
			}
			if (message.Contains("ArgumentOutOfRangeException"))
			{
				string[] array3 = stackTrace.Split('\n');
				message = message + ": " + array3[0];
			}
		}
		SendReport(message, stackTrace, type);
	}

	public static void InitializeFromUrl(string url)
	{
		string[] array = url.Replace("https://", "").Split('/', ':', '@');
		PublicKey = array[0];
		SecretKey = array[1];
		Host = array[2];
		ProjectId = array[3];
	}

	public static void SendReport(string exception, string stacktrace, LogType logType)
	{
		//IL_0125: Unknown result type (might be due to invalid IL or missing references)
		//IL_012a: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e0: Unknown result type (might be due to invalid IL or missing references)
		//IL_01e5: Unknown result type (might be due to invalid IL or missing references)
		//IL_02ad: Unknown result type (might be due to invalid IL or missing references)
		if (!string.IsNullOrEmpty(Host) && !string.IsNullOrEmpty(ProjectId) && !string.IsNullOrEmpty(PublicKey) && !string.IsNullOrEmpty(SecretKey))
		{
			Report report = new Report();
			report.release = BuildInfo.Current.Scm.Branch.Replace("/", "-") + "#" + BuildInfo.Current.Scm.ChangeId;
			report.message = StringExtensions.Truncate(exception, ReportMessageMaxLength, "");
			report.platform = "csharp";
			report.event_id = Guid.NewGuid().ToString("N");
			report.stacktrace = new Report.StackTrace(stacktrace);
			report.user = new Report.User();
			report.tags = new Dictionary<string, string>();
			report.tags.Add("memory", Mathf.RoundToInt((float)(SystemInfo.systemMemorySize / 1024)) + "gb");
			report.tags.Add("operatingSystem", SystemInfo.operatingSystem);
			Dictionary<string, string> tags = report.tags;
			BatteryStatus batteryStatus = SystemInfo.batteryStatus;
			tags.Add("batteryStatus", ((object)(BatteryStatus)(ref batteryStatus)/*cast due to .constrained prefix*/).ToString());
			report.tags.Add("deviceModel", SystemInfo.deviceModel);
			report.tags.Add("processorType", SystemInfo.processorType);
			report.tags.Add("graphicsDeviceName", SystemInfo.graphicsDeviceName);
			report.tags.Add("graphicsMemorySize", Mathf.RoundToInt((float)(SystemInfo.graphicsMemorySize / 1024)) + "gb");
			report.tags.Add("architecture", (IntPtr.Size == 4) ? "x86" : "x64");
			Dictionary<string, string> tags2 = report.tags;
			Scene sceneAt = SceneManager.GetSceneAt(0);
			tags2.Add("scene", ((Scene)(ref sceneAt)).name);
			report.tags.Add("qualitylevel", QualitySettings.GetQualityLevel().ToString());
			report.tags.Add("level", ((object)(LogType)(ref logType)/*cast due to .constrained prefix*/).ToString().ToLower());
			if (Application.isQuitting)
			{
				report.tags.Add("quitting", "true");
			}
			report.tags.Add("realm", "SERVER");
			string s = JsonConvert.SerializeObject((object)report);
			new WWW("https://" + Host + "/api/" + ProjectId + "/store/", Encoding.ASCII.GetBytes(s), Headers);
		}
	}
}
