using System;
using System.Collections.Generic;
using Facepunch;
using Facepunch.Models;
using Facepunch.Models.Leaderboard;
using Newtonsoft.Json;
using UnityEngine;

public static class Leaderboard
{
	public static void Insert(string board, float score, bool OnlyIfLower = false, bool OnlyIfHigher = false, string extra = "", Action<string> result = null)
	{
		if (Facepunch.Application.Manifest != null && !string.IsNullOrEmpty(Facepunch.Application.Manifest.LeaderboardUrl))
		{
			if (Facepunch.Application.Integration.DebugOutput)
			{
				Debug.Log($"[Leaderboard] Insert {board} {score}");
			}
			Add add = new Add();
			add.Parent = board;
			add.Auth = Facepunch.Application.Integration.Auth;
			add.Score = score;
			add.ReplaceIfHigher = OnlyIfHigher;
			add.ReplaceIfLower = OnlyIfLower;
			add.Extra = extra;
			Add value = add;
			Dictionary<string, string> dictionary = new Dictionary<string, string>();
			dictionary.Add("data", JsonConvert.SerializeObject(value));
			string url = Facepunch.Application.Manifest.LeaderboardUrl.Replace("{action}", "add");
			WebUtil.Post(url, dictionary, wait: false, result);
		}
	}

	public static void GetRank(string board, string userid, bool desc = true, string[] friends = null, Action<Rank> result = null)
	{
		if (Facepunch.Application.Manifest == null || string.IsNullOrEmpty(Facepunch.Application.Manifest.LeaderboardUrl))
		{
			return;
		}
		if (Facepunch.Application.Integration.DebugOutput)
		{
			Debug.Log($"[Leaderboard] Place {board} {userid}");
		}
		Auth auth = Facepunch.Application.Integration.Auth;
		if (auth == null)
		{
			return;
		}
		string text = Facepunch.Application.Manifest.LeaderboardUrl.Replace("{action}", "place");
		text += $"&type={WebUtil.Escape(auth.Type)}";
		text += $"&userid={WebUtil.Escape(userid)}";
		text += $"&board={WebUtil.Escape(board)}";
		text += $"&desc={desc}";
		if (friends != null && friends.Length > 0)
		{
			text += string.Format("&friends={0}", WebUtil.Escape(string.Join(";", friends)));
		}
		WebUtil.Get(text, delegate(string txt)
		{
			if (result != null)
			{
				Rank obj = JsonConvert.DeserializeObject<Rank>(txt);
				result(obj);
			}
		});
	}

	public static void GetPage(string board, string country = null, string city = null, int skip = 0, int take = 20, bool desc = true, string[] friends = null, Action<Entry[]> result = null)
	{
		if (Facepunch.Application.Manifest == null || string.IsNullOrEmpty(Facepunch.Application.Manifest.LeaderboardUrl))
		{
			return;
		}
		if (Facepunch.Application.Integration.DebugOutput)
		{
			Debug.Log($"[Leaderboard] GetPage {board}");
		}
		Auth auth = Facepunch.Application.Integration.Auth;
		if (auth == null)
		{
			return;
		}
		string text = Facepunch.Application.Manifest.LeaderboardUrl.Replace("{action}", "page");
		text += $"&type={WebUtil.Escape(auth.Type)}";
		text += $"&board={WebUtil.Escape(board)}";
		text += $"&desc={desc}";
		text += $"&skip={skip}";
		text += $"&take={take}";
		if (!string.IsNullOrEmpty(country))
		{
			text += $"&country={WebUtil.Escape(country)}";
		}
		if (!string.IsNullOrEmpty(city))
		{
			text += $"&city={WebUtil.Escape(city)}";
		}
		if (friends != null && friends.Length > 0)
		{
			text += string.Format("&friends={0}", WebUtil.Escape(string.Join(";", friends)));
		}
		WebUtil.Get(text, delegate(string txt)
		{
			if (result != null)
			{
				Entry[] obj = JsonConvert.DeserializeObject<Entry[]>(txt);
				result(obj);
			}
		});
	}
}
