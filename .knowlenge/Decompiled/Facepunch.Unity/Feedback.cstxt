using System;
using System.Collections.Generic;
using System.Linq;
using Facepunch;
using Facepunch.Models;
using Facepunch.Models.Feedback;
using Newtonsoft.Json;
using UnityEngine;

public static class Feedback
{
	public static Action<List<PlayerInfo>> GetPlayersForFeedback;

	public static bool IsOpening { get; private set; }

	internal static void Frame()
	{
		if (Input.GetKeyDown(KeyCode.F7))
		{
			Open();
		}
	}

	public static bool Open(string section = "")
	{
		if (Facepunch.Application.Manifest == null)
		{
			Debug.LogWarning("[Feedback] Manifest not loaded");
			return false;
		}
		if (string.IsNullOrEmpty(Facepunch.Application.Manifest.FeedbackUrl))
		{
			Debug.LogWarning("[Feedback] Feedback URL isn't set in manifest");
			return false;
		}
		if (IsOpening)
		{
			Debug.LogWarning("[Feedback] Already opening");
			return false;
		}
		GameInfo gameInfo = default(GameInfo);
		gameInfo.Auth = Facepunch.Application.Integration.Auth;
		GameInfo gameInfo2 = gameInfo;
		try
		{
			List<PlayerInfo> list = new List<PlayerInfo>();
			if (GetPlayersForFeedback != null)
			{
				GetPlayersForFeedback(list);
			}
			gameInfo2.Players = list.Take(100).ToArray();
		}
		catch (Exception exception)
		{
			Debug.LogWarning("[Feedback] Error getting player list");
			Debug.LogException(exception);
		}
		Dictionary<string, string> dictionary = new Dictionary<string, string>();
		dictionary.Add("data", JsonConvert.SerializeObject(gameInfo2));
		Uri uri = new Uri(Facepunch.Application.Manifest.FeedbackUrl);
		Debug.Log("[Feedback] Querying Feedback..");
		WebUtil.Post(Facepunch.Application.Manifest.FeedbackUrl, dictionary, wait: false, delegate(string str)
		{
			str = str.Trim('"');
			if (!string.IsNullOrEmpty(section))
			{
				str = $"{str}&type={section}";
			}
			Debug.Log("[Feedback] Got Response");
			Debug.Log($"[Feedback] Opening Url: \"{str}\"");
			UnityEngine.Application.OpenURL(str);
		});
		return true;
	}
}
