using System;
using System.Runtime.InteropServices;
using UnityEngine;
using UnityEngine.Rendering;

[StructLayout(LayoutKind.Sequential, Size = 1)]
[JsonModel]
public struct Hardware
{
	public string deviceName => SystemInfo.deviceName;

	public string operatingSystem => SystemInfo.operatingSystem;

	public string processorType => SystemInfo.processorType;

	public string processorCount => SystemInfo.processorCount.ToString();

	public string systemMemorySize => SystemInfo.systemMemorySize + "MB";

	public string graphicsDeviceName => SystemInfo.graphicsDeviceName;

	public string graphicsDeviceVersion => SystemInfo.graphicsDeviceVersion;

	public string graphicsMemorySize => SystemInfo.graphicsMemorySize + "MB";

	public string graphicsShaderLevel => SystemInfo.graphicsShaderLevel.ToString();

	public string graphicsDeviceType
	{
		get
		{
			//IL_0000: Unknown result type (might be due to invalid IL or missing references)
			//IL_0005: Unknown result type (might be due to invalid IL or missing references)
			GraphicsDeviceType val = SystemInfo.graphicsDeviceType;
			return ((object)(GraphicsDeviceType)(ref val)/*cast due to .constrained prefix*/).ToString();
		}
	}

	public string deviceUniqueIdentifier => SystemInfo.deviceUniqueIdentifier;

	public string graphicsDeviceVendor => SystemInfo.graphicsDeviceVendor;

	public bool graphicsMultiThreaded => SystemInfo.graphicsMultiThreaded;

	public int processorFrequency => SystemInfo.processorFrequency;

	public string processorArchitecture
	{
		get
		{
			if (IntPtr.Size == 4)
			{
				return "x86";
			}
			return "x64";
		}
	}
}
