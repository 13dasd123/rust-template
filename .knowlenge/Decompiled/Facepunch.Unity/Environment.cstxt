using System.Runtime.InteropServices;
using UnityEngine;

[StructLayout(LayoutKind.Sequential, Size = 1)]
[JsonModel]
public struct Environment
{
	public string unityVersion => Application.unityVersion;

	public string version => Application.version;

	public string companyName => Application.companyName;

	public bool isEditor => Application.isEditor;

	public bool isPlayer => !Application.isEditor;

	public string systemLanguage
	{
		get
		{
			//IL_0000: Unknown result type (might be due to invalid IL or missing references)
			//IL_0005: Unknown result type (might be due to invalid IL or missing references)
			SystemLanguage val = Application.systemLanguage;
			return ((object)(SystemLanguage)(ref val)/*cast due to .constrained prefix*/).ToString();
		}
	}

	public int targetFrameRate => Application.targetFrameRate;

	public Resolution currentResolution => Screen.currentResolution;

	public int screenWidth => Screen.width;

	public int screenHeight => Screen.height;

	public bool fullScreen => Screen.fullScreen;

	public string anisotropicFiltering
	{
		get
		{
			//IL_0000: Unknown result type (might be due to invalid IL or missing references)
			//IL_0005: Unknown result type (might be due to invalid IL or missing references)
			AnisotropicFiltering val = QualitySettings.anisotropicFiltering;
			return ((object)(AnisotropicFiltering)(ref val)/*cast due to .constrained prefix*/).ToString();
		}
	}

	public string antiAliasing => QualitySettings.antiAliasing.ToString();

	public string qualityLevel => QualitySettings.GetQualityLevel().ToString();

	public string globalMaximumLOD => Shader.globalMaximumLOD.ToString();

	public string lodBias => QualitySettings.lodBias.ToString();

	public string maximumLODLevel => QualitySettings.maximumLODLevel.ToString();

	public string particleRaycastBudget => QualitySettings.particleRaycastBudget.ToString();

	public string pixelLightCount => QualitySettings.pixelLightCount.ToString();

	public string realtimeReflectionProbes => QualitySettings.realtimeReflectionProbes.ToString();

	public string shadowCascades => QualitySettings.shadowCascades.ToString();

	public string shadowDistance => QualitySettings.shadowDistance.ToString();

	public string softVegetation => QualitySettings.softVegetation.ToString();

	public string vSyncCount => QualitySettings.vSyncCount.ToString();
}
