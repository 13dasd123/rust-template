using System;
using System.Runtime.CompilerServices;
using Facepunch.Extend;
using UnityEngine;

public class Command
{
	public string Name;

	public string Parent;

	public string FullName;

	public Func<string> GetOveride;

	public Action<string> SetOveride;

	public Action<Arg> Call;

	public bool Variable;

	public bool Saved;

	public bool ServerAdmin;

	public bool ServerUser;

	public bool ClientAdmin;

	public bool Client;

	public bool ClientInfo;

	public bool AllowRunFromServer;

	public string Description = string.Empty;

	public string Arguments = string.Empty;

	public bool Server
	{
		[CompilerGenerated]
		get
		{
			return ServerAdmin || ServerUser;
		}
	}

	public string String
	{
		[CompilerGenerated]
		get
		{
			return GetOveride();
		}
	}

	public int AsInt
	{
		[CompilerGenerated]
		get
		{
			return String.ToInt();
		}
	}

	public float AsFloat
	{
		[CompilerGenerated]
		get
		{
			return String.ToFloat();
		}
	}

	public bool AsBool
	{
		[CompilerGenerated]
		get
		{
			return String.ToBool();
		}
	}

	public Vector3 AsVector3
	{
		[CompilerGenerated]
		get
		{
			return String.ToVector3();
		}
	}

	public event Action<Command> OnValueChanged;

	public Command()
	{
		Call = DefaultCall;
	}

	private void ValueChanged()
	{
		if (Saved)
		{
			HasChanges = true;
		}
		if (ClientInfo)
		{
			SendToServer(BuildCommand("setinfo", FullName, String));
		}
		if (this.OnValueChanged != null)
		{
			this.OnValueChanged(this);
		}
	}

	private void DefaultCall(Arg arg)
	{
		if (SetOveride != null && arg.HasArgs())
		{
			string @string = String;
			Set(arg.Args[0]);
			if (@string != String)
			{
				ValueChanged();
			}
		}
	}

	public void Set(string value)
	{
		if (SetOveride != null)
		{
			SetOveride(value);
		}
	}

	public void Set(float f)
	{
		string text = f.ToString("0.00");
		if (!(String == text))
		{
			Set(text);
		}
	}

	public void Set(bool val)
	{
		if (AsBool != val)
		{
			Set((!val) ? "0" : "1");
		}
	}
}
