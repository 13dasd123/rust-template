using System;
using System.Collections.Generic;
using Facepunch;
using UnityEngine;

public static class Index
{
	public static class Server
	{
		public static Dictionary<string, Command> Dict = new Dictionary<string, Command>(StringComparer.OrdinalIgnoreCase);

		public static Dictionary<string, Command> GlobalDict = new Dictionary<string, Command>(StringComparer.OrdinalIgnoreCase);

		public static List<Command> Replicated = new List<Command>();

		public static Command Find(string strName)
		{
			if (!strName.Contains("."))
			{
				strName = "global." + strName;
			}
			if (Dict.TryGetValue(strName, out var value))
			{
				return value;
			}
			GlobalDict.TryGetValue(strName.Replace("global.", ""), out value);
			return value;
		}
	}

	public static class Client
	{
		public static Dictionary<string, Command> Dict = new Dictionary<string, Command>(StringComparer.OrdinalIgnoreCase);

		public static Dictionary<string, Command> GlobalDict = new Dictionary<string, Command>(StringComparer.OrdinalIgnoreCase);

		public static Command Find(string strName)
		{
			if (!strName.Contains("."))
			{
				strName = WithGlobal.Get(strName);
			}
			if (Dict.TryGetValue(strName, out var value))
			{
				return value;
			}
			GlobalDict.TryGetValue(WithoutGlobal.Get(strName), out value);
			return value;
		}
	}

	private static readonly Memoized<string, string> WithGlobal = new Memoized<string, string>((string s) => "global." + s);

	private static readonly Memoized<string, string> WithoutGlobal = new Memoized<string, string>((string s) => s.Replace("global.", ""));

	public static Command[] All { get; set; }

	public static void Initialize(Command[] Commands)
	{
		All = Commands;
		Server.Dict = new Dictionary<string, Command>();
		Client.Dict = new Dictionary<string, Command>();
		Command[] all = All;
		foreach (Command command2 in all)
		{
			if (command2.Server)
			{
				if (Server.Dict.ContainsKey(command2.FullName))
				{
					Debug.LogWarning("Server Vars have multiple entries for " + command2.FullName);
				}
				else
				{
					Server.Dict.Add(command2.FullName, command2);
				}
				if (command2.Parent != "global" && !Server.GlobalDict.ContainsKey(command2.Name))
				{
					Server.GlobalDict.Add(command2.Name, command2);
				}
				if (command2.Replicated)
				{
					if (!command2.Variable || !command2.ServerAdmin)
					{
						Debug.LogWarning("Replicated server var " + command2.FullName + " has a bad config");
					}
					else
					{
						Server.Replicated.Add(command2);
						command2.OnValueChanged += delegate(Command command)
						{
							ConsoleSystem.OnReplicatedVarChanged?.Invoke(command.FullName, command.String);
						};
					}
				}
			}
			if (command2.Client)
			{
				if (Client.Dict.ContainsKey(command2.FullName))
				{
					Debug.LogWarning("Client Vars have multiple entries for " + command2.FullName);
				}
				else
				{
					Client.Dict.Add(command2.FullName, command2);
				}
				if (command2.Parent != "global" && !Client.GlobalDict.ContainsKey(command2.Name))
				{
					Client.GlobalDict.Add(command2.Name, command2);
				}
			}
		}
		Input.RunBind += delegate(string strCommand, bool pressed)
		{
			Command command3 = Client.Find(strCommand);
			if (command3 != null && command3.Variable && !command3.ClientAdmin && !command3.ServerAdmin && !command3.Replicated)
			{
				command3.Set(pressed);
			}
			else
			{
				Run(Option.Client, $"{strCommand} {pressed}");
			}
		};
	}

	public static void Reset()
	{
		if (All == null)
		{
			return;
		}
		Command[] all = All;
		foreach (Command command in all)
		{
			if (command.Variable && command.Default != null)
			{
				try
				{
					command.Set(command.Default);
				}
				catch (Exception message)
				{
					Debug.LogError(message);
				}
			}
		}
	}
}
