using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using Oxide.Core;
using Oxide.Core.Extensions;
using Oxide.Core.Plugins;
using Oxide.Core.Plugins.Watchers;
using Oxide.Plugins;

public class CSharpExtension : Extension
{
	internal static readonly Version AssemblyVersion = Assembly.GetExecutingAssembly().GetName().Version;

	private CSharpPluginLoader loader;

	public override string Name => "CSharp";

	public override VersionNumber Version => new VersionNumber(AssemblyVersion.Major, AssemblyVersion.Minor, AssemblyVersion.Build);

	public override string Author => "Oxide Team";

	public FSWatcher Watcher { get; private set; }

	public CSharpExtension(ExtensionManager manager)
		: base(manager)
	{
		if (Environment.OSVersion.Platform == PlatformID.Unix)
		{
			string extensionDirectory = Interface.Oxide.ExtensionDirectory;
			File.WriteAllText(Path.Combine(extensionDirectory, "Mono.Posix.dll.config"), $"<configuration>\n<dllmap dll=\"MonoPosixHelper\" target=\"{extensionDirectory}/x86/libMonoPosixHelper.so\" os=\"!windows,osx\" wordsize=\"32\" />\n" + $"<dllmap dll=\"MonoPosixHelper\" target=\"{extensionDirectory}/x64/libMonoPosixHelper.so\" os=\"!windows,osx\" wordsize=\"64\" />\n</configuration>");
		}
	}

	public override void Load()
	{
		loader = new CSharpPluginLoader(this);
		base.Manager.RegisterPluginLoader(loader);
		Interface.Oxide.OnFrame(OnFrame);
	}

	public override void LoadPluginWatchers(string pluginDirectory)
	{
		Watcher = new FSWatcher(pluginDirectory, "*.cs");
		base.Manager.RegisterPluginChangeWatcher(Watcher);
	}

	public override void OnModLoad()
	{
		loader.OnModLoaded();
	}

	public override void OnShutdown()
	{
		base.OnShutdown();
		loader.OnShutdown();
	}

	private void OnFrame(float delta)
	{
		object[] args = new object[1] { delta };
		foreach (KeyValuePair<string, Plugin> loadedPlugin in loader.LoadedPlugins)
		{
			if (loadedPlugin.Value is CSharpPlugin { HookedOnFrame: not false } cSharpPlugin)
			{
				cSharpPlugin.CallHook("OnFrame", args);
			}
		}
	}
}
