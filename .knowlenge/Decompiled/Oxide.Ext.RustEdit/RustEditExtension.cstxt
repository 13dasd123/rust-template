using System;
using System.Reflection;
using Oxide.Core;
using Oxide.Core.Extensions;
using Oxide.Ext.RustEdit;
using Oxide.Ext.RustEdit.Libraries;

public class RustEditExtension : Extension
{
	internal static Assembly Assembly = Assembly.GetExecutingAssembly();

	internal static AssemblyName AssemblyName = Assembly.GetName();

	internal static VersionNumber AssemblyVersion = new VersionNumber(AssemblyName.Version.Major, AssemblyName.Version.Minor, AssemblyName.Version.Build);

	internal static string AssemblyAuthors = ((AssemblyCompanyAttribute)Attribute.GetCustomAttribute(Assembly, typeof(AssemblyCompanyAttribute), inherit: false)).Company;

	public override string Name => "RustEdit";

	public override string Author => "k1lly0u";

	public override VersionNumber Version => GetVersion;

	public static VersionNumber GetVersion => new VersionNumber(1, 0, 52);

	public RustEditExtension(ExtensionManager manager)
		: base(manager)
	{
	}

	public override void Load()
	{
		base.Manager.RegisterLibrary("Helper", new Helper());
		base.Manager.RegisterPluginLoader(new RustEditPluginLoader());
	}

	public override void OnModLoad()
	{
		AppDomain.CurrentDomain.UnhandledException += delegate(object sender, UnhandledExceptionEventArgs exception)
		{
			Interface.Oxide.LogException("An exception was thrown!", exception.ExceptionObject as Exception);
		};
	}
}
