using System.Collections.Generic;
using System.Runtime.CompilerServices;
using Oxide.Ext.RustEdit;
using ProtoBuf;
using UnityEngine;

internal class CustomTopologyLayers : REPlugin
{
	internal static readonly Dictionary<string, TerrainTopologyMap> \u206e\u206c\u200d\u206f\u202b\u200c\u202b\u206c\u200f\u206e\u206a\u202c\u202e\u202b\u202e\u206b\u200d\u206d\u200d\u200c\u206d\u206b\u206d\u202a\u206e\u200f\u202d\u200b\u202c\u206a\u206c\u202c\u206a\u202c\u206d\u202b\u200c\u200c\u202e\u202d\u202e = new Dictionary<string, TerrainTopologyMap>();

	private const string CUSTOM_TOPOLOGY_KEY = "custom_topology_";

	[MethodImpl(MethodImplOptions.NoInlining)]
	public CustomTopologyLayers()
	{
		while (true)
		{
			int num = -568420043;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ -953182904)) % 4)
				{
				case 2u:
					break;
				default:
					return;
				case 1u:
					base.Title = global::<Module>.\u200b\u206b\u200d\u206f\u200b\u206a\u202c\u200f\u206f\u206a\u202b\u200f\u206c\u206b\u202b\u206c\u200b\u206d\u200c\u200c\u206b\u200e\u206b\u206e\u202d\u200f\u206f\u206a\u200c\u200e\u206e\u200d\u202d\u200c\u206c\u200b\u206b\u200f\u202d\u206b\u202e<string>(205493414);
					base.Author = RustEditExtension.AssemblyAuthors;
					num = -1241113049;
					continue;
				case 3u:
					base.Version = RustEditExtension.AssemblyVersion;
					RustEditCore.\u200c\u206c\u202c\u200f\u200e\u202b\u202a\u200b\u202e\u206e\u206a\u202d\u200c\u202c\u206a\u206e\u206c\u200b\u200c\u200f\u206a\u206f\u202a\u202d\u202e\u206c\u200b\u202b\u206a\u200d\u206a\u200e\u202a\u202c\u206c\u200e\u206b\u202b\u202e\u200d\u202e += \u200c\u200d\u206a\u206c\u206b\u200b\u206d\u202d\u200b\u206c\u206a\u200d\u200c\u202a\u202d\u202c\u206e\u202c\u200e\u202e\u206e\u200c\u206b\u206a\u200c\u200e\u202e\u202d\u206d\u200d\u200b\u202c\u206b\u200e\u202a\u202b\u200e\u206f\u202a\u200d\u202e;
					num = (int)((num2 * 2049561494) ^ 0x50C3194E);
					continue;
				case 0u:
					return;
				}
				break;
			}
		}
	}

	[MethodImpl(MethodImplOptions.NoInlining)]
	public void \u200c\u200d\u206a\u206c\u206b\u200b\u206d\u202d\u200b\u206c\u206a\u200d\u200c\u202a\u202d\u202c\u206e\u202c\u200e\u202e\u206e\u200c\u206b\u206a\u200c\u200e\u202e\u202d\u206d\u200d\u200b\u202c\u206b\u200e\u202a\u202b\u200e\u206f\u202a\u200d\u202e()
	{
		List<MapData> list = \u200e\u202b\u206f\u206d\u206f\u206f\u200b\u202d\u206c\u202e\u202a\u202d\u206d\u202a\u206d\u206f\u200e\u202a\u206d\u200d\u206b\u202b\u206c\u206e\u202d\u200d\u202a\u206a\u200e\u202a\u202d\u206c\u202c\u200d\u206e\u202a\u206c\u202e\u206a\u206a\u202e();
		TerrainTopologyMap terrainTopologyMap = default(TerrainTopologyMap);
		MapData current = default(MapData);
		string key = default(string);
		while (true)
		{
			int num = -1609598281;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ -2081974117)) % 5)
				{
				case 0u:
					break;
				case 4u:
					return;
				case 3u:
				{
					int num5;
					int num6;
					if (list.Count != 0)
					{
						num5 = 1434684724;
						num6 = num5;
					}
					else
					{
						num5 = 946253704;
						num6 = num5;
					}
					num = num5 ^ (int)(num2 * 1183996318);
					continue;
				}
				case 2u:
				{
					int num7;
					int num8;
					if (list != null)
					{
						num7 = 2045564671;
						num8 = num7;
					}
					else
					{
						num7 = 528285404;
						num8 = num7;
					}
					num = num7 ^ (int)(num2 * 1185392071);
					continue;
				}
				default:
				{
					using (List<MapData>.Enumerator enumerator = list.GetEnumerator())
					{
						while (true)
						{
							IL_013b:
							int num3;
							int num4;
							if (!enumerator.MoveNext())
							{
								num3 = -129131711;
								num4 = num3;
							}
							else
							{
								num3 = -1348618440;
								num4 = num3;
							}
							while (true)
							{
								switch ((num2 = (uint)(num3 ^ -2081974117)) % 6)
								{
								case 3u:
									num3 = -1348618440;
									continue;
								default:
									goto end_IL_008a;
								case 0u:
									terrainTopologyMap.Init(TerrainMeta.Terrain, TerrainMeta.Config);
									terrainTopologyMap.Setup();
									terrainTopologyMap.isInitialized = true;
									terrainTopologyMap.FromByteArray(current.data);
									\u206e\u206c\u200d\u206f\u202b\u200c\u202b\u206c\u200f\u206e\u206a\u202c\u202e\u202b\u202e\u206b\u200d\u206d\u200d\u200c\u206d\u206b\u206d\u202a\u206e\u200f\u202d\u200b\u202c\u206a\u206c\u202c\u206a\u202c\u206d\u202b\u200c\u200c\u202e\u202d\u202e[key] = terrainTopologyMap;
									num3 = (int)(num2 * 1767151822) ^ -583348126;
									continue;
								case 2u:
								{
									key = current.name.Replace(global::<Module>.\u206e\u202e\u202d\u206f\u206c\u206b\u200c\u202d\u200f\u206f\u206a\u206d\u206f\u202c\u200c\u200f\u200c\u206c\u200c\u202b\u206e\u200d\u202c\u202b\u202a\u202b\u202b\u200f\u200c\u200b\u202a\u206b\u202e\u202d\u200c\u200d\u200e\u200f\u206e\u202b\u202e<string>(224716614), "");
									GameObject gameObject = new GameObject(key);
									UnityEngine.Object.DontDestroyOnLoad(gameObject);
									terrainTopologyMap = gameObject.AddComponent<TerrainTopologyMap>();
									num3 = -846787097;
									continue;
								}
								case 5u:
									break;
								case 1u:
									current = enumerator.Current;
									num3 = -1351074241;
									continue;
								case 4u:
									goto end_IL_008a;
								}
								goto IL_013b;
								continue;
								end_IL_008a:
								break;
							}
							break;
						}
					}
					LogInfo(string.Format(global::<Module>.\u202b\u206d\u206e\u206e\u206a\u206d\u200b\u206a\u206e\u206a\u202a\u202a\u202e\u206b\u202a\u200c\u202b\u206e\u202d\u202c\u206e\u200b\u200e\u200f\u202d\u202a\u200f\u202b\u206c\u206a\u206e\u200c\u202d\u200c\u200b\u202c\u206e\u200f\u206a\u206a\u202e<string>(773101852), \u206e\u206c\u200d\u206f\u202b\u200c\u202b\u206c\u200f\u206e\u206a\u202c\u202e\u202b\u202e\u206b\u200d\u206d\u200d\u200c\u206d\u206b\u206d\u202a\u206e\u200f\u202d\u200b\u202c\u206a\u206c\u202c\u206a\u202c\u206d\u202b\u200c\u200c\u202e\u202d\u202e.Count));
					return;
				}
				}
				break;
			}
		}
	}

	[MethodImpl(MethodImplOptions.NoInlining)]
	private List<MapData> \u200e\u202b\u206f\u206d\u206f\u206f\u200b\u202d\u206c\u202e\u202a\u202d\u206d\u202a\u206d\u206f\u200e\u202a\u206d\u200d\u206b\u202b\u206c\u206e\u202d\u200d\u202a\u206a\u200e\u202a\u202d\u206c\u202c\u200d\u206e\u202a\u206c\u202e\u206a\u206a\u202e()
	{
		List<MapData> list = new List<MapData>();
		using (List<MapData>.Enumerator enumerator = World.Serialization.world.maps.GetEnumerator())
		{
			MapData current = default(MapData);
			while (true)
			{
				IL_0047:
				int num;
				int num2;
				if (!enumerator.MoveNext())
				{
					num = -1158162870;
					num2 = num;
				}
				else
				{
					num = -1704640582;
					num2 = num;
				}
				while (true)
				{
					uint num3;
					switch ((num3 = (uint)(num ^ -572677674)) % 5)
					{
					case 4u:
						num = -1704640582;
						continue;
					default:
						goto end_IL_0022;
					case 3u:
						break;
					case 2u:
						list.Add(current);
						num = (int)(num3 * 609600572) ^ -823406325;
						continue;
					case 1u:
					{
						current = enumerator.Current;
						int num4;
						if (!current.name.StartsWith(global::<Module>.\u206e\u202e\u202d\u206f\u206c\u206b\u200c\u202d\u200f\u206f\u206a\u206d\u206f\u202c\u200c\u200f\u200c\u206c\u200c\u202b\u206e\u200d\u202c\u202b\u202a\u202b\u202b\u200f\u200c\u200b\u202a\u206b\u202e\u202d\u200c\u200d\u200e\u200f\u206e\u202b\u202e<string>(224716614)))
						{
							num = -599410961;
							num4 = num;
						}
						else
						{
							num = -189885023;
							num4 = num;
						}
						continue;
					}
					case 0u:
						goto end_IL_0022;
					}
					goto IL_0047;
					continue;
					end_IL_0022:
					break;
				}
				break;
			}
		}
		return list;
	}
}
