using System;
using System.IO;
using System.Runtime.CompilerServices;
using Newtonsoft.Json;
using Oxide.Core;
using Oxide.Core.Configuration;
using Oxide.Ext.RustEdit;
using UnityEngine;

public static class Config
{
	public class ConfigData
	{
		public class AutoUpdater
		{
			public bool Enabled { get; set; } = true;
		}

		public class SpawnSystems
		{
			[JsonProperty(PropertyName = "Enable loot container spawn handlers")]
			public bool Loot { get; set; } = true;

			[JsonProperty(PropertyName = "Enable resource spawn handlers")]
			public bool Resources { get; set; } = true;

			[JsonProperty(PropertyName = "Enable NPC spawn handlers")]
			public bool NPCs { get; set; } = true;

			[JsonProperty(PropertyName = "Enable APC spawn handlers")]
			public bool APC { get; set; } = true;
		}

		public class RespawnTimes
		{
			[JsonProperty(PropertyName = "Default loot containers")]
			public RespawnMinMax Loot { get; set; } = new RespawnMinMax(30, 60);

			[JsonProperty(PropertyName = "Desk keycard")]
			public RespawnMinMax Keycard { get; set; } = new RespawnMinMax(15, 20);

			[JsonProperty(PropertyName = "Diesel Collectable")]
			public RespawnMinMax Diesel { get; set; } = new RespawnMinMax(30, 45);

			[JsonProperty(PropertyName = "Junk piles")]
			public RespawnMinMax JunkPile { get; set; } = new RespawnMinMax(20, 45);

			[JsonProperty(PropertyName = "Resources")]
			public RespawnMinMax Resources { get; set; } = new RespawnMinMax(20, 45);

			[JsonProperty(PropertyName = "Traps/Barricades (Respawn/Re-Arm)")]
			public RespawnMinMax Traps { get; set; } = new RespawnMinMax(25, 40);

			[JsonProperty(PropertyName = "Vehicles")]
			public RespawnMinMax Vehicles { get; set; } = new RespawnMinMax(45, 60);
		}

		public class RespawnMinMax
		{
			[JsonProperty(PropertyName = "Minimum (minutes)")]
			public int Min { get; set; }

			[JsonProperty(PropertyName = "Maximum (minutes)")]
			public int Max { get; set; }

			[JsonIgnore]
			public int Random => UnityEngine.Random.Range(Min, Max);

			public RespawnMinMax()
			{
			}

			public RespawnMinMax(int min, int max)
			{
				while (true)
				{
					int num = -370526547;
					while (true)
					{
						uint num2;
						switch ((num2 = (uint)(num ^ -1047601438)) % 4)
						{
						case 0u:
							break;
						default:
							return;
						case 3u:
							Min = min;
							num = (int)((num2 * 680235164) ^ 0x73BCD1C0);
							continue;
						case 2u:
							Max = max;
							num = ((int)num2 * -863029992) ^ 0x5536EB6F;
							continue;
						case 1u:
							return;
						}
						break;
					}
				}
			}
		}

		[JsonProperty(PropertyName = "Automatic Updates")]
		public AutoUpdater Updater { get; set; } = new AutoUpdater();

		[JsonProperty(PropertyName = "Spawn Handlers")]
		public SpawnSystems Spawnables { get; set; } = new SpawnSystems();

		[JsonProperty(PropertyName = "Respawn Times")]
		public RespawnTimes Respawn { get; set; } = new RespawnTimes();

		public VersionNumber Version { get; set; }
	}

	private const string FILENAME = "RustEdit.json";

	public static ConfigData Data { get; private set; }

	private static JsonSerializerSettings Settings { get; set; }

	[MethodImpl(MethodImplOptions.NoInlining)]
	static Config()
	{
		Settings = new JsonSerializerSettings();
		Settings = new JsonSerializerSettings();
		Settings.Converters.Add(new KeyValuesConverter());
		LoadConfig(Path.Combine(Interface.Oxide.ConfigDirectory, global::<Module>.\u200b\u206b\u200d\u206f\u200b\u206a\u202c\u200f\u206f\u206a\u202b\u200f\u206c\u206b\u202b\u206c\u200b\u206d\u200c\u200c\u206b\u200e\u206b\u206e\u202d\u200f\u206f\u206a\u200c\u200e\u206e\u200d\u202d\u200c\u206c\u200b\u206b\u200f\u202d\u206b\u202e<string>(974680984)));
	}

	[MethodImpl(MethodImplOptions.NoInlining)]
	private static void LoadConfig(string path)
	{
		Data = ReadObject<ConfigData>(path);
		while (true)
		{
			int num = -1860268214;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ -285613770)) % 5)
				{
				case 3u:
					break;
				default:
					return;
				case 2u:
				{
					int num3;
					int num4;
					if (!(Data.Version < RustEditExtension.GetVersion))
					{
						num3 = -1040797415;
						num4 = num3;
					}
					else
					{
						num3 = -139105609;
						num4 = num3;
					}
					num = num3 ^ (int)(num2 * 13983739);
					continue;
				}
				case 1u:
					Data.Version = RustEditExtension.GetVersion;
					num = (int)(num2 * 421322651) ^ -635682559;
					continue;
				case 0u:
					WriteObject(Data, Path.Combine(Interface.Oxide.ConfigDirectory, global::<Module>.\u202b\u200e\u202e\u202a\u206f\u202e\u200c\u206a\u206a\u200b\u206a\u206c\u206f\u202b\u202e\u206f\u206b\u200c\u206a\u206e\u200e\u206c\u202c\u200e\u200d\u202d\u202c\u200e\u206b\u206a\u200b\u202d\u206d\u202c\u202e\u202e\u202c\u202b\u206a\u202a\u202e<string>(1391688457)));
					num = -152836467;
					continue;
				case 4u:
					return;
				}
				break;
			}
		}
	}

	private static T ReadObject<T>(string filename = null)
	{
		if (!File.Exists(filename))
		{
			goto IL_0008;
		}
		goto IL_0032;
		IL_0008:
		int num = -1628356039;
		goto IL_000d;
		IL_000d:
		T val = default(T);
		while (true)
		{
			uint num2;
			switch ((num2 = (uint)(num ^ -1086818574)) % 5)
			{
			case 3u:
				break;
			case 0u:
				goto IL_0032;
			case 1u:
				num = ((int)num2 * -2067168710) ^ 0x13539045;
				continue;
			case 4u:
				val = Activator.CreateInstance<T>();
				WriteObject(val, filename);
				num = ((int)num2 * -2015125839) ^ -388359961;
				continue;
			default:
				return val;
			}
			break;
		}
		goto IL_0008;
		IL_0032:
		val = JsonConvert.DeserializeObject<T>(File.ReadAllText(filename), Settings);
		num = -1300281879;
		goto IL_000d;
	}

	private static void WriteObject<T>(T config, string filename = null)
	{
		string directoryName = Utility.GetDirectoryName(filename);
		string contents = default(string);
		while (true)
		{
			int num = 1355812853;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ 0x158E4AE8)) % 7)
				{
				case 5u:
					break;
				default:
					return;
				case 0u:
					Directory.CreateDirectory(directoryName);
					num = ((int)num2 * -1674002292) ^ 0x88B48C5;
					continue;
				case 1u:
				{
					int num5;
					int num6;
					if (Directory.Exists(directoryName))
					{
						num5 = -486128075;
						num6 = num5;
					}
					else
					{
						num5 = -351099497;
						num6 = num5;
					}
					num = num5 ^ (int)(num2 * 2088855699);
					continue;
				}
				case 4u:
					contents = JsonConvert.SerializeObject(config, Formatting.Indented, Settings);
					num = 546347329;
					continue;
				case 6u:
					File.WriteAllText(filename, contents);
					num = ((int)num2 * -1291417054) ^ -2066386385;
					continue;
				case 2u:
				{
					int num3;
					int num4;
					if (directoryName != null)
					{
						num3 = 363962093;
						num4 = num3;
					}
					else
					{
						num3 = 785476984;
						num4 = num3;
					}
					num = num3 ^ ((int)num2 * -1814600627);
					continue;
				}
				case 3u:
					return;
				}
				break;
			}
		}
	}
}
