using Newtonsoft.Json;
using Oxide.Core;
using UnityEngine;

public class ConfigData
{
	public class AutoUpdater
	{
		public bool Enabled { get; set; } = true;
	}

	public class SpawnSystems
	{
		[JsonProperty(PropertyName = "Enable loot container spawn handlers")]
		public bool Loot { get; set; } = true;

		[JsonProperty(PropertyName = "Enable resource spawn handlers")]
		public bool Resources { get; set; } = true;

		[JsonProperty(PropertyName = "Enable NPC spawn handlers")]
		public bool NPCs { get; set; } = true;

		[JsonProperty(PropertyName = "Enable APC spawn handlers")]
		public bool APC { get; set; } = true;
	}

	public class RespawnTimes
	{
		[JsonProperty(PropertyName = "Default loot containers")]
		public RespawnMinMax Loot { get; set; } = new RespawnMinMax(30, 60);

		[JsonProperty(PropertyName = "Desk keycard")]
		public RespawnMinMax Keycard { get; set; } = new RespawnMinMax(15, 20);

		[JsonProperty(PropertyName = "Diesel Collectable")]
		public RespawnMinMax Diesel { get; set; } = new RespawnMinMax(30, 45);

		[JsonProperty(PropertyName = "Junk piles")]
		public RespawnMinMax JunkPile { get; set; } = new RespawnMinMax(20, 45);

		[JsonProperty(PropertyName = "Resources")]
		public RespawnMinMax Resources { get; set; } = new RespawnMinMax(20, 45);

		[JsonProperty(PropertyName = "Traps/Barricades (Respawn/Re-Arm)")]
		public RespawnMinMax Traps { get; set; } = new RespawnMinMax(25, 40);

		[JsonProperty(PropertyName = "Vehicles")]
		public RespawnMinMax Vehicles { get; set; } = new RespawnMinMax(45, 60);
	}

	public class RespawnMinMax
	{
		[JsonProperty(PropertyName = "Minimum (minutes)")]
		public int Min { get; set; }

		[JsonProperty(PropertyName = "Maximum (minutes)")]
		public int Max { get; set; }

		[JsonIgnore]
		public int Random => UnityEngine.Random.Range(Min, Max);

		public RespawnMinMax()
		{
		}

		public RespawnMinMax(int min, int max)
		{
			while (true)
			{
				int num = -370526547;
				while (true)
				{
					uint num2;
					switch ((num2 = (uint)(num ^ -1047601438)) % 4)
					{
					case 0u:
						break;
					default:
						return;
					case 3u:
						Min = min;
						num = (int)((num2 * 680235164) ^ 0x73BCD1C0);
						continue;
					case 2u:
						Max = max;
						num = ((int)num2 * -863029992) ^ 0x5536EB6F;
						continue;
					case 1u:
						return;
					}
					break;
				}
			}
		}
	}

	[JsonProperty(PropertyName = "Automatic Updates")]
	public AutoUpdater Updater { get; set; } = new AutoUpdater();

	[JsonProperty(PropertyName = "Spawn Handlers")]
	public SpawnSystems Spawnables { get; set; } = new SpawnSystems();

	[JsonProperty(PropertyName = "Respawn Times")]
	public RespawnTimes Respawn { get; set; } = new RespawnTimes();

	public VersionNumber Version { get; set; }
}
