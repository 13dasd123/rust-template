using System;
using System.Collections.Generic;
using System.Linq;
using Facepunch;
using Facepunch.Extend;
using UnityEngine;

[AddComponentMenu("Facepunch/Skeleton")]
public class Skeleton : MonoBehaviour
{
	public SkeletonDefinition Source;

	public GameObject[] Bones;

	public Transform GetTransform(int id)
	{
		if (id < 0)
		{
			return null;
		}
		if (!((Object)(object)Bones[id] != (Object)null))
		{
			return null;
		}
		return Bones[id].transform;
	}

	public Transform GetTransformSlow(string name)
	{
		SkeletonDefinition.Bone bone = Source.FindBone(name);
		if (!string.IsNullOrEmpty(bone.Name))
		{
			return GetTransform(bone.Id);
		}
		if (Bones != null && Bones.Length != 0)
		{
			for (int i = 0; i < Bones.Length; i++)
			{
				Transform val = TransformEx.FindChildRecursive(Bones[i].transform, name);
				if ((Object)(object)val != (Object)null)
				{
					return val;
				}
			}
		}
		return null;
	}

	public int GetBoneId(string boneName)
	{
		for (int i = 0; i < Source.Bones.Length; i++)
		{
			if (string.Equals(Source.Bones[i].Name, boneName, StringComparison.InvariantCultureIgnoreCase))
			{
				return Source.Bones[i].Id;
			}
		}
		return -1;
	}

	public IEnumerable<Transform> GetTransforms()
	{
		return Source.Bones.Select((SkeletonDefinition.Bone x) => GetTransform(x.Id));
	}

	public GameObject GetGameObject(int id)
	{
		if (id < 0)
		{
			return null;
		}
		return Bones[id];
	}

	public void CopyTo(Skeleton to)
	{
		//IL_00a2: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a3: Unknown result type (might be due to invalid IL or missing references)
		if ((Object)(object)to.Source != (Object)(object)Source)
		{
			throw new ArgumentException("Trying to copy transforms between different skeletons, source :" + ((Object)((Component)to).gameObject).name + " to :" + ((Object)((Component)to).gameObject).name);
		}
		if (to.Bones.Length != Bones.Length)
		{
			throw new ArgumentException("Bone arrays are different sizes, skeleton might need rebuilding");
		}
		Vector3 val = default(Vector3);
		Quaternion val2 = default(Quaternion);
		for (int i = 0; i < Bones.Length; i++)
		{
			if (!((Object)(object)Bones[i] == (Object)null) && !((Object)(object)to.Bones[i] == (Object)null))
			{
				Bones[i].transform.GetPositionAndRotation(ref val, ref val2);
				to.Bones[i].transform.SetPositionAndRotation(val, val2);
			}
		}
	}

	public void CopyFrom(Vector3[] sourceBonePos, Quaternion[] sourceBoneRot, bool localSpace)
	{
		//IL_007b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		if (sourceBonePos.Length != sourceBoneRot.Length)
		{
			throw new ArgumentException("Bone pos and rot arrays are different sizes");
		}
		if (sourceBonePos.Length != Bones.Length)
		{
			throw new ArgumentException("Bone arrays are different sizes, skeleton might need rebuilding");
		}
		for (int i = 0; i < sourceBonePos.Length; i++)
		{
			if (!((Object)(object)Bones[i] == (Object)null))
			{
				_ = ref sourceBonePos[i];
				if (localSpace)
				{
					Bones[i].transform.SetLocalPositionAndRotation(sourceBonePos[i], sourceBoneRot[i]);
				}
				else
				{
					Bones[i].transform.SetPositionAndRotation(sourceBonePos[i], sourceBoneRot[i]);
				}
			}
		}
	}

	public void CopySkeletonSkins(SkeletonSkin[] renderers, LODGroup lodGroup = null)
	{
		SkinnedMeshRenderer[] array = (SkinnedMeshRenderer[])(object)new SkinnedMeshRenderer[renderers.Length];
		for (int i = 0; i < renderers.Length; i++)
		{
			array[i] = CopySkin(renderers[i]);
		}
		if ((Object)(object)lodGroup != (Object)null)
		{
			CopyLodGroup(lodGroup, renderers, array);
		}
	}

	private void CopyLodGroup(LODGroup lodGroup, SkeletonSkin[] renderers, SkinnedMeshRenderer[] created)
	{
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_007a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0041: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_0028: Unknown result type (might be due to invalid IL or missing references)
		LOD[] lODs = lodGroup.GetLODs();
		foreach (LOD val in lODs)
		{
			for (int j = 0; j < val.renderers.Length; j++)
			{
				int num = LookupRendererIndex(renderers, val.renderers[j]);
				val.renderers[j] = (Renderer)(object)((num >= 0) ? created[num] : null);
			}
		}
		LODGroup obj = ((Component)this).gameObject.AddComponent<LODGroup>();
		obj.size = lodGroup.size;
		obj.animateCrossFading = lodGroup.animateCrossFading;
		obj.fadeMode = lodGroup.fadeMode;
		obj.enabled = lodGroup.enabled;
		obj.SetLODs(lODs);
	}

	private int LookupRendererIndex(SkeletonSkin[] renderers, Renderer renderer)
	{
		for (int i = 0; i < renderers.Length; i++)
		{
			if ((Object)(object)renderers[i].SkinnedMeshRenderer == (Object)(object)renderer)
			{
				return i;
			}
		}
		return -1;
	}

	private SkinnedMeshRenderer CopySkin(SkeletonSkin renderer)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Expected O, but got Unknown
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		GameObject val = new GameObject();
		val.transform.parent = ((Component)this).transform;
		val.transform.localPosition = Vector3.zero;
		val.transform.localRotation = Quaternion.identity;
		val.transform.localScale = Vector3.one;
		val.layer = ((Component)this).gameObject.layer;
		return renderer.DuplicateAndRetarget(val, this);
	}

	public void CopySkeletonAttachments(SkeletonAttachment[] attachments)
	{
		for (int i = 0; i < attachments.Length; i++)
		{
			CopyAttachment(attachments[i]);
		}
	}

	private void CopyAttachment(SkeletonAttachment skeletonAttachment)
	{
		Skeleton componentInParent = ((Component)skeletonAttachment).GetComponentInParent<Skeleton>();
		if ((Object)(object)componentInParent == (Object)null)
		{
			throw new Exception("SkeletonAttachment has no Skeleton");
		}
		if ((Object)(object)Source != (Object)(object)componentInParent.Source)
		{
			throw new Exception("SkeletonAttachment uses different Skeleton");
		}
		int num = componentInParent.ReverseLookupBone(((Component)((Component)skeletonAttachment).transform.parent).gameObject);
		if (num < 0)
		{
			throw new Exception("SkeletonAttachment attached to bone that isn't in skeleton");
		}
		skeletonAttachment.CopyTo(Bones[num]);
	}

	private int ReverseLookupBone(GameObject bone)
	{
		return Array.IndexOf(Bones, bone);
	}

	public void Rebuild()
	{
		Bones = GetBones(((Component)this).gameObject, Source);
	}

	public static GameObject[] GetBones(GameObject root, SkeletonDefinition skeletonDef)
	{
		Transform[] allChildren = root.GetComponentsInChildren<Transform>();
		return skeletonDef.Bones.Select((SkeletonDefinition.Bone bone) => FindBoneImpl(root, in bone, allChildren)).ToArray();
	}

	private static GameObject FindBoneImpl(GameObject root, in SkeletonDefinition.Bone bone, Transform[] allChildren)
	{
		int num = 0;
		Transform val = null;
		foreach (Transform val2 in allChildren)
		{
			if (string.Equals(((Object)val2).name, bone.Name, StringComparison.OrdinalIgnoreCase))
			{
				num++;
				val = val2;
			}
		}
		if (num == 1)
		{
			return ((Component)val).gameObject;
		}
		if (num > 1)
		{
			Debug.LogWarning((object)(((Object)root).name + ": Multiple bones named " + bone.Name), (Object)(object)root);
			return null;
		}
		return null;
	}
}
