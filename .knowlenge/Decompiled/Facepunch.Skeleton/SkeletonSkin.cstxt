using Facepunch;
using UnityEngine;

[AddComponentMenu("Facepunch/SkeletonSkin")]
[ExecuteInEditMode]
public class SkeletonSkin : MonoBehaviour
{
	public SkinnedMeshRenderer SkinnedMeshRenderer;

	public SkeletonDefinition SkeletonDefinition;

	public int LOD;

	public int RootBone;

	public int[] TargetBones;

	public Transform[] BoneTransforms;

	public void Retarget(Skeleton target)
	{
		if (TargetBones == null || BoneTransforms == null)
		{
			return;
		}
		SkinnedMeshRenderer.rootBone = target.GetTransform(RootBone);
		bool flag = (Object)(object)SkeletonDefinition != (Object)(object)target.Source;
		for (int i = 0; i < BoneTransforms.Length; i++)
		{
			Transform val = (flag ? target.GetTransformSlow(SkeletonDefinition.Bones[TargetBones[i]].Name) : target.GetTransform(TargetBones[i]));
			if ((Object)(object)val == (Object)null)
			{
				Debug.LogWarning((object)("Skeleton retarget didn't find a bone: " + SkeletonDefinition.Bones[TargetBones[i]].Name));
			}
			BoneTransforms[i] = val;
		}
		SkinnedMeshRenderer.bones = BoneTransforms;
		for (int j = 0; j < BoneTransforms.Length; j++)
		{
			BoneTransforms[j] = null;
		}
	}

	public SkinnedMeshRenderer DuplicateAndRetarget(GameObject host, Skeleton target)
	{
		//IL_0030: Unknown result type (might be due to invalid IL or missing references)
		//IL_0052: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Unknown result type (might be due to invalid IL or missing references)
		SkinnedMeshRenderer val = host.AddComponent<SkinnedMeshRenderer>();
		((Renderer)val).receiveShadows = ((Renderer)SkinnedMeshRenderer).receiveShadows;
		val.skinnedMotionVectors = SkinnedMeshRenderer.skinnedMotionVectors;
		((Renderer)val).motionVectorGenerationMode = ((Renderer)SkinnedMeshRenderer).motionVectorGenerationMode;
		val.updateWhenOffscreen = SkinnedMeshRenderer.updateWhenOffscreen;
		((Renderer)val).localBounds = ((Renderer)SkinnedMeshRenderer).localBounds;
		((Renderer)val).shadowCastingMode = ((Renderer)SkinnedMeshRenderer).shadowCastingMode;
		val.sharedMesh = SkinnedMeshRenderer.sharedMesh;
		((Renderer)val).sharedMaterials = ((Renderer)SkinnedMeshRenderer).sharedMaterials;
		val.rootBone = target.GetTransform(RootBone);
		Transform[] array = (Transform[])(object)new Transform[TargetBones.Length];
		for (int i = 0; i < array.Length; i++)
		{
			array[i] = target.GetTransform(TargetBones[i]);
		}
		val.bones = array;
		return val;
	}
}
