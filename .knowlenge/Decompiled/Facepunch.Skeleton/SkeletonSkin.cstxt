using Facepunch;
using UnityEngine;

[AddComponentMenu("Facepunch/SkeletonSkin")]
public class SkeletonSkin : MonoBehaviour
{
	public SkinnedMeshRenderer SkinnedMeshRenderer;

	public SkeletonDefinition SkeletonDefinition;

	public int RootBone;

	public int[] TargetBones;

	public void Retarget(Skeleton target)
	{
		SkinnedMeshRenderer.rootBone = target.GetTransform(RootBone);
		Transform[] array = new Transform[TargetBones.Length];
		for (int i = 0; i < array.Length; i++)
		{
			array[i] = target.GetTransform(TargetBones[i]);
		}
		SkinnedMeshRenderer.bones = array;
	}

	public SkinnedMeshRenderer DuplicateAndRetarget(GameObject host, Skeleton target)
	{
		SkinnedMeshRenderer skinnedMeshRenderer = host.AddComponent<SkinnedMeshRenderer>();
		skinnedMeshRenderer.receiveShadows = SkinnedMeshRenderer.receiveShadows;
		skinnedMeshRenderer.skinnedMotionVectors = SkinnedMeshRenderer.skinnedMotionVectors;
		skinnedMeshRenderer.motionVectorGenerationMode = SkinnedMeshRenderer.motionVectorGenerationMode;
		skinnedMeshRenderer.updateWhenOffscreen = SkinnedMeshRenderer.updateWhenOffscreen;
		skinnedMeshRenderer.localBounds = SkinnedMeshRenderer.localBounds;
		skinnedMeshRenderer.shadowCastingMode = SkinnedMeshRenderer.shadowCastingMode;
		skinnedMeshRenderer.sharedMesh = SkinnedMeshRenderer.sharedMesh;
		skinnedMeshRenderer.sharedMaterials = SkinnedMeshRenderer.sharedMaterials;
		skinnedMeshRenderer.rootBone = target.GetTransform(RootBone);
		Transform[] array = new Transform[TargetBones.Length];
		for (int i = 0; i < array.Length; i++)
		{
			array[i] = target.GetTransform(TargetBones[i]);
		}
		skinnedMeshRenderer.bones = array;
		return skinnedMeshRenderer;
	}
}
