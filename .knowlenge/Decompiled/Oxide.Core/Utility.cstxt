using System;
using System.Diagnostics;
using System.IO;
using Oxide.Core;

public class Utility
{
	public static void DatafileToProto<T>(string name, bool deleteAfter = true)
	{
		DataFileSystem dataFileSystem = Interface.Oxide.DataFileSystem;
		if (!dataFileSystem.ExistsDatafile(name))
		{
			return;
		}
		if (ProtoStorage.Exists(name))
		{
			Interface.Oxide.LogWarning("Failed to import JSON file: {0} already exists.", name);
			return;
		}
		try
		{
			ProtoStorage.Save(dataFileSystem.ReadObject<T>(name), name);
			if (deleteAfter)
			{
				File.Delete(dataFileSystem.GetFile(name).Filename);
			}
		}
		catch (Exception ex)
		{
			Interface.Oxide.LogException("Failed to convert datafile to proto storage: " + name, ex);
		}
	}

	public static void PrintCallStack()
	{
		Interface.Oxide.LogDebug("CallStack:{0}{1}", Environment.NewLine, new StackTrace(1, fNeedFileInfo: true));
	}

	public static string FormatBytes(double bytes)
	{
		string arg;
		if (bytes > 1048576.0)
		{
			arg = "mb";
			bytes /= 1048576.0;
		}
		else if (bytes > 1024.0)
		{
			arg = "kb";
			bytes /= 1024.0;
		}
		else
		{
			arg = "b";
		}
		return $"{bytes:0}{arg}";
	}

	public static string GetDirectoryName(string name)
	{
		try
		{
			name = name.Replace(Path.AltDirectorySeparatorChar, Path.DirectorySeparatorChar);
			return name.Substring(0, name.LastIndexOf(Path.DirectorySeparatorChar));
		}
		catch
		{
			return null;
		}
	}

	public static string GetFileNameWithoutExtension(string value)
	{
		int num = value.Length - 1;
		for (int num2 = num; num2 >= 1; num2--)
		{
			if (value[num2] == '.')
			{
				num = num2 - 1;
				break;
			}
		}
		int num3 = 0;
		for (int num4 = num - 1; num4 >= 0; num4--)
		{
			char c = value[num4];
			if (c == '/' || c == '\\')
			{
				num3 = num4 + 1;
				break;
			}
		}
		return value.Substring(num3, num - num3 + 1);
	}

	public static string CleanPath(string path)
	{
		return path?.Replace('\\', Path.DirectorySeparatorChar).Replace('/', Path.DirectorySeparatorChar);
	}
}
