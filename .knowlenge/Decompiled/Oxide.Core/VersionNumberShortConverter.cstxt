using System;
using System.Globalization;
using Newtonsoft.Json;
using Oxide.Core;

public class VersionNumberShortConverter : JsonConverter
{
	private static readonly char[] separators = new char[1] { '.' };

	private static readonly Type vNumberType = typeof(VersionNumber);

	public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
	{
		//IL_0039: Unknown result type (might be due to invalid IL or missing references)
		Type type = value?.GetType();
		if (type != vNumberType)
		{
			throw new JsonSerializationException("Expected value of type VersionNumber, but got " + (type?.Name ?? "null"));
		}
		writer.WriteValue(ConvertToString((VersionNumber)value));
	}

	public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Invalid comparison between Unknown and I4
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		if ((int)reader.TokenType == 9)
		{
			try
			{
				return ParseFromString((string)reader.Value);
			}
			catch (Exception ex)
			{
				throw GenerateException(reader, "Failed to parse VersionNumber from '{0}': {1}", reader.Value, ex.Message);
			}
		}
		throw GenerateException(reader, "Unexpected token '{0}' ({1}) on VersionNumber deserialization. Expected: 'String'", reader.TokenType, reader.Value ?? "null");
	}

	public override bool CanConvert(Type objectType)
	{
		return objectType == vNumberType;
	}

	private static JsonSerializationException GenerateException(JsonReader reader, string format, params object[] args)
	{
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Expected O, but got Unknown
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0045: Expected O, but got Unknown
		string text = string.Format(format, args);
		IJsonLineInfo val = (IJsonLineInfo)reader;
		if (val.HasLineInfo())
		{
			text += $" at {val.LineNumber}:{val.LinePosition}";
		}
		return new JsonSerializationException(text);
	}

	private string ConvertToString(VersionNumber number)
	{
		return number.ToString();
	}

	private VersionNumber ParseFromString(string strNumber)
	{
		string[] array = strNumber.Split(separators, StringSplitOptions.RemoveEmptyEntries);
		if (array.Length < 1 || array.Length > 3)
		{
			throw new ArgumentException("String does not match the VersionNumber serialization format", "strNumber");
		}
		int[] array2 = new int[3];
		for (int i = 0; i < array.Length; i++)
		{
			int num = int.Parse(array[i], NumberStyles.Integer);
			array2[i] = num;
		}
		return new VersionNumber(array2[0], array2[1], array2[2]);
	}
}
