using System;
using System.Collections.Generic;
using System.IO;
using Oxide.Core;
using ProtoBuf;

public class ProtoStorage
{
	public static IEnumerable<string> GetFiles(string subDirectory)
	{
		string fileDataPath = GetFileDataPath(subDirectory.Replace("..", ""));
		if (Directory.Exists(fileDataPath))
		{
			string[] files = Directory.GetFiles(fileDataPath, "*.data");
			foreach (string value in files)
			{
				yield return Utility.GetFileNameWithoutExtension(value);
			}
		}
	}

	public static T Load<T>(params string[] subPaths)
	{
		string fileName = GetFileName(subPaths);
		string fileDataPath = GetFileDataPath(fileName);
		try
		{
			if (File.Exists(fileDataPath))
			{
				using (FileStream fileStream = File.OpenRead(fileDataPath))
				{
					return Serializer.Deserialize<T>((Stream)fileStream);
				}
			}
		}
		catch (Exception ex)
		{
			Interface.Oxide.LogException("Failed to load protobuf data from " + fileName, ex);
		}
		return default(T);
	}

	public static void Save<T>(T data, params string[] subPaths)
	{
		string fileName = GetFileName(subPaths);
		string fileDataPath = GetFileDataPath(fileName);
		string directoryName = Path.GetDirectoryName(fileDataPath);
		try
		{
			if (directoryName != null && !Directory.Exists(directoryName))
			{
				Directory.CreateDirectory(directoryName);
			}
			FileMode mode = (File.Exists(fileDataPath) ? FileMode.Truncate : FileMode.Create);
			using FileStream fileStream = File.Open(fileDataPath, mode);
			Serializer.Serialize<T>((Stream)fileStream, data);
		}
		catch (Exception ex)
		{
			Interface.Oxide.LogException("Failed to save protobuf data to " + fileName, ex);
		}
	}

	public static bool Exists(params string[] subPaths)
	{
		return File.Exists(GetFileDataPath(GetFileName(subPaths)));
	}

	public static string GetFileName(params string[] subPaths)
	{
		char directorySeparatorChar = Path.DirectorySeparatorChar;
		return string.Join(directorySeparatorChar.ToString(), subPaths).Replace("..", "") + ".data";
	}

	public static string GetFileDataPath(string name)
	{
		return Path.Combine(Interface.Oxide.DataDirectory, name);
	}
}
