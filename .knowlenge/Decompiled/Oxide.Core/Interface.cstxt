using System;
using Oxide.Core;

public static class Interface
{
	public static OxideMod Oxide { get; private set; }

	public static NativeDebugCallback DebugCallback { get; set; }

	public static void Initialize()
	{
		if (Oxide == null)
		{
			Oxide = new OxideMod(DebugCallback);
			Oxide.Load();
		}
	}

	public static object CallDeprecatedHook(string oldHook, string newHook, DateTime expireDate, params object[] args)
	{
		return Oxide.CallDeprecatedHook(oldHook, newHook, expireDate, args);
	}

	public static object CallDeprecated(string oldHook, string newHook, DateTime expireDate, params object[] args)
	{
		return CallDeprecatedHook(oldHook, newHook, expireDate, args);
	}

	public static object CallHook(string hook, params object[] args)
	{
		return Oxide?.CallHook(hook, args);
	}

	public static object Call(string hook, params object[] args)
	{
		return CallHook(hook, args);
	}

	public static T Call<T>(string hook, params object[] args)
	{
		return (T)Convert.ChangeType(CallHook(hook, args), typeof(T));
	}

	public static OxideMod GetMod()
	{
		return Oxide;
	}
}
