using System;
using System.IO;
using System.Text;
using Network;
using SilentOrbit.ProtocolBuffers;
using UnityEngine;

public abstract class Write : Stream
{
	private static MemoryStream buffer = new MemoryStream();

	public override bool CanRead => true;

	public override bool CanSeek => false;

	public override bool CanWrite => false;

	public override long Length
	{
		get
		{
			throw new NotImplementedException();
		}
	}

	public override long Position
	{
		get
		{
			throw new NotImplementedException();
		}
		set
		{
			throw new NotImplementedException();
		}
	}

	public abstract bool Start();

	public abstract void Send(SendInfo info);

	public abstract void PacketID(Message.Type val);

	public abstract void UInt8(byte val);

	public abstract void UInt16(ushort val);

	public abstract void UInt32(uint val);

	public abstract void UInt64(ulong val);

	public abstract void Int8(sbyte val);

	public abstract void Int16(short val);

	public abstract void Int32(int val);

	public abstract void Int64(long val);

	public abstract void Bool(bool val);

	public abstract void Float(float val);

	public abstract void Double(double val);

	public abstract void Bytes(byte[] val);

	public void String(string val)
	{
		if (string.IsNullOrEmpty(val))
		{
			BytesWithSize((MemoryStream)null);
			return;
		}
		if (buffer.Capacity < val.Length * 8)
		{
			buffer.Capacity = val.Length * 8;
		}
		buffer.Position = 0L;
		buffer.SetLength(buffer.Capacity);
		int bytes = Encoding.UTF8.GetBytes(val, 0, val.Length, buffer.GetBuffer(), 0);
		buffer.SetLength(bytes);
		BytesWithSize(buffer);
	}

	public void WriteObject(object obj)
	{
		if (obj is Vector3)
		{
			Vector3((Vector3)obj);
			return;
		}
		if (obj is Ray)
		{
			Ray((Ray)obj);
			return;
		}
		if (obj is float)
		{
			Float((float)obj);
			return;
		}
		if (obj is short)
		{
			Int16((short)obj);
			return;
		}
		if (obj is ushort)
		{
			UInt16((ushort)obj);
			return;
		}
		if (obj is int)
		{
			Int32((int)obj);
			return;
		}
		if (obj is uint)
		{
			UInt32((uint)obj);
			return;
		}
		if (obj is byte[])
		{
			Bytes((byte[])obj);
			return;
		}
		if (obj is long)
		{
			Int64((long)obj);
			return;
		}
		if (obj is ulong)
		{
			UInt64((ulong)obj);
			return;
		}
		if (obj is string)
		{
			String((string)obj);
			return;
		}
		if (obj is sbyte)
		{
			Int8((sbyte)obj);
			return;
		}
		if (obj is byte)
		{
			UInt8((byte)obj);
			return;
		}
		if (obj is bool)
		{
			Bool((bool)obj);
			return;
		}
		if (obj is IProto)
		{
			((IProto)obj).WriteToStream(this);
			return;
		}
		Debug.LogError(string.Concat("NetworkData.Write - no handler to write ", obj, " -> ", obj.GetType()));
	}

	public void Vector3(Vector3 obj)
	{
		Float(obj.x);
		Float(obj.y);
		Float(obj.z);
	}

	public void Quaternion(Quaternion obj)
	{
		Float(obj.x);
		Float(obj.y);
		Float(obj.z);
		Float(obj.w);
	}

	public void Ray(Ray obj)
	{
		Vector3(obj.origin);
		Vector3(obj.direction);
	}

	public void EntityID(uint id)
	{
		UInt32(id);
	}

	public void GroupID(uint id)
	{
		UInt32(id);
	}

	public void BytesWithSize(MemoryStream val)
	{
		if (val == null || val.Length == 0L)
		{
			UInt32(0u);
		}
		else if ((uint)val.Length > 10485760)
		{
			UInt32(0u);
			Debug.LogError("BytesWithSize: Too big " + val.Length);
		}
		else
		{
			UInt32((uint)val.Length);
			Write(val.GetBuffer(), 0, (int)val.Length);
		}
	}

	public void BytesWithSize(byte[] b)
	{
		using MemoryStream memoryStream = new MemoryStream(b, 0, b.Length, writable: true, publiclyVisible: true);
		memoryStream.SetLength(b.Length);
		BytesWithSize(memoryStream);
	}

	public override void Flush()
	{
		throw new NotImplementedException();
	}

	public override int Read(byte[] buffer, int offset, int count)
	{
		throw new NotImplementedException();
	}

	public override int ReadByte()
	{
		throw new NotImplementedException();
	}

	public override long Seek(long offset, SeekOrigin origin)
	{
		throw new NotImplementedException();
	}

	public override void SetLength(long value)
	{
		throw new NotImplementedException();
	}
}
