using System;
using System.IO;
using System.Text;
using Network;
using UnityEngine;

public abstract class Read : Stream
{
	private static MemoryStream buffer = new MemoryStream();

	public int length => (int)Length;

	public int position => (int)Position;

	public int unread => (int)(Length - Position);

	public override bool CanRead => true;

	public override bool CanSeek => false;

	public override bool CanWrite => false;

	public override long Length
	{
		get
		{
			throw new NotImplementedException();
		}
	}

	public override long Position
	{
		get
		{
			throw new NotImplementedException();
		}
		set
		{
			throw new NotImplementedException();
		}
	}

	public abstract bool Start();

	public abstract bool Start(Connection connection);

	public abstract bool Bit();

	public abstract byte PacketID();

	public abstract byte UInt8();

	public abstract ushort UInt16();

	public abstract uint UInt32();

	public abstract ulong UInt64();

	public abstract sbyte Int8();

	public abstract short Int16();

	public abstract int Int32();

	public abstract long Int64();

	public abstract float Float();

	public abstract double Double();

	public Vector3 Vector3()
	{
		return new Vector3(Float(), Float(), Float());
	}

	public Quaternion Quaternion()
	{
		return new Quaternion(Float(), Float(), Float(), Float());
	}

	public Ray Ray()
	{
		return new Ray(Vector3(), Vector3());
	}

	public string String()
	{
		MemoryStream memoryStream = MemoryStreamWithSize();
		if (memoryStream == null)
		{
			return string.Empty;
		}
		return Encoding.UTF8.GetString(memoryStream.GetBuffer(), 0, (int)memoryStream.Length);
	}

	public uint EntityID()
	{
		return UInt32();
	}

	public uint GroupID()
	{
		return UInt32();
	}

	public MemoryStream MemoryStreamWithSize()
	{
		uint num = UInt32();
		if (num == 0)
		{
			return null;
		}
		if (num > 10485760)
		{
			return null;
		}
		if (buffer.Capacity < num)
		{
			buffer.Capacity = (int)num;
		}
		buffer.Position = 0L;
		buffer.SetLength(num);
		int num2 = Read(buffer.GetBuffer(), 0, (int)num);
		if (num2 != num)
		{
			return null;
		}
		return buffer;
	}

	public byte[] BytesWithSize()
	{
		uint num = UInt32();
		if (num == 0)
		{
			return null;
		}
		if (num > 10485760)
		{
			return null;
		}
		byte[] result = new byte[num];
		int num2 = Read(result, 0, (int)num);
		if (num2 != num)
		{
			return null;
		}
		return result;
	}

	public override void Flush()
	{
		throw new NotImplementedException();
	}

	public override void Write(byte[] buffer, int offset, int count)
	{
		throw new NotImplementedException();
	}

	public override void WriteByte(byte value)
	{
		throw new NotImplementedException();
	}

	public override long Seek(long offset, SeekOrigin origin)
	{
		throw new NotImplementedException();
	}

	public override void SetLength(long value)
	{
		throw new NotImplementedException();
	}
}
