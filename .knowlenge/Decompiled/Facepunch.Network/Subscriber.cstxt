using System;
using Facepunch;
using Network;
using Network.Visibility;
using UnityEngine;

public class Subscriber : IPooled
{
	internal Manager manager;

	internal Connection connection;

	public ListHashSet<Group> subscribed = new ListHashSet<Group>(8);

	public Group Subscribe(Group group)
	{
		if (subscribed.Contains(group))
		{
			Debug.LogWarning((object)"Subscribe: Network Group already subscribed!");
			return null;
		}
		subscribed.Add(group);
		group.AddSubscriber(connection);
		return group;
	}

	public Group Subscribe(uint group)
	{
		return Subscribe(manager.Get(group));
	}

	public bool IsSubscribed(Group group)
	{
		return subscribed.Contains(group);
	}

	public void UnsubscribeAll()
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		Enumerator<Group> enumerator = subscribed.GetEnumerator();
		try
		{
			while (enumerator.MoveNext())
			{
				enumerator.Current.RemoveSubscriber(connection);
			}
		}
		finally
		{
			((IDisposable)enumerator/*cast due to .constrained prefix*/).Dispose();
		}
		subscribed.Clear();
	}

	public void Unsubscribe(Group group)
	{
		subscribed.Remove(group);
		group.RemoveSubscriber(connection);
	}

	public void Destroy()
	{
		UnsubscribeAll();
	}

	public void EnterPool()
	{
		connection = null;
		manager = null;
	}

	public void LeavePool()
	{
	}
}
