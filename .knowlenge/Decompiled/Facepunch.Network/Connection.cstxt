using System;
using System.Collections.Generic;
using Network;
using UnityEngine;

public class Connection
{
	public enum State
	{
		Unconnected,
		Connecting,
		InQueue,
		Welcoming,
		Connected,
		Disconnected
	}

	public struct Validation
	{
		public uint entityUpdates;
	}

	public class ClientInfo
	{
		public Dictionary<string, string> info = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);

		public void Set(string k, string v)
		{
			info[k] = v;
		}

		public string GetString(string k, string def = "")
		{
			if (info.TryGetValue(k, out var value))
			{
				return value;
			}
			return def;
		}

		public float GetFloat(string k, float def = 0f)
		{
			string @string = GetString(k, null);
			if (@string == null)
			{
				return def;
			}
			if (float.TryParse(@string, out var result))
			{
				return result;
			}
			return def;
		}

		public int GetInt(string k, int def = 0)
		{
			return (int)GetFloat(k, def);
		}

		public bool GetBool(string k, bool def = false)
		{
			string @string = GetString(k, null);
			if (@string == null)
			{
				return def;
			}
			if (bool.TryParse(@string, out var result))
			{
				return result;
			}
			return def;
		}
	}

	public struct TimeAverageValue
	{
		private DateTime refreshTime;

		private ulong counterPrev;

		private ulong counterNext;

		public ulong Calculate()
		{
			DateTime now = DateTime.Now;
			double num = now.Subtract(refreshTime).TotalSeconds;
			if (num >= 1.0)
			{
				num = 0.0;
				refreshTime = now;
				counterPrev = counterNext;
				counterNext = 0uL;
			}
			return (ulong)((double)counterPrev * (1.0 - num)) + counterNext;
		}

		public void Increment()
		{
			counterNext++;
		}

		public void Reset()
		{
			counterPrev = 0uL;
			counterNext = 0uL;
		}
	}

	public State state;

	public bool active;

	public bool connected;

	public uint authLevel;

	public uint encryptionLevel;

	public bool decryptIncoming;

	public bool encryptOutgoing;

	public bool rejected;

	public string authStatus;

	public byte[] token;

	public ulong guid;

	public ulong userid;

	public ulong ownerid;

	public string username;

	public string os;

	public uint protocol;

	private TimeAverageValue[] packetsPerSecond = new TimeAverageValue[23];

	public DateTime connectionTime;

	public string ipaddress;

	public MonoBehaviour player;

	public Validation validate;

	public ClientInfo info = new ClientInfo();

	public bool isAuthenticated => authStatus == "ok";

	public virtual void OnDisconnected()
	{
		player = null;
		guid = 0uL;
		ResetPacketsPerSecond();
	}

	public void ResetPacketsPerSecond()
	{
		for (int i = 0; i < packetsPerSecond.Length; i++)
		{
			packetsPerSecond[i].Reset();
		}
	}

	public void AddPacketsPerSecond(Message.Type message)
	{
		AddPacketsPerSecond((int)message);
	}

	public void AddPacketsPerSecond(int index = 0)
	{
		if (index >= 0 && index < packetsPerSecond.Length)
		{
			packetsPerSecond[index].Increment();
		}
	}

	public ulong GetPacketsPerSecond(Message.Type message)
	{
		return GetPacketsPerSecond((int)message);
	}

	public ulong GetPacketsPerSecond(int index = 0)
	{
		if (index < 0 || index >= packetsPerSecond.Length)
		{
			return 0uL;
		}
		return packetsPerSecond[index].Calculate();
	}

	public float GetSecondsConnected()
	{
		return (float)DateTime.Now.Subtract(connectionTime).TotalSeconds;
	}

	public override string ToString()
	{
		return $"{ipaddress}/{userid}/{username}";
	}
}
