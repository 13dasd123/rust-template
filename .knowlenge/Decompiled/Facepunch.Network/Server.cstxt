using System;
using System.Collections.Generic;
using Facepunch;
using Network;
using Network.Visibility;
using UnityEngine;

public abstract class Server : NetworkPeer
{
	public string ip = "";

	public int port = 5678;

	public bool compressionEnabled;

	public bool logging;

	public Manager visibility;

	public Action<string, Connection> onDisconnected;

	public bool debug;

	internal uint lastValueGiven = 1024u;

	public List<Connection> connections = new List<Connection>();

	private Dictionary<ulong, Connection> connectionByGUID = new Dictionary<ulong, Connection>();

	public abstract bool IsConnected();

	public void Reset()
	{
		ResetUIDs();
	}

	public virtual bool Start()
	{
		return true;
	}

	public virtual void Stop(string shutdownMsg)
	{
	}

	public virtual void Cycle()
	{
	}

	public abstract void Kick(Connection cn, string message);

	public uint TakeUID()
	{
		if (lastValueGiven > 4294967263u)
		{
			Debug.LogError("TakeUID - hitting ceiling limit!" + lastValueGiven);
		}
		lastValueGiven++;
		return lastValueGiven;
	}

	public void ReturnUID(uint uid)
	{
	}

	internal void ResetUIDs()
	{
		lastValueGiven = 1024u;
	}

	public Networkable CreateNetworkable()
	{
		Networkable networkable = Pool.Get<Networkable>();
		networkable.ID = TakeUID();
		networkable.sv = this;
		return networkable;
	}

	public Networkable CreateNetworkable(uint uid)
	{
		Networkable networkable = Pool.Get<Networkable>();
		networkable.ID = uid;
		networkable.sv = this;
		if (uid > lastValueGiven)
		{
			lastValueGiven = uid;
		}
		return networkable;
	}

	public void DestroyNetworkable(ref Networkable networkable)
	{
		networkable.Destroy();
		Pool.Free(ref networkable);
	}

	protected void OnDisconnected(string strReason, Connection cn)
	{
		if (cn != null)
		{
			cn.connected = false;
			cn.active = false;
			if (onDisconnected != null)
			{
				onDisconnected(strReason, cn);
			}
			RemoveConnection(cn);
		}
	}

	protected Connection FindConnection(ulong guid)
	{
		if (connectionByGUID.TryGetValue(guid, out var value))
		{
			return value;
		}
		return null;
	}

	protected abstract void OnNewConnection();

	protected void OnNewConnection(Connection connection)
	{
		connection.connectionTime = DateTime.Now;
		connections.Add(connection);
		connectionByGUID.Add(connection.guid, connection);
		if (write.Start())
		{
			write.PacketID(Message.Type.RequestUserInformation);
			write.Send(new SendInfo(connection));
		}
	}

	protected void RemoveConnection(Connection connection)
	{
		connectionByGUID.Remove(connection.guid);
		connections.Remove(connection);
		connection.OnDisconnected();
	}

	public abstract int GetAveragePing(Connection connection);

	public abstract void SendUnconnected(uint netAddr, ushort netPort, byte[] steamResponseBuffer, int packetSize);
}
