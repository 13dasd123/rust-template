using System;
using Facepunch;
using Network;
using Network.Visibility;

public abstract class Client : NetworkPeer
{
	public class PlaybackStatsData
	{
		public int Frames;

		public int Packets;

		public TimeSpan TotalTime;

		public TimeSpan DemoLength;
	}

	public Manager visibility;

	public static string disconnectReason;

	public string connectedAddress = "unset";

	public int connectedPort;

	public string ServerName;

	public bool IsOfficialServer;

	public Stats IncomingStats = new Stats();

	public IClientCallback callbackHandler;

	public PlaybackStatsData PlaybackStats = new PlaybackStatsData();

	public Connection Connection { get; protected set; }

	public bool ConnectionAccepted { get; protected set; }

	public abstract bool IsRecording { get; }

	public abstract bool IsPlaying { get; }

	public abstract bool PlayingFinished { get; }

	public virtual bool Connect(string strURL, int port)
	{
		ConnectionAccepted = false;
		disconnectReason = "Disconnected";
		return true;
	}

	public abstract void Cycle();

	public abstract void Disconnect(string reason, bool sendReasonToServer = true);

	public abstract bool IsConnected();

	protected void OnDisconnected(string str)
	{
		if (callbackHandler != null)
		{
			callbackHandler.OnClientDisconnected(str);
		}
	}

	public Networkable CreateNetworkable(uint networkID, uint networkGroup)
	{
		Networkable networkable = Pool.Get<Networkable>();
		networkable.ID = networkID;
		networkable.SwitchGroup(visibility.Get(networkGroup));
		return networkable;
	}

	public void DestroyNetworkable(ref Networkable networkable)
	{
		networkable.Destroy();
		Pool.Free(ref networkable);
	}

	public void SetupNetworkable(Networkable net)
	{
		net.cl = this;
	}

	public abstract int GetAveragePing();

	public abstract int GetLastPing();

	public abstract int GetLowestPing();

	public abstract bool StartRecording(string targetFilename, byte[] header);

	public abstract void StopRecording();

	public abstract void ManualRecordPacket(byte packetId, byte[] data, int length);

	public abstract byte[] StartPlayback(string filename);

	public abstract void StopPlayback();

	public abstract void UpdatePlayback(long frameTime, long maxTime);
}
