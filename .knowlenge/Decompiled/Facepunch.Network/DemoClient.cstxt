using System;
using Facepunch;
using Network;
using Rust.Demo;
using UnityEngine;

public class DemoClient : Client, IDisposable
{
	protected Reader demoFile;

	public override bool IsPlaying => true;

	public bool PlayingFinished => demoFile.IsFinished;

	public DemoClient(Reader demoFile)
	{
		this.demoFile = demoFile;
		MultithreadingInit(null);
	}

	public virtual void Dispose()
	{
		Reader obj = demoFile;
		if (obj != null)
		{
			obj.Stop();
		}
		demoFile = null;
	}

	public override bool IsConnected()
	{
		return true;
	}

	public void UpdatePlayback(long frameTime)
	{
		if (!PlayingFinished)
		{
			demoFile.Progress(frameTime);
			while (!demoFile.IsFinished && PlaybackPacket())
			{
			}
		}
	}

	private unsafe bool PlaybackPacket()
	{
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0017: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Unknown result type (might be due to invalid IL or missing references)
		Packet val = demoFile.ReadPacket();
		if (!((Packet)(ref val)).isValid)
		{
			return false;
		}
		fixed (byte* data = val.Data)
		{
			HandleMessage((IntPtr)data, val.Size);
		}
		return IsPlaying;
	}

	private void HandleMessage(IntPtr data, int size)
	{
		NetRead netRead = Pool.Get<NetRead>();
		netRead.Start(0uL, string.Empty, data, size);
		Decrypt(netRead.connection, netRead);
		byte b = netRead.PacketID();
		if (b < 140)
		{
			netRead.RemoveReference();
			return;
		}
		b -= 140;
		if (b > 26)
		{
			Debug.LogWarning((object)("Invalid Packet (higher than " + Message.Type.QueueUpdate.ToString() + ")"));
			Disconnect($"Invalid Packet ({b}) {size}b");
			netRead.RemoveReference();
			return;
		}
		Message message = StartMessage((Message.Type)b, netRead);
		if (callbackHandler != null)
		{
			try
			{
				TimeWarning val = TimeWarning.New("OnMessage", 0);
				try
				{
					callbackHandler.OnNetworkMessage(message);
				}
				finally
				{
					((IDisposable)val)?.Dispose();
				}
			}
			catch (Exception ex)
			{
				Debug.LogException(ex);
				if (!IsPlaying)
				{
					Disconnect(ex.Message + "\n" + ex.StackTrace);
				}
			}
		}
		Pool.Free<Message>(ref message);
		netRead.RemoveReference();
	}
}
