using System.Collections.Generic;
using Facepunch;
using Facepunch.Extend;
using Network;

public class Stats
{
	public class Node : IPooled
	{
		public Dictionary<string, Node> Children;

		public long Bytes;

		public long Count;

		internal Node Add(string category, long bytes)
		{
			if (Children == null)
			{
				Children = Pool.Get<Dictionary<string, Node>>();
			}
			Node orCreatePooled = DictionaryExtensions.GetOrCreatePooled<string, Node>(Children, category);
			orCreatePooled.Bytes += bytes;
			orCreatePooled.Count++;
			return orCreatePooled;
		}

		internal void Clear()
		{
			Bytes = 0L;
			Count = 0L;
			if (Children == null)
			{
				return;
			}
			foreach (KeyValuePair<string, Node> child in Children)
			{
				Node value = child.Value;
				Pool.Free<Node>(ref value);
			}
			Children.Clear();
		}

		public void EnterPool()
		{
			Clear();
		}

		public void LeavePool()
		{
			Clear();
		}
	}

	public bool Enabled;

	public Node Building = new Node();

	public Node Previous = new Node();

	public Stats()
	{
		Building.Add("", 0L);
		Building.Clear();
		Previous.Add("", 0L);
		Previous.Clear();
	}

	public void Add(string Category, string Object, long Bytes)
	{
		if (Enabled)
		{
			Building.Bytes += Bytes;
			Building.Count++;
			Building.Add(Category, Bytes).Add(Object, Bytes);
		}
	}

	public void Add(string Category, long Bytes)
	{
		if (Enabled)
		{
			Building.Bytes += Bytes;
			Building.Count++;
			Building.Add(Category, Bytes);
		}
	}

	public void Flip()
	{
		if (Enabled)
		{
			Node building = Building;
			Building = Previous;
			Previous = building;
			Building.Clear();
		}
	}
}
