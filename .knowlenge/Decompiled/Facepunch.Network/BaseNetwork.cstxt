using System.IO;
using Facepunch;
using Network;

public abstract class BaseNetwork
{
	public enum StatTypeLong
	{
		BytesSent,
		BytesSent_LastSecond,
		BytesReceived,
		BytesReceived_LastSecond,
		MessagesInSendBuffer,
		BytesInSendBuffer,
		MessagesInResendBuffer,
		BytesInResendBuffer,
		PacketLossAverage,
		PacketLossLastSecond,
		ThrottleBytes
	}

	public INetworkCryptocraphy cryptography;

	public NetRead read { get; private set; }

	public NetWrite write { get; private set; }

	public BaseNetwork()
	{
		read = new NetRead();
		write = new NetWrite(this);
	}

	public virtual void Send(SendInfo sendinfo, MemoryStream data)
	{
	}

	protected Message StartMessage(Message.Type type, Connection connection)
	{
		Message message = Pool.Get<Message>();
		message.peer = this;
		message.type = type;
		message.connection = connection;
		return message;
	}

	public void Decrypt(Connection connection, NetRead read)
	{
		if (read.Length > 1 && cryptography != null && cryptography.IsEnabledIncoming(connection))
		{
			MemoryStream streamForDecryption = read.GetStreamForDecryption();
			cryptography.Decrypt(connection, streamForDecryption, 1);
			read.SetLength(streamForDecryption.Length);
		}
	}

	public void Encrypt(Connection connection, ref MemoryStream stream)
	{
		if (read.Length > 1 && cryptography != null && cryptography.IsEnabledOutgoing(connection))
		{
			stream = cryptography.EncryptCopy(connection, stream, 1);
		}
	}

	public void Record(Connection connection, Stream stream)
	{
		connection?.RecordPacket(stream);
	}

	public virtual string GetDebug(Connection connection)
	{
		return null;
	}

	public virtual ulong GetStat(Connection connection, StatTypeLong type)
	{
		return 0uL;
	}
}
