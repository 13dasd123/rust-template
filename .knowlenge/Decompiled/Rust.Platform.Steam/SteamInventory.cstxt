using System;
using System.Collections.Generic;
using System.Linq;
using Rust.Platform.Steam;
using Steamworks;

public class SteamInventory : IPlayerInventory, IDisposable
{
	public InventoryResult Value { get; }

	public IReadOnlyList<IPlayerItem> Items { get; }

	internal SteamInventory(InventoryResult inventory)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		Value = inventory;
		InventoryResult value = Value;
		InventoryItem[] items = ((InventoryResult)(ref value)).GetItems(true);
		if (items == null)
		{
			Items = new List<IPlayerItem>(0);
			return;
		}
		Items = (IReadOnlyList<IPlayerItem>)items.Select((InventoryItem i) => new SteamItem(i)).ToList();
	}

	public void Dispose()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		InventoryResult value = Value;
		((InventoryResult)(ref value)).Dispose();
	}

	public bool BelongsTo(ulong userId)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		//IL_000a: Unknown result type (might be due to invalid IL or missing references)
		InventoryResult value = Value;
		return ((InventoryResult)(ref value)).BelongsTo(SteamId.op_Implicit(userId));
	}

	public byte[] Serialize()
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		InventoryResult value = Value;
		return ((InventoryResult)(ref value)).Serialize();
	}
}
