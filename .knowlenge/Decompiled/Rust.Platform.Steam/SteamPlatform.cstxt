using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Rust.Platform.Common;
using Rust.Platform.Steam;
using Steamworks;
using Steamworks.Data;
using UnityEngine;

public class SteamPlatform : IPlatformService
{
	private IPlatformHooks _hooks;

	private bool _initialized;

	public bool IsValid => SteamServer.IsValid;

	public IReadOnlyList<IPlayerItemDefinition> ItemDefinitions { get; private set; }

	public bool Initialize(IPlatformHooks hooks)
	{
		if (_hooks != null && _hooks != hooks)
		{
			throw new InvalidOperationException("SteamPlatform was initialized with two different platform hooks");
		}
		_hooks = hooks ?? throw new ArgumentNullException("hooks");
		StartSteamServer();
		if (!_initialized)
		{
			SteamInventory.OnDefinitionsUpdated += OnDefinitionsUpdated;
			SteamInventory.LoadItemDefinitions();
			Dispatch.OnException = delegate(Exception e)
			{
				Debug.LogException(e);
			};
			_initialized = true;
		}
		return true;
	}

	public void Shutdown()
	{
		TimeWarning val = TimeWarning.New("Steamworks.SteamServer.Shutdown", 0);
		try
		{
			if (SteamServer.IsValid)
			{
				Debug.Log((object)"Steamworks Shutting Down");
				SteamServer.Shutdown();
				Debug.Log((object)"Okay");
			}
		}
		finally
		{
			((IDisposable)val)?.Dispose();
		}
	}

	public void Update()
	{
		if (SteamServer.IsValid)
		{
			SteamServer.RunCallbacks();
		}
	}

	private static AuthResponse RemapAuthResponse(AuthResponse response)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Invalid comparison between Unknown and I4
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_000e: Invalid comparison between Unknown and I4
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Invalid comparison between Unknown and I4
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		//IL_001a: Invalid comparison between Unknown and I4
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Invalid comparison between Unknown and I4
		//IL_0024: Unknown result type (might be due to invalid IL or missing references)
		//IL_0026: Invalid comparison between Unknown and I4
		//IL_002a: Unknown result type (might be due to invalid IL or missing references)
		//IL_002d: Invalid comparison between Unknown and I4
		if ((int)response != 0)
		{
			if ((int)response != 3)
			{
				if ((int)response != 9)
				{
					if ((int)response != 5)
					{
						if ((int)response != 6)
						{
							if ((int)response != 7)
							{
								if ((int)response != 8)
								{
									if ((int)response != 10)
									{
										return (AuthResponse)0;
									}
									return (AuthResponse)6;
								}
								return (AuthResponse)5;
							}
							return (AuthResponse)7;
						}
						return (AuthResponse)8;
					}
					return (AuthResponse)1;
				}
				return (AuthResponse)4;
			}
			return (AuthResponse)3;
		}
		return (AuthResponse)2;
	}

	private static void DebugPrintSteamCallback(CallbackType type, string content, bool isServer)
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		string arg = (isServer ? "SteamServer" : "SteamClient");
		Debug.Log((object)$"[{arg}] {type}: {content}");
	}

	public bool PlayerOwnsDownloadableContent(ulong userId, int appId)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0011: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_0014: Invalid comparison between Unknown and I4
		//IL_002d: Unknown result type (might be due to invalid IL or missing references)
		//IL_002f: Invalid comparison between Unknown and I4
		UserHasLicenseForAppResult val = SteamServer.UserHasLicenseForApp(SteamId.op_Implicit(userId), AppId.op_Implicit(appId));
		if ((int)val == 2)
		{
			Debug.LogWarning((object)$"User tried to check DLC license but not authed ({userId})");
			return false;
		}
		return (int)val == 0;
	}

	public void RefreshItemDefinitions()
	{
		SteamInventory.LoadItemDefinitions();
	}

	public IPlayerItemDefinition GetItemDefinition(int definitionId)
	{
		if (ItemDefinitions == null)
		{
			return null;
		}
		foreach (IPlayerItemDefinition itemDefinition in ItemDefinitions)
		{
			if (itemDefinition.DefinitionId == definitionId)
			{
				return itemDefinition;
			}
		}
		return null;
	}

	private void OnDefinitionsUpdated()
	{
		ItemDefinitions = (IReadOnlyList<IPlayerItemDefinition>)SteamInventory.Definitions.Select((InventoryDef d) => new SteamItemDefinition(d)).ToList();
		_hooks.OnItemDefinitionsChanged();
	}

	public async Task<IPlayerInventory> DeserializeInventory(byte[] data)
	{
		InventoryResult? val = await SteamInventory.DeserializeAsync(data, -1);
		return (IPlayerInventory)(object)(val.HasValue ? new SteamInventory(val.Value) : null);
	}

	private void StartSteamServer()
	{
		//IL_0020: Unknown result type (might be due to invalid IL or missing references)
		//IL_0025: Unknown result type (might be due to invalid IL or missing references)
		//IL_008f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0094: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00a6: Unknown result type (might be due to invalid IL or missing references)
		if (SteamServer.IsValid)
		{
			return;
		}
		ServerParameters? serverParameters = _hooks.ServerParameters;
		if (serverParameters.HasValue)
		{
			ServerParameters value = serverParameters.Value;
			SteamServerInit val = default(SteamServerInit);
			((SteamServerInit)(ref val))..ctor(((ServerParameters)(ref value)).ShortName, ((ServerParameters)(ref value)).FullName);
			val.IpAddress = ((ServerParameters)(ref value)).Address;
			val.GamePort = ((ServerParameters)(ref value)).GamePort;
			val.Secure = ((ServerParameters)(ref value)).IsSecure;
			val.VersionString = ((ServerParameters)(ref value)).Version;
			if (((ServerParameters)(ref value)).QueryPort > 0)
			{
				val.QueryPort = ((ServerParameters)(ref value)).QueryPort;
			}
			else
			{
				val = ((SteamServerInit)(ref val)).WithQueryShareGamePort();
			}
			try
			{
				SteamServer.Init(AppId.op_Implicit(_hooks.SteamAppId), val, false);
			}
			catch (Exception ex)
			{
				Debug.LogWarning((object)("Couldn't initialize Steam Server (" + ex.Message + ")"));
				_hooks.Abort();
				return;
			}
			SteamServer.OnSteamServerConnectFailure += OnSteamConnectionFailure;
			SteamServer.OnSteamServersDisconnected += OnSteamServersDisconnected;
			SteamServer.OnSteamServersConnected += OnSteamConnected;
			SteamServer.DedicatedServer = true;
			if (((ServerParameters)(ref value)).HideIP)
			{
				SteamNetworkingSockets.RequestFakeIP(1);
			}
			SteamServer.LogOnAnonymous();
			SteamServer.OnValidateAuthTicketResponse += delegate(SteamId steamId, SteamId ownerSteamId, AuthResponse response)
			{
				//IL_0006: Unknown result type (might be due to invalid IL or missing references)
				//IL_000c: Unknown result type (might be due to invalid IL or missing references)
				//IL_0012: Unknown result type (might be due to invalid IL or missing references)
				//IL_0013: Unknown result type (might be due to invalid IL or missing references)
				_hooks.AuthSessionValidated(SteamId.op_Implicit(steamId), SteamId.op_Implicit(ownerSteamId), RemapAuthResponse(response), ((object)(AuthResponse)(ref response)/*cast due to .constrained prefix*/).ToString());
			};
		}
	}

	private void OnSteamServersDisconnected(Result result)
	{
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		Debug.LogWarning((object)$"SteamServer Disconnected ({result})");
	}

	private void OnSteamConnected()
	{
		Debug.Log((object)"SteamServer Connected");
	}

	private void OnSteamConnectionFailure(Result result, bool stilltrying)
	{
		//IL_0005: Unknown result type (might be due to invalid IL or missing references)
		Debug.LogWarning((object)$"SteamServer Connection Failure ({result})");
	}

	public bool BeginPlayerSession(ulong userId, byte[] authToken)
	{
		//IL_0002: Unknown result type (might be due to invalid IL or missing references)
		return SteamServer.BeginAuthSession(authToken, SteamId.op_Implicit(userId));
	}

	public void UpdatePlayerSession(ulong userId, string userName)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		SteamServer.UpdatePlayer(SteamId.op_Implicit(userId), userName, 0);
	}

	public void EndPlayerSession(ulong userId)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		SteamServer.EndSession(SteamId.op_Implicit(userId));
	}

	internal static ServerInfo ToPlatformServer(ServerInfo info)
	{
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		return new ServerInfo(((ServerInfo)(ref info)).AppId, ((ServerInfo)(ref info)).Name, ((ServerInfo)(ref info)).Address, ((ServerInfo)(ref info)).ConnectionPort, ((ServerInfo)(ref info)).QueryPort, ((ServerInfo)(ref info)).Map, ((ServerInfo)(ref info)).TagString, ((ServerInfo)(ref info)).Secure, ((ServerInfo)(ref info)).Players, ((ServerInfo)(ref info)).MaxPlayers, ((ServerInfo)(ref info)).LastTimePlayed, ((ServerInfo)(ref info)).Ping, ((ServerInfo)(ref info)).SteamId, int.MaxValue);
	}

	internal static ServerInfo ToSteamServer(ServerInfo server)
	{
		//IL_0018: Unknown result type (might be due to invalid IL or missing references)
		return new ServerInfo(((ServerInfo)(ref server)).AddressRaw, (ushort)((ServerInfo)(ref server)).ConnectionPort, (ushort)((ServerInfo)(ref server)).QueryPort, 0u);
	}

	public async Task<bool> LoadPlayerStats(ulong userId)
	{
		return (int)(await SteamServerStats.RequestUserStatsAsync(SteamId.op_Implicit(userId))) == 1;
	}

	public async Task<bool> SavePlayerStats(ulong userId)
	{
		return (int)(await SteamServerStats.StoreUserStats(SteamId.op_Implicit(userId))) == 1;
	}

	public long GetPlayerStatInt(ulong userId, string key, long defaultValue = 0L)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		return SteamServerStats.GetInt(SteamId.op_Implicit(userId), key, (int)defaultValue);
	}

	public bool SetPlayerStatInt(ulong userId, string key, long value)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		return SteamServerStats.SetInt(SteamId.op_Implicit(userId), key, (int)value);
	}
}
