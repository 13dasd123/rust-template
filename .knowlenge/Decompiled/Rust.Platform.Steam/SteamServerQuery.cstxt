using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Rust.Platform.Steam;
using Steamworks;
using Steamworks.Data;
using Steamworks.ServerList;

public class SteamServerQuery : IServerQuery, IDisposable
{
	public ServerQuerySet QuerySet { get; }

	public Base Query { get; private set; }

	public IReadOnlyList<ServerInfo> Servers { get; }

	public event Action<ServerInfo> OnServerFound;

	public SteamServerQuery(ServerQuerySet set, Base query)
	{
		//IL_0014: Unknown result type (might be due to invalid IL or missing references)
		//IL_0015: Unknown result type (might be due to invalid IL or missing references)
		SteamServerQuery steamServerQuery = this;
		QuerySet = set;
		Query = query ?? throw new ArgumentNullException("query");
		List<ServerInfo> serverList = new List<ServerInfo>();
		Servers = serverList;
		Query.OnChanges += delegate
		{
			//IL_0028: Unknown result type (might be due to invalid IL or missing references)
			//IL_002d: Unknown result type (might be due to invalid IL or missing references)
			//IL_0032: Unknown result type (might be due to invalid IL or missing references)
			//IL_0039: Unknown result type (might be due to invalid IL or missing references)
			//IL_0050: Unknown result type (might be due to invalid IL or missing references)
			//IL_0089: Unknown result type (might be due to invalid IL or missing references)
			//IL_008e: Unknown result type (might be due to invalid IL or missing references)
			//IL_0093: Unknown result type (might be due to invalid IL or missing references)
			//IL_009a: Unknown result type (might be due to invalid IL or missing references)
			//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
			if (steamServerQuery.Query != null)
			{
				foreach (ServerInfo item in steamServerQuery.Query.Responsive)
				{
					ServerInfo val = SteamPlatform.ToPlatformServer(item);
					serverList.Add(val);
					steamServerQuery.OnServerFound?.Invoke(val);
				}
				foreach (ServerInfo item2 in steamServerQuery.Query.Unqueried)
				{
					ServerInfo val2 = SteamPlatform.ToPlatformServer(item2);
					serverList.Add(val2);
					steamServerQuery.OnServerFound?.Invoke(val2);
				}
				steamServerQuery.Query.Responsive.Clear();
			}
		};
	}

	public void Dispose()
	{
		if (SteamClient.IsValid)
		{
			Base query = Query;
			if (query != null)
			{
				query.Dispose();
			}
		}
		Query = null;
	}

	public void AddFilter(string key, string value)
	{
		Query.AddFilter(key, value);
	}

	public async Task RunQueryAsync(double timeoutInSeconds)
	{
		await Query.RunQueryAsync((float)timeoutInSeconds);
	}
}
