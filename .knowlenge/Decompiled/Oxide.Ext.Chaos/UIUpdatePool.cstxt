using System;
using Oxide.Ext.Chaos.UIFramework;

public class UIUpdatePool : GenericPool
{
	public class Collection<T> : GenericPoolCollection<UpdateComponent<T>> where T : BaseCuiComponent
	{
		public bool HasSpace => m_Stack.Count < m_MaximumSize;

		public Collection(int maximumSize = 128)
			: base(maximumSize)
		{
		}

		protected override UpdateComponent<T> CreateInstance()
		{
			return Activator.CreateInstance<UpdateComponent<T>>();
		}

		protected override void DestroyInstance(ref UpdateComponent<T> t)
		{
			t = null;
		}
	}

	private static readonly UIUpdatePool _instance;

	static UIUpdatePool()
	{
		_instance = new UIUpdatePool();
	}

	public static Collection<T> CreateCollection<T>(int capacity) where T : BaseCuiComponent
	{
		Collection<T> collection = FindCollection<T>();
		if (collection == null)
		{
			collection = new Collection<T>(capacity);
			_instance.m_Collections.Add(typeof(T).Name, collection);
		}
		return collection;
	}

	public static Collection<T> FindCollection<T>() where T : BaseCuiComponent
	{
		if (!_instance.m_Collections.TryGetValue(typeof(T).Name, out var value))
		{
			return null;
		}
		return (Collection<T>)value;
	}

	public static UpdateComponent<T> Get<T>() where T : BaseCuiComponent
	{
		Collection<T> collection = FindCollection<T>();
		UpdateComponent<T> updateComponent = ((collection == null) ? new UpdateComponent<T>() : collection.Get());
		updateComponent.OnLeavePool();
		return updateComponent;
	}

	public static void Free<T>(ref UpdateComponent<T> t) where T : BaseCuiComponent
	{
		if (t != null)
		{
			t.OnEnterPool();
			Collection<T> collection = FindCollection<T>();
			if (collection == null)
			{
				collection = CreateCollection<T>(128);
			}
			collection.Free(ref t);
		}
	}
}
