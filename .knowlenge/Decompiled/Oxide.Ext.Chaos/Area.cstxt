using Oxide.Ext.Chaos.UIFramework;
using UnityEngine;

public struct Area
{
	public readonly float Left;

	public readonly float Right;

	public readonly float Bottom;

	public readonly float Top;

	public static readonly Area full = new Area(0f, 0f, 1f, 1f);

	public float Height => Mathf.Abs(Top - Bottom);

	public float Width => Mathf.Abs(Right - Left);

	public Area(float left, float bottom, float right, float top)
	{
		Left = left;
		Right = right;
		Bottom = bottom;
		Top = top;
	}

	public Area(Oxide.Ext.Chaos.UIFramework.Bounds min, Oxide.Ext.Chaos.UIFramework.Bounds max)
	{
		Left = min.X;
		Bottom = min.Y;
		Right = max.X;
		Top = max.Y;
	}

	public static implicit operator Area(Offset offset)
	{
		return new Area(offset.Min, offset.Max);
	}

	public static implicit operator Area(Padding padding)
	{
		return new Area(padding.Left, padding.Bottom, padding.Right, padding.Top);
	}

	public static Area operator +(Area a, Area b)
	{
		return new Area(a.Left + b.Left, a.Bottom + b.Bottom, a.Right + b.Right, a.Top + b.Top);
	}

	public static Area operator -(Area a, Area b)
	{
		return new Area(a.Left - b.Left, a.Bottom - b.Bottom, a.Right - b.Right, a.Top - b.Top);
	}

	public static Area operator /(Area a, Area b)
	{
		return new Area(a.Left / b.Left, a.Bottom / b.Bottom, a.Right / b.Right, a.Top / b.Top);
	}

	public static Area operator *(Area a, Area b)
	{
		return new Area(a.Left * b.Left, a.Bottom * b.Bottom, a.Right * b.Right, a.Top * b.Top);
	}

	public static Area operator /(Area a, float f)
	{
		return new Area(a.Left / f, a.Bottom / f, a.Right / f, a.Top / f);
	}

	public static Area operator *(Area a, float f)
	{
		return new Area(a.Left * f, a.Bottom * f, a.Right * f, a.Top * f);
	}
}
