using System.Diagnostics;
using System.IO;
using Oxide.Core;
using Oxide.Ext.Chaos;
using UnityEngine;

public class Profiler
{
	private Stopwatch m_Stopwatch = new Stopwatch();

	private string m_Message = string.Empty;

	private string m_Filename;

	public Profiler(string filename)
	{
		m_Filename = filename.GetFileNameWithoutExtension() + ".txt";
	}

	public void Begin(string message)
	{
		m_Message = message;
		m_Stopwatch.Reset();
		m_Stopwatch.Start();
	}

	public void End(bool logToFile = false)
	{
		m_Stopwatch.Stop();
		if (!string.IsNullOrEmpty(m_Message))
		{
			if (logToFile)
			{
				LogToFile($"{m_Message} | {m_Stopwatch.Elapsed.TotalMilliseconds}ms");
			}
			else
			{
				UnityEngine.Debug.Log($"{m_Message} | {m_Stopwatch.Elapsed.TotalMilliseconds}ms");
			}
			m_Message = string.Empty;
		}
	}

	private void LogToFile(string text)
	{
		string text2 = Path.Combine(Interface.Oxide.LogDirectory, m_Filename);
		if (!Directory.Exists(text2))
		{
			Directory.CreateDirectory(text2);
		}
		using StreamWriter streamWriter = new StreamWriter(Path.Combine(text2, Utility.CleanPath(m_Filename)), append: true);
		streamWriter.WriteLine(text);
	}
}
