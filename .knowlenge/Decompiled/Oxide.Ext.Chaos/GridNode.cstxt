using System;
using System.Runtime.CompilerServices;
using Oxide.Ext.Chaos.AStar;
using UnityEngine;

public class GridNode : IHeapItem<GridNode>, IComparable<GridNode>
{
	[CompilerGenerated]
	private GridNode \u200b\u206c\u202e\u200e\u202a\u206a\u206e\u202d\u206c\u206b\u202e\u206c\u200d\u206b\u202c\u202c\u202a\u206c\u202e\u200b\u202a\u206e\u206a\u200f\u206e\u200d\u200d\u206b\u206a\u206f\u206f\u200b\u206f\u202d\u206a\u206e\u202a\u202c\u206f\u202a\u202e;

	[CompilerGenerated]
	private int \u200b\u200b\u200d\u202b\u202b\u200e\u200f\u200d\u206a\u206c\u200d\u206e\u200f\u206b\u200e\u202a\u200b\u200f\u202e\u206c\u206d\u200e\u200e\u202d\u206f\u200f\u200e\u200d\u202c\u200c\u200c\u202c\u202e\u206e\u200e\u200c\u200c\u202e\u202e\u200c\u202e;

	[CompilerGenerated]
	private int \u202d\u200c\u206f\u200b\u206e\u200b\u200c\u206a\u206a\u200d\u206f\u200e\u200d\u206e\u202e\u206a\u206a\u202a\u202b\u200b\u206d\u202b\u202a\u206e\u200e\u202a\u202d\u206a\u202b\u200f\u206d\u200e\u206a\u206e\u206b\u202b\u202e\u206d\u206a\u206b\u202e;

	[CompilerGenerated]
	private int \u206a\u206d\u202c\u200c\u206c\u206c\u200f\u202a\u200c\u206e\u206d\u202b\u206a\u200c\u206d\u200c\u202a\u206d\u202d\u200b\u206e\u200c\u200b\u206c\u206b\u206f\u202b\u200c\u200f\u200c\u200e\u206c\u202e\u200c\u206a\u202b\u206f\u206a\u206d\u200e\u202e;

	[CompilerGenerated]
	private int \u200d\u200f\u202c\u202e\u200d\u202c\u200f\u206b\u206a\u202b\u206a\u206d\u202c\u206e\u206b\u200d\u202e\u202c\u202c\u206d\u206a\u200d\u200f\u202c\u206d\u200d\u202e\u200f\u202b\u200e\u202a\u202b\u200d\u200c\u206f\u202a\u200d\u200e\u206b\u206b\u202e;

	[CompilerGenerated]
	private int \u200e\u206a\u206a\u206b\u200d\u202c\u202b\u202c\u202c\u206b\u206f\u202a\u206b\u202c\u206e\u206a\u206a\u206b\u200c\u206f\u206b\u202e\u206d\u206c\u200d\u202e\u206c\u200c\u202e\u200f\u202e\u200b\u206d\u202c\u206b\u202d\u200d\u200c\u202d\u206a\u202e;

	[CompilerGenerated]
	private float \u206f\u200c\u200c\u200b\u202a\u206c\u200b\u206c\u202e\u200b\u202c\u202c\u202b\u206b\u206c\u200b\u200b\u202a\u206f\u202d\u200d\u206a\u206b\u202e\u200f\u202a\u202e\u200e\u202c\u202c\u202b\u202c\u200c\u202d\u200c\u206b\u202d\u202e\u202b\u206a\u202e;

	[CompilerGenerated]
	private Vector3 \u202c\u200f\u200c\u202c\u200b\u206f\u206b\u206a\u202e\u200f\u200b\u206e\u206b\u202a\u206a\u206d\u206b\u206e\u206b\u202e\u202b\u202b\u206f\u200e\u202b\u206c\u202a\u200b\u200d\u202b\u206a\u206b\u200e\u200c\u202e\u206f\u202c\u206b\u206a\u202e\u202e;

	[CompilerGenerated]
	private bool \u202b\u202c\u202b\u200c\u206e\u200e\u206a\u206d\u206e\u206f\u200b\u206a\u200d\u200b\u200c\u202c\u200d\u202d\u200d\u200b\u200e\u202b\u206d\u206d\u206e\u206a\u200d\u206f\u200d\u206c\u206a\u206a\u200f\u206f\u200c\u206a\u202d\u206a\u202a\u206d\u202e;

	private int \u200b\u200b\u202e\u206d\u200e\u200e\u200d\u206d\u200e\u206e\u206e\u206e\u200c\u206a\u200c\u206d\u200c\u206a\u200d\u202a\u200c\u206c\u202b\u202b\u202b\u202c\u206e\u200d\u206d\u202e\u200e\u202b\u206b\u206d\u202e\u206a\u206f\u202a\u202e\u206b\u202e;

	internal GridNode \u206e\u200d\u200c\u200f\u206b\u200b\u200f\u202b\u200b\u202e\u206c\u200d\u202a\u206b\u202a\u200d\u206e\u206e\u206e\u202e\u206c\u206c\u200f\u206f\u200d\u200b\u206b\u202d\u206c\u206c\u202a\u202d\u206b\u200e\u200f\u206b\u206c\u206b\u200b\u206a\u202e
	{
		[CompilerGenerated]
		get
		{
			return \u200b\u206c\u202e\u200e\u202a\u206a\u206e\u202d\u206c\u206b\u202e\u206c\u200d\u206b\u202c\u202c\u202a\u206c\u202e\u200b\u202a\u206e\u206a\u200f\u206e\u200d\u200d\u206b\u206a\u206f\u206f\u200b\u206f\u202d\u206a\u206e\u202a\u202c\u206f\u202a\u202e;
		}
		[CompilerGenerated]
		set
		{
			\u200b\u206c\u202e\u200e\u202a\u206a\u206e\u202d\u206c\u206b\u202e\u206c\u200d\u206b\u202c\u202c\u202a\u206c\u202e\u200b\u202a\u206e\u206a\u200f\u206e\u200d\u200d\u206b\u206a\u206f\u206f\u200b\u206f\u202d\u206a\u206e\u202a\u202c\u206f\u202a\u202e = value;
		}
	}

	internal int \u206a\u202e\u200b\u200c\u206e\u202d\u200f\u200c\u202a\u206e\u200d\u200c\u200d\u206e\u202c\u206f\u206b\u200e\u200c\u206c\u200b\u206a\u202b\u200f\u202a\u202b\u200f\u202a\u202c\u202a\u200f\u200f\u202c\u202b\u202c\u200c\u202a\u202b\u200f\u202e
	{
		[CompilerGenerated]
		get
		{
			return \u200b\u200b\u200d\u202b\u202b\u200e\u200f\u200d\u206a\u206c\u200d\u206e\u200f\u206b\u200e\u202a\u200b\u200f\u202e\u206c\u206d\u200e\u200e\u202d\u206f\u200f\u200e\u200d\u202c\u200c\u200c\u202c\u202e\u206e\u200e\u200c\u200c\u202e\u202e\u200c\u202e;
		}
		[CompilerGenerated]
		set
		{
			\u200b\u200b\u200d\u202b\u202b\u200e\u200f\u200d\u206a\u206c\u200d\u206e\u200f\u206b\u200e\u202a\u200b\u200f\u202e\u206c\u206d\u200e\u200e\u202d\u206f\u200f\u200e\u200d\u202c\u200c\u200c\u202c\u202e\u206e\u200e\u200c\u200c\u202e\u202e\u200c\u202e = value;
		}
	}

	internal int \u202e\u202d\u202d\u202e\u202c\u202b\u200b\u206f\u202e\u200d\u206b\u202a\u206c\u200e\u200d\u206f\u200e\u202c\u202c\u200c\u202d\u200d\u200d\u206d\u202b\u206f\u200d\u206c\u202d\u200f\u202e\u206f\u200d\u206c\u206c\u200b\u202e\u202c\u206c\u206d\u202e
	{
		[CompilerGenerated]
		get
		{
			return \u202d\u200c\u206f\u200b\u206e\u200b\u200c\u206a\u206a\u200d\u206f\u200e\u200d\u206e\u202e\u206a\u206a\u202a\u202b\u200b\u206d\u202b\u202a\u206e\u200e\u202a\u202d\u206a\u202b\u200f\u206d\u200e\u206a\u206e\u206b\u202b\u202e\u206d\u206a\u206b\u202e;
		}
		[CompilerGenerated]
		set
		{
			\u202d\u200c\u206f\u200b\u206e\u200b\u200c\u206a\u206a\u200d\u206f\u200e\u200d\u206e\u202e\u206a\u206a\u202a\u202b\u200b\u206d\u202b\u202a\u206e\u200e\u202a\u202d\u206a\u202b\u200f\u206d\u200e\u206a\u206e\u206b\u202b\u202e\u206d\u206a\u206b\u202e = value;
		}
	}

	public int C_Cost
	{
		[CompilerGenerated]
		get
		{
			return \u206a\u206d\u202c\u200c\u206c\u206c\u200f\u202a\u200c\u206e\u206d\u202b\u206a\u200c\u206d\u200c\u202a\u206d\u202d\u200b\u206e\u200c\u200b\u206c\u206b\u206f\u202b\u200c\u200f\u200c\u200e\u206c\u202e\u200c\u206a\u202b\u206f\u206a\u206d\u200e\u202e;
		}
		[CompilerGenerated]
		set
		{
			\u206a\u206d\u202c\u200c\u206c\u206c\u200f\u202a\u200c\u206e\u206d\u202b\u206a\u200c\u206d\u200c\u202a\u206d\u202d\u200b\u206e\u200c\u200b\u206c\u206b\u206f\u202b\u200c\u200f\u200c\u200e\u206c\u202e\u200c\u206a\u202b\u206f\u206a\u206d\u200e\u202e = value;
		}
	}

	internal int \u202c\u200e\u200c\u202d\u206d\u202a\u206d\u206b\u206d\u200d\u206c\u202c\u206a\u202e\u200f\u200b\u200d\u202b\u200d\u206d\u200b\u202d\u202e\u206a\u206f\u206f\u202b\u206e\u200d\u206b\u202d\u206b\u202c\u202d\u206e\u200b\u202b\u206f\u200c\u206f\u202e => \u206a\u202e\u200b\u200c\u206e\u202d\u200f\u200c\u202a\u206e\u200d\u200c\u200d\u206e\u202c\u206f\u206b\u200e\u200c\u206c\u200b\u206a\u202b\u200f\u202a\u202b\u200f\u202a\u202c\u202a\u200f\u200f\u202c\u202b\u202c\u200c\u202a\u202b\u200f\u202e + \u202e\u202d\u202d\u202e\u202c\u202b\u200b\u206f\u202e\u200d\u206b\u202a\u206c\u200e\u200d\u206f\u200e\u202c\u202c\u200c\u202d\u200d\u200d\u206d\u202b\u206f\u200d\u206c\u202d\u200f\u202e\u206f\u200d\u206c\u206c\u200b\u202e\u202c\u206c\u206d\u202e;

	public int X
	{
		[CompilerGenerated]
		get
		{
			return \u200d\u200f\u202c\u202e\u200d\u202c\u200f\u206b\u206a\u202b\u206a\u206d\u202c\u206e\u206b\u200d\u202e\u202c\u202c\u206d\u206a\u200d\u200f\u202c\u206d\u200d\u202e\u200f\u202b\u200e\u202a\u202b\u200d\u200c\u206f\u202a\u200d\u200e\u206b\u206b\u202e;
		}
		[CompilerGenerated]
		private set
		{
			\u200d\u200f\u202c\u202e\u200d\u202c\u200f\u206b\u206a\u202b\u206a\u206d\u202c\u206e\u206b\u200d\u202e\u202c\u202c\u206d\u206a\u200d\u200f\u202c\u206d\u200d\u202e\u200f\u202b\u200e\u202a\u202b\u200d\u200c\u206f\u202a\u200d\u200e\u206b\u206b\u202e = value;
		}
	}

	public int Z
	{
		[CompilerGenerated]
		get
		{
			return \u200e\u206a\u206a\u206b\u200d\u202c\u202b\u202c\u202c\u206b\u206f\u202a\u206b\u202c\u206e\u206a\u206a\u206b\u200c\u206f\u206b\u202e\u206d\u206c\u200d\u202e\u206c\u200c\u202e\u200f\u202e\u200b\u206d\u202c\u206b\u202d\u200d\u200c\u202d\u206a\u202e;
		}
		[CompilerGenerated]
		private set
		{
			\u200e\u206a\u206a\u206b\u200d\u202c\u202b\u202c\u202c\u206b\u206f\u202a\u206b\u202c\u206e\u206a\u206a\u206b\u200c\u206f\u206b\u202e\u206d\u206c\u200d\u202e\u206c\u200c\u202e\u200f\u202e\u200b\u206d\u202c\u206b\u202d\u200d\u200c\u202d\u206a\u202e = value;
		}
	}

	public float CellSize
	{
		[CompilerGenerated]
		get
		{
			return \u206f\u200c\u200c\u200b\u202a\u206c\u200b\u206c\u202e\u200b\u202c\u202c\u202b\u206b\u206c\u200b\u200b\u202a\u206f\u202d\u200d\u206a\u206b\u202e\u200f\u202a\u202e\u200e\u202c\u202c\u202b\u202c\u200c\u202d\u200c\u206b\u202d\u202e\u202b\u206a\u202e;
		}
		[CompilerGenerated]
		private set
		{
			\u206f\u200c\u200c\u200b\u202a\u206c\u200b\u206c\u202e\u200b\u202c\u202c\u202b\u206b\u206c\u200b\u200b\u202a\u206f\u202d\u200d\u206a\u206b\u202e\u200f\u202a\u202e\u200e\u202c\u202c\u202b\u202c\u200c\u202d\u200c\u206b\u202d\u202e\u202b\u206a\u202e = value;
		}
	}

	public Vector3 Position
	{
		[CompilerGenerated]
		get
		{
			return \u202c\u200f\u200c\u202c\u200b\u206f\u206b\u206a\u202e\u200f\u200b\u206e\u206b\u202a\u206a\u206d\u206b\u206e\u206b\u202e\u202b\u202b\u206f\u200e\u202b\u206c\u202a\u200b\u200d\u202b\u206a\u206b\u200e\u200c\u202e\u206f\u202c\u206b\u206a\u202e\u202e;
		}
		[CompilerGenerated]
		set
		{
			\u202c\u200f\u200c\u202c\u200b\u206f\u206b\u206a\u202e\u200f\u200b\u206e\u206b\u202a\u206a\u206d\u206b\u206e\u206b\u202e\u202b\u202b\u206f\u200e\u202b\u206c\u202a\u200b\u200d\u202b\u206a\u206b\u200e\u200c\u202e\u206f\u202c\u206b\u206a\u202e\u202e = value;
		}
	}

	public bool IsBlocked
	{
		[CompilerGenerated]
		get
		{
			return \u202b\u202c\u202b\u200c\u206e\u200e\u206a\u206d\u206e\u206f\u200b\u206a\u200d\u200b\u200c\u202c\u200d\u202d\u200d\u200b\u200e\u202b\u206d\u206d\u206e\u206a\u200d\u206f\u200d\u206c\u206a\u206a\u200f\u206f\u200c\u206a\u202d\u206a\u202a\u206d\u202e;
		}
		[CompilerGenerated]
		set
		{
			\u202b\u202c\u202b\u200c\u206e\u200e\u206a\u206d\u206e\u206f\u200b\u206a\u200d\u200b\u200c\u202c\u200d\u202d\u200d\u200b\u200e\u202b\u206d\u206d\u206e\u206a\u200d\u206f\u200d\u206c\u206a\u206a\u200f\u206f\u200c\u206a\u202d\u206a\u202a\u206d\u202e = value;
		}
	}

	public int HeapIndex
	{
		get
		{
			return \u200b\u200b\u202e\u206d\u200e\u200e\u200d\u206d\u200e\u206e\u206e\u206e\u200c\u206a\u200c\u206d\u200c\u206a\u200d\u202a\u200c\u206c\u202b\u202b\u202b\u202c\u206e\u200d\u206d\u202e\u200e\u202b\u206b\u206d\u202e\u206a\u206f\u202a\u202e\u206b\u202e;
		}
		set
		{
			\u200b\u200b\u202e\u206d\u200e\u200e\u200d\u206d\u200e\u206e\u206e\u206e\u200c\u206a\u200c\u206d\u200c\u206a\u200d\u202a\u200c\u206c\u202b\u202b\u202b\u202c\u206e\u200d\u206d\u202e\u200e\u202b\u206b\u206d\u202e\u206a\u206f\u202a\u202e\u206b\u202e = value;
		}
	}

	public GridNode()
	{
	}

	internal GridNode(Action<GridNode, Vector3> P_0, Vector3 P_1, Vector2Int P_2, float P_3)
	{
		X = P_2.x;
		Z = P_2.y;
		CellSize = P_3;
		P_0(this, P_1);
	}

	internal void \u202d\u202d\u200f\u202a\u200d\u200e\u202e\u206d\u202b\u200b\u206f\u200f\u200e\u202c\u200d\u206a\u202d\u206f\u202b\u202b\u200d\u206b\u202b\u202a\u206a\u202e\u200f\u206b\u202e\u200c\u206c\u200b\u202b\u206b\u200c\u206b\u200e\u206a\u202a\u202e()
	{
		\u206e\u200d\u200c\u200f\u206b\u200b\u200f\u202b\u200b\u202e\u206c\u200d\u202a\u206b\u202a\u200d\u206e\u206e\u206e\u202e\u206c\u206c\u200f\u206f\u200d\u200b\u206b\u202d\u206c\u206c\u202a\u202d\u206b\u200e\u200f\u206b\u206c\u206b\u200b\u206a\u202e = null;
		int num2 = (\u202e\u202d\u202d\u202e\u202c\u202b\u200b\u206f\u202e\u200d\u206b\u202a\u206c\u200e\u200d\u206f\u200e\u202c\u202c\u200c\u202d\u200d\u200d\u206d\u202b\u206f\u200d\u206c\u202d\u200f\u202e\u206f\u200d\u206c\u206c\u200b\u202e\u202c\u206c\u206d\u202e = 0);
		\u206a\u202e\u200b\u200c\u206e\u202d\u200f\u200c\u202a\u206e\u200d\u200c\u200d\u206e\u202c\u206f\u206b\u200e\u200c\u206c\u200b\u206a\u202b\u200f\u202a\u202b\u200f\u202a\u202c\u202a\u200f\u200f\u202c\u202b\u202c\u200c\u202a\u202b\u200f\u202e = num2;
	}

	public int CompareTo(GridNode other)
	{
		if (\u202c\u200e\u200c\u202d\u206d\u202a\u206d\u206b\u206d\u200d\u206c\u202c\u206a\u202e\u200f\u200b\u200d\u202b\u200d\u206d\u200b\u202d\u202e\u206a\u206f\u206f\u202b\u206e\u200d\u206b\u202d\u206b\u202c\u202d\u206e\u200b\u202b\u206f\u200c\u206f\u202e < other.\u202c\u200e\u200c\u202d\u206d\u202a\u206d\u206b\u206d\u200d\u206c\u202c\u206a\u202e\u200f\u200b\u200d\u202b\u200d\u206d\u200b\u202d\u202e\u206a\u206f\u206f\u202b\u206e\u200d\u206b\u202d\u206b\u202c\u202d\u206e\u200b\u202b\u206f\u200c\u206f\u202e)
		{
			goto IL_000e;
		}
		goto IL_005a;
		IL_000e:
		int num = -1246281988;
		goto IL_0013;
		IL_0013:
		uint num2;
		switch ((num2 = (uint)(num ^ -1332886413)) % 5)
		{
		case 0u:
			break;
		case 1u:
			return 1;
		case 2u:
			return -1;
		case 4u:
			goto IL_005a;
		default:
			return 0;
		}
		goto IL_000e;
		IL_005a:
		int num3;
		if (\u202c\u200e\u200c\u202d\u206d\u202a\u206d\u206b\u206d\u200d\u206c\u202c\u206a\u202e\u200f\u200b\u200d\u202b\u200d\u206d\u200b\u202d\u202e\u206a\u206f\u206f\u202b\u206e\u200d\u206b\u202d\u206b\u202c\u202d\u206e\u200b\u202b\u206f\u200c\u206f\u202e > other.\u202c\u200e\u200c\u202d\u206d\u202a\u206d\u206b\u206d\u200d\u206c\u202c\u206a\u202e\u200f\u200b\u200d\u202b\u200d\u206d\u200b\u202d\u202e\u206a\u206f\u206f\u202b\u206e\u200d\u206b\u202d\u206b\u202c\u202d\u206e\u200b\u202b\u206f\u200c\u206f\u202e)
		{
			num = -16628840;
			num3 = num;
		}
		else
		{
			num = -1254136163;
			num3 = num;
		}
		goto IL_0013;
	}

	int IComparable<GridNode>.CompareTo(GridNode other)
	{
		//ILSpy generated this explicit interface implementation from .override directive in CompareTo
		return this.CompareTo(other);
	}

	public bool IsLineOfSight(WorldGrid<GridNode> grid, GridNode other)
	{
		if (X == other.X)
		{
			goto IL_0011;
		}
		goto IL_01d8;
		IL_0011:
		int num = -1385797908;
		goto IL_0016;
		IL_0016:
		bool result = default(bool);
		int num3 = default(int);
		int num9 = default(int);
		int num8 = default(int);
		GridNode4 containingPoints2 = default(GridNode4);
		int num5 = default(int);
		int num4 = default(int);
		GridNode4 containingPoints = default(GridNode4);
		while (true)
		{
			uint num2;
			switch ((num2 = (uint)(num ^ -89322965)) % 28)
			{
			case 22u:
				break;
			case 9u:
				goto IL_009c;
			case 16u:
				result = false;
				num = ((int)num2 * -1343154432) ^ 0x571E2A7E;
				continue;
			case 21u:
				num = (int)((num2 * 2103407253) ^ 0xB98F4C6);
				continue;
			case 3u:
				result = false;
				num = (int)(num2 * 2091035069) ^ -812937439;
				continue;
			case 12u:
				result = true;
				num3 = Z;
				num = -1621840816;
				continue;
			case 18u:
				num9 = Sign(other.X - X);
				result = true;
				num = (int)((num2 * 1492937931) ^ 0x71A211);
				continue;
			case 23u:
				goto IL_0144;
			case 13u:
				return result;
			case 6u:
				goto IL_0179;
			case 17u:
				num8 += num9;
				num = -1930425506;
				continue;
			case 4u:
				containingPoints2 = other.GetContainingPoints(grid);
				result = true;
				num5 = 0;
				num = (int)((num2 * 870772155) ^ 0x17CE231);
				continue;
			case 2u:
				result = false;
				num = ((int)num2 * -747710894) ^ 0x212C54BD;
				continue;
			case 25u:
				goto IL_01d8;
			case 11u:
				num4 = Sign(other.Z - Z);
				num = (int)(num2 * 1919699649) ^ -643345250;
				continue;
			case 10u:
				return result;
			case 8u:
				num8 = X;
				num = (int)(num2 * 1025149622) ^ -186251697;
				continue;
			case 14u:
			{
				int num6;
				int num7;
				if (num4 == 0)
				{
					num6 = -1694581264;
					num7 = num6;
				}
				else
				{
					num6 = -1469908761;
					num7 = num6;
				}
				num = num6 ^ ((int)num2 * -1383904412);
				continue;
			}
			case 19u:
				num5++;
				num = -1576685031;
				continue;
			case 15u:
				goto IL_0277;
			case 1u:
				containingPoints = GetContainingPoints(grid);
				num = -206941229;
				continue;
			case 7u:
				goto IL_02b2;
			case 24u:
				num3 += num4;
				num = -1621840816;
				continue;
			case 27u:
				return !IsBlocked;
			case 5u:
				goto IL_02ff;
			case 26u:
				num = (int)((num2 * 1499857750) ^ 0x5616A62D);
				continue;
			case 0u:
				num = ((int)num2 * -1156184897) ^ 0x29C35B92;
				continue;
			default:
				return result;
			}
			break;
			IL_02ff:
			int num10;
			if (num8 != other.X + num9)
			{
				num = -304368668;
				num10 = num;
			}
			else
			{
				num = -145000927;
				num10 = num;
			}
			continue;
			IL_0277:
			int num11;
			if (grid[X, num3].IsBlocked)
			{
				num = -1043282205;
				num11 = num;
			}
			else
			{
				num = -889697633;
				num11 = num;
			}
			continue;
			IL_0144:
			int num12;
			if (grid[num8, Z].IsBlocked)
			{
				num = -1565097383;
				num12 = num;
			}
			else
			{
				num = -1931992962;
				num12 = num;
			}
			continue;
			IL_02b2:
			int num13;
			if (num3 == other.Z + num4)
			{
				num = -1699491202;
				num13 = num;
			}
			else
			{
				num = -1857445876;
				num13 = num;
			}
			continue;
			IL_009c:
			int num14;
			if (!containingPoints[num5].IsLineOfSight(grid, containingPoints2[num5]))
			{
				num = -819370536;
				num14 = num;
			}
			else
			{
				num = -813187688;
				num14 = num;
			}
			continue;
			IL_0179:
			int num15;
			if (num5 < 4)
			{
				num = -515842326;
				num15 = num;
			}
			else
			{
				num = -888989257;
				num15 = num;
			}
		}
		goto IL_0011;
		IL_01d8:
		int num16;
		if (Z != other.Z)
		{
			num = -1642452826;
			num16 = num;
		}
		else
		{
			num = -1527330003;
			num16 = num;
		}
		goto IL_0016;
	}

	public GridNode4 GetContainingPoints(WorldGrid<GridNode> grid)
	{
		return new GridNode4(grid[X, Z], grid[X + 1, Z], grid[X, Z + 1], grid[X + 1, Z + 1]);
	}

	public static int Sign(int num)
	{
		if (num != 0)
		{
			while (true)
			{
				int num2 = -18208752;
				while (true)
				{
					uint num3;
					switch ((num3 = (uint)(num2 ^ -900229623)) % 5)
					{
					case 3u:
						break;
					case 1u:
					{
						int num4;
						int num5;
						if (num > 0)
						{
							num4 = -1497637875;
							num5 = num4;
						}
						else
						{
							num4 = -2094850537;
							num5 = num4;
						}
						num2 = num4 ^ ((int)num3 * -1857360695);
						continue;
					}
					case 4u:
						return 1;
					case 2u:
						return -1;
					default:
						goto end_IL_0003;
					}
					break;
				}
				continue;
				end_IL_0003:
				break;
			}
		}
		return 0;
	}
}
