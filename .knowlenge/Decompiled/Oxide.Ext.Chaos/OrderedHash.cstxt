using System;
using System.Collections;
using System.Collections.Generic;

public class OrderedHash<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable
{
	private readonly IDictionary<TKey, TValue> dictionary;

	public TValue this[TKey key]
	{
		get
		{
			if (TryGetValue(key, out var value))
			{
				return value;
			}
			if (!typeof(TValue).IsValueType)
			{
				return default(TValue);
			}
			return (TValue)Activator.CreateInstance(typeof(TValue));
		}
		set
		{
			if (value == null)
			{
				dictionary.Remove(key);
			}
			else
			{
				dictionary[key] = value;
			}
		}
	}

	public ICollection<TKey> Keys => dictionary.Keys;

	public ICollection<TValue> Values => dictionary.Values;

	public int Count => dictionary.Count;

	public bool IsReadOnly => dictionary.IsReadOnly;

	public OrderedHash()
	{
		dictionary = new SortedList<TKey, TValue>();
	}

	public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator()
	{
		return dictionary.GetEnumerator();
	}

	IEnumerator<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator()
	{
		//ILSpy generated this explicit interface implementation from .override directive in GetEnumerator
		return this.GetEnumerator();
	}

	public bool ContainsKey(TKey key)
	{
		return dictionary.ContainsKey(key);
	}

	bool IDictionary<TKey, TValue>.ContainsKey(TKey key)
	{
		//ILSpy generated this explicit interface implementation from .override directive in ContainsKey
		return this.ContainsKey(key);
	}

	public bool Contains(KeyValuePair<TKey, TValue> item)
	{
		return dictionary.Contains(item);
	}

	bool ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue> item)
	{
		//ILSpy generated this explicit interface implementation from .override directive in Contains
		return this.Contains(item);
	}

	public void CopyTo(KeyValuePair<TKey, TValue>[] array, int index)
	{
		dictionary.CopyTo(array, index);
	}

	void ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[] array, int index)
	{
		//ILSpy generated this explicit interface implementation from .override directive in CopyTo
		this.CopyTo(array, index);
	}

	public bool TryGetValue(TKey key, out TValue value)
	{
		return dictionary.TryGetValue(key, out value);
	}

	bool IDictionary<TKey, TValue>.TryGetValue(TKey key, out TValue value)
	{
		//ILSpy generated this explicit interface implementation from .override directive in TryGetValue
		return this.TryGetValue(key, out value);
	}

	public void Add(TKey key, TValue value)
	{
		dictionary.Add(key, value);
	}

	void IDictionary<TKey, TValue>.Add(TKey key, TValue value)
	{
		//ILSpy generated this explicit interface implementation from .override directive in Add
		this.Add(key, value);
	}

	public void Add(KeyValuePair<TKey, TValue> item)
	{
		dictionary.Add(item);
	}

	void ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue> item)
	{
		//ILSpy generated this explicit interface implementation from .override directive in Add
		this.Add(item);
	}

	public bool Remove(TKey key)
	{
		return dictionary.Remove(key);
	}

	bool IDictionary<TKey, TValue>.Remove(TKey key)
	{
		//ILSpy generated this explicit interface implementation from .override directive in Remove
		return this.Remove(key);
	}

	public bool Remove(KeyValuePair<TKey, TValue> item)
	{
		return dictionary.Remove(item);
	}

	bool ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue> item)
	{
		//ILSpy generated this explicit interface implementation from .override directive in Remove
		return this.Remove(item);
	}

	public void Clear()
	{
		dictionary.Clear();
	}

	void ICollection<KeyValuePair<TKey, TValue>>.Clear()
	{
		//ILSpy generated this explicit interface implementation from .override directive in Clear
		this.Clear();
	}

	IEnumerator IEnumerable.GetEnumerator()
	{
		return GetEnumerator();
	}
}
