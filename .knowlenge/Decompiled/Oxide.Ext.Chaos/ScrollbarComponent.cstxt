using System.Runtime.CompilerServices;
using Newtonsoft.Json;
using Oxide.Ext.Chaos.UIFramework;

public class ScrollbarComponent : BaseCuiComponent
{
	public class Style
	{
		public bool Invert;

		public bool AutoHide;

		public float Size = 20f;

		public string HandleSprite = global::<Module>.\u200e\u206a\u200b\u200e\u206d\u202c\u200e\u206b\u202e\u206e\u202b\u206d\u200e\u206e\u200c\u206c\u206c\u200e\u206e\u200f\u200f\u200f\u206e\u200f\u202c\u200c\u200c\u200e\u206e\u202b\u200e\u206c\u202c\u202e\u200e\u206f\u206f\u206f\u200d\u202a\u202e<string>(1938408626);

		public string TrackSprite = global::<Module>.\u202d\u200e\u200b\u200c\u202c\u202d\u202a\u206a\u202c\u200e\u206f\u202e\u206d\u200f\u206a\u200c\u202c\u206d\u200b\u200e\u202a\u200c\u206f\u202a\u202a\u202b\u200f\u200d\u200e\u202b\u206e\u206c\u202e\u202c\u206f\u206d\u206c\u202a\u206d\u202e<string>(-2098939148);

		public Color HandleColor = DefaultHandleColor;

		public Color HighlightColor = DefaultHighlightColor;

		public Color PressedColor = DefaultPressedColor;

		public Color TrackColor = DefaultTrackColor;

		[MethodImpl(MethodImplOptions.NoInlining)]
		public Style()
		{
		}
	}

	private static Color DefaultHandleColor = new Color(0.15f, 0.15f, 0.15f);

	private static Color DefaultHighlightColor;

	private static Color DefaultPressedColor;

	private static Color DefaultTrackColor;

	public bool Invert { get; set; }

	public bool AutoHide { get; set; }

	public float Size { get; set; } = 20f;

	public string HandleSprite { get; set; } = global::<Module>.\u202d\u200e\u200b\u200c\u202c\u202d\u202a\u206a\u202c\u200e\u206f\u202e\u206d\u200f\u206a\u200c\u202c\u206d\u200b\u200e\u202a\u200c\u206f\u202a\u202a\u202b\u200f\u200d\u200e\u202b\u206e\u206c\u202e\u202c\u206f\u206d\u206c\u202a\u206d\u202e<string>(-467298810);

	public string TrackSprite { get; set; } = global::<Module>.\u202c\u200d\u206b\u200c\u206e\u206e\u202d\u202e\u206f\u206b\u206d\u202d\u206f\u206a\u202e\u202d\u200f\u206b\u200f\u206f\u206b\u202d\u206d\u206a\u206b\u200c\u206e\u202a\u202d\u202d\u206f\u200f\u202d\u206e\u206a\u202a\u200b\u200b\u206a\u206a\u202e<string>(-1733520179);

	public Color HandleColor { get; set; } = DefaultHandleColor;

	public Color HighlightColor { get; set; } = DefaultHighlightColor;

	public Color PressedColor { get; set; } = DefaultPressedColor;

	public Color TrackColor { get; set; } = DefaultTrackColor;

	[MethodImpl(MethodImplOptions.NoInlining)]
	public ScrollbarComponent()
	{
		base.IsConstant = true;
	}

	public void WithStyle(Style style)
	{
		Invert = style.Invert;
		while (true)
		{
			int num = -1192249539;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ -1226023538)) % 10)
				{
				case 4u:
					break;
				default:
					return;
				case 0u:
					TrackColor = style.TrackColor;
					num = (int)(num2 * 843932039) ^ -1128621620;
					continue;
				case 1u:
					Size = style.Size;
					num = (int)((num2 * 1012792772) ^ 0x64596577);
					continue;
				case 9u:
					HandleColor = style.HandleColor;
					num = (int)(num2 * 2007049923) ^ -704261375;
					continue;
				case 2u:
					HighlightColor = style.HighlightColor;
					num = ((int)num2 * -842618303) ^ 0x32889C0C;
					continue;
				case 5u:
					AutoHide = style.AutoHide;
					num = ((int)num2 * -2040017082) ^ -1502743123;
					continue;
				case 7u:
					HandleSprite = style.HandleSprite;
					num = ((int)num2 * -663203849) ^ 0x7036CFE2;
					continue;
				case 8u:
					PressedColor = style.PressedColor;
					num = ((int)num2 * -696977263) ^ 0x122B176C;
					continue;
				case 3u:
					TrackSprite = style.TrackSprite;
					num = (int)((num2 * 115107233) ^ 0x70A973C6);
					continue;
				case 6u:
					return;
				}
				break;
			}
		}
	}

	public override void WriteJson(JsonWriter jsonWriter)
	{
		jsonWriter.WriteStartObject();
		if (Invert)
		{
			jsonWriter.WritePropertyName("invert");
			jsonWriter.WriteValue(Invert);
		}
		if (AutoHide)
		{
			jsonWriter.WritePropertyName("autoHide");
			jsonWriter.WriteValue(AutoHide);
		}
		if (Size != 20f)
		{
			jsonWriter.WritePropertyName("size");
			jsonWriter.WriteValue(Size);
		}
		if (HandleSprite != "assets/content/ui/ui.rounded.tga")
		{
			jsonWriter.WritePropertyName("handleSprite");
			jsonWriter.WriteValue(HandleSprite);
		}
		if (TrackSprite != "assets/content/ui/ui.background.tile.psd")
		{
			jsonWriter.WritePropertyName("trackSprite");
			jsonWriter.WriteValue(TrackSprite);
		}
		if (HandleColor != DefaultHandleColor)
		{
			jsonWriter.WritePropertyName("handleColor");
			jsonWriter.WriteValue(HandleColor.ToString("1 1 1 1"));
		}
		if (HighlightColor != DefaultHighlightColor)
		{
			jsonWriter.WritePropertyName("highlightColor");
			jsonWriter.WriteValue(HighlightColor.ToString("1 1 1 1"));
		}
		if (PressedColor != DefaultPressedColor)
		{
			jsonWriter.WritePropertyName("pressedColor");
			jsonWriter.WriteValue(PressedColor.ToString("1 1 1 1"));
		}
		if (TrackColor != DefaultTrackColor)
		{
			jsonWriter.WritePropertyName("trackColor");
			jsonWriter.WriteValue(TrackColor.ToString("1 1 1 1"));
		}
		jsonWriter.WriteEndObject();
	}

	public override void OnEnterPool()
	{
		Invert = false;
		AutoHide = false;
		Size = 20f;
		HandleSprite = "assets/content/ui/ui.rounded.tga";
		TrackSprite = "assets/content/ui/ui.background.tile.psd";
		HandleColor = DefaultHandleColor;
		HighlightColor = DefaultHighlightColor;
		PressedColor = DefaultPressedColor;
		TrackColor = DefaultTrackColor;
	}

	static ScrollbarComponent()
	{
		while (true)
		{
			int num = -447152582;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ -1991012045)) % 3)
				{
				case 0u:
					break;
				case 2u:
					goto IL_0040;
				default:
					DefaultPressedColor = new Color(0.2f, 0.2f, 0.2f);
					DefaultTrackColor = new Color(0.09f, 0.09f, 0.09f);
					return;
				}
				break;
				IL_0040:
				DefaultHighlightColor = new Color(0.17f, 0.17f, 0.17f);
				num = (int)((num2 * 523636529) ^ 0xF47E8FA);
			}
		}
	}
}
