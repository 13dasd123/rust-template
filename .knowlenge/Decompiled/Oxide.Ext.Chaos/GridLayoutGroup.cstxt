using Oxide.Ext.Chaos.UIFramework;
using UnityEngine;

public class GridLayoutGroup : BaseLayoutGroup
{
	public GridLayoutGroup(int columns, int rows, Axis axis)
		: base(columns, rows, axis)
	{
	}

	public GridLayoutGroup(Axis axis)
		: base(1, 1, axis)
	{
	}

	public override void ResizeContentToFit(RectTransformComponent transform, int numberOfItems)
	{
		m_Size = m_FixedSize;
		float num5 = default(float);
		while (true)
		{
			int num = 1246032184;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ 0x662B8822)) % 14)
				{
				case 8u:
					break;
				default:
					return;
				case 6u:
				{
					int num8;
					int num9;
					if (!(m_Size.x > 0f))
					{
						num8 = -1571432621;
						num9 = num8;
					}
					else
					{
						num8 = -790803083;
						num9 = num8;
					}
					num = num8 ^ ((int)num2 * -1457736732);
					continue;
				}
				case 3u:
					num = (int)((num2 * 1867426715) ^ 0x5FF71984);
					continue;
				case 5u:
					m_Columns = MaxInSpace(m_ViewportSize.x - (m_Padding.Left + m_Padding.Right), m_Size.x, m_Spacing.Horizontal);
					m_Rows = Mathf.CeilToInt((float)numberOfItems / (float)m_Columns);
					num = (int)(num2 * 1538345707) ^ -730458156;
					continue;
				case 1u:
					num5 = Mathf.Max(m_ViewportSize.y, m_Padding.Vertical + (float)m_Rows * m_Size.y + (float)Mathf.Max(m_Rows - 1, 0) * m_Spacing.Vertical);
					num = (int)(num2 * 917065888) ^ -910134468;
					continue;
				case 7u:
				{
					m_Columns = Mathf.CeilToInt((float)numberOfItems / (float)m_Rows);
					float num4 = Mathf.Max(m_ViewportSize.x, m_Padding.Horizontal + (float)m_Columns * m_Size.x + (float)Mathf.Max(m_Columns - 1, 0) * m_Spacing.Horizontal);
					transform.Set(new Offset(0f, 0f, num4 - m_ViewportSize.x, 0f));
					m_Area = new Area(0f - num4 * 0.5f, 0f - m_ViewportSize.y * 0.5f, num4 * 0.5f, m_ViewportSize.y * 0.5f);
					num = (int)(num2 * 177359730) ^ -1147154485;
					continue;
				}
				case 9u:
					m_Offset = new Vector2(m_Area.Width - (float)m_Columns * m_Size.x - (float)(m_Columns - 1) * m_Spacing.Horizontal - (m_Padding.Left + m_Padding.Right), 0f - (m_Area.Height - (float)m_Rows * m_Size.y - (float)(m_Rows - 1) * m_Spacing.Vertical - (m_Padding.Bottom + m_Padding.Top)));
					num = 1357977256;
					continue;
				case 10u:
					m_Area = new Area(0f - m_ViewportSize.x * 0.5f, 0f - num5 * 0.5f, m_ViewportSize.x * 0.5f, num5 * 0.5f);
					num = (int)(num2 * 267473797) ^ -153238353;
					continue;
				case 12u:
					transform.Set(new Offset(0f, 0f - (num5 - m_ViewportSize.y), 0f, 0f));
					num = (int)((num2 * 1068674585) ^ 0xB6866D2);
					continue;
				case 13u:
					return;
				case 11u:
				{
					int num6;
					int num7;
					if (m_Size.y <= 0f)
					{
						num6 = 636537800;
						num7 = num6;
					}
					else
					{
						num6 = 460285959;
						num7 = num6;
					}
					num = num6 ^ (int)(num2 * 1105243341);
					continue;
				}
				case 4u:
					m_Rows = MaxInSpace(m_ViewportSize.y - (m_Padding.Top + m_Padding.Bottom), m_Size.y, m_Spacing.Vertical);
					num = 276366545;
					continue;
				case 2u:
				{
					int num3;
					if (m_Axis != 0)
					{
						num = 1600468874;
						num3 = num;
					}
					else
					{
						num = 1552563923;
						num3 = num;
					}
					continue;
				}
				case 0u:
					return;
				}
				break;
			}
		}
	}
}
