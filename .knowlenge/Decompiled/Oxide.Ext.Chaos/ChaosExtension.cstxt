using System;
using Oxide.Core;
using Oxide.Core.Extensions;
using Oxide.Core.Plugins;
using Oxide.Ext.Chaos;

public class ChaosExtension : Extension
{
	private ChaosLoader m_ChaosLoader;

	public override string Name => "Chaos";

	public override string Author => "k1lly0u";

	public override VersionNumber Version => CurrentVersion;

	public static VersionNumber CurrentVersion => new VersionNumber(1, 0, 29);

	public override bool SupportsReloading => true;

	public ChaosExtension(ExtensionManager manager)
		: base(manager)
	{
	}

	public override void Load()
	{
		m_ChaosLoader = new ChaosLoader();
		base.Manager.RegisterPluginLoader(m_ChaosLoader);
	}

	public override void OnModLoad()
	{
		AppDomain.CurrentDomain.UnhandledException += delegate(object sender, UnhandledExceptionEventArgs exception)
		{
			Interface.Oxide.LogException("An exception was thrown!", exception.ExceptionObject as Exception);
		};
	}

	public void LoadCorePlugins()
	{
		Type[] corePlugins = m_ChaosLoader.CorePlugins;
		foreach (Type type in corePlugins)
		{
			try
			{
				Plugin plugin = (Plugin)Activator.CreateInstance(type);
				plugin.IsCorePlugin = true;
				Interface.Oxide.PluginLoaded(plugin);
			}
			catch (Exception ex)
			{
				Interface.Oxide.LogException("Could not load core plugin " + type.Name, ex);
			}
		}
	}
}
