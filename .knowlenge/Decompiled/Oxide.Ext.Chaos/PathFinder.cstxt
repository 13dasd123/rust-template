using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using Facepunch;
using Oxide.Ext.Chaos.AStar;
using UnityEngine;

public class PathFinder : MonoBehaviour
{
	private IPathFinder _plugin;

	private PathFinderConfig _config;

	private Stopwatch _stopwatch = new Stopwatch();

	private double _totalElapsedMs;

	private Heap<GridNode> _openSet;

	private readonly HashSet<GridNode> _closedSet = new HashSet<GridNode>();

	private List<GridNode> _neighbours = new List<GridNode>();

	private readonly Queue<PathRequest> _requestQueue = new Queue<PathRequest>();

	private PathRequest _currentRequest;

	private Coroutine _currentTask;

	private const float MAX_MS = 3f;

	public WorldGrid<GridNode> Grid { get; set; }

	public bool IsCalculating { get; private set; }

	internal void Initialize(IPathFinder plugin, PathFinderConfig config)
	{
		_plugin = plugin;
		_config = config;
		Grid = new WorldGrid<GridNode>(Mathf.RoundToInt(config.WorldSize / config.CellSize), config.CellSize);
		_openSet = new Heap<GridNode>(Grid.\u202c\u200b\u202a\u200d\u200d\u200c\u202c\u200c\u200f\u202d\u202a\u206d\u200b\u200d\u206f\u200f\u202a\u200e\u202d\u200c\u202a\u206d\u202e\u200b\u206a\u200b\u206a\u202c\u200f\u200b\u206d\u202a\u202b\u202d\u206f\u206a\u206d\u202c\u206c\u206a\u202e * Grid.\u202c\u200b\u202a\u200d\u200d\u200c\u202c\u200c\u200f\u202d\u202a\u206d\u200b\u200d\u206f\u200f\u202a\u200e\u202d\u200c\u202a\u206d\u202e\u200b\u206a\u200b\u206a\u202c\u200f\u200b\u206d\u202a\u202b\u202d\u206f\u206a\u206d\u202c\u206c\u206a\u202e);
		_currentTask = StartCoroutine(CreateCostMap());
	}

	private IEnumerator CreateCostMap()
	{
		IsCalculating = true;
		UnityEngine.Debug.Log("[" + _plugin.Name + "] Building A* cost map...");
		_stopwatch.Start();
		_totalElapsedMs = 0.0;
		for (int z = 0; z < Grid.\u202c\u200b\u202a\u200d\u200d\u200c\u202c\u200c\u200f\u202d\u202a\u206d\u200b\u200d\u206f\u200f\u202a\u200e\u202d\u200c\u202a\u206d\u202e\u200b\u206a\u200b\u206a\u202c\u200f\u200b\u206d\u202a\u202b\u202d\u206f\u206a\u206d\u202c\u206c\u206a\u202e; z++)
		{
			for (int x = 0; x < Grid.\u202c\u200b\u202a\u200d\u200d\u200c\u202c\u200c\u200f\u202d\u202a\u206d\u200b\u200d\u206f\u200f\u202a\u200e\u202d\u200c\u202a\u206d\u202e\u200b\u206a\u200b\u206a\u202c\u200f\u200b\u206d\u202a\u202b\u202d\u206f\u206a\u206d\u202c\u206c\u206a\u202e; x++)
			{
				if ((float)_stopwatch.Elapsed.Milliseconds > 3f)
				{
					_stopwatch.Stop();
					_totalElapsedMs += _stopwatch.Elapsed.Milliseconds;
					yield return null;
					_stopwatch.Reset();
					_stopwatch.Start();
				}
				Vector2Int vector2Int = new Vector2Int(x, z);
				Grid[x, z] = new GridNode(_config.NodeEvaluator, Grid.GridToWorldCoords(vector2Int), vector2Int, Grid.\u200b\u200c\u200c\u206d\u202c\u202d\u206a\u202b\u206e\u202e\u206b\u200f\u206d\u206a\u200f\u206c\u202e\u202d\u200b\u206d\u206b\u206f\u200e\u206f\u202b\u206c\u200c\u202a\u206b\u200b\u202a\u206d\u200c\u200c\u202b\u200b\u200b\u200d\u206c\u206d\u202e);
			}
		}
		_stopwatch.Stop();
		_totalElapsedMs += _stopwatch.Elapsed.Milliseconds;
		_stopwatch.Reset();
		UnityEngine.Debug.Log($"[{_plugin.Name}] Completed A* cost map in {Math.Round(_totalElapsedMs, 2)}ms");
		yield return StartCoroutine(_plugin.OnCostMapGenerated());
		if (_config.BlurRate > 0)
		{
			yield return StartCoroutine(BlurCostMap());
			yield break;
		}
		IsCalculating = false;
		_plugin.OnGridProcessed();
	}

	private IEnumerator BlurCostMap()
	{
		UnityEngine.Debug.Log("[" + _plugin.Name + "] Blending cost map...");
		_stopwatch.Start();
		_totalElapsedMs = 0.0;
		int kernalSize = _config.BlurRate * 2 + 1;
		int[][] horizontalCost = new int[Grid.\u202c\u200b\u202a\u200d\u200d\u200c\u202c\u200c\u200f\u202d\u202a\u206d\u200b\u200d\u206f\u200f\u202a\u200e\u202d\u200c\u202a\u206d\u202e\u200b\u206a\u200b\u206a\u202c\u200f\u200b\u206d\u202a\u202b\u202d\u206f\u206a\u206d\u202c\u206c\u206a\u202e][];
		for (int i = 0; i < Grid.\u202c\u200b\u202a\u200d\u200d\u200c\u202c\u200c\u200f\u202d\u202a\u206d\u200b\u200d\u206f\u200f\u202a\u200e\u202d\u200c\u202a\u206d\u202e\u200b\u206a\u200b\u206a\u202c\u200f\u200b\u206d\u202a\u202b\u202d\u206f\u206a\u206d\u202c\u206c\u206a\u202e; i++)
		{
			horizontalCost[i] = new int[Grid.\u202c\u200b\u202a\u200d\u200d\u200c\u202c\u200c\u200f\u202d\u202a\u206d\u200b\u200d\u206f\u200f\u202a\u200e\u202d\u200c\u202a\u206d\u202e\u200b\u206a\u200b\u206a\u202c\u200f\u200b\u206d\u202a\u202b\u202d\u206f\u206a\u206d\u202c\u206c\u206a\u202e];
		}
		int[][] verticalCost = new int[Grid.\u202c\u200b\u202a\u200d\u200d\u200c\u202c\u200c\u200f\u202d\u202a\u206d\u200b\u200d\u206f\u200f\u202a\u200e\u202d\u200c\u202a\u206d\u202e\u200b\u206a\u200b\u206a\u202c\u200f\u200b\u206d\u202a\u202b\u202d\u206f\u206a\u206d\u202c\u206c\u206a\u202e][];
		for (int j = 0; j < Grid.\u202c\u200b\u202a\u200d\u200d\u200c\u202c\u200c\u200f\u202d\u202a\u206d\u200b\u200d\u206f\u200f\u202a\u200e\u202d\u200c\u202a\u206d\u202e\u200b\u206a\u200b\u206a\u202c\u200f\u200b\u206d\u202a\u202b\u202d\u206f\u206a\u206d\u202c\u206c\u206a\u202e; j++)
		{
			verticalCost[j] = new int[Grid.\u202c\u200b\u202a\u200d\u200d\u200c\u202c\u200c\u200f\u202d\u202a\u206d\u200b\u200d\u206f\u200f\u202a\u200e\u202d\u200c\u202a\u206d\u202e\u200b\u206a\u200b\u206a\u202c\u200f\u200b\u206d\u202a\u202b\u202d\u206f\u206a\u206d\u202c\u206c\u206a\u202e];
		}
		for (int z = 0; z < Grid.\u202c\u200b\u202a\u200d\u200d\u200c\u202c\u200c\u200f\u202d\u202a\u206d\u200b\u200d\u206f\u200f\u202a\u200e\u202d\u200c\u202a\u206d\u202e\u200b\u206a\u200b\u206a\u202c\u200f\u200b\u206d\u202a\u202b\u202d\u206f\u206a\u206d\u202c\u206c\u206a\u202e; z++)
		{
			for (int k = -_config.BlurRate; k <= _config.BlurRate; k++)
			{
				int x = Mathf.Clamp(k, 0, _config.BlurRate);
				horizontalCost[0][z] += Grid[x, z].C_Cost;
			}
			for (int l = 1; l < Grid.\u202c\u200b\u202a\u200d\u200d\u200c\u202c\u200c\u200f\u202d\u202a\u206d\u200b\u200d\u206f\u200f\u202a\u200e\u202d\u200c\u202a\u206d\u202e\u200b\u206a\u200b\u206a\u202c\u200f\u200b\u206d\u202a\u202b\u202d\u206f\u206a\u206d\u202c\u206c\u206a\u202e; l++)
			{
				if ((float)_stopwatch.Elapsed.Milliseconds > 3f)
				{
					_stopwatch.Stop();
					_totalElapsedMs += _stopwatch.Elapsed.Milliseconds;
					yield return null;
					_stopwatch.Reset();
					_stopwatch.Start();
				}
				int x2 = Mathf.Clamp(l - _config.BlurRate - 1, 0, Grid.\u202c\u200b\u202a\u200d\u200d\u200c\u202c\u200c\u200f\u202d\u202a\u206d\u200b\u200d\u206f\u200f\u202a\u200e\u202d\u200c\u202a\u206d\u202e\u200b\u206a\u200b\u206a\u202c\u200f\u200b\u206d\u202a\u202b\u202d\u206f\u206a\u206d\u202c\u206c\u206a\u202e);
				int x3 = Mathf.Clamp(l + _config.BlurRate, 0, Grid.\u202c\u200b\u202a\u200d\u200d\u200c\u202c\u200c\u200f\u202d\u202a\u206d\u200b\u200d\u206f\u200f\u202a\u200e\u202d\u200c\u202a\u206d\u202e\u200b\u206a\u200b\u206a\u202c\u200f\u200b\u206d\u202a\u202b\u202d\u206f\u206a\u206d\u202c\u206c\u206a\u202e - 1);
				horizontalCost[l][z] = horizontalCost[l - 1][z] - Grid[x2, z].C_Cost + Grid[x3, z].C_Cost;
			}
		}
		for (int z = 0; z < Grid.\u202c\u200b\u202a\u200d\u200d\u200c\u202c\u200c\u200f\u202d\u202a\u206d\u200b\u200d\u206f\u200f\u202a\u200e\u202d\u200c\u202a\u206d\u202e\u200b\u206a\u200b\u206a\u202c\u200f\u200b\u206d\u202a\u202b\u202d\u206f\u206a\u206d\u202c\u206c\u206a\u202e; z++)
		{
			for (int m = -_config.BlurRate; m <= _config.BlurRate; m++)
			{
				int num = Mathf.Clamp(m, 0, _config.BlurRate);
				verticalCost[z][0] += horizontalCost[z][num];
			}
			for (int l = 1; l < Grid.\u202c\u200b\u202a\u200d\u200d\u200c\u202c\u200c\u200f\u202d\u202a\u206d\u200b\u200d\u206f\u200f\u202a\u200e\u202d\u200c\u202a\u206d\u202e\u200b\u206a\u200b\u206a\u202c\u200f\u200b\u206d\u202a\u202b\u202d\u206f\u206a\u206d\u202c\u206c\u206a\u202e; l++)
			{
				if ((float)_stopwatch.Elapsed.Milliseconds > 3f)
				{
					_stopwatch.Stop();
					_totalElapsedMs += _stopwatch.Elapsed.Milliseconds;
					yield return null;
					_stopwatch.Reset();
					_stopwatch.Start();
				}
				int num2 = Mathf.Clamp(l - _config.BlurRate - 1, 0, Grid.\u202c\u200b\u202a\u200d\u200d\u200c\u202c\u200c\u200f\u202d\u202a\u206d\u200b\u200d\u206f\u200f\u202a\u200e\u202d\u200c\u202a\u206d\u202e\u200b\u206a\u200b\u206a\u202c\u200f\u200b\u206d\u202a\u202b\u202d\u206f\u206a\u206d\u202c\u206c\u206a\u202e);
				int num3 = Mathf.Clamp(l + _config.BlurRate, 0, Grid.\u202c\u200b\u202a\u200d\u200d\u200c\u202c\u200c\u200f\u202d\u202a\u206d\u200b\u200d\u206f\u200f\u202a\u200e\u202d\u200c\u202a\u206d\u202e\u200b\u206a\u200b\u206a\u202c\u200f\u200b\u206d\u202a\u202b\u202d\u206f\u206a\u206d\u202c\u206c\u206a\u202e - 1);
				verticalCost[z][l] = verticalCost[z][l - 1] - horizontalCost[z][num2] + horizontalCost[z][num3];
				int c_Cost = Mathf.RoundToInt((float)verticalCost[z][l] / (float)(kernalSize * kernalSize));
				Grid[z, l].C_Cost = c_Cost;
			}
		}
		_stopwatch.Stop();
		_totalElapsedMs += _stopwatch.Elapsed.Milliseconds;
		_stopwatch.Reset();
		UnityEngine.Debug.Log($"[{_plugin.Name}] Completed blend map in {Math.Round(_totalElapsedMs, 2)}ms");
		IsCalculating = false;
		_plugin.OnGridProcessed();
	}

	internal void Destroy()
	{
		Grid = null;
		_stopwatch = null;
		UnityEngine.Object.Destroy(base.gameObject);
	}

	public void EvaluateGrid(PathRequest pathRequest)
	{
		if (IsCalculating)
		{
			_requestQueue.Enqueue(pathRequest);
		}
		ProcessRequest(pathRequest);
	}

	private void ProcessRequest(PathRequest pathRequest)
	{
		_currentRequest = pathRequest;
		if (Vector3.Distance(_currentRequest.From, _currentRequest.To) <= Grid.\u200b\u200c\u200c\u206d\u202c\u202d\u206a\u202b\u206e\u202e\u206b\u200f\u206d\u206a\u200f\u206c\u202e\u202d\u200b\u206d\u206b\u206f\u200e\u206f\u202b\u206c\u200c\u202a\u206b\u200b\u202a\u206d\u200c\u200c\u202b\u200b\u200b\u200d\u206c\u206d\u202e)
		{
			_currentRequest.OnPathFailed(PathFailedResult.Enum.SmallerThanGrid);
			if (_plugin.DebugMode)
			{
				UnityEngine.Debug.LogError("[A* - " + _plugin.Name + "] - The request path start and end positions are too close together");
			}
			if (_requestQueue.Count > 0)
			{
				ProcessRequest(_requestQueue.Dequeue());
			}
		}
		else
		{
			_currentTask = StartCoroutine(EvaluateGrid_Internal());
		}
	}

	private IEnumerator EvaluateGrid_Internal()
	{
		IsCalculating = true;
		if (_plugin.DebugMode)
		{
			UnityEngine.Debug.Log($"[A* - {_plugin.Name}] Finding a path from {_currentRequest.From} to {_currentRequest.To}");
		}
		_stopwatch.Start();
		_totalElapsedMs = 0.0;
		bool foundPath = false;
		GridNode startNode = FindOrCreateCell(_currentRequest.From);
		GridNode endNode = FindOrCreateCell(_currentRequest.To);
		_openSet.\u202c\u200b\u206f\u202d\u202e\u206c\u200f\u206c\u200e\u200d\u206c\u202c\u202b\u202d\u206c\u206b\u200e\u200c\u206c\u206d\u200f\u200c\u200e\u206c\u206e\u206c\u206c\u206e\u202c\u200c\u202d\u206d\u206e\u200f\u202a\u200c\u202c\u206a\u206c\u202a\u202e(startNode);
		while (_openSet.\u202a\u206b\u202a\u206a\u202c\u206c\u206e\u200c\u200c\u200f\u200e\u200f\u206d\u206c\u202b\u200b\u202a\u206d\u200d\u202b\u200c\u202e\u200b\u206a\u206a\u200d\u202e\u202e\u206a\u200c\u200c\u202b\u202a\u202a\u206a\u206f\u202d\u202a\u200b\u200e\u202e > 0)
		{
			if ((float)_stopwatch.Elapsed.Milliseconds > 3f)
			{
				_stopwatch.Stop();
				_totalElapsedMs += _stopwatch.Elapsed.Milliseconds;
				yield return null;
				_stopwatch.Reset();
				_stopwatch.Start();
			}
			GridNode gridNode = _openSet.\u206b\u202c\u200d\u206f\u202c\u200c\u202d\u206e\u206d\u200b\u202a\u200f\u206d\u200d\u202a\u200e\u202d\u206b\u202e\u206f\u200b\u202d\u202d\u202d\u206a\u206d\u202a\u200b\u206a\u206d\u200b\u200d\u206f\u200c\u200d\u206a\u202e\u200d\u200e\u206f\u202e();
			_closedSet.Add(gridNode);
			if (gridNode != endNode)
			{
				GetNeighbours(gridNode, ref _neighbours);
				for (int i = 0; i < _neighbours.Count; i++)
				{
					GridNode gridNode2 = _neighbours[i];
					if (gridNode2.IsBlocked || _closedSet.Contains(gridNode2))
					{
						continue;
					}
					int num = gridNode.\u206a\u202e\u200b\u200c\u206e\u202d\u200f\u200c\u202a\u206e\u200d\u200c\u200d\u206e\u202c\u206f\u206b\u200e\u200c\u206c\u200b\u206a\u202b\u200f\u202a\u202b\u200f\u202a\u202c\u202a\u200f\u200f\u202c\u202b\u202c\u200c\u202a\u202b\u200f\u202e + Heuristic(gridNode, gridNode2) + gridNode2.C_Cost;
					if (num < gridNode2.\u206a\u202e\u200b\u200c\u206e\u202d\u200f\u200c\u202a\u206e\u200d\u200c\u200d\u206e\u202c\u206f\u206b\u200e\u200c\u206c\u200b\u206a\u202b\u200f\u202a\u202b\u200f\u202a\u202c\u202a\u200f\u200f\u202c\u202b\u202c\u200c\u202a\u202b\u200f\u202e || !_openSet.\u206f\u200c\u200f\u202b\u206a\u202e\u206f\u206d\u202a\u202e\u200f\u202b\u200d\u206c\u206b\u200f\u206b\u200d\u200b\u200c\u200f\u202c\u202b\u206a\u202d\u206c\u202d\u202e\u200e\u200f\u200f\u206b\u206c\u206d\u206d\u200c\u200f\u206a\u202b\u206c\u202e(gridNode2))
					{
						gridNode2.\u206a\u202e\u200b\u200c\u206e\u202d\u200f\u200c\u202a\u206e\u200d\u200c\u200d\u206e\u202c\u206f\u206b\u200e\u200c\u206c\u200b\u206a\u202b\u200f\u202a\u202b\u200f\u202a\u202c\u202a\u200f\u200f\u202c\u202b\u202c\u200c\u202a\u202b\u200f\u202e = num;
						gridNode2.\u202e\u202d\u202d\u202e\u202c\u202b\u200b\u206f\u202e\u200d\u206b\u202a\u206c\u200e\u200d\u206f\u200e\u202c\u202c\u200c\u202d\u200d\u200d\u206d\u202b\u206f\u200d\u206c\u202d\u200f\u202e\u206f\u200d\u206c\u206c\u200b\u202e\u202c\u206c\u206d\u202e = Heuristic(gridNode2, endNode);
						gridNode2.\u206e\u200d\u200c\u200f\u206b\u200b\u200f\u202b\u200b\u202e\u206c\u200d\u202a\u206b\u202a\u200d\u206e\u206e\u206e\u202e\u206c\u206c\u200f\u206f\u200d\u200b\u206b\u202d\u206c\u206c\u202a\u202d\u206b\u200e\u200f\u206b\u206c\u206b\u200b\u206a\u202e = gridNode;
						if (!_openSet.\u206f\u200c\u200f\u202b\u206a\u202e\u206f\u206d\u202a\u202e\u200f\u202b\u200d\u206c\u206b\u200f\u206b\u200d\u200b\u200c\u200f\u202c\u202b\u206a\u202d\u206c\u202d\u202e\u200e\u200f\u200f\u206b\u206c\u206d\u206d\u200c\u200f\u206a\u202b\u206c\u202e(gridNode2))
						{
							_openSet.\u202c\u200b\u206f\u202d\u202e\u206c\u200f\u206c\u200e\u200d\u206c\u202c\u202b\u202d\u206c\u206b\u200e\u200c\u206c\u206d\u200f\u200c\u200e\u206c\u206e\u206c\u206c\u206e\u202c\u200c\u202d\u206d\u206e\u200f\u202a\u200c\u202c\u206a\u206c\u202a\u202e(gridNode2);
						}
						else
						{
							_openSet.\u202b\u202b\u202b\u206c\u206b\u206f\u202c\u202d\u202d\u200e\u202d\u202a\u202e\u200f\u202e\u202d\u206a\u206b\u202b\u206b\u200b\u206e\u202a\u200b\u206f\u202e\u200c\u200d\u202c\u200e\u206f\u202a\u206c\u202d\u206d\u206f\u202b\u206e\u206b\u206c\u202e(gridNode2);
						}
					}
				}
				continue;
			}
			foundPath = true;
			break;
		}
		if (!foundPath)
		{
			_stopwatch.Stop();
			_totalElapsedMs += _stopwatch.Elapsed.Milliseconds;
			_stopwatch.Reset();
			_currentRequest.OnPathFailed(PathFailedResult.Enum.Unreachable);
			if (_plugin.DebugMode)
			{
				UnityEngine.Debug.Log($"[A* - {_plugin.Name}] Grid evaluation failed to calculate a path ({Math.Round(_totalElapsedMs, 2)}ms)");
			}
		}
		else
		{
			_stopwatch.Stop();
			_totalElapsedMs += _stopwatch.Elapsed.Milliseconds;
			_stopwatch.Reset();
			List<Vector3> obj = _currentRequest.Results;
			GridNode gridNode3 = endNode;
			int num2 = (int)Mathf.Floor(_config.PathInterval / Grid.\u200b\u200c\u200c\u206d\u202c\u202d\u206a\u202b\u206e\u202e\u206b\u200f\u206d\u206a\u200f\u206c\u202e\u202d\u200b\u206d\u206b\u206f\u200e\u206f\u202b\u206c\u200c\u202a\u206b\u200b\u202a\u206d\u200c\u200c\u202b\u200b\u200b\u200d\u206c\u206d\u202e);
			int num3 = 0;
			while (gridNode3 != startNode)
			{
				if (num3 % num2 == 0)
				{
					obj.Add(gridNode3.Position);
				}
				num3++;
				gridNode3 = gridNode3.\u206e\u200d\u200c\u200f\u206b\u200b\u200f\u202b\u200b\u202e\u206c\u200d\u202a\u206b\u202a\u200d\u206e\u206e\u206e\u202e\u206c\u206c\u200f\u206f\u200d\u200b\u206b\u202d\u206c\u206c\u202a\u202d\u206b\u200e\u200f\u206b\u206c\u206b\u200b\u206a\u202e;
			}
			obj.Add(startNode.Position);
			if (obj.Count < 3)
			{
				_currentRequest.OnPathFailed(PathFailedResult.Enum.NotEnoughNodes);
				if (_plugin.DebugMode)
				{
					UnityEngine.Debug.Log($"[A* - {_plugin.Name}] Grid evaluation failed. Not enough nodes to create a path ({Math.Round(_totalElapsedMs, 2)}ms)");
				}
				Pool.FreeList(ref obj);
			}
			else
			{
				if (_plugin.DebugMode)
				{
					UnityEngine.Debug.Log($"[A* - {_plugin.Name}] Grid evaluation success ({Math.Round(_totalElapsedMs, 2)}ms)");
				}
				obj.Reverse();
				obj.ChaikinSmooth(2);
				_currentRequest.OnPathGenerated();
			}
		}
		Reset();
		if (_requestQueue.Count > 0)
		{
			ProcessRequest(_requestQueue.Dequeue());
		}
		else
		{
			IsCalculating = false;
		}
	}

	public GridNode FindOrCreateCell(Vector3 position)
	{
		GridNode gridNode = Grid[position];
		if (gridNode == null)
		{
			GridNode gridNode3 = (Grid[position] = new GridNode(_config.NodeEvaluator, position, Grid.WorldToGridCoords(position), Grid.\u200b\u200c\u200c\u206d\u202c\u202d\u206a\u202b\u206e\u202e\u206b\u200f\u206d\u206a\u200f\u206c\u202e\u202d\u200b\u206d\u206b\u206f\u200e\u206f\u202b\u206c\u200c\u202a\u206b\u200b\u202a\u206d\u200c\u200c\u202b\u200b\u200b\u200d\u206c\u206d\u202e));
			gridNode = gridNode3;
		}
		return gridNode;
	}

	public GridNode FindOrCreateCell(Vector2Int coordinates)
	{
		GridNode gridNode = Grid[coordinates];
		if (gridNode == null)
		{
			GridNode gridNode3 = (Grid[coordinates] = new GridNode(_config.NodeEvaluator, Grid.GridToWorldCoords(coordinates), coordinates, Grid.\u200b\u200c\u200c\u206d\u202c\u202d\u206a\u202b\u206e\u202e\u206b\u200f\u206d\u206a\u200f\u206c\u202e\u202d\u200b\u206d\u206b\u206f\u200e\u206f\u202b\u206c\u200c\u202a\u206b\u200b\u202a\u206d\u200c\u200c\u202b\u200b\u200b\u200d\u206c\u206d\u202e));
			gridNode = gridNode3;
		}
		return gridNode;
	}

	public GridNode FindOrCreateCell(int x, int z)
	{
		Vector2Int coordinates = new Vector2Int(x, z);
		return FindOrCreateCell(coordinates);
	}

	public void GetNodesInRadius(Vector3 position, float radius, ref List<GridNode> list)
	{
		int num = Mathf.CeilToInt(radius / Grid.\u200b\u200c\u200c\u206d\u202c\u202d\u206a\u202b\u206e\u202e\u206b\u200f\u206d\u206a\u200f\u206c\u202e\u202d\u200b\u206d\u206b\u206f\u200e\u206f\u202b\u206c\u200c\u202a\u206b\u200b\u202a\u206d\u200c\u200c\u202b\u200b\u200b\u200d\u206c\u206d\u202e);
		GridNode gridNode = FindOrCreateCell(position);
		Vector2Int vector2Int = new Vector2Int(Mathf.Clamp(gridNode.X - num, 0, Grid.\u202c\u200b\u202a\u200d\u200d\u200c\u202c\u200c\u200f\u202d\u202a\u206d\u200b\u200d\u206f\u200f\u202a\u200e\u202d\u200c\u202a\u206d\u202e\u200b\u206a\u200b\u206a\u202c\u200f\u200b\u206d\u202a\u202b\u202d\u206f\u206a\u206d\u202c\u206c\u206a\u202e - 1), Mathf.Clamp(gridNode.Z - num, 0, Grid.\u202c\u200b\u202a\u200d\u200d\u200c\u202c\u200c\u200f\u202d\u202a\u206d\u200b\u200d\u206f\u200f\u202a\u200e\u202d\u200c\u202a\u206d\u202e\u200b\u206a\u200b\u206a\u202c\u200f\u200b\u206d\u202a\u202b\u202d\u206f\u206a\u206d\u202c\u206c\u206a\u202e - 1));
		Vector2Int vector2Int2 = new Vector2Int(Mathf.Clamp(gridNode.X + num, 0, Grid.\u202c\u200b\u202a\u200d\u200d\u200c\u202c\u200c\u200f\u202d\u202a\u206d\u200b\u200d\u206f\u200f\u202a\u200e\u202d\u200c\u202a\u206d\u202e\u200b\u206a\u200b\u206a\u202c\u200f\u200b\u206d\u202a\u202b\u202d\u206f\u206a\u206d\u202c\u206c\u206a\u202e - 1), Mathf.Clamp(gridNode.Z + num, 0, Grid.\u202c\u200b\u202a\u200d\u200d\u200c\u202c\u200c\u200f\u202d\u202a\u206d\u200b\u200d\u206f\u200f\u202a\u200e\u202d\u200c\u202a\u206d\u202e\u200b\u206a\u200b\u206a\u202c\u200f\u200b\u206d\u202a\u202b\u202d\u206f\u206a\u206d\u202c\u206c\u206a\u202e - 1));
		for (int i = vector2Int.y; i <= vector2Int2.y; i++)
		{
			for (int j = vector2Int.x; j <= vector2Int2.x; j++)
			{
				GridNode gridNode2 = FindOrCreateCell(j, i);
				if (Vector3.Distance(gridNode2.Position, position) <= radius)
				{
					list.Add(gridNode2);
				}
			}
		}
	}

	private void GetNeighbours(GridNode node, ref List<GridNode> list)
	{
		list.Clear();
		for (int i = -1; i <= 1; i++)
		{
			for (int j = -1; j <= 1; j++)
			{
				if (i == 0 && j == 0)
				{
					continue;
				}
				int num = node.X + i;
				int num2 = node.Z + j;
				if (num >= 0 && num2 >= 0 && num < Grid.\u202c\u200b\u202a\u200d\u200d\u200c\u202c\u200c\u200f\u202d\u202a\u206d\u200b\u200d\u206f\u200f\u202a\u200e\u202d\u200c\u202a\u206d\u202e\u200b\u206a\u200b\u206a\u202c\u200f\u200b\u206d\u202a\u202b\u202d\u206f\u206a\u206d\u202c\u206c\u206a\u202e && num2 < Grid.\u202c\u200b\u202a\u200d\u200d\u200c\u202c\u200c\u200f\u202d\u202a\u206d\u200b\u200d\u206f\u200f\u202a\u200e\u202d\u200c\u202a\u206d\u202e\u200b\u206a\u200b\u206a\u202c\u200f\u200b\u206d\u202a\u202b\u202d\u206f\u206a\u206d\u202c\u206c\u206a\u202e)
				{
					GridNode gridNode = FindOrCreateCell(node.X + i, node.Z + j);
					if (gridNode != null)
					{
						list.Add(gridNode);
					}
				}
			}
		}
	}

	private int Heuristic(GridNode a, GridNode b)
	{
		int a2 = Mathf.Abs(a.X - b.X);
		int b2 = Mathf.Abs(a.Z - b.Z);
		Mathf.FloorToInt(Math.Abs(a.Position.y - b.Position.y));
		return 10 * Mathf.Max(a2, b2) + 4 * Mathf.Min(a2, b2);
	}

	private void Reset()
	{
		Parallel.For(0, Grid.\u202c\u200b\u202a\u200d\u200d\u200c\u202c\u200c\u200f\u202d\u202a\u206d\u200b\u200d\u206f\u200f\u202a\u200e\u202d\u200c\u202a\u206d\u202e\u200b\u206a\u200b\u206a\u202c\u200f\u200b\u206d\u202a\u202b\u202d\u206f\u206a\u206d\u202c\u206c\u206a\u202e, delegate(int z)
		{
			for (int i = 0; i < Grid.\u202c\u200b\u202a\u200d\u200d\u200c\u202c\u200c\u200f\u202d\u202a\u206d\u200b\u200d\u206f\u200f\u202a\u200e\u202d\u200c\u202a\u206d\u202e\u200b\u206a\u200b\u206a\u202c\u200f\u200b\u206d\u202a\u202b\u202d\u206f\u206a\u206d\u202c\u206c\u206a\u202e; i++)
			{
				Grid[i, z]?.\u202d\u202d\u200f\u202a\u200d\u200e\u202e\u206d\u202b\u200b\u206f\u200f\u200e\u202c\u200d\u206a\u202d\u206f\u202b\u202b\u200d\u206b\u202b\u202a\u206a\u202e\u200f\u206b\u202e\u200c\u206c\u200b\u202b\u206b\u200c\u206b\u200e\u206a\u202a\u202e();
			}
		});
		_openSet.\u206f\u202a\u200e\u206c\u200d\u206c\u206e\u202a\u202d\u202a\u206d\u202c\u206c\u206c\u202c\u206a\u202a\u206f\u206e\u206f\u200f\u206a\u200c\u200b\u206e\u202c\u202a\u206f\u200d\u206f\u202e\u200f\u206b\u206f\u200b\u206c\u206c\u206e\u206d\u206e\u202e();
		_closedSet.Clear();
	}
}
