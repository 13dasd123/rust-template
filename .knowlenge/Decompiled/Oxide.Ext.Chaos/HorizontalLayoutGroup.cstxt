using Oxide.Ext.Chaos.UIFramework;
using UnityEngine;

public class HorizontalLayoutGroup : BaseLayoutGroup
{
	public HorizontalLayoutGroup(int columns)
		: base(columns, 1, Axis.Horizontal)
	{
	}

	public HorizontalLayoutGroup()
		: base(1, 1, Axis.Horizontal)
	{
	}

	public override void RecalculateSize()
	{
		base.RecalculateSize();
		m_Rows = 1;
	}

	public override void ResizeContentToFit(RectTransformComponent transform, int numberOfItems)
	{
		m_Size = m_FixedSize;
		float num4 = default(float);
		float num3 = default(float);
		while (true)
		{
			int num = 1909875757;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ 0x70F10F40)) % 10)
				{
				case 4u:
					break;
				default:
					return;
				case 1u:
				{
					int num7;
					int num8;
					if (!(m_Size.x <= 0f))
					{
						num7 = 2019558782;
						num8 = num7;
					}
					else
					{
						num7 = 2037225665;
						num8 = num7;
					}
					num = num7 ^ (int)(num2 * 290944975);
					continue;
				}
				case 7u:
				{
					int num5;
					int num6;
					if (m_Size.y <= 0f)
					{
						num5 = 1972211751;
						num6 = num5;
					}
					else
					{
						num5 = 1685749568;
						num6 = num5;
					}
					num = num5 ^ (int)(num2 * 1568094409);
					continue;
				}
				case 3u:
					num4 = Mathf.Max(m_ViewportSize.x, m_Padding.Horizontal + (float)numberOfItems * m_Size.x + (float)Mathf.Max(numberOfItems - 1, 0) * m_Spacing.Horizontal);
					num = 1874723666;
					continue;
				case 0u:
					num3 = Mathf.Max(m_ViewportSize.y, m_Padding.Vertical + m_Size.y);
					num = ((int)num2 * -566205489) ^ -1431983052;
					continue;
				case 9u:
					m_Area = new Area(0f - num4 * 0.5f, 0f - m_ViewportSize.y * 0.5f, num4 * 0.5f, m_ViewportSize.y * 0.5f);
					num = (int)((num2 * 1128729045) ^ 0x6E1C657);
					continue;
				case 6u:
					transform.Set(new Offset(0f, 0f - (num3 - m_ViewportSize.y), num4 - m_ViewportSize.x, 0f));
					m_Columns = numberOfItems;
					num = (int)(num2 * 1062994532) ^ -1526995431;
					continue;
				case 2u:
					return;
				case 8u:
					m_Offset = new Vector2(m_Area.Width - (float)m_Columns * m_Size.x - (float)(m_Columns - 1) * m_Spacing.Horizontal - (m_Padding.Left + m_Padding.Right), 0f - (m_Area.Height - (float)m_Rows * m_Size.y - (float)(m_Rows - 1) * m_Spacing.Vertical - (m_Padding.Bottom + m_Padding.Top)));
					num = ((int)num2 * -1594698716) ^ -1461315457;
					continue;
				case 5u:
					return;
				}
				break;
			}
		}
	}
}
