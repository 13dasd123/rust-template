using System;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Oxide.Core;
using Oxide.Core.Configuration;
using Oxide.Ext.Chaos.Json;

public class Datafile<T>
{
	private readonly string name;

	protected DynamicConfigFile dynamicConfigFile;

	public T Data;

	public Datafile(string name, params JsonConverter[] converters)
	{
		this.name = name;
		dynamicConfigFile = Interface.Oxide.DataFileSystem.GetFile(name);
		dynamicConfigFile.Settings.Converters.Clear();
		dynamicConfigFile.Settings.Converters.Add(new HashSetConverter());
		dynamicConfigFile.Settings.Converters.Add(new KeyValuesConverter());
		dynamicConfigFile.Settings.Converters.Add(new FormerlySerializedAsConverter());
		if (converters != null)
		{
			foreach (JsonConverter item in converters)
			{
				dynamicConfigFile.Settings.Converters.Add(item);
			}
		}
		Load();
	}

	public virtual void Load()
	{
		try
		{
			Data = dynamicConfigFile.ReadObject<T>();
		}
		finally
		{
			if (Data == null)
			{
				Data = (T)Activator.CreateInstance(typeof(T));
			}
		}
	}

	public virtual void Save()
	{
		dynamicConfigFile.WriteObject(Data);
	}
}
