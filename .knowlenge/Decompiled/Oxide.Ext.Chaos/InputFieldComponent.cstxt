using System;
using Newtonsoft.Json;
using Oxide.Ext.Chaos.UIFramework;
using UnityEngine;
using UnityEngine.UI;

public class InputFieldComponent : BaseCuiComponent, ICuiColorComponent, ICuiFontComponent, ICuiCommandComponent, ICuiGraphicComponent, IStyleComponent
{
	public Oxide.Ext.Chaos.UIFramework.Color Color { get; set; } = Oxide.Ext.Chaos.UIFramework.Color.White;

	public string Text { get; set; }

	public Oxide.Ext.Chaos.UIFramework.Font Font { get; set; }

	public int FontSize { get; set; } = 14;

	public TextAnchor Alignment { get; set; }

	public string Command { get; set; }

	public int CharacterLimit { get; set; }

	public bool ReadOnly { get; set; }

	public InputField.LineType LineType { get; set; }

	public bool IsPassword { get; set; }

	public bool NeedsKeyboard { get; set; }

	public bool HudMenuInput { get; set; }

	public bool AutoFocus { get; set; }

	public float FadeIn { get; set; }

	public void SetCommand(CommandCallbackHandler commandCallbackHandler, Action<ConsoleSystem.Arg> callback, string identifier = "")
	{
		Command = commandCallbackHandler.RegisterCommand(callback, null, identifier);
	}

	void ICuiCommandComponent.SetCommand(CommandCallbackHandler commandCallbackHandler, Action<ConsoleSystem.Arg> callback, string identifier = "")
	{
		//ILSpy generated this explicit interface implementation from .override directive in SetCommand
		this.SetCommand(commandCallbackHandler, callback, identifier);
	}

	public void SetSecureCommand(CommandCallbackHandler commandCallbackHandler, Action<ConsoleSystem.Arg> callback, ulong userId, string identifier = "")
	{
		Command = commandCallbackHandler.RegisterSecureCommand(callback, userId, identifier);
	}

	public BaseCuiComponent WithStyle(Style style)
	{
		Color = style.FontColor;
		while (true)
		{
			int num = 1187407078;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ 0x7325EF13)) % 3)
				{
				case 2u:
					break;
				case 1u:
					goto IL_002e;
				default:
					LineType = style.LineType;
					return this;
				}
				break;
				IL_002e:
				Font = style.Font;
				FontSize = style.FontSize;
				Alignment = style.Alignment;
				num = (int)((num2 * 709726616) ^ 0x337205FF);
			}
		}
	}

	BaseCuiComponent IStyleComponent.WithStyle(Style style)
	{
		//ILSpy generated this explicit interface implementation from .override directive in WithStyle
		return this.WithStyle(style);
	}

	public override void WriteJson(JsonWriter jsonWriter)
	{
		jsonWriter.WriteStartObject();
		jsonWriter.WritePropertyName("type");
		jsonWriter.WriteValue("UnityEngine.UI.InputField");
		jsonWriter.WritePropertyName("text");
		jsonWriter.WriteValue(Text);
		if (Font != 0)
		{
			jsonWriter.WritePropertyName("font");
			jsonWriter.WriteValue(\u200c\u206b\u202a\u206a\u200f\u202a\u206e\u206a\u202c\u202b\u200e\u202b\u200e\u202a\u206a\u202d\u206d\u206c\u206e\u200f\u206d\u202e\u202e\u202c\u206d\u206f\u206b\u206c\u206d\u206f\u202d\u200f\u200d\u202e\u202c\u202b\u200f\u206e\u200b\u202a\u202e.\u206f\u200c\u206e\u200d\u200c\u206d\u200c\u202b\u200c\u202a\u200f\u206d\u206e\u200f\u200f\u202e\u202d\u202b\u200f\u206b\u202b\u206b\u206c\u202b\u206e\u206f\u202d\u206d\u206a\u202a\u200e\u202e\u206b\u206d\u206c\u206d\u202b\u200b\u202e\u200c\u202e(Font));
		}
		if (FontSize != 14)
		{
			jsonWriter.WritePropertyName("fontSize");
			jsonWriter.WriteValue(FontSize);
		}
		if (Alignment != 0)
		{
			jsonWriter.WritePropertyName("align");
			jsonWriter.WriteValue(\u200c\u206b\u202a\u206a\u200f\u202a\u206e\u206a\u202c\u202b\u200e\u202b\u200e\u202a\u206a\u202d\u206d\u206c\u206e\u200f\u206d\u202e\u202e\u202c\u206d\u206f\u206b\u206c\u206d\u206f\u202d\u200f\u200d\u202e\u202c\u202b\u200f\u206e\u200b\u202a\u202e.\u200d\u206a\u202d\u202c\u200d\u202e\u200e\u200f\u202d\u200d\u200b\u206a\u200d\u206c\u202c\u206b\u206c\u200c\u202d\u200d\u200b\u202b\u202a\u206e\u200b\u200b\u200c\u206f\u202e\u202b\u206c\u206f\u200c\u200c\u206d\u202d\u202e\u200e\u202e\u202e\u202e(Alignment));
		}
		if (Color != Oxide.Ext.Chaos.UIFramework.Color.DEFAULT)
		{
			jsonWriter.WritePropertyName("color");
			jsonWriter.WriteValue(Color.ToString("1 1 1 1"));
		}
		if (!string.IsNullOrEmpty(Command))
		{
			jsonWriter.WritePropertyName("command");
			jsonWriter.WriteValue(Command);
		}
		if (CharacterLimit > 0)
		{
			jsonWriter.WritePropertyName("characterLimit");
			jsonWriter.WriteValue(CharacterLimit);
		}
		if (LineType != 0)
		{
			jsonWriter.WritePropertyName("lineType");
			jsonWriter.WriteValue(\u200c\u206b\u202a\u206a\u200f\u202a\u206e\u206a\u202c\u202b\u200e\u202b\u200e\u202a\u206a\u202d\u206d\u206c\u206e\u200f\u206d\u202e\u202e\u202c\u206d\u206f\u206b\u206c\u206d\u206f\u202d\u200f\u200d\u202e\u202c\u202b\u200f\u206e\u200b\u202a\u202e.\u200e\u202b\u206d\u202d\u206c\u200d\u206b\u202e\u200d\u206a\u202a\u200f\u200c\u202a\u202d\u206f\u206c\u206f\u206c\u202e\u200e\u202d\u202e\u202e\u206c\u206b\u202c\u200e\u206c\u200f\u202c\u202b\u206b\u202a\u206e\u200d\u202a\u200e\u200c\u206c\u202e(LineType));
		}
		if (ReadOnly)
		{
			jsonWriter.WritePropertyName("readOnly");
			jsonWriter.WriteValue(ReadOnly);
		}
		if (IsPassword)
		{
			jsonWriter.WritePropertyName("password");
			jsonWriter.WriteValue(IsPassword);
		}
		if (NeedsKeyboard)
		{
			jsonWriter.WritePropertyName("needsKeyboard");
			jsonWriter.WriteValue(NeedsKeyboard);
		}
		if (HudMenuInput)
		{
			jsonWriter.WritePropertyName("hudMenuInput");
			jsonWriter.WriteValue(HudMenuInput);
		}
		if (AutoFocus)
		{
			jsonWriter.WritePropertyName("autofocus");
			jsonWriter.WriteValue(AutoFocus);
		}
		if (FadeIn > 0f)
		{
			jsonWriter.WritePropertyName("fadeIn");
			jsonWriter.WriteValue(FadeIn);
		}
		jsonWriter.WriteEndObject();
	}

	public override void OnEnterPool()
	{
		Color = Oxide.Ext.Chaos.UIFramework.Color.DEFAULT;
		Command = null;
		Text = null;
		Font = Oxide.Ext.Chaos.UIFramework.Font.RobotoCondensedBold;
		FontSize = 14;
		Alignment = TextAnchor.UpperLeft;
		CharacterLimit = 0;
		ReadOnly = false;
		LineType = InputField.LineType.SingleLine;
		IsPassword = false;
		NeedsKeyboard = false;
		HudMenuInput = false;
		AutoFocus = false;
		FadeIn = 0f;
	}
}
