using System;
using Newtonsoft.Json;
using Oxide.Plugins;

public class EnumFlagConverter : JsonConverter
{
	public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
	{
		if (string.IsNullOrEmpty((string)reader.Value))
		{
			return 0;
		}
		string[] array = ((string)reader.Value).Replace(" ", "").Split(new char[1] { ',' });
		int num = 0;
		string[] names = Enum.GetNames(objectType);
		for (int i = 0; i < names.Length; i++)
		{
			if (array.Contains(names[i]))
			{
				num |= 1 << i;
			}
		}
		return num;
	}

	public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
	{
		string text = string.Empty;
		int num = (int)value;
		string[] names = Enum.GetNames(value.GetType());
		int num2 = 0;
		foreach (int value2 in Enum.GetValues(value.GetType()))
		{
			if ((num & value2) == value2)
			{
				text += (string.IsNullOrEmpty(text) ? names[num2] : (", " + names[num2]));
			}
			num2++;
		}
		writer.WriteValue(text);
	}

	public override bool CanConvert(Type objectType)
	{
		return true;
	}
}
