using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using Facepunch;
using Network;
using Newtonsoft.Json;
using Oxide.Ext.Chaos.UIFramework;
using UnityEngine;

public class ChaosUI
{
	private static StringBuilder m_StringBuilder = new StringBuilder();

	private const string MOUSE_LOCK = "chaosui.mouselock";

	private static BaseContainer m_MouseLocker;

	public static void Show(BasePlayer player, BaseContainer baseContainer, bool recycle = true)
	{
		string arg = ToJson(baseContainer);
		SendInfo sendInfo = default(SendInfo);
		sendInfo.connection = player.net.connection;
		SendInfo sendInfo2 = sendInfo;
		CommunityEntity.ServerInstance.ClientRPCEx(sendInfo2, null, "AddUI", arg);
		if (recycle)
		{
			UIContainerPool.Free(ref baseContainer);
		}
	}

	public static void CreateMouseKeyboardLock(BasePlayer player)
	{
		if (m_MouseLocker == null)
		{
			m_MouseLocker = BaseContainer.Create("chaosui.mouselock", Layer.Hud, Anchor.Center, Offset.Default).NeedsCursor().NeedsKeyboard()
				.DestroyExisting();
		}
		Show(player, m_MouseLocker, recycle: false);
	}

	public static void RemoveMouseKeyboardLock(BasePlayer player)
	{
		Destroy(player, "chaosui.mouselock");
	}

	public static void PerformanceTest(BaseContainer baseContainer, bool pool)
	{
		List<List<BaseCuiComponent>> obj = Pool.GetList<List<BaseCuiComponent>>();
		BaseContainer rootContainer = baseContainer.RootContainer;
		foreach (BaseContainer child in rootContainer.Children)
		{
			obj.Add(child.Element.Components);
		}
		int count = rootContainer.Children.Count;
		int num = obj.Sum((List<BaseCuiComponent> x) => x.Count);
		Stopwatch stopwatch = Stopwatch.StartNew();
		JsonConvert.SerializeObject(obj, Formatting.None, new JsonSerializerSettings
		{
			DefaultValueHandling = DefaultValueHandling.Ignore
		}).Replace("\\n", "\n");
		stopwatch.Stop();
		UnityEngine.Debug.Log($"(Oxide) JsonConvert serialization of {baseContainer.Children.Count} containers and {num} UI components took {stopwatch.Elapsed.TotalMilliseconds}ms");
		stopwatch.Reset();
		stopwatch.Start();
		ToJson(baseContainer);
		stopwatch.Stop();
		UnityEngine.Debug.Log($"ChaosUI serialization of {count} containers and {num} UI components took {stopwatch.Elapsed.TotalMilliseconds}ms");
		if (pool)
		{
			stopwatch.Reset();
			stopwatch.Start();
			UIContainerPool.Free(ref baseContainer);
			stopwatch.Stop();
			UnityEngine.Debug.Log($"Pooling {count} containers and {num} UI components took {stopwatch.Elapsed.TotalMilliseconds}ms");
		}
		Pool.FreeList(ref obj);
	}

	public static string ToJson(BaseContainer baseContainer)
	{
		m_StringBuilder.Clear();
		try
		{
			BaseContainer rootContainer = baseContainer.RootContainer;
			using (StringWriter textWriter = new StringWriter(m_StringBuilder))
			{
				using JsonWriter jsonWriter = new JsonTextWriter(textWriter);
				jsonWriter.WriteStartArray();
				foreach (BaseContainer child in rootContainer.Children)
				{
					child.Element.WriteJson(jsonWriter);
				}
				jsonWriter.WriteEndArray();
			}
			return m_StringBuilder.ToString().Replace("\\n", "\n");
		}
		catch (Exception ex)
		{
			UnityEngine.Debug.LogError(ex.Message + "\n" + ex.StackTrace);
			return string.Empty;
		}
	}

	public static void Destroy(BasePlayer player, string panel)
	{
		if ((bool)player && player.net != null)
		{
			CommunityEntity serverInstance = CommunityEntity.ServerInstance;
			SendInfo sendInfo = new SendInfo
			{
				connection = player.net.connection
			};
			serverInstance.ClientRPCEx(sendInfo, null, "DestroyUI", panel);
		}
	}

	public static void Destroy(BasePlayer player, BaseContainer baseContainer)
	{
		if ((bool)player && player.net != null)
		{
			CommunityEntity serverInstance = CommunityEntity.ServerInstance;
			SendInfo sendInfo = new SendInfo
			{
				connection = player.net.connection
			};
			serverInstance.ClientRPCEx(sendInfo, null, "DestroyUI", baseContainer.RootContainer.Element.Name);
		}
	}

	public static UpdateComponent<T> PrepareUpdate<T>(string name) where T : BaseCuiComponent
	{
		UpdateComponent<T> updateComponent = UIUpdatePool.Get<T>();
		updateComponent.Name = name;
		return updateComponent;
	}

	internal static void SendUpdate<T>(BasePlayer player, UpdateComponent<T> update) where T : BaseCuiComponent
	{
		m_StringBuilder.Clear();
		try
		{
			using (StringWriter textWriter = new StringWriter(m_StringBuilder))
			{
				using JsonWriter jsonWriter = new JsonTextWriter(textWriter);
				jsonWriter.WriteStartArray();
				jsonWriter.WriteStartObject();
				jsonWriter.WritePropertyName("name");
				jsonWriter.WriteValue(update.Name);
				jsonWriter.WritePropertyName("update");
				jsonWriter.WriteValue(value: true);
				jsonWriter.WritePropertyName("components");
				jsonWriter.WriteStartArray();
				update.Component.WriteJson(jsonWriter);
				jsonWriter.WriteEndArray();
				jsonWriter.WriteEndObject();
				jsonWriter.WriteEndArray();
			}
			string arg = m_StringBuilder.ToString();
			SendInfo sendInfo = default(SendInfo);
			sendInfo.connection = player.net.connection;
			SendInfo sendInfo2 = sendInfo;
			CommunityEntity.ServerInstance.ClientRPCEx(sendInfo2, null, "AddUI", arg);
			UIUpdatePool.Free(ref update);
		}
		catch (Exception ex)
		{
			UnityEngine.Debug.LogError(ex.Message + "\n" + ex.StackTrace);
		}
	}
}
