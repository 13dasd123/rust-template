using System.Collections.Generic;
using Newtonsoft.Json.Linq;

public class KitsHelper : BasePluginHelper
{
	public KitsHelper()
		: base("Kits")
	{
	}

	public object GiveKit(BasePlayer player, string name)
	{
		return Call<object>("GiveKit", new object[2] { player, name });
	}

	public bool IsKit(string name)
	{
		return Call<bool>("IsKit", new object[1] { name });
	}

	public void GetKitNames(List<string> list)
	{
		Call("GetKitNames", list);
	}

	public string GetKitImage(string name)
	{
		return Call<string>("GetKitImage", new object[1] { name });
	}

	public string GetKitDescription(string name)
	{
		return Call<string>("GetKitDescription", new object[1] { name });
	}

	public int GetKitMaxUses(string name)
	{
		return Call<int>("GetKitMaxUses", new object[1] { name });
	}

	public int GetKitCooldown(string name)
	{
		return Call<int>("GetKitCooldown", new object[1] { name });
	}

	public int GetPlayerKitUses(ulong playerId, string name)
	{
		return Call<int>("GetPlayerKitUses", new object[2] { playerId, name });
	}

	public void SetPlayerKitUses(ulong playerId, string name, int amount)
	{
		Call("SetPlayerKitUses", playerId, name, amount);
	}

	public double GetPlayerKitCooldown(ulong playerId, string name)
	{
		return Call<double>("GetPlayerKitCooldown", new object[2] { playerId, name });
	}

	public void SetPlayerCooldown(ulong playerId, string name, double seconds)
	{
		Call("SetPlayerCooldown", playerId, name, seconds);
	}

	public JObject GetKitObject(string name)
	{
		return Call<JObject>("GetKitObject", new object[1] { name });
	}

	public IEnumerable<Item> CreateKitItems(string name)
	{
		return Call<IEnumerable<Item>>("CreateKitItems", new object[1] { name });
	}
}
