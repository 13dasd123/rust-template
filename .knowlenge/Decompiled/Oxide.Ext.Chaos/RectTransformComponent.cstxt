using System.Runtime.CompilerServices;
using Newtonsoft.Json;
using Oxide.Ext.Chaos.UIFramework;
using Unity.Mathematics;

public class RectTransformComponent : BaseCuiComponent
{
	[CompilerGenerated]
	private Bounds \u206a\u200c\u200d\u202d\u200e\u202a\u206c\u200b\u200e\u206e\u202a\u206c\u206d\u202c\u202a\u206b\u206d\u202e\u206a\u202b\u202b\u200f\u202c\u200d\u202e\u202e\u206d\u200d\u202c\u202d\u202b\u202c\u202d\u200b\u200d\u206e\u200b\u200c\u200b\u206d\u202e = Bounds.one;

	[CompilerGenerated]
	private Bounds \u202d\u200e\u202d\u206c\u202b\u206a\u200d\u202b\u206f\u200e\u202a\u206f\u202b\u200c\u206d\u206c\u202b\u202b\u200c\u206b\u202d\u200d\u206b\u200e\u206f\u206c\u202b\u206b\u206d\u200e\u202c\u202c\u202a\u206a\u206a\u206b\u206b\u202a\u200f\u202a\u202e = Bounds.zero;

	[CompilerGenerated]
	private Bounds \u202b\u202d\u206e\u202e\u202c\u206f\u206a\u200e\u200d\u200c\u200b\u200d\u200e\u200e\u206f\u206e\u200e\u200c\u200f\u206c\u206b\u202a\u202b\u200d\u206e\u206e\u202e\u200d\u202c\u200f\u202c\u206e\u202e\u202a\u200f\u206e\u206d\u200d\u202a\u200d\u202e = Bounds.one;

	[CompilerGenerated]
	private Bounds \u206b\u206c\u206e\u200f\u206e\u202d\u202c\u206c\u200b\u206a\u206a\u206d\u202e\u206e\u202b\u206b\u200f\u202c\u200b\u206f\u200e\u202c\u202c\u200b\u202d\u202e\u200b\u206e\u200e\u202a\u206e\u202a\u206a\u206d\u206f\u200e\u202e\u200b\u200f\u206f\u202e = Bounds.zero;

	public Bounds AnchorMax
	{
		[CompilerGenerated]
		get
		{
			return \u206a\u200c\u200d\u202d\u200e\u202a\u206c\u200b\u200e\u206e\u202a\u206c\u206d\u202c\u202a\u206b\u206d\u202e\u206a\u202b\u202b\u200f\u202c\u200d\u202e\u202e\u206d\u200d\u202c\u202d\u202b\u202c\u202d\u200b\u200d\u206e\u200b\u200c\u200b\u206d\u202e;
		}
		[CompilerGenerated]
		internal set
		{
			\u206a\u200c\u200d\u202d\u200e\u202a\u206c\u200b\u200e\u206e\u202a\u206c\u206d\u202c\u202a\u206b\u206d\u202e\u206a\u202b\u202b\u200f\u202c\u200d\u202e\u202e\u206d\u200d\u202c\u202d\u202b\u202c\u202d\u200b\u200d\u206e\u200b\u200c\u200b\u206d\u202e = value;
		}
	}

	public Bounds AnchorMin
	{
		[CompilerGenerated]
		get
		{
			return \u202d\u200e\u202d\u206c\u202b\u206a\u200d\u202b\u206f\u200e\u202a\u206f\u202b\u200c\u206d\u206c\u202b\u202b\u200c\u206b\u202d\u200d\u206b\u200e\u206f\u206c\u202b\u206b\u206d\u200e\u202c\u202c\u202a\u206a\u206a\u206b\u206b\u202a\u200f\u202a\u202e;
		}
		[CompilerGenerated]
		internal set
		{
			\u202d\u200e\u202d\u206c\u202b\u206a\u200d\u202b\u206f\u200e\u202a\u206f\u202b\u200c\u206d\u206c\u202b\u202b\u200c\u206b\u202d\u200d\u206b\u200e\u206f\u206c\u202b\u206b\u206d\u200e\u202c\u202c\u202a\u206a\u206a\u206b\u206b\u202a\u200f\u202a\u202e = value;
		}
	}

	public Bounds OffsetMax
	{
		[CompilerGenerated]
		get
		{
			return \u202b\u202d\u206e\u202e\u202c\u206f\u206a\u200e\u200d\u200c\u200b\u200d\u200e\u200e\u206f\u206e\u200e\u200c\u200f\u206c\u206b\u202a\u202b\u200d\u206e\u206e\u202e\u200d\u202c\u200f\u202c\u206e\u202e\u202a\u200f\u206e\u206d\u200d\u202a\u200d\u202e;
		}
		[CompilerGenerated]
		internal set
		{
			\u202b\u202d\u206e\u202e\u202c\u206f\u206a\u200e\u200d\u200c\u200b\u200d\u200e\u200e\u206f\u206e\u200e\u200c\u200f\u206c\u206b\u202a\u202b\u200d\u206e\u206e\u202e\u200d\u202c\u200f\u202c\u206e\u202e\u202a\u200f\u206e\u206d\u200d\u202a\u200d\u202e = value;
		}
	}

	public Bounds OffsetMin
	{
		[CompilerGenerated]
		get
		{
			return \u206b\u206c\u206e\u200f\u206e\u202d\u202c\u206c\u200b\u206a\u206a\u206d\u202e\u206e\u202b\u206b\u200f\u202c\u200b\u206f\u200e\u202c\u202c\u200b\u202d\u202e\u200b\u206e\u200e\u202a\u206e\u202a\u206a\u206d\u206f\u200e\u202e\u200b\u200f\u206f\u202e;
		}
		[CompilerGenerated]
		internal set
		{
			\u206b\u206c\u206e\u200f\u206e\u202d\u202c\u206c\u200b\u206a\u206a\u206d\u202e\u206e\u202b\u206b\u200f\u202c\u200b\u206f\u200e\u202c\u202c\u200b\u202d\u202e\u200b\u206e\u200e\u202a\u206e\u202a\u206a\u206d\u206f\u200e\u202e\u200b\u200f\u206f\u202e = value;
		}
	}

	public void Set()
	{
		AnchorMin = Bounds.zero;
		while (true)
		{
			int num = -147955513;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ -752890431)) % 4)
				{
				case 0u:
					break;
				default:
					return;
				case 2u:
					AnchorMax = Bounds.one;
					OffsetMin = Bounds.zero;
					num = ((int)num2 * -956867847) ^ -115913392;
					continue;
				case 3u:
					OffsetMax = Bounds.one;
					num = (int)((num2 * 930771289) ^ 0x21788DB7);
					continue;
				case 1u:
					return;
				}
				break;
			}
		}
	}

	public void Set(float2 anchorMin, float2 anchorMax, float2 offsetMin, float2 offsetMax)
	{
		AnchorMin = new Bounds(anchorMin);
		AnchorMax = new Bounds(anchorMax);
		while (true)
		{
			int num = -2123996650;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ -835302609)) % 4)
				{
				case 0u:
					break;
				default:
					return;
				case 1u:
					OffsetMin = new Bounds(offsetMin);
					num = (int)((num2 * 1019607344) ^ 0xD238270);
					continue;
				case 3u:
					OffsetMax = new Bounds(offsetMax);
					num = (int)((num2 * 390561003) ^ 0x5D33FF68);
					continue;
				case 2u:
					return;
				}
				break;
			}
		}
	}

	public void Set(Bounds anchorMin, Bounds anchorMax, Bounds offsetMin, Bounds offsetMax)
	{
		AnchorMin = anchorMin;
		AnchorMax = anchorMax;
		OffsetMin = offsetMin;
		OffsetMax = offsetMax;
	}

	public void Set(RectTransformComponent other)
	{
		AnchorMin = other.AnchorMin;
		AnchorMax = other.AnchorMax;
		OffsetMin = other.OffsetMin;
		OffsetMax = other.OffsetMax;
	}

	public void Set(Anchor anchor)
	{
		AnchorMin = anchor.Min;
		while (true)
		{
			int num = -1745892728;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ -1268104279)) % 3)
				{
				case 0u:
					break;
				default:
					return;
				case 2u:
					goto IL_002e;
				case 1u:
					return;
				}
				break;
				IL_002e:
				AnchorMax = anchor.Max;
				OffsetMin = Bounds.zero;
				OffsetMax = Bounds.one;
				num = ((int)num2 * -285866376) ^ -1877026360;
			}
		}
	}

	public void Set(Offset offset)
	{
		AnchorMin = Bounds.zero;
		while (true)
		{
			int num = 50942594;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ 0xAEDFEDB)) % 4)
				{
				case 0u:
					break;
				default:
					return;
				case 1u:
					AnchorMax = Bounds.one;
					OffsetMin = offset.Min;
					num = (int)(num2 * 563121861) ^ -507499235;
					continue;
				case 3u:
					OffsetMax = offset.Max;
					num = ((int)num2 * -160758530) ^ 0x4823CF1B;
					continue;
				case 2u:
					return;
				}
				break;
			}
		}
	}

	public void Set(Anchor anchor, Offset offset)
	{
		AnchorMin = anchor.Min;
		while (true)
		{
			int num = -766466284;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ -160636994)) % 5)
				{
				case 2u:
					break;
				default:
					return;
				case 1u:
					AnchorMax = anchor.Max;
					num = (int)((num2 * 2075906399) ^ 0x4160A7F9);
					continue;
				case 4u:
					OffsetMin = offset.Min;
					num = (int)(num2 * 1646963894) ^ -392517117;
					continue;
				case 0u:
					OffsetMax = offset.Max;
					num = ((int)num2 * -1678153408) ^ -1686001037;
					continue;
				case 3u:
					return;
				}
				break;
			}
		}
	}

	public override void WriteJson(JsonWriter jsonWriter)
	{
		jsonWriter.WriteStartObject();
		jsonWriter.WritePropertyName("type");
		jsonWriter.WriteValue("RectTransform");
		if (AnchorMin != Bounds.zero)
		{
			jsonWriter.WritePropertyName("anchormin");
			jsonWriter.WriteValue(AnchorMin.ToString("0 0"));
		}
		if (AnchorMax != Bounds.one)
		{
			jsonWriter.WritePropertyName("anchormax");
			jsonWriter.WriteValue(AnchorMax.ToString("1 1"));
		}
		if (OffsetMin != Bounds.zero)
		{
			jsonWriter.WritePropertyName("offsetmin");
			jsonWriter.WriteValue(OffsetMin.ToString("0 0"));
		}
		if (OffsetMax != Bounds.one)
		{
			jsonWriter.WritePropertyName("offsetmax");
			jsonWriter.WriteValue(OffsetMax.ToString("1 1"));
		}
		jsonWriter.WriteEndObject();
	}

	public override void OnEnterPool()
	{
		AnchorMax = Bounds.one;
		AnchorMin = Bounds.zero;
		OffsetMax = Bounds.one;
		OffsetMin = Bounds.zero;
	}
}
