using System;
using Oxide.Ext.Chaos.UIFramework;

public class UIComponentPool : GenericPool
{
	public class Collection<T> : GenericPoolCollection<T> where T : class
	{
		public bool HasSpace => m_Stack.Count < m_MaximumSize;

		public Collection(int maximumSize = 512)
			: base(maximumSize)
		{
		}

		protected override T CreateInstance()
		{
			return Activator.CreateInstance<T>();
		}

		protected override void DestroyInstance(ref T t)
		{
			t = null;
		}
	}

	private static readonly UIComponentPool _instance;

	static UIComponentPool()
	{
		_instance = new UIComponentPool();
	}

	public static Collection<T> CreateCollection<T>(int capacity) where T : BaseCuiComponent
	{
		Collection<T> collection = FindCollection<T>();
		if (collection == null)
		{
			collection = new Collection<T>(capacity);
			_instance.m_Collections.Add(typeof(T).Name, collection);
		}
		return collection;
	}

	public static Collection<T> FindCollection<T>() where T : BaseCuiComponent
	{
		if (!_instance.m_Collections.TryGetValue(typeof(T).Name, out var value))
		{
			return null;
		}
		return (Collection<T>)value;
	}

	public static T Get<T>() where T : BaseCuiComponent
	{
		Collection<T> collection = FindCollection<T>();
		T val = ((collection == null) ? Activator.CreateInstance<T>() : collection.Get());
		((IPoolable)val).OnLeavePool();
		return val;
	}

	public static void Free<T>(ref T t) where T : BaseCuiComponent
	{
		if (t != null)
		{
			((IPoolable)t).OnEnterPool();
			Collection<T> collection = FindCollection<T>();
			if (collection == null)
			{
				collection = CreateCollection<T>(512);
			}
			collection.Free(ref t);
		}
	}
}
