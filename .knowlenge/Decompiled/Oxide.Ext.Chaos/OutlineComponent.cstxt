using Newtonsoft.Json;
using Oxide.Ext.Chaos.UIFramework;
using Unity.Mathematics;

public class OutlineComponent : BaseCuiComponent, ICuiColorComponent, IStyleComponent
{
	public static readonly Bounds DefaultDistance = new Bounds(1f, -1f);

	public Color Color { get; set; } = Color.DEFAULT;

	public Bounds EffectDistance { get; set; } = DefaultDistance;

	public bool UseGraphicAlpha { get; set; }

	public OutlineComponent()
	{
	}

	public OutlineComponent(Color color)
	{
		Color = color;
		base.IsConstant = true;
	}

	public OutlineComponent(Color color, float2 effectDistance)
	{
		while (true)
		{
			int num = 1304598189;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ 0x7C07E8B2)) % 4)
				{
				case 2u:
					break;
				case 3u:
					Color = color;
					num = ((int)num2 * -77279453) ^ 0x1B8C1523;
					continue;
				case 0u:
					EffectDistance = new Bounds(effectDistance);
					num = (int)((num2 * 840536579) ^ 0x7BF96F43);
					continue;
				default:
					base.IsConstant = true;
					return;
				}
				break;
			}
		}
	}

	public OutlineComponent(Color color, Bounds effectDistance)
	{
		Color = color;
		EffectDistance = effectDistance;
		base.IsConstant = true;
	}

	public OutlineComponent WithEffectDistance(float2 effectDistance)
	{
		EffectDistance = new Bounds(effectDistance);
		return this;
	}

	public OutlineComponent WithEffectDistance(Bounds effectDistance)
	{
		EffectDistance = effectDistance;
		return this;
	}

	public OutlineComponent WithGraphicAlpha()
	{
		UseGraphicAlpha = true;
		return this;
	}

	public BaseCuiComponent WithStyle(Style style)
	{
		Color = style.OutlineColor;
		EffectDistance = style.EffectDistance;
		UseGraphicAlpha = style.UseGraphicAlpha;
		return this;
	}

	BaseCuiComponent IStyleComponent.WithStyle(Style style)
	{
		//ILSpy generated this explicit interface implementation from .override directive in WithStyle
		return this.WithStyle(style);
	}

	public override void WriteJson(JsonWriter jsonWriter)
	{
		jsonWriter.WriteStartObject();
		jsonWriter.WritePropertyName("type");
		jsonWriter.WriteValue("UnityEngine.UI.Outline");
		if (Color != Color.DEFAULT)
		{
			jsonWriter.WritePropertyName("color");
			jsonWriter.WriteValue(Color.ToString("1 1 1 1"));
		}
		if (EffectDistance != DefaultDistance)
		{
			jsonWriter.WritePropertyName("distance");
			jsonWriter.WriteValue(EffectDistance.ToString("1 -1"));
		}
		if (UseGraphicAlpha)
		{
			jsonWriter.WritePropertyName("useGraphicAlpha");
			jsonWriter.WriteValue(UseGraphicAlpha);
		}
		jsonWriter.WriteEndObject();
	}

	public override void OnEnterPool()
	{
		Color = Color.DEFAULT;
		EffectDistance = DefaultDistance;
		UseGraphicAlpha = false;
	}
}
