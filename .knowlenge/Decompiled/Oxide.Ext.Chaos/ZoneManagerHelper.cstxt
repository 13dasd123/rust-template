using System;
using System.Collections.Generic;
using UnityEngine;

public class ZoneManagerHelper : BasePluginHelper
{
	public ZoneManagerHelper()
		: base("ZoneManager", "Zone Manager")
	{
	}

	public void SetZoneStatus(string zoneId, bool active)
	{
		Call("SetZoneStatus", zoneId, active);
	}

	public Vector3 GetZoneLocation(string zoneId)
	{
		return Call<Vector3>("GetZoneLocation", new object[1] { zoneId });
	}

	public object GetZoneRadius(string zoneID)
	{
		return Call<object>("GetZoneRadius", new object[1] { zoneID });
	}

	public object GetZoneSize(string zoneID)
	{
		return Call<object>("GetZoneSize", new object[1] { zoneID });
	}

	public object GetZoneName(string zoneID)
	{
		return Call<object>("GetZoneName", new object[1] { zoneID });
	}

	public object CheckZoneID(string zoneID)
	{
		return Call<object>("CheckZoneID", new object[1] { zoneID });
	}

	public object GetZoneIDs()
	{
		return Call<object>("GetZoneIDs", Array.Empty<object>());
	}

	public bool IsPositionInZone(string zoneID, Vector3 position)
	{
		return Call<bool>("IsPositionInZone", new object[2] { zoneID, position });
	}

	public List<BasePlayer> GetPlayersInZone(string zoneID)
	{
		return Call<List<BasePlayer>>("GetPlayersInZone", new object[1] { zoneID });
	}

	public List<BaseEntity> GetEntitiesInZone(string zoneId)
	{
		return Call<List<BaseEntity>>("GetEntitiesInZone", new object[1] { zoneId });
	}

	public bool IsPlayerInZone(string zoneID, BasePlayer player)
	{
		return Call<bool>("IsPlayerInZone", new object[2] { zoneID, player });
	}

	public bool IsEntityInZone(string zoneID, BaseEntity entity)
	{
		return Call<bool>("IsEntityInZone", new object[2] { zoneID, entity });
	}

	public string[] GetPlayerZoneIDs(BasePlayer player)
	{
		return Call<string[]>("GetPlayerZoneIDs", new object[1] { player });
	}

	public string[] GetEntityZoneIDs(BaseEntity entity)
	{
		return Call<string[]>("GetEntityZoneIDs", new object[1] { entity });
	}

	public bool HasFlag(string zoneId, string flagName)
	{
		return Call<bool>("HasFlag", new object[2] { zoneId, flagName });
	}

	public void AddFlag(string zoneId, string flagName)
	{
		Call("AddFlag", zoneId, flagName);
	}

	public void RemoveFlag(string zoneId, string flagName)
	{
		Call("RemoveFlag", zoneId, flagName);
	}

	public bool HasDisabledFlag(string zoneId, string flagName)
	{
		return Call<bool>("HasDisabledFlag", new object[2] { zoneId, flagName });
	}

	public void AddDisabledFlag(string zoneId, string flagName)
	{
		Call("AddDisabledFlag", zoneId, flagName);
	}

	public void RemoveDisabledFlag(string zoneId, string flagName)
	{
		Call("RemoveDisabledFlag", zoneId, flagName);
	}

	public bool CreateOrUpdateZone(string zoneId, string[] args, Vector3 position = default(Vector3))
	{
		return Call<bool>("CreateOrUpdateZone", new object[3] { zoneId, args, position });
	}

	public bool EraseZone(string zoneId)
	{
		return Call<bool>("EraseZone", new object[1] { zoneId });
	}

	public List<string> ZoneFieldListRaw()
	{
		return Call<List<string>>("ZoneFieldListRaw", Array.Empty<object>());
	}

	public Dictionary<string, string> ZoneFieldList(string zoneId)
	{
		return Call<Dictionary<string, string>>("ZoneFieldList", new object[1] { zoneId });
	}

	public bool AddPlayerToZoneKeepinlist(string zoneId, BasePlayer player)
	{
		return Call<bool>("AddPlayerToZoneKeepinlist", new object[2] { zoneId, player });
	}

	public bool RemovePlayerFromZoneKeepinlist(string zoneId, BasePlayer player)
	{
		return Call<bool>("RemovePlayerFromZoneKeepinlist", new object[2] { zoneId, player });
	}

	public bool AddPlayerToZoneWhitelist(string zoneId, BasePlayer player)
	{
		return Call<bool>("AddPlayerToZoneWhitelist", new object[2] { zoneId, player });
	}

	public bool RemovePlayerFromZoneWhitelist(string zoneId, BasePlayer player)
	{
		return Call<bool>("RemovePlayerFromZoneWhitelist", new object[2] { zoneId, player });
	}

	public bool EntityHasFlag(BaseEntity baseEntity, string flagName)
	{
		return Call<bool>("EntityHasFlag", new object[2] { baseEntity, flagName });
	}

	public bool PlayerHasFlag(BasePlayer player, string flagName)
	{
		return Call<bool>("PlayerHasFlag", new object[2] { player, flagName });
	}
}
