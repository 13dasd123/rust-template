using System;
using Newtonsoft.Json;
using Oxide.Ext.Chaos.UIFramework;
using UnityEngine;

public class CountdownComponent : BaseCuiComponent, ICuiCommandComponent
{
	public int EndTime { get; set; }

	public int StartTime { get; set; }

	public int Step { get; set; } = 1;

	public string Command { get; set; }

	public CountdownComponent()
	{
	}

	public CountdownComponent(int startTime = 0, int endTime = 0, int step = 1, string command = "")
	{
		while (true)
		{
			int num = 1104725009;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ 0x6BB106C9)) % 6)
				{
				case 4u:
					break;
				default:
					return;
				case 0u:
					base.IsConstant = true;
					num = (int)((num2 * 1723563460) ^ 0x392F98C0);
					continue;
				case 3u:
					Step = step;
					Command = command;
					num = (int)(num2 * 210487785) ^ -51592892;
					continue;
				case 1u:
					EndTime = endTime;
					num = (int)((num2 * 1225982819) ^ 0x2EEC5539);
					continue;
				case 2u:
					StartTime = startTime;
					num = (int)(num2 * 935632100) ^ -1454870110;
					continue;
				case 5u:
					return;
				}
				break;
			}
		}
	}

	public CountdownComponent WithEndTime(int endTime)
	{
		EndTime = endTime;
		return this;
	}

	public CountdownComponent WithStartTime(int startTime)
	{
		StartTime = startTime;
		return this;
	}

	public CountdownComponent WithStep(int step)
	{
		Step = step;
		return this;
	}

	public void SetCommand(CommandCallbackHandler callbackHandler, Action<ConsoleSystem.Arg> callback, string identifier = "")
	{
		Command = callbackHandler.RegisterCommand(callback, null, identifier);
	}

	void ICuiCommandComponent.SetCommand(CommandCallbackHandler callbackHandler, Action<ConsoleSystem.Arg> callback, string identifier = "")
	{
		//ILSpy generated this explicit interface implementation from .override directive in SetCommand
		this.SetCommand(callbackHandler, callback, identifier);
	}

	public void SetSecureCommand(CommandCallbackHandler commandCallbackHandler, Action<ConsoleSystem.Arg> callback, ulong userId, string identifier = "")
	{
		Command = commandCallbackHandler.RegisterSecureCommand(callback, userId, identifier);
	}

	public CountdownComponent WithCallback(CommandCallbackHandler callbackHandler, Action<ConsoleSystem.Arg> callback, string identifier = "")
	{
		SetCommand(callbackHandler, callback, identifier);
		return this;
	}

	public CountdownComponent WithSecureCallback(CommandCallbackHandler callbackHandler, Action<ConsoleSystem.Arg> callback, ulong userId, string identifier = "")
	{
		SetSecureCommand(callbackHandler, callback, userId, identifier);
		return this;
	}

	public override void WriteJson(JsonWriter jsonWriter)
	{
		if (StartTime == 0 && EndTime == 0)
		{
			Debug.Log("[UIFramework] Countdown component has no start and end time assigned");
			return;
		}
		jsonWriter.WriteStartObject();
		jsonWriter.WritePropertyName("type");
		jsonWriter.WriteValue("Countdown");
		if (StartTime != 0)
		{
			jsonWriter.WritePropertyName("startTime");
			jsonWriter.WriteValue(StartTime);
		}
		if (EndTime != 0)
		{
			jsonWriter.WritePropertyName("endTime");
			jsonWriter.WriteValue(EndTime);
		}
		if (Step != 1)
		{
			jsonWriter.WritePropertyName("step");
			jsonWriter.WriteValue(Step);
		}
		jsonWriter.WriteEndObject();
	}

	public override void OnEnterPool()
	{
		Command = null;
		EndTime = 0;
		StartTime = 0;
		Step = 0;
	}
}
