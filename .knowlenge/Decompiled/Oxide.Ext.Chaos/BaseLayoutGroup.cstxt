using Oxide.Ext.Chaos.UIFramework;
using Unity.Mathematics;
using UnityEngine;

public abstract class BaseLayoutGroup
{
	protected int m_Columns;

	protected int m_Rows;

	protected bool m_IsScrollable;

	protected float2 m_Size;

	protected float2 m_ViewportSize;

	protected float2 m_FixedSize;

	protected Vector2Int m_FixedCount;

	protected float2 m_Offset;

	protected Area m_Area = Area.full;

	protected Spacing m_Spacing = Spacing.zero;

	protected Padding m_Padding = Padding.zero;

	protected Axis m_Axis;

	protected Corner m_Corner;

	public Area Area
	{
		get
		{
			return m_Area;
		}
		set
		{
			m_Area = value;
		}
	}

	public Axis Axis
	{
		get
		{
			return m_Axis;
		}
		set
		{
			m_Axis = value;
		}
	}

	public Spacing Spacing
	{
		get
		{
			return m_Spacing;
		}
		set
		{
			m_Spacing = value;
		}
	}

	public Padding Padding
	{
		get
		{
			return m_Padding;
		}
		set
		{
			m_Padding = value;
		}
	}

	public Corner Corner
	{
		get
		{
			return m_Corner;
		}
		set
		{
			m_Corner = value;
		}
	}

	public Vector2 FixedSize
	{
		get
		{
			return m_FixedSize;
		}
		set
		{
			m_FixedSize = value;
		}
	}

	public Vector2Int FixedCount
	{
		get
		{
			return m_FixedCount;
		}
		set
		{
			m_FixedCount = value;
		}
	}

	public bool IsScrollable
	{
		get
		{
			return m_IsScrollable;
		}
		set
		{
			m_IsScrollable = value;
		}
	}

	public float2 ViewportSize
	{
		get
		{
			return m_ViewportSize;
		}
		set
		{
			m_ViewportSize = value;
		}
	}

	protected bool HasFixedSize
	{
		get
		{
			if (!(m_FixedSize.x > 0f))
			{
				while (true)
				{
					uint num;
					switch ((num = 699310949u) % 3)
					{
					case 0u:
						continue;
					case 2u:
						return m_FixedSize.y > 0f;
					}
					break;
				}
			}
			return true;
		}
	}

	public int PerPage => m_Columns * m_Rows;

	public bool HasPreviousPage(int page)
	{
		return page > 0;
	}

	public bool HasNextPage(int page, int count)
	{
		return count > PerPage * (page + 1);
	}

	protected BaseLayoutGroup(int columns, int rows, Axis axis)
	{
		m_Columns = columns;
		m_Rows = rows;
		m_Axis = axis;
	}

	public virtual void RecalculateSize()
	{
		if (HasFixedSize)
		{
			goto IL_000b;
		}
		goto IL_014f;
		IL_000b:
		int num = -926827123;
		goto IL_0010;
		IL_0010:
		float f = default(float);
		float f2 = default(float);
		while (true)
		{
			uint num2;
			switch ((num2 = (uint)(num ^ -1562923680)) % 13)
			{
			case 4u:
				break;
			default:
				return;
			case 8u:
				m_Rows = FixedCount.y;
				num = ((int)num2 * -449214432) ^ 0x615C72CE;
				continue;
			case 2u:
				m_Offset = new Vector2(m_Area.Width - (float)m_Columns * m_Size.x - (float)(m_Columns - 1) * m_Spacing.Horizontal - (m_Padding.Left + m_Padding.Right), 0f - (m_Area.Height - (float)m_Rows * m_Size.y - (float)(m_Rows - 1) * m_Spacing.Vertical - (m_Padding.Bottom + m_Padding.Top)));
				num = -148633971;
				continue;
			case 7u:
				m_Size = m_FixedSize;
				num = (int)((num2 * 859641734) ^ 0x7E34561);
				continue;
			case 1u:
				goto IL_014f;
			case 5u:
				m_Columns = FixedCount.x;
				num = ((int)num2 * -1105122451) ^ 0x7F38924D;
				continue;
			case 12u:
				m_Columns = MaxInSpace(m_Area.Width - (m_Padding.Left + m_Padding.Right), m_Size.x, m_Spacing.Horizontal);
				num = -1488279380;
				continue;
			case 3u:
				return;
			case 9u:
				m_Size = new float2(Mathf.Abs(f), Mathf.Abs(f2));
				num = ((int)num2 * -125033935) ^ 0x67DF6D4B;
				continue;
			case 10u:
				m_Rows = MaxInSpace(m_Area.Height - (m_Padding.Top + m_Padding.Bottom), m_Size.y, m_Spacing.Vertical);
				num = (int)((num2 * 128087014) ^ 0x533A2FC6);
				continue;
			case 6u:
			{
				int num3;
				int num4;
				if (FixedCount != Vector2Int.zero)
				{
					num3 = 1029060835;
					num4 = num3;
				}
				else
				{
					num3 = 1365357358;
					num4 = num3;
				}
				num = num3 ^ (int)(num2 * 978591128);
				continue;
			}
			case 11u:
				f = (m_Area.Width - m_Padding.Horizontal - m_Spacing.Horizontal * (float)(m_Columns - 1)) / (float)m_Columns;
				f2 = (m_Area.Height - m_Padding.Vertical - m_Spacing.Vertical * (float)(m_Rows - 1)) / (float)m_Rows;
				num = (int)(num2 * 1191920072) ^ -1068718860;
				continue;
			case 0u:
				return;
			}
			break;
		}
		goto IL_000b;
		IL_014f:
		m_Offset = Vector2.zero;
		num = -1366108511;
		goto IL_0010;
	}

	public virtual void ResizeContentToFit(RectTransformComponent transform, int numberOfItems)
	{
	}

	protected int MaxInSpace(float usableArea, float size, float spacing)
	{
		float num = size + spacing;
		int num4 = default(int);
		while (true)
		{
			int num2 = 411605830;
			while (true)
			{
				uint num3;
				int num5;
				switch ((num3 = (uint)(num2 ^ 0x7865AF24)) % 4)
				{
				case 0u:
					break;
				case 2u:
				{
					num4 = Mathf.FloorToInt(usableArea / num);
					int num6;
					if (!((float)num4 * size + (float)(num4 - 1) * spacing + size + spacing > usableArea))
					{
						num5 = 1464395759;
						num6 = num5;
					}
					else
					{
						num5 = 1722026265;
						num6 = num5;
					}
					goto IL_0053;
				}
				case 3u:
					return num4;
				default:
					return num4 + 1;
				}
				break;
				IL_0053:
				num2 = num5 ^ ((int)num3 * -2095583015);
			}
		}
	}

	public void Evaluate(int index, out Anchor anchor, out Offset offset)
	{
		anchor = Anchor.Center;
		int rowNumber = default(int);
		int columnNumber = default(int);
		float num3 = default(float);
		float num11 = default(float);
		while (true)
		{
			int num = -2128266065;
			while (true)
			{
				uint num2;
				switch ((num2 = (uint)(num ^ -279934277)) % 24)
				{
				case 23u:
					break;
				default:
					return;
				case 7u:
				{
					int num16;
					if (m_Corner != Corner.TopRight)
					{
						num = -1787412775;
						num16 = num;
					}
					else
					{
						num = -1963413584;
						num16 = num;
					}
					continue;
				}
				case 6u:
					rowNumber = m_Rows - rowNumber - 1;
					num = -821378244;
					continue;
				case 11u:
					columnNumber = m_Columns - columnNumber - 1;
					num = -1885434183;
					continue;
				case 10u:
				{
					int num19;
					int num20;
					if (m_Corner != Corner.BottomLeft)
					{
						num19 = -1131490518;
						num20 = num19;
					}
					else
					{
						num19 = -1290643725;
						num20 = num19;
					}
					num = num19 ^ (int)(num2 * 194524511);
					continue;
				}
				case 13u:
					num3 += (0f - m_Area.Width) * 0.5f + m_Padding.Left + m_Size.x * (float)columnNumber + m_Spacing.Horizontal * (float)columnNumber;
					num11 += m_Area.Height * 0.5f - m_Padding.Top - (float)rowNumber * m_Size.y - m_Spacing.Vertical * (float)rowNumber;
					num = -380106158;
					continue;
				case 22u:
					num11 = 0f;
					num = -77206546;
					continue;
				case 5u:
				{
					int num5;
					int num6;
					if (!float.IsInfinity(num3))
					{
						num5 = 734044624;
						num6 = num5;
					}
					else
					{
						num5 = 1151694852;
						num6 = num5;
					}
					num = num5 ^ ((int)num2 * -1870661953);
					continue;
				}
				case 1u:
					num3 += (m_Area.Width - (float)m_Columns * m_Size.x - (float)Mathf.Max(m_Columns - 1, 0) * m_Spacing.Horizontal) * 0.5f;
					num = (int)((num2 * 904011814) ^ 0x1E24DE51);
					continue;
				case 0u:
				{
					int num14;
					int num15;
					if (float.IsInfinity(num11))
					{
						num14 = 2126898069;
						num15 = num14;
					}
					else
					{
						num14 = 1786593534;
						num15 = num14;
					}
					num = num14 ^ ((int)num2 * -584778834);
					continue;
				}
				case 17u:
					num3 = 0f;
					num = ((int)num2 * -852263746) ^ -172957874;
					continue;
				case 18u:
				{
					int num9;
					int num10;
					if (m_Corner == Corner.BottomRight)
					{
						num9 = -1027716348;
						num10 = num9;
					}
					else
					{
						num9 = -1755725113;
						num10 = num9;
					}
					num = num9 ^ ((int)num2 * -2135087238);
					continue;
				}
				case 8u:
				{
					int num21;
					if (!float.IsNaN(num11))
					{
						num = -713924861;
						num21 = num;
					}
					else
					{
						num = -270710651;
						num21 = num;
					}
					continue;
				}
				case 4u:
					num11 -= (m_Area.Height - (float)m_Rows * m_Size.y - (float)Mathf.Max(m_Rows - 1, 0) * m_Spacing.Vertical) * 0.5f;
					num = (int)((num2 * 882095040) ^ 0x7B5B51A6);
					continue;
				case 9u:
				{
					int num17;
					int num18;
					if (!float.IsNaN(num3))
					{
						num17 = 372459456;
						num18 = num17;
					}
					else
					{
						num17 = 225333441;
						num18 = num17;
					}
					num = num17 ^ (int)(num2 * 771327518);
					continue;
				}
				case 3u:
				{
					num11 = 0f;
					int num12;
					int num13;
					if (m_Corner != Corner.BottomRight)
					{
						num12 = -292919456;
						num13 = num12;
					}
					else
					{
						num12 = -1160272108;
						num13 = num12;
					}
					num = num12 ^ ((int)num2 * -1972281789);
					continue;
				}
				case 20u:
					num3 = 0f;
					num = -502163365;
					continue;
				case 15u:
					num11 += m_Offset.y;
					num = ((int)num2 * -1425923226) ^ 0x626F9F16;
					continue;
				case 21u:
					offset = new Offset(num3, num11 - m_Size.y, num3 + m_Size.x, num11);
					num = -1086630288;
					continue;
				case 14u:
				{
					int num7;
					int num8;
					if (HasFixedSize)
					{
						num7 = 1920335030;
						num8 = num7;
					}
					else
					{
						num7 = 2021429610;
						num8 = num7;
					}
					num = num7 ^ ((int)num2 * -1484942734);
					continue;
				}
				case 16u:
				{
					int num4;
					if (m_Corner != Corner.Centered)
					{
						num = -820671322;
						num4 = num;
					}
					else
					{
						num = -1106383187;
						num4 = num;
					}
					continue;
				}
				case 12u:
					IndexToCoordinates(index, out rowNumber, out columnNumber);
					num = ((int)num2 * -237902436) ^ -1656750366;
					continue;
				case 2u:
					num3 += m_Offset.x;
					num = ((int)num2 * -791515494) ^ 0x74546347;
					continue;
				case 19u:
					return;
				}
				break;
			}
		}
	}

	protected void IndexToCoordinates(int index, out int rowNumber, out int columnNumber)
	{
		if (m_Axis == Axis.Horizontal)
		{
			goto IL_0008;
		}
		goto IL_0054;
		IL_0008:
		int num = 295746616;
		goto IL_000d;
		IL_000d:
		while (true)
		{
			uint num2;
			switch ((num2 = (uint)(num ^ 0x7506F39B)) % 6)
			{
			case 3u:
				break;
			default:
				return;
			case 1u:
				rowNumber = ((index != 0) ? Mathf.FloorToInt((float)index / (float)m_Columns) : 0);
				num = 440861407;
				continue;
			case 4u:
				goto IL_0054;
			case 5u:
				return;
			case 2u:
				columnNumber = index - rowNumber * m_Columns;
				num = ((int)num2 * -1019877293) ^ -675336424;
				continue;
			case 0u:
				return;
			}
			break;
		}
		goto IL_0008;
		IL_0054:
		columnNumber = ((index != 0) ? Mathf.FloorToInt((float)index / (float)m_Rows) : 0);
		rowNumber = index - columnNumber * m_Rows;
		num = 304602887;
		goto IL_000d;
	}
}
