using System;
using System.Runtime.InteropServices;
using Steamworks;
using Steamworks.Data;

internal class ISteamNetworkingSockets : SteamInterface
{
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Socket FCreateListenSocketIP(IntPtr self, ref NetAddress localAddress);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Connection FConnectByIPAddress(IntPtr self, ref NetAddress address);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Socket FCreateListenSocketP2P(IntPtr self, int nVirtualPort);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Connection FConnectP2P(IntPtr self, ref NetIdentity identityRemote, int nVirtualPort);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Result FAcceptConnection(IntPtr self, Connection hConn);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FCloseConnection(IntPtr self, Connection hPeer, int nReason, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszDebug, [MarshalAs(UnmanagedType.U1)] bool bEnableLinger);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FCloseListenSocket(IntPtr self, Socket hSocket);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetConnectionUserData(IntPtr self, Connection hPeer, long nUserData);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate long FGetConnectionUserData(IntPtr self, Connection hPeer);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetConnectionName(IntPtr self, Connection hPeer, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszName);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetConnectionName(IntPtr self, Connection hPeer, IntPtr pszName, int nMaxLen);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Result FSendMessageToConnection(IntPtr self, Connection hConn, IntPtr pData, uint cbData, int nSendFlags);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Result FFlushMessagesOnConnection(IntPtr self, Connection hConn);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FReceiveMessagesOnConnection(IntPtr self, Connection hConn, IntPtr ppOutMessages, int nMaxMessages);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FReceiveMessagesOnListenSocket(IntPtr self, Socket hSocket, IntPtr ppOutMessages, int nMaxMessages);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetConnectionInfo(IntPtr self, Connection hConn, ref ConnectionInfo pInfo);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetQuickConnectionStatus(IntPtr self, Connection hConn, ref SteamNetworkingQuickConnectionStatus pStats);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetDetailedConnectionStatus(IntPtr self, Connection hConn, IntPtr pszBuf, int cbBuf);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetListenSocketAddress(IntPtr self, Socket hSocket, ref NetAddress address);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FCreateSocketPair(IntPtr self, [In][Out] Connection[] pOutConnection1, [In][Out] Connection[] pOutConnection2, [MarshalAs(UnmanagedType.U1)] bool bUseNetworkLoopback, ref NetIdentity pIdentity1, ref NetIdentity pIdentity2);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetIdentity(IntPtr self, ref NetIdentity pIdentity);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FReceivedRelayAuthTicket(IntPtr self, IntPtr pvTicket, int cbTicket, [In][Out] SteamDatagramRelayAuthTicket[] pOutParsedTicket);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FFindRelayAuthTicketForServer(IntPtr self, ref NetIdentity identityGameServer, int nVirtualPort, [In][Out] SteamDatagramRelayAuthTicket[] pOutParsedTicket);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Connection FConnectToHostedDedicatedServer(IntPtr self, ref NetIdentity identityTarget, int nVirtualPort);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate ushort FGetHostedDedicatedServerPort(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamNetworkingPOPID FGetHostedDedicatedServerPOPID(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetHostedDedicatedServerAddress(IntPtr self, ref SteamDatagramHostedAddress pRouting);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Socket FCreateHostedDedicatedServerListenSocket(IntPtr self, int nVirtualPort);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FRunCallbacks(IntPtr self, IntPtr pCallbacks);

	private FCreateListenSocketIP _CreateListenSocketIP;

	private FConnectByIPAddress _ConnectByIPAddress;

	private FCreateListenSocketP2P _CreateListenSocketP2P;

	private FConnectP2P _ConnectP2P;

	private FAcceptConnection _AcceptConnection;

	private FCloseConnection _CloseConnection;

	private FCloseListenSocket _CloseListenSocket;

	private FSetConnectionUserData _SetConnectionUserData;

	private FGetConnectionUserData _GetConnectionUserData;

	private FSetConnectionName _SetConnectionName;

	private FGetConnectionName _GetConnectionName;

	private FSendMessageToConnection _SendMessageToConnection;

	private FFlushMessagesOnConnection _FlushMessagesOnConnection;

	private FReceiveMessagesOnConnection _ReceiveMessagesOnConnection;

	private FReceiveMessagesOnListenSocket _ReceiveMessagesOnListenSocket;

	private FGetConnectionInfo _GetConnectionInfo;

	private FGetQuickConnectionStatus _GetQuickConnectionStatus;

	private FGetDetailedConnectionStatus _GetDetailedConnectionStatus;

	private FGetListenSocketAddress _GetListenSocketAddress;

	private FCreateSocketPair _CreateSocketPair;

	private FGetIdentity _GetIdentity;

	private FReceivedRelayAuthTicket _ReceivedRelayAuthTicket;

	private FFindRelayAuthTicketForServer _FindRelayAuthTicketForServer;

	private FConnectToHostedDedicatedServer _ConnectToHostedDedicatedServer;

	private FGetHostedDedicatedServerPort _GetHostedDedicatedServerPort;

	private FGetHostedDedicatedServerPOPID _GetHostedDedicatedServerPOPID;

	private FGetHostedDedicatedServerAddress _GetHostedDedicatedServerAddress;

	private FCreateHostedDedicatedServerListenSocket _CreateHostedDedicatedServerListenSocket;

	private FRunCallbacks _RunCallbacks;

	public override string InterfaceName => "SteamNetworkingSockets002";

	public override void InitInternals()
	{
		_CreateListenSocketIP = Marshal.GetDelegateForFunctionPointer<FCreateListenSocketIP>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(0)));
		_ConnectByIPAddress = Marshal.GetDelegateForFunctionPointer<FConnectByIPAddress>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(8)));
		_CreateListenSocketP2P = Marshal.GetDelegateForFunctionPointer<FCreateListenSocketP2P>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(16)));
		_ConnectP2P = Marshal.GetDelegateForFunctionPointer<FConnectP2P>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(24)));
		_AcceptConnection = Marshal.GetDelegateForFunctionPointer<FAcceptConnection>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(32)));
		_CloseConnection = Marshal.GetDelegateForFunctionPointer<FCloseConnection>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(40)));
		_CloseListenSocket = Marshal.GetDelegateForFunctionPointer<FCloseListenSocket>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(48)));
		_SetConnectionUserData = Marshal.GetDelegateForFunctionPointer<FSetConnectionUserData>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(56)));
		_GetConnectionUserData = Marshal.GetDelegateForFunctionPointer<FGetConnectionUserData>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(64)));
		_SetConnectionName = Marshal.GetDelegateForFunctionPointer<FSetConnectionName>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(72)));
		_GetConnectionName = Marshal.GetDelegateForFunctionPointer<FGetConnectionName>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(80)));
		_SendMessageToConnection = Marshal.GetDelegateForFunctionPointer<FSendMessageToConnection>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(88)));
		_FlushMessagesOnConnection = Marshal.GetDelegateForFunctionPointer<FFlushMessagesOnConnection>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(96)));
		_ReceiveMessagesOnConnection = Marshal.GetDelegateForFunctionPointer<FReceiveMessagesOnConnection>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(104)));
		_ReceiveMessagesOnListenSocket = Marshal.GetDelegateForFunctionPointer<FReceiveMessagesOnListenSocket>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(112)));
		_GetConnectionInfo = Marshal.GetDelegateForFunctionPointer<FGetConnectionInfo>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(120)));
		_GetQuickConnectionStatus = Marshal.GetDelegateForFunctionPointer<FGetQuickConnectionStatus>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(128)));
		_GetDetailedConnectionStatus = Marshal.GetDelegateForFunctionPointer<FGetDetailedConnectionStatus>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(136)));
		_GetListenSocketAddress = Marshal.GetDelegateForFunctionPointer<FGetListenSocketAddress>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(144)));
		_CreateSocketPair = Marshal.GetDelegateForFunctionPointer<FCreateSocketPair>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(152)));
		_GetIdentity = Marshal.GetDelegateForFunctionPointer<FGetIdentity>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(160)));
		_ReceivedRelayAuthTicket = Marshal.GetDelegateForFunctionPointer<FReceivedRelayAuthTicket>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(168)));
		_FindRelayAuthTicketForServer = Marshal.GetDelegateForFunctionPointer<FFindRelayAuthTicketForServer>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(176)));
		_ConnectToHostedDedicatedServer = Marshal.GetDelegateForFunctionPointer<FConnectToHostedDedicatedServer>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(184)));
		_GetHostedDedicatedServerPort = Marshal.GetDelegateForFunctionPointer<FGetHostedDedicatedServerPort>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(192)));
		_GetHostedDedicatedServerPOPID = Marshal.GetDelegateForFunctionPointer<FGetHostedDedicatedServerPOPID>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(200)));
		_GetHostedDedicatedServerAddress = Marshal.GetDelegateForFunctionPointer<FGetHostedDedicatedServerAddress>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(208)));
		_CreateHostedDedicatedServerListenSocket = Marshal.GetDelegateForFunctionPointer<FCreateHostedDedicatedServerListenSocket>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(216)));
		_RunCallbacks = Marshal.GetDelegateForFunctionPointer<FRunCallbacks>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(224)));
	}

	internal override void Shutdown()
	{
		base.Shutdown();
		_CreateListenSocketIP = null;
		_ConnectByIPAddress = null;
		_CreateListenSocketP2P = null;
		_ConnectP2P = null;
		_AcceptConnection = null;
		_CloseConnection = null;
		_CloseListenSocket = null;
		_SetConnectionUserData = null;
		_GetConnectionUserData = null;
		_SetConnectionName = null;
		_GetConnectionName = null;
		_SendMessageToConnection = null;
		_FlushMessagesOnConnection = null;
		_ReceiveMessagesOnConnection = null;
		_ReceiveMessagesOnListenSocket = null;
		_GetConnectionInfo = null;
		_GetQuickConnectionStatus = null;
		_GetDetailedConnectionStatus = null;
		_GetListenSocketAddress = null;
		_CreateSocketPair = null;
		_GetIdentity = null;
		_ReceivedRelayAuthTicket = null;
		_FindRelayAuthTicketForServer = null;
		_ConnectToHostedDedicatedServer = null;
		_GetHostedDedicatedServerPort = null;
		_GetHostedDedicatedServerPOPID = null;
		_GetHostedDedicatedServerAddress = null;
		_CreateHostedDedicatedServerListenSocket = null;
		_RunCallbacks = null;
	}

	internal Socket CreateListenSocketIP(ref NetAddress localAddress)
	{
		return _CreateListenSocketIP(Self, ref localAddress);
	}

	internal Connection ConnectByIPAddress(ref NetAddress address)
	{
		return _ConnectByIPAddress(Self, ref address);
	}

	internal Socket CreateListenSocketP2P(int nVirtualPort)
	{
		return _CreateListenSocketP2P(Self, nVirtualPort);
	}

	internal Connection ConnectP2P(ref NetIdentity identityRemote, int nVirtualPort)
	{
		return _ConnectP2P(Self, ref identityRemote, nVirtualPort);
	}

	internal Result AcceptConnection(Connection hConn)
	{
		return _AcceptConnection(Self, hConn);
	}

	internal bool CloseConnection(Connection hPeer, int nReason, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszDebug, [MarshalAs(UnmanagedType.U1)] bool bEnableLinger)
	{
		return _CloseConnection(Self, hPeer, nReason, pszDebug, bEnableLinger);
	}

	internal bool CloseListenSocket(Socket hSocket)
	{
		return _CloseListenSocket(Self, hSocket);
	}

	internal bool SetConnectionUserData(Connection hPeer, long nUserData)
	{
		return _SetConnectionUserData(Self, hPeer, nUserData);
	}

	internal long GetConnectionUserData(Connection hPeer)
	{
		return _GetConnectionUserData(Self, hPeer);
	}

	internal void SetConnectionName(Connection hPeer, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszName)
	{
		_SetConnectionName(Self, hPeer, pszName);
	}

	internal bool GetConnectionName(Connection hPeer, out string pszName)
	{
		IntPtr intPtr = Helpers.TakeMemory();
		bool result = _GetConnectionName(Self, hPeer, intPtr, 32768);
		pszName = Helpers.MemoryToString(intPtr);
		return result;
	}

	internal Result SendMessageToConnection(Connection hConn, IntPtr pData, uint cbData, int nSendFlags)
	{
		return _SendMessageToConnection(Self, hConn, pData, cbData, nSendFlags);
	}

	internal Result FlushMessagesOnConnection(Connection hConn)
	{
		return _FlushMessagesOnConnection(Self, hConn);
	}

	internal int ReceiveMessagesOnConnection(Connection hConn, IntPtr ppOutMessages, int nMaxMessages)
	{
		return _ReceiveMessagesOnConnection(Self, hConn, ppOutMessages, nMaxMessages);
	}

	internal int ReceiveMessagesOnListenSocket(Socket hSocket, IntPtr ppOutMessages, int nMaxMessages)
	{
		return _ReceiveMessagesOnListenSocket(Self, hSocket, ppOutMessages, nMaxMessages);
	}

	internal bool GetConnectionInfo(Connection hConn, ref ConnectionInfo pInfo)
	{
		return _GetConnectionInfo(Self, hConn, ref pInfo);
	}

	internal bool GetQuickConnectionStatus(Connection hConn, ref SteamNetworkingQuickConnectionStatus pStats)
	{
		return _GetQuickConnectionStatus(Self, hConn, ref pStats);
	}

	internal int GetDetailedConnectionStatus(Connection hConn, out string pszBuf)
	{
		IntPtr intPtr = Helpers.TakeMemory();
		int result = _GetDetailedConnectionStatus(Self, hConn, intPtr, 32768);
		pszBuf = Helpers.MemoryToString(intPtr);
		return result;
	}

	internal bool GetListenSocketAddress(Socket hSocket, ref NetAddress address)
	{
		return _GetListenSocketAddress(Self, hSocket, ref address);
	}

	internal bool CreateSocketPair([In][Out] Connection[] pOutConnection1, [In][Out] Connection[] pOutConnection2, [MarshalAs(UnmanagedType.U1)] bool bUseNetworkLoopback, ref NetIdentity pIdentity1, ref NetIdentity pIdentity2)
	{
		return _CreateSocketPair(Self, pOutConnection1, pOutConnection2, bUseNetworkLoopback, ref pIdentity1, ref pIdentity2);
	}

	internal bool GetIdentity(ref NetIdentity pIdentity)
	{
		return _GetIdentity(Self, ref pIdentity);
	}

	internal bool ReceivedRelayAuthTicket(IntPtr pvTicket, int cbTicket, [In][Out] SteamDatagramRelayAuthTicket[] pOutParsedTicket)
	{
		return _ReceivedRelayAuthTicket(Self, pvTicket, cbTicket, pOutParsedTicket);
	}

	internal int FindRelayAuthTicketForServer(ref NetIdentity identityGameServer, int nVirtualPort, [In][Out] SteamDatagramRelayAuthTicket[] pOutParsedTicket)
	{
		return _FindRelayAuthTicketForServer(Self, ref identityGameServer, nVirtualPort, pOutParsedTicket);
	}

	internal Connection ConnectToHostedDedicatedServer(ref NetIdentity identityTarget, int nVirtualPort)
	{
		return _ConnectToHostedDedicatedServer(Self, ref identityTarget, nVirtualPort);
	}

	internal ushort GetHostedDedicatedServerPort()
	{
		return _GetHostedDedicatedServerPort(Self);
	}

	internal SteamNetworkingPOPID GetHostedDedicatedServerPOPID()
	{
		return _GetHostedDedicatedServerPOPID(Self);
	}

	internal bool GetHostedDedicatedServerAddress(ref SteamDatagramHostedAddress pRouting)
	{
		return _GetHostedDedicatedServerAddress(Self, ref pRouting);
	}

	internal Socket CreateHostedDedicatedServerListenSocket(int nVirtualPort)
	{
		return _CreateHostedDedicatedServerListenSocket(Self, nVirtualPort);
	}

	internal void RunCallbacks(IntPtr pCallbacks)
	{
		_RunCallbacks(Self, pCallbacks);
	}
}
