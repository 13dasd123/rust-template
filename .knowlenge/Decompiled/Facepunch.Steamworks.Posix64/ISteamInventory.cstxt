using System;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using Steamworks;
using Steamworks.Data;

internal class ISteamInventory : SteamInterface
{
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Result FGetResultStatus(IntPtr self, SteamInventoryResult_t resultHandle);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetResultItems(IntPtr self, SteamInventoryResult_t resultHandle, [In][Out] SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetResultItemProperty(IntPtr self, SteamInventoryResult_t resultHandle, uint unItemIndex, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchPropertyName, IntPtr pchValueBuffer, ref uint punValueBufferSizeOut);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate uint FGetResultTimestamp(IntPtr self, SteamInventoryResult_t resultHandle);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FCheckResultSteamID(IntPtr self, SteamInventoryResult_t resultHandle, SteamId steamIDExpected);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FDestroyResult(IntPtr self, SteamInventoryResult_t resultHandle);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetAllItems(IntPtr self, ref SteamInventoryResult_t pResultHandle);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetItemsByID(IntPtr self, ref SteamInventoryResult_t pResultHandle, ref InventoryItemId pInstanceIDs, uint unCountInstanceIDs);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSerializeResult(IntPtr self, SteamInventoryResult_t resultHandle, IntPtr pOutBuffer, ref uint punOutBufferSize);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FDeserializeResult(IntPtr self, ref SteamInventoryResult_t pOutResultHandle, IntPtr pBuffer, uint unBufferSize, [MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGenerateItems(IntPtr self, ref SteamInventoryResult_t pResultHandle, [In][Out] InventoryDefId[] pArrayItemDefs, [In][Out] uint[] punArrayQuantity, uint unArrayLength);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGrantPromoItems(IntPtr self, ref SteamInventoryResult_t pResultHandle);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FAddPromoItem(IntPtr self, ref SteamInventoryResult_t pResultHandle, InventoryDefId itemDef);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FAddPromoItems(IntPtr self, ref SteamInventoryResult_t pResultHandle, [In][Out] InventoryDefId[] pArrayItemDefs, uint unArrayLength);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FConsumeItem(IntPtr self, ref SteamInventoryResult_t pResultHandle, InventoryItemId itemConsume, uint unQuantity);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FExchangeItems(IntPtr self, ref SteamInventoryResult_t pResultHandle, [In][Out] InventoryDefId[] pArrayGenerate, [In][Out] uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, [In][Out] InventoryItemId[] pArrayDestroy, [In][Out] uint[] punArrayDestroyQuantity, uint unArrayDestroyLength);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FTransferItemQuantity(IntPtr self, ref SteamInventoryResult_t pResultHandle, InventoryItemId itemIdSource, uint unQuantity, InventoryItemId itemIdDest);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSendItemDropHeartbeat(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FTriggerItemDrop(IntPtr self, ref SteamInventoryResult_t pResultHandle, InventoryDefId dropListDefinition);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FTradeItems(IntPtr self, ref SteamInventoryResult_t pResultHandle, SteamId steamIDTradePartner, [In][Out] InventoryItemId[] pArrayGive, [In][Out] uint[] pArrayGiveQuantity, uint nArrayGiveLength, [In][Out] InventoryItemId[] pArrayGet, [In][Out] uint[] pArrayGetQuantity, uint nArrayGetLength);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FLoadItemDefinitions(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetItemDefinitionIDs(IntPtr self, [In][Out] InventoryDefId[] pItemDefIDs, ref uint punItemDefIDsArraySize);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetItemDefinitionProperty(IntPtr self, InventoryDefId iDefinition, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchPropertyName, IntPtr pchValueBuffer, ref uint punValueBufferSizeOut);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FRequestEligiblePromoItemDefinitionsIDs(IntPtr self, SteamId steamID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetEligiblePromoItemDefinitionIDs(IntPtr self, SteamId steamID, [In][Out] InventoryDefId[] pItemDefIDs, ref uint punItemDefIDsArraySize);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FStartPurchase(IntPtr self, [In][Out] InventoryDefId[] pArrayItemDefs, [In][Out] uint[] punArrayQuantity, uint unArrayLength);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FRequestPrices(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate uint FGetNumItemsWithPrices(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetItemsWithPrices(IntPtr self, [In][Out] InventoryDefId[] pArrayItemDefs, [In][Out] ulong[] pCurrentPrices, [In][Out] ulong[] pBasePrices, uint unArrayLength);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetItemPrice(IntPtr self, InventoryDefId iDefinition, ref ulong pCurrentPrice, ref ulong pBasePrice);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamInventoryUpdateHandle_t FStartUpdateProperties(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FRemoveProperty(IntPtr self, SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchPropertyName);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetProperty1(IntPtr self, SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchPropertyName, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchPropertyValue);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetProperty2(IntPtr self, SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchPropertyName, [MarshalAs(UnmanagedType.U1)] bool bValue);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetProperty3(IntPtr self, SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchPropertyName, long nValue);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetProperty4(IntPtr self, SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchPropertyName, float flValue);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSubmitUpdateProperties(IntPtr self, SteamInventoryUpdateHandle_t handle, ref SteamInventoryResult_t pResultHandle);

	private FGetResultStatus _GetResultStatus;

	private FGetResultItems _GetResultItems;

	private FGetResultItemProperty _GetResultItemProperty;

	private FGetResultTimestamp _GetResultTimestamp;

	private FCheckResultSteamID _CheckResultSteamID;

	private FDestroyResult _DestroyResult;

	private FGetAllItems _GetAllItems;

	private FGetItemsByID _GetItemsByID;

	private FSerializeResult _SerializeResult;

	private FDeserializeResult _DeserializeResult;

	private FGenerateItems _GenerateItems;

	private FGrantPromoItems _GrantPromoItems;

	private FAddPromoItem _AddPromoItem;

	private FAddPromoItems _AddPromoItems;

	private FConsumeItem _ConsumeItem;

	private FExchangeItems _ExchangeItems;

	private FTransferItemQuantity _TransferItemQuantity;

	private FSendItemDropHeartbeat _SendItemDropHeartbeat;

	private FTriggerItemDrop _TriggerItemDrop;

	private FTradeItems _TradeItems;

	private FLoadItemDefinitions _LoadItemDefinitions;

	private FGetItemDefinitionIDs _GetItemDefinitionIDs;

	private FGetItemDefinitionProperty _GetItemDefinitionProperty;

	private FRequestEligiblePromoItemDefinitionsIDs _RequestEligiblePromoItemDefinitionsIDs;

	private FGetEligiblePromoItemDefinitionIDs _GetEligiblePromoItemDefinitionIDs;

	private FStartPurchase _StartPurchase;

	private FRequestPrices _RequestPrices;

	private FGetNumItemsWithPrices _GetNumItemsWithPrices;

	private FGetItemsWithPrices _GetItemsWithPrices;

	private FGetItemPrice _GetItemPrice;

	private FStartUpdateProperties _StartUpdateProperties;

	private FRemoveProperty _RemoveProperty;

	private FSetProperty1 _SetProperty1;

	private FSetProperty2 _SetProperty2;

	private FSetProperty3 _SetProperty3;

	private FSetProperty4 _SetProperty4;

	private FSubmitUpdateProperties _SubmitUpdateProperties;

	public override string InterfaceName => "STEAMINVENTORY_INTERFACE_V003";

	public override void InitInternals()
	{
		_GetResultStatus = Marshal.GetDelegateForFunctionPointer<FGetResultStatus>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(0)));
		_GetResultItems = Marshal.GetDelegateForFunctionPointer<FGetResultItems>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(8)));
		_GetResultItemProperty = Marshal.GetDelegateForFunctionPointer<FGetResultItemProperty>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(16)));
		_GetResultTimestamp = Marshal.GetDelegateForFunctionPointer<FGetResultTimestamp>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(24)));
		_CheckResultSteamID = Marshal.GetDelegateForFunctionPointer<FCheckResultSteamID>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(32)));
		_DestroyResult = Marshal.GetDelegateForFunctionPointer<FDestroyResult>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(40)));
		_GetAllItems = Marshal.GetDelegateForFunctionPointer<FGetAllItems>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(48)));
		_GetItemsByID = Marshal.GetDelegateForFunctionPointer<FGetItemsByID>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(56)));
		_SerializeResult = Marshal.GetDelegateForFunctionPointer<FSerializeResult>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(64)));
		_DeserializeResult = Marshal.GetDelegateForFunctionPointer<FDeserializeResult>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(72)));
		_GenerateItems = Marshal.GetDelegateForFunctionPointer<FGenerateItems>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(80)));
		_GrantPromoItems = Marshal.GetDelegateForFunctionPointer<FGrantPromoItems>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(88)));
		_AddPromoItem = Marshal.GetDelegateForFunctionPointer<FAddPromoItem>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(96)));
		_AddPromoItems = Marshal.GetDelegateForFunctionPointer<FAddPromoItems>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(104)));
		_ConsumeItem = Marshal.GetDelegateForFunctionPointer<FConsumeItem>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(112)));
		_ExchangeItems = Marshal.GetDelegateForFunctionPointer<FExchangeItems>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(120)));
		_TransferItemQuantity = Marshal.GetDelegateForFunctionPointer<FTransferItemQuantity>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(128)));
		_SendItemDropHeartbeat = Marshal.GetDelegateForFunctionPointer<FSendItemDropHeartbeat>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(136)));
		_TriggerItemDrop = Marshal.GetDelegateForFunctionPointer<FTriggerItemDrop>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(144)));
		_TradeItems = Marshal.GetDelegateForFunctionPointer<FTradeItems>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(152)));
		_LoadItemDefinitions = Marshal.GetDelegateForFunctionPointer<FLoadItemDefinitions>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(160)));
		_GetItemDefinitionIDs = Marshal.GetDelegateForFunctionPointer<FGetItemDefinitionIDs>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(168)));
		_GetItemDefinitionProperty = Marshal.GetDelegateForFunctionPointer<FGetItemDefinitionProperty>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(176)));
		_RequestEligiblePromoItemDefinitionsIDs = Marshal.GetDelegateForFunctionPointer<FRequestEligiblePromoItemDefinitionsIDs>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(184)));
		_GetEligiblePromoItemDefinitionIDs = Marshal.GetDelegateForFunctionPointer<FGetEligiblePromoItemDefinitionIDs>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(192)));
		_StartPurchase = Marshal.GetDelegateForFunctionPointer<FStartPurchase>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(200)));
		_RequestPrices = Marshal.GetDelegateForFunctionPointer<FRequestPrices>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(208)));
		_GetNumItemsWithPrices = Marshal.GetDelegateForFunctionPointer<FGetNumItemsWithPrices>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(216)));
		_GetItemsWithPrices = Marshal.GetDelegateForFunctionPointer<FGetItemsWithPrices>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(224)));
		_GetItemPrice = Marshal.GetDelegateForFunctionPointer<FGetItemPrice>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(232)));
		_StartUpdateProperties = Marshal.GetDelegateForFunctionPointer<FStartUpdateProperties>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(240)));
		_RemoveProperty = Marshal.GetDelegateForFunctionPointer<FRemoveProperty>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(248)));
		_SetProperty1 = Marshal.GetDelegateForFunctionPointer<FSetProperty1>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(256)));
		_SetProperty2 = Marshal.GetDelegateForFunctionPointer<FSetProperty2>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(264)));
		_SetProperty3 = Marshal.GetDelegateForFunctionPointer<FSetProperty3>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(272)));
		_SetProperty4 = Marshal.GetDelegateForFunctionPointer<FSetProperty4>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(280)));
		_SubmitUpdateProperties = Marshal.GetDelegateForFunctionPointer<FSubmitUpdateProperties>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(288)));
	}

	internal override void Shutdown()
	{
		base.Shutdown();
		_GetResultStatus = null;
		_GetResultItems = null;
		_GetResultItemProperty = null;
		_GetResultTimestamp = null;
		_CheckResultSteamID = null;
		_DestroyResult = null;
		_GetAllItems = null;
		_GetItemsByID = null;
		_SerializeResult = null;
		_DeserializeResult = null;
		_GenerateItems = null;
		_GrantPromoItems = null;
		_AddPromoItem = null;
		_AddPromoItems = null;
		_ConsumeItem = null;
		_ExchangeItems = null;
		_TransferItemQuantity = null;
		_SendItemDropHeartbeat = null;
		_TriggerItemDrop = null;
		_TradeItems = null;
		_LoadItemDefinitions = null;
		_GetItemDefinitionIDs = null;
		_GetItemDefinitionProperty = null;
		_RequestEligiblePromoItemDefinitionsIDs = null;
		_GetEligiblePromoItemDefinitionIDs = null;
		_StartPurchase = null;
		_RequestPrices = null;
		_GetNumItemsWithPrices = null;
		_GetItemsWithPrices = null;
		_GetItemPrice = null;
		_StartUpdateProperties = null;
		_RemoveProperty = null;
		_SetProperty1 = null;
		_SetProperty2 = null;
		_SetProperty3 = null;
		_SetProperty4 = null;
		_SubmitUpdateProperties = null;
	}

	internal Result GetResultStatus(SteamInventoryResult_t resultHandle)
	{
		return _GetResultStatus(Self, resultHandle);
	}

	internal bool GetResultItems(SteamInventoryResult_t resultHandle, [In][Out] SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize)
	{
		return _GetResultItems(Self, resultHandle, pOutItemsArray, ref punOutItemsArraySize);
	}

	internal bool GetResultItemProperty(SteamInventoryResult_t resultHandle, uint unItemIndex, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchPropertyName, out string pchValueBuffer, ref uint punValueBufferSizeOut)
	{
		IntPtr intPtr = Helpers.TakeMemory();
		bool result = _GetResultItemProperty(Self, resultHandle, unItemIndex, pchPropertyName, intPtr, ref punValueBufferSizeOut);
		pchValueBuffer = Helpers.MemoryToString(intPtr);
		return result;
	}

	internal uint GetResultTimestamp(SteamInventoryResult_t resultHandle)
	{
		return _GetResultTimestamp(Self, resultHandle);
	}

	internal bool CheckResultSteamID(SteamInventoryResult_t resultHandle, SteamId steamIDExpected)
	{
		return _CheckResultSteamID(Self, resultHandle, steamIDExpected);
	}

	internal void DestroyResult(SteamInventoryResult_t resultHandle)
	{
		_DestroyResult(Self, resultHandle);
	}

	internal bool GetAllItems(ref SteamInventoryResult_t pResultHandle)
	{
		return _GetAllItems(Self, ref pResultHandle);
	}

	internal bool GetItemsByID(ref SteamInventoryResult_t pResultHandle, ref InventoryItemId pInstanceIDs, uint unCountInstanceIDs)
	{
		return _GetItemsByID(Self, ref pResultHandle, ref pInstanceIDs, unCountInstanceIDs);
	}

	internal bool SerializeResult(SteamInventoryResult_t resultHandle, IntPtr pOutBuffer, ref uint punOutBufferSize)
	{
		return _SerializeResult(Self, resultHandle, pOutBuffer, ref punOutBufferSize);
	}

	internal bool DeserializeResult(ref SteamInventoryResult_t pOutResultHandle, IntPtr pBuffer, uint unBufferSize, [MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE)
	{
		return _DeserializeResult(Self, ref pOutResultHandle, pBuffer, unBufferSize, bRESERVED_MUST_BE_FALSE);
	}

	internal bool GenerateItems(ref SteamInventoryResult_t pResultHandle, [In][Out] InventoryDefId[] pArrayItemDefs, [In][Out] uint[] punArrayQuantity, uint unArrayLength)
	{
		return _GenerateItems(Self, ref pResultHandle, pArrayItemDefs, punArrayQuantity, unArrayLength);
	}

	internal bool GrantPromoItems(ref SteamInventoryResult_t pResultHandle)
	{
		return _GrantPromoItems(Self, ref pResultHandle);
	}

	internal bool AddPromoItem(ref SteamInventoryResult_t pResultHandle, InventoryDefId itemDef)
	{
		return _AddPromoItem(Self, ref pResultHandle, itemDef);
	}

	internal bool AddPromoItems(ref SteamInventoryResult_t pResultHandle, [In][Out] InventoryDefId[] pArrayItemDefs, uint unArrayLength)
	{
		return _AddPromoItems(Self, ref pResultHandle, pArrayItemDefs, unArrayLength);
	}

	internal bool ConsumeItem(ref SteamInventoryResult_t pResultHandle, InventoryItemId itemConsume, uint unQuantity)
	{
		return _ConsumeItem(Self, ref pResultHandle, itemConsume, unQuantity);
	}

	internal bool ExchangeItems(ref SteamInventoryResult_t pResultHandle, [In][Out] InventoryDefId[] pArrayGenerate, [In][Out] uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, [In][Out] InventoryItemId[] pArrayDestroy, [In][Out] uint[] punArrayDestroyQuantity, uint unArrayDestroyLength)
	{
		return _ExchangeItems(Self, ref pResultHandle, pArrayGenerate, punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy, punArrayDestroyQuantity, unArrayDestroyLength);
	}

	internal bool TransferItemQuantity(ref SteamInventoryResult_t pResultHandle, InventoryItemId itemIdSource, uint unQuantity, InventoryItemId itemIdDest)
	{
		return _TransferItemQuantity(Self, ref pResultHandle, itemIdSource, unQuantity, itemIdDest);
	}

	internal void SendItemDropHeartbeat()
	{
		_SendItemDropHeartbeat(Self);
	}

	internal bool TriggerItemDrop(ref SteamInventoryResult_t pResultHandle, InventoryDefId dropListDefinition)
	{
		return _TriggerItemDrop(Self, ref pResultHandle, dropListDefinition);
	}

	internal bool TradeItems(ref SteamInventoryResult_t pResultHandle, SteamId steamIDTradePartner, [In][Out] InventoryItemId[] pArrayGive, [In][Out] uint[] pArrayGiveQuantity, uint nArrayGiveLength, [In][Out] InventoryItemId[] pArrayGet, [In][Out] uint[] pArrayGetQuantity, uint nArrayGetLength)
	{
		return _TradeItems(Self, ref pResultHandle, steamIDTradePartner, pArrayGive, pArrayGiveQuantity, nArrayGiveLength, pArrayGet, pArrayGetQuantity, nArrayGetLength);
	}

	internal bool LoadItemDefinitions()
	{
		return _LoadItemDefinitions(Self);
	}

	internal bool GetItemDefinitionIDs([In][Out] InventoryDefId[] pItemDefIDs, ref uint punItemDefIDsArraySize)
	{
		return _GetItemDefinitionIDs(Self, pItemDefIDs, ref punItemDefIDsArraySize);
	}

	internal bool GetItemDefinitionProperty(InventoryDefId iDefinition, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchPropertyName, out string pchValueBuffer, ref uint punValueBufferSizeOut)
	{
		IntPtr intPtr = Helpers.TakeMemory();
		bool result = _GetItemDefinitionProperty(Self, iDefinition, pchPropertyName, intPtr, ref punValueBufferSizeOut);
		pchValueBuffer = Helpers.MemoryToString(intPtr);
		return result;
	}

	internal async Task<SteamInventoryEligiblePromoItemDefIDs_t?> RequestEligiblePromoItemDefinitionsIDs(SteamId steamID)
	{
		SteamAPICall_t returnValue = _RequestEligiblePromoItemDefinitionsIDs(Self, steamID);
		return await SteamInventoryEligiblePromoItemDefIDs_t.GetResultAsync(returnValue);
	}

	internal bool GetEligiblePromoItemDefinitionIDs(SteamId steamID, [In][Out] InventoryDefId[] pItemDefIDs, ref uint punItemDefIDsArraySize)
	{
		return _GetEligiblePromoItemDefinitionIDs(Self, steamID, pItemDefIDs, ref punItemDefIDsArraySize);
	}

	internal async Task<SteamInventoryStartPurchaseResult_t?> StartPurchase([In][Out] InventoryDefId[] pArrayItemDefs, [In][Out] uint[] punArrayQuantity, uint unArrayLength)
	{
		SteamAPICall_t returnValue = _StartPurchase(Self, pArrayItemDefs, punArrayQuantity, unArrayLength);
		return await SteamInventoryStartPurchaseResult_t.GetResultAsync(returnValue);
	}

	internal async Task<SteamInventoryRequestPricesResult_t?> RequestPrices()
	{
		SteamAPICall_t returnValue = _RequestPrices(Self);
		return await SteamInventoryRequestPricesResult_t.GetResultAsync(returnValue);
	}

	internal uint GetNumItemsWithPrices()
	{
		return _GetNumItemsWithPrices(Self);
	}

	internal bool GetItemsWithPrices([In][Out] InventoryDefId[] pArrayItemDefs, [In][Out] ulong[] pCurrentPrices, [In][Out] ulong[] pBasePrices, uint unArrayLength)
	{
		return _GetItemsWithPrices(Self, pArrayItemDefs, pCurrentPrices, pBasePrices, unArrayLength);
	}

	internal bool GetItemPrice(InventoryDefId iDefinition, ref ulong pCurrentPrice, ref ulong pBasePrice)
	{
		return _GetItemPrice(Self, iDefinition, ref pCurrentPrice, ref pBasePrice);
	}

	internal SteamInventoryUpdateHandle_t StartUpdateProperties()
	{
		return _StartUpdateProperties(Self);
	}

	internal bool RemoveProperty(SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchPropertyName)
	{
		return _RemoveProperty(Self, handle, nItemID, pchPropertyName);
	}

	internal bool SetProperty1(SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchPropertyName, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchPropertyValue)
	{
		return _SetProperty1(Self, handle, nItemID, pchPropertyName, pchPropertyValue);
	}

	internal bool SetProperty2(SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchPropertyName, [MarshalAs(UnmanagedType.U1)] bool bValue)
	{
		return _SetProperty2(Self, handle, nItemID, pchPropertyName, bValue);
	}

	internal bool SetProperty3(SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchPropertyName, long nValue)
	{
		return _SetProperty3(Self, handle, nItemID, pchPropertyName, nValue);
	}

	internal bool SetProperty4(SteamInventoryUpdateHandle_t handle, InventoryItemId nItemID, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchPropertyName, float flValue)
	{
		return _SetProperty4(Self, handle, nItemID, pchPropertyName, flValue);
	}

	internal bool SubmitUpdateProperties(SteamInventoryUpdateHandle_t handle, ref SteamInventoryResult_t pResultHandle)
	{
		return _SubmitUpdateProperties(Self, handle, ref pResultHandle);
	}
}
