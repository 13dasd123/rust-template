using System;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using Steamworks;
using Steamworks.Data;

internal class ISteamRemoteStorage : SteamInterface
{
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FFileWrite(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFile, IntPtr pvData, int cubData);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FFileRead(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFile, IntPtr pvData, int cubDataToRead);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FFileWriteAsync(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFile, IntPtr pvData, uint cubData);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FFileReadAsync(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFile, uint nOffset, uint cubToRead);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FFileReadAsyncComplete(IntPtr self, SteamAPICall_t hReadCall, IntPtr pvBuffer, uint cubToRead);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FFileForget(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFile);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FFileDelete(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFile);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FFileShare(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFile);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetSyncPlatforms(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFile, RemoteStoragePlatform eRemoteStoragePlatform);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate UGCFileWriteStreamHandle_t FFileWriteStreamOpen(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFile);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FFileWriteStreamWriteChunk(IntPtr self, UGCFileWriteStreamHandle_t writeHandle, IntPtr pvData, int cubData);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FFileWriteStreamClose(IntPtr self, UGCFileWriteStreamHandle_t writeHandle);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FFileWriteStreamCancel(IntPtr self, UGCFileWriteStreamHandle_t writeHandle);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FFileExists(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFile);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FFilePersisted(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFile);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetFileSize(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFile);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate long FGetFileTimestamp(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFile);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate RemoteStoragePlatform FGetSyncPlatforms(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFile);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetFileCount(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Utf8StringPointer FGetFileNameAndSize(IntPtr self, int iFile, ref int pnFileSizeInBytes);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetQuota(IntPtr self, ref ulong pnTotalBytes, ref ulong puAvailableBytes);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FIsCloudEnabledForAccount(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FIsCloudEnabledForApp(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetCloudEnabledForApp(IntPtr self, [MarshalAs(UnmanagedType.U1)] bool bEnabled);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FUGCDownload(IntPtr self, UGCHandle_t hContent, uint unPriority);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetUGCDownloadProgress(IntPtr self, UGCHandle_t hContent, ref int pnBytesDownloaded, ref int pnBytesExpected);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetUGCDetails(IntPtr self, UGCHandle_t hContent, ref AppId pnAppID, [In][Out] ref char[] ppchName, ref int pnFileSizeInBytes, ref SteamId pSteamIDOwner);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FUGCRead(IntPtr self, UGCHandle_t hContent, IntPtr pvData, int cubDataToRead, uint cOffset, UGCReadAction eAction);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetCachedUGCCount(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FUGCDownloadToLocation(IntPtr self, UGCHandle_t hContent, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchLocation, uint unPriority);

	private FFileWrite _FileWrite;

	private FFileRead _FileRead;

	private FFileWriteAsync _FileWriteAsync;

	private FFileReadAsync _FileReadAsync;

	private FFileReadAsyncComplete _FileReadAsyncComplete;

	private FFileForget _FileForget;

	private FFileDelete _FileDelete;

	private FFileShare _FileShare;

	private FSetSyncPlatforms _SetSyncPlatforms;

	private FFileWriteStreamOpen _FileWriteStreamOpen;

	private FFileWriteStreamWriteChunk _FileWriteStreamWriteChunk;

	private FFileWriteStreamClose _FileWriteStreamClose;

	private FFileWriteStreamCancel _FileWriteStreamCancel;

	private FFileExists _FileExists;

	private FFilePersisted _FilePersisted;

	private FGetFileSize _GetFileSize;

	private FGetFileTimestamp _GetFileTimestamp;

	private FGetSyncPlatforms _GetSyncPlatforms;

	private FGetFileCount _GetFileCount;

	private FGetFileNameAndSize _GetFileNameAndSize;

	private FGetQuota _GetQuota;

	private FIsCloudEnabledForAccount _IsCloudEnabledForAccount;

	private FIsCloudEnabledForApp _IsCloudEnabledForApp;

	private FSetCloudEnabledForApp _SetCloudEnabledForApp;

	private FUGCDownload _UGCDownload;

	private FGetUGCDownloadProgress _GetUGCDownloadProgress;

	private FGetUGCDetails _GetUGCDetails;

	private FUGCRead _UGCRead;

	private FGetCachedUGCCount _GetCachedUGCCount;

	private FUGCDownloadToLocation _UGCDownloadToLocation;

	public override string InterfaceName => "STEAMREMOTESTORAGE_INTERFACE_VERSION014";

	public override void InitInternals()
	{
		_FileWrite = Marshal.GetDelegateForFunctionPointer<FFileWrite>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(0)));
		_FileRead = Marshal.GetDelegateForFunctionPointer<FFileRead>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(8)));
		_FileWriteAsync = Marshal.GetDelegateForFunctionPointer<FFileWriteAsync>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(16)));
		_FileReadAsync = Marshal.GetDelegateForFunctionPointer<FFileReadAsync>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(24)));
		_FileReadAsyncComplete = Marshal.GetDelegateForFunctionPointer<FFileReadAsyncComplete>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(32)));
		_FileForget = Marshal.GetDelegateForFunctionPointer<FFileForget>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(40)));
		_FileDelete = Marshal.GetDelegateForFunctionPointer<FFileDelete>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(48)));
		_FileShare = Marshal.GetDelegateForFunctionPointer<FFileShare>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(56)));
		_SetSyncPlatforms = Marshal.GetDelegateForFunctionPointer<FSetSyncPlatforms>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(64)));
		_FileWriteStreamOpen = Marshal.GetDelegateForFunctionPointer<FFileWriteStreamOpen>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(72)));
		_FileWriteStreamWriteChunk = Marshal.GetDelegateForFunctionPointer<FFileWriteStreamWriteChunk>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(80)));
		_FileWriteStreamClose = Marshal.GetDelegateForFunctionPointer<FFileWriteStreamClose>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(88)));
		_FileWriteStreamCancel = Marshal.GetDelegateForFunctionPointer<FFileWriteStreamCancel>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(96)));
		_FileExists = Marshal.GetDelegateForFunctionPointer<FFileExists>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(104)));
		_FilePersisted = Marshal.GetDelegateForFunctionPointer<FFilePersisted>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(112)));
		_GetFileSize = Marshal.GetDelegateForFunctionPointer<FGetFileSize>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(120)));
		_GetFileTimestamp = Marshal.GetDelegateForFunctionPointer<FGetFileTimestamp>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(128)));
		_GetSyncPlatforms = Marshal.GetDelegateForFunctionPointer<FGetSyncPlatforms>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(136)));
		_GetFileCount = Marshal.GetDelegateForFunctionPointer<FGetFileCount>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(144)));
		_GetFileNameAndSize = Marshal.GetDelegateForFunctionPointer<FGetFileNameAndSize>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(152)));
		_GetQuota = Marshal.GetDelegateForFunctionPointer<FGetQuota>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(160)));
		_IsCloudEnabledForAccount = Marshal.GetDelegateForFunctionPointer<FIsCloudEnabledForAccount>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(168)));
		_IsCloudEnabledForApp = Marshal.GetDelegateForFunctionPointer<FIsCloudEnabledForApp>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(176)));
		_SetCloudEnabledForApp = Marshal.GetDelegateForFunctionPointer<FSetCloudEnabledForApp>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(184)));
		_UGCDownload = Marshal.GetDelegateForFunctionPointer<FUGCDownload>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(192)));
		_GetUGCDownloadProgress = Marshal.GetDelegateForFunctionPointer<FGetUGCDownloadProgress>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(200)));
		_GetUGCDetails = Marshal.GetDelegateForFunctionPointer<FGetUGCDetails>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(208)));
		_UGCRead = Marshal.GetDelegateForFunctionPointer<FUGCRead>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(216)));
		_GetCachedUGCCount = Marshal.GetDelegateForFunctionPointer<FGetCachedUGCCount>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(224)));
		_UGCDownloadToLocation = Marshal.GetDelegateForFunctionPointer<FUGCDownloadToLocation>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(424)));
	}

	internal override void Shutdown()
	{
		base.Shutdown();
		_FileWrite = null;
		_FileRead = null;
		_FileWriteAsync = null;
		_FileReadAsync = null;
		_FileReadAsyncComplete = null;
		_FileForget = null;
		_FileDelete = null;
		_FileShare = null;
		_SetSyncPlatforms = null;
		_FileWriteStreamOpen = null;
		_FileWriteStreamWriteChunk = null;
		_FileWriteStreamClose = null;
		_FileWriteStreamCancel = null;
		_FileExists = null;
		_FilePersisted = null;
		_GetFileSize = null;
		_GetFileTimestamp = null;
		_GetSyncPlatforms = null;
		_GetFileCount = null;
		_GetFileNameAndSize = null;
		_GetQuota = null;
		_IsCloudEnabledForAccount = null;
		_IsCloudEnabledForApp = null;
		_SetCloudEnabledForApp = null;
		_UGCDownload = null;
		_GetUGCDownloadProgress = null;
		_GetUGCDetails = null;
		_UGCRead = null;
		_GetCachedUGCCount = null;
		_UGCDownloadToLocation = null;
	}

	internal bool FileWrite([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFile, IntPtr pvData, int cubData)
	{
		return _FileWrite(Self, pchFile, pvData, cubData);
	}

	internal int FileRead([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFile, IntPtr pvData, int cubDataToRead)
	{
		return _FileRead(Self, pchFile, pvData, cubDataToRead);
	}

	internal async Task<RemoteStorageFileWriteAsyncComplete_t?> FileWriteAsync([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFile, IntPtr pvData, uint cubData)
	{
		SteamAPICall_t returnValue = _FileWriteAsync(Self, pchFile, pvData, cubData);
		return await RemoteStorageFileWriteAsyncComplete_t.GetResultAsync(returnValue);
	}

	internal async Task<RemoteStorageFileReadAsyncComplete_t?> FileReadAsync([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFile, uint nOffset, uint cubToRead)
	{
		SteamAPICall_t returnValue = _FileReadAsync(Self, pchFile, nOffset, cubToRead);
		return await RemoteStorageFileReadAsyncComplete_t.GetResultAsync(returnValue);
	}

	internal bool FileReadAsyncComplete(SteamAPICall_t hReadCall, IntPtr pvBuffer, uint cubToRead)
	{
		return _FileReadAsyncComplete(Self, hReadCall, pvBuffer, cubToRead);
	}

	internal bool FileForget([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFile)
	{
		return _FileForget(Self, pchFile);
	}

	internal bool FileDelete([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFile)
	{
		return _FileDelete(Self, pchFile);
	}

	internal async Task<RemoteStorageFileShareResult_t?> FileShare([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFile)
	{
		SteamAPICall_t returnValue = _FileShare(Self, pchFile);
		return await RemoteStorageFileShareResult_t.GetResultAsync(returnValue);
	}

	internal bool SetSyncPlatforms([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFile, RemoteStoragePlatform eRemoteStoragePlatform)
	{
		return _SetSyncPlatforms(Self, pchFile, eRemoteStoragePlatform);
	}

	internal UGCFileWriteStreamHandle_t FileWriteStreamOpen([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFile)
	{
		return _FileWriteStreamOpen(Self, pchFile);
	}

	internal bool FileWriteStreamWriteChunk(UGCFileWriteStreamHandle_t writeHandle, IntPtr pvData, int cubData)
	{
		return _FileWriteStreamWriteChunk(Self, writeHandle, pvData, cubData);
	}

	internal bool FileWriteStreamClose(UGCFileWriteStreamHandle_t writeHandle)
	{
		return _FileWriteStreamClose(Self, writeHandle);
	}

	internal bool FileWriteStreamCancel(UGCFileWriteStreamHandle_t writeHandle)
	{
		return _FileWriteStreamCancel(Self, writeHandle);
	}

	internal bool FileExists([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFile)
	{
		return _FileExists(Self, pchFile);
	}

	internal bool FilePersisted([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFile)
	{
		return _FilePersisted(Self, pchFile);
	}

	internal int GetFileSize([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFile)
	{
		return _GetFileSize(Self, pchFile);
	}

	internal long GetFileTimestamp([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFile)
	{
		return _GetFileTimestamp(Self, pchFile);
	}

	internal RemoteStoragePlatform GetSyncPlatforms([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFile)
	{
		return _GetSyncPlatforms(Self, pchFile);
	}

	internal int GetFileCount()
	{
		return _GetFileCount(Self);
	}

	internal string GetFileNameAndSize(int iFile, ref int pnFileSizeInBytes)
	{
		Utf8StringPointer utf8StringPointer = _GetFileNameAndSize(Self, iFile, ref pnFileSizeInBytes);
		return utf8StringPointer;
	}

	internal bool GetQuota(ref ulong pnTotalBytes, ref ulong puAvailableBytes)
	{
		return _GetQuota(Self, ref pnTotalBytes, ref puAvailableBytes);
	}

	internal bool IsCloudEnabledForAccount()
	{
		return _IsCloudEnabledForAccount(Self);
	}

	internal bool IsCloudEnabledForApp()
	{
		return _IsCloudEnabledForApp(Self);
	}

	internal void SetCloudEnabledForApp([MarshalAs(UnmanagedType.U1)] bool bEnabled)
	{
		_SetCloudEnabledForApp(Self, bEnabled);
	}

	internal async Task<RemoteStorageDownloadUGCResult_t?> UGCDownload(UGCHandle_t hContent, uint unPriority)
	{
		SteamAPICall_t returnValue = _UGCDownload(Self, hContent, unPriority);
		return await RemoteStorageDownloadUGCResult_t.GetResultAsync(returnValue);
	}

	internal bool GetUGCDownloadProgress(UGCHandle_t hContent, ref int pnBytesDownloaded, ref int pnBytesExpected)
	{
		return _GetUGCDownloadProgress(Self, hContent, ref pnBytesDownloaded, ref pnBytesExpected);
	}

	internal bool GetUGCDetails(UGCHandle_t hContent, ref AppId pnAppID, [In][Out] ref char[] ppchName, ref int pnFileSizeInBytes, ref SteamId pSteamIDOwner)
	{
		return _GetUGCDetails(Self, hContent, ref pnAppID, ref ppchName, ref pnFileSizeInBytes, ref pSteamIDOwner);
	}

	internal int UGCRead(UGCHandle_t hContent, IntPtr pvData, int cubDataToRead, uint cOffset, UGCReadAction eAction)
	{
		return _UGCRead(Self, hContent, pvData, cubDataToRead, cOffset, eAction);
	}

	internal int GetCachedUGCCount()
	{
		return _GetCachedUGCCount(Self);
	}

	internal async Task<RemoteStorageDownloadUGCResult_t?> UGCDownloadToLocation(UGCHandle_t hContent, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchLocation, uint unPriority)
	{
		SteamAPICall_t returnValue = _UGCDownloadToLocation(Self, hContent, pchLocation, unPriority);
		return await RemoteStorageDownloadUGCResult_t.GetResultAsync(returnValue);
	}
}
