using System;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using Steamworks;
using Steamworks.Data;

[StructLayout(LayoutKind.Sequential, Pack = 4)]
internal struct SocketStatusCallback_t
{
	internal uint Socket;

	internal uint ListenSocket;

	internal ulong SteamIDRemote;

	internal int SNetSocketState;

	internal static readonly int StructSize = Marshal.SizeOf(typeof(SocketStatusCallback_t));

	private static Action<SocketStatusCallback_t> actionClient;

	private static Action<SocketStatusCallback_t> actionServer;

	internal static SocketStatusCallback_t Fill(IntPtr p)
	{
		return (SocketStatusCallback_t)Marshal.PtrToStructure(p, typeof(SocketStatusCallback_t));
	}

	[MonoPInvokeCallback]
	private static void OnClient(IntPtr thisptr, IntPtr pvParam)
	{
		actionClient?.Invoke(Fill(pvParam));
	}

	[MonoPInvokeCallback]
	private static void OnServer(IntPtr thisptr, IntPtr pvParam)
	{
		actionServer?.Invoke(Fill(pvParam));
	}

	public static void Install(Action<SocketStatusCallback_t> action, bool server = false)
	{
		if (server)
		{
			Event.Register(OnServer, StructSize, 1201, gameserver: true);
			actionServer = action;
		}
		else
		{
			Event.Register(OnClient, StructSize, 1201, gameserver: false);
			actionClient = action;
		}
	}

	public static async Task<SocketStatusCallback_t?> GetResultAsync(SteamAPICall_t handle)
	{
		bool failed = false;
		while (!SteamUtils.IsCallComplete(handle, out failed))
		{
			await Task.Delay(1);
			if (!SteamClient.IsValid && !SteamServer.IsValid)
			{
				return null;
			}
		}
		if (failed)
		{
			return null;
		}
		IntPtr ptr = Marshal.AllocHGlobal(StructSize);
		try
		{
			if (!SteamUtils.Internal.GetAPICallResult(handle, ptr, StructSize, 1201, ref failed) || failed)
			{
				return null;
			}
			return Fill(ptr);
		}
		finally
		{
			Marshal.FreeHGlobal(ptr);
		}
	}
}
