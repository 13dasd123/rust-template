using System;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using Steamworks;
using Steamworks.Data;

internal class ISteamUserStats : SteamInterface
{
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FRequestCurrentStats(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetStat1(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, ref int pData);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetStat2(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, ref float pData);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetStat1(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, int nData);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetStat2(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, float fData);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FUpdateAvgRateStat(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, float flCountThisSession, double dSessionLength);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetAchievement(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetAchievement(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FClearAchievement(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetAchievementAndUnlockTime(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved, ref uint punUnlockTime);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FStoreStats(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetAchievementIcon(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Utf8StringPointer FGetAchievementDisplayAttribute(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKey);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FIndicateAchievementProgress(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, uint nCurProgress, uint nMaxProgress);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate uint FGetNumAchievements(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Utf8StringPointer FGetAchievementName(IntPtr self, uint iAchievement);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FRequestUserStats(IntPtr self, SteamId steamIDUser);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetUserStat1(IntPtr self, SteamId steamIDUser, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, ref int pData);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetUserStat2(IntPtr self, SteamId steamIDUser, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, ref float pData);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetUserAchievement(IntPtr self, SteamId steamIDUser, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetUserAchievementAndUnlockTime(IntPtr self, SteamId steamIDUser, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved, ref uint punUnlockTime);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FResetAllStats(IntPtr self, [MarshalAs(UnmanagedType.U1)] bool bAchievementsToo);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FFindOrCreateLeaderboard(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchLeaderboardName, LeaderboardSort eLeaderboardSortMethod, LeaderboardDisplay eLeaderboardDisplayType);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FFindLeaderboard(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchLeaderboardName);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Utf8StringPointer FGetLeaderboardName(IntPtr self, SteamLeaderboard_t hSteamLeaderboard);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetLeaderboardEntryCount(IntPtr self, SteamLeaderboard_t hSteamLeaderboard);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate LeaderboardSort FGetLeaderboardSortMethod(IntPtr self, SteamLeaderboard_t hSteamLeaderboard);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate LeaderboardDisplay FGetLeaderboardDisplayType(IntPtr self, SteamLeaderboard_t hSteamLeaderboard);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FDownloadLeaderboardEntries(IntPtr self, SteamLeaderboard_t hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FDownloadLeaderboardEntriesForUsers(IntPtr self, SteamLeaderboard_t hSteamLeaderboard, [In][Out] SteamId[] prgUsers, int cUsers);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetDownloadedLeaderboardEntry(IntPtr self, SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, ref LeaderboardEntry_t pLeaderboardEntry, [In][Out] int[] pDetails, int cDetailsMax);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FUploadLeaderboardScore(IntPtr self, SteamLeaderboard_t hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, [In][Out] int[] pScoreDetails, int cScoreDetailsCount);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FAttachLeaderboardUGC(IntPtr self, SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FGetNumberOfCurrentPlayers(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FRequestGlobalAchievementPercentages(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetMostAchievedAchievementInfo(IntPtr self, IntPtr pchName, uint unNameBufLen, ref float pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetNextMostAchievedAchievementInfo(IntPtr self, int iIteratorPrevious, IntPtr pchName, uint unNameBufLen, ref float pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetAchievementAchievedPercent(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, ref float pflPercent);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FRequestGlobalStats(IntPtr self, int nHistoryDays);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetGlobalStat1(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchStatName, ref long pData);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetGlobalStat2(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchStatName, ref double pData);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetGlobalStatHistory1(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchStatName, [In][Out] long[] pData, uint cubData);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetGlobalStatHistory2(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchStatName, [In][Out] double[] pData, uint cubData);

	private FRequestCurrentStats _RequestCurrentStats;

	private FGetStat1 _GetStat1;

	private FGetStat2 _GetStat2;

	private FSetStat1 _SetStat1;

	private FSetStat2 _SetStat2;

	private FUpdateAvgRateStat _UpdateAvgRateStat;

	private FGetAchievement _GetAchievement;

	private FSetAchievement _SetAchievement;

	private FClearAchievement _ClearAchievement;

	private FGetAchievementAndUnlockTime _GetAchievementAndUnlockTime;

	private FStoreStats _StoreStats;

	private FGetAchievementIcon _GetAchievementIcon;

	private FGetAchievementDisplayAttribute _GetAchievementDisplayAttribute;

	private FIndicateAchievementProgress _IndicateAchievementProgress;

	private FGetNumAchievements _GetNumAchievements;

	private FGetAchievementName _GetAchievementName;

	private FRequestUserStats _RequestUserStats;

	private FGetUserStat1 _GetUserStat1;

	private FGetUserStat2 _GetUserStat2;

	private FGetUserAchievement _GetUserAchievement;

	private FGetUserAchievementAndUnlockTime _GetUserAchievementAndUnlockTime;

	private FResetAllStats _ResetAllStats;

	private FFindOrCreateLeaderboard _FindOrCreateLeaderboard;

	private FFindLeaderboard _FindLeaderboard;

	private FGetLeaderboardName _GetLeaderboardName;

	private FGetLeaderboardEntryCount _GetLeaderboardEntryCount;

	private FGetLeaderboardSortMethod _GetLeaderboardSortMethod;

	private FGetLeaderboardDisplayType _GetLeaderboardDisplayType;

	private FDownloadLeaderboardEntries _DownloadLeaderboardEntries;

	private FDownloadLeaderboardEntriesForUsers _DownloadLeaderboardEntriesForUsers;

	private FGetDownloadedLeaderboardEntry _GetDownloadedLeaderboardEntry;

	private FUploadLeaderboardScore _UploadLeaderboardScore;

	private FAttachLeaderboardUGC _AttachLeaderboardUGC;

	private FGetNumberOfCurrentPlayers _GetNumberOfCurrentPlayers;

	private FRequestGlobalAchievementPercentages _RequestGlobalAchievementPercentages;

	private FGetMostAchievedAchievementInfo _GetMostAchievedAchievementInfo;

	private FGetNextMostAchievedAchievementInfo _GetNextMostAchievedAchievementInfo;

	private FGetAchievementAchievedPercent _GetAchievementAchievedPercent;

	private FRequestGlobalStats _RequestGlobalStats;

	private FGetGlobalStat1 _GetGlobalStat1;

	private FGetGlobalStat2 _GetGlobalStat2;

	private FGetGlobalStatHistory1 _GetGlobalStatHistory1;

	private FGetGlobalStatHistory2 _GetGlobalStatHistory2;

	public override string InterfaceName => "STEAMUSERSTATS_INTERFACE_VERSION011";

	public override void InitInternals()
	{
		_RequestCurrentStats = Marshal.GetDelegateForFunctionPointer<FRequestCurrentStats>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(0)));
		_UpdateAvgRateStat = Marshal.GetDelegateForFunctionPointer<FUpdateAvgRateStat>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(40)));
		_GetAchievement = Marshal.GetDelegateForFunctionPointer<FGetAchievement>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(48)));
		_SetAchievement = Marshal.GetDelegateForFunctionPointer<FSetAchievement>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(56)));
		_ClearAchievement = Marshal.GetDelegateForFunctionPointer<FClearAchievement>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(64)));
		_GetAchievementAndUnlockTime = Marshal.GetDelegateForFunctionPointer<FGetAchievementAndUnlockTime>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(72)));
		_StoreStats = Marshal.GetDelegateForFunctionPointer<FStoreStats>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(80)));
		_GetAchievementIcon = Marshal.GetDelegateForFunctionPointer<FGetAchievementIcon>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(88)));
		_GetAchievementDisplayAttribute = Marshal.GetDelegateForFunctionPointer<FGetAchievementDisplayAttribute>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(96)));
		_IndicateAchievementProgress = Marshal.GetDelegateForFunctionPointer<FIndicateAchievementProgress>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(104)));
		_GetNumAchievements = Marshal.GetDelegateForFunctionPointer<FGetNumAchievements>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(112)));
		_GetAchievementName = Marshal.GetDelegateForFunctionPointer<FGetAchievementName>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(120)));
		_RequestUserStats = Marshal.GetDelegateForFunctionPointer<FRequestUserStats>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(128)));
		_GetUserAchievement = Marshal.GetDelegateForFunctionPointer<FGetUserAchievement>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(152)));
		_GetUserAchievementAndUnlockTime = Marshal.GetDelegateForFunctionPointer<FGetUserAchievementAndUnlockTime>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(160)));
		_ResetAllStats = Marshal.GetDelegateForFunctionPointer<FResetAllStats>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(168)));
		_FindOrCreateLeaderboard = Marshal.GetDelegateForFunctionPointer<FFindOrCreateLeaderboard>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(176)));
		_FindLeaderboard = Marshal.GetDelegateForFunctionPointer<FFindLeaderboard>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(184)));
		_GetLeaderboardName = Marshal.GetDelegateForFunctionPointer<FGetLeaderboardName>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(192)));
		_GetLeaderboardEntryCount = Marshal.GetDelegateForFunctionPointer<FGetLeaderboardEntryCount>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(200)));
		_GetLeaderboardSortMethod = Marshal.GetDelegateForFunctionPointer<FGetLeaderboardSortMethod>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(208)));
		_GetLeaderboardDisplayType = Marshal.GetDelegateForFunctionPointer<FGetLeaderboardDisplayType>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(216)));
		_DownloadLeaderboardEntries = Marshal.GetDelegateForFunctionPointer<FDownloadLeaderboardEntries>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(224)));
		_DownloadLeaderboardEntriesForUsers = Marshal.GetDelegateForFunctionPointer<FDownloadLeaderboardEntriesForUsers>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(232)));
		_GetDownloadedLeaderboardEntry = Marshal.GetDelegateForFunctionPointer<FGetDownloadedLeaderboardEntry>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(240)));
		_UploadLeaderboardScore = Marshal.GetDelegateForFunctionPointer<FUploadLeaderboardScore>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(248)));
		_AttachLeaderboardUGC = Marshal.GetDelegateForFunctionPointer<FAttachLeaderboardUGC>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(256)));
		_GetNumberOfCurrentPlayers = Marshal.GetDelegateForFunctionPointer<FGetNumberOfCurrentPlayers>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(264)));
		_RequestGlobalAchievementPercentages = Marshal.GetDelegateForFunctionPointer<FRequestGlobalAchievementPercentages>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(272)));
		_GetMostAchievedAchievementInfo = Marshal.GetDelegateForFunctionPointer<FGetMostAchievedAchievementInfo>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(280)));
		_GetNextMostAchievedAchievementInfo = Marshal.GetDelegateForFunctionPointer<FGetNextMostAchievedAchievementInfo>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(288)));
		_GetAchievementAchievedPercent = Marshal.GetDelegateForFunctionPointer<FGetAchievementAchievedPercent>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(296)));
		_RequestGlobalStats = Marshal.GetDelegateForFunctionPointer<FRequestGlobalStats>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(304)));
		_GetStat1 = Marshal.GetDelegateForFunctionPointer<FGetStat1>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(8)));
		_GetStat2 = Marshal.GetDelegateForFunctionPointer<FGetStat2>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(16)));
		_SetStat1 = Marshal.GetDelegateForFunctionPointer<FSetStat1>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(24)));
		_SetStat2 = Marshal.GetDelegateForFunctionPointer<FSetStat2>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(32)));
		_GetUserStat1 = Marshal.GetDelegateForFunctionPointer<FGetUserStat1>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(136)));
		_GetUserStat2 = Marshal.GetDelegateForFunctionPointer<FGetUserStat2>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(144)));
		_GetGlobalStat1 = Marshal.GetDelegateForFunctionPointer<FGetGlobalStat1>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(312)));
		_GetGlobalStat2 = Marshal.GetDelegateForFunctionPointer<FGetGlobalStat2>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(320)));
		_GetGlobalStatHistory1 = Marshal.GetDelegateForFunctionPointer<FGetGlobalStatHistory1>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(328)));
		_GetGlobalStatHistory2 = Marshal.GetDelegateForFunctionPointer<FGetGlobalStatHistory2>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(336)));
	}

	internal override void Shutdown()
	{
		base.Shutdown();
		_RequestCurrentStats = null;
		_GetStat1 = null;
		_GetStat2 = null;
		_SetStat1 = null;
		_SetStat2 = null;
		_UpdateAvgRateStat = null;
		_GetAchievement = null;
		_SetAchievement = null;
		_ClearAchievement = null;
		_GetAchievementAndUnlockTime = null;
		_StoreStats = null;
		_GetAchievementIcon = null;
		_GetAchievementDisplayAttribute = null;
		_IndicateAchievementProgress = null;
		_GetNumAchievements = null;
		_GetAchievementName = null;
		_RequestUserStats = null;
		_GetUserStat1 = null;
		_GetUserStat2 = null;
		_GetUserAchievement = null;
		_GetUserAchievementAndUnlockTime = null;
		_ResetAllStats = null;
		_FindOrCreateLeaderboard = null;
		_FindLeaderboard = null;
		_GetLeaderboardName = null;
		_GetLeaderboardEntryCount = null;
		_GetLeaderboardSortMethod = null;
		_GetLeaderboardDisplayType = null;
		_DownloadLeaderboardEntries = null;
		_DownloadLeaderboardEntriesForUsers = null;
		_GetDownloadedLeaderboardEntry = null;
		_UploadLeaderboardScore = null;
		_AttachLeaderboardUGC = null;
		_GetNumberOfCurrentPlayers = null;
		_RequestGlobalAchievementPercentages = null;
		_GetMostAchievedAchievementInfo = null;
		_GetNextMostAchievedAchievementInfo = null;
		_GetAchievementAchievedPercent = null;
		_RequestGlobalStats = null;
		_GetGlobalStat1 = null;
		_GetGlobalStat2 = null;
		_GetGlobalStatHistory1 = null;
		_GetGlobalStatHistory2 = null;
	}

	internal bool RequestCurrentStats()
	{
		return _RequestCurrentStats(Self);
	}

	internal bool GetStat1([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, ref int pData)
	{
		return _GetStat1(Self, pchName, ref pData);
	}

	internal bool GetStat2([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, ref float pData)
	{
		return _GetStat2(Self, pchName, ref pData);
	}

	internal bool SetStat1([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, int nData)
	{
		return _SetStat1(Self, pchName, nData);
	}

	internal bool SetStat2([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, float fData)
	{
		return _SetStat2(Self, pchName, fData);
	}

	internal bool UpdateAvgRateStat([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, float flCountThisSession, double dSessionLength)
	{
		return _UpdateAvgRateStat(Self, pchName, flCountThisSession, dSessionLength);
	}

	internal bool GetAchievement([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
	{
		return _GetAchievement(Self, pchName, ref pbAchieved);
	}

	internal bool SetAchievement([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName)
	{
		return _SetAchievement(Self, pchName);
	}

	internal bool ClearAchievement([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName)
	{
		return _ClearAchievement(Self, pchName);
	}

	internal bool GetAchievementAndUnlockTime([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved, ref uint punUnlockTime)
	{
		return _GetAchievementAndUnlockTime(Self, pchName, ref pbAchieved, ref punUnlockTime);
	}

	internal bool StoreStats()
	{
		return _StoreStats(Self);
	}

	internal int GetAchievementIcon([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName)
	{
		return _GetAchievementIcon(Self, pchName);
	}

	internal string GetAchievementDisplayAttribute([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKey)
	{
		Utf8StringPointer utf8StringPointer = _GetAchievementDisplayAttribute(Self, pchName, pchKey);
		return utf8StringPointer;
	}

	internal bool IndicateAchievementProgress([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, uint nCurProgress, uint nMaxProgress)
	{
		return _IndicateAchievementProgress(Self, pchName, nCurProgress, nMaxProgress);
	}

	internal uint GetNumAchievements()
	{
		return _GetNumAchievements(Self);
	}

	internal string GetAchievementName(uint iAchievement)
	{
		Utf8StringPointer utf8StringPointer = _GetAchievementName(Self, iAchievement);
		return utf8StringPointer;
	}

	internal async Task<UserStatsReceived_t?> RequestUserStats(SteamId steamIDUser)
	{
		SteamAPICall_t returnValue = _RequestUserStats(Self, steamIDUser);
		return await UserStatsReceived_t.GetResultAsync(returnValue);
	}

	internal bool GetUserStat1(SteamId steamIDUser, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, ref int pData)
	{
		return _GetUserStat1(Self, steamIDUser, pchName, ref pData);
	}

	internal bool GetUserStat2(SteamId steamIDUser, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, ref float pData)
	{
		return _GetUserStat2(Self, steamIDUser, pchName, ref pData);
	}

	internal bool GetUserAchievement(SteamId steamIDUser, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
	{
		return _GetUserAchievement(Self, steamIDUser, pchName, ref pbAchieved);
	}

	internal bool GetUserAchievementAndUnlockTime(SteamId steamIDUser, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved, ref uint punUnlockTime)
	{
		return _GetUserAchievementAndUnlockTime(Self, steamIDUser, pchName, ref pbAchieved, ref punUnlockTime);
	}

	internal bool ResetAllStats([MarshalAs(UnmanagedType.U1)] bool bAchievementsToo)
	{
		return _ResetAllStats(Self, bAchievementsToo);
	}

	internal async Task<LeaderboardFindResult_t?> FindOrCreateLeaderboard([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchLeaderboardName, LeaderboardSort eLeaderboardSortMethod, LeaderboardDisplay eLeaderboardDisplayType)
	{
		SteamAPICall_t returnValue = _FindOrCreateLeaderboard(Self, pchLeaderboardName, eLeaderboardSortMethod, eLeaderboardDisplayType);
		return await LeaderboardFindResult_t.GetResultAsync(returnValue);
	}

	internal async Task<LeaderboardFindResult_t?> FindLeaderboard([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchLeaderboardName)
	{
		SteamAPICall_t returnValue = _FindLeaderboard(Self, pchLeaderboardName);
		return await LeaderboardFindResult_t.GetResultAsync(returnValue);
	}

	internal string GetLeaderboardName(SteamLeaderboard_t hSteamLeaderboard)
	{
		Utf8StringPointer utf8StringPointer = _GetLeaderboardName(Self, hSteamLeaderboard);
		return utf8StringPointer;
	}

	internal int GetLeaderboardEntryCount(SteamLeaderboard_t hSteamLeaderboard)
	{
		return _GetLeaderboardEntryCount(Self, hSteamLeaderboard);
	}

	internal LeaderboardSort GetLeaderboardSortMethod(SteamLeaderboard_t hSteamLeaderboard)
	{
		return _GetLeaderboardSortMethod(Self, hSteamLeaderboard);
	}

	internal LeaderboardDisplay GetLeaderboardDisplayType(SteamLeaderboard_t hSteamLeaderboard)
	{
		return _GetLeaderboardDisplayType(Self, hSteamLeaderboard);
	}

	internal async Task<LeaderboardScoresDownloaded_t?> DownloadLeaderboardEntries(SteamLeaderboard_t hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)
	{
		SteamAPICall_t returnValue = _DownloadLeaderboardEntries(Self, hSteamLeaderboard, eLeaderboardDataRequest, nRangeStart, nRangeEnd);
		return await LeaderboardScoresDownloaded_t.GetResultAsync(returnValue);
	}

	internal async Task<LeaderboardScoresDownloaded_t?> DownloadLeaderboardEntriesForUsers(SteamLeaderboard_t hSteamLeaderboard, [In][Out] SteamId[] prgUsers, int cUsers)
	{
		SteamAPICall_t returnValue = _DownloadLeaderboardEntriesForUsers(Self, hSteamLeaderboard, prgUsers, cUsers);
		return await LeaderboardScoresDownloaded_t.GetResultAsync(returnValue);
	}

	internal bool GetDownloadedLeaderboardEntry(SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, ref LeaderboardEntry_t pLeaderboardEntry, [In][Out] int[] pDetails, int cDetailsMax)
	{
		return _GetDownloadedLeaderboardEntry(Self, hSteamLeaderboardEntries, index, ref pLeaderboardEntry, pDetails, cDetailsMax);
	}

	internal async Task<LeaderboardScoreUploaded_t?> UploadLeaderboardScore(SteamLeaderboard_t hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, [In][Out] int[] pScoreDetails, int cScoreDetailsCount)
	{
		SteamAPICall_t returnValue = _UploadLeaderboardScore(Self, hSteamLeaderboard, eLeaderboardUploadScoreMethod, nScore, pScoreDetails, cScoreDetailsCount);
		return await LeaderboardScoreUploaded_t.GetResultAsync(returnValue);
	}

	internal async Task<LeaderboardUGCSet_t?> AttachLeaderboardUGC(SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC)
	{
		SteamAPICall_t returnValue = _AttachLeaderboardUGC(Self, hSteamLeaderboard, hUGC);
		return await LeaderboardUGCSet_t.GetResultAsync(returnValue);
	}

	internal async Task<NumberOfCurrentPlayers_t?> GetNumberOfCurrentPlayers()
	{
		SteamAPICall_t returnValue = _GetNumberOfCurrentPlayers(Self);
		return await NumberOfCurrentPlayers_t.GetResultAsync(returnValue);
	}

	internal async Task<GlobalAchievementPercentagesReady_t?> RequestGlobalAchievementPercentages()
	{
		SteamAPICall_t returnValue = _RequestGlobalAchievementPercentages(Self);
		return await GlobalAchievementPercentagesReady_t.GetResultAsync(returnValue);
	}

	internal int GetMostAchievedAchievementInfo(out string pchName, ref float pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
	{
		IntPtr intPtr = Helpers.TakeMemory();
		int result = _GetMostAchievedAchievementInfo(Self, intPtr, 32768u, ref pflPercent, ref pbAchieved);
		pchName = Helpers.MemoryToString(intPtr);
		return result;
	}

	internal int GetNextMostAchievedAchievementInfo(int iIteratorPrevious, out string pchName, ref float pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
	{
		IntPtr intPtr = Helpers.TakeMemory();
		int result = _GetNextMostAchievedAchievementInfo(Self, iIteratorPrevious, intPtr, 32768u, ref pflPercent, ref pbAchieved);
		pchName = Helpers.MemoryToString(intPtr);
		return result;
	}

	internal bool GetAchievementAchievedPercent([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, ref float pflPercent)
	{
		return _GetAchievementAchievedPercent(Self, pchName, ref pflPercent);
	}

	internal async Task<GlobalStatsReceived_t?> RequestGlobalStats(int nHistoryDays)
	{
		SteamAPICall_t returnValue = _RequestGlobalStats(Self, nHistoryDays);
		return await GlobalStatsReceived_t.GetResultAsync(returnValue);
	}

	internal bool GetGlobalStat1([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchStatName, ref long pData)
	{
		return _GetGlobalStat1(Self, pchStatName, ref pData);
	}

	internal bool GetGlobalStat2([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchStatName, ref double pData)
	{
		return _GetGlobalStat2(Self, pchStatName, ref pData);
	}

	internal int GetGlobalStatHistory1([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchStatName, [In][Out] long[] pData, uint cubData)
	{
		return _GetGlobalStatHistory1(Self, pchStatName, pData, cubData);
	}

	internal int GetGlobalStatHistory2([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchStatName, [In][Out] double[] pData, uint cubData)
	{
		return _GetGlobalStatHistory2(Self, pchStatName, pData, cubData);
	}
}
