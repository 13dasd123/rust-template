using System;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using Steamworks;
using Steamworks.Data;

internal class ISteamUGC : SteamInterface
{
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate UGCQueryHandle_t FCreateQueryUserUGCRequest(IntPtr self, AccountID_t unAccountID, UserUGCList eListType, UgcType eMatchingUGCType, UserUGCListSortOrder eSortOrder, AppId nCreatorAppID, AppId nConsumerAppID, uint unPage);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate UGCQueryHandle_t FCreateQueryAllUGCRequest1(IntPtr self, UGCQuery eQueryType, UgcType eMatchingeMatchingUGCTypeFileType, AppId nCreatorAppID, AppId nConsumerAppID, uint unPage);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate UGCQueryHandle_t FCreateQueryAllUGCRequest2(IntPtr self, UGCQuery eQueryType, UgcType eMatchingeMatchingUGCTypeFileType, AppId nCreatorAppID, AppId nConsumerAppID, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchCursor);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate UGCQueryHandle_t FCreateQueryUGCDetailsRequest(IntPtr self, [In][Out] PublishedFileId[] pvecPublishedFileID, uint unNumPublishedFileIDs);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FSendQueryUGCRequest(IntPtr self, UGCQueryHandle_t handle);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetQueryUGCResult(IntPtr self, UGCQueryHandle_t handle, uint index, ref SteamUGCDetails_t pDetails);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetQueryUGCPreviewURL(IntPtr self, UGCQueryHandle_t handle, uint index, IntPtr pchURL, uint cchURLSize);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetQueryUGCMetadata(IntPtr self, UGCQueryHandle_t handle, uint index, IntPtr pchMetadata, uint cchMetadatasize);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetQueryUGCChildren(IntPtr self, UGCQueryHandle_t handle, uint index, [In][Out] PublishedFileId[] pvecPublishedFileID, uint cMaxEntries);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetQueryUGCStatistic(IntPtr self, UGCQueryHandle_t handle, uint index, ItemStatistic eStatType, ref ulong pStatValue);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate uint FGetQueryUGCNumAdditionalPreviews(IntPtr self, UGCQueryHandle_t handle, uint index);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetQueryUGCAdditionalPreview(IntPtr self, UGCQueryHandle_t handle, uint index, uint previewIndex, IntPtr pchURLOrVideoID, uint cchURLSize, IntPtr pchOriginalFileName, uint cchOriginalFileNameSize, ref ItemPreviewType pPreviewType);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate uint FGetQueryUGCNumKeyValueTags(IntPtr self, UGCQueryHandle_t handle, uint index);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetQueryUGCKeyValueTag(IntPtr self, UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, IntPtr pchKey, uint cchKeySize, IntPtr pchValue, uint cchValueSize);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FReleaseQueryUGCRequest(IntPtr self, UGCQueryHandle_t handle);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FAddRequiredTag(IntPtr self, UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pTagName);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FAddExcludedTag(IntPtr self, UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pTagName);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetReturnOnlyIDs(IntPtr self, UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetReturnKeyValueTags(IntPtr self, UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetReturnLongDescription(IntPtr self, UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetReturnMetadata(IntPtr self, UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.U1)] bool bReturnMetadata);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetReturnChildren(IntPtr self, UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.U1)] bool bReturnChildren);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetReturnAdditionalPreviews(IntPtr self, UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetReturnTotalOnly(IntPtr self, UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetReturnPlaytimeStats(IntPtr self, UGCQueryHandle_t handle, uint unDays);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetLanguage(IntPtr self, UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchLanguage);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetAllowCachedResponse(IntPtr self, UGCQueryHandle_t handle, uint unMaxAgeSeconds);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetCloudFileNameFilter(IntPtr self, UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pMatchCloudFileName);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetMatchAnyTag(IntPtr self, UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetSearchText(IntPtr self, UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pSearchText);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetRankedByTrendDays(IntPtr self, UGCQueryHandle_t handle, uint unDays);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FAddRequiredKeyValueTag(IntPtr self, UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pKey, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pValue);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FRequestUGCDetails(IntPtr self, PublishedFileId nPublishedFileID, uint unMaxAgeSeconds);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FCreateItem(IntPtr self, AppId nConsumerAppId, WorkshopFileType eFileType);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate UGCUpdateHandle_t FStartItemUpdate(IntPtr self, AppId nConsumerAppId, PublishedFileId nPublishedFileID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetItemTitle(IntPtr self, UGCUpdateHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchTitle);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetItemDescription(IntPtr self, UGCUpdateHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchDescription);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetItemUpdateLanguage(IntPtr self, UGCUpdateHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchLanguage);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetItemMetadata(IntPtr self, UGCUpdateHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchMetaData);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetItemVisibility(IntPtr self, UGCUpdateHandle_t handle, RemoteStoragePublishedFileVisibility eVisibility);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetItemTags(IntPtr self, UGCUpdateHandle_t updateHandle, ref SteamParamStringArray_t pTags);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetItemContent(IntPtr self, UGCUpdateHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszContentFolder);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetItemPreview(IntPtr self, UGCUpdateHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszPreviewFile);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetAllowLegacyUpload(IntPtr self, UGCUpdateHandle_t handle, [MarshalAs(UnmanagedType.U1)] bool bAllowLegacyUpload);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FRemoveItemKeyValueTags(IntPtr self, UGCUpdateHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKey);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FAddItemKeyValueTag(IntPtr self, UGCUpdateHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKey, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchValue);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FAddItemPreviewFile(IntPtr self, UGCUpdateHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszPreviewFile, ItemPreviewType type);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FAddItemPreviewVideo(IntPtr self, UGCUpdateHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszVideoID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FUpdateItemPreviewFile(IntPtr self, UGCUpdateHandle_t handle, uint index, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszPreviewFile);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FUpdateItemPreviewVideo(IntPtr self, UGCUpdateHandle_t handle, uint index, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszVideoID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FRemoveItemPreview(IntPtr self, UGCUpdateHandle_t handle, uint index);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FSubmitItemUpdate(IntPtr self, UGCUpdateHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchChangeNote);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate ItemUpdateStatus FGetItemUpdateProgress(IntPtr self, UGCUpdateHandle_t handle, ref ulong punBytesProcessed, ref ulong punBytesTotal);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FSetUserItemVote(IntPtr self, PublishedFileId nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bVoteUp);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FGetUserItemVote(IntPtr self, PublishedFileId nPublishedFileID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FAddItemToFavorites(IntPtr self, AppId nAppId, PublishedFileId nPublishedFileID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FRemoveItemFromFavorites(IntPtr self, AppId nAppId, PublishedFileId nPublishedFileID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FSubscribeItem(IntPtr self, PublishedFileId nPublishedFileID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FUnsubscribeItem(IntPtr self, PublishedFileId nPublishedFileID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate uint FGetNumSubscribedItems(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate uint FGetSubscribedItems(IntPtr self, [In][Out] PublishedFileId[] pvecPublishedFileID, uint cMaxEntries);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate uint FGetItemState(IntPtr self, PublishedFileId nPublishedFileID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetItemInstallInfo(IntPtr self, PublishedFileId nPublishedFileID, ref ulong punSizeOnDisk, IntPtr pchFolder, uint cchFolderSize, ref uint punTimeStamp);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetItemDownloadInfo(IntPtr self, PublishedFileId nPublishedFileID, ref ulong punBytesDownloaded, ref ulong punBytesTotal);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FDownloadItem(IntPtr self, PublishedFileId nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bHighPriority);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FBInitWorkshopForGameServer(IntPtr self, DepotId_t unWorkshopDepotID, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszFolder);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSuspendDownloads(IntPtr self, [MarshalAs(UnmanagedType.U1)] bool bSuspend);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FStartPlaytimeTracking(IntPtr self, [In][Out] PublishedFileId[] pvecPublishedFileID, uint unNumPublishedFileIDs);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FStopPlaytimeTracking(IntPtr self, [In][Out] PublishedFileId[] pvecPublishedFileID, uint unNumPublishedFileIDs);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FStopPlaytimeTrackingForAllItems(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FAddDependency(IntPtr self, PublishedFileId nParentPublishedFileID, PublishedFileId nChildPublishedFileID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FRemoveDependency(IntPtr self, PublishedFileId nParentPublishedFileID, PublishedFileId nChildPublishedFileID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FAddAppDependency(IntPtr self, PublishedFileId nPublishedFileID, AppId nAppID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FRemoveAppDependency(IntPtr self, PublishedFileId nPublishedFileID, AppId nAppID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FGetAppDependencies(IntPtr self, PublishedFileId nPublishedFileID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FDeleteItem(IntPtr self, PublishedFileId nPublishedFileID);

	private FCreateQueryUserUGCRequest _CreateQueryUserUGCRequest;

	private FCreateQueryAllUGCRequest1 _CreateQueryAllUGCRequest1;

	private FCreateQueryAllUGCRequest2 _CreateQueryAllUGCRequest2;

	private FCreateQueryUGCDetailsRequest _CreateQueryUGCDetailsRequest;

	private FSendQueryUGCRequest _SendQueryUGCRequest;

	private FGetQueryUGCResult _GetQueryUGCResult;

	private FGetQueryUGCPreviewURL _GetQueryUGCPreviewURL;

	private FGetQueryUGCMetadata _GetQueryUGCMetadata;

	private FGetQueryUGCChildren _GetQueryUGCChildren;

	private FGetQueryUGCStatistic _GetQueryUGCStatistic;

	private FGetQueryUGCNumAdditionalPreviews _GetQueryUGCNumAdditionalPreviews;

	private FGetQueryUGCAdditionalPreview _GetQueryUGCAdditionalPreview;

	private FGetQueryUGCNumKeyValueTags _GetQueryUGCNumKeyValueTags;

	private FGetQueryUGCKeyValueTag _GetQueryUGCKeyValueTag;

	private FReleaseQueryUGCRequest _ReleaseQueryUGCRequest;

	private FAddRequiredTag _AddRequiredTag;

	private FAddExcludedTag _AddExcludedTag;

	private FSetReturnOnlyIDs _SetReturnOnlyIDs;

	private FSetReturnKeyValueTags _SetReturnKeyValueTags;

	private FSetReturnLongDescription _SetReturnLongDescription;

	private FSetReturnMetadata _SetReturnMetadata;

	private FSetReturnChildren _SetReturnChildren;

	private FSetReturnAdditionalPreviews _SetReturnAdditionalPreviews;

	private FSetReturnTotalOnly _SetReturnTotalOnly;

	private FSetReturnPlaytimeStats _SetReturnPlaytimeStats;

	private FSetLanguage _SetLanguage;

	private FSetAllowCachedResponse _SetAllowCachedResponse;

	private FSetCloudFileNameFilter _SetCloudFileNameFilter;

	private FSetMatchAnyTag _SetMatchAnyTag;

	private FSetSearchText _SetSearchText;

	private FSetRankedByTrendDays _SetRankedByTrendDays;

	private FAddRequiredKeyValueTag _AddRequiredKeyValueTag;

	private FRequestUGCDetails _RequestUGCDetails;

	private FCreateItem _CreateItem;

	private FStartItemUpdate _StartItemUpdate;

	private FSetItemTitle _SetItemTitle;

	private FSetItemDescription _SetItemDescription;

	private FSetItemUpdateLanguage _SetItemUpdateLanguage;

	private FSetItemMetadata _SetItemMetadata;

	private FSetItemVisibility _SetItemVisibility;

	private FSetItemTags _SetItemTags;

	private FSetItemContent _SetItemContent;

	private FSetItemPreview _SetItemPreview;

	private FSetAllowLegacyUpload _SetAllowLegacyUpload;

	private FRemoveItemKeyValueTags _RemoveItemKeyValueTags;

	private FAddItemKeyValueTag _AddItemKeyValueTag;

	private FAddItemPreviewFile _AddItemPreviewFile;

	private FAddItemPreviewVideo _AddItemPreviewVideo;

	private FUpdateItemPreviewFile _UpdateItemPreviewFile;

	private FUpdateItemPreviewVideo _UpdateItemPreviewVideo;

	private FRemoveItemPreview _RemoveItemPreview;

	private FSubmitItemUpdate _SubmitItemUpdate;

	private FGetItemUpdateProgress _GetItemUpdateProgress;

	private FSetUserItemVote _SetUserItemVote;

	private FGetUserItemVote _GetUserItemVote;

	private FAddItemToFavorites _AddItemToFavorites;

	private FRemoveItemFromFavorites _RemoveItemFromFavorites;

	private FSubscribeItem _SubscribeItem;

	private FUnsubscribeItem _UnsubscribeItem;

	private FGetNumSubscribedItems _GetNumSubscribedItems;

	private FGetSubscribedItems _GetSubscribedItems;

	private FGetItemState _GetItemState;

	private FGetItemInstallInfo _GetItemInstallInfo;

	private FGetItemDownloadInfo _GetItemDownloadInfo;

	private FDownloadItem _DownloadItem;

	private FBInitWorkshopForGameServer _BInitWorkshopForGameServer;

	private FSuspendDownloads _SuspendDownloads;

	private FStartPlaytimeTracking _StartPlaytimeTracking;

	private FStopPlaytimeTracking _StopPlaytimeTracking;

	private FStopPlaytimeTrackingForAllItems _StopPlaytimeTrackingForAllItems;

	private FAddDependency _AddDependency;

	private FRemoveDependency _RemoveDependency;

	private FAddAppDependency _AddAppDependency;

	private FRemoveAppDependency _RemoveAppDependency;

	private FGetAppDependencies _GetAppDependencies;

	private FDeleteItem _DeleteItem;

	public override string InterfaceName => "STEAMUGC_INTERFACE_VERSION012";

	public override void InitInternals()
	{
		_CreateQueryUserUGCRequest = Marshal.GetDelegateForFunctionPointer<FCreateQueryUserUGCRequest>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(0)));
		_CreateQueryUGCDetailsRequest = Marshal.GetDelegateForFunctionPointer<FCreateQueryUGCDetailsRequest>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(24)));
		_SendQueryUGCRequest = Marshal.GetDelegateForFunctionPointer<FSendQueryUGCRequest>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(32)));
		_GetQueryUGCResult = Marshal.GetDelegateForFunctionPointer<FGetQueryUGCResult>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(40)));
		_GetQueryUGCPreviewURL = Marshal.GetDelegateForFunctionPointer<FGetQueryUGCPreviewURL>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(48)));
		_GetQueryUGCMetadata = Marshal.GetDelegateForFunctionPointer<FGetQueryUGCMetadata>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(56)));
		_GetQueryUGCChildren = Marshal.GetDelegateForFunctionPointer<FGetQueryUGCChildren>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(64)));
		_GetQueryUGCStatistic = Marshal.GetDelegateForFunctionPointer<FGetQueryUGCStatistic>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(72)));
		_GetQueryUGCNumAdditionalPreviews = Marshal.GetDelegateForFunctionPointer<FGetQueryUGCNumAdditionalPreviews>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(80)));
		_GetQueryUGCAdditionalPreview = Marshal.GetDelegateForFunctionPointer<FGetQueryUGCAdditionalPreview>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(88)));
		_GetQueryUGCNumKeyValueTags = Marshal.GetDelegateForFunctionPointer<FGetQueryUGCNumKeyValueTags>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(96)));
		_GetQueryUGCKeyValueTag = Marshal.GetDelegateForFunctionPointer<FGetQueryUGCKeyValueTag>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(104)));
		_ReleaseQueryUGCRequest = Marshal.GetDelegateForFunctionPointer<FReleaseQueryUGCRequest>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(112)));
		_AddRequiredTag = Marshal.GetDelegateForFunctionPointer<FAddRequiredTag>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(120)));
		_AddExcludedTag = Marshal.GetDelegateForFunctionPointer<FAddExcludedTag>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(128)));
		_SetReturnOnlyIDs = Marshal.GetDelegateForFunctionPointer<FSetReturnOnlyIDs>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(136)));
		_SetReturnKeyValueTags = Marshal.GetDelegateForFunctionPointer<FSetReturnKeyValueTags>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(144)));
		_SetReturnLongDescription = Marshal.GetDelegateForFunctionPointer<FSetReturnLongDescription>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(152)));
		_SetReturnMetadata = Marshal.GetDelegateForFunctionPointer<FSetReturnMetadata>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(160)));
		_SetReturnChildren = Marshal.GetDelegateForFunctionPointer<FSetReturnChildren>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(168)));
		_SetReturnAdditionalPreviews = Marshal.GetDelegateForFunctionPointer<FSetReturnAdditionalPreviews>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(176)));
		_SetReturnTotalOnly = Marshal.GetDelegateForFunctionPointer<FSetReturnTotalOnly>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(184)));
		_SetReturnPlaytimeStats = Marshal.GetDelegateForFunctionPointer<FSetReturnPlaytimeStats>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(192)));
		_SetLanguage = Marshal.GetDelegateForFunctionPointer<FSetLanguage>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(200)));
		_SetAllowCachedResponse = Marshal.GetDelegateForFunctionPointer<FSetAllowCachedResponse>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(208)));
		_SetCloudFileNameFilter = Marshal.GetDelegateForFunctionPointer<FSetCloudFileNameFilter>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(216)));
		_SetMatchAnyTag = Marshal.GetDelegateForFunctionPointer<FSetMatchAnyTag>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(224)));
		_SetSearchText = Marshal.GetDelegateForFunctionPointer<FSetSearchText>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(232)));
		_SetRankedByTrendDays = Marshal.GetDelegateForFunctionPointer<FSetRankedByTrendDays>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(240)));
		_AddRequiredKeyValueTag = Marshal.GetDelegateForFunctionPointer<FAddRequiredKeyValueTag>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(248)));
		_RequestUGCDetails = Marshal.GetDelegateForFunctionPointer<FRequestUGCDetails>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(256)));
		_CreateItem = Marshal.GetDelegateForFunctionPointer<FCreateItem>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(264)));
		_StartItemUpdate = Marshal.GetDelegateForFunctionPointer<FStartItemUpdate>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(272)));
		_SetItemTitle = Marshal.GetDelegateForFunctionPointer<FSetItemTitle>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(280)));
		_SetItemDescription = Marshal.GetDelegateForFunctionPointer<FSetItemDescription>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(288)));
		_SetItemUpdateLanguage = Marshal.GetDelegateForFunctionPointer<FSetItemUpdateLanguage>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(296)));
		_SetItemMetadata = Marshal.GetDelegateForFunctionPointer<FSetItemMetadata>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(304)));
		_SetItemVisibility = Marshal.GetDelegateForFunctionPointer<FSetItemVisibility>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(312)));
		_SetItemTags = Marshal.GetDelegateForFunctionPointer<FSetItemTags>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(320)));
		_SetItemContent = Marshal.GetDelegateForFunctionPointer<FSetItemContent>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(328)));
		_SetItemPreview = Marshal.GetDelegateForFunctionPointer<FSetItemPreview>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(336)));
		_SetAllowLegacyUpload = Marshal.GetDelegateForFunctionPointer<FSetAllowLegacyUpload>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(344)));
		_RemoveItemKeyValueTags = Marshal.GetDelegateForFunctionPointer<FRemoveItemKeyValueTags>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(352)));
		_AddItemKeyValueTag = Marshal.GetDelegateForFunctionPointer<FAddItemKeyValueTag>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(360)));
		_AddItemPreviewFile = Marshal.GetDelegateForFunctionPointer<FAddItemPreviewFile>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(368)));
		_AddItemPreviewVideo = Marshal.GetDelegateForFunctionPointer<FAddItemPreviewVideo>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(376)));
		_UpdateItemPreviewFile = Marshal.GetDelegateForFunctionPointer<FUpdateItemPreviewFile>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(384)));
		_UpdateItemPreviewVideo = Marshal.GetDelegateForFunctionPointer<FUpdateItemPreviewVideo>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(392)));
		_RemoveItemPreview = Marshal.GetDelegateForFunctionPointer<FRemoveItemPreview>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(400)));
		_SubmitItemUpdate = Marshal.GetDelegateForFunctionPointer<FSubmitItemUpdate>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(408)));
		_GetItemUpdateProgress = Marshal.GetDelegateForFunctionPointer<FGetItemUpdateProgress>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(416)));
		_SetUserItemVote = Marshal.GetDelegateForFunctionPointer<FSetUserItemVote>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(424)));
		_GetUserItemVote = Marshal.GetDelegateForFunctionPointer<FGetUserItemVote>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(432)));
		_AddItemToFavorites = Marshal.GetDelegateForFunctionPointer<FAddItemToFavorites>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(440)));
		_RemoveItemFromFavorites = Marshal.GetDelegateForFunctionPointer<FRemoveItemFromFavorites>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(448)));
		_SubscribeItem = Marshal.GetDelegateForFunctionPointer<FSubscribeItem>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(456)));
		_UnsubscribeItem = Marshal.GetDelegateForFunctionPointer<FUnsubscribeItem>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(464)));
		_GetNumSubscribedItems = Marshal.GetDelegateForFunctionPointer<FGetNumSubscribedItems>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(472)));
		_GetSubscribedItems = Marshal.GetDelegateForFunctionPointer<FGetSubscribedItems>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(480)));
		_GetItemState = Marshal.GetDelegateForFunctionPointer<FGetItemState>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(488)));
		_GetItemInstallInfo = Marshal.GetDelegateForFunctionPointer<FGetItemInstallInfo>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(496)));
		_GetItemDownloadInfo = Marshal.GetDelegateForFunctionPointer<FGetItemDownloadInfo>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(504)));
		_DownloadItem = Marshal.GetDelegateForFunctionPointer<FDownloadItem>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(512)));
		_BInitWorkshopForGameServer = Marshal.GetDelegateForFunctionPointer<FBInitWorkshopForGameServer>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(520)));
		_SuspendDownloads = Marshal.GetDelegateForFunctionPointer<FSuspendDownloads>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(528)));
		_StartPlaytimeTracking = Marshal.GetDelegateForFunctionPointer<FStartPlaytimeTracking>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(536)));
		_StopPlaytimeTracking = Marshal.GetDelegateForFunctionPointer<FStopPlaytimeTracking>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(544)));
		_StopPlaytimeTrackingForAllItems = Marshal.GetDelegateForFunctionPointer<FStopPlaytimeTrackingForAllItems>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(552)));
		_AddDependency = Marshal.GetDelegateForFunctionPointer<FAddDependency>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(560)));
		_RemoveDependency = Marshal.GetDelegateForFunctionPointer<FRemoveDependency>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(568)));
		_AddAppDependency = Marshal.GetDelegateForFunctionPointer<FAddAppDependency>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(576)));
		_RemoveAppDependency = Marshal.GetDelegateForFunctionPointer<FRemoveAppDependency>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(584)));
		_GetAppDependencies = Marshal.GetDelegateForFunctionPointer<FGetAppDependencies>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(592)));
		_DeleteItem = Marshal.GetDelegateForFunctionPointer<FDeleteItem>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(600)));
		_CreateQueryAllUGCRequest1 = Marshal.GetDelegateForFunctionPointer<FCreateQueryAllUGCRequest1>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(8)));
		_CreateQueryAllUGCRequest2 = Marshal.GetDelegateForFunctionPointer<FCreateQueryAllUGCRequest2>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(16)));
	}

	internal override void Shutdown()
	{
		base.Shutdown();
		_CreateQueryUserUGCRequest = null;
		_CreateQueryAllUGCRequest1 = null;
		_CreateQueryAllUGCRequest2 = null;
		_CreateQueryUGCDetailsRequest = null;
		_SendQueryUGCRequest = null;
		_GetQueryUGCResult = null;
		_GetQueryUGCPreviewURL = null;
		_GetQueryUGCMetadata = null;
		_GetQueryUGCChildren = null;
		_GetQueryUGCStatistic = null;
		_GetQueryUGCNumAdditionalPreviews = null;
		_GetQueryUGCAdditionalPreview = null;
		_GetQueryUGCNumKeyValueTags = null;
		_GetQueryUGCKeyValueTag = null;
		_ReleaseQueryUGCRequest = null;
		_AddRequiredTag = null;
		_AddExcludedTag = null;
		_SetReturnOnlyIDs = null;
		_SetReturnKeyValueTags = null;
		_SetReturnLongDescription = null;
		_SetReturnMetadata = null;
		_SetReturnChildren = null;
		_SetReturnAdditionalPreviews = null;
		_SetReturnTotalOnly = null;
		_SetReturnPlaytimeStats = null;
		_SetLanguage = null;
		_SetAllowCachedResponse = null;
		_SetCloudFileNameFilter = null;
		_SetMatchAnyTag = null;
		_SetSearchText = null;
		_SetRankedByTrendDays = null;
		_AddRequiredKeyValueTag = null;
		_RequestUGCDetails = null;
		_CreateItem = null;
		_StartItemUpdate = null;
		_SetItemTitle = null;
		_SetItemDescription = null;
		_SetItemUpdateLanguage = null;
		_SetItemMetadata = null;
		_SetItemVisibility = null;
		_SetItemTags = null;
		_SetItemContent = null;
		_SetItemPreview = null;
		_SetAllowLegacyUpload = null;
		_RemoveItemKeyValueTags = null;
		_AddItemKeyValueTag = null;
		_AddItemPreviewFile = null;
		_AddItemPreviewVideo = null;
		_UpdateItemPreviewFile = null;
		_UpdateItemPreviewVideo = null;
		_RemoveItemPreview = null;
		_SubmitItemUpdate = null;
		_GetItemUpdateProgress = null;
		_SetUserItemVote = null;
		_GetUserItemVote = null;
		_AddItemToFavorites = null;
		_RemoveItemFromFavorites = null;
		_SubscribeItem = null;
		_UnsubscribeItem = null;
		_GetNumSubscribedItems = null;
		_GetSubscribedItems = null;
		_GetItemState = null;
		_GetItemInstallInfo = null;
		_GetItemDownloadInfo = null;
		_DownloadItem = null;
		_BInitWorkshopForGameServer = null;
		_SuspendDownloads = null;
		_StartPlaytimeTracking = null;
		_StopPlaytimeTracking = null;
		_StopPlaytimeTrackingForAllItems = null;
		_AddDependency = null;
		_RemoveDependency = null;
		_AddAppDependency = null;
		_RemoveAppDependency = null;
		_GetAppDependencies = null;
		_DeleteItem = null;
	}

	internal UGCQueryHandle_t CreateQueryUserUGCRequest(AccountID_t unAccountID, UserUGCList eListType, UgcType eMatchingUGCType, UserUGCListSortOrder eSortOrder, AppId nCreatorAppID, AppId nConsumerAppID, uint unPage)
	{
		return _CreateQueryUserUGCRequest(Self, unAccountID, eListType, eMatchingUGCType, eSortOrder, nCreatorAppID, nConsumerAppID, unPage);
	}

	internal UGCQueryHandle_t CreateQueryAllUGCRequest1(UGCQuery eQueryType, UgcType eMatchingeMatchingUGCTypeFileType, AppId nCreatorAppID, AppId nConsumerAppID, uint unPage)
	{
		return _CreateQueryAllUGCRequest1(Self, eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, unPage);
	}

	internal UGCQueryHandle_t CreateQueryAllUGCRequest2(UGCQuery eQueryType, UgcType eMatchingeMatchingUGCTypeFileType, AppId nCreatorAppID, AppId nConsumerAppID, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchCursor)
	{
		return _CreateQueryAllUGCRequest2(Self, eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID, nConsumerAppID, pchCursor);
	}

	internal UGCQueryHandle_t CreateQueryUGCDetailsRequest([In][Out] PublishedFileId[] pvecPublishedFileID, uint unNumPublishedFileIDs)
	{
		return _CreateQueryUGCDetailsRequest(Self, pvecPublishedFileID, unNumPublishedFileIDs);
	}

	internal async Task<SteamUGCQueryCompleted_t?> SendQueryUGCRequest(UGCQueryHandle_t handle)
	{
		SteamAPICall_t returnValue = _SendQueryUGCRequest(Self, handle);
		return await SteamUGCQueryCompleted_t.GetResultAsync(returnValue);
	}

	internal bool GetQueryUGCResult(UGCQueryHandle_t handle, uint index, ref SteamUGCDetails_t pDetails)
	{
		return _GetQueryUGCResult(Self, handle, index, ref pDetails);
	}

	internal bool GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint index, out string pchURL)
	{
		IntPtr intPtr = Helpers.TakeMemory();
		bool result = _GetQueryUGCPreviewURL(Self, handle, index, intPtr, 32768u);
		pchURL = Helpers.MemoryToString(intPtr);
		return result;
	}

	internal bool GetQueryUGCMetadata(UGCQueryHandle_t handle, uint index, out string pchMetadata)
	{
		IntPtr intPtr = Helpers.TakeMemory();
		bool result = _GetQueryUGCMetadata(Self, handle, index, intPtr, 32768u);
		pchMetadata = Helpers.MemoryToString(intPtr);
		return result;
	}

	internal bool GetQueryUGCChildren(UGCQueryHandle_t handle, uint index, [In][Out] PublishedFileId[] pvecPublishedFileID, uint cMaxEntries)
	{
		return _GetQueryUGCChildren(Self, handle, index, pvecPublishedFileID, cMaxEntries);
	}

	internal bool GetQueryUGCStatistic(UGCQueryHandle_t handle, uint index, ItemStatistic eStatType, ref ulong pStatValue)
	{
		return _GetQueryUGCStatistic(Self, handle, index, eStatType, ref pStatValue);
	}

	internal uint GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint index)
	{
		return _GetQueryUGCNumAdditionalPreviews(Self, handle, index);
	}

	internal bool GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint index, uint previewIndex, out string pchURLOrVideoID, out string pchOriginalFileName, ref ItemPreviewType pPreviewType)
	{
		IntPtr intPtr = Helpers.TakeMemory();
		IntPtr intPtr2 = Helpers.TakeMemory();
		bool result = _GetQueryUGCAdditionalPreview(Self, handle, index, previewIndex, intPtr, 32768u, intPtr2, 32768u, ref pPreviewType);
		pchURLOrVideoID = Helpers.MemoryToString(intPtr);
		pchOriginalFileName = Helpers.MemoryToString(intPtr2);
		return result;
	}

	internal uint GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint index)
	{
		return _GetQueryUGCNumKeyValueTags(Self, handle, index);
	}

	internal bool GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, out string pchKey, out string pchValue)
	{
		IntPtr intPtr = Helpers.TakeMemory();
		IntPtr intPtr2 = Helpers.TakeMemory();
		bool result = _GetQueryUGCKeyValueTag(Self, handle, index, keyValueTagIndex, intPtr, 32768u, intPtr2, 32768u);
		pchKey = Helpers.MemoryToString(intPtr);
		pchValue = Helpers.MemoryToString(intPtr2);
		return result;
	}

	internal bool ReleaseQueryUGCRequest(UGCQueryHandle_t handle)
	{
		return _ReleaseQueryUGCRequest(Self, handle);
	}

	internal bool AddRequiredTag(UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pTagName)
	{
		return _AddRequiredTag(Self, handle, pTagName);
	}

	internal bool AddExcludedTag(UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pTagName)
	{
		return _AddExcludedTag(Self, handle, pTagName);
	}

	internal bool SetReturnOnlyIDs(UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs)
	{
		return _SetReturnOnlyIDs(Self, handle, bReturnOnlyIDs);
	}

	internal bool SetReturnKeyValueTags(UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags)
	{
		return _SetReturnKeyValueTags(Self, handle, bReturnKeyValueTags);
	}

	internal bool SetReturnLongDescription(UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription)
	{
		return _SetReturnLongDescription(Self, handle, bReturnLongDescription);
	}

	internal bool SetReturnMetadata(UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.U1)] bool bReturnMetadata)
	{
		return _SetReturnMetadata(Self, handle, bReturnMetadata);
	}

	internal bool SetReturnChildren(UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.U1)] bool bReturnChildren)
	{
		return _SetReturnChildren(Self, handle, bReturnChildren);
	}

	internal bool SetReturnAdditionalPreviews(UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews)
	{
		return _SetReturnAdditionalPreviews(Self, handle, bReturnAdditionalPreviews);
	}

	internal bool SetReturnTotalOnly(UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly)
	{
		return _SetReturnTotalOnly(Self, handle, bReturnTotalOnly);
	}

	internal bool SetReturnPlaytimeStats(UGCQueryHandle_t handle, uint unDays)
	{
		return _SetReturnPlaytimeStats(Self, handle, unDays);
	}

	internal bool SetLanguage(UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchLanguage)
	{
		return _SetLanguage(Self, handle, pchLanguage);
	}

	internal bool SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds)
	{
		return _SetAllowCachedResponse(Self, handle, unMaxAgeSeconds);
	}

	internal bool SetCloudFileNameFilter(UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pMatchCloudFileName)
	{
		return _SetCloudFileNameFilter(Self, handle, pMatchCloudFileName);
	}

	internal bool SetMatchAnyTag(UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag)
	{
		return _SetMatchAnyTag(Self, handle, bMatchAnyTag);
	}

	internal bool SetSearchText(UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pSearchText)
	{
		return _SetSearchText(Self, handle, pSearchText);
	}

	internal bool SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays)
	{
		return _SetRankedByTrendDays(Self, handle, unDays);
	}

	internal bool AddRequiredKeyValueTag(UGCQueryHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pKey, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pValue)
	{
		return _AddRequiredKeyValueTag(Self, handle, pKey, pValue);
	}

	internal async Task<SteamUGCRequestUGCDetailsResult_t?> RequestUGCDetails(PublishedFileId nPublishedFileID, uint unMaxAgeSeconds)
	{
		SteamAPICall_t returnValue = _RequestUGCDetails(Self, nPublishedFileID, unMaxAgeSeconds);
		return await SteamUGCRequestUGCDetailsResult_t.GetResultAsync(returnValue);
	}

	internal async Task<CreateItemResult_t?> CreateItem(AppId nConsumerAppId, WorkshopFileType eFileType)
	{
		SteamAPICall_t returnValue = _CreateItem(Self, nConsumerAppId, eFileType);
		return await CreateItemResult_t.GetResultAsync(returnValue);
	}

	internal UGCUpdateHandle_t StartItemUpdate(AppId nConsumerAppId, PublishedFileId nPublishedFileID)
	{
		return _StartItemUpdate(Self, nConsumerAppId, nPublishedFileID);
	}

	internal bool SetItemTitle(UGCUpdateHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchTitle)
	{
		return _SetItemTitle(Self, handle, pchTitle);
	}

	internal bool SetItemDescription(UGCUpdateHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchDescription)
	{
		return _SetItemDescription(Self, handle, pchDescription);
	}

	internal bool SetItemUpdateLanguage(UGCUpdateHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchLanguage)
	{
		return _SetItemUpdateLanguage(Self, handle, pchLanguage);
	}

	internal bool SetItemMetadata(UGCUpdateHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchMetaData)
	{
		return _SetItemMetadata(Self, handle, pchMetaData);
	}

	internal bool SetItemVisibility(UGCUpdateHandle_t handle, RemoteStoragePublishedFileVisibility eVisibility)
	{
		return _SetItemVisibility(Self, handle, eVisibility);
	}

	internal bool SetItemTags(UGCUpdateHandle_t updateHandle, ref SteamParamStringArray_t pTags)
	{
		return _SetItemTags(Self, updateHandle, ref pTags);
	}

	internal bool SetItemContent(UGCUpdateHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszContentFolder)
	{
		return _SetItemContent(Self, handle, pszContentFolder);
	}

	internal bool SetItemPreview(UGCUpdateHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszPreviewFile)
	{
		return _SetItemPreview(Self, handle, pszPreviewFile);
	}

	internal bool SetAllowLegacyUpload(UGCUpdateHandle_t handle, [MarshalAs(UnmanagedType.U1)] bool bAllowLegacyUpload)
	{
		return _SetAllowLegacyUpload(Self, handle, bAllowLegacyUpload);
	}

	internal bool RemoveItemKeyValueTags(UGCUpdateHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKey)
	{
		return _RemoveItemKeyValueTags(Self, handle, pchKey);
	}

	internal bool AddItemKeyValueTag(UGCUpdateHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKey, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchValue)
	{
		return _AddItemKeyValueTag(Self, handle, pchKey, pchValue);
	}

	internal bool AddItemPreviewFile(UGCUpdateHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszPreviewFile, ItemPreviewType type)
	{
		return _AddItemPreviewFile(Self, handle, pszPreviewFile, type);
	}

	internal bool AddItemPreviewVideo(UGCUpdateHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszVideoID)
	{
		return _AddItemPreviewVideo(Self, handle, pszVideoID);
	}

	internal bool UpdateItemPreviewFile(UGCUpdateHandle_t handle, uint index, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszPreviewFile)
	{
		return _UpdateItemPreviewFile(Self, handle, index, pszPreviewFile);
	}

	internal bool UpdateItemPreviewVideo(UGCUpdateHandle_t handle, uint index, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszVideoID)
	{
		return _UpdateItemPreviewVideo(Self, handle, index, pszVideoID);
	}

	internal bool RemoveItemPreview(UGCUpdateHandle_t handle, uint index)
	{
		return _RemoveItemPreview(Self, handle, index);
	}

	internal async Task<SubmitItemUpdateResult_t?> SubmitItemUpdate(UGCUpdateHandle_t handle, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchChangeNote)
	{
		SteamAPICall_t returnValue = _SubmitItemUpdate(Self, handle, pchChangeNote);
		return await SubmitItemUpdateResult_t.GetResultAsync(returnValue);
	}

	internal ItemUpdateStatus GetItemUpdateProgress(UGCUpdateHandle_t handle, ref ulong punBytesProcessed, ref ulong punBytesTotal)
	{
		return _GetItemUpdateProgress(Self, handle, ref punBytesProcessed, ref punBytesTotal);
	}

	internal async Task<SetUserItemVoteResult_t?> SetUserItemVote(PublishedFileId nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bVoteUp)
	{
		SteamAPICall_t returnValue = _SetUserItemVote(Self, nPublishedFileID, bVoteUp);
		return await SetUserItemVoteResult_t.GetResultAsync(returnValue);
	}

	internal async Task<GetUserItemVoteResult_t?> GetUserItemVote(PublishedFileId nPublishedFileID)
	{
		SteamAPICall_t returnValue = _GetUserItemVote(Self, nPublishedFileID);
		return await GetUserItemVoteResult_t.GetResultAsync(returnValue);
	}

	internal async Task<UserFavoriteItemsListChanged_t?> AddItemToFavorites(AppId nAppId, PublishedFileId nPublishedFileID)
	{
		SteamAPICall_t returnValue = _AddItemToFavorites(Self, nAppId, nPublishedFileID);
		return await UserFavoriteItemsListChanged_t.GetResultAsync(returnValue);
	}

	internal async Task<UserFavoriteItemsListChanged_t?> RemoveItemFromFavorites(AppId nAppId, PublishedFileId nPublishedFileID)
	{
		SteamAPICall_t returnValue = _RemoveItemFromFavorites(Self, nAppId, nPublishedFileID);
		return await UserFavoriteItemsListChanged_t.GetResultAsync(returnValue);
	}

	internal async Task<RemoteStorageSubscribePublishedFileResult_t?> SubscribeItem(PublishedFileId nPublishedFileID)
	{
		SteamAPICall_t returnValue = _SubscribeItem(Self, nPublishedFileID);
		return await RemoteStorageSubscribePublishedFileResult_t.GetResultAsync(returnValue);
	}

	internal async Task<RemoteStorageUnsubscribePublishedFileResult_t?> UnsubscribeItem(PublishedFileId nPublishedFileID)
	{
		SteamAPICall_t returnValue = _UnsubscribeItem(Self, nPublishedFileID);
		return await RemoteStorageUnsubscribePublishedFileResult_t.GetResultAsync(returnValue);
	}

	internal uint GetNumSubscribedItems()
	{
		return _GetNumSubscribedItems(Self);
	}

	internal uint GetSubscribedItems([In][Out] PublishedFileId[] pvecPublishedFileID, uint cMaxEntries)
	{
		return _GetSubscribedItems(Self, pvecPublishedFileID, cMaxEntries);
	}

	internal uint GetItemState(PublishedFileId nPublishedFileID)
	{
		return _GetItemState(Self, nPublishedFileID);
	}

	internal bool GetItemInstallInfo(PublishedFileId nPublishedFileID, ref ulong punSizeOnDisk, out string pchFolder, ref uint punTimeStamp)
	{
		IntPtr intPtr = Helpers.TakeMemory();
		bool result = _GetItemInstallInfo(Self, nPublishedFileID, ref punSizeOnDisk, intPtr, 32768u, ref punTimeStamp);
		pchFolder = Helpers.MemoryToString(intPtr);
		return result;
	}

	internal bool GetItemDownloadInfo(PublishedFileId nPublishedFileID, ref ulong punBytesDownloaded, ref ulong punBytesTotal)
	{
		return _GetItemDownloadInfo(Self, nPublishedFileID, ref punBytesDownloaded, ref punBytesTotal);
	}

	internal bool DownloadItem(PublishedFileId nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bHighPriority)
	{
		return _DownloadItem(Self, nPublishedFileID, bHighPriority);
	}

	internal bool BInitWorkshopForGameServer(DepotId_t unWorkshopDepotID, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszFolder)
	{
		return _BInitWorkshopForGameServer(Self, unWorkshopDepotID, pszFolder);
	}

	internal void SuspendDownloads([MarshalAs(UnmanagedType.U1)] bool bSuspend)
	{
		_SuspendDownloads(Self, bSuspend);
	}

	internal async Task<StartPlaytimeTrackingResult_t?> StartPlaytimeTracking([In][Out] PublishedFileId[] pvecPublishedFileID, uint unNumPublishedFileIDs)
	{
		SteamAPICall_t returnValue = _StartPlaytimeTracking(Self, pvecPublishedFileID, unNumPublishedFileIDs);
		return await StartPlaytimeTrackingResult_t.GetResultAsync(returnValue);
	}

	internal async Task<StopPlaytimeTrackingResult_t?> StopPlaytimeTracking([In][Out] PublishedFileId[] pvecPublishedFileID, uint unNumPublishedFileIDs)
	{
		SteamAPICall_t returnValue = _StopPlaytimeTracking(Self, pvecPublishedFileID, unNumPublishedFileIDs);
		return await StopPlaytimeTrackingResult_t.GetResultAsync(returnValue);
	}

	internal async Task<StopPlaytimeTrackingResult_t?> StopPlaytimeTrackingForAllItems()
	{
		SteamAPICall_t returnValue = _StopPlaytimeTrackingForAllItems(Self);
		return await StopPlaytimeTrackingResult_t.GetResultAsync(returnValue);
	}

	internal async Task<AddUGCDependencyResult_t?> AddDependency(PublishedFileId nParentPublishedFileID, PublishedFileId nChildPublishedFileID)
	{
		SteamAPICall_t returnValue = _AddDependency(Self, nParentPublishedFileID, nChildPublishedFileID);
		return await AddUGCDependencyResult_t.GetResultAsync(returnValue);
	}

	internal async Task<RemoveUGCDependencyResult_t?> RemoveDependency(PublishedFileId nParentPublishedFileID, PublishedFileId nChildPublishedFileID)
	{
		SteamAPICall_t returnValue = _RemoveDependency(Self, nParentPublishedFileID, nChildPublishedFileID);
		return await RemoveUGCDependencyResult_t.GetResultAsync(returnValue);
	}

	internal async Task<AddAppDependencyResult_t?> AddAppDependency(PublishedFileId nPublishedFileID, AppId nAppID)
	{
		SteamAPICall_t returnValue = _AddAppDependency(Self, nPublishedFileID, nAppID);
		return await AddAppDependencyResult_t.GetResultAsync(returnValue);
	}

	internal async Task<RemoveAppDependencyResult_t?> RemoveAppDependency(PublishedFileId nPublishedFileID, AppId nAppID)
	{
		SteamAPICall_t returnValue = _RemoveAppDependency(Self, nPublishedFileID, nAppID);
		return await RemoveAppDependencyResult_t.GetResultAsync(returnValue);
	}

	internal async Task<GetAppDependenciesResult_t?> GetAppDependencies(PublishedFileId nPublishedFileID)
	{
		SteamAPICall_t returnValue = _GetAppDependencies(Self, nPublishedFileID);
		return await GetAppDependenciesResult_t.GetResultAsync(returnValue);
	}

	internal async Task<DeleteItemResult_t?> DeleteItem(PublishedFileId nPublishedFileID)
	{
		SteamAPICall_t returnValue = _DeleteItem(Self, nPublishedFileID);
		return await DeleteItemResult_t.GetResultAsync(returnValue);
	}
}
