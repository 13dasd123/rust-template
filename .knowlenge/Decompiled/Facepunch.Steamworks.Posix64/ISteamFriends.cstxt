using System;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using Steamworks;
using Steamworks.Data;

internal class ISteamFriends : SteamInterface
{
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Utf8StringPointer FGetPersonaName(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FSetPersonaName(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchPersonaName);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate FriendState FGetPersonaState(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetFriendCount(IntPtr self, int iFriendFlags);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamId FGetFriendByIndex(IntPtr self, int iFriend, int iFriendFlags);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Relationship FGetFriendRelationship(IntPtr self, SteamId steamIDFriend);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate FriendState FGetFriendPersonaState(IntPtr self, SteamId steamIDFriend);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Utf8StringPointer FGetFriendPersonaName(IntPtr self, SteamId steamIDFriend);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetFriendGamePlayed(IntPtr self, SteamId steamIDFriend, ref FriendGameInfo_t pFriendGameInfo);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Utf8StringPointer FGetFriendPersonaNameHistory(IntPtr self, SteamId steamIDFriend, int iPersonaName);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetFriendSteamLevel(IntPtr self, SteamId steamIDFriend);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Utf8StringPointer FGetPlayerNickname(IntPtr self, SteamId steamIDPlayer);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetFriendsGroupCount(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate FriendsGroupID_t FGetFriendsGroupIDByIndex(IntPtr self, int iFG);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Utf8StringPointer FGetFriendsGroupName(IntPtr self, FriendsGroupID_t friendsGroupID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetFriendsGroupMembersCount(IntPtr self, FriendsGroupID_t friendsGroupID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FGetFriendsGroupMembersList(IntPtr self, FriendsGroupID_t friendsGroupID, [In][Out] SteamId[] pOutSteamIDMembers, int nMembersCount);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FHasFriend(IntPtr self, SteamId steamIDFriend, int iFriendFlags);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetClanCount(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamId FGetClanByIndex(IntPtr self, int iClan);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Utf8StringPointer FGetClanName(IntPtr self, SteamId steamIDClan);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Utf8StringPointer FGetClanTag(IntPtr self, SteamId steamIDClan);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetClanActivityCounts(IntPtr self, SteamId steamIDClan, ref int pnOnline, ref int pnInGame, ref int pnChatting);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FDownloadClanActivityCounts(IntPtr self, [In][Out] SteamId[] psteamIDClans, int cClansToRequest);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetFriendCountFromSource(IntPtr self, SteamId steamIDSource);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamId FGetFriendFromSourceByIndex(IntPtr self, SteamId steamIDSource, int iFriend);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FIsUserInSource(IntPtr self, SteamId steamIDUser, SteamId steamIDSource);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetInGameVoiceSpeaking(IntPtr self, SteamId steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bSpeaking);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FActivateGameOverlay(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchDialog);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FActivateGameOverlayToUser(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchDialog, SteamId steamID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FActivateGameOverlayToWebPage(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchURL, ActivateGameOverlayToWebPageMode eMode);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FActivateGameOverlayToStore(IntPtr self, AppId nAppID, OverlayToStoreFlag eFlag);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetPlayedWith(IntPtr self, SteamId steamIDUserPlayedWith);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FActivateGameOverlayInviteDialog(IntPtr self, SteamId steamIDLobby);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetSmallFriendAvatar(IntPtr self, SteamId steamIDFriend);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetMediumFriendAvatar(IntPtr self, SteamId steamIDFriend);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetLargeFriendAvatar(IntPtr self, SteamId steamIDFriend);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FRequestUserInformation(IntPtr self, SteamId steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FRequestClanOfficerList(IntPtr self, SteamId steamIDClan);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamId FGetClanOwner(IntPtr self, SteamId steamIDClan);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetClanOfficerCount(IntPtr self, SteamId steamIDClan);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamId FGetClanOfficerByIndex(IntPtr self, SteamId steamIDClan, int iOfficer);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate uint FGetUserRestrictions(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetRichPresence(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKey, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchValue);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FClearRichPresence(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Utf8StringPointer FGetFriendRichPresence(IntPtr self, SteamId steamIDFriend, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKey);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetFriendRichPresenceKeyCount(IntPtr self, SteamId steamIDFriend);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Utf8StringPointer FGetFriendRichPresenceKeyByIndex(IntPtr self, SteamId steamIDFriend, int iKey);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FRequestFriendRichPresence(IntPtr self, SteamId steamIDFriend);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FInviteUserToGame(IntPtr self, SteamId steamIDFriend, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchConnectString);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetCoplayFriendCount(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamId FGetCoplayFriend(IntPtr self, int iCoplayFriend);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetFriendCoplayTime(IntPtr self, SteamId steamIDFriend);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate AppId FGetFriendCoplayGame(IntPtr self, SteamId steamIDFriend);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FJoinClanChatRoom(IntPtr self, SteamId steamIDClan);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FLeaveClanChatRoom(IntPtr self, SteamId steamIDClan);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetClanChatMemberCount(IntPtr self, SteamId steamIDClan);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamId FGetChatMemberByIndex(IntPtr self, SteamId steamIDClan, int iUser);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSendClanChatMessage(IntPtr self, SteamId steamIDClanChat, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchText);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetClanChatMessage(IntPtr self, SteamId steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, ref ChatEntryType peChatEntryType, ref SteamId psteamidChatter);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FIsClanChatAdmin(IntPtr self, SteamId steamIDClanChat, SteamId steamIDUser);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FIsClanChatWindowOpenInSteam(IntPtr self, SteamId steamIDClanChat);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FOpenClanChatWindowInSteam(IntPtr self, SteamId steamIDClanChat);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FCloseClanChatWindowInSteam(IntPtr self, SteamId steamIDClanChat);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetListenForFriendsMessages(IntPtr self, [MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FReplyToFriendMessage(IntPtr self, SteamId steamIDFriend, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchMsgToSend);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetFriendMessage(IntPtr self, SteamId steamIDFriend, int iMessageID, IntPtr pvData, int cubData, ref ChatEntryType peChatEntryType);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FGetFollowerCount(IntPtr self, SteamId steamID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FIsFollowing(IntPtr self, SteamId steamID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FEnumerateFollowingList(IntPtr self, uint unStartIndex);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FIsClanPublic(IntPtr self, SteamId steamIDClan);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FIsClanOfficialGameGroup(IntPtr self, SteamId steamIDClan);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetNumChatsWithUnreadPriorityMessages(IntPtr self);

	private FGetPersonaName _GetPersonaName;

	private FSetPersonaName _SetPersonaName;

	private FGetPersonaState _GetPersonaState;

	private FGetFriendCount _GetFriendCount;

	private FGetFriendByIndex _GetFriendByIndex;

	private FGetFriendRelationship _GetFriendRelationship;

	private FGetFriendPersonaState _GetFriendPersonaState;

	private FGetFriendPersonaName _GetFriendPersonaName;

	private FGetFriendGamePlayed _GetFriendGamePlayed;

	private FGetFriendPersonaNameHistory _GetFriendPersonaNameHistory;

	private FGetFriendSteamLevel _GetFriendSteamLevel;

	private FGetPlayerNickname _GetPlayerNickname;

	private FGetFriendsGroupCount _GetFriendsGroupCount;

	private FGetFriendsGroupIDByIndex _GetFriendsGroupIDByIndex;

	private FGetFriendsGroupName _GetFriendsGroupName;

	private FGetFriendsGroupMembersCount _GetFriendsGroupMembersCount;

	private FGetFriendsGroupMembersList _GetFriendsGroupMembersList;

	private FHasFriend _HasFriend;

	private FGetClanCount _GetClanCount;

	private FGetClanByIndex _GetClanByIndex;

	private FGetClanName _GetClanName;

	private FGetClanTag _GetClanTag;

	private FGetClanActivityCounts _GetClanActivityCounts;

	private FDownloadClanActivityCounts _DownloadClanActivityCounts;

	private FGetFriendCountFromSource _GetFriendCountFromSource;

	private FGetFriendFromSourceByIndex _GetFriendFromSourceByIndex;

	private FIsUserInSource _IsUserInSource;

	private FSetInGameVoiceSpeaking _SetInGameVoiceSpeaking;

	private FActivateGameOverlay _ActivateGameOverlay;

	private FActivateGameOverlayToUser _ActivateGameOverlayToUser;

	private FActivateGameOverlayToWebPage _ActivateGameOverlayToWebPage;

	private FActivateGameOverlayToStore _ActivateGameOverlayToStore;

	private FSetPlayedWith _SetPlayedWith;

	private FActivateGameOverlayInviteDialog _ActivateGameOverlayInviteDialog;

	private FGetSmallFriendAvatar _GetSmallFriendAvatar;

	private FGetMediumFriendAvatar _GetMediumFriendAvatar;

	private FGetLargeFriendAvatar _GetLargeFriendAvatar;

	private FRequestUserInformation _RequestUserInformation;

	private FRequestClanOfficerList _RequestClanOfficerList;

	private FGetClanOwner _GetClanOwner;

	private FGetClanOfficerCount _GetClanOfficerCount;

	private FGetClanOfficerByIndex _GetClanOfficerByIndex;

	private FGetUserRestrictions _GetUserRestrictions;

	private FSetRichPresence _SetRichPresence;

	private FClearRichPresence _ClearRichPresence;

	private FGetFriendRichPresence _GetFriendRichPresence;

	private FGetFriendRichPresenceKeyCount _GetFriendRichPresenceKeyCount;

	private FGetFriendRichPresenceKeyByIndex _GetFriendRichPresenceKeyByIndex;

	private FRequestFriendRichPresence _RequestFriendRichPresence;

	private FInviteUserToGame _InviteUserToGame;

	private FGetCoplayFriendCount _GetCoplayFriendCount;

	private FGetCoplayFriend _GetCoplayFriend;

	private FGetFriendCoplayTime _GetFriendCoplayTime;

	private FGetFriendCoplayGame _GetFriendCoplayGame;

	private FJoinClanChatRoom _JoinClanChatRoom;

	private FLeaveClanChatRoom _LeaveClanChatRoom;

	private FGetClanChatMemberCount _GetClanChatMemberCount;

	private FGetChatMemberByIndex _GetChatMemberByIndex;

	private FSendClanChatMessage _SendClanChatMessage;

	private FGetClanChatMessage _GetClanChatMessage;

	private FIsClanChatAdmin _IsClanChatAdmin;

	private FIsClanChatWindowOpenInSteam _IsClanChatWindowOpenInSteam;

	private FOpenClanChatWindowInSteam _OpenClanChatWindowInSteam;

	private FCloseClanChatWindowInSteam _CloseClanChatWindowInSteam;

	private FSetListenForFriendsMessages _SetListenForFriendsMessages;

	private FReplyToFriendMessage _ReplyToFriendMessage;

	private FGetFriendMessage _GetFriendMessage;

	private FGetFollowerCount _GetFollowerCount;

	private FIsFollowing _IsFollowing;

	private FEnumerateFollowingList _EnumerateFollowingList;

	private FIsClanPublic _IsClanPublic;

	private FIsClanOfficialGameGroup _IsClanOfficialGameGroup;

	private FGetNumChatsWithUnreadPriorityMessages _GetNumChatsWithUnreadPriorityMessages;

	public override string InterfaceName => "SteamFriends017";

	public override void InitInternals()
	{
		_GetPersonaName = Marshal.GetDelegateForFunctionPointer<FGetPersonaName>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(0)));
		_SetPersonaName = Marshal.GetDelegateForFunctionPointer<FSetPersonaName>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(8)));
		_GetPersonaState = Marshal.GetDelegateForFunctionPointer<FGetPersonaState>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(16)));
		_GetFriendCount = Marshal.GetDelegateForFunctionPointer<FGetFriendCount>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(24)));
		_GetFriendByIndex = Marshal.GetDelegateForFunctionPointer<FGetFriendByIndex>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(32)));
		_GetFriendRelationship = Marshal.GetDelegateForFunctionPointer<FGetFriendRelationship>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(40)));
		_GetFriendPersonaState = Marshal.GetDelegateForFunctionPointer<FGetFriendPersonaState>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(48)));
		_GetFriendPersonaName = Marshal.GetDelegateForFunctionPointer<FGetFriendPersonaName>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(56)));
		_GetFriendGamePlayed = Marshal.GetDelegateForFunctionPointer<FGetFriendGamePlayed>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(64)));
		_GetFriendPersonaNameHistory = Marshal.GetDelegateForFunctionPointer<FGetFriendPersonaNameHistory>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(72)));
		_GetFriendSteamLevel = Marshal.GetDelegateForFunctionPointer<FGetFriendSteamLevel>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(80)));
		_GetPlayerNickname = Marshal.GetDelegateForFunctionPointer<FGetPlayerNickname>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(88)));
		_GetFriendsGroupCount = Marshal.GetDelegateForFunctionPointer<FGetFriendsGroupCount>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(96)));
		_GetFriendsGroupIDByIndex = Marshal.GetDelegateForFunctionPointer<FGetFriendsGroupIDByIndex>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(104)));
		_GetFriendsGroupName = Marshal.GetDelegateForFunctionPointer<FGetFriendsGroupName>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(112)));
		_GetFriendsGroupMembersCount = Marshal.GetDelegateForFunctionPointer<FGetFriendsGroupMembersCount>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(120)));
		_GetFriendsGroupMembersList = Marshal.GetDelegateForFunctionPointer<FGetFriendsGroupMembersList>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(128)));
		_HasFriend = Marshal.GetDelegateForFunctionPointer<FHasFriend>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(136)));
		_GetClanCount = Marshal.GetDelegateForFunctionPointer<FGetClanCount>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(144)));
		_GetClanByIndex = Marshal.GetDelegateForFunctionPointer<FGetClanByIndex>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(152)));
		_GetClanName = Marshal.GetDelegateForFunctionPointer<FGetClanName>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(160)));
		_GetClanTag = Marshal.GetDelegateForFunctionPointer<FGetClanTag>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(168)));
		_GetClanActivityCounts = Marshal.GetDelegateForFunctionPointer<FGetClanActivityCounts>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(176)));
		_DownloadClanActivityCounts = Marshal.GetDelegateForFunctionPointer<FDownloadClanActivityCounts>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(184)));
		_GetFriendCountFromSource = Marshal.GetDelegateForFunctionPointer<FGetFriendCountFromSource>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(192)));
		_GetFriendFromSourceByIndex = Marshal.GetDelegateForFunctionPointer<FGetFriendFromSourceByIndex>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(200)));
		_IsUserInSource = Marshal.GetDelegateForFunctionPointer<FIsUserInSource>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(208)));
		_SetInGameVoiceSpeaking = Marshal.GetDelegateForFunctionPointer<FSetInGameVoiceSpeaking>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(216)));
		_ActivateGameOverlay = Marshal.GetDelegateForFunctionPointer<FActivateGameOverlay>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(224)));
		_ActivateGameOverlayToUser = Marshal.GetDelegateForFunctionPointer<FActivateGameOverlayToUser>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(232)));
		_ActivateGameOverlayToWebPage = Marshal.GetDelegateForFunctionPointer<FActivateGameOverlayToWebPage>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(240)));
		_ActivateGameOverlayToStore = Marshal.GetDelegateForFunctionPointer<FActivateGameOverlayToStore>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(248)));
		_SetPlayedWith = Marshal.GetDelegateForFunctionPointer<FSetPlayedWith>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(256)));
		_ActivateGameOverlayInviteDialog = Marshal.GetDelegateForFunctionPointer<FActivateGameOverlayInviteDialog>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(264)));
		_GetSmallFriendAvatar = Marshal.GetDelegateForFunctionPointer<FGetSmallFriendAvatar>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(272)));
		_GetMediumFriendAvatar = Marshal.GetDelegateForFunctionPointer<FGetMediumFriendAvatar>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(280)));
		_GetLargeFriendAvatar = Marshal.GetDelegateForFunctionPointer<FGetLargeFriendAvatar>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(288)));
		_RequestUserInformation = Marshal.GetDelegateForFunctionPointer<FRequestUserInformation>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(296)));
		_RequestClanOfficerList = Marshal.GetDelegateForFunctionPointer<FRequestClanOfficerList>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(304)));
		_GetClanOwner = Marshal.GetDelegateForFunctionPointer<FGetClanOwner>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(312)));
		_GetClanOfficerCount = Marshal.GetDelegateForFunctionPointer<FGetClanOfficerCount>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(320)));
		_GetClanOfficerByIndex = Marshal.GetDelegateForFunctionPointer<FGetClanOfficerByIndex>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(328)));
		_GetUserRestrictions = Marshal.GetDelegateForFunctionPointer<FGetUserRestrictions>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(336)));
		_SetRichPresence = Marshal.GetDelegateForFunctionPointer<FSetRichPresence>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(344)));
		_ClearRichPresence = Marshal.GetDelegateForFunctionPointer<FClearRichPresence>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(352)));
		_GetFriendRichPresence = Marshal.GetDelegateForFunctionPointer<FGetFriendRichPresence>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(360)));
		_GetFriendRichPresenceKeyCount = Marshal.GetDelegateForFunctionPointer<FGetFriendRichPresenceKeyCount>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(368)));
		_GetFriendRichPresenceKeyByIndex = Marshal.GetDelegateForFunctionPointer<FGetFriendRichPresenceKeyByIndex>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(376)));
		_RequestFriendRichPresence = Marshal.GetDelegateForFunctionPointer<FRequestFriendRichPresence>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(384)));
		_InviteUserToGame = Marshal.GetDelegateForFunctionPointer<FInviteUserToGame>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(392)));
		_GetCoplayFriendCount = Marshal.GetDelegateForFunctionPointer<FGetCoplayFriendCount>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(400)));
		_GetCoplayFriend = Marshal.GetDelegateForFunctionPointer<FGetCoplayFriend>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(408)));
		_GetFriendCoplayTime = Marshal.GetDelegateForFunctionPointer<FGetFriendCoplayTime>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(416)));
		_GetFriendCoplayGame = Marshal.GetDelegateForFunctionPointer<FGetFriendCoplayGame>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(424)));
		_JoinClanChatRoom = Marshal.GetDelegateForFunctionPointer<FJoinClanChatRoom>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(432)));
		_LeaveClanChatRoom = Marshal.GetDelegateForFunctionPointer<FLeaveClanChatRoom>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(440)));
		_GetClanChatMemberCount = Marshal.GetDelegateForFunctionPointer<FGetClanChatMemberCount>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(448)));
		_GetChatMemberByIndex = Marshal.GetDelegateForFunctionPointer<FGetChatMemberByIndex>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(456)));
		_SendClanChatMessage = Marshal.GetDelegateForFunctionPointer<FSendClanChatMessage>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(464)));
		_GetClanChatMessage = Marshal.GetDelegateForFunctionPointer<FGetClanChatMessage>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(472)));
		_IsClanChatAdmin = Marshal.GetDelegateForFunctionPointer<FIsClanChatAdmin>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(480)));
		_IsClanChatWindowOpenInSteam = Marshal.GetDelegateForFunctionPointer<FIsClanChatWindowOpenInSteam>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(488)));
		_OpenClanChatWindowInSteam = Marshal.GetDelegateForFunctionPointer<FOpenClanChatWindowInSteam>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(496)));
		_CloseClanChatWindowInSteam = Marshal.GetDelegateForFunctionPointer<FCloseClanChatWindowInSteam>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(504)));
		_SetListenForFriendsMessages = Marshal.GetDelegateForFunctionPointer<FSetListenForFriendsMessages>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(512)));
		_ReplyToFriendMessage = Marshal.GetDelegateForFunctionPointer<FReplyToFriendMessage>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(520)));
		_GetFriendMessage = Marshal.GetDelegateForFunctionPointer<FGetFriendMessage>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(528)));
		_GetFollowerCount = Marshal.GetDelegateForFunctionPointer<FGetFollowerCount>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(536)));
		_IsFollowing = Marshal.GetDelegateForFunctionPointer<FIsFollowing>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(544)));
		_EnumerateFollowingList = Marshal.GetDelegateForFunctionPointer<FEnumerateFollowingList>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(552)));
		_IsClanPublic = Marshal.GetDelegateForFunctionPointer<FIsClanPublic>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(560)));
		_IsClanOfficialGameGroup = Marshal.GetDelegateForFunctionPointer<FIsClanOfficialGameGroup>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(568)));
		_GetNumChatsWithUnreadPriorityMessages = Marshal.GetDelegateForFunctionPointer<FGetNumChatsWithUnreadPriorityMessages>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(576)));
	}

	internal override void Shutdown()
	{
		base.Shutdown();
		_GetPersonaName = null;
		_SetPersonaName = null;
		_GetPersonaState = null;
		_GetFriendCount = null;
		_GetFriendByIndex = null;
		_GetFriendRelationship = null;
		_GetFriendPersonaState = null;
		_GetFriendPersonaName = null;
		_GetFriendGamePlayed = null;
		_GetFriendPersonaNameHistory = null;
		_GetFriendSteamLevel = null;
		_GetPlayerNickname = null;
		_GetFriendsGroupCount = null;
		_GetFriendsGroupIDByIndex = null;
		_GetFriendsGroupName = null;
		_GetFriendsGroupMembersCount = null;
		_GetFriendsGroupMembersList = null;
		_HasFriend = null;
		_GetClanCount = null;
		_GetClanByIndex = null;
		_GetClanName = null;
		_GetClanTag = null;
		_GetClanActivityCounts = null;
		_DownloadClanActivityCounts = null;
		_GetFriendCountFromSource = null;
		_GetFriendFromSourceByIndex = null;
		_IsUserInSource = null;
		_SetInGameVoiceSpeaking = null;
		_ActivateGameOverlay = null;
		_ActivateGameOverlayToUser = null;
		_ActivateGameOverlayToWebPage = null;
		_ActivateGameOverlayToStore = null;
		_SetPlayedWith = null;
		_ActivateGameOverlayInviteDialog = null;
		_GetSmallFriendAvatar = null;
		_GetMediumFriendAvatar = null;
		_GetLargeFriendAvatar = null;
		_RequestUserInformation = null;
		_RequestClanOfficerList = null;
		_GetClanOwner = null;
		_GetClanOfficerCount = null;
		_GetClanOfficerByIndex = null;
		_GetUserRestrictions = null;
		_SetRichPresence = null;
		_ClearRichPresence = null;
		_GetFriendRichPresence = null;
		_GetFriendRichPresenceKeyCount = null;
		_GetFriendRichPresenceKeyByIndex = null;
		_RequestFriendRichPresence = null;
		_InviteUserToGame = null;
		_GetCoplayFriendCount = null;
		_GetCoplayFriend = null;
		_GetFriendCoplayTime = null;
		_GetFriendCoplayGame = null;
		_JoinClanChatRoom = null;
		_LeaveClanChatRoom = null;
		_GetClanChatMemberCount = null;
		_GetChatMemberByIndex = null;
		_SendClanChatMessage = null;
		_GetClanChatMessage = null;
		_IsClanChatAdmin = null;
		_IsClanChatWindowOpenInSteam = null;
		_OpenClanChatWindowInSteam = null;
		_CloseClanChatWindowInSteam = null;
		_SetListenForFriendsMessages = null;
		_ReplyToFriendMessage = null;
		_GetFriendMessage = null;
		_GetFollowerCount = null;
		_IsFollowing = null;
		_EnumerateFollowingList = null;
		_IsClanPublic = null;
		_IsClanOfficialGameGroup = null;
		_GetNumChatsWithUnreadPriorityMessages = null;
	}

	internal string GetPersonaName()
	{
		Utf8StringPointer utf8StringPointer = _GetPersonaName(Self);
		return utf8StringPointer;
	}

	internal async Task<SetPersonaNameResponse_t?> SetPersonaName([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchPersonaName)
	{
		SteamAPICall_t returnValue = _SetPersonaName(Self, pchPersonaName);
		return await SetPersonaNameResponse_t.GetResultAsync(returnValue);
	}

	internal FriendState GetPersonaState()
	{
		return _GetPersonaState(Self);
	}

	internal int GetFriendCount(int iFriendFlags)
	{
		return _GetFriendCount(Self, iFriendFlags);
	}

	internal SteamId GetFriendByIndex(int iFriend, int iFriendFlags)
	{
		return _GetFriendByIndex(Self, iFriend, iFriendFlags);
	}

	internal Relationship GetFriendRelationship(SteamId steamIDFriend)
	{
		return _GetFriendRelationship(Self, steamIDFriend);
	}

	internal FriendState GetFriendPersonaState(SteamId steamIDFriend)
	{
		return _GetFriendPersonaState(Self, steamIDFriend);
	}

	internal string GetFriendPersonaName(SteamId steamIDFriend)
	{
		Utf8StringPointer utf8StringPointer = _GetFriendPersonaName(Self, steamIDFriend);
		return utf8StringPointer;
	}

	internal bool GetFriendGamePlayed(SteamId steamIDFriend, ref FriendGameInfo_t pFriendGameInfo)
	{
		return _GetFriendGamePlayed(Self, steamIDFriend, ref pFriendGameInfo);
	}

	internal string GetFriendPersonaNameHistory(SteamId steamIDFriend, int iPersonaName)
	{
		Utf8StringPointer utf8StringPointer = _GetFriendPersonaNameHistory(Self, steamIDFriend, iPersonaName);
		return utf8StringPointer;
	}

	internal int GetFriendSteamLevel(SteamId steamIDFriend)
	{
		return _GetFriendSteamLevel(Self, steamIDFriend);
	}

	internal string GetPlayerNickname(SteamId steamIDPlayer)
	{
		Utf8StringPointer utf8StringPointer = _GetPlayerNickname(Self, steamIDPlayer);
		return utf8StringPointer;
	}

	internal int GetFriendsGroupCount()
	{
		return _GetFriendsGroupCount(Self);
	}

	internal FriendsGroupID_t GetFriendsGroupIDByIndex(int iFG)
	{
		return _GetFriendsGroupIDByIndex(Self, iFG);
	}

	internal string GetFriendsGroupName(FriendsGroupID_t friendsGroupID)
	{
		Utf8StringPointer utf8StringPointer = _GetFriendsGroupName(Self, friendsGroupID);
		return utf8StringPointer;
	}

	internal int GetFriendsGroupMembersCount(FriendsGroupID_t friendsGroupID)
	{
		return _GetFriendsGroupMembersCount(Self, friendsGroupID);
	}

	internal void GetFriendsGroupMembersList(FriendsGroupID_t friendsGroupID, [In][Out] SteamId[] pOutSteamIDMembers, int nMembersCount)
	{
		_GetFriendsGroupMembersList(Self, friendsGroupID, pOutSteamIDMembers, nMembersCount);
	}

	internal bool HasFriend(SteamId steamIDFriend, int iFriendFlags)
	{
		return _HasFriend(Self, steamIDFriend, iFriendFlags);
	}

	internal int GetClanCount()
	{
		return _GetClanCount(Self);
	}

	internal SteamId GetClanByIndex(int iClan)
	{
		return _GetClanByIndex(Self, iClan);
	}

	internal string GetClanName(SteamId steamIDClan)
	{
		Utf8StringPointer utf8StringPointer = _GetClanName(Self, steamIDClan);
		return utf8StringPointer;
	}

	internal string GetClanTag(SteamId steamIDClan)
	{
		Utf8StringPointer utf8StringPointer = _GetClanTag(Self, steamIDClan);
		return utf8StringPointer;
	}

	internal bool GetClanActivityCounts(SteamId steamIDClan, ref int pnOnline, ref int pnInGame, ref int pnChatting)
	{
		return _GetClanActivityCounts(Self, steamIDClan, ref pnOnline, ref pnInGame, ref pnChatting);
	}

	internal async Task<DownloadClanActivityCountsResult_t?> DownloadClanActivityCounts([In][Out] SteamId[] psteamIDClans, int cClansToRequest)
	{
		SteamAPICall_t returnValue = _DownloadClanActivityCounts(Self, psteamIDClans, cClansToRequest);
		return await DownloadClanActivityCountsResult_t.GetResultAsync(returnValue);
	}

	internal int GetFriendCountFromSource(SteamId steamIDSource)
	{
		return _GetFriendCountFromSource(Self, steamIDSource);
	}

	internal SteamId GetFriendFromSourceByIndex(SteamId steamIDSource, int iFriend)
	{
		return _GetFriendFromSourceByIndex(Self, steamIDSource, iFriend);
	}

	internal bool IsUserInSource(SteamId steamIDUser, SteamId steamIDSource)
	{
		return _IsUserInSource(Self, steamIDUser, steamIDSource);
	}

	internal void SetInGameVoiceSpeaking(SteamId steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bSpeaking)
	{
		_SetInGameVoiceSpeaking(Self, steamIDUser, bSpeaking);
	}

	internal void ActivateGameOverlay([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchDialog)
	{
		_ActivateGameOverlay(Self, pchDialog);
	}

	internal void ActivateGameOverlayToUser([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchDialog, SteamId steamID)
	{
		_ActivateGameOverlayToUser(Self, pchDialog, steamID);
	}

	internal void ActivateGameOverlayToWebPage([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchURL, ActivateGameOverlayToWebPageMode eMode)
	{
		_ActivateGameOverlayToWebPage(Self, pchURL, eMode);
	}

	internal void ActivateGameOverlayToStore(AppId nAppID, OverlayToStoreFlag eFlag)
	{
		_ActivateGameOverlayToStore(Self, nAppID, eFlag);
	}

	internal void SetPlayedWith(SteamId steamIDUserPlayedWith)
	{
		_SetPlayedWith(Self, steamIDUserPlayedWith);
	}

	internal void ActivateGameOverlayInviteDialog(SteamId steamIDLobby)
	{
		_ActivateGameOverlayInviteDialog(Self, steamIDLobby);
	}

	internal int GetSmallFriendAvatar(SteamId steamIDFriend)
	{
		return _GetSmallFriendAvatar(Self, steamIDFriend);
	}

	internal int GetMediumFriendAvatar(SteamId steamIDFriend)
	{
		return _GetMediumFriendAvatar(Self, steamIDFriend);
	}

	internal int GetLargeFriendAvatar(SteamId steamIDFriend)
	{
		return _GetLargeFriendAvatar(Self, steamIDFriend);
	}

	internal bool RequestUserInformation(SteamId steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly)
	{
		return _RequestUserInformation(Self, steamIDUser, bRequireNameOnly);
	}

	internal async Task<ClanOfficerListResponse_t?> RequestClanOfficerList(SteamId steamIDClan)
	{
		SteamAPICall_t returnValue = _RequestClanOfficerList(Self, steamIDClan);
		return await ClanOfficerListResponse_t.GetResultAsync(returnValue);
	}

	internal SteamId GetClanOwner(SteamId steamIDClan)
	{
		return _GetClanOwner(Self, steamIDClan);
	}

	internal int GetClanOfficerCount(SteamId steamIDClan)
	{
		return _GetClanOfficerCount(Self, steamIDClan);
	}

	internal SteamId GetClanOfficerByIndex(SteamId steamIDClan, int iOfficer)
	{
		return _GetClanOfficerByIndex(Self, steamIDClan, iOfficer);
	}

	internal uint GetUserRestrictions()
	{
		return _GetUserRestrictions(Self);
	}

	internal bool SetRichPresence([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKey, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchValue)
	{
		return _SetRichPresence(Self, pchKey, pchValue);
	}

	internal void ClearRichPresence()
	{
		_ClearRichPresence(Self);
	}

	internal string GetFriendRichPresence(SteamId steamIDFriend, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKey)
	{
		Utf8StringPointer utf8StringPointer = _GetFriendRichPresence(Self, steamIDFriend, pchKey);
		return utf8StringPointer;
	}

	internal int GetFriendRichPresenceKeyCount(SteamId steamIDFriend)
	{
		return _GetFriendRichPresenceKeyCount(Self, steamIDFriend);
	}

	internal string GetFriendRichPresenceKeyByIndex(SteamId steamIDFriend, int iKey)
	{
		Utf8StringPointer utf8StringPointer = _GetFriendRichPresenceKeyByIndex(Self, steamIDFriend, iKey);
		return utf8StringPointer;
	}

	internal void RequestFriendRichPresence(SteamId steamIDFriend)
	{
		_RequestFriendRichPresence(Self, steamIDFriend);
	}

	internal bool InviteUserToGame(SteamId steamIDFriend, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchConnectString)
	{
		return _InviteUserToGame(Self, steamIDFriend, pchConnectString);
	}

	internal int GetCoplayFriendCount()
	{
		return _GetCoplayFriendCount(Self);
	}

	internal SteamId GetCoplayFriend(int iCoplayFriend)
	{
		return _GetCoplayFriend(Self, iCoplayFriend);
	}

	internal int GetFriendCoplayTime(SteamId steamIDFriend)
	{
		return _GetFriendCoplayTime(Self, steamIDFriend);
	}

	internal AppId GetFriendCoplayGame(SteamId steamIDFriend)
	{
		return _GetFriendCoplayGame(Self, steamIDFriend);
	}

	internal async Task<JoinClanChatRoomCompletionResult_t?> JoinClanChatRoom(SteamId steamIDClan)
	{
		SteamAPICall_t returnValue = _JoinClanChatRoom(Self, steamIDClan);
		return await JoinClanChatRoomCompletionResult_t.GetResultAsync(returnValue);
	}

	internal bool LeaveClanChatRoom(SteamId steamIDClan)
	{
		return _LeaveClanChatRoom(Self, steamIDClan);
	}

	internal int GetClanChatMemberCount(SteamId steamIDClan)
	{
		return _GetClanChatMemberCount(Self, steamIDClan);
	}

	internal SteamId GetChatMemberByIndex(SteamId steamIDClan, int iUser)
	{
		return _GetChatMemberByIndex(Self, steamIDClan, iUser);
	}

	internal bool SendClanChatMessage(SteamId steamIDClanChat, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchText)
	{
		return _SendClanChatMessage(Self, steamIDClanChat, pchText);
	}

	internal int GetClanChatMessage(SteamId steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, ref ChatEntryType peChatEntryType, ref SteamId psteamidChatter)
	{
		return _GetClanChatMessage(Self, steamIDClanChat, iMessage, prgchText, cchTextMax, ref peChatEntryType, ref psteamidChatter);
	}

	internal bool IsClanChatAdmin(SteamId steamIDClanChat, SteamId steamIDUser)
	{
		return _IsClanChatAdmin(Self, steamIDClanChat, steamIDUser);
	}

	internal bool IsClanChatWindowOpenInSteam(SteamId steamIDClanChat)
	{
		return _IsClanChatWindowOpenInSteam(Self, steamIDClanChat);
	}

	internal bool OpenClanChatWindowInSteam(SteamId steamIDClanChat)
	{
		return _OpenClanChatWindowInSteam(Self, steamIDClanChat);
	}

	internal bool CloseClanChatWindowInSteam(SteamId steamIDClanChat)
	{
		return _CloseClanChatWindowInSteam(Self, steamIDClanChat);
	}

	internal bool SetListenForFriendsMessages([MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled)
	{
		return _SetListenForFriendsMessages(Self, bInterceptEnabled);
	}

	internal bool ReplyToFriendMessage(SteamId steamIDFriend, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchMsgToSend)
	{
		return _ReplyToFriendMessage(Self, steamIDFriend, pchMsgToSend);
	}

	internal int GetFriendMessage(SteamId steamIDFriend, int iMessageID, IntPtr pvData, int cubData, ref ChatEntryType peChatEntryType)
	{
		return _GetFriendMessage(Self, steamIDFriend, iMessageID, pvData, cubData, ref peChatEntryType);
	}

	internal async Task<FriendsGetFollowerCount_t?> GetFollowerCount(SteamId steamID)
	{
		SteamAPICall_t returnValue = _GetFollowerCount(Self, steamID);
		return await FriendsGetFollowerCount_t.GetResultAsync(returnValue);
	}

	internal async Task<FriendsIsFollowing_t?> IsFollowing(SteamId steamID)
	{
		SteamAPICall_t returnValue = _IsFollowing(Self, steamID);
		return await FriendsIsFollowing_t.GetResultAsync(returnValue);
	}

	internal async Task<FriendsEnumerateFollowingList_t?> EnumerateFollowingList(uint unStartIndex)
	{
		SteamAPICall_t returnValue = _EnumerateFollowingList(Self, unStartIndex);
		return await FriendsEnumerateFollowingList_t.GetResultAsync(returnValue);
	}

	internal bool IsClanPublic(SteamId steamIDClan)
	{
		return _IsClanPublic(Self, steamIDClan);
	}

	internal bool IsClanOfficialGameGroup(SteamId steamIDClan)
	{
		return _IsClanOfficialGameGroup(Self, steamIDClan);
	}

	internal int GetNumChatsWithUnreadPriorityMessages()
	{
		return _GetNumChatsWithUnreadPriorityMessages(Self);
	}
}
