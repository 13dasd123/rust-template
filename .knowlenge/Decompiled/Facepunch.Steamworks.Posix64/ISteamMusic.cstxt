using System;
using System.Runtime.InteropServices;
using Steamworks;

internal class ISteamMusic : SteamInterface
{
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FBIsEnabled(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FBIsPlaying(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate MusicStatus FGetPlaybackStatus(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FPlay(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FPause(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FPlayPrevious(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FPlayNext(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetVolume(IntPtr self, float flVolume);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate float FGetVolume(IntPtr self);

	private FBIsEnabled _BIsEnabled;

	private FBIsPlaying _BIsPlaying;

	private FGetPlaybackStatus _GetPlaybackStatus;

	private FPlay _Play;

	private FPause _Pause;

	private FPlayPrevious _PlayPrevious;

	private FPlayNext _PlayNext;

	private FSetVolume _SetVolume;

	private FGetVolume _GetVolume;

	public override string InterfaceName => "STEAMMUSIC_INTERFACE_VERSION001";

	public override void InitInternals()
	{
		_BIsEnabled = Marshal.GetDelegateForFunctionPointer<FBIsEnabled>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(0)));
		_BIsPlaying = Marshal.GetDelegateForFunctionPointer<FBIsPlaying>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(8)));
		_GetPlaybackStatus = Marshal.GetDelegateForFunctionPointer<FGetPlaybackStatus>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(16)));
		_Play = Marshal.GetDelegateForFunctionPointer<FPlay>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(24)));
		_Pause = Marshal.GetDelegateForFunctionPointer<FPause>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(32)));
		_PlayPrevious = Marshal.GetDelegateForFunctionPointer<FPlayPrevious>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(40)));
		_PlayNext = Marshal.GetDelegateForFunctionPointer<FPlayNext>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(48)));
		_SetVolume = Marshal.GetDelegateForFunctionPointer<FSetVolume>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(56)));
		_GetVolume = Marshal.GetDelegateForFunctionPointer<FGetVolume>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(64)));
	}

	internal override void Shutdown()
	{
		base.Shutdown();
		_BIsEnabled = null;
		_BIsPlaying = null;
		_GetPlaybackStatus = null;
		_Play = null;
		_Pause = null;
		_PlayPrevious = null;
		_PlayNext = null;
		_SetVolume = null;
		_GetVolume = null;
	}

	internal bool BIsEnabled()
	{
		return _BIsEnabled(Self);
	}

	internal bool BIsPlaying()
	{
		return _BIsPlaying(Self);
	}

	internal MusicStatus GetPlaybackStatus()
	{
		return _GetPlaybackStatus(Self);
	}

	internal void Play()
	{
		_Play(Self);
	}

	internal void Pause()
	{
		_Pause(Self);
	}

	internal void PlayPrevious()
	{
		_PlayPrevious(Self);
	}

	internal void PlayNext()
	{
		_PlayNext(Self);
	}

	internal void SetVolume(float flVolume)
	{
		_SetVolume(Self, flVolume);
	}

	internal float GetVolume()
	{
		return _GetVolume(Self);
	}
}
