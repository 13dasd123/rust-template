using System;
using System.Runtime.InteropServices;
using Steamworks;
using Steamworks.Data;

internal class ISteamMatchmakingServers : SteamInterface
{
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate HServerListRequest FRequestInternetServerList(IntPtr self, AppId iApp, [In][Out] ref MatchMakingKeyValuePair[] ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate HServerListRequest FRequestLANServerList(IntPtr self, AppId iApp, IntPtr pRequestServersResponse);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate HServerListRequest FRequestFriendsServerList(IntPtr self, AppId iApp, [In][Out] ref MatchMakingKeyValuePair[] ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate HServerListRequest FRequestFavoritesServerList(IntPtr self, AppId iApp, [In][Out] ref MatchMakingKeyValuePair[] ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate HServerListRequest FRequestHistoryServerList(IntPtr self, AppId iApp, [In][Out] ref MatchMakingKeyValuePair[] ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate HServerListRequest FRequestSpectatorServerList(IntPtr self, AppId iApp, [In][Out] ref MatchMakingKeyValuePair[] ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FReleaseRequest(IntPtr self, HServerListRequest hServerListRequest);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate IntPtr FGetServerDetails(IntPtr self, HServerListRequest hRequest, int iServer);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FCancelQuery(IntPtr self, HServerListRequest hRequest);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FRefreshQuery(IntPtr self, HServerListRequest hRequest);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FIsRefreshing(IntPtr self, HServerListRequest hRequest);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetServerCount(IntPtr self, HServerListRequest hRequest);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FRefreshServer(IntPtr self, HServerListRequest hRequest, int iServer);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate HServerQuery FPingServer(IntPtr self, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate HServerQuery FPlayerDetails(IntPtr self, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate HServerQuery FServerRules(IntPtr self, uint unIP, ushort usPort, IntPtr pRequestServersResponse);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FCancelServerQuery(IntPtr self, HServerQuery hServerQuery);

	private FRequestInternetServerList _RequestInternetServerList;

	private FRequestLANServerList _RequestLANServerList;

	private FRequestFriendsServerList _RequestFriendsServerList;

	private FRequestFavoritesServerList _RequestFavoritesServerList;

	private FRequestHistoryServerList _RequestHistoryServerList;

	private FRequestSpectatorServerList _RequestSpectatorServerList;

	private FReleaseRequest _ReleaseRequest;

	private FGetServerDetails _GetServerDetails;

	private FCancelQuery _CancelQuery;

	private FRefreshQuery _RefreshQuery;

	private FIsRefreshing _IsRefreshing;

	private FGetServerCount _GetServerCount;

	private FRefreshServer _RefreshServer;

	private FPingServer _PingServer;

	private FPlayerDetails _PlayerDetails;

	private FServerRules _ServerRules;

	private FCancelServerQuery _CancelServerQuery;

	public override string InterfaceName => "SteamMatchMakingServers002";

	public override void InitInternals()
	{
		_RequestInternetServerList = Marshal.GetDelegateForFunctionPointer<FRequestInternetServerList>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(0)));
		_RequestLANServerList = Marshal.GetDelegateForFunctionPointer<FRequestLANServerList>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(8)));
		_RequestFriendsServerList = Marshal.GetDelegateForFunctionPointer<FRequestFriendsServerList>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(16)));
		_RequestFavoritesServerList = Marshal.GetDelegateForFunctionPointer<FRequestFavoritesServerList>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(24)));
		_RequestHistoryServerList = Marshal.GetDelegateForFunctionPointer<FRequestHistoryServerList>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(32)));
		_RequestSpectatorServerList = Marshal.GetDelegateForFunctionPointer<FRequestSpectatorServerList>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(40)));
		_ReleaseRequest = Marshal.GetDelegateForFunctionPointer<FReleaseRequest>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(48)));
		_GetServerDetails = Marshal.GetDelegateForFunctionPointer<FGetServerDetails>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(56)));
		_CancelQuery = Marshal.GetDelegateForFunctionPointer<FCancelQuery>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(64)));
		_RefreshQuery = Marshal.GetDelegateForFunctionPointer<FRefreshQuery>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(72)));
		_IsRefreshing = Marshal.GetDelegateForFunctionPointer<FIsRefreshing>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(80)));
		_GetServerCount = Marshal.GetDelegateForFunctionPointer<FGetServerCount>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(88)));
		_RefreshServer = Marshal.GetDelegateForFunctionPointer<FRefreshServer>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(96)));
		_PingServer = Marshal.GetDelegateForFunctionPointer<FPingServer>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(104)));
		_PlayerDetails = Marshal.GetDelegateForFunctionPointer<FPlayerDetails>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(112)));
		_ServerRules = Marshal.GetDelegateForFunctionPointer<FServerRules>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(120)));
		_CancelServerQuery = Marshal.GetDelegateForFunctionPointer<FCancelServerQuery>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(128)));
	}

	internal override void Shutdown()
	{
		base.Shutdown();
		_RequestInternetServerList = null;
		_RequestLANServerList = null;
		_RequestFriendsServerList = null;
		_RequestFavoritesServerList = null;
		_RequestHistoryServerList = null;
		_RequestSpectatorServerList = null;
		_ReleaseRequest = null;
		_GetServerDetails = null;
		_CancelQuery = null;
		_RefreshQuery = null;
		_IsRefreshing = null;
		_GetServerCount = null;
		_RefreshServer = null;
		_PingServer = null;
		_PlayerDetails = null;
		_ServerRules = null;
		_CancelServerQuery = null;
	}

	internal HServerListRequest RequestInternetServerList(AppId iApp, [In][Out] ref MatchMakingKeyValuePair[] ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
	{
		return _RequestInternetServerList(Self, iApp, ref ppchFilters, nFilters, pRequestServersResponse);
	}

	internal HServerListRequest RequestLANServerList(AppId iApp, IntPtr pRequestServersResponse)
	{
		return _RequestLANServerList(Self, iApp, pRequestServersResponse);
	}

	internal HServerListRequest RequestFriendsServerList(AppId iApp, [In][Out] ref MatchMakingKeyValuePair[] ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
	{
		return _RequestFriendsServerList(Self, iApp, ref ppchFilters, nFilters, pRequestServersResponse);
	}

	internal HServerListRequest RequestFavoritesServerList(AppId iApp, [In][Out] ref MatchMakingKeyValuePair[] ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
	{
		return _RequestFavoritesServerList(Self, iApp, ref ppchFilters, nFilters, pRequestServersResponse);
	}

	internal HServerListRequest RequestHistoryServerList(AppId iApp, [In][Out] ref MatchMakingKeyValuePair[] ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
	{
		return _RequestHistoryServerList(Self, iApp, ref ppchFilters, nFilters, pRequestServersResponse);
	}

	internal HServerListRequest RequestSpectatorServerList(AppId iApp, [In][Out] ref MatchMakingKeyValuePair[] ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
	{
		return _RequestSpectatorServerList(Self, iApp, ref ppchFilters, nFilters, pRequestServersResponse);
	}

	internal void ReleaseRequest(HServerListRequest hServerListRequest)
	{
		_ReleaseRequest(Self, hServerListRequest);
	}

	internal gameserveritem_t GetServerDetails(HServerListRequest hRequest, int iServer)
	{
		IntPtr p = _GetServerDetails(Self, hRequest, iServer);
		return gameserveritem_t.Fill(p);
	}

	internal void CancelQuery(HServerListRequest hRequest)
	{
		_CancelQuery(Self, hRequest);
	}

	internal void RefreshQuery(HServerListRequest hRequest)
	{
		_RefreshQuery(Self, hRequest);
	}

	internal bool IsRefreshing(HServerListRequest hRequest)
	{
		return _IsRefreshing(Self, hRequest);
	}

	internal int GetServerCount(HServerListRequest hRequest)
	{
		return _GetServerCount(Self, hRequest);
	}

	internal void RefreshServer(HServerListRequest hRequest, int iServer)
	{
		_RefreshServer(Self, hRequest, iServer);
	}

	internal HServerQuery PingServer(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
	{
		return _PingServer(Self, unIP, usPort, pRequestServersResponse);
	}

	internal HServerQuery PlayerDetails(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
	{
		return _PlayerDetails(Self, unIP, usPort, pRequestServersResponse);
	}

	internal HServerQuery ServerRules(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
	{
		return _ServerRules(Self, unIP, usPort, pRequestServersResponse);
	}

	internal void CancelServerQuery(HServerQuery hServerQuery)
	{
		_CancelServerQuery(Self, hServerQuery);
	}
}
