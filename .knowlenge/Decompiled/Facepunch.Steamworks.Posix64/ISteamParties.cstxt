using System;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using Steamworks;
using Steamworks.Data;

internal class ISteamParties : SteamInterface
{
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate uint FGetNumActiveBeacons(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate PartyBeaconID_t FGetBeaconByIndex(IntPtr self, uint unIndex);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetBeaconDetails(IntPtr self, PartyBeaconID_t ulBeaconID, ref SteamId pSteamIDBeaconOwner, ref SteamPartyBeaconLocation_t pLocation, IntPtr pchMetadata, int cchMetadata);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FJoinParty(IntPtr self, PartyBeaconID_t ulBeaconID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetNumAvailableBeaconLocations(IntPtr self, ref uint puNumLocations);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetAvailableBeaconLocations(IntPtr self, ref SteamPartyBeaconLocation_t pLocationList, uint uMaxNumLocations);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FCreateBeacon(IntPtr self, uint unOpenSlots, ref SteamPartyBeaconLocation_t pBeaconLocation, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchConnectString, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchMetadata);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FOnReservationCompleted(IntPtr self, PartyBeaconID_t ulBeacon, SteamId steamIDUser);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FCancelReservation(IntPtr self, PartyBeaconID_t ulBeacon, SteamId steamIDUser);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FChangeNumOpenSlots(IntPtr self, PartyBeaconID_t ulBeacon, uint unOpenSlots);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FDestroyBeacon(IntPtr self, PartyBeaconID_t ulBeacon);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetBeaconLocationData(IntPtr self, SteamPartyBeaconLocation_t BeaconLocation, SteamPartyBeaconLocationData eData, IntPtr pchDataStringOut, int cchDataStringOut);

	private FGetNumActiveBeacons _GetNumActiveBeacons;

	private FGetBeaconByIndex _GetBeaconByIndex;

	private FGetBeaconDetails _GetBeaconDetails;

	private FJoinParty _JoinParty;

	private FGetNumAvailableBeaconLocations _GetNumAvailableBeaconLocations;

	private FGetAvailableBeaconLocations _GetAvailableBeaconLocations;

	private FCreateBeacon _CreateBeacon;

	private FOnReservationCompleted _OnReservationCompleted;

	private FCancelReservation _CancelReservation;

	private FChangeNumOpenSlots _ChangeNumOpenSlots;

	private FDestroyBeacon _DestroyBeacon;

	private FGetBeaconLocationData _GetBeaconLocationData;

	public override string InterfaceName => "SteamParties002";

	public override void InitInternals()
	{
		_GetNumActiveBeacons = Marshal.GetDelegateForFunctionPointer<FGetNumActiveBeacons>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(0)));
		_GetBeaconByIndex = Marshal.GetDelegateForFunctionPointer<FGetBeaconByIndex>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(8)));
		_GetBeaconDetails = Marshal.GetDelegateForFunctionPointer<FGetBeaconDetails>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(16)));
		_JoinParty = Marshal.GetDelegateForFunctionPointer<FJoinParty>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(24)));
		_GetNumAvailableBeaconLocations = Marshal.GetDelegateForFunctionPointer<FGetNumAvailableBeaconLocations>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(32)));
		_GetAvailableBeaconLocations = Marshal.GetDelegateForFunctionPointer<FGetAvailableBeaconLocations>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(40)));
		_CreateBeacon = Marshal.GetDelegateForFunctionPointer<FCreateBeacon>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(48)));
		_OnReservationCompleted = Marshal.GetDelegateForFunctionPointer<FOnReservationCompleted>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(56)));
		_CancelReservation = Marshal.GetDelegateForFunctionPointer<FCancelReservation>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(64)));
		_ChangeNumOpenSlots = Marshal.GetDelegateForFunctionPointer<FChangeNumOpenSlots>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(72)));
		_DestroyBeacon = Marshal.GetDelegateForFunctionPointer<FDestroyBeacon>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(80)));
		_GetBeaconLocationData = Marshal.GetDelegateForFunctionPointer<FGetBeaconLocationData>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(88)));
	}

	internal override void Shutdown()
	{
		base.Shutdown();
		_GetNumActiveBeacons = null;
		_GetBeaconByIndex = null;
		_GetBeaconDetails = null;
		_JoinParty = null;
		_GetNumAvailableBeaconLocations = null;
		_GetAvailableBeaconLocations = null;
		_CreateBeacon = null;
		_OnReservationCompleted = null;
		_CancelReservation = null;
		_ChangeNumOpenSlots = null;
		_DestroyBeacon = null;
		_GetBeaconLocationData = null;
	}

	internal uint GetNumActiveBeacons()
	{
		return _GetNumActiveBeacons(Self);
	}

	internal PartyBeaconID_t GetBeaconByIndex(uint unIndex)
	{
		return _GetBeaconByIndex(Self, unIndex);
	}

	internal bool GetBeaconDetails(PartyBeaconID_t ulBeaconID, ref SteamId pSteamIDBeaconOwner, ref SteamPartyBeaconLocation_t pLocation, out string pchMetadata)
	{
		IntPtr intPtr = Helpers.TakeMemory();
		bool result = _GetBeaconDetails(Self, ulBeaconID, ref pSteamIDBeaconOwner, ref pLocation, intPtr, 32768);
		pchMetadata = Helpers.MemoryToString(intPtr);
		return result;
	}

	internal async Task<JoinPartyCallback_t?> JoinParty(PartyBeaconID_t ulBeaconID)
	{
		SteamAPICall_t returnValue = _JoinParty(Self, ulBeaconID);
		return await JoinPartyCallback_t.GetResultAsync(returnValue);
	}

	internal bool GetNumAvailableBeaconLocations(ref uint puNumLocations)
	{
		return _GetNumAvailableBeaconLocations(Self, ref puNumLocations);
	}

	internal bool GetAvailableBeaconLocations(ref SteamPartyBeaconLocation_t pLocationList, uint uMaxNumLocations)
	{
		return _GetAvailableBeaconLocations(Self, ref pLocationList, uMaxNumLocations);
	}

	internal async Task<CreateBeaconCallback_t?> CreateBeacon(uint unOpenSlots, SteamPartyBeaconLocation_t pBeaconLocation, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchConnectString, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchMetadata)
	{
		SteamAPICall_t returnValue = _CreateBeacon(Self, unOpenSlots, ref pBeaconLocation, pchConnectString, pchMetadata);
		return await CreateBeaconCallback_t.GetResultAsync(returnValue);
	}

	internal void OnReservationCompleted(PartyBeaconID_t ulBeacon, SteamId steamIDUser)
	{
		_OnReservationCompleted(Self, ulBeacon, steamIDUser);
	}

	internal void CancelReservation(PartyBeaconID_t ulBeacon, SteamId steamIDUser)
	{
		_CancelReservation(Self, ulBeacon, steamIDUser);
	}

	internal async Task<ChangeNumOpenSlotsCallback_t?> ChangeNumOpenSlots(PartyBeaconID_t ulBeacon, uint unOpenSlots)
	{
		SteamAPICall_t returnValue = _ChangeNumOpenSlots(Self, ulBeacon, unOpenSlots);
		return await ChangeNumOpenSlotsCallback_t.GetResultAsync(returnValue);
	}

	internal bool DestroyBeacon(PartyBeaconID_t ulBeacon)
	{
		return _DestroyBeacon(Self, ulBeacon);
	}

	internal bool GetBeaconLocationData(SteamPartyBeaconLocation_t BeaconLocation, SteamPartyBeaconLocationData eData, out string pchDataStringOut)
	{
		IntPtr intPtr = Helpers.TakeMemory();
		bool result = _GetBeaconLocationData(Self, BeaconLocation, eData, intPtr, 32768);
		pchDataStringOut = Helpers.MemoryToString(intPtr);
		return result;
	}
}
