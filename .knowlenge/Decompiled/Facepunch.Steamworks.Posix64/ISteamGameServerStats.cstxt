using System;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using Steamworks;
using Steamworks.Data;

internal class ISteamGameServerStats : SteamInterface
{
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FRequestUserStats(IntPtr self, SteamId steamIDUser);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetUserStat1(IntPtr self, SteamId steamIDUser, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, ref int pData);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetUserStat2(IntPtr self, SteamId steamIDUser, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, ref float pData);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetUserAchievement(IntPtr self, SteamId steamIDUser, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetUserStat1(IntPtr self, SteamId steamIDUser, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, int nData);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetUserStat2(IntPtr self, SteamId steamIDUser, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, float fData);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FUpdateUserAvgRateStat(IntPtr self, SteamId steamIDUser, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, float flCountThisSession, double dSessionLength);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetUserAchievement(IntPtr self, SteamId steamIDUser, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FClearUserAchievement(IntPtr self, SteamId steamIDUser, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FStoreUserStats(IntPtr self, SteamId steamIDUser);

	private FRequestUserStats _RequestUserStats;

	private FGetUserStat1 _GetUserStat1;

	private FGetUserStat2 _GetUserStat2;

	private FGetUserAchievement _GetUserAchievement;

	private FSetUserStat1 _SetUserStat1;

	private FSetUserStat2 _SetUserStat2;

	private FUpdateUserAvgRateStat _UpdateUserAvgRateStat;

	private FSetUserAchievement _SetUserAchievement;

	private FClearUserAchievement _ClearUserAchievement;

	private FStoreUserStats _StoreUserStats;

	public override string InterfaceName => "SteamGameServerStats001";

	public override void InitInternals()
	{
		_RequestUserStats = Marshal.GetDelegateForFunctionPointer<FRequestUserStats>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(0)));
		_GetUserAchievement = Marshal.GetDelegateForFunctionPointer<FGetUserAchievement>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(24)));
		_UpdateUserAvgRateStat = Marshal.GetDelegateForFunctionPointer<FUpdateUserAvgRateStat>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(48)));
		_SetUserAchievement = Marshal.GetDelegateForFunctionPointer<FSetUserAchievement>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(56)));
		_ClearUserAchievement = Marshal.GetDelegateForFunctionPointer<FClearUserAchievement>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(64)));
		_StoreUserStats = Marshal.GetDelegateForFunctionPointer<FStoreUserStats>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(72)));
		_GetUserStat1 = Marshal.GetDelegateForFunctionPointer<FGetUserStat1>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(8)));
		_GetUserStat2 = Marshal.GetDelegateForFunctionPointer<FGetUserStat2>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(16)));
		_SetUserStat1 = Marshal.GetDelegateForFunctionPointer<FSetUserStat1>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(32)));
		_SetUserStat2 = Marshal.GetDelegateForFunctionPointer<FSetUserStat2>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(40)));
	}

	internal override void Shutdown()
	{
		base.Shutdown();
		_RequestUserStats = null;
		_GetUserStat1 = null;
		_GetUserStat2 = null;
		_GetUserAchievement = null;
		_SetUserStat1 = null;
		_SetUserStat2 = null;
		_UpdateUserAvgRateStat = null;
		_SetUserAchievement = null;
		_ClearUserAchievement = null;
		_StoreUserStats = null;
	}

	internal async Task<GSStatsReceived_t?> RequestUserStats(SteamId steamIDUser)
	{
		SteamAPICall_t returnValue = _RequestUserStats(Self, steamIDUser);
		return await GSStatsReceived_t.GetResultAsync(returnValue);
	}

	internal bool GetUserStat1(SteamId steamIDUser, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, ref int pData)
	{
		return _GetUserStat1(Self, steamIDUser, pchName, ref pData);
	}

	internal bool GetUserStat2(SteamId steamIDUser, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, ref float pData)
	{
		return _GetUserStat2(Self, steamIDUser, pchName, ref pData);
	}

	internal bool GetUserAchievement(SteamId steamIDUser, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved)
	{
		return _GetUserAchievement(Self, steamIDUser, pchName, ref pbAchieved);
	}

	internal bool SetUserStat1(SteamId steamIDUser, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, int nData)
	{
		return _SetUserStat1(Self, steamIDUser, pchName, nData);
	}

	internal bool SetUserStat2(SteamId steamIDUser, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, float fData)
	{
		return _SetUserStat2(Self, steamIDUser, pchName, fData);
	}

	internal bool UpdateUserAvgRateStat(SteamId steamIDUser, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName, float flCountThisSession, double dSessionLength)
	{
		return _UpdateUserAvgRateStat(Self, steamIDUser, pchName, flCountThisSession, dSessionLength);
	}

	internal bool SetUserAchievement(SteamId steamIDUser, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName)
	{
		return _SetUserAchievement(Self, steamIDUser, pchName);
	}

	internal bool ClearUserAchievement(SteamId steamIDUser, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchName)
	{
		return _ClearUserAchievement(Self, steamIDUser, pchName);
	}

	internal async Task<GSStatsStored_t?> StoreUserStats(SteamId steamIDUser)
	{
		SteamAPICall_t returnValue = _StoreUserStats(Self, steamIDUser);
		return await GSStatsStored_t.GetResultAsync(returnValue);
	}
}
