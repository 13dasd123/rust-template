using System;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using Steamworks;
using Steamworks.Data;

internal class ISteamUtils : SteamInterface
{
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate uint FGetSecondsSinceAppActive(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate uint FGetSecondsSinceComputerActive(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Universe FGetConnectedUniverse(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate uint FGetServerRealTime(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Utf8StringPointer FGetIPCountry(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetImageSize(IntPtr self, int iImage, ref uint pnWidth, ref uint pnHeight);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetImageRGBA(IntPtr self, int iImage, [In][Out] byte[] pubDest, int nDestBufferSize);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetCSERIPPort(IntPtr self, ref uint unIP, ref ushort usPort);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate byte FGetCurrentBatteryPower(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate uint FGetAppID(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetOverlayNotificationPosition(IntPtr self, NotificationPosition eNotificationPosition);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FIsAPICallCompleted(IntPtr self, SteamAPICall_t hSteamAPICall, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICallFailure FGetAPICallFailureReason(IntPtr self, SteamAPICall_t hSteamAPICall);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetAPICallResult(IntPtr self, SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FRunFrame(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate uint FGetIPCCallCount(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetWarningMessageHook(IntPtr self, IntPtr pFunction);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FIsOverlayEnabled(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FBOverlayNeedsPresent(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FCheckFileSignature(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string szFileName);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FShowGamepadTextInput(IntPtr self, GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchDescription, uint unCharMax, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchExistingText);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate uint FGetEnteredGamepadTextLength(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetEnteredGamepadTextInput(IntPtr self, IntPtr pchText, uint cchText);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Utf8StringPointer FGetSteamUILanguage(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FIsSteamRunningInVR(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetOverlayNotificationInset(IntPtr self, int nHorizontalInset, int nVerticalInset);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FIsSteamInBigPictureMode(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FStartVRDashboard(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FIsVRHeadsetStreamingEnabled(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetVRHeadsetStreamingEnabled(IntPtr self, [MarshalAs(UnmanagedType.U1)] bool bEnabled);

	private FGetSecondsSinceAppActive _GetSecondsSinceAppActive;

	private FGetSecondsSinceComputerActive _GetSecondsSinceComputerActive;

	private FGetConnectedUniverse _GetConnectedUniverse;

	private FGetServerRealTime _GetServerRealTime;

	private FGetIPCountry _GetIPCountry;

	private FGetImageSize _GetImageSize;

	private FGetImageRGBA _GetImageRGBA;

	private FGetCSERIPPort _GetCSERIPPort;

	private FGetCurrentBatteryPower _GetCurrentBatteryPower;

	private FGetAppID _GetAppID;

	private FSetOverlayNotificationPosition _SetOverlayNotificationPosition;

	private FIsAPICallCompleted _IsAPICallCompleted;

	private FGetAPICallFailureReason _GetAPICallFailureReason;

	private FGetAPICallResult _GetAPICallResult;

	private FRunFrame _RunFrame;

	private FGetIPCCallCount _GetIPCCallCount;

	private FSetWarningMessageHook _SetWarningMessageHook;

	private FIsOverlayEnabled _IsOverlayEnabled;

	private FBOverlayNeedsPresent _BOverlayNeedsPresent;

	private FCheckFileSignature _CheckFileSignature;

	private FShowGamepadTextInput _ShowGamepadTextInput;

	private FGetEnteredGamepadTextLength _GetEnteredGamepadTextLength;

	private FGetEnteredGamepadTextInput _GetEnteredGamepadTextInput;

	private FGetSteamUILanguage _GetSteamUILanguage;

	private FIsSteamRunningInVR _IsSteamRunningInVR;

	private FSetOverlayNotificationInset _SetOverlayNotificationInset;

	private FIsSteamInBigPictureMode _IsSteamInBigPictureMode;

	private FStartVRDashboard _StartVRDashboard;

	private FIsVRHeadsetStreamingEnabled _IsVRHeadsetStreamingEnabled;

	private FSetVRHeadsetStreamingEnabled _SetVRHeadsetStreamingEnabled;

	public override string InterfaceName => "SteamUtils009";

	public override void InitInternals()
	{
		_GetSecondsSinceAppActive = Marshal.GetDelegateForFunctionPointer<FGetSecondsSinceAppActive>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(0)));
		_GetSecondsSinceComputerActive = Marshal.GetDelegateForFunctionPointer<FGetSecondsSinceComputerActive>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(8)));
		_GetConnectedUniverse = Marshal.GetDelegateForFunctionPointer<FGetConnectedUniverse>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(16)));
		_GetServerRealTime = Marshal.GetDelegateForFunctionPointer<FGetServerRealTime>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(24)));
		_GetIPCountry = Marshal.GetDelegateForFunctionPointer<FGetIPCountry>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(32)));
		_GetImageSize = Marshal.GetDelegateForFunctionPointer<FGetImageSize>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(40)));
		_GetImageRGBA = Marshal.GetDelegateForFunctionPointer<FGetImageRGBA>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(48)));
		_GetCSERIPPort = Marshal.GetDelegateForFunctionPointer<FGetCSERIPPort>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(56)));
		_GetCurrentBatteryPower = Marshal.GetDelegateForFunctionPointer<FGetCurrentBatteryPower>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(64)));
		_GetAppID = Marshal.GetDelegateForFunctionPointer<FGetAppID>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(72)));
		_SetOverlayNotificationPosition = Marshal.GetDelegateForFunctionPointer<FSetOverlayNotificationPosition>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(80)));
		_IsAPICallCompleted = Marshal.GetDelegateForFunctionPointer<FIsAPICallCompleted>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(88)));
		_GetAPICallFailureReason = Marshal.GetDelegateForFunctionPointer<FGetAPICallFailureReason>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(96)));
		_GetAPICallResult = Marshal.GetDelegateForFunctionPointer<FGetAPICallResult>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(104)));
		_RunFrame = Marshal.GetDelegateForFunctionPointer<FRunFrame>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(112)));
		_GetIPCCallCount = Marshal.GetDelegateForFunctionPointer<FGetIPCCallCount>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(120)));
		_SetWarningMessageHook = Marshal.GetDelegateForFunctionPointer<FSetWarningMessageHook>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(128)));
		_IsOverlayEnabled = Marshal.GetDelegateForFunctionPointer<FIsOverlayEnabled>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(136)));
		_BOverlayNeedsPresent = Marshal.GetDelegateForFunctionPointer<FBOverlayNeedsPresent>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(144)));
		_CheckFileSignature = Marshal.GetDelegateForFunctionPointer<FCheckFileSignature>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(152)));
		_ShowGamepadTextInput = Marshal.GetDelegateForFunctionPointer<FShowGamepadTextInput>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(160)));
		_GetEnteredGamepadTextLength = Marshal.GetDelegateForFunctionPointer<FGetEnteredGamepadTextLength>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(168)));
		_GetEnteredGamepadTextInput = Marshal.GetDelegateForFunctionPointer<FGetEnteredGamepadTextInput>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(176)));
		_GetSteamUILanguage = Marshal.GetDelegateForFunctionPointer<FGetSteamUILanguage>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(184)));
		_IsSteamRunningInVR = Marshal.GetDelegateForFunctionPointer<FIsSteamRunningInVR>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(192)));
		_SetOverlayNotificationInset = Marshal.GetDelegateForFunctionPointer<FSetOverlayNotificationInset>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(200)));
		_IsSteamInBigPictureMode = Marshal.GetDelegateForFunctionPointer<FIsSteamInBigPictureMode>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(208)));
		_StartVRDashboard = Marshal.GetDelegateForFunctionPointer<FStartVRDashboard>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(216)));
		_IsVRHeadsetStreamingEnabled = Marshal.GetDelegateForFunctionPointer<FIsVRHeadsetStreamingEnabled>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(224)));
		_SetVRHeadsetStreamingEnabled = Marshal.GetDelegateForFunctionPointer<FSetVRHeadsetStreamingEnabled>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(232)));
	}

	internal override void Shutdown()
	{
		base.Shutdown();
		_GetSecondsSinceAppActive = null;
		_GetSecondsSinceComputerActive = null;
		_GetConnectedUniverse = null;
		_GetServerRealTime = null;
		_GetIPCountry = null;
		_GetImageSize = null;
		_GetImageRGBA = null;
		_GetCSERIPPort = null;
		_GetCurrentBatteryPower = null;
		_GetAppID = null;
		_SetOverlayNotificationPosition = null;
		_IsAPICallCompleted = null;
		_GetAPICallFailureReason = null;
		_GetAPICallResult = null;
		_RunFrame = null;
		_GetIPCCallCount = null;
		_SetWarningMessageHook = null;
		_IsOverlayEnabled = null;
		_BOverlayNeedsPresent = null;
		_CheckFileSignature = null;
		_ShowGamepadTextInput = null;
		_GetEnteredGamepadTextLength = null;
		_GetEnteredGamepadTextInput = null;
		_GetSteamUILanguage = null;
		_IsSteamRunningInVR = null;
		_SetOverlayNotificationInset = null;
		_IsSteamInBigPictureMode = null;
		_StartVRDashboard = null;
		_IsVRHeadsetStreamingEnabled = null;
		_SetVRHeadsetStreamingEnabled = null;
	}

	internal uint GetSecondsSinceAppActive()
	{
		return _GetSecondsSinceAppActive(Self);
	}

	internal uint GetSecondsSinceComputerActive()
	{
		return _GetSecondsSinceComputerActive(Self);
	}

	internal Universe GetConnectedUniverse()
	{
		return _GetConnectedUniverse(Self);
	}

	internal uint GetServerRealTime()
	{
		return _GetServerRealTime(Self);
	}

	internal string GetIPCountry()
	{
		Utf8StringPointer utf8StringPointer = _GetIPCountry(Self);
		return utf8StringPointer;
	}

	internal bool GetImageSize(int iImage, ref uint pnWidth, ref uint pnHeight)
	{
		return _GetImageSize(Self, iImage, ref pnWidth, ref pnHeight);
	}

	internal bool GetImageRGBA(int iImage, [In][Out] byte[] pubDest, int nDestBufferSize)
	{
		return _GetImageRGBA(Self, iImage, pubDest, nDestBufferSize);
	}

	internal bool GetCSERIPPort(ref uint unIP, ref ushort usPort)
	{
		return _GetCSERIPPort(Self, ref unIP, ref usPort);
	}

	internal byte GetCurrentBatteryPower()
	{
		return _GetCurrentBatteryPower(Self);
	}

	internal uint GetAppID()
	{
		return _GetAppID(Self);
	}

	internal void SetOverlayNotificationPosition(NotificationPosition eNotificationPosition)
	{
		_SetOverlayNotificationPosition(Self, eNotificationPosition);
	}

	internal bool IsAPICallCompleted(SteamAPICall_t hSteamAPICall, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed)
	{
		return _IsAPICallCompleted(Self, hSteamAPICall, ref pbFailed);
	}

	internal SteamAPICallFailure GetAPICallFailureReason(SteamAPICall_t hSteamAPICall)
	{
		return _GetAPICallFailureReason(Self, hSteamAPICall);
	}

	internal bool GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed)
	{
		return _GetAPICallResult(Self, hSteamAPICall, pCallback, cubCallback, iCallbackExpected, ref pbFailed);
	}

	internal void RunFrame()
	{
		_RunFrame(Self);
	}

	internal uint GetIPCCallCount()
	{
		return _GetIPCCallCount(Self);
	}

	internal void SetWarningMessageHook(IntPtr pFunction)
	{
		_SetWarningMessageHook(Self, pFunction);
	}

	internal bool IsOverlayEnabled()
	{
		return _IsOverlayEnabled(Self);
	}

	internal bool BOverlayNeedsPresent()
	{
		return _BOverlayNeedsPresent(Self);
	}

	internal async Task<CheckFileSignature_t?> CheckFileSignature([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string szFileName)
	{
		SteamAPICall_t returnValue = _CheckFileSignature(Self, szFileName);
		return await CheckFileSignature_t.GetResultAsync(returnValue);
	}

	internal bool ShowGamepadTextInput(GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchDescription, uint unCharMax, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchExistingText)
	{
		return _ShowGamepadTextInput(Self, eInputMode, eLineInputMode, pchDescription, unCharMax, pchExistingText);
	}

	internal uint GetEnteredGamepadTextLength()
	{
		return _GetEnteredGamepadTextLength(Self);
	}

	internal bool GetEnteredGamepadTextInput(out string pchText)
	{
		IntPtr intPtr = Helpers.TakeMemory();
		bool result = _GetEnteredGamepadTextInput(Self, intPtr, 32768u);
		pchText = Helpers.MemoryToString(intPtr);
		return result;
	}

	internal string GetSteamUILanguage()
	{
		Utf8StringPointer utf8StringPointer = _GetSteamUILanguage(Self);
		return utf8StringPointer;
	}

	internal bool IsSteamRunningInVR()
	{
		return _IsSteamRunningInVR(Self);
	}

	internal void SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
	{
		_SetOverlayNotificationInset(Self, nHorizontalInset, nVerticalInset);
	}

	internal bool IsSteamInBigPictureMode()
	{
		return _IsSteamInBigPictureMode(Self);
	}

	internal void StartVRDashboard()
	{
		_StartVRDashboard(Self);
	}

	internal bool IsVRHeadsetStreamingEnabled()
	{
		return _IsVRHeadsetStreamingEnabled(Self);
	}

	internal void SetVRHeadsetStreamingEnabled([MarshalAs(UnmanagedType.U1)] bool bEnabled)
	{
		_SetVRHeadsetStreamingEnabled(Self, bEnabled);
	}
}
