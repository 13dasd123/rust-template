using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using Steamworks;
using Steamworks.Data;

public class SocketInterface
{
	public List<Connection> Connecting = new List<Connection>();

	public List<Connection> Connected = new List<Connection>();

	public Socket Socket { get; internal set; }

	public bool Close()
	{
		return Socket.Close();
	}

	public override string ToString()
	{
		return Socket.ToString();
	}

	public virtual void OnConnectionChanged(Connection connection, ConnectionInfo data)
	{
		switch (data.State)
		{
		case ConnectionState.Connecting:
			OnConnecting(connection, data);
			break;
		case ConnectionState.Connected:
			OnConnected(connection, data);
			break;
		case ConnectionState.None:
		case ConnectionState.ClosedByPeer:
		case ConnectionState.ProblemDetectedLocally:
			OnDisconnected(connection, data);
			break;
		case ConnectionState.FindingRoute:
			break;
		}
	}

	public virtual void OnConnecting(Connection connection, ConnectionInfo data)
	{
		connection.Accept();
		Connecting.Add(connection);
	}

	public virtual void OnConnected(Connection connection, ConnectionInfo data)
	{
		Connecting.Remove(connection);
		Connected.Add(connection);
	}

	public virtual void OnDisconnected(Connection connection, ConnectionInfo data)
	{
		connection.Close();
		Connecting.Remove(connection);
		Connected.Remove(connection);
	}

	public void Receive(int bufferSize = 32)
	{
		int num = 0;
		IntPtr intPtr = Marshal.AllocHGlobal(IntPtr.Size * bufferSize);
		try
		{
			num = SteamNetworkingSockets.Internal.ReceiveMessagesOnListenSocket(Socket, intPtr, bufferSize);
			for (int i = 0; i < num; i++)
			{
				ReceiveMessage(Marshal.ReadIntPtr(intPtr, i * IntPtr.Size));
			}
		}
		finally
		{
			Marshal.FreeHGlobal(intPtr);
		}
		if (num == bufferSize)
		{
			Receive(bufferSize);
		}
	}

	internal void ReceiveMessage(IntPtr msgPtr)
	{
		NetMsg netMsg = Marshal.PtrToStructure<NetMsg>(msgPtr);
		try
		{
			OnMessage(netMsg.Connection, netMsg.Identity, netMsg.DataPtr, netMsg.DataSize, netMsg.RecvTime, netMsg.MessageNumber, netMsg.Channel);
		}
		finally
		{
			netMsg.Release(msgPtr);
		}
	}

	public virtual void OnMessage(Connection connection, NetIdentity identity, IntPtr data, int size, long messageNum, long recvTime, int channel)
	{
	}
}
