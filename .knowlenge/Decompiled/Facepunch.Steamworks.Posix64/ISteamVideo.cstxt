using System;
using System.Runtime.InteropServices;
using Steamworks;

internal class ISteamVideo : SteamInterface
{
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FGetVideoURL(IntPtr self, AppId unVideoAppID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FIsBroadcasting(IntPtr self, ref int pnNumViewers);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FGetOPFSettings(IntPtr self, AppId unVideoAppID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetOPFStringForApp(IntPtr self, AppId unVideoAppID, IntPtr pchBuffer, ref int pnBufferSize);

	private FGetVideoURL _GetVideoURL;

	private FIsBroadcasting _IsBroadcasting;

	private FGetOPFSettings _GetOPFSettings;

	private FGetOPFStringForApp _GetOPFStringForApp;

	public override string InterfaceName => "STEAMVIDEO_INTERFACE_V002";

	public override void InitInternals()
	{
		_GetVideoURL = Marshal.GetDelegateForFunctionPointer<FGetVideoURL>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(0)));
		_IsBroadcasting = Marshal.GetDelegateForFunctionPointer<FIsBroadcasting>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(8)));
		_GetOPFSettings = Marshal.GetDelegateForFunctionPointer<FGetOPFSettings>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(16)));
		_GetOPFStringForApp = Marshal.GetDelegateForFunctionPointer<FGetOPFStringForApp>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(24)));
	}

	internal override void Shutdown()
	{
		base.Shutdown();
		_GetVideoURL = null;
		_IsBroadcasting = null;
		_GetOPFSettings = null;
		_GetOPFStringForApp = null;
	}

	internal void GetVideoURL(AppId unVideoAppID)
	{
		_GetVideoURL(Self, unVideoAppID);
	}

	internal bool IsBroadcasting(ref int pnNumViewers)
	{
		return _IsBroadcasting(Self, ref pnNumViewers);
	}

	internal void GetOPFSettings(AppId unVideoAppID)
	{
		_GetOPFSettings(Self, unVideoAppID);
	}

	internal bool GetOPFStringForApp(AppId unVideoAppID, out string pchBuffer, ref int pnBufferSize)
	{
		IntPtr intPtr = Helpers.TakeMemory();
		bool result = _GetOPFStringForApp(Self, unVideoAppID, intPtr, ref pnBufferSize);
		pchBuffer = Helpers.MemoryToString(intPtr);
		return result;
	}
}
