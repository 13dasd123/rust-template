using System;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using Steamworks;
using Steamworks.Data;

internal class ISteamGameServer : SteamInterface
{
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FInitGameServer(IntPtr self, uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, AppId nGameAppId, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchVersionString);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetProduct(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszProduct);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetGameDescription(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszGameDescription);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetModDir(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszModDir);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetDedicatedServer(IntPtr self, [MarshalAs(UnmanagedType.U1)] bool bDedicated);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FLogOn(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszToken);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FLogOnAnonymous(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FLogOff(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FBLoggedOn(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FBSecure(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamId FGetSteamID(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FWasRestartRequested(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetMaxPlayerCount(IntPtr self, int cPlayersMax);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetBotPlayerCount(IntPtr self, int cBotplayers);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetServerName(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszServerName);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetMapName(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszMapName);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetPasswordProtected(IntPtr self, [MarshalAs(UnmanagedType.U1)] bool bPasswordProtected);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetSpectatorPort(IntPtr self, ushort unSpectatorPort);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetSpectatorServerName(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszSpectatorServerName);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FClearAllKeyValues(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetKeyValue(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pKey, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pValue);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetGameTags(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchGameTags);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetGameData(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchGameData);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetRegion(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszRegion);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSendUserConnectAndAuthenticate(IntPtr self, uint unIPClient, IntPtr pvAuthBlob, uint cubAuthBlobSize, ref SteamId pSteamIDUser);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamId FCreateUnauthenticatedUserConnection(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSendUserDisconnect(IntPtr self, SteamId steamIDUser);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FBUpdateUserData(IntPtr self, SteamId steamIDUser, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchPlayerName, uint uScore);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate HAuthTicket FGetAuthSessionTicket(IntPtr self, IntPtr pTicket, int cbMaxTicket, ref uint pcbTicket);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate BeginAuthResult FBeginAuthSession(IntPtr self, IntPtr pAuthTicket, int cbAuthTicket, SteamId steamID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FEndAuthSession(IntPtr self, SteamId steamID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FCancelAuthTicket(IntPtr self, HAuthTicket hAuthTicket);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate UserHasLicenseForAppResult FUserHasLicenseForApp(IntPtr self, SteamId steamID, AppId appID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FRequestUserGroupStatus(IntPtr self, SteamId steamIDUser, SteamId steamIDGroup);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FGetGameplayStats(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FGetServerReputation(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate uint FGetPublicIP(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FHandleIncomingPacket(IntPtr self, IntPtr pData, int cbData, uint srcIP, ushort srcPort);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetNextOutgoingPacket(IntPtr self, IntPtr pOut, int cbMaxOut, ref uint pNetAdr, ref ushort pPort);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FEnableHeartbeats(IntPtr self, [MarshalAs(UnmanagedType.U1)] bool bActive);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetHeartbeatInterval(IntPtr self, int iHeartbeatInterval);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FForceHeartbeat(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FAssociateWithClan(IntPtr self, SteamId steamIDClan);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FComputeNewPlayerCompatibility(IntPtr self, SteamId steamIDNewPlayer);

	private FInitGameServer _InitGameServer;

	private FSetProduct _SetProduct;

	private FSetGameDescription _SetGameDescription;

	private FSetModDir _SetModDir;

	private FSetDedicatedServer _SetDedicatedServer;

	private FLogOn _LogOn;

	private FLogOnAnonymous _LogOnAnonymous;

	private FLogOff _LogOff;

	private FBLoggedOn _BLoggedOn;

	private FBSecure _BSecure;

	private FGetSteamID _GetSteamID;

	private FWasRestartRequested _WasRestartRequested;

	private FSetMaxPlayerCount _SetMaxPlayerCount;

	private FSetBotPlayerCount _SetBotPlayerCount;

	private FSetServerName _SetServerName;

	private FSetMapName _SetMapName;

	private FSetPasswordProtected _SetPasswordProtected;

	private FSetSpectatorPort _SetSpectatorPort;

	private FSetSpectatorServerName _SetSpectatorServerName;

	private FClearAllKeyValues _ClearAllKeyValues;

	private FSetKeyValue _SetKeyValue;

	private FSetGameTags _SetGameTags;

	private FSetGameData _SetGameData;

	private FSetRegion _SetRegion;

	private FSendUserConnectAndAuthenticate _SendUserConnectAndAuthenticate;

	private FCreateUnauthenticatedUserConnection _CreateUnauthenticatedUserConnection;

	private FSendUserDisconnect _SendUserDisconnect;

	private FBUpdateUserData _BUpdateUserData;

	private FGetAuthSessionTicket _GetAuthSessionTicket;

	private FBeginAuthSession _BeginAuthSession;

	private FEndAuthSession _EndAuthSession;

	private FCancelAuthTicket _CancelAuthTicket;

	private FUserHasLicenseForApp _UserHasLicenseForApp;

	private FRequestUserGroupStatus _RequestUserGroupStatus;

	private FGetGameplayStats _GetGameplayStats;

	private FGetServerReputation _GetServerReputation;

	private FGetPublicIP _GetPublicIP;

	private FHandleIncomingPacket _HandleIncomingPacket;

	private FGetNextOutgoingPacket _GetNextOutgoingPacket;

	private FEnableHeartbeats _EnableHeartbeats;

	private FSetHeartbeatInterval _SetHeartbeatInterval;

	private FForceHeartbeat _ForceHeartbeat;

	private FAssociateWithClan _AssociateWithClan;

	private FComputeNewPlayerCompatibility _ComputeNewPlayerCompatibility;

	public override string InterfaceName => "SteamGameServer012";

	public override void InitInternals()
	{
		_InitGameServer = Marshal.GetDelegateForFunctionPointer<FInitGameServer>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(0)));
		_SetProduct = Marshal.GetDelegateForFunctionPointer<FSetProduct>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(8)));
		_SetGameDescription = Marshal.GetDelegateForFunctionPointer<FSetGameDescription>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(16)));
		_SetModDir = Marshal.GetDelegateForFunctionPointer<FSetModDir>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(24)));
		_SetDedicatedServer = Marshal.GetDelegateForFunctionPointer<FSetDedicatedServer>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(32)));
		_LogOn = Marshal.GetDelegateForFunctionPointer<FLogOn>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(40)));
		_LogOnAnonymous = Marshal.GetDelegateForFunctionPointer<FLogOnAnonymous>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(48)));
		_LogOff = Marshal.GetDelegateForFunctionPointer<FLogOff>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(56)));
		_BLoggedOn = Marshal.GetDelegateForFunctionPointer<FBLoggedOn>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(64)));
		_BSecure = Marshal.GetDelegateForFunctionPointer<FBSecure>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(72)));
		_GetSteamID = Marshal.GetDelegateForFunctionPointer<FGetSteamID>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(80)));
		_WasRestartRequested = Marshal.GetDelegateForFunctionPointer<FWasRestartRequested>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(88)));
		_SetMaxPlayerCount = Marshal.GetDelegateForFunctionPointer<FSetMaxPlayerCount>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(96)));
		_SetBotPlayerCount = Marshal.GetDelegateForFunctionPointer<FSetBotPlayerCount>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(104)));
		_SetServerName = Marshal.GetDelegateForFunctionPointer<FSetServerName>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(112)));
		_SetMapName = Marshal.GetDelegateForFunctionPointer<FSetMapName>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(120)));
		_SetPasswordProtected = Marshal.GetDelegateForFunctionPointer<FSetPasswordProtected>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(128)));
		_SetSpectatorPort = Marshal.GetDelegateForFunctionPointer<FSetSpectatorPort>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(136)));
		_SetSpectatorServerName = Marshal.GetDelegateForFunctionPointer<FSetSpectatorServerName>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(144)));
		_ClearAllKeyValues = Marshal.GetDelegateForFunctionPointer<FClearAllKeyValues>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(152)));
		_SetKeyValue = Marshal.GetDelegateForFunctionPointer<FSetKeyValue>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(160)));
		_SetGameTags = Marshal.GetDelegateForFunctionPointer<FSetGameTags>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(168)));
		_SetGameData = Marshal.GetDelegateForFunctionPointer<FSetGameData>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(176)));
		_SetRegion = Marshal.GetDelegateForFunctionPointer<FSetRegion>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(184)));
		_SendUserConnectAndAuthenticate = Marshal.GetDelegateForFunctionPointer<FSendUserConnectAndAuthenticate>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(192)));
		_CreateUnauthenticatedUserConnection = Marshal.GetDelegateForFunctionPointer<FCreateUnauthenticatedUserConnection>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(200)));
		_SendUserDisconnect = Marshal.GetDelegateForFunctionPointer<FSendUserDisconnect>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(208)));
		_BUpdateUserData = Marshal.GetDelegateForFunctionPointer<FBUpdateUserData>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(216)));
		_GetAuthSessionTicket = Marshal.GetDelegateForFunctionPointer<FGetAuthSessionTicket>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(224)));
		_BeginAuthSession = Marshal.GetDelegateForFunctionPointer<FBeginAuthSession>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(232)));
		_EndAuthSession = Marshal.GetDelegateForFunctionPointer<FEndAuthSession>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(240)));
		_CancelAuthTicket = Marshal.GetDelegateForFunctionPointer<FCancelAuthTicket>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(248)));
		_UserHasLicenseForApp = Marshal.GetDelegateForFunctionPointer<FUserHasLicenseForApp>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(256)));
		_RequestUserGroupStatus = Marshal.GetDelegateForFunctionPointer<FRequestUserGroupStatus>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(264)));
		_GetGameplayStats = Marshal.GetDelegateForFunctionPointer<FGetGameplayStats>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(272)));
		_GetServerReputation = Marshal.GetDelegateForFunctionPointer<FGetServerReputation>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(280)));
		_GetPublicIP = Marshal.GetDelegateForFunctionPointer<FGetPublicIP>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(288)));
		_HandleIncomingPacket = Marshal.GetDelegateForFunctionPointer<FHandleIncomingPacket>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(296)));
		_GetNextOutgoingPacket = Marshal.GetDelegateForFunctionPointer<FGetNextOutgoingPacket>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(304)));
		_EnableHeartbeats = Marshal.GetDelegateForFunctionPointer<FEnableHeartbeats>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(312)));
		_SetHeartbeatInterval = Marshal.GetDelegateForFunctionPointer<FSetHeartbeatInterval>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(320)));
		_ForceHeartbeat = Marshal.GetDelegateForFunctionPointer<FForceHeartbeat>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(328)));
		_AssociateWithClan = Marshal.GetDelegateForFunctionPointer<FAssociateWithClan>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(336)));
		_ComputeNewPlayerCompatibility = Marshal.GetDelegateForFunctionPointer<FComputeNewPlayerCompatibility>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(344)));
	}

	internal override void Shutdown()
	{
		base.Shutdown();
		_InitGameServer = null;
		_SetProduct = null;
		_SetGameDescription = null;
		_SetModDir = null;
		_SetDedicatedServer = null;
		_LogOn = null;
		_LogOnAnonymous = null;
		_LogOff = null;
		_BLoggedOn = null;
		_BSecure = null;
		_GetSteamID = null;
		_WasRestartRequested = null;
		_SetMaxPlayerCount = null;
		_SetBotPlayerCount = null;
		_SetServerName = null;
		_SetMapName = null;
		_SetPasswordProtected = null;
		_SetSpectatorPort = null;
		_SetSpectatorServerName = null;
		_ClearAllKeyValues = null;
		_SetKeyValue = null;
		_SetGameTags = null;
		_SetGameData = null;
		_SetRegion = null;
		_SendUserConnectAndAuthenticate = null;
		_CreateUnauthenticatedUserConnection = null;
		_SendUserDisconnect = null;
		_BUpdateUserData = null;
		_GetAuthSessionTicket = null;
		_BeginAuthSession = null;
		_EndAuthSession = null;
		_CancelAuthTicket = null;
		_UserHasLicenseForApp = null;
		_RequestUserGroupStatus = null;
		_GetGameplayStats = null;
		_GetServerReputation = null;
		_GetPublicIP = null;
		_HandleIncomingPacket = null;
		_GetNextOutgoingPacket = null;
		_EnableHeartbeats = null;
		_SetHeartbeatInterval = null;
		_ForceHeartbeat = null;
		_AssociateWithClan = null;
		_ComputeNewPlayerCompatibility = null;
	}

	internal bool InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, AppId nGameAppId, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchVersionString)
	{
		return _InitGameServer(Self, unIP, usGamePort, usQueryPort, unFlags, nGameAppId, pchVersionString);
	}

	internal void SetProduct([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszProduct)
	{
		_SetProduct(Self, pszProduct);
	}

	internal void SetGameDescription([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszGameDescription)
	{
		_SetGameDescription(Self, pszGameDescription);
	}

	internal void SetModDir([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszModDir)
	{
		_SetModDir(Self, pszModDir);
	}

	internal void SetDedicatedServer([MarshalAs(UnmanagedType.U1)] bool bDedicated)
	{
		_SetDedicatedServer(Self, bDedicated);
	}

	internal void LogOn([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszToken)
	{
		_LogOn(Self, pszToken);
	}

	internal void LogOnAnonymous()
	{
		_LogOnAnonymous(Self);
	}

	internal void LogOff()
	{
		_LogOff(Self);
	}

	internal bool BLoggedOn()
	{
		return _BLoggedOn(Self);
	}

	internal bool BSecure()
	{
		return _BSecure(Self);
	}

	internal SteamId GetSteamID()
	{
		return _GetSteamID(Self);
	}

	internal bool WasRestartRequested()
	{
		return _WasRestartRequested(Self);
	}

	internal void SetMaxPlayerCount(int cPlayersMax)
	{
		_SetMaxPlayerCount(Self, cPlayersMax);
	}

	internal void SetBotPlayerCount(int cBotplayers)
	{
		_SetBotPlayerCount(Self, cBotplayers);
	}

	internal void SetServerName([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszServerName)
	{
		_SetServerName(Self, pszServerName);
	}

	internal void SetMapName([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszMapName)
	{
		_SetMapName(Self, pszMapName);
	}

	internal void SetPasswordProtected([MarshalAs(UnmanagedType.U1)] bool bPasswordProtected)
	{
		_SetPasswordProtected(Self, bPasswordProtected);
	}

	internal void SetSpectatorPort(ushort unSpectatorPort)
	{
		_SetSpectatorPort(Self, unSpectatorPort);
	}

	internal void SetSpectatorServerName([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszSpectatorServerName)
	{
		_SetSpectatorServerName(Self, pszSpectatorServerName);
	}

	internal void ClearAllKeyValues()
	{
		_ClearAllKeyValues(Self);
	}

	internal void SetKeyValue([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pKey, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pValue)
	{
		_SetKeyValue(Self, pKey, pValue);
	}

	internal void SetGameTags([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchGameTags)
	{
		_SetGameTags(Self, pchGameTags);
	}

	internal void SetGameData([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchGameData)
	{
		_SetGameData(Self, pchGameData);
	}

	internal void SetRegion([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszRegion)
	{
		_SetRegion(Self, pszRegion);
	}

	internal bool SendUserConnectAndAuthenticate(uint unIPClient, IntPtr pvAuthBlob, uint cubAuthBlobSize, ref SteamId pSteamIDUser)
	{
		return _SendUserConnectAndAuthenticate(Self, unIPClient, pvAuthBlob, cubAuthBlobSize, ref pSteamIDUser);
	}

	internal SteamId CreateUnauthenticatedUserConnection()
	{
		return _CreateUnauthenticatedUserConnection(Self);
	}

	internal void SendUserDisconnect(SteamId steamIDUser)
	{
		_SendUserDisconnect(Self, steamIDUser);
	}

	internal bool BUpdateUserData(SteamId steamIDUser, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchPlayerName, uint uScore)
	{
		return _BUpdateUserData(Self, steamIDUser, pchPlayerName, uScore);
	}

	internal HAuthTicket GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, ref uint pcbTicket)
	{
		return _GetAuthSessionTicket(Self, pTicket, cbMaxTicket, ref pcbTicket);
	}

	internal BeginAuthResult BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, SteamId steamID)
	{
		return _BeginAuthSession(Self, pAuthTicket, cbAuthTicket, steamID);
	}

	internal void EndAuthSession(SteamId steamID)
	{
		_EndAuthSession(Self, steamID);
	}

	internal void CancelAuthTicket(HAuthTicket hAuthTicket)
	{
		_CancelAuthTicket(Self, hAuthTicket);
	}

	internal UserHasLicenseForAppResult UserHasLicenseForApp(SteamId steamID, AppId appID)
	{
		return _UserHasLicenseForApp(Self, steamID, appID);
	}

	internal bool RequestUserGroupStatus(SteamId steamIDUser, SteamId steamIDGroup)
	{
		return _RequestUserGroupStatus(Self, steamIDUser, steamIDGroup);
	}

	internal void GetGameplayStats()
	{
		_GetGameplayStats(Self);
	}

	internal async Task<GSReputation_t?> GetServerReputation()
	{
		SteamAPICall_t returnValue = _GetServerReputation(Self);
		return await GSReputation_t.GetResultAsync(returnValue);
	}

	internal uint GetPublicIP()
	{
		return _GetPublicIP(Self);
	}

	internal bool HandleIncomingPacket(IntPtr pData, int cbData, uint srcIP, ushort srcPort)
	{
		return _HandleIncomingPacket(Self, pData, cbData, srcIP, srcPort);
	}

	internal int GetNextOutgoingPacket(IntPtr pOut, int cbMaxOut, ref uint pNetAdr, ref ushort pPort)
	{
		return _GetNextOutgoingPacket(Self, pOut, cbMaxOut, ref pNetAdr, ref pPort);
	}

	internal void EnableHeartbeats([MarshalAs(UnmanagedType.U1)] bool bActive)
	{
		_EnableHeartbeats(Self, bActive);
	}

	internal void SetHeartbeatInterval(int iHeartbeatInterval)
	{
		_SetHeartbeatInterval(Self, iHeartbeatInterval);
	}

	internal void ForceHeartbeat()
	{
		_ForceHeartbeat(Self);
	}

	internal async Task<AssociateWithClanResult_t?> AssociateWithClan(SteamId steamIDClan)
	{
		SteamAPICall_t returnValue = _AssociateWithClan(Self, steamIDClan);
		return await AssociateWithClanResult_t.GetResultAsync(returnValue);
	}

	internal async Task<ComputeNewPlayerCompatibilityResult_t?> ComputeNewPlayerCompatibility(SteamId steamIDNewPlayer)
	{
		SteamAPICall_t returnValue = _ComputeNewPlayerCompatibility(Self, steamIDNewPlayer);
		return await ComputeNewPlayerCompatibilityResult_t.GetResultAsync(returnValue);
	}
}
