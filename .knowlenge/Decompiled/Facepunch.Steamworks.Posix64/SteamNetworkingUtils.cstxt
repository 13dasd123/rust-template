using System;
using System.Text;
using System.Threading.Tasks;
using Steamworks;
using Steamworks.Data;

public static class SteamNetworkingUtils
{
	private static ISteamNetworkingUtils _internal;

	internal static ISteamNetworkingUtils Internal
	{
		get
		{
			if (_internal == null)
			{
				_internal = new ISteamNetworkingUtils();
				_internal.InitUserless();
			}
			return _internal;
		}
	}

	public static PingLocation? LocalPingLocation
	{
		get
		{
			PingLocation result = default(PingLocation);
			float localPingLocation = Internal.GetLocalPingLocation(ref result);
			if (localPingLocation < 0f)
			{
				return null;
			}
			return result;
		}
	}

	public static long LocalTimestamp => Internal.GetLocalTimestamp();

	public static float FakeSendPacketLoss
	{
		get
		{
			return GetConfigFloat(NetConfig.FakePacketLoss_Send);
		}
		set
		{
			SetConfigFloat(NetConfig.FakePacketLoss_Send, value);
		}
	}

	public static float FakeRecvPacketLoss
	{
		get
		{
			return GetConfigFloat(NetConfig.FakePacketLoss_Recv);
		}
		set
		{
			SetConfigFloat(NetConfig.FakePacketLoss_Recv, value);
		}
	}

	public static float FakeSendPacketLag
	{
		get
		{
			return GetConfigFloat(NetConfig.FakePacketLag_Send);
		}
		set
		{
			SetConfigFloat(NetConfig.FakePacketLag_Send, value);
		}
	}

	public static float FakeRecvPacketLag
	{
		get
		{
			return GetConfigFloat(NetConfig.FakePacketLag_Recv);
		}
		set
		{
			SetConfigFloat(NetConfig.FakePacketLag_Recv, value);
		}
	}

	internal static void Shutdown()
	{
		_internal = null;
	}

	public static int EstimatePingTo(PingLocation target)
	{
		return Internal.EstimatePingTimeFromLocalHost(ref target);
	}

	public static async Task WaitForPingDataAsync(float maxAgeInSeconds = 300f)
	{
		if (!Internal.CheckPingDataUpToDate(60f))
		{
			while (Internal.IsPingMeasurementInProgress())
			{
				await Task.Delay(10);
			}
		}
	}

	internal unsafe static bool GetConfigInt(NetConfig type, int value)
	{
		int* ptr = &value;
		return Internal.SetConfigValue(type, NetScope.Global, 0L, NetConfigType.Int32, (IntPtr)ptr);
	}

	internal unsafe static int GetConfigInt(NetConfig type)
	{
		int result = 0;
		NetConfigType pOutDataType = NetConfigType.Int32;
		int* ptr = &result;
		ulong cbResult = 4uL;
		NetConfigResult configValue = Internal.GetConfigValue(type, NetScope.Global, 0L, ref pOutDataType, (IntPtr)ptr, ref cbResult);
		if (configValue != NetConfigResult.OK)
		{
			return 0;
		}
		return result;
	}

	internal unsafe static bool SetConfigFloat(NetConfig type, float value)
	{
		float* ptr = &value;
		return Internal.SetConfigValue(type, NetScope.Global, 0L, NetConfigType.Float, (IntPtr)ptr);
	}

	internal unsafe static float GetConfigFloat(NetConfig type)
	{
		float result = 0f;
		NetConfigType pOutDataType = NetConfigType.Float;
		float* ptr = &result;
		ulong cbResult = 4uL;
		NetConfigResult configValue = Internal.GetConfigValue(type, NetScope.Global, 0L, ref pOutDataType, (IntPtr)ptr, ref cbResult);
		if (configValue != NetConfigResult.OK)
		{
			return 0f;
		}
		return result;
	}

	internal unsafe static bool SetConfigString(NetConfig type, string value)
	{
		fixed (byte* bytes = Encoding.UTF8.GetBytes(value))
		{
			return Internal.SetConfigValue(type, NetScope.Global, 0L, NetConfigType.String, (IntPtr)bytes);
		}
	}
}
