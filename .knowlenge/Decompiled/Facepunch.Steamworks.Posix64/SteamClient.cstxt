using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Steamworks;
using Steamworks.ServerList;

public static class SteamClient
{
	private static bool initialized;

	private static List<SteamInterface> openIterfaces = new List<SteamInterface>();

	public static Action<Exception> OnCallbackException;

	public static bool IsValid => initialized;

	public static bool IsLoggedOn => SteamUser.Internal.BLoggedOn();

	public static SteamId SteamId => SteamUser.Internal.GetSteamID();

	public static string Name => SteamFriends.Internal.GetPersonaName();

	public static FriendState State => SteamFriends.Internal.GetPersonaState();

	public static AppId AppId { get; internal set; }

	public static void Init(uint appid)
	{
		Environment.SetEnvironmentVariable("SteamAppId", appid.ToString());
		Environment.SetEnvironmentVariable("SteamGameId", appid.ToString());
		if (!SteamAPI.Init())
		{
			throw new Exception("SteamApi_Init returned false. Steam isn't running, couldn't find Steam, AppId is ureleased, Don't own AppId.");
		}
		AppId = appid;
		initialized = true;
		SteamApps.InstallEvents();
		SteamUtils.InstallEvents();
		SteamParental.InstallEvents();
		SteamMusic.InstallEvents();
		SteamVideo.InstallEvents();
		SteamUser.InstallEvents();
		SteamFriends.InstallEvents();
		SteamScreenshots.InstallEvents();
		SteamUserStats.InstallEvents();
		SteamInventory.InstallEvents();
		SteamNetworking.InstallEvents();
		SteamMatchmaking.InstallEvents();
		SteamParties.InstallEvents();
		SteamNetworkingSockets.InstallEvents();
		SteamInput.InstallEvents();
		RunCallbacksAsync();
	}

	internal static void WatchInterface(SteamInterface steamInterface)
	{
		if (openIterfaces.Contains(steamInterface))
		{
			throw new Exception("openIterfaces already contains interface!");
		}
		openIterfaces.Add(steamInterface);
	}

	internal static void ShutdownInterfaces()
	{
		foreach (SteamInterface openIterface in openIterfaces)
		{
			openIterface.Shutdown();
		}
		openIterfaces.Clear();
	}

	internal static async void RunCallbacksAsync()
	{
		while (IsValid)
		{
			await Task.Delay(16);
			RunCallbacks();
		}
	}

	public static void Shutdown()
	{
		if (IsValid)
		{
			SteamInput.Shutdown();
			Cleanup();
			SteamAPI.Shutdown();
		}
	}

	internal static void Cleanup()
	{
		initialized = false;
		Event.DisposeAllClient();
		ShutdownInterfaces();
		SteamInput.Shutdown();
		SteamApps.Shutdown();
		SteamUtils.Shutdown();
		SteamParental.Shutdown();
		SteamMusic.Shutdown();
		SteamVideo.Shutdown();
		SteamUser.Shutdown();
		SteamFriends.Shutdown();
		SteamScreenshots.Shutdown();
		SteamUserStats.Shutdown();
		SteamInventory.Shutdown();
		SteamNetworking.Shutdown();
		SteamMatchmaking.Shutdown();
		SteamParties.Shutdown();
		SteamNetworkingUtils.Shutdown();
		SteamNetworkingSockets.Shutdown();
		Base.Shutdown();
	}

	internal static void RegisterCallback(IntPtr intPtr, int callbackId)
	{
		SteamAPI.RegisterCallback(intPtr, callbackId);
	}

	public static void RunCallbacks()
	{
		if (!IsValid)
		{
			return;
		}
		try
		{
			SteamAPI.RunCallbacks();
		}
		catch (Exception obj)
		{
			OnCallbackException?.Invoke(obj);
		}
	}

	internal static void UnregisterCallback(IntPtr intPtr)
	{
		SteamAPI.UnregisterCallback(intPtr);
	}

	public static bool RestartAppIfNecessary(uint appid)
	{
		return SteamAPI.RestartAppIfNecessary(appid);
	}
}
