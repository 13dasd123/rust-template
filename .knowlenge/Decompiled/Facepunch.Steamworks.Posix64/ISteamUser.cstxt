using System;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using Steamworks;
using Steamworks.Data;

internal class ISteamUser : SteamInterface
{
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate HSteamUser FGetHSteamUser(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FBLoggedOn(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamId FGetSteamID(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FInitiateGameConnection(IntPtr self, IntPtr pAuthBlob, int cbMaxAuthBlob, SteamId steamIDGameServer, uint unIPServer, ushort usPortServer, [MarshalAs(UnmanagedType.U1)] bool bSecure);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FTerminateGameConnection(IntPtr self, uint unIPServer, ushort usPortServer);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FTrackAppUsageEvent(IntPtr self, GameId gameID, int eAppUsageEvent, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchExtraInfo);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetUserDataFolder(IntPtr self, IntPtr pchBuffer, int cubBuffer);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FStartVoiceRecording(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FStopVoiceRecording(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate VoiceResult FGetAvailableVoice(IntPtr self, ref uint pcbCompressed, ref uint pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate VoiceResult FGetVoice(IntPtr self, [MarshalAs(UnmanagedType.U1)] bool bWantCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, ref uint nBytesWritten, [MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, ref uint nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate VoiceResult FDecompressVoice(IntPtr self, IntPtr pCompressed, uint cbCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, ref uint nBytesWritten, uint nDesiredSampleRate);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate uint FGetVoiceOptimalSampleRate(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate HAuthTicket FGetAuthSessionTicket(IntPtr self, IntPtr pTicket, int cbMaxTicket, ref uint pcbTicket);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate BeginAuthResult FBeginAuthSession(IntPtr self, IntPtr pAuthTicket, int cbAuthTicket, SteamId steamID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FEndAuthSession(IntPtr self, SteamId steamID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FCancelAuthTicket(IntPtr self, HAuthTicket hAuthTicket);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate UserHasLicenseForAppResult FUserHasLicenseForApp(IntPtr self, SteamId steamID, AppId appID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FBIsBehindNAT(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FAdvertiseGame(IntPtr self, SteamId steamIDGameServer, uint unIPServer, ushort usPortServer);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FRequestEncryptedAppTicket(IntPtr self, IntPtr pDataToInclude, int cbDataToInclude);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetEncryptedAppTicket(IntPtr self, IntPtr pTicket, int cbMaxTicket, ref uint pcbTicket);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetGameBadgeLevel(IntPtr self, int nSeries, [MarshalAs(UnmanagedType.U1)] bool bFoil);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetPlayerSteamLevel(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FRequestStoreAuthURL(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchRedirectURL);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FBIsPhoneVerified(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FBIsTwoFactorEnabled(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FBIsPhoneIdentifying(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FBIsPhoneRequiringVerification(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FGetMarketEligibility(IntPtr self);

	private FGetHSteamUser _GetHSteamUser;

	private FBLoggedOn _BLoggedOn;

	private FGetSteamID _GetSteamID;

	private FInitiateGameConnection _InitiateGameConnection;

	private FTerminateGameConnection _TerminateGameConnection;

	private FTrackAppUsageEvent _TrackAppUsageEvent;

	private FGetUserDataFolder _GetUserDataFolder;

	private FStartVoiceRecording _StartVoiceRecording;

	private FStopVoiceRecording _StopVoiceRecording;

	private FGetAvailableVoice _GetAvailableVoice;

	private FGetVoice _GetVoice;

	private FDecompressVoice _DecompressVoice;

	private FGetVoiceOptimalSampleRate _GetVoiceOptimalSampleRate;

	private FGetAuthSessionTicket _GetAuthSessionTicket;

	private FBeginAuthSession _BeginAuthSession;

	private FEndAuthSession _EndAuthSession;

	private FCancelAuthTicket _CancelAuthTicket;

	private FUserHasLicenseForApp _UserHasLicenseForApp;

	private FBIsBehindNAT _BIsBehindNAT;

	private FAdvertiseGame _AdvertiseGame;

	private FRequestEncryptedAppTicket _RequestEncryptedAppTicket;

	private FGetEncryptedAppTicket _GetEncryptedAppTicket;

	private FGetGameBadgeLevel _GetGameBadgeLevel;

	private FGetPlayerSteamLevel _GetPlayerSteamLevel;

	private FRequestStoreAuthURL _RequestStoreAuthURL;

	private FBIsPhoneVerified _BIsPhoneVerified;

	private FBIsTwoFactorEnabled _BIsTwoFactorEnabled;

	private FBIsPhoneIdentifying _BIsPhoneIdentifying;

	private FBIsPhoneRequiringVerification _BIsPhoneRequiringVerification;

	private FGetMarketEligibility _GetMarketEligibility;

	public override string InterfaceName => "SteamUser020";

	public override void InitInternals()
	{
		_GetHSteamUser = Marshal.GetDelegateForFunctionPointer<FGetHSteamUser>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(0)));
		_BLoggedOn = Marshal.GetDelegateForFunctionPointer<FBLoggedOn>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(8)));
		_GetSteamID = Marshal.GetDelegateForFunctionPointer<FGetSteamID>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(16)));
		_InitiateGameConnection = Marshal.GetDelegateForFunctionPointer<FInitiateGameConnection>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(24)));
		_TerminateGameConnection = Marshal.GetDelegateForFunctionPointer<FTerminateGameConnection>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(32)));
		_TrackAppUsageEvent = Marshal.GetDelegateForFunctionPointer<FTrackAppUsageEvent>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(40)));
		_GetUserDataFolder = Marshal.GetDelegateForFunctionPointer<FGetUserDataFolder>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(48)));
		_StartVoiceRecording = Marshal.GetDelegateForFunctionPointer<FStartVoiceRecording>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(56)));
		_StopVoiceRecording = Marshal.GetDelegateForFunctionPointer<FStopVoiceRecording>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(64)));
		_GetAvailableVoice = Marshal.GetDelegateForFunctionPointer<FGetAvailableVoice>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(72)));
		_GetVoice = Marshal.GetDelegateForFunctionPointer<FGetVoice>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(80)));
		_DecompressVoice = Marshal.GetDelegateForFunctionPointer<FDecompressVoice>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(88)));
		_GetVoiceOptimalSampleRate = Marshal.GetDelegateForFunctionPointer<FGetVoiceOptimalSampleRate>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(96)));
		_GetAuthSessionTicket = Marshal.GetDelegateForFunctionPointer<FGetAuthSessionTicket>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(104)));
		_BeginAuthSession = Marshal.GetDelegateForFunctionPointer<FBeginAuthSession>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(112)));
		_EndAuthSession = Marshal.GetDelegateForFunctionPointer<FEndAuthSession>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(120)));
		_CancelAuthTicket = Marshal.GetDelegateForFunctionPointer<FCancelAuthTicket>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(128)));
		_UserHasLicenseForApp = Marshal.GetDelegateForFunctionPointer<FUserHasLicenseForApp>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(136)));
		_BIsBehindNAT = Marshal.GetDelegateForFunctionPointer<FBIsBehindNAT>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(144)));
		_AdvertiseGame = Marshal.GetDelegateForFunctionPointer<FAdvertiseGame>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(152)));
		_RequestEncryptedAppTicket = Marshal.GetDelegateForFunctionPointer<FRequestEncryptedAppTicket>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(160)));
		_GetEncryptedAppTicket = Marshal.GetDelegateForFunctionPointer<FGetEncryptedAppTicket>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(168)));
		_GetGameBadgeLevel = Marshal.GetDelegateForFunctionPointer<FGetGameBadgeLevel>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(176)));
		_GetPlayerSteamLevel = Marshal.GetDelegateForFunctionPointer<FGetPlayerSteamLevel>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(184)));
		_RequestStoreAuthURL = Marshal.GetDelegateForFunctionPointer<FRequestStoreAuthURL>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(192)));
		_BIsPhoneVerified = Marshal.GetDelegateForFunctionPointer<FBIsPhoneVerified>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(200)));
		_BIsTwoFactorEnabled = Marshal.GetDelegateForFunctionPointer<FBIsTwoFactorEnabled>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(208)));
		_BIsPhoneIdentifying = Marshal.GetDelegateForFunctionPointer<FBIsPhoneIdentifying>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(216)));
		_BIsPhoneRequiringVerification = Marshal.GetDelegateForFunctionPointer<FBIsPhoneRequiringVerification>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(224)));
		_GetMarketEligibility = Marshal.GetDelegateForFunctionPointer<FGetMarketEligibility>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(232)));
	}

	internal override void Shutdown()
	{
		base.Shutdown();
		_GetHSteamUser = null;
		_BLoggedOn = null;
		_GetSteamID = null;
		_InitiateGameConnection = null;
		_TerminateGameConnection = null;
		_TrackAppUsageEvent = null;
		_GetUserDataFolder = null;
		_StartVoiceRecording = null;
		_StopVoiceRecording = null;
		_GetAvailableVoice = null;
		_GetVoice = null;
		_DecompressVoice = null;
		_GetVoiceOptimalSampleRate = null;
		_GetAuthSessionTicket = null;
		_BeginAuthSession = null;
		_EndAuthSession = null;
		_CancelAuthTicket = null;
		_UserHasLicenseForApp = null;
		_BIsBehindNAT = null;
		_AdvertiseGame = null;
		_RequestEncryptedAppTicket = null;
		_GetEncryptedAppTicket = null;
		_GetGameBadgeLevel = null;
		_GetPlayerSteamLevel = null;
		_RequestStoreAuthURL = null;
		_BIsPhoneVerified = null;
		_BIsTwoFactorEnabled = null;
		_BIsPhoneIdentifying = null;
		_BIsPhoneRequiringVerification = null;
		_GetMarketEligibility = null;
	}

	internal HSteamUser GetHSteamUser()
	{
		return _GetHSteamUser(Self);
	}

	internal bool BLoggedOn()
	{
		return _BLoggedOn(Self);
	}

	internal SteamId GetSteamID()
	{
		return _GetSteamID(Self);
	}

	internal int InitiateGameConnection(IntPtr pAuthBlob, int cbMaxAuthBlob, SteamId steamIDGameServer, uint unIPServer, ushort usPortServer, [MarshalAs(UnmanagedType.U1)] bool bSecure)
	{
		return _InitiateGameConnection(Self, pAuthBlob, cbMaxAuthBlob, steamIDGameServer, unIPServer, usPortServer, bSecure);
	}

	internal void TerminateGameConnection(uint unIPServer, ushort usPortServer)
	{
		_TerminateGameConnection(Self, unIPServer, usPortServer);
	}

	internal void TrackAppUsageEvent(GameId gameID, int eAppUsageEvent, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchExtraInfo)
	{
		_TrackAppUsageEvent(Self, gameID, eAppUsageEvent, pchExtraInfo);
	}

	internal bool GetUserDataFolder(out string pchBuffer)
	{
		IntPtr intPtr = Helpers.TakeMemory();
		bool result = _GetUserDataFolder(Self, intPtr, 32768);
		pchBuffer = Helpers.MemoryToString(intPtr);
		return result;
	}

	internal void StartVoiceRecording()
	{
		_StartVoiceRecording(Self);
	}

	internal void StopVoiceRecording()
	{
		_StopVoiceRecording(Self);
	}

	internal VoiceResult GetAvailableVoice(ref uint pcbCompressed, ref uint pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated)
	{
		return _GetAvailableVoice(Self, ref pcbCompressed, ref pcbUncompressed_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
	}

	internal VoiceResult GetVoice([MarshalAs(UnmanagedType.U1)] bool bWantCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, ref uint nBytesWritten, [MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, ref uint nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated)
	{
		return _GetVoice(Self, bWantCompressed, pDestBuffer, cbDestBufferSize, ref nBytesWritten, bWantUncompressed_Deprecated, pUncompressedDestBuffer_Deprecated, cbUncompressedDestBufferSize_Deprecated, ref nUncompressBytesWritten_Deprecated, nUncompressedVoiceDesiredSampleRate_Deprecated);
	}

	internal VoiceResult DecompressVoice(IntPtr pCompressed, uint cbCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, ref uint nBytesWritten, uint nDesiredSampleRate)
	{
		return _DecompressVoice(Self, pCompressed, cbCompressed, pDestBuffer, cbDestBufferSize, ref nBytesWritten, nDesiredSampleRate);
	}

	internal uint GetVoiceOptimalSampleRate()
	{
		return _GetVoiceOptimalSampleRate(Self);
	}

	internal HAuthTicket GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, ref uint pcbTicket)
	{
		return _GetAuthSessionTicket(Self, pTicket, cbMaxTicket, ref pcbTicket);
	}

	internal BeginAuthResult BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, SteamId steamID)
	{
		return _BeginAuthSession(Self, pAuthTicket, cbAuthTicket, steamID);
	}

	internal void EndAuthSession(SteamId steamID)
	{
		_EndAuthSession(Self, steamID);
	}

	internal void CancelAuthTicket(HAuthTicket hAuthTicket)
	{
		_CancelAuthTicket(Self, hAuthTicket);
	}

	internal UserHasLicenseForAppResult UserHasLicenseForApp(SteamId steamID, AppId appID)
	{
		return _UserHasLicenseForApp(Self, steamID, appID);
	}

	internal bool BIsBehindNAT()
	{
		return _BIsBehindNAT(Self);
	}

	internal void AdvertiseGame(SteamId steamIDGameServer, uint unIPServer, ushort usPortServer)
	{
		_AdvertiseGame(Self, steamIDGameServer, unIPServer, usPortServer);
	}

	internal async Task<EncryptedAppTicketResponse_t?> RequestEncryptedAppTicket(IntPtr pDataToInclude, int cbDataToInclude)
	{
		SteamAPICall_t returnValue = _RequestEncryptedAppTicket(Self, pDataToInclude, cbDataToInclude);
		return await EncryptedAppTicketResponse_t.GetResultAsync(returnValue);
	}

	internal bool GetEncryptedAppTicket(IntPtr pTicket, int cbMaxTicket, ref uint pcbTicket)
	{
		return _GetEncryptedAppTicket(Self, pTicket, cbMaxTicket, ref pcbTicket);
	}

	internal int GetGameBadgeLevel(int nSeries, [MarshalAs(UnmanagedType.U1)] bool bFoil)
	{
		return _GetGameBadgeLevel(Self, nSeries, bFoil);
	}

	internal int GetPlayerSteamLevel()
	{
		return _GetPlayerSteamLevel(Self);
	}

	internal async Task<StoreAuthURLResponse_t?> RequestStoreAuthURL([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchRedirectURL)
	{
		SteamAPICall_t returnValue = _RequestStoreAuthURL(Self, pchRedirectURL);
		return await StoreAuthURLResponse_t.GetResultAsync(returnValue);
	}

	internal bool BIsPhoneVerified()
	{
		return _BIsPhoneVerified(Self);
	}

	internal bool BIsTwoFactorEnabled()
	{
		return _BIsTwoFactorEnabled(Self);
	}

	internal bool BIsPhoneIdentifying()
	{
		return _BIsPhoneIdentifying(Self);
	}

	internal bool BIsPhoneRequiringVerification()
	{
		return _BIsPhoneRequiringVerification(Self);
	}

	internal async Task<MarketEligibilityResponse_t?> GetMarketEligibility()
	{
		SteamAPICall_t returnValue = _GetMarketEligibility(Self);
		return await MarketEligibilityResponse_t.GetResultAsync(returnValue);
	}
}
