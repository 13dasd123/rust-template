using System;
using System.Collections.Generic;
using Steamworks;
using Steamworks.Data;

public static class SteamNetworkingSockets
{
	private static ISteamNetworkingSockets _internal;

	private static Dictionary<uint, SocketInterface> SocketInterfaces;

	private static Dictionary<uint, ConnectionInterface> ConnectionInterfaces;

	internal static ISteamNetworkingSockets Internal
	{
		get
		{
			if (_internal == null)
			{
				_internal = new ISteamNetworkingSockets();
				_internal.Init();
				SocketInterfaces = new Dictionary<uint, SocketInterface>();
				ConnectionInterfaces = new Dictionary<uint, ConnectionInterface>();
			}
			return _internal;
		}
	}

	public static event Action<Connection, ConnectionInfo> OnConnectionStatusChanged;

	internal static SocketInterface GetSocketInterface(uint id)
	{
		if (SocketInterfaces == null)
		{
			return null;
		}
		if (id == 0)
		{
			throw new ArgumentException("Invalid Socket");
		}
		if (SocketInterfaces.TryGetValue(id, out var value))
		{
			return value;
		}
		return null;
	}

	internal static void SetSocketInterface(uint id, SocketInterface iface)
	{
		if (id == 0)
		{
			throw new ArgumentException("Invalid Socket");
		}
		Console.WriteLine($"Installing Socket For {id}");
		SocketInterfaces[id] = iface;
	}

	internal static ConnectionInterface GetConnectionInterface(uint id)
	{
		if (ConnectionInterfaces == null)
		{
			return null;
		}
		if (id == 0)
		{
			return null;
		}
		if (ConnectionInterfaces.TryGetValue(id, out var value))
		{
			return value;
		}
		return null;
	}

	internal static void SetConnectionInterface(uint id, ConnectionInterface iface)
	{
		if (id == 0)
		{
			throw new ArgumentException("Invalid Connection");
		}
		ConnectionInterfaces[id] = iface;
	}

	internal static void Shutdown()
	{
		_internal = null;
		SocketInterfaces = null;
		ConnectionInterfaces = null;
	}

	internal static void InstallEvents(bool server = false)
	{
		SteamNetConnectionStatusChangedCallback_t.Install(delegate(SteamNetConnectionStatusChangedCallback_t x)
		{
			ConnectionStatusChanged(x);
		}, server);
	}

	private static void ConnectionStatusChanged(SteamNetConnectionStatusChangedCallback_t data)
	{
		if (data.Nfo.listenSocket.Id != 0)
		{
			GetSocketInterface(data.Nfo.listenSocket.Id)?.OnConnectionChanged(data.Conn, data.Nfo);
		}
		else
		{
			GetConnectionInterface(data.Conn.Id)?.OnConnectionChanged(data.Nfo);
		}
		SteamNetworkingSockets.OnConnectionStatusChanged?.Invoke(data.Conn, data.Nfo);
	}

	public static T CreateNormalSocket<T>(NetAddress address) where T : SocketInterface, new()
	{
		T val = new T
		{
			Socket = Internal.CreateListenSocketIP(ref address)
		};
		SetSocketInterface(val.Socket.Id, val);
		return val;
	}

	public static T ConnectNormal<T>(NetAddress address) where T : ConnectionInterface, new()
	{
		T val = new T
		{
			Connection = Internal.ConnectByIPAddress(ref address)
		};
		SetConnectionInterface(val.Connection.Id, val);
		return val;
	}

	public static T CreateRelaySocket<T>(int virtualport = 0) where T : SocketInterface, new()
	{
		T val = new T
		{
			Socket = Internal.CreateListenSocketP2P(virtualport)
		};
		SetSocketInterface(val.Socket.Id, val);
		return val;
	}

	public static T ConnectRelay<T>(SteamId serverId, int virtualport = 0) where T : ConnectionInterface, new()
	{
		T val = new T();
		NetIdentity identityRemote = serverId;
		val.Connection = Internal.ConnectP2P(ref identityRemote, virtualport);
		SetConnectionInterface(val.Connection.Id, val);
		return val;
	}
}
