using System;
using System.Runtime.InteropServices;
using Steamworks;
using Steamworks.Data;

public class ConnectionInterface
{
	public Connection Connection;

	public bool Connected = false;

	public bool Connecting = true;

	public string ConnectionName
	{
		get
		{
			return Connection.ConnectionName;
		}
		set
		{
			Connection.ConnectionName = value;
		}
	}

	public long UserData
	{
		get
		{
			return Connection.UserData;
		}
		set
		{
			Connection.UserData = value;
		}
	}

	public void Close()
	{
		Connection.Close();
	}

	public override string ToString()
	{
		return Connection.ToString();
	}

	public virtual void OnConnectionChanged(ConnectionInfo data)
	{
		switch (data.State)
		{
		case ConnectionState.Connecting:
			OnConnecting(data);
			break;
		case ConnectionState.Connected:
			OnConnected(data);
			break;
		case ConnectionState.None:
		case ConnectionState.ClosedByPeer:
		case ConnectionState.ProblemDetectedLocally:
			OnDisconnected(data);
			break;
		case ConnectionState.FindingRoute:
			break;
		}
	}

	public virtual void OnConnecting(ConnectionInfo data)
	{
		Connecting = true;
	}

	public virtual void OnConnected(ConnectionInfo data)
	{
		Connected = true;
		Connecting = false;
	}

	public virtual void OnDisconnected(ConnectionInfo data)
	{
		Connected = false;
		Connecting = false;
	}

	public void Receive(int bufferSize = 32)
	{
		int num = 0;
		IntPtr intPtr = Marshal.AllocHGlobal(IntPtr.Size * bufferSize);
		try
		{
			num = SteamNetworkingSockets.Internal.ReceiveMessagesOnConnection(Connection, intPtr, bufferSize);
			for (int i = 0; i < num; i++)
			{
				ReceiveMessage(Marshal.ReadIntPtr(intPtr, i * IntPtr.Size));
			}
		}
		finally
		{
			Marshal.FreeHGlobal(intPtr);
		}
		if (num == bufferSize)
		{
			Receive(bufferSize);
		}
	}

	internal void ReceiveMessage(IntPtr msgPtr)
	{
		NetMsg netMsg = Marshal.PtrToStructure<NetMsg>(msgPtr);
		try
		{
			OnMessage(netMsg.DataPtr, netMsg.DataSize, netMsg.RecvTime, netMsg.MessageNumber, netMsg.Channel);
		}
		finally
		{
			netMsg.Release(msgPtr);
		}
	}

	public virtual void OnMessage(IntPtr data, int size, long messageNum, long recvTime, int channel)
	{
	}
}
