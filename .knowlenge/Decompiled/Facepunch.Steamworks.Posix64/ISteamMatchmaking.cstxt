using System;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using Steamworks;
using Steamworks.Data;

internal class ISteamMatchmaking : SteamInterface
{
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetFavoriteGameCount(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetFavoriteGame(IntPtr self, int iGame, ref AppId pnAppID, ref uint pnIP, ref ushort pnConnPort, ref ushort pnQueryPort, ref uint punFlags, ref uint pRTime32LastPlayedOnServer);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FAddFavoriteGame(IntPtr self, AppId nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FRemoveFavoriteGame(IntPtr self, AppId nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FRequestLobbyList(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FAddRequestLobbyListStringFilter(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKeyToMatch, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchValueToMatch, LobbyComparison eComparisonType);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FAddRequestLobbyListNumericalFilter(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FAddRequestLobbyListNearValueFilter(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKeyToMatch, int nValueToBeCloseTo);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FAddRequestLobbyListFilterSlotsAvailable(IntPtr self, int nSlotsAvailable);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FAddRequestLobbyListDistanceFilter(IntPtr self, LobbyDistanceFilter eLobbyDistanceFilter);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FAddRequestLobbyListResultCountFilter(IntPtr self, int cMaxResults);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FAddRequestLobbyListCompatibleMembersFilter(IntPtr self, SteamId steamIDLobby);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamId FGetLobbyByIndex(IntPtr self, int iLobby);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FCreateLobby(IntPtr self, LobbyType eLobbyType, int cMaxMembers);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FJoinLobby(IntPtr self, SteamId steamIDLobby);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FLeaveLobby(IntPtr self, SteamId steamIDLobby);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FInviteUserToLobby(IntPtr self, SteamId steamIDLobby, SteamId steamIDInvitee);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetNumLobbyMembers(IntPtr self, SteamId steamIDLobby);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamId FGetLobbyMemberByIndex(IntPtr self, SteamId steamIDLobby, int iMember);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Utf8StringPointer FGetLobbyData(IntPtr self, SteamId steamIDLobby, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKey);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetLobbyData(IntPtr self, SteamId steamIDLobby, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKey, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchValue);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetLobbyDataCount(IntPtr self, SteamId steamIDLobby);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetLobbyDataByIndex(IntPtr self, SteamId steamIDLobby, int iLobbyData, IntPtr pchKey, int cchKeyBufferSize, IntPtr pchValue, int cchValueBufferSize);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FDeleteLobbyData(IntPtr self, SteamId steamIDLobby, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKey);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Utf8StringPointer FGetLobbyMemberData(IntPtr self, SteamId steamIDLobby, SteamId steamIDUser, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKey);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetLobbyMemberData(IntPtr self, SteamId steamIDLobby, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKey, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchValue);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSendLobbyChatMsg(IntPtr self, SteamId steamIDLobby, IntPtr pvMsgBody, int cubMsgBody);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetLobbyChatEntry(IntPtr self, SteamId steamIDLobby, int iChatID, ref SteamId pSteamIDUser, IntPtr pvData, int cubData, ref ChatEntryType peChatEntryType);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FRequestLobbyData(IntPtr self, SteamId steamIDLobby);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetLobbyGameServer(IntPtr self, SteamId steamIDLobby, uint unGameServerIP, ushort unGameServerPort, SteamId steamIDGameServer);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetLobbyGameServer(IntPtr self, SteamId steamIDLobby, ref uint punGameServerIP, ref ushort punGameServerPort, ref SteamId psteamIDGameServer);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetLobbyMemberLimit(IntPtr self, SteamId steamIDLobby, int cMaxMembers);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetLobbyMemberLimit(IntPtr self, SteamId steamIDLobby);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetLobbyType(IntPtr self, SteamId steamIDLobby, LobbyType eLobbyType);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetLobbyJoinable(IntPtr self, SteamId steamIDLobby, [MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamId FGetLobbyOwner(IntPtr self, SteamId steamIDLobby);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetLobbyOwner(IntPtr self, SteamId steamIDLobby, SteamId steamIDNewOwner);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetLinkedLobby(IntPtr self, SteamId steamIDLobby, SteamId steamIDLobbyDependent);

	private FGetFavoriteGameCount _GetFavoriteGameCount;

	private FGetFavoriteGame _GetFavoriteGame;

	private FAddFavoriteGame _AddFavoriteGame;

	private FRemoveFavoriteGame _RemoveFavoriteGame;

	private FRequestLobbyList _RequestLobbyList;

	private FAddRequestLobbyListStringFilter _AddRequestLobbyListStringFilter;

	private FAddRequestLobbyListNumericalFilter _AddRequestLobbyListNumericalFilter;

	private FAddRequestLobbyListNearValueFilter _AddRequestLobbyListNearValueFilter;

	private FAddRequestLobbyListFilterSlotsAvailable _AddRequestLobbyListFilterSlotsAvailable;

	private FAddRequestLobbyListDistanceFilter _AddRequestLobbyListDistanceFilter;

	private FAddRequestLobbyListResultCountFilter _AddRequestLobbyListResultCountFilter;

	private FAddRequestLobbyListCompatibleMembersFilter _AddRequestLobbyListCompatibleMembersFilter;

	private FGetLobbyByIndex _GetLobbyByIndex;

	private FCreateLobby _CreateLobby;

	private FJoinLobby _JoinLobby;

	private FLeaveLobby _LeaveLobby;

	private FInviteUserToLobby _InviteUserToLobby;

	private FGetNumLobbyMembers _GetNumLobbyMembers;

	private FGetLobbyMemberByIndex _GetLobbyMemberByIndex;

	private FGetLobbyData _GetLobbyData;

	private FSetLobbyData _SetLobbyData;

	private FGetLobbyDataCount _GetLobbyDataCount;

	private FGetLobbyDataByIndex _GetLobbyDataByIndex;

	private FDeleteLobbyData _DeleteLobbyData;

	private FGetLobbyMemberData _GetLobbyMemberData;

	private FSetLobbyMemberData _SetLobbyMemberData;

	private FSendLobbyChatMsg _SendLobbyChatMsg;

	private FGetLobbyChatEntry _GetLobbyChatEntry;

	private FRequestLobbyData _RequestLobbyData;

	private FSetLobbyGameServer _SetLobbyGameServer;

	private FGetLobbyGameServer _GetLobbyGameServer;

	private FSetLobbyMemberLimit _SetLobbyMemberLimit;

	private FGetLobbyMemberLimit _GetLobbyMemberLimit;

	private FSetLobbyType _SetLobbyType;

	private FSetLobbyJoinable _SetLobbyJoinable;

	private FGetLobbyOwner _GetLobbyOwner;

	private FSetLobbyOwner _SetLobbyOwner;

	private FSetLinkedLobby _SetLinkedLobby;

	public override string InterfaceName => "SteamMatchMaking009";

	public override void InitInternals()
	{
		_GetFavoriteGameCount = Marshal.GetDelegateForFunctionPointer<FGetFavoriteGameCount>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(0)));
		_GetFavoriteGame = Marshal.GetDelegateForFunctionPointer<FGetFavoriteGame>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(8)));
		_AddFavoriteGame = Marshal.GetDelegateForFunctionPointer<FAddFavoriteGame>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(16)));
		_RemoveFavoriteGame = Marshal.GetDelegateForFunctionPointer<FRemoveFavoriteGame>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(24)));
		_RequestLobbyList = Marshal.GetDelegateForFunctionPointer<FRequestLobbyList>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(32)));
		_AddRequestLobbyListStringFilter = Marshal.GetDelegateForFunctionPointer<FAddRequestLobbyListStringFilter>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(40)));
		_AddRequestLobbyListNumericalFilter = Marshal.GetDelegateForFunctionPointer<FAddRequestLobbyListNumericalFilter>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(48)));
		_AddRequestLobbyListNearValueFilter = Marshal.GetDelegateForFunctionPointer<FAddRequestLobbyListNearValueFilter>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(56)));
		_AddRequestLobbyListFilterSlotsAvailable = Marshal.GetDelegateForFunctionPointer<FAddRequestLobbyListFilterSlotsAvailable>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(64)));
		_AddRequestLobbyListDistanceFilter = Marshal.GetDelegateForFunctionPointer<FAddRequestLobbyListDistanceFilter>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(72)));
		_AddRequestLobbyListResultCountFilter = Marshal.GetDelegateForFunctionPointer<FAddRequestLobbyListResultCountFilter>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(80)));
		_AddRequestLobbyListCompatibleMembersFilter = Marshal.GetDelegateForFunctionPointer<FAddRequestLobbyListCompatibleMembersFilter>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(88)));
		_GetLobbyByIndex = Marshal.GetDelegateForFunctionPointer<FGetLobbyByIndex>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(96)));
		_CreateLobby = Marshal.GetDelegateForFunctionPointer<FCreateLobby>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(104)));
		_JoinLobby = Marshal.GetDelegateForFunctionPointer<FJoinLobby>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(112)));
		_LeaveLobby = Marshal.GetDelegateForFunctionPointer<FLeaveLobby>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(120)));
		_InviteUserToLobby = Marshal.GetDelegateForFunctionPointer<FInviteUserToLobby>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(128)));
		_GetNumLobbyMembers = Marshal.GetDelegateForFunctionPointer<FGetNumLobbyMembers>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(136)));
		_GetLobbyMemberByIndex = Marshal.GetDelegateForFunctionPointer<FGetLobbyMemberByIndex>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(144)));
		_GetLobbyData = Marshal.GetDelegateForFunctionPointer<FGetLobbyData>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(152)));
		_SetLobbyData = Marshal.GetDelegateForFunctionPointer<FSetLobbyData>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(160)));
		_GetLobbyDataCount = Marshal.GetDelegateForFunctionPointer<FGetLobbyDataCount>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(168)));
		_GetLobbyDataByIndex = Marshal.GetDelegateForFunctionPointer<FGetLobbyDataByIndex>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(176)));
		_DeleteLobbyData = Marshal.GetDelegateForFunctionPointer<FDeleteLobbyData>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(184)));
		_GetLobbyMemberData = Marshal.GetDelegateForFunctionPointer<FGetLobbyMemberData>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(192)));
		_SetLobbyMemberData = Marshal.GetDelegateForFunctionPointer<FSetLobbyMemberData>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(200)));
		_SendLobbyChatMsg = Marshal.GetDelegateForFunctionPointer<FSendLobbyChatMsg>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(208)));
		_GetLobbyChatEntry = Marshal.GetDelegateForFunctionPointer<FGetLobbyChatEntry>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(216)));
		_RequestLobbyData = Marshal.GetDelegateForFunctionPointer<FRequestLobbyData>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(224)));
		_SetLobbyGameServer = Marshal.GetDelegateForFunctionPointer<FSetLobbyGameServer>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(232)));
		_GetLobbyGameServer = Marshal.GetDelegateForFunctionPointer<FGetLobbyGameServer>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(240)));
		_SetLobbyMemberLimit = Marshal.GetDelegateForFunctionPointer<FSetLobbyMemberLimit>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(248)));
		_GetLobbyMemberLimit = Marshal.GetDelegateForFunctionPointer<FGetLobbyMemberLimit>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(256)));
		_SetLobbyType = Marshal.GetDelegateForFunctionPointer<FSetLobbyType>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(264)));
		_SetLobbyJoinable = Marshal.GetDelegateForFunctionPointer<FSetLobbyJoinable>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(272)));
		_GetLobbyOwner = Marshal.GetDelegateForFunctionPointer<FGetLobbyOwner>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(280)));
		_SetLobbyOwner = Marshal.GetDelegateForFunctionPointer<FSetLobbyOwner>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(288)));
		_SetLinkedLobby = Marshal.GetDelegateForFunctionPointer<FSetLinkedLobby>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(296)));
	}

	internal override void Shutdown()
	{
		base.Shutdown();
		_GetFavoriteGameCount = null;
		_GetFavoriteGame = null;
		_AddFavoriteGame = null;
		_RemoveFavoriteGame = null;
		_RequestLobbyList = null;
		_AddRequestLobbyListStringFilter = null;
		_AddRequestLobbyListNumericalFilter = null;
		_AddRequestLobbyListNearValueFilter = null;
		_AddRequestLobbyListFilterSlotsAvailable = null;
		_AddRequestLobbyListDistanceFilter = null;
		_AddRequestLobbyListResultCountFilter = null;
		_AddRequestLobbyListCompatibleMembersFilter = null;
		_GetLobbyByIndex = null;
		_CreateLobby = null;
		_JoinLobby = null;
		_LeaveLobby = null;
		_InviteUserToLobby = null;
		_GetNumLobbyMembers = null;
		_GetLobbyMemberByIndex = null;
		_GetLobbyData = null;
		_SetLobbyData = null;
		_GetLobbyDataCount = null;
		_GetLobbyDataByIndex = null;
		_DeleteLobbyData = null;
		_GetLobbyMemberData = null;
		_SetLobbyMemberData = null;
		_SendLobbyChatMsg = null;
		_GetLobbyChatEntry = null;
		_RequestLobbyData = null;
		_SetLobbyGameServer = null;
		_GetLobbyGameServer = null;
		_SetLobbyMemberLimit = null;
		_GetLobbyMemberLimit = null;
		_SetLobbyType = null;
		_SetLobbyJoinable = null;
		_GetLobbyOwner = null;
		_SetLobbyOwner = null;
		_SetLinkedLobby = null;
	}

	internal int GetFavoriteGameCount()
	{
		return _GetFavoriteGameCount(Self);
	}

	internal bool GetFavoriteGame(int iGame, ref AppId pnAppID, ref uint pnIP, ref ushort pnConnPort, ref ushort pnQueryPort, ref uint punFlags, ref uint pRTime32LastPlayedOnServer)
	{
		return _GetFavoriteGame(Self, iGame, ref pnAppID, ref pnIP, ref pnConnPort, ref pnQueryPort, ref punFlags, ref pRTime32LastPlayedOnServer);
	}

	internal int AddFavoriteGame(AppId nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer)
	{
		return _AddFavoriteGame(Self, nAppID, nIP, nConnPort, nQueryPort, unFlags, rTime32LastPlayedOnServer);
	}

	internal bool RemoveFavoriteGame(AppId nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags)
	{
		return _RemoveFavoriteGame(Self, nAppID, nIP, nConnPort, nQueryPort, unFlags);
	}

	internal async Task<LobbyMatchList_t?> RequestLobbyList()
	{
		SteamAPICall_t returnValue = _RequestLobbyList(Self);
		return await LobbyMatchList_t.GetResultAsync(returnValue);
	}

	internal void AddRequestLobbyListStringFilter([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKeyToMatch, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchValueToMatch, LobbyComparison eComparisonType)
	{
		_AddRequestLobbyListStringFilter(Self, pchKeyToMatch, pchValueToMatch, eComparisonType);
	}

	internal void AddRequestLobbyListNumericalFilter([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType)
	{
		_AddRequestLobbyListNumericalFilter(Self, pchKeyToMatch, nValueToMatch, eComparisonType);
	}

	internal void AddRequestLobbyListNearValueFilter([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKeyToMatch, int nValueToBeCloseTo)
	{
		_AddRequestLobbyListNearValueFilter(Self, pchKeyToMatch, nValueToBeCloseTo);
	}

	internal void AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable)
	{
		_AddRequestLobbyListFilterSlotsAvailable(Self, nSlotsAvailable);
	}

	internal void AddRequestLobbyListDistanceFilter(LobbyDistanceFilter eLobbyDistanceFilter)
	{
		_AddRequestLobbyListDistanceFilter(Self, eLobbyDistanceFilter);
	}

	internal void AddRequestLobbyListResultCountFilter(int cMaxResults)
	{
		_AddRequestLobbyListResultCountFilter(Self, cMaxResults);
	}

	internal void AddRequestLobbyListCompatibleMembersFilter(SteamId steamIDLobby)
	{
		_AddRequestLobbyListCompatibleMembersFilter(Self, steamIDLobby);
	}

	internal SteamId GetLobbyByIndex(int iLobby)
	{
		return _GetLobbyByIndex(Self, iLobby);
	}

	internal async Task<LobbyCreated_t?> CreateLobby(LobbyType eLobbyType, int cMaxMembers)
	{
		SteamAPICall_t returnValue = _CreateLobby(Self, eLobbyType, cMaxMembers);
		return await LobbyCreated_t.GetResultAsync(returnValue);
	}

	internal async Task<LobbyEnter_t?> JoinLobby(SteamId steamIDLobby)
	{
		SteamAPICall_t returnValue = _JoinLobby(Self, steamIDLobby);
		return await LobbyEnter_t.GetResultAsync(returnValue);
	}

	internal void LeaveLobby(SteamId steamIDLobby)
	{
		_LeaveLobby(Self, steamIDLobby);
	}

	internal bool InviteUserToLobby(SteamId steamIDLobby, SteamId steamIDInvitee)
	{
		return _InviteUserToLobby(Self, steamIDLobby, steamIDInvitee);
	}

	internal int GetNumLobbyMembers(SteamId steamIDLobby)
	{
		return _GetNumLobbyMembers(Self, steamIDLobby);
	}

	internal SteamId GetLobbyMemberByIndex(SteamId steamIDLobby, int iMember)
	{
		return _GetLobbyMemberByIndex(Self, steamIDLobby, iMember);
	}

	internal string GetLobbyData(SteamId steamIDLobby, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKey)
	{
		Utf8StringPointer utf8StringPointer = _GetLobbyData(Self, steamIDLobby, pchKey);
		return utf8StringPointer;
	}

	internal bool SetLobbyData(SteamId steamIDLobby, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKey, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchValue)
	{
		return _SetLobbyData(Self, steamIDLobby, pchKey, pchValue);
	}

	internal int GetLobbyDataCount(SteamId steamIDLobby)
	{
		return _GetLobbyDataCount(Self, steamIDLobby);
	}

	internal bool GetLobbyDataByIndex(SteamId steamIDLobby, int iLobbyData, out string pchKey, out string pchValue)
	{
		IntPtr intPtr = Helpers.TakeMemory();
		IntPtr intPtr2 = Helpers.TakeMemory();
		bool result = _GetLobbyDataByIndex(Self, steamIDLobby, iLobbyData, intPtr, 32768, intPtr2, 32768);
		pchKey = Helpers.MemoryToString(intPtr);
		pchValue = Helpers.MemoryToString(intPtr2);
		return result;
	}

	internal bool DeleteLobbyData(SteamId steamIDLobby, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKey)
	{
		return _DeleteLobbyData(Self, steamIDLobby, pchKey);
	}

	internal string GetLobbyMemberData(SteamId steamIDLobby, SteamId steamIDUser, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKey)
	{
		Utf8StringPointer utf8StringPointer = _GetLobbyMemberData(Self, steamIDLobby, steamIDUser, pchKey);
		return utf8StringPointer;
	}

	internal void SetLobbyMemberData(SteamId steamIDLobby, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKey, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchValue)
	{
		_SetLobbyMemberData(Self, steamIDLobby, pchKey, pchValue);
	}

	internal bool SendLobbyChatMsg(SteamId steamIDLobby, IntPtr pvMsgBody, int cubMsgBody)
	{
		return _SendLobbyChatMsg(Self, steamIDLobby, pvMsgBody, cubMsgBody);
	}

	internal int GetLobbyChatEntry(SteamId steamIDLobby, int iChatID, ref SteamId pSteamIDUser, IntPtr pvData, int cubData, ref ChatEntryType peChatEntryType)
	{
		return _GetLobbyChatEntry(Self, steamIDLobby, iChatID, ref pSteamIDUser, pvData, cubData, ref peChatEntryType);
	}

	internal bool RequestLobbyData(SteamId steamIDLobby)
	{
		return _RequestLobbyData(Self, steamIDLobby);
	}

	internal void SetLobbyGameServer(SteamId steamIDLobby, uint unGameServerIP, ushort unGameServerPort, SteamId steamIDGameServer)
	{
		_SetLobbyGameServer(Self, steamIDLobby, unGameServerIP, unGameServerPort, steamIDGameServer);
	}

	internal bool GetLobbyGameServer(SteamId steamIDLobby, ref uint punGameServerIP, ref ushort punGameServerPort, ref SteamId psteamIDGameServer)
	{
		return _GetLobbyGameServer(Self, steamIDLobby, ref punGameServerIP, ref punGameServerPort, ref psteamIDGameServer);
	}

	internal bool SetLobbyMemberLimit(SteamId steamIDLobby, int cMaxMembers)
	{
		return _SetLobbyMemberLimit(Self, steamIDLobby, cMaxMembers);
	}

	internal int GetLobbyMemberLimit(SteamId steamIDLobby)
	{
		return _GetLobbyMemberLimit(Self, steamIDLobby);
	}

	internal bool SetLobbyType(SteamId steamIDLobby, LobbyType eLobbyType)
	{
		return _SetLobbyType(Self, steamIDLobby, eLobbyType);
	}

	internal bool SetLobbyJoinable(SteamId steamIDLobby, [MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable)
	{
		return _SetLobbyJoinable(Self, steamIDLobby, bLobbyJoinable);
	}

	internal SteamId GetLobbyOwner(SteamId steamIDLobby)
	{
		return _GetLobbyOwner(Self, steamIDLobby);
	}

	internal bool SetLobbyOwner(SteamId steamIDLobby, SteamId steamIDNewOwner)
	{
		return _SetLobbyOwner(Self, steamIDLobby, steamIDNewOwner);
	}

	internal bool SetLinkedLobby(SteamId steamIDLobby, SteamId steamIDLobbyDependent)
	{
		return _SetLinkedLobby(Self, steamIDLobby, steamIDLobbyDependent);
	}
}
