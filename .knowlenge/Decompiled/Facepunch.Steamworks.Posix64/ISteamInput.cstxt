using System;
using System.Runtime.InteropServices;
using Steamworks;
using Steamworks.Data;

internal class ISteamInput : SteamInterface
{
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FDoInit(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FDoShutdown(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FRunFrame(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetConnectedControllers(IntPtr self, [In][Out] InputHandle_t[] handlesOut);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate InputActionSetHandle_t FGetActionSetHandle(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszActionSetName);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FActivateActionSet(IntPtr self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate InputActionSetHandle_t FGetCurrentActionSet(IntPtr self, InputHandle_t inputHandle);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FActivateActionSetLayer(IntPtr self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FDeactivateActionSetLayer(IntPtr self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FDeactivateAllActionSetLayers(IntPtr self, InputHandle_t inputHandle);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetActiveActionSetLayers(IntPtr self, InputHandle_t inputHandle, [In][Out] InputActionSetHandle_t[] handlesOut);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate InputDigitalActionHandle_t FGetDigitalActionHandle(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszActionName);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate DigitalState FGetDigitalActionData(IntPtr self, InputHandle_t inputHandle, InputDigitalActionHandle_t digitalActionHandle);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetDigitalActionOrigins(IntPtr self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputDigitalActionHandle_t digitalActionHandle, ref InputActionOrigin originsOut);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate InputAnalogActionHandle_t FGetAnalogActionHandle(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszActionName);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate AnalogState FGetAnalogActionData(IntPtr self, InputHandle_t inputHandle, InputAnalogActionHandle_t analogActionHandle);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetAnalogActionOrigins(IntPtr self, InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputAnalogActionHandle_t analogActionHandle, ref InputActionOrigin originsOut);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Utf8StringPointer FGetGlyphForActionOrigin(IntPtr self, InputActionOrigin eOrigin);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Utf8StringPointer FGetStringForActionOrigin(IntPtr self, InputActionOrigin eOrigin);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FStopAnalogActionMomentum(IntPtr self, InputHandle_t inputHandle, InputAnalogActionHandle_t eAction);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate MotionState FGetMotionData(IntPtr self, InputHandle_t inputHandle);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FTriggerVibration(IntPtr self, InputHandle_t inputHandle, ushort usLeftSpeed, ushort usRightSpeed);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetLEDColor(IntPtr self, InputHandle_t inputHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FTriggerHapticPulse(IntPtr self, InputHandle_t inputHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FTriggerRepeatedHapticPulse(IntPtr self, InputHandle_t inputHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FShowBindingPanel(IntPtr self, InputHandle_t inputHandle);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate InputType FGetInputTypeForHandle(IntPtr self, InputHandle_t inputHandle);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate InputHandle_t FGetControllerForGamepadIndex(IntPtr self, int nIndex);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetGamepadIndexForController(IntPtr self, InputHandle_t ulinputHandle);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Utf8StringPointer FGetStringForXboxOrigin(IntPtr self, XboxOrigin eOrigin);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Utf8StringPointer FGetGlyphForXboxOrigin(IntPtr self, XboxOrigin eOrigin);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate InputActionOrigin FGetActionOriginFromXboxOrigin(IntPtr self, InputHandle_t inputHandle, XboxOrigin eOrigin);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate InputActionOrigin FTranslateActionOrigin(IntPtr self, InputType eDestinationInputType, InputActionOrigin eSourceOrigin);

	private FDoInit _DoInit;

	private FDoShutdown _DoShutdown;

	private FRunFrame _RunFrame;

	private FGetConnectedControllers _GetConnectedControllers;

	private FGetActionSetHandle _GetActionSetHandle;

	private FActivateActionSet _ActivateActionSet;

	private FGetCurrentActionSet _GetCurrentActionSet;

	private FActivateActionSetLayer _ActivateActionSetLayer;

	private FDeactivateActionSetLayer _DeactivateActionSetLayer;

	private FDeactivateAllActionSetLayers _DeactivateAllActionSetLayers;

	private FGetActiveActionSetLayers _GetActiveActionSetLayers;

	private FGetDigitalActionHandle _GetDigitalActionHandle;

	private FGetDigitalActionData _GetDigitalActionData;

	private FGetDigitalActionOrigins _GetDigitalActionOrigins;

	private FGetAnalogActionHandle _GetAnalogActionHandle;

	private FGetAnalogActionData _GetAnalogActionData;

	private FGetAnalogActionOrigins _GetAnalogActionOrigins;

	private FGetGlyphForActionOrigin _GetGlyphForActionOrigin;

	private FGetStringForActionOrigin _GetStringForActionOrigin;

	private FStopAnalogActionMomentum _StopAnalogActionMomentum;

	private FGetMotionData _GetMotionData;

	private FTriggerVibration _TriggerVibration;

	private FSetLEDColor _SetLEDColor;

	private FTriggerHapticPulse _TriggerHapticPulse;

	private FTriggerRepeatedHapticPulse _TriggerRepeatedHapticPulse;

	private FShowBindingPanel _ShowBindingPanel;

	private FGetInputTypeForHandle _GetInputTypeForHandle;

	private FGetControllerForGamepadIndex _GetControllerForGamepadIndex;

	private FGetGamepadIndexForController _GetGamepadIndexForController;

	private FGetStringForXboxOrigin _GetStringForXboxOrigin;

	private FGetGlyphForXboxOrigin _GetGlyphForXboxOrigin;

	private FGetActionOriginFromXboxOrigin _GetActionOriginFromXboxOrigin;

	private FTranslateActionOrigin _TranslateActionOrigin;

	public override string InterfaceName => "SteamInput001";

	public override void InitInternals()
	{
		_DoInit = Marshal.GetDelegateForFunctionPointer<FDoInit>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(0)));
		_DoShutdown = Marshal.GetDelegateForFunctionPointer<FDoShutdown>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(8)));
		_RunFrame = Marshal.GetDelegateForFunctionPointer<FRunFrame>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(16)));
		_GetConnectedControllers = Marshal.GetDelegateForFunctionPointer<FGetConnectedControllers>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(24)));
		_GetActionSetHandle = Marshal.GetDelegateForFunctionPointer<FGetActionSetHandle>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(32)));
		_ActivateActionSet = Marshal.GetDelegateForFunctionPointer<FActivateActionSet>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(40)));
		_GetCurrentActionSet = Marshal.GetDelegateForFunctionPointer<FGetCurrentActionSet>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(48)));
		_ActivateActionSetLayer = Marshal.GetDelegateForFunctionPointer<FActivateActionSetLayer>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(56)));
		_DeactivateActionSetLayer = Marshal.GetDelegateForFunctionPointer<FDeactivateActionSetLayer>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(64)));
		_DeactivateAllActionSetLayers = Marshal.GetDelegateForFunctionPointer<FDeactivateAllActionSetLayers>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(72)));
		_GetActiveActionSetLayers = Marshal.GetDelegateForFunctionPointer<FGetActiveActionSetLayers>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(80)));
		_GetDigitalActionHandle = Marshal.GetDelegateForFunctionPointer<FGetDigitalActionHandle>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(88)));
		_GetDigitalActionData = Marshal.GetDelegateForFunctionPointer<FGetDigitalActionData>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(96)));
		_GetDigitalActionOrigins = Marshal.GetDelegateForFunctionPointer<FGetDigitalActionOrigins>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(104)));
		_GetAnalogActionHandle = Marshal.GetDelegateForFunctionPointer<FGetAnalogActionHandle>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(112)));
		_GetAnalogActionData = Marshal.GetDelegateForFunctionPointer<FGetAnalogActionData>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(120)));
		_GetAnalogActionOrigins = Marshal.GetDelegateForFunctionPointer<FGetAnalogActionOrigins>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(128)));
		_GetGlyphForActionOrigin = Marshal.GetDelegateForFunctionPointer<FGetGlyphForActionOrigin>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(136)));
		_GetStringForActionOrigin = Marshal.GetDelegateForFunctionPointer<FGetStringForActionOrigin>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(144)));
		_StopAnalogActionMomentum = Marshal.GetDelegateForFunctionPointer<FStopAnalogActionMomentum>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(152)));
		_GetMotionData = Marshal.GetDelegateForFunctionPointer<FGetMotionData>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(160)));
		_TriggerVibration = Marshal.GetDelegateForFunctionPointer<FTriggerVibration>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(168)));
		_SetLEDColor = Marshal.GetDelegateForFunctionPointer<FSetLEDColor>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(176)));
		_TriggerHapticPulse = Marshal.GetDelegateForFunctionPointer<FTriggerHapticPulse>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(184)));
		_TriggerRepeatedHapticPulse = Marshal.GetDelegateForFunctionPointer<FTriggerRepeatedHapticPulse>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(192)));
		_ShowBindingPanel = Marshal.GetDelegateForFunctionPointer<FShowBindingPanel>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(200)));
		_GetInputTypeForHandle = Marshal.GetDelegateForFunctionPointer<FGetInputTypeForHandle>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(208)));
		_GetControllerForGamepadIndex = Marshal.GetDelegateForFunctionPointer<FGetControllerForGamepadIndex>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(216)));
		_GetGamepadIndexForController = Marshal.GetDelegateForFunctionPointer<FGetGamepadIndexForController>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(224)));
		_GetStringForXboxOrigin = Marshal.GetDelegateForFunctionPointer<FGetStringForXboxOrigin>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(232)));
		_GetGlyphForXboxOrigin = Marshal.GetDelegateForFunctionPointer<FGetGlyphForXboxOrigin>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(240)));
		_GetActionOriginFromXboxOrigin = Marshal.GetDelegateForFunctionPointer<FGetActionOriginFromXboxOrigin>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(248)));
		_TranslateActionOrigin = Marshal.GetDelegateForFunctionPointer<FTranslateActionOrigin>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(256)));
	}

	internal override void Shutdown()
	{
		base.Shutdown();
		_DoInit = null;
		_DoShutdown = null;
		_RunFrame = null;
		_GetConnectedControllers = null;
		_GetActionSetHandle = null;
		_ActivateActionSet = null;
		_GetCurrentActionSet = null;
		_ActivateActionSetLayer = null;
		_DeactivateActionSetLayer = null;
		_DeactivateAllActionSetLayers = null;
		_GetActiveActionSetLayers = null;
		_GetDigitalActionHandle = null;
		_GetDigitalActionData = null;
		_GetDigitalActionOrigins = null;
		_GetAnalogActionHandle = null;
		_GetAnalogActionData = null;
		_GetAnalogActionOrigins = null;
		_GetGlyphForActionOrigin = null;
		_GetStringForActionOrigin = null;
		_StopAnalogActionMomentum = null;
		_GetMotionData = null;
		_TriggerVibration = null;
		_SetLEDColor = null;
		_TriggerHapticPulse = null;
		_TriggerRepeatedHapticPulse = null;
		_ShowBindingPanel = null;
		_GetInputTypeForHandle = null;
		_GetControllerForGamepadIndex = null;
		_GetGamepadIndexForController = null;
		_GetStringForXboxOrigin = null;
		_GetGlyphForXboxOrigin = null;
		_GetActionOriginFromXboxOrigin = null;
		_TranslateActionOrigin = null;
	}

	internal bool DoInit()
	{
		return _DoInit(Self);
	}

	internal bool DoShutdown()
	{
		return _DoShutdown(Self);
	}

	internal void RunFrame()
	{
		_RunFrame(Self);
	}

	internal int GetConnectedControllers([In][Out] InputHandle_t[] handlesOut)
	{
		return _GetConnectedControllers(Self, handlesOut);
	}

	internal InputActionSetHandle_t GetActionSetHandle([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszActionSetName)
	{
		return _GetActionSetHandle(Self, pszActionSetName);
	}

	internal void ActivateActionSet(InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle)
	{
		_ActivateActionSet(Self, inputHandle, actionSetHandle);
	}

	internal InputActionSetHandle_t GetCurrentActionSet(InputHandle_t inputHandle)
	{
		return _GetCurrentActionSet(Self, inputHandle);
	}

	internal void ActivateActionSetLayer(InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle)
	{
		_ActivateActionSetLayer(Self, inputHandle, actionSetLayerHandle);
	}

	internal void DeactivateActionSetLayer(InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle)
	{
		_DeactivateActionSetLayer(Self, inputHandle, actionSetLayerHandle);
	}

	internal void DeactivateAllActionSetLayers(InputHandle_t inputHandle)
	{
		_DeactivateAllActionSetLayers(Self, inputHandle);
	}

	internal int GetActiveActionSetLayers(InputHandle_t inputHandle, [In][Out] InputActionSetHandle_t[] handlesOut)
	{
		return _GetActiveActionSetLayers(Self, inputHandle, handlesOut);
	}

	internal InputDigitalActionHandle_t GetDigitalActionHandle([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszActionName)
	{
		return _GetDigitalActionHandle(Self, pszActionName);
	}

	internal DigitalState GetDigitalActionData(InputHandle_t inputHandle, InputDigitalActionHandle_t digitalActionHandle)
	{
		return _GetDigitalActionData(Self, inputHandle, digitalActionHandle);
	}

	internal int GetDigitalActionOrigins(InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputDigitalActionHandle_t digitalActionHandle, ref InputActionOrigin originsOut)
	{
		return _GetDigitalActionOrigins(Self, inputHandle, actionSetHandle, digitalActionHandle, ref originsOut);
	}

	internal InputAnalogActionHandle_t GetAnalogActionHandle([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszActionName)
	{
		return _GetAnalogActionHandle(Self, pszActionName);
	}

	internal AnalogState GetAnalogActionData(InputHandle_t inputHandle, InputAnalogActionHandle_t analogActionHandle)
	{
		return _GetAnalogActionData(Self, inputHandle, analogActionHandle);
	}

	internal int GetAnalogActionOrigins(InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle, InputAnalogActionHandle_t analogActionHandle, ref InputActionOrigin originsOut)
	{
		return _GetAnalogActionOrigins(Self, inputHandle, actionSetHandle, analogActionHandle, ref originsOut);
	}

	internal string GetGlyphForActionOrigin(InputActionOrigin eOrigin)
	{
		Utf8StringPointer utf8StringPointer = _GetGlyphForActionOrigin(Self, eOrigin);
		return utf8StringPointer;
	}

	internal string GetStringForActionOrigin(InputActionOrigin eOrigin)
	{
		Utf8StringPointer utf8StringPointer = _GetStringForActionOrigin(Self, eOrigin);
		return utf8StringPointer;
	}

	internal void StopAnalogActionMomentum(InputHandle_t inputHandle, InputAnalogActionHandle_t eAction)
	{
		_StopAnalogActionMomentum(Self, inputHandle, eAction);
	}

	internal MotionState GetMotionData(InputHandle_t inputHandle)
	{
		return _GetMotionData(Self, inputHandle);
	}

	internal void TriggerVibration(InputHandle_t inputHandle, ushort usLeftSpeed, ushort usRightSpeed)
	{
		_TriggerVibration(Self, inputHandle, usLeftSpeed, usRightSpeed);
	}

	internal void SetLEDColor(InputHandle_t inputHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags)
	{
		_SetLEDColor(Self, inputHandle, nColorR, nColorG, nColorB, nFlags);
	}

	internal void TriggerHapticPulse(InputHandle_t inputHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec)
	{
		_TriggerHapticPulse(Self, inputHandle, eTargetPad, usDurationMicroSec);
	}

	internal void TriggerRepeatedHapticPulse(InputHandle_t inputHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags)
	{
		_TriggerRepeatedHapticPulse(Self, inputHandle, eTargetPad, usDurationMicroSec, usOffMicroSec, unRepeat, nFlags);
	}

	internal bool ShowBindingPanel(InputHandle_t inputHandle)
	{
		return _ShowBindingPanel(Self, inputHandle);
	}

	internal InputType GetInputTypeForHandle(InputHandle_t inputHandle)
	{
		return _GetInputTypeForHandle(Self, inputHandle);
	}

	internal InputHandle_t GetControllerForGamepadIndex(int nIndex)
	{
		return _GetControllerForGamepadIndex(Self, nIndex);
	}

	internal int GetGamepadIndexForController(InputHandle_t ulinputHandle)
	{
		return _GetGamepadIndexForController(Self, ulinputHandle);
	}

	internal string GetStringForXboxOrigin(XboxOrigin eOrigin)
	{
		Utf8StringPointer utf8StringPointer = _GetStringForXboxOrigin(Self, eOrigin);
		return utf8StringPointer;
	}

	internal string GetGlyphForXboxOrigin(XboxOrigin eOrigin)
	{
		Utf8StringPointer utf8StringPointer = _GetGlyphForXboxOrigin(Self, eOrigin);
		return utf8StringPointer;
	}

	internal InputActionOrigin GetActionOriginFromXboxOrigin(InputHandle_t inputHandle, XboxOrigin eOrigin)
	{
		return _GetActionOriginFromXboxOrigin(Self, inputHandle, eOrigin);
	}

	internal InputActionOrigin TranslateActionOrigin(InputType eDestinationInputType, InputActionOrigin eSourceOrigin)
	{
		return _TranslateActionOrigin(Self, eDestinationInputType, eSourceOrigin);
	}
}
