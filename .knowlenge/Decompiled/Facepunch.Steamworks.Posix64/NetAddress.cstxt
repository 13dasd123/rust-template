using System;
using System.Net;
using System.Runtime.InteropServices;
using Steamworks.Data;

[StructLayout(LayoutKind.Explicit, Pack = 1, Size = 18)]
public struct NetAddress
{
	internal struct IPV4
	{
		internal ulong m_8zeros;

		internal ushort m_0000;

		internal ushort m_ffff;

		internal byte ip0;

		internal byte ip1;

		internal byte ip2;

		internal byte ip3;
	}

	[FieldOffset(0)]
	internal IPV4 ip;

	[FieldOffset(16)]
	internal ushort port;

	public static NetAddress AnyIp(ushort port)
	{
		NetAddress result = default(NetAddress);
		result.ip = new IPV4
		{
			m_8zeros = 0uL,
			m_0000 = 0,
			m_ffff = 0,
			ip0 = 0,
			ip1 = 0,
			ip2 = 0,
			ip3 = 0
		};
		result.port = port;
		return result;
	}

	public static NetAddress LocalHost(ushort port)
	{
		NetAddress result = default(NetAddress);
		result.ip = new IPV4
		{
			m_8zeros = 0uL,
			m_0000 = 0,
			m_ffff = 0,
			ip0 = 0,
			ip1 = 0,
			ip2 = 0,
			ip3 = 1
		};
		result.port = port;
		return result;
	}

	public static NetAddress From(string addrStr, ushort port)
	{
		return From(IPAddress.Parse(addrStr), port);
	}

	public static NetAddress From(IPAddress address, ushort port)
	{
		byte[] addressBytes = address.GetAddressBytes();
		if (addressBytes.Length == 4)
		{
			NetAddress result = default(NetAddress);
			result.ip = new IPV4
			{
				m_8zeros = 0uL,
				m_0000 = 0,
				m_ffff = ushort.MaxValue,
				ip0 = addressBytes[0],
				ip1 = addressBytes[1],
				ip2 = addressBytes[2],
				ip3 = addressBytes[3]
			};
			result.port = port;
			return result;
		}
		throw new NotImplementedException("Oops - no IPV6 support yet?");
	}
}
