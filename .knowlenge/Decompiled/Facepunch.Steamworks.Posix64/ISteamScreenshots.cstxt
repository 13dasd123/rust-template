using System;
using System.Runtime.InteropServices;
using Steamworks;
using Steamworks.Data;

internal class ISteamScreenshots : SteamInterface
{
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate ScreenshotHandle FWriteScreenshot(IntPtr self, IntPtr pubRGB, uint cubRGB, int nWidth, int nHeight);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate ScreenshotHandle FAddScreenshotToLibrary(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFilename, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchThumbnailFilename, int nWidth, int nHeight);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FTriggerScreenshot(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FHookScreenshots(IntPtr self, [MarshalAs(UnmanagedType.U1)] bool bHook);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetLocation(IntPtr self, ScreenshotHandle hScreenshot, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchLocation);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FTagUser(IntPtr self, ScreenshotHandle hScreenshot, SteamId steamID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FTagPublishedFile(IntPtr self, ScreenshotHandle hScreenshot, PublishedFileId unPublishedFileID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FIsScreenshotsHooked(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate ScreenshotHandle FAddVRScreenshotToLibrary(IntPtr self, VRScreenshotType eType, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFilename, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchVRFilename);

	private FWriteScreenshot _WriteScreenshot;

	private FAddScreenshotToLibrary _AddScreenshotToLibrary;

	private FTriggerScreenshot _TriggerScreenshot;

	private FHookScreenshots _HookScreenshots;

	private FSetLocation _SetLocation;

	private FTagUser _TagUser;

	private FTagPublishedFile _TagPublishedFile;

	private FIsScreenshotsHooked _IsScreenshotsHooked;

	private FAddVRScreenshotToLibrary _AddVRScreenshotToLibrary;

	public override string InterfaceName => "STEAMSCREENSHOTS_INTERFACE_VERSION003";

	public override void InitInternals()
	{
		_WriteScreenshot = Marshal.GetDelegateForFunctionPointer<FWriteScreenshot>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(0)));
		_AddScreenshotToLibrary = Marshal.GetDelegateForFunctionPointer<FAddScreenshotToLibrary>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(8)));
		_TriggerScreenshot = Marshal.GetDelegateForFunctionPointer<FTriggerScreenshot>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(16)));
		_HookScreenshots = Marshal.GetDelegateForFunctionPointer<FHookScreenshots>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(24)));
		_SetLocation = Marshal.GetDelegateForFunctionPointer<FSetLocation>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(32)));
		_TagUser = Marshal.GetDelegateForFunctionPointer<FTagUser>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(40)));
		_TagPublishedFile = Marshal.GetDelegateForFunctionPointer<FTagPublishedFile>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(48)));
		_IsScreenshotsHooked = Marshal.GetDelegateForFunctionPointer<FIsScreenshotsHooked>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(56)));
		_AddVRScreenshotToLibrary = Marshal.GetDelegateForFunctionPointer<FAddVRScreenshotToLibrary>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(64)));
	}

	internal override void Shutdown()
	{
		base.Shutdown();
		_WriteScreenshot = null;
		_AddScreenshotToLibrary = null;
		_TriggerScreenshot = null;
		_HookScreenshots = null;
		_SetLocation = null;
		_TagUser = null;
		_TagPublishedFile = null;
		_IsScreenshotsHooked = null;
		_AddVRScreenshotToLibrary = null;
	}

	internal ScreenshotHandle WriteScreenshot(IntPtr pubRGB, uint cubRGB, int nWidth, int nHeight)
	{
		return _WriteScreenshot(Self, pubRGB, cubRGB, nWidth, nHeight);
	}

	internal ScreenshotHandle AddScreenshotToLibrary([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFilename, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchThumbnailFilename, int nWidth, int nHeight)
	{
		return _AddScreenshotToLibrary(Self, pchFilename, pchThumbnailFilename, nWidth, nHeight);
	}

	internal void TriggerScreenshot()
	{
		_TriggerScreenshot(Self);
	}

	internal void HookScreenshots([MarshalAs(UnmanagedType.U1)] bool bHook)
	{
		_HookScreenshots(Self, bHook);
	}

	internal bool SetLocation(ScreenshotHandle hScreenshot, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchLocation)
	{
		return _SetLocation(Self, hScreenshot, pchLocation);
	}

	internal bool TagUser(ScreenshotHandle hScreenshot, SteamId steamID)
	{
		return _TagUser(Self, hScreenshot, steamID);
	}

	internal bool TagPublishedFile(ScreenshotHandle hScreenshot, PublishedFileId unPublishedFileID)
	{
		return _TagPublishedFile(Self, hScreenshot, unPublishedFileID);
	}

	internal bool IsScreenshotsHooked()
	{
		return _IsScreenshotsHooked(Self);
	}

	internal ScreenshotHandle AddVRScreenshotToLibrary(VRScreenshotType eType, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchFilename, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchVRFilename)
	{
		return _AddVRScreenshotToLibrary(Self, eType, pchFilename, pchVRFilename);
	}
}
