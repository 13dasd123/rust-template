using System;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using Steamworks;
using Steamworks.Data;

internal class ISteamApps : SteamInterface
{
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FBIsSubscribed(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FBIsLowViolence(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FBIsCybercafe(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FBIsVACBanned(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Utf8StringPointer FGetCurrentGameLanguage(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Utf8StringPointer FGetAvailableGameLanguages(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FBIsSubscribedApp(IntPtr self, AppId appID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FBIsDlcInstalled(IntPtr self, AppId appID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate uint FGetEarliestPurchaseUnixTime(IntPtr self, AppId nAppID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FBIsSubscribedFromFreeWeekend(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetDLCCount(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FBGetDLCDataByIndex(IntPtr self, int iDLC, ref AppId pAppID, [MarshalAs(UnmanagedType.U1)] ref bool pbAvailable, IntPtr pchName, int cchNameBufferSize);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FInstallDLC(IntPtr self, AppId nAppID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FUninstallDLC(IntPtr self, AppId nAppID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FRequestAppProofOfPurchaseKey(IntPtr self, AppId nAppID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetCurrentBetaName(IntPtr self, IntPtr pchName, int cchNameBufferSize);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FMarkContentCorrupt(IntPtr self, [MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate uint FGetInstalledDepots(IntPtr self, AppId appID, [In][Out] DepotId_t[] pvecDepots, uint cMaxDepots);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate uint FGetAppInstallDir(IntPtr self, AppId appID, IntPtr pchFolder, uint cchFolderBufferSize);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FBIsAppInstalled(IntPtr self, AppId appID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamId FGetAppOwner(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate Utf8StringPointer FGetLaunchQueryParam(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKey);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetDlcDownloadProgress(IntPtr self, AppId nAppID, ref ulong punBytesDownloaded, ref ulong punBytesTotal);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetAppBuildId(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FRequestAllProofOfPurchaseKeys(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate SteamAPICall_t FGetFileDetails(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszFileName);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetLaunchCommandLine(IntPtr self, IntPtr pszCommandLine, int cubCommandLine);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FBIsSubscribedFromFamilySharing(IntPtr self);

	private FBIsSubscribed _BIsSubscribed;

	private FBIsLowViolence _BIsLowViolence;

	private FBIsCybercafe _BIsCybercafe;

	private FBIsVACBanned _BIsVACBanned;

	private FGetCurrentGameLanguage _GetCurrentGameLanguage;

	private FGetAvailableGameLanguages _GetAvailableGameLanguages;

	private FBIsSubscribedApp _BIsSubscribedApp;

	private FBIsDlcInstalled _BIsDlcInstalled;

	private FGetEarliestPurchaseUnixTime _GetEarliestPurchaseUnixTime;

	private FBIsSubscribedFromFreeWeekend _BIsSubscribedFromFreeWeekend;

	private FGetDLCCount _GetDLCCount;

	private FBGetDLCDataByIndex _BGetDLCDataByIndex;

	private FInstallDLC _InstallDLC;

	private FUninstallDLC _UninstallDLC;

	private FRequestAppProofOfPurchaseKey _RequestAppProofOfPurchaseKey;

	private FGetCurrentBetaName _GetCurrentBetaName;

	private FMarkContentCorrupt _MarkContentCorrupt;

	private FGetInstalledDepots _GetInstalledDepots;

	private FGetAppInstallDir _GetAppInstallDir;

	private FBIsAppInstalled _BIsAppInstalled;

	private FGetAppOwner _GetAppOwner;

	private FGetLaunchQueryParam _GetLaunchQueryParam;

	private FGetDlcDownloadProgress _GetDlcDownloadProgress;

	private FGetAppBuildId _GetAppBuildId;

	private FRequestAllProofOfPurchaseKeys _RequestAllProofOfPurchaseKeys;

	private FGetFileDetails _GetFileDetails;

	private FGetLaunchCommandLine _GetLaunchCommandLine;

	private FBIsSubscribedFromFamilySharing _BIsSubscribedFromFamilySharing;

	public override string InterfaceName => "STEAMAPPS_INTERFACE_VERSION008";

	public override void InitInternals()
	{
		_BIsSubscribed = Marshal.GetDelegateForFunctionPointer<FBIsSubscribed>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(0)));
		_BIsLowViolence = Marshal.GetDelegateForFunctionPointer<FBIsLowViolence>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(8)));
		_BIsCybercafe = Marshal.GetDelegateForFunctionPointer<FBIsCybercafe>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(16)));
		_BIsVACBanned = Marshal.GetDelegateForFunctionPointer<FBIsVACBanned>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(24)));
		_GetCurrentGameLanguage = Marshal.GetDelegateForFunctionPointer<FGetCurrentGameLanguage>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(32)));
		_GetAvailableGameLanguages = Marshal.GetDelegateForFunctionPointer<FGetAvailableGameLanguages>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(40)));
		_BIsSubscribedApp = Marshal.GetDelegateForFunctionPointer<FBIsSubscribedApp>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(48)));
		_BIsDlcInstalled = Marshal.GetDelegateForFunctionPointer<FBIsDlcInstalled>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(56)));
		_GetEarliestPurchaseUnixTime = Marshal.GetDelegateForFunctionPointer<FGetEarliestPurchaseUnixTime>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(64)));
		_BIsSubscribedFromFreeWeekend = Marshal.GetDelegateForFunctionPointer<FBIsSubscribedFromFreeWeekend>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(72)));
		_GetDLCCount = Marshal.GetDelegateForFunctionPointer<FGetDLCCount>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(80)));
		_BGetDLCDataByIndex = Marshal.GetDelegateForFunctionPointer<FBGetDLCDataByIndex>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(88)));
		_InstallDLC = Marshal.GetDelegateForFunctionPointer<FInstallDLC>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(96)));
		_UninstallDLC = Marshal.GetDelegateForFunctionPointer<FUninstallDLC>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(104)));
		_RequestAppProofOfPurchaseKey = Marshal.GetDelegateForFunctionPointer<FRequestAppProofOfPurchaseKey>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(112)));
		_GetCurrentBetaName = Marshal.GetDelegateForFunctionPointer<FGetCurrentBetaName>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(120)));
		_MarkContentCorrupt = Marshal.GetDelegateForFunctionPointer<FMarkContentCorrupt>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(128)));
		_GetInstalledDepots = Marshal.GetDelegateForFunctionPointer<FGetInstalledDepots>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(136)));
		_GetAppInstallDir = Marshal.GetDelegateForFunctionPointer<FGetAppInstallDir>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(144)));
		_BIsAppInstalled = Marshal.GetDelegateForFunctionPointer<FBIsAppInstalled>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(152)));
		_GetAppOwner = Marshal.GetDelegateForFunctionPointer<FGetAppOwner>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(160)));
		_GetLaunchQueryParam = Marshal.GetDelegateForFunctionPointer<FGetLaunchQueryParam>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(168)));
		_GetDlcDownloadProgress = Marshal.GetDelegateForFunctionPointer<FGetDlcDownloadProgress>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(176)));
		_GetAppBuildId = Marshal.GetDelegateForFunctionPointer<FGetAppBuildId>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(184)));
		_RequestAllProofOfPurchaseKeys = Marshal.GetDelegateForFunctionPointer<FRequestAllProofOfPurchaseKeys>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(192)));
		_GetFileDetails = Marshal.GetDelegateForFunctionPointer<FGetFileDetails>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(200)));
		_GetLaunchCommandLine = Marshal.GetDelegateForFunctionPointer<FGetLaunchCommandLine>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(208)));
		_BIsSubscribedFromFamilySharing = Marshal.GetDelegateForFunctionPointer<FBIsSubscribedFromFamilySharing>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(216)));
	}

	internal override void Shutdown()
	{
		base.Shutdown();
		_BIsSubscribed = null;
		_BIsLowViolence = null;
		_BIsCybercafe = null;
		_BIsVACBanned = null;
		_GetCurrentGameLanguage = null;
		_GetAvailableGameLanguages = null;
		_BIsSubscribedApp = null;
		_BIsDlcInstalled = null;
		_GetEarliestPurchaseUnixTime = null;
		_BIsSubscribedFromFreeWeekend = null;
		_GetDLCCount = null;
		_BGetDLCDataByIndex = null;
		_InstallDLC = null;
		_UninstallDLC = null;
		_RequestAppProofOfPurchaseKey = null;
		_GetCurrentBetaName = null;
		_MarkContentCorrupt = null;
		_GetInstalledDepots = null;
		_GetAppInstallDir = null;
		_BIsAppInstalled = null;
		_GetAppOwner = null;
		_GetLaunchQueryParam = null;
		_GetDlcDownloadProgress = null;
		_GetAppBuildId = null;
		_RequestAllProofOfPurchaseKeys = null;
		_GetFileDetails = null;
		_GetLaunchCommandLine = null;
		_BIsSubscribedFromFamilySharing = null;
	}

	internal bool BIsSubscribed()
	{
		return _BIsSubscribed(Self);
	}

	internal bool BIsLowViolence()
	{
		return _BIsLowViolence(Self);
	}

	internal bool BIsCybercafe()
	{
		return _BIsCybercafe(Self);
	}

	internal bool BIsVACBanned()
	{
		return _BIsVACBanned(Self);
	}

	internal string GetCurrentGameLanguage()
	{
		Utf8StringPointer utf8StringPointer = _GetCurrentGameLanguage(Self);
		return utf8StringPointer;
	}

	internal string GetAvailableGameLanguages()
	{
		Utf8StringPointer utf8StringPointer = _GetAvailableGameLanguages(Self);
		return utf8StringPointer;
	}

	internal bool BIsSubscribedApp(AppId appID)
	{
		return _BIsSubscribedApp(Self, appID);
	}

	internal bool BIsDlcInstalled(AppId appID)
	{
		return _BIsDlcInstalled(Self, appID);
	}

	internal uint GetEarliestPurchaseUnixTime(AppId nAppID)
	{
		return _GetEarliestPurchaseUnixTime(Self, nAppID);
	}

	internal bool BIsSubscribedFromFreeWeekend()
	{
		return _BIsSubscribedFromFreeWeekend(Self);
	}

	internal int GetDLCCount()
	{
		return _GetDLCCount(Self);
	}

	internal bool BGetDLCDataByIndex(int iDLC, ref AppId pAppID, [MarshalAs(UnmanagedType.U1)] ref bool pbAvailable, out string pchName)
	{
		IntPtr intPtr = Helpers.TakeMemory();
		bool result = _BGetDLCDataByIndex(Self, iDLC, ref pAppID, ref pbAvailable, intPtr, 32768);
		pchName = Helpers.MemoryToString(intPtr);
		return result;
	}

	internal void InstallDLC(AppId nAppID)
	{
		_InstallDLC(Self, nAppID);
	}

	internal void UninstallDLC(AppId nAppID)
	{
		_UninstallDLC(Self, nAppID);
	}

	internal void RequestAppProofOfPurchaseKey(AppId nAppID)
	{
		_RequestAppProofOfPurchaseKey(Self, nAppID);
	}

	internal bool GetCurrentBetaName(out string pchName)
	{
		IntPtr intPtr = Helpers.TakeMemory();
		bool result = _GetCurrentBetaName(Self, intPtr, 32768);
		pchName = Helpers.MemoryToString(intPtr);
		return result;
	}

	internal bool MarkContentCorrupt([MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly)
	{
		return _MarkContentCorrupt(Self, bMissingFilesOnly);
	}

	internal uint GetInstalledDepots(AppId appID, [In][Out] DepotId_t[] pvecDepots, uint cMaxDepots)
	{
		return _GetInstalledDepots(Self, appID, pvecDepots, cMaxDepots);
	}

	internal uint GetAppInstallDir(AppId appID, out string pchFolder)
	{
		IntPtr intPtr = Helpers.TakeMemory();
		uint result = _GetAppInstallDir(Self, appID, intPtr, 32768u);
		pchFolder = Helpers.MemoryToString(intPtr);
		return result;
	}

	internal bool BIsAppInstalled(AppId appID)
	{
		return _BIsAppInstalled(Self, appID);
	}

	internal SteamId GetAppOwner()
	{
		return _GetAppOwner(Self);
	}

	internal string GetLaunchQueryParam([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pchKey)
	{
		Utf8StringPointer utf8StringPointer = _GetLaunchQueryParam(Self, pchKey);
		return utf8StringPointer;
	}

	internal bool GetDlcDownloadProgress(AppId nAppID, ref ulong punBytesDownloaded, ref ulong punBytesTotal)
	{
		return _GetDlcDownloadProgress(Self, nAppID, ref punBytesDownloaded, ref punBytesTotal);
	}

	internal int GetAppBuildId()
	{
		return _GetAppBuildId(Self);
	}

	internal void RequestAllProofOfPurchaseKeys()
	{
		_RequestAllProofOfPurchaseKeys(Self);
	}

	internal async Task<FileDetailsResult_t?> GetFileDetails([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszFileName)
	{
		SteamAPICall_t returnValue = _GetFileDetails(Self, pszFileName);
		return await FileDetailsResult_t.GetResultAsync(returnValue);
	}

	internal int GetLaunchCommandLine(out string pszCommandLine)
	{
		IntPtr intPtr = Helpers.TakeMemory();
		int result = _GetLaunchCommandLine(Self, intPtr, 32768);
		pszCommandLine = Helpers.MemoryToString(intPtr);
		return result;
	}

	internal bool BIsSubscribedFromFamilySharing()
	{
		return _BIsSubscribedFromFamilySharing(Self);
	}
}
