using System.Threading.Tasks;
using Steamworks;
using Steamworks.Data;

public static class SteamServerStats
{
	private static ISteamGameServerStats _internal;

	internal static ISteamGameServerStats Internal
	{
		get
		{
			if (_internal == null)
			{
				_internal = new ISteamGameServerStats();
				_internal.InitServer();
			}
			return _internal;
		}
	}

	internal static void Shutdown()
	{
		_internal = null;
	}

	public static async Task<Result> RequestUserStats(SteamId steamid)
	{
		GSStatsReceived_t? r = await Internal.RequestUserStats(steamid);
		if (!r.HasValue)
		{
			return Result.Fail;
		}
		return r.Value.Result;
	}

	public static bool SetInt(SteamId steamid, string name, int stat)
	{
		return Internal.SetUserStat1(steamid, name, stat);
	}

	public static bool SetFloat(SteamId steamid, string name, float stat)
	{
		return Internal.SetUserStat2(steamid, name, stat);
	}

	public static int GetInt(SteamId steamid, string name, int defaultValue = 0)
	{
		int pData = defaultValue;
		if (!Internal.GetUserStat1(steamid, name, ref pData))
		{
			return defaultValue;
		}
		return pData;
	}

	public static float GetFloat(SteamId steamid, string name, float defaultValue = 0f)
	{
		float pData = defaultValue;
		if (!Internal.GetUserStat2(steamid, name, ref pData))
		{
			return defaultValue;
		}
		return pData;
	}

	public static bool SetAchievement(SteamId steamid, string name)
	{
		return Internal.SetUserAchievement(steamid, name);
	}

	public static bool ClearAchievement(SteamId steamid, string name)
	{
		return Internal.ClearUserAchievement(steamid, name);
	}

	public static bool GetAchievement(SteamId steamid, string name)
	{
		bool pbAchieved = false;
		if (!Internal.GetUserAchievement(steamid, name, ref pbAchieved))
		{
			return false;
		}
		return pbAchieved;
	}

	public static async Task<Result> StoreUserStats(SteamId steamid)
	{
		GSStatsStored_t? r = await Internal.StoreUserStats(steamid);
		if (!r.HasValue)
		{
			return Result.Fail;
		}
		return r.Value.Result;
	}
}
