using System.Linq;
using System.Threading.Tasks;
using Steamworks;
using Steamworks.Data;
using Steamworks.Ugc;

public static class SteamUGC
{
	private static ISteamUGC _internal;

	internal static ISteamUGC Internal
	{
		get
		{
			if (_internal == null)
			{
				_internal = new ISteamUGC();
				_internal.Init();
			}
			return _internal;
		}
	}

	internal static void Shutdown()
	{
		_internal = null;
	}

	public static async Task<bool> DeleteFileAsync(PublishedFileId fileId)
	{
		DeleteItemResult_t? r = await Internal.DeleteItem(fileId);
		return r.HasValue && r.GetValueOrDefault().Result == Result.OK;
	}

	public static bool Download(PublishedFileId fileId, bool highPriority = false)
	{
		return Internal.DownloadItem(fileId, highPriority);
	}

	public static async Task<Item?> QueryFileAsync(PublishedFileId fileId)
	{
		ResultPage? result = await Query.All.WithFileId(fileId).GetPageAsync(1);
		if (!result.HasValue || result.Value.ResultCount != 1)
		{
			return null;
		}
		Item item = result.Value.Entries.First();
		result.Value.Dispose();
		return item;
	}
}
