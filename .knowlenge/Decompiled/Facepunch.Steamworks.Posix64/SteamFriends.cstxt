using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Steamworks;
using Steamworks.Data;

public static class SteamFriends
{
	private static ISteamFriends _internal;

	private static Dictionary<string, string> richPresence;

	private static bool _listenForFriendsMessages;

	internal static ISteamFriends Internal
	{
		get
		{
			if (_internal == null)
			{
				_internal = new ISteamFriends();
				_internal.Init();
				richPresence = new Dictionary<string, string>();
			}
			return _internal;
		}
	}

	public static bool ListenForFriendsMessages
	{
		get
		{
			return _listenForFriendsMessages;
		}
		set
		{
			_listenForFriendsMessages = value;
			Internal.SetListenForFriendsMessages(value);
		}
	}

	public static event Action<Friend, string, string> OnChatMessage;

	public static event Action<Friend> OnPersonaStateChange;

	public static event Action<Friend, string> OnGameRichPresenceJoinRequested;

	public static event Action OnGameOverlayActivated;

	public static event Action<string, string> OnGameServerChangeRequested;

	public static event Action<Lobby, SteamId> OnGameLobbyJoinRequested;

	public static event Action<Friend> OnFriendRichPresenceUpdate;

	internal static void Shutdown()
	{
		_internal = null;
	}

	internal static void InstallEvents()
	{
		FriendStateChange_t.Install(delegate(FriendStateChange_t x)
		{
			SteamFriends.OnPersonaStateChange?.Invoke(new Friend(x.SteamID));
		});
		GameRichPresenceJoinRequested_t.Install(delegate(GameRichPresenceJoinRequested_t x)
		{
			SteamFriends.OnGameRichPresenceJoinRequested?.Invoke(new Friend(x.SteamIDFriend), x.ConnectUTF8());
		});
		GameConnectedFriendChatMsg_t.Install(OnFriendChatMessage);
		GameOverlayActivated_t.Install(delegate
		{
			SteamFriends.OnGameOverlayActivated?.Invoke();
		});
		GameServerChangeRequested_t.Install(delegate(GameServerChangeRequested_t x)
		{
			SteamFriends.OnGameServerChangeRequested?.Invoke(x.ServerUTF8(), x.PasswordUTF8());
		});
		GameLobbyJoinRequested_t.Install(delegate(GameLobbyJoinRequested_t x)
		{
			SteamFriends.OnGameLobbyJoinRequested?.Invoke(new Lobby(x.SteamIDLobby), x.SteamIDFriend);
		});
		FriendRichPresenceUpdate_t.Install(delegate(FriendRichPresenceUpdate_t x)
		{
			SteamFriends.OnFriendRichPresenceUpdate?.Invoke(new Friend(x.SteamIDFriend));
		});
	}

	private unsafe static void OnFriendChatMessage(GameConnectedFriendChatMsg_t data)
	{
		if (SteamFriends.OnChatMessage == null)
		{
			return;
		}
		Friend arg = new Friend(data.SteamIDUser);
		byte[] array = Helpers.TakeBuffer(32768);
		ChatEntryType peChatEntryType = ChatEntryType.ChatMsg;
		fixed (byte* ptr = array)
		{
			int friendMessage = Internal.GetFriendMessage(data.SteamIDUser, data.MessageID, (IntPtr)ptr, array.Length, ref peChatEntryType);
			if (friendMessage == 0 && peChatEntryType == ChatEntryType.Invalid)
			{
				return;
			}
			string arg2 = peChatEntryType.ToString();
			string @string = Encoding.UTF8.GetString(array, 0, friendMessage);
			SteamFriends.OnChatMessage(arg, arg2, @string);
		}
	}

	public static IEnumerable<Friend> GetFriends()
	{
		for (int i = 0; i < Internal.GetFriendCount(4); i++)
		{
			yield return new Friend(Internal.GetFriendByIndex(i, 4));
		}
	}

	public static IEnumerable<Friend> GetBlocked()
	{
		for (int i = 0; i < Internal.GetFriendCount(1); i++)
		{
			yield return new Friend(Internal.GetFriendByIndex(i, 1));
		}
	}

	public static IEnumerable<Friend> GetPlayedWith()
	{
		for (int i = 0; i < Internal.GetCoplayFriendCount(); i++)
		{
			yield return new Friend(Internal.GetCoplayFriend(i));
		}
	}

	public static void OpenOverlay(string type)
	{
		Internal.ActivateGameOverlay(type);
	}

	public static void OpenUserOverlay(SteamId id, string type)
	{
		Internal.ActivateGameOverlayToUser(type, id);
	}

	public static void OpenStoreOverlay(AppId id)
	{
		Internal.ActivateGameOverlayToStore(id.Value, OverlayToStoreFlag.None);
	}

	public static void OpenWebOverlay(string url, bool modal = false)
	{
		Internal.ActivateGameOverlayToWebPage(url, modal ? ActivateGameOverlayToWebPageMode.Modal : ActivateGameOverlayToWebPageMode.Default);
	}

	public static void OpenGameInviteOverlay(SteamId lobby)
	{
		Internal.ActivateGameOverlayInviteDialog(lobby);
	}

	public static void SetPlayedWith(SteamId steamid)
	{
		Internal.SetPlayedWith(steamid);
	}

	public static bool RequestUserInformation(SteamId steamid, bool nameonly = true)
	{
		return Internal.RequestUserInformation(steamid, nameonly);
	}

	internal static async Task CacheUserInformationAsync(SteamId steamid, bool nameonly)
	{
		if (RequestUserInformation(steamid, nameonly))
		{
			await Task.Delay(100);
			while (RequestUserInformation(steamid, nameonly))
			{
				await Task.Delay(50);
			}
			await Task.Delay(500);
		}
	}

	public static async Task<Image?> GetSmallAvatarAsync(SteamId steamid)
	{
		await CacheUserInformationAsync(steamid, nameonly: false);
		return SteamUtils.GetImage(Internal.GetSmallFriendAvatar(steamid));
	}

	public static async Task<Image?> GetMediumAvatarAsync(SteamId steamid)
	{
		await CacheUserInformationAsync(steamid, nameonly: false);
		return SteamUtils.GetImage(Internal.GetMediumFriendAvatar(steamid));
	}

	public static async Task<Image?> GetLargeAvatarAsync(SteamId steamid)
	{
		await CacheUserInformationAsync(steamid, nameonly: false);
		int imageid;
		for (imageid = Internal.GetLargeFriendAvatar(steamid); imageid == -1; imageid = Internal.GetLargeFriendAvatar(steamid))
		{
			await Task.Delay(50);
		}
		return SteamUtils.GetImage(imageid);
	}

	public static string GetRichPresence(string key)
	{
		if (richPresence.TryGetValue(key, out var value))
		{
			return value;
		}
		return null;
	}

	public static bool SetRichPresence(string key, string value)
	{
		richPresence[key] = value;
		return Internal.SetRichPresence(key, value);
	}

	public static void ClearRichPresence()
	{
		richPresence.Clear();
		Internal.ClearRichPresence();
	}
}
