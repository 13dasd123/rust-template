using System;
using System.Runtime.InteropServices;
using Steamworks;
using Steamworks.Data;

internal static class SteamAPI
{
	internal static class Native
	{
		[DllImport("libsteam_api", CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		public static extern bool SteamAPI_Init();

		[DllImport("libsteam_api", CallingConvention = CallingConvention.Cdecl)]
		public static extern void SteamAPI_RunCallbacks();

		[DllImport("libsteam_api", CallingConvention = CallingConvention.Cdecl)]
		public static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int callback);

		[DllImport("libsteam_api", CallingConvention = CallingConvention.Cdecl)]
		public static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

		[DllImport("libsteam_api", CallingConvention = CallingConvention.Cdecl)]
		public static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, SteamAPICall_t callback);

		[DllImport("libsteam_api", CallingConvention = CallingConvention.Cdecl)]
		public static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, SteamAPICall_t callback);

		[DllImport("libsteam_api", CallingConvention = CallingConvention.Cdecl)]
		public static extern void SteamAPI_Shutdown();

		[DllImport("libsteam_api", CallingConvention = CallingConvention.Cdecl)]
		public static extern HSteamUser SteamAPI_GetHSteamUser();

		[DllImport("libsteam_api", CallingConvention = CallingConvention.Cdecl)]
		public static extern HSteamPipe SteamAPI_GetHSteamPipe();

		[DllImport("libsteam_api", CallingConvention = CallingConvention.Cdecl)]
		[return: MarshalAs(UnmanagedType.I1)]
		public static extern bool SteamAPI_RestartAppIfNecessary(uint unOwnAppID);
	}

	internal static bool Init()
	{
		return Native.SteamAPI_Init();
	}

	internal static void RunCallbacks()
	{
		Native.SteamAPI_RunCallbacks();
	}

	internal static void RegisterCallback(IntPtr pCallback, int callback)
	{
		Native.SteamAPI_RegisterCallback(pCallback, callback);
	}

	internal static void UnregisterCallback(IntPtr pCallback)
	{
		Native.SteamAPI_UnregisterCallback(pCallback);
	}

	internal static void RegisterCallResult(IntPtr pCallback, SteamAPICall_t callback)
	{
		Native.SteamAPI_RegisterCallResult(pCallback, callback);
	}

	internal static void UnregisterCallResult(IntPtr pCallback, SteamAPICall_t callback)
	{
		Native.SteamAPI_UnregisterCallResult(pCallback, callback);
	}

	internal static void Shutdown()
	{
		Native.SteamAPI_Shutdown();
	}

	internal static HSteamUser GetHSteamUser()
	{
		return Native.SteamAPI_GetHSteamUser();
	}

	internal static HSteamPipe GetHSteamPipe()
	{
		return Native.SteamAPI_GetHSteamPipe();
	}

	internal static bool RestartAppIfNecessary(uint unOwnAppID)
	{
		return Native.SteamAPI_RestartAppIfNecessary(unOwnAppID);
	}
}
