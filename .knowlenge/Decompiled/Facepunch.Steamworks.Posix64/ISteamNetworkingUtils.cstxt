using System;
using System.Runtime.InteropServices;
using Steamworks;
using Steamworks.Data;

internal class ISteamNetworkingUtils : SteamInterface
{
	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate float FGetLocalPingLocation(IntPtr self, ref PingLocation result);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FEstimatePingTimeBetweenTwoLocations(IntPtr self, ref PingLocation location1, ref PingLocation location2);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FEstimatePingTimeFromLocalHost(IntPtr self, ref PingLocation remoteLocation);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FConvertPingLocationToString(IntPtr self, ref PingLocation location, IntPtr pszBuf, int cchBufSize);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FParsePingLocationString(IntPtr self, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszString, ref PingLocation result);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FCheckPingDataUpToDate(IntPtr self, float flMaxAgeSeconds);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FIsPingMeasurementInProgress(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetPingToDataCenter(IntPtr self, SteamNetworkingPOPID popID, ref SteamNetworkingPOPID pViaRelayPoP);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetDirectPingToPOP(IntPtr self, SteamNetworkingPOPID popID);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetPOPCount(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate int FGetPOPList(IntPtr self, ref SteamNetworkingPOPID list, int nListSz);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate long FGetLocalTimestamp(IntPtr self);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate void FSetDebugOutputFunction(IntPtr self, DebugOutputType eDetailLevel, FSteamNetworkingSocketsDebugOutput pfnFunc);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FSetConfigValue(IntPtr self, NetConfig eValue, NetScope eScopeType, long scopeObj, NetConfigType eDataType, IntPtr pArg);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate NetConfigResult FGetConfigValue(IntPtr self, NetConfig eValue, NetScope eScopeType, long scopeObj, ref NetConfigType pOutDataType, IntPtr pResult, ref ulong cbResult);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	[return: MarshalAs(UnmanagedType.I1)]
	private delegate bool FGetConfigValueInfo(IntPtr self, NetConfig eValue, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pOutName, ref NetConfigType pOutDataType, [In][Out] NetScope[] pOutScope, [In][Out] NetConfig[] pOutNextValue);

	[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
	private delegate NetConfig FGetFirstConfigValue(IntPtr self);

	private FGetLocalPingLocation _GetLocalPingLocation;

	private FEstimatePingTimeBetweenTwoLocations _EstimatePingTimeBetweenTwoLocations;

	private FEstimatePingTimeFromLocalHost _EstimatePingTimeFromLocalHost;

	private FConvertPingLocationToString _ConvertPingLocationToString;

	private FParsePingLocationString _ParsePingLocationString;

	private FCheckPingDataUpToDate _CheckPingDataUpToDate;

	private FIsPingMeasurementInProgress _IsPingMeasurementInProgress;

	private FGetPingToDataCenter _GetPingToDataCenter;

	private FGetDirectPingToPOP _GetDirectPingToPOP;

	private FGetPOPCount _GetPOPCount;

	private FGetPOPList _GetPOPList;

	private FGetLocalTimestamp _GetLocalTimestamp;

	private FSetDebugOutputFunction _SetDebugOutputFunction;

	private FSetConfigValue _SetConfigValue;

	private FGetConfigValue _GetConfigValue;

	private FGetConfigValueInfo _GetConfigValueInfo;

	private FGetFirstConfigValue _GetFirstConfigValue;

	public override string InterfaceName => "SteamNetworkingUtils001";

	public override void InitInternals()
	{
		_GetLocalPingLocation = Marshal.GetDelegateForFunctionPointer<FGetLocalPingLocation>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(0)));
		_EstimatePingTimeBetweenTwoLocations = Marshal.GetDelegateForFunctionPointer<FEstimatePingTimeBetweenTwoLocations>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(8)));
		_EstimatePingTimeFromLocalHost = Marshal.GetDelegateForFunctionPointer<FEstimatePingTimeFromLocalHost>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(16)));
		_ConvertPingLocationToString = Marshal.GetDelegateForFunctionPointer<FConvertPingLocationToString>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(24)));
		_ParsePingLocationString = Marshal.GetDelegateForFunctionPointer<FParsePingLocationString>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(32)));
		_CheckPingDataUpToDate = Marshal.GetDelegateForFunctionPointer<FCheckPingDataUpToDate>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(40)));
		_IsPingMeasurementInProgress = Marshal.GetDelegateForFunctionPointer<FIsPingMeasurementInProgress>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(48)));
		_GetPingToDataCenter = Marshal.GetDelegateForFunctionPointer<FGetPingToDataCenter>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(56)));
		_GetDirectPingToPOP = Marshal.GetDelegateForFunctionPointer<FGetDirectPingToPOP>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(64)));
		_GetPOPCount = Marshal.GetDelegateForFunctionPointer<FGetPOPCount>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(72)));
		_GetPOPList = Marshal.GetDelegateForFunctionPointer<FGetPOPList>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(80)));
		_GetLocalTimestamp = Marshal.GetDelegateForFunctionPointer<FGetLocalTimestamp>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(88)));
		_SetDebugOutputFunction = Marshal.GetDelegateForFunctionPointer<FSetDebugOutputFunction>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(96)));
		_SetConfigValue = Marshal.GetDelegateForFunctionPointer<FSetConfigValue>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(104)));
		_GetConfigValue = Marshal.GetDelegateForFunctionPointer<FGetConfigValue>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(112)));
		_GetConfigValueInfo = Marshal.GetDelegateForFunctionPointer<FGetConfigValueInfo>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(120)));
		_GetFirstConfigValue = Marshal.GetDelegateForFunctionPointer<FGetFirstConfigValue>(Marshal.ReadIntPtr(VTable, Platform.MemoryOffset(128)));
	}

	internal override void Shutdown()
	{
		base.Shutdown();
		_GetLocalPingLocation = null;
		_EstimatePingTimeBetweenTwoLocations = null;
		_EstimatePingTimeFromLocalHost = null;
		_ConvertPingLocationToString = null;
		_ParsePingLocationString = null;
		_CheckPingDataUpToDate = null;
		_IsPingMeasurementInProgress = null;
		_GetPingToDataCenter = null;
		_GetDirectPingToPOP = null;
		_GetPOPCount = null;
		_GetPOPList = null;
		_GetLocalTimestamp = null;
		_SetDebugOutputFunction = null;
		_SetConfigValue = null;
		_GetConfigValue = null;
		_GetConfigValueInfo = null;
		_GetFirstConfigValue = null;
	}

	internal float GetLocalPingLocation(ref PingLocation result)
	{
		return _GetLocalPingLocation(Self, ref result);
	}

	internal int EstimatePingTimeBetweenTwoLocations(ref PingLocation location1, ref PingLocation location2)
	{
		return _EstimatePingTimeBetweenTwoLocations(Self, ref location1, ref location2);
	}

	internal int EstimatePingTimeFromLocalHost(ref PingLocation remoteLocation)
	{
		return _EstimatePingTimeFromLocalHost(Self, ref remoteLocation);
	}

	internal void ConvertPingLocationToString(ref PingLocation location, out string pszBuf)
	{
		IntPtr intPtr = Helpers.TakeMemory();
		_ConvertPingLocationToString(Self, ref location, intPtr, 32768);
		pszBuf = Helpers.MemoryToString(intPtr);
	}

	internal bool ParsePingLocationString([MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pszString, ref PingLocation result)
	{
		return _ParsePingLocationString(Self, pszString, ref result);
	}

	internal bool CheckPingDataUpToDate(float flMaxAgeSeconds)
	{
		return _CheckPingDataUpToDate(Self, flMaxAgeSeconds);
	}

	internal bool IsPingMeasurementInProgress()
	{
		return _IsPingMeasurementInProgress(Self);
	}

	internal int GetPingToDataCenter(SteamNetworkingPOPID popID, ref SteamNetworkingPOPID pViaRelayPoP)
	{
		return _GetPingToDataCenter(Self, popID, ref pViaRelayPoP);
	}

	internal int GetDirectPingToPOP(SteamNetworkingPOPID popID)
	{
		return _GetDirectPingToPOP(Self, popID);
	}

	internal int GetPOPCount()
	{
		return _GetPOPCount(Self);
	}

	internal int GetPOPList(ref SteamNetworkingPOPID list, int nListSz)
	{
		return _GetPOPList(Self, ref list, nListSz);
	}

	internal long GetLocalTimestamp()
	{
		return _GetLocalTimestamp(Self);
	}

	internal void SetDebugOutputFunction(DebugOutputType eDetailLevel, FSteamNetworkingSocketsDebugOutput pfnFunc)
	{
		_SetDebugOutputFunction(Self, eDetailLevel, pfnFunc);
	}

	internal bool SetConfigValue(NetConfig eValue, NetScope eScopeType, long scopeObj, NetConfigType eDataType, IntPtr pArg)
	{
		return _SetConfigValue(Self, eValue, eScopeType, scopeObj, eDataType, pArg);
	}

	internal NetConfigResult GetConfigValue(NetConfig eValue, NetScope eScopeType, long scopeObj, ref NetConfigType pOutDataType, IntPtr pResult, ref ulong cbResult)
	{
		return _GetConfigValue(Self, eValue, eScopeType, scopeObj, ref pOutDataType, pResult, ref cbResult);
	}

	internal bool GetConfigValueInfo(NetConfig eValue, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalType = "Steamworks.Utf8StringToNative")] string pOutName, ref NetConfigType pOutDataType, [In][Out] NetScope[] pOutScope, [In][Out] NetConfig[] pOutNextValue)
	{
		return _GetConfigValueInfo(Self, eValue, pOutName, ref pOutDataType, pOutScope, pOutNextValue);
	}

	internal NetConfig GetFirstConfigValue()
	{
		return _GetFirstConfigValue(Self);
	}
}
