using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Steamworks;
using Steamworks.Data;

public struct InventoryItem : IEquatable<InventoryItem>
{
	public struct Amount
	{
		public InventoryItem Item;

		public int Quantity;
	}

	internal InventoryItemId _id;

	internal InventoryDefId _def;

	internal SteamItemFlags _flags;

	internal ushort _quantity;

	internal Dictionary<string, string> _properties;

	public InventoryItemId Id => _id;

	public InventoryDefId DefId => _def;

	public int Quantity => _quantity;

	public InventoryDef Def => SteamInventory.FindDefinition(DefId);

	public Dictionary<string, string> Properties => _properties;

	public bool IsNoTrade => _flags.HasFlag(SteamItemFlags.NoTrade);

	public bool IsRemoved => _flags.HasFlag(SteamItemFlags.Removed);

	public bool IsConsumed => _flags.HasFlag(SteamItemFlags.Consumed);

	public DateTime Acquired
	{
		get
		{
			if (Properties == null)
			{
				return DateTime.UtcNow;
			}
			string text = Properties["acquired"];
			int year = int.Parse(text.Substring(0, 4));
			int month = int.Parse(text.Substring(4, 2));
			int day = int.Parse(text.Substring(6, 2));
			int hour = int.Parse(text.Substring(9, 2));
			int minute = int.Parse(text.Substring(11, 2));
			int second = int.Parse(text.Substring(13, 2));
			return new DateTime(year, month, day, hour, minute, second, DateTimeKind.Utc);
		}
	}

	public string Origin
	{
		get
		{
			if (Properties == null)
			{
				return null;
			}
			return Properties["origin"];
		}
	}

	public async Task<InventoryResult?> ConsumeAsync(int amount = 1)
	{
		SteamInventoryResult_t sresult = default(SteamInventoryResult_t);
		if (!SteamInventory.Internal.ConsumeItem(ref sresult, Id, (uint)amount))
		{
			return null;
		}
		return await InventoryResult.GetAsync(sresult);
	}

	public async Task<InventoryResult?> SplitStackAsync(int quantity = 1)
	{
		SteamInventoryResult_t sresult = default(SteamInventoryResult_t);
		if (!SteamInventory.Internal.TransferItemQuantity(ref sresult, Id, (uint)quantity, ulong.MaxValue))
		{
			return null;
		}
		return await InventoryResult.GetAsync(sresult);
	}

	public async Task<InventoryResult?> AddAsync(InventoryItem add, int quantity = 1)
	{
		SteamInventoryResult_t sresult = default(SteamInventoryResult_t);
		if (!SteamInventory.Internal.TransferItemQuantity(ref sresult, add.Id, (uint)quantity, Id))
		{
			return null;
		}
		return await InventoryResult.GetAsync(sresult);
	}

	internal static InventoryItem From(SteamItemDetails_t details)
	{
		InventoryItem result = default(InventoryItem);
		result._id = details.ItemId;
		result._def = details.Definition;
		result._flags = (SteamItemFlags)details.Flags;
		result._quantity = details.Quantity;
		return result;
	}

	internal static Dictionary<string, string> GetProperties(SteamInventoryResult_t result, int index)
	{
		uint punValueBufferSizeOut = 32768u;
		if (!SteamInventory.Internal.GetResultItemProperty(result, (uint)index, null, out var pchValueBuffer, ref punValueBufferSizeOut))
		{
			return null;
		}
		Dictionary<string, string> dictionary = new Dictionary<string, string>();
		string[] array = pchValueBuffer.Split(',');
		foreach (string text in array)
		{
			punValueBufferSizeOut = 32768u;
			if (SteamInventory.Internal.GetResultItemProperty(result, (uint)index, text, out var pchValueBuffer2, ref punValueBufferSizeOut))
			{
				dictionary.Add(text, pchValueBuffer2);
			}
		}
		return dictionary;
	}

	public static bool operator ==(InventoryItem a, InventoryItem b)
	{
		return a._id == b._id;
	}

	public static bool operator !=(InventoryItem a, InventoryItem b)
	{
		return a._id != b._id;
	}

	public override bool Equals(object p)
	{
		return Equals((InventoryItem)p);
	}

	public override int GetHashCode()
	{
		return _id.GetHashCode();
	}

	public bool Equals(InventoryItem p)
	{
		return p._id == _id;
	}
}
