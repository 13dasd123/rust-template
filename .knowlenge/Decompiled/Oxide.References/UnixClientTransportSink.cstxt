using System;
using System.Collections;
using System.IO;
using System.Runtime.Remoting;
using System.Runtime.Remoting.Channels;
using System.Runtime.Remoting.Messaging;
using System.Threading;
using Mono.Remoting.Channels.Unix;

internal class UnixClientTransportSink : IClientChannelSink, IChannelSinkBase
{
	private string _path;

	public IDictionary Properties => null;

	public IClientChannelSink NextChannelSink => null;

	public UnixClientTransportSink(string url)
	{
		_path = UnixChannel.ParseUnixURL(url, out var _);
	}

	public void AsyncProcessRequest(IClientChannelSinkStack sinkStack, IMessage msg, ITransportHeaders headers, Stream requestStream)
	{
		//IL_0003: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_0020: Expected O, but got Unknown
		UnixConnection unixConnection = null;
		bool flag = RemotingServices.IsOneWay(((IMethodMessage)msg).MethodBase);
		try
		{
			if (headers == null)
			{
				headers = (ITransportHeaders)new TransportHeaders();
			}
			headers[(object)"__RequestUri"] = ((IMethodMessage)msg).Uri;
			unixConnection = UnixConnectionPool.GetConnection(_path);
			UnixMessageIO.SendMessageStream(unixConnection.Stream, requestStream, headers, unixConnection.Buffer);
			unixConnection.Stream.Flush();
			if (!flag)
			{
				sinkStack.Push((IClientChannelSink)(object)this, (object)unixConnection);
				ThreadPool.QueueUserWorkItem(ReadAsyncUnixMessage, sinkStack);
			}
			else
			{
				unixConnection.Release();
			}
		}
		catch
		{
			unixConnection?.Release();
			if (!flag)
			{
				throw;
			}
		}
	}

	private void ReadAsyncUnixMessage(object data)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0007: Expected O, but got Unknown
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		IClientChannelSinkStack val = (IClientChannelSinkStack)data;
		UnixConnection unixConnection = (UnixConnection)val.Pop((IClientChannelSink)(object)this);
		try
		{
			if (UnixMessageIO.ReceiveMessageStatus(unixConnection.Stream, unixConnection.Buffer) != 0)
			{
				throw new RemotingException("Unknown response message from server");
			}
			ITransportHeaders headers;
			Stream stream = UnixMessageIO.ReceiveMessageStream(unixConnection.Stream, out headers, unixConnection.Buffer);
			unixConnection.Release();
			unixConnection = null;
			((IClientResponseChannelSinkStack)val).AsyncProcessResponse(headers, stream);
		}
		catch
		{
			unixConnection?.Release();
			throw;
		}
	}

	public void AsyncProcessResponse(IClientResponseChannelSinkStack sinkStack, object state, ITransportHeaders headers, Stream stream)
	{
		throw new NotSupportedException();
	}

	public Stream GetRequestStream(IMessage msg, ITransportHeaders headers)
	{
		return null;
	}

	public void ProcessMessage(IMessage msg, ITransportHeaders requestHeaders, Stream requestStream, out ITransportHeaders responseHeaders, out Stream responseStream)
	{
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_0008: Unknown result type (might be due to invalid IL or missing references)
		//IL_000f: Expected O, but got Unknown
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		UnixConnection unixConnection = null;
		try
		{
			if (requestHeaders == null)
			{
				requestHeaders = (ITransportHeaders)new TransportHeaders();
			}
			requestHeaders[(object)"__RequestUri"] = ((IMethodMessage)msg).Uri;
			unixConnection = UnixConnectionPool.GetConnection(_path);
			UnixMessageIO.SendMessageStream(unixConnection.Stream, requestStream, requestHeaders, unixConnection.Buffer);
			unixConnection.Stream.Flush();
			if (UnixMessageIO.ReceiveMessageStatus(unixConnection.Stream, unixConnection.Buffer) != 0)
			{
				throw new RemotingException("Unknown response message from server");
			}
			responseStream = UnixMessageIO.ReceiveMessageStream(unixConnection.Stream, out responseHeaders, unixConnection.Buffer);
		}
		finally
		{
			unixConnection?.Release();
		}
	}
}
