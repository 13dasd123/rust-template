using System;
using System.Collections;
using System.Runtime.Remoting;
using System.Runtime.Remoting.Messaging;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters;
using System.Runtime.Serialization.Formatters.Binary;
using Mono.Remoting.Channels.Unix;

internal class UnixBinaryCore
{
	private BinaryFormatter _serializationFormatter;

	private BinaryFormatter _deserializationFormatter;

	private bool _includeVersions = true;

	private bool _strictBinding;

	private IDictionary _properties;

	public static UnixBinaryCore DefaultInstance = new UnixBinaryCore();

	public BinaryFormatter Serializer => _serializationFormatter;

	public BinaryFormatter Deserializer => _deserializationFormatter;

	public IDictionary Properties => _properties;

	public UnixBinaryCore(object owner, IDictionary properties, string[] allowedProperties)
	{
		//IL_0061: Unknown result type (might be due to invalid IL or missing references)
		_properties = properties;
		foreach (DictionaryEntry property in properties)
		{
			string text = (string)property.Key;
			if (Array.IndexOf(allowedProperties, text) == -1)
			{
				throw new RemotingException(owner.GetType().Name + " does not recognize '" + text + "' configuration property");
			}
			switch (text)
			{
			case "includeVersions":
				_includeVersions = Convert.ToBoolean(property.Value);
				break;
			case "strictBinding":
				_strictBinding = Convert.ToBoolean(property.Value);
				break;
			}
		}
		Init();
	}

	public UnixBinaryCore()
	{
		_properties = new Hashtable();
		Init();
	}

	public void Init()
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Expected O, but got Unknown
		RemotingSurrogateSelector selector = new RemotingSurrogateSelector();
		StreamingContext context = new StreamingContext(StreamingContextStates.Remoting, null);
		_serializationFormatter = new BinaryFormatter((ISurrogateSelector?)selector, context);
		_deserializationFormatter = new BinaryFormatter(null, context);
		if (!_includeVersions)
		{
			_serializationFormatter.AssemblyFormat = FormatterAssemblyStyle.Simple;
			_deserializationFormatter.AssemblyFormat = FormatterAssemblyStyle.Simple;
		}
		if (!_strictBinding)
		{
			_serializationFormatter.Binder = SimpleBinder.Instance;
			_deserializationFormatter.Binder = SimpleBinder.Instance;
		}
	}
}
