using System;
using System.Collections;
using System.IO;
using System.Runtime.Remoting.Channels;
using System.Runtime.Remoting.Messaging;
using Mono.Remoting.Channels.Unix;

internal class UnixBinaryServerFormatterSink : IServerChannelSink, IChannelSinkBase
{
	private UnixBinaryCore _binaryCore = UnixBinaryCore.DefaultInstance;

	private IServerChannelSink next_sink;

	private IChannelReceiver receiver;

	internal UnixBinaryCore BinaryCore
	{
		get
		{
			return _binaryCore;
		}
		set
		{
			_binaryCore = value;
		}
	}

	public IServerChannelSink NextChannelSink => next_sink;

	public IDictionary Properties => null;

	public UnixBinaryServerFormatterSink(IServerChannelSink nextSink, IChannelReceiver receiver)
	{
		next_sink = nextSink;
		this.receiver = receiver;
	}

	public void AsyncProcessResponse(IServerResponseChannelSinkStack sinkStack, object state, IMessage message, ITransportHeaders headers, Stream stream)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Expected O, but got Unknown
		ITransportHeaders val = (ITransportHeaders)new TransportHeaders();
		if (sinkStack != null)
		{
			stream = sinkStack.GetResponseStream(message, val);
		}
		if (stream == null)
		{
			stream = new MemoryStream();
		}
		_binaryCore.Serializer.Serialize(stream, (object)message, (Header[])null);
		if (stream is MemoryStream)
		{
			stream.Position = 0L;
		}
		sinkStack.AsyncProcessResponse(message, val, stream);
	}

	public Stream GetResponseStream(IServerResponseChannelSinkStack sinkStack, object state, IMessage msg, ITransportHeaders headers)
	{
		return null;
	}

	public ServerProcessing ProcessMessage(IServerChannelSinkStack sinkStack, IMessage requestMsg, ITransportHeaders requestHeaders, Stream requestStream, out IMessage responseMsg, out ITransportHeaders responseHeaders, out Stream responseStream)
	{
		//IL_007e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0088: Expected O, but got Unknown
		//IL_0083: Unknown result type (might be due to invalid IL or missing references)
		//IL_0089: Expected O, but got Unknown
		//IL_008a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0109: Unknown result type (might be due to invalid IL or missing references)
		//IL_0113: Expected O, but got Unknown
		//IL_010e: Unknown result type (might be due to invalid IL or missing references)
		//IL_0114: Expected O, but got Unknown
		//IL_0098: Unknown result type (might be due to invalid IL or missing references)
		//IL_004b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0055: Expected O, but got Unknown
		//IL_0055: Unknown result type (might be due to invalid IL or missing references)
		//IL_005c: Expected O, but got Unknown
		//IL_006c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0071: Unknown result type (might be due to invalid IL or missing references)
		//IL_0146: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b2: Expected O, but got Unknown
		sinkStack.Push((IServerChannelSink)(object)this, (object)null);
		ServerProcessing val;
		try
		{
			string text = (string)requestHeaders[(object)"__RequestUri"];
			string text2 = default(string);
			((IChannel)receiver).Parse(text, ref text2);
			if (text2 == null)
			{
				text2 = text;
			}
			MethodCallHeaderHandler methodCallHeaderHandler = new MethodCallHeaderHandler(text2);
			requestMsg = (IMessage)_binaryCore.Deserializer.Deserialize(requestStream, new HeaderHandler(methodCallHeaderHandler.HandleHeaders));
			val = next_sink.ProcessMessage(sinkStack, requestMsg, requestHeaders, (Stream)null, ref responseMsg, ref responseHeaders, ref responseStream);
		}
		catch (Exception ex)
		{
			responseMsg = (IMessage)new ReturnMessage(ex, (IMethodCallMessage)requestMsg);
			val = (ServerProcessing)0;
			responseHeaders = null;
			responseStream = null;
		}
		if ((int)val == 0)
		{
			for (int i = 0; i < 3; i++)
			{
				responseStream = null;
				responseHeaders = (ITransportHeaders)new TransportHeaders();
				if (sinkStack != null)
				{
					responseStream = ((IServerResponseChannelSinkStack)sinkStack).GetResponseStream(responseMsg, responseHeaders);
				}
				if (responseStream == null)
				{
					responseStream = new MemoryStream();
				}
				try
				{
					_binaryCore.Serializer.Serialize(responseStream, responseMsg);
				}
				catch (Exception ex2)
				{
					if (i == 2)
					{
						throw ex2;
					}
					responseMsg = (IMessage)new ReturnMessage(ex2, (IMethodCallMessage)requestMsg);
					continue;
				}
				break;
			}
			if (responseStream is MemoryStream)
			{
				responseStream.Position = 0L;
			}
			sinkStack.Pop((IServerChannelSink)(object)this);
		}
		return val;
	}
}
