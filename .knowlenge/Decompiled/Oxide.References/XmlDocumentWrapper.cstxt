using System.Xml;
using Newtonsoft.Json.Converters;

internal class XmlDocumentWrapper : XmlNodeWrapper, IXmlDocument, IXmlNode
{
	private readonly XmlDocument _document;

	public IXmlElement DocumentElement
	{
		get
		{
			if (_document.DocumentElement == null)
			{
				return null;
			}
			return new XmlElementWrapper(_document.DocumentElement);
		}
	}

	public XmlDocumentWrapper(XmlDocument document)
		: base((XmlNode)(object)document)
	{
		_document = document;
	}

	public IXmlNode CreateComment(string data)
	{
		return new XmlNodeWrapper((XmlNode)(object)_document.CreateComment(data));
	}

	public IXmlNode CreateTextNode(string text)
	{
		return new XmlNodeWrapper((XmlNode)(object)_document.CreateTextNode(text));
	}

	public IXmlNode CreateCDataSection(string data)
	{
		return new XmlNodeWrapper((XmlNode)(object)_document.CreateCDataSection(data));
	}

	public IXmlNode CreateWhitespace(string text)
	{
		return new XmlNodeWrapper((XmlNode)(object)_document.CreateWhitespace(text));
	}

	public IXmlNode CreateSignificantWhitespace(string text)
	{
		return new XmlNodeWrapper((XmlNode)(object)_document.CreateSignificantWhitespace(text));
	}

	public IXmlNode CreateXmlDeclaration(string version, string encoding, string standalone)
	{
		return new XmlDeclarationWrapper(_document.CreateXmlDeclaration(version, encoding, standalone));
	}

	public IXmlNode CreateXmlDocumentType(string name, string publicId, string systemId, string internalSubset)
	{
		return new XmlDocumentTypeWrapper(_document.CreateDocumentType(name, publicId, systemId, (string)null));
	}

	public IXmlNode CreateProcessingInstruction(string target, string data)
	{
		return new XmlNodeWrapper((XmlNode)(object)_document.CreateProcessingInstruction(target, data));
	}

	public IXmlElement CreateElement(string elementName)
	{
		return new XmlElementWrapper(_document.CreateElement(elementName));
	}

	public IXmlElement CreateElement(string qualifiedName, string namespaceUri)
	{
		return new XmlElementWrapper(_document.CreateElement(qualifiedName, namespaceUri));
	}

	public IXmlNode CreateAttribute(string name, string value)
	{
		return new XmlNodeWrapper((XmlNode)(object)_document.CreateAttribute(name))
		{
			Value = value
		};
	}

	public IXmlNode CreateAttribute(string qualifiedName, string namespaceUri, string value)
	{
		return new XmlNodeWrapper((XmlNode)(object)_document.CreateAttribute(qualifiedName, namespaceUri))
		{
			Value = value
		};
	}
}
