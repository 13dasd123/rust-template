using System.Collections.Generic;
using System.Xml.Linq;
using Newtonsoft.Json.Converters;

internal class XContainerWrapper : XObjectWrapper
{
	private List<IXmlNode> _childNodes;

	private XContainer Container => (XContainer)base.WrappedNode;

	public override List<IXmlNode> ChildNodes
	{
		get
		{
			if (_childNodes == null)
			{
				_childNodes = new List<IXmlNode>();
				foreach (XNode item in Container.Nodes())
				{
					_childNodes.Add(WrapNode((XObject)(object)item));
				}
			}
			return _childNodes;
		}
	}

	public override IXmlNode ParentNode
	{
		get
		{
			if (((XObject)Container).Parent == null)
			{
				return null;
			}
			return WrapNode((XObject)(object)((XObject)Container).Parent);
		}
	}

	public XContainerWrapper(XContainer container)
		: base((XObject)(object)container)
	{
	}

	internal static IXmlNode WrapNode(XObject node)
	{
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Expected O, but got Unknown
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0027: Expected O, but got Unknown
		//IL_0031: Unknown result type (might be due to invalid IL or missing references)
		//IL_003b: Expected O, but got Unknown
		//IL_0045: Unknown result type (might be due to invalid IL or missing references)
		//IL_004f: Expected O, but got Unknown
		//IL_0059: Unknown result type (might be due to invalid IL or missing references)
		//IL_0063: Expected O, but got Unknown
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0077: Expected O, but got Unknown
		//IL_0081: Unknown result type (might be due to invalid IL or missing references)
		//IL_008b: Expected O, but got Unknown
		//IL_0095: Unknown result type (might be due to invalid IL or missing references)
		//IL_009f: Expected O, but got Unknown
		if (node is XDocument)
		{
			return new XDocumentWrapper((XDocument)node);
		}
		if (node is XElement)
		{
			return new XElementWrapper((XElement)node);
		}
		if (node is XContainer)
		{
			return new XContainerWrapper((XContainer)node);
		}
		if (node is XProcessingInstruction)
		{
			return new XProcessingInstructionWrapper((XProcessingInstruction)node);
		}
		if (node is XText)
		{
			return new XTextWrapper((XText)node);
		}
		if (node is XComment)
		{
			return new XCommentWrapper((XComment)node);
		}
		if (node is XAttribute)
		{
			return new XAttributeWrapper((XAttribute)node);
		}
		if (node is XDocumentType)
		{
			return new XDocumentTypeWrapper((XDocumentType)node);
		}
		return new XObjectWrapper(node);
	}

	public override IXmlNode AppendChild(IXmlNode newChild)
	{
		Container.Add(newChild.WrappedNode);
		_childNodes = null;
		return newChild;
	}
}
