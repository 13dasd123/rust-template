using System;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using UnityEngine;

public class ColorConverter : JsonConverter
{
	public override bool CanRead => true;

	public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
	{
		//IL_000b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0010: Unknown result type (might be due to invalid IL or missing references)
		//IL_0023: Unknown result type (might be due to invalid IL or missing references)
		//IL_003a: Unknown result type (might be due to invalid IL or missing references)
		//IL_0051: Unknown result type (might be due to invalid IL or missing references)
		//IL_0068: Unknown result type (might be due to invalid IL or missing references)
		if (value == null)
		{
			writer.WriteNull();
			return;
		}
		Color val = (Color)value;
		writer.WriteStartObject();
		writer.WritePropertyName("a");
		writer.WriteValue(val.a);
		writer.WritePropertyName("r");
		writer.WriteValue(val.r);
		writer.WritePropertyName("g");
		writer.WriteValue(val.g);
		writer.WritePropertyName("b");
		writer.WriteValue(val.b);
		writer.WriteEndObject();
	}

	public override bool CanConvert(Type objectType)
	{
		if ((object)objectType != typeof(Color))
		{
			return (object)objectType == typeof(Color32);
		}
		return true;
	}

	public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
	{
		//IL_000c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0012: Unknown result type (might be due to invalid IL or missing references)
		//IL_00bc: Unknown result type (might be due to invalid IL or missing references)
		//IL_006d: Unknown result type (might be due to invalid IL or missing references)
		if (reader.TokenType == JsonToken.Null)
		{
			return (object)default(Color);
		}
		JObject jObject = JObject.Load(reader);
		if ((object)objectType == typeof(Color32))
		{
			return (object)new Color32((byte)jObject["r"], (byte)jObject["g"], (byte)jObject["b"], (byte)jObject["a"]);
		}
		return (object)new Color((float)jObject["r"], (float)jObject["g"], (float)jObject["b"], (float)jObject["a"]);
	}
}
