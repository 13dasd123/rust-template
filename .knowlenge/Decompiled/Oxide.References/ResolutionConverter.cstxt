using System;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using UnityEngine;

public class ResolutionConverter : JsonConverter
{
	public override bool CanRead => true;

	public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
	{
		//IL_0001: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Unknown result type (might be due to invalid IL or missing references)
		Resolution val = (Resolution)value;
		writer.WriteStartObject();
		writer.WritePropertyName("height");
		writer.WriteValue(((Resolution)(ref val)).height);
		writer.WritePropertyName("width");
		writer.WriteValue(((Resolution)(ref val)).width);
		writer.WritePropertyName("refreshRate");
		writer.WriteValue(((Resolution)(ref val)).refreshRate);
		writer.WriteEndObject();
	}

	public override bool CanConvert(Type objectType)
	{
		return (object)objectType == typeof(Resolution);
	}

	public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
	{
		//IL_0009: Unknown result type (might be due to invalid IL or missing references)
		//IL_0054: Unknown result type (might be due to invalid IL or missing references)
		JObject jObject = JObject.Load(reader);
		Resolution val = default(Resolution);
		((Resolution)(ref val)).height = (int)jObject["height"];
		((Resolution)(ref val)).width = (int)jObject["width"];
		((Resolution)(ref val)).refreshRate = (int)jObject["refreshRate"];
		return val;
	}
}
