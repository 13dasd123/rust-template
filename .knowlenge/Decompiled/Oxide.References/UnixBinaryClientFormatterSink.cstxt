using System;
using System.Collections;
using System.IO;
using System.Runtime.Remoting.Channels;
using System.Runtime.Remoting.Messaging;
using Mono.Remoting.Channels.Unix;

internal class UnixBinaryClientFormatterSink : IClientChannelSink, IMessageSink, IChannelSinkBase, IClientFormatterSink
{
	private UnixBinaryCore _binaryCore = UnixBinaryCore.DefaultInstance;

	private IClientChannelSink _nextInChain;

	internal UnixBinaryCore BinaryCore
	{
		get
		{
			return _binaryCore;
		}
		set
		{
			_binaryCore = value;
		}
	}

	public IClientChannelSink NextChannelSink => _nextInChain;

	public IMessageSink NextSink => null;

	public IDictionary Properties => null;

	public UnixBinaryClientFormatterSink(IClientChannelSink nextSink)
	{
		_nextInChain = nextSink;
	}

	public void AsyncProcessRequest(IClientChannelSinkStack sinkStack, IMessage msg, ITransportHeaders headers, Stream stream)
	{
		throw new NotSupportedException("UnixBinaryClientFormatterSink must be the first sink in the IClientChannelSink chain");
	}

	public void AsyncProcessResponse(IClientResponseChannelSinkStack sinkStack, object state, ITransportHeaders headers, Stream stream)
	{
		//IL_000f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0019: Expected O, but got Unknown
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Expected O, but got Unknown
		IMessage val = (IMessage)_binaryCore.Deserializer.DeserializeMethodResponse(stream, (HeaderHandler)null, (IMethodCallMessage)state);
		sinkStack.DispatchReplyMessage(val);
	}

	public Stream GetRequestStream(IMessage msg, ITransportHeaders headers)
	{
		throw new NotSupportedException();
	}

	public void ProcessMessage(IMessage msg, ITransportHeaders requestHeaders, Stream requestStream, out ITransportHeaders responseHeaders, out Stream responseStream)
	{
		throw new NotSupportedException();
	}

	public IMessageCtrl AsyncProcessMessage(IMessage msg, IMessageSink replySink)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Expected O, but got Unknown
		//IL_0047: Unknown result type (might be due to invalid IL or missing references)
		//IL_004d: Expected O, but got Unknown
		ITransportHeaders val = (ITransportHeaders)new TransportHeaders();
		Stream stream = _nextInChain.GetRequestStream(msg, val);
		if (stream == null)
		{
			stream = new MemoryStream();
		}
		_binaryCore.Serializer.Serialize(stream, (object)msg, (Header[])null);
		if (stream is MemoryStream)
		{
			stream.Position = 0L;
		}
		ClientChannelSinkStack val2 = new ClientChannelSinkStack(replySink);
		val2.Push((IClientChannelSink)(object)this, (object)msg);
		_nextInChain.AsyncProcessRequest((IClientChannelSinkStack)(object)val2, msg, val, stream);
		return null;
	}

	public IMessage SyncProcessMessage(IMessage msg)
	{
		//IL_0000: Unknown result type (might be due to invalid IL or missing references)
		//IL_0006: Expected O, but got Unknown
		//IL_000d: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ac: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b6: Expected O, but got Unknown
		//IL_00b1: Unknown result type (might be due to invalid IL or missing references)
		//IL_00b8: Expected O, but got Unknown
		//IL_008c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0096: Expected O, but got Unknown
		//IL_0096: Unknown result type (might be due to invalid IL or missing references)
		//IL_009d: Expected O, but got Unknown
		try
		{
			ITransportHeaders val = (ITransportHeaders)new TransportHeaders();
			val[(object)"__RequestUri"] = ((IMethodMessage)(IMethodCallMessage)msg).Uri;
			val[(object)"Content-Type"] = "application/octet-stream";
			Stream stream = _nextInChain.GetRequestStream(msg, val);
			if (stream == null)
			{
				stream = new MemoryStream();
			}
			_binaryCore.Serializer.Serialize(stream, (object)msg, (Header[])null);
			if (stream is MemoryStream)
			{
				stream.Position = 0L;
			}
			ITransportHeaders val2 = default(ITransportHeaders);
			Stream stream2 = default(Stream);
			_nextInChain.ProcessMessage(msg, val, stream, ref val2, ref stream2);
			return (IMessage)_binaryCore.Deserializer.DeserializeMethodResponse(stream2, (HeaderHandler)null, (IMethodCallMessage)msg);
		}
		catch (Exception ex)
		{
			return (IMessage)new ReturnMessage(ex, (IMethodCallMessage)msg);
		}
	}
}
