using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Schema;

private class SchemaScope
{
	private readonly JTokenType _tokenType;

	private readonly IList<JsonSchemaModel> _schemas;

	private readonly Dictionary<string, bool> _requiredProperties;

	public string CurrentPropertyName { get; set; }

	public int ArrayItemCount { get; set; }

	public bool IsUniqueArray { get; set; }

	public IList<JToken> UniqueArrayItems { get; set; }

	public JTokenWriter CurrentItemWriter { get; set; }

	public IList<JsonSchemaModel> Schemas => _schemas;

	public Dictionary<string, bool> RequiredProperties => _requiredProperties;

	public JTokenType TokenType => _tokenType;

	public SchemaScope(JTokenType tokenType, IList<JsonSchemaModel> schemas)
	{
		_tokenType = tokenType;
		_schemas = schemas;
		_requiredProperties = schemas.SelectMany(GetRequiredProperties).Distinct().ToDictionary((string p) => p, (string p) => false);
		if (tokenType == JTokenType.Array && schemas.Any((JsonSchemaModel s) => s.UniqueItems))
		{
			IsUniqueArray = true;
			UniqueArrayItems = new List<JToken>();
		}
	}

	private IEnumerable<string> GetRequiredProperties(JsonSchemaModel schema)
	{
		if (schema == null || schema.Properties == null)
		{
			return Enumerable.Empty<string>();
		}
		return from p in schema.Properties
			where p.Value.Required
			select p.Key;
	}
}
