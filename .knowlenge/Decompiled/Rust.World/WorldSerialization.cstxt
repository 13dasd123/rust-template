using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using LZ4;
using ProtoBuf;
using UnityEngine;

public class WorldSerialization
{
	[ProtoContract]
	public class WorldData
	{
		[ProtoMember(1)]
		public uint size = 4000u;

		[ProtoMember(2)]
		public List<MapData> maps = new List<MapData>();

		[ProtoMember(3)]
		public List<PrefabData> prefabs = new List<PrefabData>();

		[ProtoMember(4)]
		public List<PathData> paths = new List<PathData>();
	}

	[ProtoContract]
	public class MapData
	{
		[ProtoMember(1)]
		public string name;

		[ProtoMember(2)]
		public byte[] data;
	}

	[ProtoContract]
	public class PrefabData
	{
		[ProtoMember(1)]
		public string category;

		[ProtoMember(2)]
		public uint id;

		[ProtoMember(3)]
		public VectorData position;

		[ProtoMember(4)]
		public VectorData rotation;

		[ProtoMember(5)]
		public VectorData scale;
	}

	[ProtoContract]
	public class PathData
	{
		[ProtoMember(1)]
		public string name;

		[ProtoMember(2)]
		public bool spline;

		[ProtoMember(3)]
		public bool start;

		[ProtoMember(4)]
		public bool end;

		[ProtoMember(5)]
		public float width;

		[ProtoMember(6)]
		public float innerPadding;

		[ProtoMember(7)]
		public float outerPadding;

		[ProtoMember(8)]
		public float innerFade;

		[ProtoMember(9)]
		public float outerFade;

		[ProtoMember(10)]
		public float randomScale;

		[ProtoMember(11)]
		public float meshOffset;

		[ProtoMember(12)]
		public float terrainOffset;

		[ProtoMember(13)]
		public int splat;

		[ProtoMember(14)]
		public int topology;

		[ProtoMember(15)]
		public VectorData[] nodes;
	}

	[ProtoContract]
	public class VectorData
	{
		[ProtoMember(1)]
		public float x;

		[ProtoMember(2)]
		public float y;

		[ProtoMember(3)]
		public float z;

		public VectorData()
		{
		}

		public VectorData(float x, float y, float z)
		{
			this.x = x;
			this.y = y;
			this.z = z;
		}

		public static implicit operator VectorData(Vector3 v)
		{
			return new VectorData(v.x, v.y, v.z);
		}

		public static implicit operator VectorData(Quaternion q)
		{
			return q.eulerAngles;
		}

		public static implicit operator Vector3(VectorData v)
		{
			return new Vector3(v.x, v.y, v.z);
		}

		public static implicit operator Quaternion(VectorData v)
		{
			return Quaternion.Euler(v);
		}
	}

	public const uint CurrentVersion = 8u;

	public WorldData world = new WorldData();

	public uint Version { get; private set; }

	public string Checksum { get; private set; }

	public WorldSerialization()
	{
		Version = 8u;
		Checksum = null;
	}

	public MapData GetMap(string name)
	{
		for (int i = 0; i < world.maps.Count; i++)
		{
			if (world.maps[i].name == name)
			{
				return world.maps[i];
			}
		}
		return null;
	}

	public void AddMap(string name, byte[] data)
	{
		MapData mapData = new MapData();
		mapData.name = name;
		mapData.data = data;
		world.maps.Add(mapData);
	}

	public IEnumerable<PrefabData> GetPrefabs(string category)
	{
		return world.prefabs.Where((PrefabData p) => p.category == category);
	}

	public void AddPrefab(string category, uint id, Vector3 position, Quaternion rotation, Vector3 scale)
	{
		PrefabData prefabData = new PrefabData();
		prefabData.category = category;
		prefabData.id = id;
		prefabData.position = position;
		prefabData.rotation = rotation;
		prefabData.scale = scale;
		world.prefabs.Add(prefabData);
	}

	public IEnumerable<PathData> GetPaths(string name)
	{
		return world.paths.Where((PathData p) => p.name.Contains(name));
	}

	public PathData GetPath(string name)
	{
		for (int i = 0; i < world.paths.Count; i++)
		{
			if (world.paths[i].name == name)
			{
				return world.paths[i];
			}
		}
		return null;
	}

	public void AddPath(PathData path)
	{
		world.paths.Add(path);
	}

	public void Clear()
	{
		world.maps.Clear();
		world.prefabs.Clear();
		world.paths.Clear();
		Version = 8u;
		Checksum = null;
	}

	public void Save(string fileName)
	{
		try
		{
			using (FileStream fileStream = new FileStream(fileName, FileMode.Create, FileAccess.Write, FileShare.None))
			{
				using BinaryWriter binaryWriter = new BinaryWriter(fileStream);
				binaryWriter.Write(Version);
				using LZ4Stream destination = new LZ4Stream(fileStream, LZ4StreamMode.Compress);
				Serializer.Serialize((Stream)destination, world);
			}
			Checksum = Hash();
		}
		catch (Exception ex)
		{
			Debug.LogError(ex.Message);
		}
	}

	public void Load(string fileName)
	{
		try
		{
			using (FileStream fileStream = new FileStream(fileName, FileMode.Open, FileAccess.Read, FileShare.Read))
			{
				using BinaryReader binaryReader = new BinaryReader(fileStream);
				Version = binaryReader.ReadUInt32();
				if (Version == 8)
				{
					using LZ4Stream source = new LZ4Stream(fileStream, LZ4StreamMode.Decompress);
					world = Serializer.Deserialize<WorldData>(source);
				}
			}
			Checksum = Hash();
		}
		catch (Exception ex)
		{
			Debug.LogError(ex.Message);
		}
	}

	public void CalculateChecksum()
	{
		Checksum = Hash();
	}

	private string Hash()
	{
		Checksum checksum = new Checksum();
		MapData map = GetMap("terrain");
		if (map != null)
		{
			for (int i = 0; i < map.data.Length; i++)
			{
				checksum.Add(map.data[i]);
			}
		}
		List<PrefabData> prefabs = world.prefabs;
		if (prefabs != null)
		{
			for (int j = 0; j < prefabs.Count; j++)
			{
				PrefabData prefabData = prefabs[j];
				checksum.Add(prefabData.id);
				checksum.Add(prefabData.position.x, 3);
				checksum.Add(prefabData.position.y, 3);
				checksum.Add(prefabData.position.z, 3);
				checksum.Add(prefabData.scale.x, 3);
				checksum.Add(prefabData.scale.y, 3);
				checksum.Add(prefabData.scale.z, 3);
			}
		}
		return checksum.MD5();
	}
}
