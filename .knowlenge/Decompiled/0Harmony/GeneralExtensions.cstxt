using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text.RegularExpressions;

public static class GeneralExtensions
{
	public static string Join<T>(this IEnumerable<T> enumeration, Func<T, string> converter = null, string delimiter = ", ")
	{
		if (converter == null)
		{
			converter = (T t) => t.ToString();
		}
		return enumeration.Aggregate("", (string prev, T curr) => prev + ((prev != "") ? delimiter : "") + converter(curr));
	}

	public static string Description(this Type[] parameters)
	{
		if (parameters == null)
		{
			return "NULL";
		}
		string pattern = ", \\w+, Version=[0-9.]+, Culture=neutral, PublicKeyToken=[0-9a-f]+";
		return "(" + Join(parameters, (Type p) => ((object)p == null || p.FullName == null) ? "null" : Regex.Replace(p.FullName, pattern, "")) + ")";
	}

	public static string FullDescription(this MethodBase method)
	{
		Type[] parameters = (from p in method.GetParameters()
			select p.ParameterType).ToArray();
		return method.DeclaringType.FullName + "." + method.Name + Description(parameters);
	}

	public static Type[] Types(this ParameterInfo[] pinfo)
	{
		return pinfo.Select((ParameterInfo pi) => pi.ParameterType).ToArray();
	}

	public static T GetValueSafe<S, T>(this Dictionary<S, T> dictionary, S key)
	{
		if (dictionary.TryGetValue(key, out var value))
		{
			return value;
		}
		return default(T);
	}

	public static T GetTypedValue<T>(this Dictionary<string, object> dictionary, string key)
	{
		if (!dictionary.TryGetValue(key, out var value) || !(value is T result))
		{
			return default(T);
		}
		return result;
	}
}
