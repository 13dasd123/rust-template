using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Harmony;

[Serializable]
public class PatchInfo
{
	public Patch[] prefixes;

	public Patch[] postfixes;

	public Patch[] transpilers;

	public PatchInfo()
	{
		prefixes = new Patch[0];
		postfixes = new Patch[0];
		transpilers = new Patch[0];
	}

	public void AddPrefix(MethodInfo patch, string owner, int priority, string[] before, string[] after)
	{
		List<Patch> list = prefixes.ToList();
		list.Add(new Patch(patch, prefixes.Count() + 1, owner, priority, before, after));
		prefixes = list.ToArray();
	}

	public void RemovePrefix(string owner)
	{
		if (owner == "*")
		{
			prefixes = new Patch[0];
			return;
		}
		prefixes = prefixes.Where((Patch patch) => patch.owner != owner).ToArray();
	}

	public void AddPostfix(MethodInfo patch, string owner, int priority, string[] before, string[] after)
	{
		List<Patch> list = postfixes.ToList();
		list.Add(new Patch(patch, postfixes.Count() + 1, owner, priority, before, after));
		postfixes = list.ToArray();
	}

	public void RemovePostfix(string owner)
	{
		if (owner == "*")
		{
			postfixes = new Patch[0];
			return;
		}
		postfixes = postfixes.Where((Patch patch) => patch.owner != owner).ToArray();
	}

	public void AddTranspiler(MethodInfo patch, string owner, int priority, string[] before, string[] after)
	{
		List<Patch> list = transpilers.ToList();
		list.Add(new Patch(patch, transpilers.Count() + 1, owner, priority, before, after));
		transpilers = list.ToArray();
	}

	public void RemoveTranspiler(string owner)
	{
		if (owner == "*")
		{
			transpilers = new Patch[0];
			return;
		}
		transpilers = transpilers.Where((Patch patch) => patch.owner != owner).ToArray();
	}

	public void RemovePatch(MethodInfo patch)
	{
		prefixes = prefixes.Where((Patch p) => p.patch != patch).ToArray();
		postfixes = postfixes.Where((Patch p) => p.patch != patch).ToArray();
		transpilers = transpilers.Where((Patch p) => p.patch != patch).ToArray();
	}
}
