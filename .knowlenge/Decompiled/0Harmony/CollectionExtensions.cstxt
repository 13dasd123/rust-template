using System;
using System.Collections.Generic;
using System.Linq;

public static class CollectionExtensions
{
	public static void Do<T>(this IEnumerable<T> sequence, Action<T> action)
	{
		if (sequence != null)
		{
			IEnumerator<T> enumerator = sequence.GetEnumerator();
			while (enumerator.MoveNext())
			{
				action(enumerator.Current);
			}
		}
	}

	public static void DoIf<T>(this IEnumerable<T> sequence, Func<T, bool> condition, Action<T> action)
	{
		Do(sequence.Where(condition), action);
	}

	public static IEnumerable<T> Add<T>(this IEnumerable<T> sequence, T item)
	{
		return (sequence ?? Enumerable.Empty<T>()).Concat(new T[1] { item });
	}

	public static T[] AddRangeToArray<T>(this T[] sequence, T[] items)
	{
		return (sequence ?? Enumerable.Empty<T>()).Concat(items).ToArray();
	}

	public static T[] AddToArray<T>(this T[] sequence, T item)
	{
		return Add(sequence, item).ToArray();
	}
}
