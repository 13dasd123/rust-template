using System;
using System.Collections.Generic;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using Harmony;

public static class FileLog
{
	public static string logPath;

	public static char indentChar;

	public static int indentLevel;

	private static List<string> buffer;

	[UpgradeToLatestVersion(1)]
	static FileLog()
	{
		indentChar = '\t';
		indentLevel = 0;
		buffer = new List<string>();
		logPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + Path.DirectorySeparatorChar + "harmony.log.txt";
	}

	private static string IndentString()
	{
		return new string(indentChar, indentLevel);
	}

	public static void ChangeIndent(int delta)
	{
		indentLevel = Math.Max(0, indentLevel + delta);
	}

	public static void LogBuffered(string str)
	{
		lock (logPath)
		{
			buffer.Add(IndentString() + str);
		}
	}

	public static void FlushBuffer()
	{
		lock (logPath)
		{
			if (buffer.Count <= 0)
			{
				return;
			}
			using (StreamWriter streamWriter = File.AppendText(logPath))
			{
				foreach (string item in buffer)
				{
					streamWriter.WriteLine(item);
				}
			}
			buffer.Clear();
		}
	}

	public static void Log(string str)
	{
		lock (logPath)
		{
			using StreamWriter streamWriter = File.AppendText(logPath);
			streamWriter.WriteLine(IndentString() + str);
		}
	}

	public static void Reset()
	{
		lock (logPath)
		{
			string path = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + Path.DirectorySeparatorChar + "harmony.log.txt";
			File.Delete(path);
		}
	}

	public unsafe static void LogBytes(long ptr, int len)
	{
		lock (logPath)
		{
			byte* ptr2 = (byte*)ptr;
			string text = "";
			for (int i = 1; i <= len; i++)
			{
				if (text == "")
				{
					text = "#  ";
				}
				text = text + ptr2->ToString("X2") + " ";
				if (i > 1 || len == 1)
				{
					if (i % 8 == 0 || i == len)
					{
						Log(text);
						text = "";
					}
					else if (i % 4 == 0)
					{
						text += " ";
					}
				}
				ptr2++;
			}
			byte[] destination = new byte[len];
			Marshal.Copy((IntPtr)ptr, destination, 0, len);
			MD5 mD = MD5.Create();
			byte[] array = mD.ComputeHash(destination);
			StringBuilder stringBuilder = new StringBuilder();
			for (int j = 0; j < array.Length; j++)
			{
				stringBuilder.Append(array[j].ToString("X2"));
			}
			Log("HASH: " + stringBuilder);
		}
	}
}
