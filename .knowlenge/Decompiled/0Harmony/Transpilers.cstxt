using System;
using System.Collections.Generic;
using System.Reflection;
using System.Reflection.Emit;
using Harmony;

public static class Transpilers
{
	public static IEnumerable<CodeInstruction> MethodReplacer(this IEnumerable<CodeInstruction> instructions, MethodBase from, MethodBase to)
	{
		if (from == null)
		{
			throw new ArgumentException("Unexpected null argument", "from");
		}
		if (to == null)
		{
			throw new ArgumentException("Unexpected null argument", "to");
		}
		foreach (CodeInstruction instruction in instructions)
		{
			MethodBase method = instruction.operand as MethodBase;
			if (method == from)
			{
				instruction.opcode = (to.IsConstructor ? OpCodes.Newobj : OpCodes.Call);
				instruction.operand = to;
			}
			yield return instruction;
		}
	}

	public static IEnumerable<CodeInstruction> DebugLogger(this IEnumerable<CodeInstruction> instructions, string text)
	{
		yield return new CodeInstruction(OpCodes.Ldstr, text);
		yield return new CodeInstruction(OpCodes.Call, AccessTools.Method(typeof(FileLog), "Log"));
		foreach (CodeInstruction instruction in instructions)
		{
			yield return instruction;
		}
	}
}
