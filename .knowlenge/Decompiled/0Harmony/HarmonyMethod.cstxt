using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using Harmony;

public class HarmonyMethod
{
	public MethodInfo method;

	public Type declaringType;

	public string methodName;

	public MethodType? methodType;

	public Type[] argumentTypes;

	public int prioritiy = -1;

	public string[] before;

	public string[] after;

	public HarmonyMethod()
	{
	}

	private void ImportMethod(MethodInfo theMethod)
	{
		method = theMethod;
		if (method != null)
		{
			List<HarmonyMethod> harmonyMethods = method.GetHarmonyMethods();
			if (harmonyMethods != null)
			{
				Merge(harmonyMethods).CopyTo(this);
			}
		}
	}

	public HarmonyMethod(MethodInfo method)
	{
		ImportMethod(method);
	}

	public HarmonyMethod(Type type, string name, Type[] parameters = null)
	{
		MethodInfo theMethod = AccessTools.Method(type, name, parameters);
		ImportMethod(theMethod);
	}

	public static List<string> HarmonyFields()
	{
		return (from s in AccessTools.GetFieldNames(typeof(HarmonyMethod))
			where s != "method"
			select s).ToList();
	}

	public static HarmonyMethod Merge(List<HarmonyMethod> attributes)
	{
		HarmonyMethod harmonyMethod = new HarmonyMethod();
		if (attributes == null)
		{
			return harmonyMethod;
		}
		Traverse resultTrv = Traverse.Create(harmonyMethod);
		attributes.ForEach(delegate(HarmonyMethod attribute)
		{
			Traverse trv = Traverse.Create(attribute);
			HarmonyFields().ForEach(delegate(string f)
			{
				object value = trv.Field(f).GetValue();
				if (value != null)
				{
					resultTrv.Field(f).SetValue(value);
				}
			});
		});
		return harmonyMethod;
	}

	public override string ToString()
	{
		string result = "HarmonyMethod[";
		Traverse trv = Traverse.Create(this);
		HarmonyFields().ForEach(delegate(string f)
		{
			result = result + f + "=" + trv.Field(f).GetValue();
		});
		return result + "]";
	}
}
