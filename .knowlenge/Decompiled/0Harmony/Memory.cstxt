using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Harmony.ILCopying;

public static class Memory
{
	private static readonly HashSet<PlatformID> WindowsPlatformIDSet = new HashSet<PlatformID>
	{
		PlatformID.Win32NT,
		PlatformID.Win32S,
		PlatformID.Win32Windows,
		PlatformID.WinCE
	};

	public static bool IsWindows => WindowsPlatformIDSet.Contains(Environment.OSVersion.Platform);

	[DllImport("kernel32.dll")]
	public static extern bool VirtualProtect(IntPtr lpAddress, UIntPtr dwSize, Protection flNewProtect, out Protection lpflOldProtect);

	public static void UnprotectMemoryPage(long memory)
	{
		if (IsWindows && !VirtualProtect(new IntPtr(memory), new UIntPtr(1u), Protection.PAGE_EXECUTE_READWRITE, out var _))
		{
			throw new Win32Exception();
		}
	}

	public static string DetourMethod(MethodBase original, MethodBase replacement)
	{
		Exception exception;
		long methodStart = GetMethodStart(original, out exception);
		if (methodStart == 0)
		{
			return exception.Message;
		}
		long methodStart2 = GetMethodStart(replacement, out exception);
		if (methodStart2 == 0)
		{
			return exception.Message;
		}
		return WriteJump(methodStart, methodStart2);
	}

	public static string WriteJump(long memory, long destination)
	{
		UnprotectMemoryPage(memory);
		if (IntPtr.Size == 8)
		{
			if (CompareBytes(memory, new byte[1] { 233 }))
			{
				int num = ReadInt(memory + 1);
				memory += 5 + num;
			}
			memory = WriteBytes(memory, new byte[2] { 72, 184 });
			memory = WriteLong(memory, destination);
			memory = WriteBytes(memory, new byte[2] { 255, 224 });
		}
		else
		{
			memory = WriteByte(memory, 104);
			memory = WriteInt(memory, (int)destination);
			memory = WriteByte(memory, 195);
		}
		return null;
	}

	private static RuntimeMethodHandle GetRuntimeMethodHandle(MethodBase method)
	{
		if (method is DynamicMethod)
		{
			BindingFlags bindingAttr = BindingFlags.Instance | BindingFlags.NonPublic;
			MethodInfo method2 = typeof(DynamicMethod).GetMethod("GetMethodDescriptor", bindingAttr);
			if (method2 != null)
			{
				return (RuntimeMethodHandle)method2.Invoke(method, new object[0]);
			}
			FieldInfo field = typeof(DynamicMethod).GetField("m_method", bindingAttr);
			if (field != null)
			{
				return (RuntimeMethodHandle)field.GetValue(method);
			}
			FieldInfo field2 = typeof(DynamicMethod).GetField("mhandle", bindingAttr);
			return (RuntimeMethodHandle)field2.GetValue(method);
		}
		return method.MethodHandle;
	}

	public static long GetMethodStart(MethodBase method, out Exception exception)
	{
		RuntimeMethodHandle runtimeMethodHandle = GetRuntimeMethodHandle(method);
		try
		{
			RuntimeHelpers.PrepareMethod(runtimeMethodHandle);
		}
		catch (Exception)
		{
		}
		try
		{
			exception = null;
			return runtimeMethodHandle.GetFunctionPointer().ToInt64();
		}
		catch (Exception ex2)
		{
			exception = ex2;
			return 0L;
		}
	}

	public unsafe static bool CompareBytes(long memory, byte[] values)
	{
		byte* ptr = (byte*)memory;
		foreach (byte b in values)
		{
			if (b != *ptr)
			{
				return false;
			}
			ptr++;
		}
		return true;
	}

	public unsafe static byte ReadByte(long memory)
	{
		byte* ptr = (byte*)memory;
		return *ptr;
	}

	public unsafe static int ReadInt(long memory)
	{
		int* ptr = (int*)memory;
		return *ptr;
	}

	public unsafe static long ReadLong(long memory)
	{
		long* ptr = (long*)memory;
		return *ptr;
	}

	public unsafe static long WriteByte(long memory, byte value)
	{
		byte* ptr = (byte*)memory;
		*ptr = value;
		return memory + 1;
	}

	public static long WriteBytes(long memory, byte[] values)
	{
		foreach (byte value in values)
		{
			memory = WriteByte(memory, value);
		}
		return memory;
	}

	public unsafe static long WriteInt(long memory, int value)
	{
		int* ptr = (int*)memory;
		*ptr = value;
		return memory + 4;
	}

	public unsafe static long WriteLong(long memory, long value)
	{
		long* ptr = (long*)memory;
		*ptr = value;
		return memory + 8;
	}
}
