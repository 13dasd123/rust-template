using System;
using System.Collections.Generic;
using System.Reflection;
using Harmony;

public class AccessCache
{
	private Dictionary<Type, Dictionary<string, FieldInfo>> fields = new Dictionary<Type, Dictionary<string, FieldInfo>>();

	private Dictionary<Type, Dictionary<string, PropertyInfo>> properties = new Dictionary<Type, Dictionary<string, PropertyInfo>>();

	private readonly Dictionary<Type, Dictionary<string, Dictionary<int, MethodBase>>> methods = new Dictionary<Type, Dictionary<string, Dictionary<int, MethodBase>>>();

	[UpgradeToLatestVersion(1)]
	public FieldInfo GetFieldInfo(Type type, string name)
	{
		Dictionary<string, FieldInfo> value = null;
		if (!fields.TryGetValue(type, out value))
		{
			value = new Dictionary<string, FieldInfo>();
			fields.Add(type, value);
		}
		FieldInfo value2 = null;
		if (!value.TryGetValue(name, out value2))
		{
			value2 = AccessTools.Field(type, name);
			value.Add(name, value2);
		}
		return value2;
	}

	public PropertyInfo GetPropertyInfo(Type type, string name)
	{
		Dictionary<string, PropertyInfo> value = null;
		if (!properties.TryGetValue(type, out value))
		{
			value = new Dictionary<string, PropertyInfo>();
			properties.Add(type, value);
		}
		PropertyInfo value2 = null;
		if (!value.TryGetValue(name, out value2))
		{
			value2 = AccessTools.Property(type, name);
			value.Add(name, value2);
		}
		return value2;
	}

	private static int CombinedHashCode(IEnumerable<object> objects)
	{
		int num = 352654597;
		int num2 = num;
		int num3 = 0;
		foreach (object @object in objects)
		{
			if (num3 % 2 == 0)
			{
				num = ((num << 5) + num + (num >> 27)) ^ @object.GetHashCode();
			}
			else
			{
				num2 = ((num2 << 5) + num2 + (num2 >> 27)) ^ @object.GetHashCode();
			}
			num3++;
		}
		return num + num2 * 1566083941;
	}

	public MethodBase GetMethodInfo(Type type, string name, Type[] arguments)
	{
		Dictionary<string, Dictionary<int, MethodBase>> value = null;
		methods.TryGetValue(type, out value);
		if (value == null)
		{
			value = new Dictionary<string, Dictionary<int, MethodBase>>();
			methods.Add(type, value);
		}
		Dictionary<int, MethodBase> value2 = null;
		value.TryGetValue(name, out value2);
		if (value2 == null)
		{
			value2 = new Dictionary<int, MethodBase>();
			value.Add(name, value2);
		}
		MethodBase value3 = null;
		int key = CombinedHashCode(arguments);
		value2.TryGetValue(key, out value3);
		if (value3 == null)
		{
			value3 = AccessTools.Method(type, name, arguments);
			value2.Add(key, value3);
		}
		return value3;
	}
}
