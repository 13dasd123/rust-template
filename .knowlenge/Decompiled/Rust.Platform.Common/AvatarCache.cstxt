using System;
using System.Collections.Generic;
using UnityEngine;

public class AvatarCache
{
	private readonly struct Entry
	{
		public readonly ulong UserId;

		public readonly Texture2D Texture;

		public Entry(ulong userId, Texture2D texture)
		{
			UserId = userId;
			Texture = texture;
		}
	}

	private readonly Dictionary<ulong, Entry> _entries;

	private readonly Action<ulong, Texture2D> _loadAvatar;

	public AvatarCache(Action<ulong, Texture2D> loadAvatar)
	{
		_entries = new Dictionary<ulong, Entry>();
		_loadAvatar = loadAvatar ?? throw new ArgumentNullException("loadAvatar");
	}

	public Texture2D Get(ulong userId)
	{
		//IL_001d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0022: Unknown result type (might be due to invalid IL or missing references)
		//IL_0038: Unknown result type (might be due to invalid IL or missing references)
		//IL_003f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0046: Unknown result type (might be due to invalid IL or missing references)
		//IL_004e: Expected O, but got Unknown
		//IL_0060: Unknown result type (might be due to invalid IL or missing references)
		//IL_0065: Unknown result type (might be due to invalid IL or missing references)
		if (_entries.TryGetValue(userId, out var value))
		{
			return value.Texture;
		}
		Texture2D val = new Texture2D(64, 64, (TextureFormat)5, true)
		{
			name = $"Avatar_{userId}",
			filterMode = (FilterMode)2,
			wrapMode = (TextureWrapMode)1,
			anisoLevel = 8
		};
		for (int i = 0; i < ((Texture)val).width; i++)
		{
			for (int j = 0; j < ((Texture)val).height; j++)
			{
				val.SetPixel(i, j, Color32.op_Implicit(new Color32((byte)0, (byte)0, (byte)0, (byte)20)));
			}
		}
		val.Apply(true);
		Entry value2 = new Entry(userId, val);
		_entries.Add(userId, value2);
		_loadAvatar(userId, val);
		return val;
	}
}
