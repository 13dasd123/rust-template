using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Sockets;

public readonly struct ServerInfo
{
	public uint AppId { get; }

	public string Name { get; }

	public IPAddress Address { get; }

	public uint AddressRaw { get; }

	public int ConnectionPort { get; }

	public int QueryPort { get; }

	public string Map { get; }

	public string TagString { get; }

	public bool IsSecure { get; }

	public int Players { get; }

	public int MaxPlayers { get; }

	public uint LastTimePlayed { get; }

	public int Ping { get; }

	public ulong SteamId { get; }

	public uint Born { get; }

	public IReadOnlyList<string> Tags { get; }

	public string ConnectionProtocol { get; }

	public string ConnectionString { get; }

	public ServerInfo(uint appId, string name, IPAddress address, int connectionPort, int queryPort, string map, string tagString, bool isSecure, int players, int maxPlayers, uint lastTimePlayed, int ping, ulong steamId)
	{
		AppId = appId;
		Name = name;
		Address = address ?? throw new ArgumentNullException("address");
		AddressRaw = AddressToUInt32(address);
		ConnectionPort = connectionPort;
		QueryPort = queryPort;
		Map = map;
		TagString = tagString;
		IsSecure = isSecure;
		Tags = tagString?.Split(',') ?? Array.Empty<string>();
		ConnectionProtocol = string.Empty;
		foreach (string tag in Tags)
		{
			if (tag.StartsWith("cp"))
			{
				int.TryParse(tag.Substring(2), out players);
			}
			if (tag.StartsWith("mp"))
			{
				int.TryParse(tag.Substring(2), out maxPlayers);
			}
			if (tag.StartsWith("pt"))
			{
				ConnectionProtocol = tag.Substring(2);
			}
		}
		ConnectionString = ((ConnectionProtocol == "sdr") ? $"{steamId}:{connectionPort}" : $"{address}:{connectionPort}");
		Players = players;
		MaxPlayers = maxPlayers;
		LastTimePlayed = lastTimePlayed;
		Ping = ping;
		SteamId = steamId;
		uint result = 0u;
		string text = Tags.FirstOrDefault((string x) => x.StartsWith("born"));
		if (text != null)
		{
			uint.TryParse(text.Substring(4), out result);
		}
		Born = result;
	}

	private static uint AddressToUInt32(IPAddress address)
	{
		if (address.AddressFamily != AddressFamily.InterNetwork)
		{
			return 0u;
		}
		return Swap((uint)address.Address);
	}

	private static uint Swap(uint x)
	{
		return ((x & 0xFF) << 24) + ((x & 0xFF00) << 8) + ((x & 0xFF0000) >> 8) + ((x & 0xFF000000u) >> 24);
	}
}
