using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Sockets;
using Facepunch;

public readonly struct ServerInfo
{
	public enum Protocol
	{
		Default,
		Raknet,
		Steamworks
	}

	private static readonly HashSet<StringView> EmptyTags = new HashSet<StringView>();

	public uint AppId { get; }

	public string Name { get; }

	public IPAddress Address { get; }

	public uint AddressRaw { get; }

	public int ConnectionPort { get; }

	public int QueryPort { get; }

	public string Map { get; }

	public string TagString { get; }

	public bool IsSecure { get; }

	public int Players { get; }

	public int MaxPlayers { get; }

	public uint LastTimePlayed { get; }

	public int Ping { get; }

	public ulong SteamId { get; }

	public StringView RegionCode { get; }

	public uint Born { get; }

	public HashSet<StringView> Tags { get; }

	public bool HasPremiumTag => false;

	public Protocol ConnectionProtocol { get; }

	public string ConnectionString => $"{Address}:{ConnectionPort}";

	public ServerInfo(uint appId, string name, IPAddress address, int connectionPort, int queryPort, string map, string tagString, bool isSecure, int players, int maxPlayers, uint lastTimePlayed, int ping, ulong steamId, int authedPlayers = int.MaxValue)
	{
		//IL_005e: Unknown result type (might be due to invalid IL or missing references)
		//IL_007d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0082: Unknown result type (might be due to invalid IL or missing references)
		//IL_00ce: Unknown result type (might be due to invalid IL or missing references)
		//IL_00d3: Unknown result type (might be due to invalid IL or missing references)
		//IL_00dc: Unknown result type (might be due to invalid IL or missing references)
		//IL_0109: Unknown result type (might be due to invalid IL or missing references)
		//IL_00eb: Unknown result type (might be due to invalid IL or missing references)
		//IL_0136: Unknown result type (might be due to invalid IL or missing references)
		//IL_0118: Unknown result type (might be due to invalid IL or missing references)
		//IL_018b: Unknown result type (might be due to invalid IL or missing references)
		//IL_0145: Unknown result type (might be due to invalid IL or missing references)
		//IL_014a: Unknown result type (might be due to invalid IL or missing references)
		//IL_014c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0153: Unknown result type (might be due to invalid IL or missing references)
		//IL_01ae: Unknown result type (might be due to invalid IL or missing references)
		//IL_019b: Unknown result type (might be due to invalid IL or missing references)
		//IL_01a0: Unknown result type (might be due to invalid IL or missing references)
		//IL_0168: Unknown result type (might be due to invalid IL or missing references)
		//IL_016f: Unknown result type (might be due to invalid IL or missing references)
		//IL_01bd: Unknown result type (might be due to invalid IL or missing references)
		AppId = appId;
		Name = name;
		Address = address ?? throw new ArgumentNullException("address");
		AddressRaw = AddressToUInt32(address);
		ConnectionPort = connectionPort;
		QueryPort = queryPort;
		Map = map;
		TagString = tagString;
		IsSecure = isSecure;
		RegionCode = default(StringView);
		if (!string.IsNullOrEmpty(TagString))
		{
			List<StringView> list = Pool.Get<List<StringView>>();
			StringView val = StringView.op_Implicit(TagString);
			((StringView)(ref val)).Split(',', (ICollection<StringView>)list);
			Tags = new HashSet<StringView>(list, (IEqualityComparer<StringView>?)ComparerIgnoreCase.Instance);
			Pool.FreeUnmanaged<StringView>(ref list);
		}
		else
		{
			Tags = EmptyTags;
		}
		ConnectionProtocol = Protocol.Default;
		uint result = 0u;
		foreach (StringView tag in Tags)
		{
			StringView current = tag;
			if (((StringView)(ref current)).StartsWith(StringView.op_Implicit("cp")))
			{
				int.TryParse(StringView.op_Implicit(((StringView)(ref current)).Substring(2)), out players);
			}
			else if (((StringView)(ref current)).StartsWith(StringView.op_Implicit("mp")))
			{
				int.TryParse(StringView.op_Implicit(((StringView)(ref current)).Substring(2)), out maxPlayers);
			}
			else if (((StringView)(ref current)).StartsWith(StringView.op_Implicit("pt")))
			{
				StringView val2 = ((StringView)(ref current)).Substring(2);
				if (val2 == StringView.op_Implicit("sw"))
				{
					ConnectionProtocol = Protocol.Steamworks;
				}
				else if (val2 == StringView.op_Implicit("rak"))
				{
					ConnectionProtocol = Protocol.Raknet;
				}
			}
			else if (((StringView)(ref current)).StartsWith(StringView.op_Implicit("$r")))
			{
				RegionCode = ((StringView)(ref current)).Substring(2);
			}
			else if (((StringView)(ref current)).StartsWith(StringView.op_Implicit("born")))
			{
				uint.TryParse(StringView.op_Implicit(((StringView)(ref current)).Substring(4)), out result);
			}
		}
		Players = Math.Min(players, authedPlayers);
		MaxPlayers = maxPlayers;
		LastTimePlayed = lastTimePlayed;
		Ping = ping;
		SteamId = steamId;
		Born = result;
	}

	private static uint AddressToUInt32(IPAddress address)
	{
		if (address.AddressFamily != AddressFamily.InterNetwork)
		{
			return 0u;
		}
		return Swap((uint)address.Address);
	}

	private static uint Swap(uint x)
	{
		return ((x & 0xFF) << 24) + ((x & 0xFF00) << 8) + ((x & 0xFF0000) >> 8) + ((x & 0xFF000000u) >> 24);
	}
}
