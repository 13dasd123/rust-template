using System;
using System.Text;
using Facepunch.Steamworks;
using SteamNative;

internal class SteamAppList : IDisposable
{
	internal Platform.Interface platform;

	internal BaseSteamworks steamworks;

	public bool IsValid
	{
		get
		{
			if (platform != null)
			{
				return platform.IsValid;
			}
			return false;
		}
	}

	internal SteamAppList(BaseSteamworks steamworks, IntPtr pointer)
	{
		this.steamworks = steamworks;
		if (Platform.IsWindows64)
		{
			platform = new Platform.Win64(pointer);
		}
		else if (Platform.IsWindows32)
		{
			platform = new Platform.Win32(pointer);
		}
		else if (Platform.IsLinux32)
		{
			platform = new Platform.Linux32(pointer);
		}
		else if (Platform.IsLinux64)
		{
			platform = new Platform.Linux64(pointer);
		}
		else if (Platform.IsOsx)
		{
			platform = new Platform.Mac(pointer);
		}
	}

	public virtual void Dispose()
	{
		if (platform != null)
		{
			platform.Dispose();
			platform = null;
		}
	}

	public int GetAppBuildId(AppId_t nAppID)
	{
		return platform.ISteamAppList_GetAppBuildId(nAppID.Value);
	}

	public string GetAppInstallDir(AppId_t nAppID)
	{
		StringBuilder stringBuilder = Helpers.TakeStringBuilder();
		int cchNameMax = 4096;
		if (platform.ISteamAppList_GetAppInstallDir(nAppID.Value, stringBuilder, cchNameMax) <= 0)
		{
			return null;
		}
		return stringBuilder.ToString();
	}

	public string GetAppName(AppId_t nAppID)
	{
		StringBuilder stringBuilder = Helpers.TakeStringBuilder();
		int cchNameMax = 4096;
		if (platform.ISteamAppList_GetAppName(nAppID.Value, stringBuilder, cchNameMax) <= 0)
		{
			return null;
		}
		return stringBuilder.ToString();
	}

	public unsafe uint GetInstalledApps(AppId_t[] pvecAppID)
	{
		uint unMaxAppIDs = (uint)pvecAppID.Length;
		fixed (AppId_t* ptr = pvecAppID)
		{
			return platform.ISteamAppList_GetInstalledApps((IntPtr)ptr, unMaxAppIDs);
		}
	}

	public uint GetNumInstalledApps()
	{
		return platform.ISteamAppList_GetNumInstalledApps();
	}
}
