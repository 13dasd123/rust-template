using System;
using System.Collections.Generic;
using System.Linq;
using Facepunch.Steamworks;
using SteamNative;

public class Achievements : IDisposable
{
	internal Client client;

	private List<Achievement> unlockedRecently = new List<Achievement>();

	public Achievement[] All { get; private set; }

	public event Action OnUpdated;

	public event Action<Achievement> OnAchievementStateChanged;

	internal Achievements(Client c)
	{
		client = c;
		All = new Achievement[0];
		c.RegisterCallback<UserStatsReceived_t>(UserStatsReceived);
		c.RegisterCallback<UserStatsStored_t>(UserStatsStored);
		Refresh();
	}

	public void Refresh()
	{
		Achievement[] old = All;
		All = Enumerable.Range(0, (int)client.native.userstats.GetNumAchievements()).Select(delegate(int x)
		{
			if (old != null)
			{
				string name = client.native.userstats.GetAchievementName((uint)x);
				Achievement achievement = old.FirstOrDefault((Achievement y) => y.Id == name);
				if (achievement != null)
				{
					if (achievement.Refresh())
					{
						unlockedRecently.Add(achievement);
					}
					return achievement;
				}
			}
			return new Achievement(client, x);
		}).ToArray();
		foreach (Achievement item in unlockedRecently)
		{
			OnUnlocked(item);
		}
		unlockedRecently.Clear();
	}

	internal void OnUnlocked(Achievement a)
	{
		this.OnAchievementStateChanged?.Invoke(a);
	}

	public void Dispose()
	{
		client = null;
	}

	public Achievement Find(string identifier)
	{
		return All.FirstOrDefault((Achievement x) => x.Id == identifier);
	}

	public bool Trigger(string identifier, bool apply = true)
	{
		return Find(identifier)?.Trigger(apply) ?? false;
	}

	public bool Reset(string identifier)
	{
		return client.native.userstats.ClearAchievement(identifier);
	}

	private void UserStatsReceived(UserStatsReceived_t stats)
	{
		if (stats.GameID == client.AppId)
		{
			Refresh();
			this.OnUpdated?.Invoke();
		}
	}

	private void UserStatsStored(UserStatsStored_t stats)
	{
		if (stats.GameID == client.AppId)
		{
			Refresh();
			this.OnUpdated?.Invoke();
		}
	}
}
