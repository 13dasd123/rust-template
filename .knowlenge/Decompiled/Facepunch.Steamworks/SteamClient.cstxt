using System;
using Facepunch.Steamworks;
using SteamNative;

internal class SteamClient : IDisposable
{
	internal Platform.Interface platform;

	internal BaseSteamworks steamworks;

	public bool IsValid => platform != null && platform.IsValid;

	internal SteamClient(BaseSteamworks steamworks, IntPtr pointer)
	{
		this.steamworks = steamworks;
		if (Platform.IsWindows64)
		{
			platform = new Platform.Win64(pointer);
		}
		else if (Platform.IsWindows32)
		{
			platform = new Platform.Win32(pointer);
		}
		else if (Platform.IsLinux32)
		{
			platform = new Platform.Linux32(pointer);
		}
		else if (Platform.IsLinux64)
		{
			platform = new Platform.Linux64(pointer);
		}
		else if (Platform.IsOsx)
		{
			platform = new Platform.Mac(pointer);
		}
	}

	public virtual void Dispose()
	{
		if (platform != null)
		{
			platform.Dispose();
			platform = null;
		}
	}

	public bool BReleaseSteamPipe(HSteamPipe hSteamPipe)
	{
		return platform.ISteamClient_BReleaseSteamPipe(hSteamPipe.Value);
	}

	public bool BShutdownIfAllPipesClosed()
	{
		return platform.ISteamClient_BShutdownIfAllPipesClosed();
	}

	public HSteamUser ConnectToGlobalUser(HSteamPipe hSteamPipe)
	{
		return platform.ISteamClient_ConnectToGlobalUser(hSteamPipe.Value);
	}

	public HSteamUser CreateLocalUser(out HSteamPipe phSteamPipe, AccountType eAccountType)
	{
		return platform.ISteamClient_CreateLocalUser(out phSteamPipe.Value, eAccountType);
	}

	public HSteamPipe CreateSteamPipe()
	{
		return platform.ISteamClient_CreateSteamPipe();
	}

	public uint GetIPCCallCount()
	{
		return platform.ISteamClient_GetIPCCallCount();
	}

	public SteamAppList GetISteamAppList(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
	{
		IntPtr pointer = platform.ISteamClient_GetISteamAppList(hSteamUser.Value, hSteamPipe.Value, pchVersion);
		return new SteamAppList(steamworks, pointer);
	}

	public SteamApps GetISteamApps(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
	{
		IntPtr pointer = platform.ISteamClient_GetISteamApps(hSteamUser.Value, hSteamPipe.Value, pchVersion);
		return new SteamApps(steamworks, pointer);
	}

	public SteamController GetISteamController(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
	{
		IntPtr pointer = platform.ISteamClient_GetISteamController(hSteamUser.Value, hSteamPipe.Value, pchVersion);
		return new SteamController(steamworks, pointer);
	}

	public SteamFriends GetISteamFriends(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
	{
		IntPtr pointer = platform.ISteamClient_GetISteamFriends(hSteamUser.Value, hSteamPipe.Value, pchVersion);
		return new SteamFriends(steamworks, pointer);
	}

	public SteamGameServer GetISteamGameServer(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
	{
		IntPtr pointer = platform.ISteamClient_GetISteamGameServer(hSteamUser.Value, hSteamPipe.Value, pchVersion);
		return new SteamGameServer(steamworks, pointer);
	}

	public SteamGameServerStats GetISteamGameServerStats(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
	{
		IntPtr pointer = platform.ISteamClient_GetISteamGameServerStats(hSteamuser.Value, hSteamPipe.Value, pchVersion);
		return new SteamGameServerStats(steamworks, pointer);
	}

	public IntPtr GetISteamGenericInterface(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
	{
		return platform.ISteamClient_GetISteamGenericInterface(hSteamUser.Value, hSteamPipe.Value, pchVersion);
	}

	public SteamHTMLSurface GetISteamHTMLSurface(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
	{
		IntPtr pointer = platform.ISteamClient_GetISteamHTMLSurface(hSteamuser.Value, hSteamPipe.Value, pchVersion);
		return new SteamHTMLSurface(steamworks, pointer);
	}

	public SteamHTTP GetISteamHTTP(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
	{
		IntPtr pointer = platform.ISteamClient_GetISteamHTTP(hSteamuser.Value, hSteamPipe.Value, pchVersion);
		return new SteamHTTP(steamworks, pointer);
	}

	public SteamInventory GetISteamInventory(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
	{
		IntPtr pointer = platform.ISteamClient_GetISteamInventory(hSteamuser.Value, hSteamPipe.Value, pchVersion);
		return new SteamInventory(steamworks, pointer);
	}

	public SteamMatchmaking GetISteamMatchmaking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
	{
		IntPtr pointer = platform.ISteamClient_GetISteamMatchmaking(hSteamUser.Value, hSteamPipe.Value, pchVersion);
		return new SteamMatchmaking(steamworks, pointer);
	}

	public SteamMatchmakingServers GetISteamMatchmakingServers(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
	{
		IntPtr pointer = platform.ISteamClient_GetISteamMatchmakingServers(hSteamUser.Value, hSteamPipe.Value, pchVersion);
		return new SteamMatchmakingServers(steamworks, pointer);
	}

	public SteamMusic GetISteamMusic(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
	{
		IntPtr pointer = platform.ISteamClient_GetISteamMusic(hSteamuser.Value, hSteamPipe.Value, pchVersion);
		return new SteamMusic(steamworks, pointer);
	}

	public SteamMusicRemote GetISteamMusicRemote(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
	{
		IntPtr pointer = platform.ISteamClient_GetISteamMusicRemote(hSteamuser.Value, hSteamPipe.Value, pchVersion);
		return new SteamMusicRemote(steamworks, pointer);
	}

	public SteamNetworking GetISteamNetworking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
	{
		IntPtr pointer = platform.ISteamClient_GetISteamNetworking(hSteamUser.Value, hSteamPipe.Value, pchVersion);
		return new SteamNetworking(steamworks, pointer);
	}

	public SteamParentalSettings GetISteamParentalSettings(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
	{
		IntPtr pointer = platform.ISteamClient_GetISteamParentalSettings(hSteamuser.Value, hSteamPipe.Value, pchVersion);
		return new SteamParentalSettings(steamworks, pointer);
	}

	public SteamRemoteStorage GetISteamRemoteStorage(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
	{
		IntPtr pointer = platform.ISteamClient_GetISteamRemoteStorage(hSteamuser.Value, hSteamPipe.Value, pchVersion);
		return new SteamRemoteStorage(steamworks, pointer);
	}

	public SteamScreenshots GetISteamScreenshots(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
	{
		IntPtr pointer = platform.ISteamClient_GetISteamScreenshots(hSteamuser.Value, hSteamPipe.Value, pchVersion);
		return new SteamScreenshots(steamworks, pointer);
	}

	public SteamUGC GetISteamUGC(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
	{
		IntPtr pointer = platform.ISteamClient_GetISteamUGC(hSteamUser.Value, hSteamPipe.Value, pchVersion);
		return new SteamUGC(steamworks, pointer);
	}

	public SteamUser GetISteamUser(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
	{
		IntPtr pointer = platform.ISteamClient_GetISteamUser(hSteamUser.Value, hSteamPipe.Value, pchVersion);
		return new SteamUser(steamworks, pointer);
	}

	public SteamUserStats GetISteamUserStats(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
	{
		IntPtr pointer = platform.ISteamClient_GetISteamUserStats(hSteamUser.Value, hSteamPipe.Value, pchVersion);
		return new SteamUserStats(steamworks, pointer);
	}

	public SteamUtils GetISteamUtils(HSteamPipe hSteamPipe, string pchVersion)
	{
		IntPtr pointer = platform.ISteamClient_GetISteamUtils(hSteamPipe.Value, pchVersion);
		return new SteamUtils(steamworks, pointer);
	}

	public SteamVideo GetISteamVideo(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
	{
		IntPtr pointer = platform.ISteamClient_GetISteamVideo(hSteamuser.Value, hSteamPipe.Value, pchVersion);
		return new SteamVideo(steamworks, pointer);
	}

	public void ReleaseUser(HSteamPipe hSteamPipe, HSteamUser hUser)
	{
		platform.ISteamClient_ReleaseUser(hSteamPipe.Value, hUser.Value);
	}

	public void SetLocalIPBinding(uint unIP, ushort usPort)
	{
		platform.ISteamClient_SetLocalIPBinding(unIP, usPort);
	}

	public void SetWarningMessageHook(IntPtr pFunction)
	{
		platform.ISteamClient_SetWarningMessageHook(pFunction);
	}
}
