using System;
using System.Runtime.InteropServices;
using Facepunch.Steamworks;
using SteamNative;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct GamepadTextInputDismissed_t
{
	[StructLayout(LayoutKind.Sequential, Pack = 4)]
	internal struct PackSmall
	{
		[MarshalAs(UnmanagedType.I1)]
		public bool Submitted;

		public uint SubmittedText;

		public static implicit operator GamepadTextInputDismissed_t(PackSmall d)
		{
			GamepadTextInputDismissed_t result = default(GamepadTextInputDismissed_t);
			result.Submitted = d.Submitted;
			result.SubmittedText = d.SubmittedText;
			return result;
		}
	}

	public const int CallbackId = 714;

	[MarshalAs(UnmanagedType.I1)]
	public bool Submitted;

	public uint SubmittedText;

	public static GamepadTextInputDismissed_t FromPointer(IntPtr p)
	{
		if (Platform.PackSmall)
		{
			return (PackSmall)Marshal.PtrToStructure(p, typeof(PackSmall));
		}
		return (GamepadTextInputDismissed_t)Marshal.PtrToStructure(p, typeof(GamepadTextInputDismissed_t));
	}

	public static void RegisterCallback(BaseSteamworks steamworks, Action<GamepadTextInputDismissed_t, bool> CallbackFunction)
	{
		CallbackHandle callbackHandle = new CallbackHandle();
		callbackHandle.steamworks = steamworks;
		if (Config.UseThisCall)
		{
			Callback.ThisCall.Result result = delegate(IntPtr _, IntPtr p)
			{
				CallbackFunction(FromPointer(p), arg2: false);
			};
			Callback.ThisCall.ResultWithInfo resultWithInfo = delegate(IntPtr _, IntPtr p, bool bIOFailure, SteamAPICall_t hSteamAPICall)
			{
				CallbackFunction(FromPointer(p), bIOFailure);
			};
			Callback.ThisCall.GetSize getSize = (IntPtr _) => Marshal.SizeOf(typeof(GamepadTextInputDismissed_t));
			if (Platform.PackSmall)
			{
				getSize = (IntPtr _) => Marshal.SizeOf(typeof(PackSmall));
			}
			callbackHandle.FuncA = GCHandle.Alloc(result);
			callbackHandle.FuncB = GCHandle.Alloc(resultWithInfo);
			callbackHandle.FuncC = GCHandle.Alloc(getSize);
			callbackHandle.vTablePtr = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(Callback.VTable)));
			Callback.VTable vTable = new Callback.VTable
			{
				ResultA = Marshal.GetFunctionPointerForDelegate(result),
				ResultB = Marshal.GetFunctionPointerForDelegate(resultWithInfo),
				GetSize = Marshal.GetFunctionPointerForDelegate(getSize)
			};
			if (Platform.IsWindows)
			{
				vTable.ResultA = Marshal.GetFunctionPointerForDelegate(resultWithInfo);
				vTable.ResultB = Marshal.GetFunctionPointerForDelegate(result);
			}
			Marshal.StructureToPtr(vTable, callbackHandle.vTablePtr, fDeleteOld: false);
		}
		else
		{
			Callback.StdCall.Result result2 = delegate(IntPtr p)
			{
				CallbackFunction(FromPointer(p), arg2: false);
			};
			Callback.StdCall.ResultWithInfo resultWithInfo2 = delegate(IntPtr p, bool bIOFailure, SteamAPICall_t hSteamAPICall)
			{
				CallbackFunction(FromPointer(p), bIOFailure);
			};
			Callback.StdCall.GetSize getSize2 = () => Marshal.SizeOf(typeof(GamepadTextInputDismissed_t));
			if (Platform.PackSmall)
			{
				getSize2 = () => Marshal.SizeOf(typeof(PackSmall));
			}
			callbackHandle.FuncA = GCHandle.Alloc(result2);
			callbackHandle.FuncB = GCHandle.Alloc(resultWithInfo2);
			callbackHandle.FuncC = GCHandle.Alloc(getSize2);
			callbackHandle.vTablePtr = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(Callback.VTable)));
			Callback.VTable vTable2 = new Callback.VTable
			{
				ResultA = Marshal.GetFunctionPointerForDelegate(result2),
				ResultB = Marshal.GetFunctionPointerForDelegate(resultWithInfo2),
				GetSize = Marshal.GetFunctionPointerForDelegate(getSize2)
			};
			if (Platform.IsWindows)
			{
				vTable2.ResultA = Marshal.GetFunctionPointerForDelegate(resultWithInfo2);
				vTable2.ResultB = Marshal.GetFunctionPointerForDelegate(result2);
			}
			Marshal.StructureToPtr(vTable2, callbackHandle.vTablePtr, fDeleteOld: false);
		}
		Callback callback = new Callback();
		callback.vTablePtr = callbackHandle.vTablePtr;
		callback.CallbackFlags = (byte)(steamworks.IsGameServer ? 2 : 0);
		callback.CallbackId = 714;
		callbackHandle.PinnedCallback = GCHandle.Alloc(callback, GCHandleType.Pinned);
		steamworks.native.api.SteamAPI_RegisterCallback(callbackHandle.PinnedCallback.AddrOfPinnedObject(), 714);
		steamworks.RegisterCallbackHandle(callbackHandle);
	}
}
