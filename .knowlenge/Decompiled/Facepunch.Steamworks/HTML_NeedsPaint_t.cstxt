using System;
using System.Runtime.InteropServices;
using SteamNative;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct HTML_NeedsPaint_t
{
	[StructLayout(LayoutKind.Sequential, Pack = 4)]
	internal struct PackSmall
	{
		internal uint UnBrowserHandle;

		internal string PBGRA;

		internal uint UnWide;

		internal uint UnTall;

		internal uint UnUpdateX;

		internal uint UnUpdateY;

		internal uint UnUpdateWide;

		internal uint UnUpdateTall;

		internal uint UnScrollX;

		internal uint UnScrollY;

		internal float FlPageScale;

		internal uint UnPageSerial;

		public static implicit operator HTML_NeedsPaint_t(PackSmall d)
		{
			HTML_NeedsPaint_t result = default(HTML_NeedsPaint_t);
			result.UnBrowserHandle = d.UnBrowserHandle;
			result.PBGRA = d.PBGRA;
			result.UnWide = d.UnWide;
			result.UnTall = d.UnTall;
			result.UnUpdateX = d.UnUpdateX;
			result.UnUpdateY = d.UnUpdateY;
			result.UnUpdateWide = d.UnUpdateWide;
			result.UnUpdateTall = d.UnUpdateTall;
			result.UnScrollX = d.UnScrollX;
			result.UnScrollY = d.UnScrollY;
			result.FlPageScale = d.FlPageScale;
			result.UnPageSerial = d.UnPageSerial;
			return result;
		}
	}

	internal uint UnBrowserHandle;

	internal string PBGRA;

	internal uint UnWide;

	internal uint UnTall;

	internal uint UnUpdateX;

	internal uint UnUpdateY;

	internal uint UnUpdateWide;

	internal uint UnUpdateTall;

	internal uint UnScrollX;

	internal uint UnScrollY;

	internal float FlPageScale;

	internal uint UnPageSerial;

	internal static HTML_NeedsPaint_t FromPointer(IntPtr p)
	{
		if (Platform.PackSmall)
		{
			return (PackSmall)Marshal.PtrToStructure(p, typeof(PackSmall));
		}
		return (HTML_NeedsPaint_t)Marshal.PtrToStructure(p, typeof(HTML_NeedsPaint_t));
	}

	internal static int StructSize()
	{
		if (Platform.PackSmall)
		{
			return Marshal.SizeOf(typeof(PackSmall));
		}
		return Marshal.SizeOf(typeof(HTML_NeedsPaint_t));
	}
}
