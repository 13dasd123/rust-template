using System;
using System.Runtime.InteropServices;
using Facepunch.Steamworks;

internal class CallbackHandle : IDisposable
{
	internal BaseSteamworks Steamworks;

	internal GCHandle FuncA;

	internal GCHandle FuncB;

	internal GCHandle FuncC;

	internal IntPtr vTablePtr;

	internal GCHandle PinnedCallback;

	public virtual bool IsValid => true;

	internal CallbackHandle(BaseSteamworks steamworks)
	{
		Steamworks = steamworks;
	}

	public void Dispose()
	{
		UnregisterCallback();
		if (FuncA.IsAllocated)
		{
			FuncA.Free();
		}
		if (FuncB.IsAllocated)
		{
			FuncB.Free();
		}
		if (FuncC.IsAllocated)
		{
			FuncC.Free();
		}
		if (PinnedCallback.IsAllocated)
		{
			PinnedCallback.Free();
		}
		if (vTablePtr != IntPtr.Zero)
		{
			Marshal.FreeHGlobal(vTablePtr);
			vTablePtr = IntPtr.Zero;
		}
	}

	private void UnregisterCallback()
	{
		if (PinnedCallback.IsAllocated)
		{
			Steamworks.native.api.SteamAPI_UnregisterCallback(PinnedCallback.AddrOfPinnedObject());
		}
	}
}
