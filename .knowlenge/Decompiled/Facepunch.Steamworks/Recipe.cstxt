using System;
using System.Linq;

public struct Recipe
{
	public struct Ingredient
	{
		public int DefinitionId;

		public Definition Definition;

		public int Count;

		internal static Ingredient FromString(string part, Definition[] definitions)
		{
			Ingredient i = default(Ingredient);
			i.Count = 1;
			try
			{
				if (part.Contains('x'))
				{
					int num = part.IndexOf('x');
					int result = 0;
					if (int.TryParse(part.Substring(num + 1), out result))
					{
						i.Count = result;
					}
					part = part.Substring(0, num);
				}
				i.DefinitionId = int.Parse(part);
				i.Definition = definitions.FirstOrDefault((Definition x) => x.Id == i.DefinitionId);
			}
			catch (Exception)
			{
				return i;
			}
			return i;
		}
	}

	public Definition Result;

	public Ingredient[] Ingredients;

	internal static Recipe FromString(string part, Definition[] definitions, Definition Result)
	{
		Recipe recipe = default(Recipe);
		recipe.Result = Result;
		string[] source = part.Split(new char[1] { ',' }, StringSplitOptions.RemoveEmptyEntries);
		recipe.Ingredients = (from x in source
			select Ingredient.FromString(x, definitions) into x
			where x.DefinitionId != 0
			select x).ToArray();
		Ingredient[] ingredients = recipe.Ingredients;
		for (int i = 0; i < ingredients.Length; i++)
		{
			Ingredient ingredient = ingredients[i];
			if (ingredient.Definition != null)
			{
				ingredient.Definition.InRecipe(recipe);
			}
		}
		return recipe;
	}
}
