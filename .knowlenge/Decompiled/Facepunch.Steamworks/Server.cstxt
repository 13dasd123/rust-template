using System;
using System.Collections.Generic;
using System.Net;
using Facepunch.Steamworks.Interop;
using SteamNative;

public class Server
{
	internal Client Client;

	public Action<bool> OnReceivedRules;

	public Dictionary<string, string> Rules;

	internal ServerRules RulesRequest;

	internal const uint k_unFavoriteFlagNone = 0u;

	internal const uint k_unFavoriteFlagFavorite = 1u;

	internal const uint k_unFavoriteFlagHistory = 2u;

	public string Name { get; set; }

	public int Ping { get; set; }

	public string GameDir { get; set; }

	public string Map { get; set; }

	public string Description { get; set; }

	public uint AppId { get; set; }

	public int Players { get; set; }

	public int MaxPlayers { get; set; }

	public int BotPlayers { get; set; }

	public bool Passworded { get; set; }

	public bool Secure { get; set; }

	public uint LastTimePlayed { get; set; }

	public int Version { get; set; }

	public string[] Tags { get; set; }

	public ulong SteamId { get; set; }

	public IPAddress Address { get; set; }

	public int ConnectionPort { get; set; }

	public int QueryPort { get; set; }

	public bool Favourite => Client.ServerList.IsFavourite(this);

	public bool HasRules => Rules != null && Rules.Count > 0;

	internal static Server FromSteam(Client client, gameserveritem_t item)
	{
		Server server = new Server();
		server.Client = client;
		server.Address = Utility.Int32ToIp(item.NetAdr.IP);
		server.ConnectionPort = item.NetAdr.ConnectionPort;
		server.QueryPort = item.NetAdr.QueryPort;
		server.Name = item.ServerName;
		server.Ping = item.Ping;
		server.GameDir = item.GameDir;
		server.Map = item.Map;
		server.Description = item.GameDescription;
		server.AppId = item.AppID;
		server.Players = item.Players;
		server.MaxPlayers = item.MaxPlayers;
		server.BotPlayers = item.BotPlayers;
		server.Passworded = item.Password;
		server.Secure = item.Secure;
		server.LastTimePlayed = item.TimeLastPlayed;
		server.Version = item.ServerVersion;
		server.Tags = ((item.GameTags == null) ? null : item.GameTags.Split(','));
		server.SteamId = item.SteamID;
		return server;
	}

	public void FetchRules()
	{
		if (RulesRequest == null)
		{
			Rules = new Dictionary<string, string>();
			RulesRequest = new ServerRules(this, Address, QueryPort);
		}
	}

	internal void OnServerRulesReceiveFinished(bool Success)
	{
		RulesRequest.Dispose();
		RulesRequest = null;
		if (OnReceivedRules != null)
		{
			OnReceivedRules(Success);
		}
	}

	public void AddToHistory()
	{
		Client.native.matchmaking.AddFavoriteGame(AppId, Address.IpToInt32(), (ushort)ConnectionPort, (ushort)QueryPort, 2u, (uint)Utility.Epoch.Current);
		Client.ServerList.UpdateFavouriteList();
	}

	public void RemoveFromHistory()
	{
		Client.native.matchmaking.RemoveFavoriteGame(AppId, Address.IpToInt32(), (ushort)ConnectionPort, (ushort)QueryPort, 2u);
		Client.ServerList.UpdateFavouriteList();
	}

	public void AddToFavourites()
	{
		Client.native.matchmaking.AddFavoriteGame(AppId, Address.IpToInt32(), (ushort)ConnectionPort, (ushort)QueryPort, 1u, (uint)Utility.Epoch.Current);
		Client.ServerList.UpdateFavouriteList();
	}

	public void RemoveFromFavourites()
	{
		Client.native.matchmaking.RemoveFavoriteGame(AppId, Address.IpToInt32(), (ushort)ConnectionPort, (ushort)QueryPort, 1u);
		Client.ServerList.UpdateFavouriteList();
	}
}
