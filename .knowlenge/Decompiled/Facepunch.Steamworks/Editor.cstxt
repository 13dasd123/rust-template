using System;
using System.Collections.Generic;
using System.IO;
using SteamNative;

public class Editor
{
	public enum VisibilityType
	{
		Public,
		FriendsOnly,
		Private
	}

	internal Workshop workshop;

	internal CallbackHandle CreateItem;

	internal CallbackHandle SubmitItemUpdate;

	internal UGCUpdateHandle_t UpdateHandle;

	public ulong Id { get; internal set; }

	public string Title { get; set; } = null;

	public string Description { get; set; } = null;

	public string Folder { get; set; } = null;

	public string PreviewImage { get; set; } = null;

	public List<string> Tags { get; set; } = new List<string>();

	public bool Publishing { get; internal set; }

	public ItemType? Type { get; set; }

	public string Error { get; internal set; } = null;

	public string ChangeNote { get; set; } = "";

	public VisibilityType? Visibility { get; set; }

	public bool NeedToAgreeToWorkshopLegal { get; internal set; }

	public double Progress
	{
		get
		{
			if (!Publishing)
			{
				return 1.0;
			}
			if (CreateItem != null)
			{
				return 0.0;
			}
			if (SubmitItemUpdate == null)
			{
				return 1.0;
			}
			ulong punBytesProcessed = 0uL;
			ulong punBytesTotal = 0uL;
			workshop.steamworks.native.ugc.GetItemUpdateProgress(UpdateHandle, out punBytesProcessed, out punBytesTotal);
			if (punBytesTotal == 0)
			{
				return 0.0;
			}
			return (double)punBytesProcessed / (double)punBytesTotal;
		}
	}

	public int BytesUploaded
	{
		get
		{
			if (!Publishing)
			{
				return 0;
			}
			if (CreateItem != null)
			{
				return 0;
			}
			if (SubmitItemUpdate == null)
			{
				return 0;
			}
			ulong punBytesProcessed = 0uL;
			ulong punBytesTotal = 0uL;
			workshop.steamworks.native.ugc.GetItemUpdateProgress(UpdateHandle, out punBytesProcessed, out punBytesTotal);
			return (int)punBytesProcessed;
		}
	}

	public int BytesTotal
	{
		get
		{
			if (!Publishing)
			{
				return 0;
			}
			if (CreateItem != null)
			{
				return 0;
			}
			if (SubmitItemUpdate == null)
			{
				return 0;
			}
			ulong punBytesProcessed = 0uL;
			ulong punBytesTotal = 0uL;
			workshop.steamworks.native.ugc.GetItemUpdateProgress(UpdateHandle, out punBytesProcessed, out punBytesTotal);
			return (int)punBytesTotal;
		}
	}

	public void Publish()
	{
		Publishing = true;
		Error = null;
		if (Id == 0)
		{
			StartCreatingItem();
		}
		else
		{
			PublishChanges();
		}
	}

	private void StartCreatingItem()
	{
		if (!Type.HasValue)
		{
			throw new Exception("Editor.Type must be set when creating a new item!");
		}
		CreateItem = workshop.ugc.CreateItem(workshop.steamworks.AppId, (WorkshopFileType)Type.Value, OnItemCreated);
	}

	private void OnItemCreated(CreateItemResult_t obj, bool Failed)
	{
		NeedToAgreeToWorkshopLegal = obj.UserNeedsToAcceptWorkshopLegalAgreement;
		CreateItem.Dispose();
		if (obj.Result == Result.OK && !Failed)
		{
			Id = obj.PublishedFileId;
			PublishChanges();
			return;
		}
		Error = "Error creating new file: " + obj.Result.ToString() + "(" + obj.PublishedFileId + ")";
		Publishing = false;
	}

	private void PublishChanges()
	{
		UpdateHandle = workshop.ugc.StartItemUpdate(workshop.steamworks.AppId, Id);
		if (Title != null)
		{
			workshop.ugc.SetItemTitle(UpdateHandle, Title);
		}
		if (Description != null)
		{
			workshop.ugc.SetItemDescription(UpdateHandle, Description);
		}
		if (Folder != null)
		{
			DirectoryInfo directoryInfo = new DirectoryInfo(Folder);
			if (!directoryInfo.Exists)
			{
				throw new Exception($"Folder doesn't exist ({Folder})");
			}
			workshop.ugc.SetItemContent(UpdateHandle, Folder);
		}
		if (Tags != null && Tags.Count > 0)
		{
			workshop.ugc.SetItemTags(UpdateHandle, Tags.ToArray());
		}
		if (Visibility.HasValue)
		{
			workshop.ugc.SetItemVisibility(UpdateHandle, (RemoteStoragePublishedFileVisibility)Visibility.Value);
		}
		if (PreviewImage != null)
		{
			FileInfo fileInfo = new FileInfo(PreviewImage);
			if (!fileInfo.Exists)
			{
				throw new Exception($"PreviewImage doesn't exist ({PreviewImage})");
			}
			if (fileInfo.Length >= 1048576)
			{
				throw new Exception($"PreviewImage should be under 1MB ({fileInfo.Length})");
			}
			workshop.ugc.SetItemPreview(UpdateHandle, PreviewImage);
		}
		SubmitItemUpdate = workshop.ugc.SubmitItemUpdate(UpdateHandle, ChangeNote, OnChangesSubmitted);
	}

	private void OnChangesSubmitted(SubmitItemUpdateResult_t obj, bool Failed)
	{
		if (Failed)
		{
			throw new Exception("CreateItemResult_t Failed");
		}
		SubmitItemUpdate = null;
		NeedToAgreeToWorkshopLegal = obj.UserNeedsToAcceptWorkshopLegalAgreement;
		Publishing = false;
		if (obj.Result != Result.OK)
		{
			Error = "Error publishing changes: " + obj.Result.ToString() + " (" + NeedToAgreeToWorkshopLegal + ")";
		}
	}

	public void Delete()
	{
		workshop.remoteStorage.DeletePublishedFile(Id);
		Id = 0uL;
	}
}
