using System;
using Facepunch.Steamworks;
using SteamNative;

internal class SteamGameServerStats : IDisposable
{
	internal Platform.Interface platform;

	internal BaseSteamworks steamworks;

	public bool IsValid => platform != null && platform.IsValid;

	internal SteamGameServerStats(BaseSteamworks steamworks, IntPtr pointer)
	{
		this.steamworks = steamworks;
		if (Platform.IsWindows64)
		{
			platform = new Platform.Win64(pointer);
		}
		else if (Platform.IsWindows32)
		{
			platform = new Platform.Win32(pointer);
		}
		else if (Platform.IsLinux32)
		{
			platform = new Platform.Linux32(pointer);
		}
		else if (Platform.IsLinux64)
		{
			platform = new Platform.Linux64(pointer);
		}
		else if (Platform.IsOsx)
		{
			platform = new Platform.Mac(pointer);
		}
	}

	public virtual void Dispose()
	{
		if (platform != null)
		{
			platform.Dispose();
			platform = null;
		}
	}

	public bool ClearUserAchievement(CSteamID steamIDUser, string pchName)
	{
		return platform.ISteamGameServerStats_ClearUserAchievement(steamIDUser.Value, pchName);
	}

	public bool GetUserAchievement(CSteamID steamIDUser, string pchName, ref bool pbAchieved)
	{
		return platform.ISteamGameServerStats_GetUserAchievement(steamIDUser.Value, pchName, ref pbAchieved);
	}

	public bool GetUserStat(CSteamID steamIDUser, string pchName, out int pData)
	{
		return platform.ISteamGameServerStats_GetUserStat(steamIDUser.Value, pchName, out pData);
	}

	public bool GetUserStat0(CSteamID steamIDUser, string pchName, out float pData)
	{
		return platform.ISteamGameServerStats_GetUserStat0(steamIDUser.Value, pchName, out pData);
	}

	public CallbackHandle RequestUserStats(CSteamID steamIDUser, Action<GSStatsReceived_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamGameServerStats_RequestUserStats(steamIDUser.Value);
		if (CallbackFunction == null)
		{
			return null;
		}
		if ((ulong)steamAPICall_t == 0)
		{
			return null;
		}
		return GSStatsReceived_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public bool SetUserAchievement(CSteamID steamIDUser, string pchName)
	{
		return platform.ISteamGameServerStats_SetUserAchievement(steamIDUser.Value, pchName);
	}

	public bool SetUserStat(CSteamID steamIDUser, string pchName, int nData)
	{
		return platform.ISteamGameServerStats_SetUserStat(steamIDUser.Value, pchName, nData);
	}

	public bool SetUserStat0(CSteamID steamIDUser, string pchName, float fData)
	{
		return platform.ISteamGameServerStats_SetUserStat0(steamIDUser.Value, pchName, fData);
	}

	public CallbackHandle StoreUserStats(CSteamID steamIDUser, Action<GSStatsStored_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamGameServerStats_StoreUserStats(steamIDUser.Value);
		if (CallbackFunction == null)
		{
			return null;
		}
		if ((ulong)steamAPICall_t == 0)
		{
			return null;
		}
		return GSStatsStored_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public bool UpdateUserAvgRateStat(CSteamID steamIDUser, string pchName, float flCountThisSession, double dSessionLength)
	{
		return platform.ISteamGameServerStats_UpdateUserAvgRateStat(steamIDUser.Value, pchName, flCountThisSession, dSessionLength);
	}
}
