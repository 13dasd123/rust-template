using System;
using System.Runtime.InteropServices;
using System.Text;
using Facepunch.Steamworks;
using SteamNative;

internal class SteamUGC : IDisposable
{
	internal Platform.Interface platform;

	internal BaseSteamworks steamworks;

	public bool IsValid => platform != null && platform.IsValid;

	internal SteamUGC(BaseSteamworks steamworks, IntPtr pointer)
	{
		this.steamworks = steamworks;
		if (Platform.IsWindows64)
		{
			platform = new Platform.Win64(pointer);
		}
		else if (Platform.IsWindows32)
		{
			platform = new Platform.Win32(pointer);
		}
		else if (Platform.IsLinux32)
		{
			platform = new Platform.Linux32(pointer);
		}
		else if (Platform.IsLinux64)
		{
			platform = new Platform.Linux64(pointer);
		}
		else if (Platform.IsOsx)
		{
			platform = new Platform.Mac(pointer);
		}
	}

	public virtual void Dispose()
	{
		if (platform != null)
		{
			platform.Dispose();
			platform = null;
		}
	}

	public CallbackHandle AddDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID, Action<AddUGCDependencyResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamUGC_AddDependency(nParentPublishedFileID.Value, nChildPublishedFileID.Value);
		if (CallbackFunction == null)
		{
			return null;
		}
		return AddUGCDependencyResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public bool AddExcludedTag(UGCQueryHandle_t handle, string pTagName)
	{
		return platform.ISteamUGC_AddExcludedTag(handle.Value, pTagName);
	}

	public bool AddItemKeyValueTag(UGCUpdateHandle_t handle, string pchKey, string pchValue)
	{
		return platform.ISteamUGC_AddItemKeyValueTag(handle.Value, pchKey, pchValue);
	}

	public bool AddItemPreviewFile(UGCUpdateHandle_t handle, string pszPreviewFile, ItemPreviewType type)
	{
		return platform.ISteamUGC_AddItemPreviewFile(handle.Value, pszPreviewFile, type);
	}

	public bool AddItemPreviewVideo(UGCUpdateHandle_t handle, string pszVideoID)
	{
		return platform.ISteamUGC_AddItemPreviewVideo(handle.Value, pszVideoID);
	}

	public CallbackHandle AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID, Action<UserFavoriteItemsListChanged_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamUGC_AddItemToFavorites(nAppId.Value, nPublishedFileID.Value);
		if (CallbackFunction == null)
		{
			return null;
		}
		return UserFavoriteItemsListChanged_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public bool AddRequiredKeyValueTag(UGCQueryHandle_t handle, string pKey, string pValue)
	{
		return platform.ISteamUGC_AddRequiredKeyValueTag(handle.Value, pKey, pValue);
	}

	public bool AddRequiredTag(UGCQueryHandle_t handle, string pTagName)
	{
		return platform.ISteamUGC_AddRequiredTag(handle.Value, pTagName);
	}

	public bool BInitWorkshopForGameServer(DepotId_t unWorkshopDepotID, string pszFolder)
	{
		return platform.ISteamUGC_BInitWorkshopForGameServer(unWorkshopDepotID.Value, pszFolder);
	}

	public CallbackHandle CreateItem(AppId_t nConsumerAppId, WorkshopFileType eFileType, Action<CreateItemResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamUGC_CreateItem(nConsumerAppId.Value, eFileType);
		if (CallbackFunction == null)
		{
			return null;
		}
		return CreateItemResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public UGCQueryHandle_t CreateQueryAllUGCRequest(UGCQuery eQueryType, UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
	{
		return platform.ISteamUGC_CreateQueryAllUGCRequest(eQueryType, eMatchingeMatchingUGCTypeFileType, nCreatorAppID.Value, nConsumerAppID.Value, unPage);
	}

	public unsafe UGCQueryHandle_t CreateQueryUGCDetailsRequest(PublishedFileId_t[] pvecPublishedFileID)
	{
		uint unNumPublishedFileIDs = (uint)pvecPublishedFileID.Length;
		fixed (PublishedFileId_t* ptr = pvecPublishedFileID)
		{
			return platform.ISteamUGC_CreateQueryUGCDetailsRequest((IntPtr)ptr, unNumPublishedFileIDs);
		}
	}

	public UGCQueryHandle_t CreateQueryUserUGCRequest(AccountID_t unAccountID, UserUGCList eListType, UGCMatchingUGCType eMatchingUGCType, UserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
	{
		return platform.ISteamUGC_CreateQueryUserUGCRequest(unAccountID.Value, eListType, eMatchingUGCType, eSortOrder, nCreatorAppID.Value, nConsumerAppID.Value, unPage);
	}

	public bool DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority)
	{
		return platform.ISteamUGC_DownloadItem(nPublishedFileID.Value, bHighPriority);
	}

	public bool GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal)
	{
		return platform.ISteamUGC_GetItemDownloadInfo(nPublishedFileID.Value, out punBytesDownloaded, out punBytesTotal);
	}

	public bool GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, out string pchFolder, out uint punTimeStamp)
	{
		bool flag = false;
		pchFolder = string.Empty;
		StringBuilder stringBuilder = Helpers.TakeStringBuilder();
		uint cchFolderSize = 4096u;
		flag = platform.ISteamUGC_GetItemInstallInfo(nPublishedFileID.Value, out punSizeOnDisk, stringBuilder, cchFolderSize, out punTimeStamp);
		if (!flag)
		{
			return flag;
		}
		pchFolder = stringBuilder.ToString();
		return flag;
	}

	public uint GetItemState(PublishedFileId_t nPublishedFileID)
	{
		return platform.ISteamUGC_GetItemState(nPublishedFileID.Value);
	}

	public ItemUpdateStatus GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal)
	{
		return platform.ISteamUGC_GetItemUpdateProgress(handle.Value, out punBytesProcessed, out punBytesTotal);
	}

	public uint GetNumSubscribedItems()
	{
		return platform.ISteamUGC_GetNumSubscribedItems();
	}

	public bool GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint index, uint previewIndex, out string pchURLOrVideoID, out string pchOriginalFileName, out ItemPreviewType pPreviewType)
	{
		bool flag = false;
		pchURLOrVideoID = string.Empty;
		StringBuilder stringBuilder = Helpers.TakeStringBuilder();
		uint cchURLSize = 4096u;
		pchOriginalFileName = string.Empty;
		StringBuilder stringBuilder2 = Helpers.TakeStringBuilder();
		uint cchOriginalFileNameSize = 4096u;
		flag = platform.ISteamUGC_GetQueryUGCAdditionalPreview(handle.Value, index, previewIndex, stringBuilder, cchURLSize, stringBuilder2, cchOriginalFileNameSize, out pPreviewType);
		if (!flag)
		{
			return flag;
		}
		pchOriginalFileName = stringBuilder2.ToString();
		if (!flag)
		{
			return flag;
		}
		pchURLOrVideoID = stringBuilder.ToString();
		return flag;
	}

	public unsafe bool GetQueryUGCChildren(UGCQueryHandle_t handle, uint index, PublishedFileId_t* pvecPublishedFileID, uint cMaxEntries)
	{
		return platform.ISteamUGC_GetQueryUGCChildren(handle.Value, index, (IntPtr)pvecPublishedFileID, cMaxEntries);
	}

	public bool GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, out string pchKey, out string pchValue)
	{
		bool flag = false;
		pchKey = string.Empty;
		StringBuilder stringBuilder = Helpers.TakeStringBuilder();
		uint cchKeySize = 4096u;
		pchValue = string.Empty;
		StringBuilder stringBuilder2 = Helpers.TakeStringBuilder();
		uint cchValueSize = 4096u;
		flag = platform.ISteamUGC_GetQueryUGCKeyValueTag(handle.Value, index, keyValueTagIndex, stringBuilder, cchKeySize, stringBuilder2, cchValueSize);
		if (!flag)
		{
			return flag;
		}
		pchValue = stringBuilder2.ToString();
		if (!flag)
		{
			return flag;
		}
		pchKey = stringBuilder.ToString();
		return flag;
	}

	public bool GetQueryUGCMetadata(UGCQueryHandle_t handle, uint index, out string pchMetadata)
	{
		bool flag = false;
		pchMetadata = string.Empty;
		StringBuilder stringBuilder = Helpers.TakeStringBuilder();
		uint cchMetadatasize = 4096u;
		flag = platform.ISteamUGC_GetQueryUGCMetadata(handle.Value, index, stringBuilder, cchMetadatasize);
		if (!flag)
		{
			return flag;
		}
		pchMetadata = stringBuilder.ToString();
		return flag;
	}

	public uint GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint index)
	{
		return platform.ISteamUGC_GetQueryUGCNumAdditionalPreviews(handle.Value, index);
	}

	public uint GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint index)
	{
		return platform.ISteamUGC_GetQueryUGCNumKeyValueTags(handle.Value, index);
	}

	public bool GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint index, out string pchURL)
	{
		bool flag = false;
		pchURL = string.Empty;
		StringBuilder stringBuilder = Helpers.TakeStringBuilder();
		uint cchURLSize = 4096u;
		flag = platform.ISteamUGC_GetQueryUGCPreviewURL(handle.Value, index, stringBuilder, cchURLSize);
		if (!flag)
		{
			return flag;
		}
		pchURL = stringBuilder.ToString();
		return flag;
	}

	public bool GetQueryUGCResult(UGCQueryHandle_t handle, uint index, ref SteamUGCDetails_t pDetails)
	{
		return platform.ISteamUGC_GetQueryUGCResult(handle.Value, index, ref pDetails);
	}

	public bool GetQueryUGCStatistic(UGCQueryHandle_t handle, uint index, ItemStatistic eStatType, out ulong pStatValue)
	{
		return platform.ISteamUGC_GetQueryUGCStatistic(handle.Value, index, eStatType, out pStatValue);
	}

	public unsafe uint GetSubscribedItems(PublishedFileId_t* pvecPublishedFileID, uint cMaxEntries)
	{
		return platform.ISteamUGC_GetSubscribedItems((IntPtr)pvecPublishedFileID, cMaxEntries);
	}

	public CallbackHandle GetUserItemVote(PublishedFileId_t nPublishedFileID, Action<GetUserItemVoteResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamUGC_GetUserItemVote(nPublishedFileID.Value);
		if (CallbackFunction == null)
		{
			return null;
		}
		return GetUserItemVoteResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public bool ReleaseQueryUGCRequest(UGCQueryHandle_t handle)
	{
		return platform.ISteamUGC_ReleaseQueryUGCRequest(handle.Value);
	}

	public CallbackHandle RemoveDependency(PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID, Action<RemoveUGCDependencyResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamUGC_RemoveDependency(nParentPublishedFileID.Value, nChildPublishedFileID.Value);
		if (CallbackFunction == null)
		{
			return null;
		}
		return RemoveUGCDependencyResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public CallbackHandle RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID, Action<UserFavoriteItemsListChanged_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamUGC_RemoveItemFromFavorites(nAppId.Value, nPublishedFileID.Value);
		if (CallbackFunction == null)
		{
			return null;
		}
		return UserFavoriteItemsListChanged_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public bool RemoveItemKeyValueTags(UGCUpdateHandle_t handle, string pchKey)
	{
		return platform.ISteamUGC_RemoveItemKeyValueTags(handle.Value, pchKey);
	}

	public bool RemoveItemPreview(UGCUpdateHandle_t handle, uint index)
	{
		return platform.ISteamUGC_RemoveItemPreview(handle.Value, index);
	}

	public SteamAPICall_t RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds)
	{
		return platform.ISteamUGC_RequestUGCDetails(nPublishedFileID.Value, unMaxAgeSeconds);
	}

	public CallbackHandle SendQueryUGCRequest(UGCQueryHandle_t handle, Action<SteamUGCQueryCompleted_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamUGC_SendQueryUGCRequest(handle.Value);
		if (CallbackFunction == null)
		{
			return null;
		}
		return SteamUGCQueryCompleted_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public bool SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds)
	{
		return platform.ISteamUGC_SetAllowCachedResponse(handle.Value, unMaxAgeSeconds);
	}

	public bool SetCloudFileNameFilter(UGCQueryHandle_t handle, string pMatchCloudFileName)
	{
		return platform.ISteamUGC_SetCloudFileNameFilter(handle.Value, pMatchCloudFileName);
	}

	public bool SetItemContent(UGCUpdateHandle_t handle, string pszContentFolder)
	{
		return platform.ISteamUGC_SetItemContent(handle.Value, pszContentFolder);
	}

	public bool SetItemDescription(UGCUpdateHandle_t handle, string pchDescription)
	{
		return platform.ISteamUGC_SetItemDescription(handle.Value, pchDescription);
	}

	public bool SetItemMetadata(UGCUpdateHandle_t handle, string pchMetaData)
	{
		return platform.ISteamUGC_SetItemMetadata(handle.Value, pchMetaData);
	}

	public bool SetItemPreview(UGCUpdateHandle_t handle, string pszPreviewFile)
	{
		return platform.ISteamUGC_SetItemPreview(handle.Value, pszPreviewFile);
	}

	public bool SetItemTags(UGCUpdateHandle_t updateHandle, string[] pTags)
	{
		IntPtr[] array = new IntPtr[pTags.Length];
		for (int i = 0; i < pTags.Length; i++)
		{
			array[i] = Marshal.StringToHGlobalAnsi(pTags[i]);
		}
		try
		{
			int cb = Marshal.SizeOf(typeof(IntPtr)) * array.Length;
			IntPtr intPtr = Marshal.AllocHGlobal(cb);
			Marshal.Copy(array, 0, intPtr, array.Length);
			SteamParamStringArray_t pTags2 = default(SteamParamStringArray_t);
			pTags2.Strings = intPtr;
			pTags2.NumStrings = pTags.Length;
			return platform.ISteamUGC_SetItemTags(updateHandle.Value, ref pTags2);
		}
		finally
		{
			IntPtr[] array2 = array;
			foreach (IntPtr hglobal in array2)
			{
				Marshal.FreeHGlobal(hglobal);
			}
		}
	}

	public bool SetItemTitle(UGCUpdateHandle_t handle, string pchTitle)
	{
		return platform.ISteamUGC_SetItemTitle(handle.Value, pchTitle);
	}

	public bool SetItemUpdateLanguage(UGCUpdateHandle_t handle, string pchLanguage)
	{
		return platform.ISteamUGC_SetItemUpdateLanguage(handle.Value, pchLanguage);
	}

	public bool SetItemVisibility(UGCUpdateHandle_t handle, RemoteStoragePublishedFileVisibility eVisibility)
	{
		return platform.ISteamUGC_SetItemVisibility(handle.Value, eVisibility);
	}

	public bool SetLanguage(UGCQueryHandle_t handle, string pchLanguage)
	{
		return platform.ISteamUGC_SetLanguage(handle.Value, pchLanguage);
	}

	public bool SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag)
	{
		return platform.ISteamUGC_SetMatchAnyTag(handle.Value, bMatchAnyTag);
	}

	public bool SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays)
	{
		return platform.ISteamUGC_SetRankedByTrendDays(handle.Value, unDays);
	}

	public bool SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews)
	{
		return platform.ISteamUGC_SetReturnAdditionalPreviews(handle.Value, bReturnAdditionalPreviews);
	}

	public bool SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren)
	{
		return platform.ISteamUGC_SetReturnChildren(handle.Value, bReturnChildren);
	}

	public bool SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags)
	{
		return platform.ISteamUGC_SetReturnKeyValueTags(handle.Value, bReturnKeyValueTags);
	}

	public bool SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription)
	{
		return platform.ISteamUGC_SetReturnLongDescription(handle.Value, bReturnLongDescription);
	}

	public bool SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata)
	{
		return platform.ISteamUGC_SetReturnMetadata(handle.Value, bReturnMetadata);
	}

	public bool SetReturnOnlyIDs(UGCQueryHandle_t handle, bool bReturnOnlyIDs)
	{
		return platform.ISteamUGC_SetReturnOnlyIDs(handle.Value, bReturnOnlyIDs);
	}

	public bool SetReturnPlaytimeStats(UGCQueryHandle_t handle, uint unDays)
	{
		return platform.ISteamUGC_SetReturnPlaytimeStats(handle.Value, unDays);
	}

	public bool SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly)
	{
		return platform.ISteamUGC_SetReturnTotalOnly(handle.Value, bReturnTotalOnly);
	}

	public bool SetSearchText(UGCQueryHandle_t handle, string pSearchText)
	{
		return platform.ISteamUGC_SetSearchText(handle.Value, pSearchText);
	}

	public CallbackHandle SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp, Action<SetUserItemVoteResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamUGC_SetUserItemVote(nPublishedFileID.Value, bVoteUp);
		if (CallbackFunction == null)
		{
			return null;
		}
		return SetUserItemVoteResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public UGCUpdateHandle_t StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID)
	{
		return platform.ISteamUGC_StartItemUpdate(nConsumerAppId.Value, nPublishedFileID.Value);
	}

	public unsafe CallbackHandle StartPlaytimeTracking(PublishedFileId_t[] pvecPublishedFileID, Action<StartPlaytimeTrackingResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		uint unNumPublishedFileIDs = (uint)pvecPublishedFileID.Length;
		fixed (PublishedFileId_t* ptr = pvecPublishedFileID)
		{
			steamAPICall_t = platform.ISteamUGC_StartPlaytimeTracking((IntPtr)ptr, unNumPublishedFileIDs);
		}
		if (CallbackFunction == null)
		{
			return null;
		}
		return StartPlaytimeTrackingResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public unsafe CallbackHandle StopPlaytimeTracking(PublishedFileId_t[] pvecPublishedFileID, Action<StopPlaytimeTrackingResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		uint unNumPublishedFileIDs = (uint)pvecPublishedFileID.Length;
		fixed (PublishedFileId_t* ptr = pvecPublishedFileID)
		{
			steamAPICall_t = platform.ISteamUGC_StopPlaytimeTracking((IntPtr)ptr, unNumPublishedFileIDs);
		}
		if (CallbackFunction == null)
		{
			return null;
		}
		return StopPlaytimeTrackingResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public CallbackHandle StopPlaytimeTrackingForAllItems(Action<StopPlaytimeTrackingResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamUGC_StopPlaytimeTrackingForAllItems();
		if (CallbackFunction == null)
		{
			return null;
		}
		return StopPlaytimeTrackingResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public CallbackHandle SubmitItemUpdate(UGCUpdateHandle_t handle, string pchChangeNote, Action<SubmitItemUpdateResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamUGC_SubmitItemUpdate(handle.Value, pchChangeNote);
		if (CallbackFunction == null)
		{
			return null;
		}
		return SubmitItemUpdateResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public CallbackHandle SubscribeItem(PublishedFileId_t nPublishedFileID, Action<RemoteStorageSubscribePublishedFileResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamUGC_SubscribeItem(nPublishedFileID.Value);
		if (CallbackFunction == null)
		{
			return null;
		}
		return RemoteStorageSubscribePublishedFileResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public void SuspendDownloads(bool bSuspend)
	{
		platform.ISteamUGC_SuspendDownloads(bSuspend);
	}

	public CallbackHandle UnsubscribeItem(PublishedFileId_t nPublishedFileID, Action<RemoteStorageUnsubscribePublishedFileResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamUGC_UnsubscribeItem(nPublishedFileID.Value);
		if (CallbackFunction == null)
		{
			return null;
		}
		return RemoteStorageUnsubscribePublishedFileResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public bool UpdateItemPreviewFile(UGCUpdateHandle_t handle, uint index, string pszPreviewFile)
	{
		return platform.ISteamUGC_UpdateItemPreviewFile(handle.Value, index, pszPreviewFile);
	}

	public bool UpdateItemPreviewVideo(UGCUpdateHandle_t handle, uint index, string pszVideoID)
	{
		return platform.ISteamUGC_UpdateItemPreviewVideo(handle.Value, index, pszVideoID);
	}
}
