using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using SteamNative;

public class Request : IDisposable
{
	internal class SubRequest
	{
		internal IntPtr Request;

		internal int Pointer;

		internal List<int> WatchList = new List<int>();

		internal Stopwatch Timer = Stopwatch.StartNew();

		internal bool Update(SteamMatchmakingServers servers, Action<gameserveritem_t> OnServer, Action OnUpdate)
		{
			if (Request == IntPtr.Zero)
			{
				return true;
			}
			if (Timer.Elapsed.TotalSeconds < 0.5)
			{
				return false;
			}
			Timer.Reset();
			Timer.Start();
			bool changes = false;
			int serverCount = servers.GetServerCount(Request);
			if (serverCount != Pointer)
			{
				for (int i = Pointer; i < serverCount; i++)
				{
					WatchList.Add(i);
				}
			}
			Pointer = serverCount;
			WatchList.RemoveAll(delegate(int x)
			{
				gameserveritem_t serverDetails = servers.GetServerDetails(Request, x);
				if (serverDetails.HadSuccessfulResponse)
				{
					OnServer(serverDetails);
					changes = true;
					return true;
				}
				return false;
			});
			if (!servers.IsRefreshing(Request))
			{
				WatchList.RemoveAll(delegate(int x)
				{
					gameserveritem_t serverDetails2 = servers.GetServerDetails(Request, x);
					OnServer(serverDetails2);
					return true;
				});
				servers.CancelQuery(Request);
				Request = IntPtr.Zero;
				changes = true;
			}
			if (changes)
			{
				OnUpdate?.Invoke();
			}
			return Request == IntPtr.Zero;
		}
	}

	internal Client client;

	internal List<SubRequest> Requests = new List<SubRequest>();

	public Action OnUpdate;

	public Action<Server> OnServerResponded;

	public Action OnFinished;

	public List<Server> Responded = new List<Server>();

	public List<Server> Unresponsive = new List<Server>();

	public bool Finished;

	internal IEnumerable<string> ServerList { get; set; }

	internal Filter Filter { get; set; }

	internal Request(Client c)
	{
		client = c;
		client.OnUpdate += Update;
	}

	~Request()
	{
		Dispose();
	}

	internal void StartCustomQuery()
	{
		if (ServerList == null)
		{
			return;
		}
		int count = 16;
		int num = 0;
		while (true)
		{
			IEnumerable<string> enumerable = ServerList.Skip(num).Take(count);
			if (enumerable.Count() == 0)
			{
				break;
			}
			num += enumerable.Count();
			Filter filter = new Filter();
			filter.Add("or", enumerable.Count().ToString());
			foreach (string item in enumerable)
			{
				filter.Add("gameaddr", item);
			}
			filter.Start();
			HServerListRequest hServerListRequest = client.native.servers.RequestInternetServerList(client.AppId, filter.NativeArray, (uint)filter.Count, IntPtr.Zero);
			filter.Free();
			AddRequest(hServerListRequest);
		}
		ServerList = null;
	}

	internal void AddRequest(IntPtr id)
	{
		Requests.Add(new SubRequest
		{
			Request = id
		});
	}

	private void Update()
	{
		if (Requests.Count == 0)
		{
			return;
		}
		for (int i = 0; i < Requests.Count(); i++)
		{
			if (Requests[i].Update(client.native.servers, OnServer, OnUpdate))
			{
				Requests.RemoveAt(i);
				i--;
			}
		}
		if (Requests.Count == 0)
		{
			Finished = true;
			client.OnUpdate -= Update;
			OnFinished?.Invoke();
		}
	}

	private void OnServer(gameserveritem_t info)
	{
		if (info.HadSuccessfulResponse)
		{
			if (Filter == null || Filter.Test(info))
			{
				Server server = Server.FromSteam(client, info);
				Responded.Add(server);
				OnServerResponded?.Invoke(server);
			}
		}
		else
		{
			Unresponsive.Add(Server.FromSteam(client, info));
		}
	}

	public void Dispose()
	{
		if (client.IsValid)
		{
			client.OnUpdate -= Update;
		}
		foreach (SubRequest request in Requests)
		{
			if (client.IsValid)
			{
				client.native.servers.CancelQuery(request.Request);
			}
		}
		Requests.Clear();
	}
}
