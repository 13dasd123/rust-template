using System;
using Facepunch.Steamworks;
using SteamNative;

public class ServerStats
{
	public struct StatsReceived
	{
		public int Result;

		public ulong SteamId;
	}

	internal Server server;

	internal ServerStats(Server s)
	{
		server = s;
	}

	public void Refresh(ulong steamid, Action<ulong, bool> Callback = null)
	{
		if (Callback == null)
		{
			server.native.gameServerStats.RequestUserStats(steamid);
			return;
		}
		server.native.gameServerStats.RequestUserStats(steamid, delegate(GSStatsReceived_t o, bool failed)
		{
			Callback(steamid, o.Result == Result.OK && !failed);
		});
	}

	public void Commit(ulong steamid, Action<ulong, bool> Callback = null)
	{
		if (Callback == null)
		{
			server.native.gameServerStats.StoreUserStats(steamid);
			return;
		}
		server.native.gameServerStats.StoreUserStats(steamid, delegate(GSStatsStored_t o, bool failed)
		{
			Callback(steamid, o.Result == Result.OK && !failed);
		});
	}

	public bool SetInt(ulong steamid, string name, int stat)
	{
		return server.native.gameServerStats.SetUserStat(steamid, name, stat);
	}

	public bool SetFloat(ulong steamid, string name, float stat)
	{
		return server.native.gameServerStats.SetUserStat0(steamid, name, stat);
	}

	public int GetInt(ulong steamid, string name, int defaultValue = 0)
	{
		int pData = defaultValue;
		if (!server.native.gameServerStats.GetUserStat(steamid, name, out pData))
		{
			return defaultValue;
		}
		return pData;
	}

	public float GetFloat(ulong steamid, string name, float defaultValue = 0f)
	{
		float pData = defaultValue;
		if (!server.native.gameServerStats.GetUserStat0(steamid, name, out pData))
		{
			return defaultValue;
		}
		return pData;
	}
}
