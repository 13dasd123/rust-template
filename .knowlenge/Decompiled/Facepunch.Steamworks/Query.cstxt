using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using SteamNative;

public class Query : IDisposable
{
	internal const int SteamResponseSize = 50;

	internal UGCQueryHandle_t Handle;

	internal CallbackHandle Callback;

	public Action<Query> OnResult;

	internal Workshop workshop;

	internal Friends friends;

	private int _resultPage = 0;

	private int _resultsRemain = 0;

	private int _resultSkip = 0;

	private List<Item> _results;

	public uint AppId { get; set; }

	public uint UploaderAppId { get; set; }

	public QueryType QueryType { get; set; } = QueryType.Items;

	public Order Order { get; set; } = Order.RankedByVote;

	public string SearchText { get; set; }

	public Item[] Items { get; set; }

	public int TotalResults { get; set; }

	public ulong? UserId { get; set; }

	public int RankedByTrendDays { get; set; }

	public UserQueryType UserQueryType { get; set; } = UserQueryType.Published;

	public int Page { get; set; } = 1;

	public int PerPage { get; set; } = 50;

	public bool IsRunning => Callback != null;

	public List<string> RequireTags { get; set; } = new List<string>();

	public bool RequireAllTags { get; set; } = false;

	public List<string> ExcludeTags { get; set; } = new List<string>();

	public List<ulong> FileId { get; set; } = new List<ulong>();

	public void Run()
	{
		if (Callback == null)
		{
			if (Page <= 0)
			{
				throw new Exception("Page should be 1 or above");
			}
			int num = (Page - 1) * PerPage;
			TotalResults = 0;
			_resultSkip = num % 50;
			_resultsRemain = PerPage;
			_resultPage = (int)Math.Floor((float)num / 50f);
			_results = new List<Item>();
			RunInternal();
		}
	}

	private void RunInternal()
	{
		if (FileId.Count != 0)
		{
			PublishedFileId_t[] array = ((IEnumerable<ulong>)FileId).Select((Func<ulong, PublishedFileId_t>)((ulong x) => x)).ToArray();
			_resultsRemain = array.Length;
			Handle = workshop.ugc.CreateQueryUGCDetailsRequest(array);
		}
		else if (UserId.HasValue)
		{
			uint num = (uint)(UserId.Value & 0xFFFFFFFFu);
			Handle = workshop.ugc.CreateQueryUserUGCRequest(num, (UserUGCList)UserQueryType, (UGCMatchingUGCType)QueryType, UserUGCListSortOrder.LastUpdatedDesc, UploaderAppId, AppId, (uint)(_resultPage + 1));
		}
		else
		{
			Handle = workshop.ugc.CreateQueryAllUGCRequest((UGCQuery)Order, (UGCMatchingUGCType)QueryType, UploaderAppId, AppId, (uint)(_resultPage + 1));
		}
		if (!string.IsNullOrEmpty(SearchText))
		{
			workshop.ugc.SetSearchText(Handle, SearchText);
		}
		foreach (string requireTag in RequireTags)
		{
			workshop.ugc.AddRequiredTag(Handle, requireTag);
		}
		if (RequireTags.Count > 0)
		{
			workshop.ugc.SetMatchAnyTag(Handle, !RequireAllTags);
		}
		if (RankedByTrendDays > 0)
		{
			workshop.ugc.SetRankedByTrendDays(Handle, (uint)RankedByTrendDays);
		}
		foreach (string excludeTag in ExcludeTags)
		{
			workshop.ugc.AddExcludedTag(Handle, excludeTag);
		}
		Callback = workshop.ugc.SendQueryUGCRequest(Handle, ResultCallback);
	}

	private void ResultCallback(SteamUGCQueryCompleted_t data, bool bFailed)
	{
		if (bFailed)
		{
			throw new Exception("bFailed!");
		}
		int num = 0;
		for (int i = 0; i < data.NumResultsReturned; i++)
		{
			if (_resultSkip > 0)
			{
				_resultSkip--;
				continue;
			}
			SteamUGCDetails_t details = default(SteamUGCDetails_t);
			if (workshop.ugc.GetQueryUGCResult(data.Handle, (uint)i, ref details) && !_results.Any((Item x) => x.Id == details.PublishedFileId))
			{
				Item item = Item.From(details, workshop);
				item.SubscriptionCount = GetStat(data.Handle, i, ItemStatistic.NumSubscriptions);
				item.FavouriteCount = GetStat(data.Handle, i, ItemStatistic.NumFavorites);
				item.FollowerCount = GetStat(data.Handle, i, ItemStatistic.NumFollowers);
				item.WebsiteViews = GetStat(data.Handle, i, ItemStatistic.NumUniqueWebsiteViews);
				item.ReportScore = GetStat(data.Handle, i, ItemStatistic.ReportScore);
				string pchURL = null;
				if (workshop.ugc.GetQueryUGCPreviewURL(data.Handle, (uint)i, out pchURL))
				{
					item.PreviewImageUrl = pchURL;
				}
				_results.Add(item);
				_resultsRemain--;
				num++;
				if (_resultsRemain <= 0)
				{
					break;
				}
			}
		}
		TotalResults = ((TotalResults > data.TotalMatchingResults) ? TotalResults : ((int)data.TotalMatchingResults));
		Callback.Dispose();
		Callback = null;
		_resultPage++;
		if (_resultsRemain > 0 && num > 0)
		{
			RunInternal();
			return;
		}
		Items = _results.ToArray();
		if (OnResult != null)
		{
			OnResult(this);
		}
	}

	private int GetStat(ulong handle, int index, ItemStatistic stat)
	{
		ulong pStatValue = 0uL;
		if (!workshop.ugc.GetQueryUGCStatistic(handle, (uint)index, (SteamNative.ItemStatistic)stat, out pStatValue))
		{
			return 0;
		}
		return (int)pStatValue;
	}

	public void Block()
	{
		workshop.steamworks.Update();
		while (IsRunning)
		{
			Thread.Sleep(10);
			workshop.steamworks.Update();
		}
	}

	public void Dispose()
	{
	}
}
