using System;
using System.Net;
using System.Runtime.InteropServices;
using Facepunch.Steamworks;
using Facepunch.Steamworks.Interop;

internal class ServerRules : IDisposable
{
	[StructLayout(LayoutKind.Sequential)]
	private class StdVTable
	{
		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void InternalRulesResponded(string pchRule, string pchValue);

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void InternalRulesFailedToRespond();

		[UnmanagedFunctionPointer(CallingConvention.StdCall)]
		public delegate void InternalRulesRefreshComplete();

		[MarshalAs(UnmanagedType.FunctionPtr)]
		public InternalRulesResponded m_VTRulesResponded;

		[MarshalAs(UnmanagedType.FunctionPtr)]
		public InternalRulesFailedToRespond m_VTRulesFailedToRespond;

		[MarshalAs(UnmanagedType.FunctionPtr)]
		public InternalRulesRefreshComplete m_VTRulesRefreshComplete;
	}

	[StructLayout(LayoutKind.Sequential)]
	private class ThisVTable
	{
		[UnmanagedFunctionPointer(CallingConvention.ThisCall)]
		public delegate void InternalRulesResponded(IntPtr thisptr, string pchRule, string pchValue);

		[UnmanagedFunctionPointer(CallingConvention.ThisCall)]
		public delegate void InternalRulesFailedToRespond(IntPtr thisptr);

		[UnmanagedFunctionPointer(CallingConvention.ThisCall)]
		public delegate void InternalRulesRefreshComplete(IntPtr thisptr);

		[MarshalAs(UnmanagedType.FunctionPtr)]
		public InternalRulesResponded m_VTRulesResponded;

		[MarshalAs(UnmanagedType.FunctionPtr)]
		public InternalRulesFailedToRespond m_VTRulesFailedToRespond;

		[MarshalAs(UnmanagedType.FunctionPtr)]
		public InternalRulesRefreshComplete m_VTRulesRefreshComplete;
	}

	private GCHandle vTablePin;

	private IntPtr vTablePtr;

	private GCHandle RulesRespondPin;

	private GCHandle FailedRespondPin;

	private GCHandle CompletePin;

	private ServerList.Server Server;

	public ServerRules(ServerList.Server server, IPAddress address, int queryPort)
	{
		Server = server;
		InstallVTable();
		Server.Client.native.servers.ServerRules(address.IpToInt32(), (ushort)queryPort, GetPtr());
	}

	public void Dispose()
	{
		if (vTablePtr != IntPtr.Zero)
		{
			Marshal.FreeHGlobal(vTablePtr);
			vTablePtr = IntPtr.Zero;
		}
		if (vTablePin.IsAllocated)
		{
			vTablePin.Free();
		}
		if (RulesRespondPin.IsAllocated)
		{
			RulesRespondPin.Free();
		}
		if (FailedRespondPin.IsAllocated)
		{
			FailedRespondPin.Free();
		}
		if (CompletePin.IsAllocated)
		{
			CompletePin.Free();
		}
	}

	private void InstallVTable()
	{
		if (Config.UseThisCall)
		{
			ThisVTable.InternalRulesResponded internalRulesResponded = delegate(IntPtr _, string k, string v)
			{
				InternalOnRulesResponded(k, v);
			};
			ThisVTable.InternalRulesFailedToRespond internalRulesFailedToRespond = delegate
			{
				InternalOnRulesFailedToRespond();
			};
			ThisVTable.InternalRulesRefreshComplete internalRulesRefreshComplete = delegate
			{
				InternalOnRulesRefreshComplete();
			};
			RulesRespondPin = GCHandle.Alloc(internalRulesResponded);
			FailedRespondPin = GCHandle.Alloc(internalRulesFailedToRespond);
			CompletePin = GCHandle.Alloc(internalRulesRefreshComplete);
			ThisVTable structure = new ThisVTable
			{
				m_VTRulesResponded = internalRulesResponded,
				m_VTRulesFailedToRespond = internalRulesFailedToRespond,
				m_VTRulesRefreshComplete = internalRulesRefreshComplete
			};
			vTablePtr = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(ThisVTable)));
			Marshal.StructureToPtr(structure, vTablePtr, fDeleteOld: false);
			vTablePin = GCHandle.Alloc(vTablePtr, GCHandleType.Pinned);
		}
		else
		{
			StdVTable.InternalRulesResponded internalRulesResponded2 = InternalOnRulesResponded;
			StdVTable.InternalRulesFailedToRespond internalRulesFailedToRespond2 = InternalOnRulesFailedToRespond;
			StdVTable.InternalRulesRefreshComplete internalRulesRefreshComplete2 = InternalOnRulesRefreshComplete;
			RulesRespondPin = GCHandle.Alloc(internalRulesResponded2);
			FailedRespondPin = GCHandle.Alloc(internalRulesFailedToRespond2);
			CompletePin = GCHandle.Alloc(internalRulesRefreshComplete2);
			StdVTable structure2 = new StdVTable
			{
				m_VTRulesResponded = internalRulesResponded2,
				m_VTRulesFailedToRespond = internalRulesFailedToRespond2,
				m_VTRulesRefreshComplete = internalRulesRefreshComplete2
			};
			vTablePtr = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(StdVTable)));
			Marshal.StructureToPtr(structure2, vTablePtr, fDeleteOld: false);
			vTablePin = GCHandle.Alloc(vTablePtr, GCHandleType.Pinned);
		}
	}

	private void InternalOnRulesResponded(string k, string v)
	{
		Server.Rules.Add(k, v);
	}

	private void InternalOnRulesFailedToRespond()
	{
		Server.OnServerRulesReceiveFinished(Success: false);
	}

	private void InternalOnRulesRefreshComplete()
	{
		Server.OnServerRulesReceiveFinished(Success: true);
	}

	public IntPtr GetPtr()
	{
		return vTablePin.AddrOfPinnedObject();
	}
}
