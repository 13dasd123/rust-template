using System;
using System.Runtime.InteropServices;
using System.Text;
using Facepunch.Steamworks;
using SteamNative;

internal class SteamRemoteStorage : IDisposable
{
	internal Platform.Interface platform;

	internal BaseSteamworks steamworks;

	public bool IsValid => platform != null && platform.IsValid;

	internal SteamRemoteStorage(BaseSteamworks steamworks, IntPtr pointer)
	{
		this.steamworks = steamworks;
		if (Platform.IsWindows64)
		{
			platform = new Platform.Win64(pointer);
		}
		else if (Platform.IsWindows32)
		{
			platform = new Platform.Win32(pointer);
		}
		else if (Platform.IsLinux32)
		{
			platform = new Platform.Linux32(pointer);
		}
		else if (Platform.IsLinux64)
		{
			platform = new Platform.Linux64(pointer);
		}
		else if (Platform.IsOsx)
		{
			platform = new Platform.Mac(pointer);
		}
	}

	public virtual void Dispose()
	{
		if (platform != null)
		{
			platform.Dispose();
			platform = null;
		}
	}

	public CallbackHandle CommitPublishedFileUpdate(PublishedFileUpdateHandle_t updateHandle, Action<RemoteStorageUpdatePublishedFileResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamRemoteStorage_CommitPublishedFileUpdate(updateHandle.Value);
		if (CallbackFunction == null)
		{
			return null;
		}
		return RemoteStorageUpdatePublishedFileResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public PublishedFileUpdateHandle_t CreatePublishedFileUpdateRequest(PublishedFileId_t unPublishedFileId)
	{
		return platform.ISteamRemoteStorage_CreatePublishedFileUpdateRequest(unPublishedFileId.Value);
	}

	public CallbackHandle DeletePublishedFile(PublishedFileId_t unPublishedFileId, Action<RemoteStorageDeletePublishedFileResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamRemoteStorage_DeletePublishedFile(unPublishedFileId.Value);
		if (CallbackFunction == null)
		{
			return null;
		}
		return RemoteStorageDeletePublishedFileResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public CallbackHandle EnumeratePublishedFilesByUserAction(WorkshopFileAction eAction, uint unStartIndex, Action<RemoteStorageEnumeratePublishedFilesByUserActionResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(eAction, unStartIndex);
		if (CallbackFunction == null)
		{
			return null;
		}
		return RemoteStorageEnumeratePublishedFilesByUserActionResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public CallbackHandle EnumeratePublishedWorkshopFiles(WorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, string[] pTags, ref SteamParamStringArray_t pUserTags, Action<RemoteStorageEnumerateWorkshopFilesResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t call = 0uL;
		IntPtr[] array = new IntPtr[pTags.Length];
		for (int i = 0; i < pTags.Length; i++)
		{
			array[i] = Marshal.StringToHGlobalAnsi(pTags[i]);
		}
		try
		{
			int cb = Marshal.SizeOf(typeof(IntPtr)) * array.Length;
			IntPtr intPtr = Marshal.AllocHGlobal(cb);
			Marshal.Copy(array, 0, intPtr, array.Length);
			SteamParamStringArray_t pTags2 = default(SteamParamStringArray_t);
			pTags2.Strings = intPtr;
			pTags2.NumStrings = pTags.Length;
			call = platform.ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(eEnumerationType, unStartIndex, unCount, unDays, ref pTags2, ref pUserTags);
		}
		finally
		{
			IntPtr[] array2 = array;
			foreach (IntPtr hglobal in array2)
			{
				Marshal.FreeHGlobal(hglobal);
			}
		}
		if (CallbackFunction == null)
		{
			return null;
		}
		return RemoteStorageEnumerateWorkshopFilesResult_t.CallResult(steamworks, call, CallbackFunction);
	}

	public CallbackHandle EnumerateUserPublishedFiles(uint unStartIndex, Action<RemoteStorageEnumerateUserPublishedFilesResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamRemoteStorage_EnumerateUserPublishedFiles(unStartIndex);
		if (CallbackFunction == null)
		{
			return null;
		}
		return RemoteStorageEnumerateUserPublishedFilesResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public CallbackHandle EnumerateUserSharedWorkshopFiles(CSteamID steamId, uint unStartIndex, string[] pRequiredTags, ref SteamParamStringArray_t pExcludedTags, Action<RemoteStorageEnumerateUserPublishedFilesResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t call = 0uL;
		IntPtr[] array = new IntPtr[pRequiredTags.Length];
		for (int i = 0; i < pRequiredTags.Length; i++)
		{
			array[i] = Marshal.StringToHGlobalAnsi(pRequiredTags[i]);
		}
		try
		{
			int cb = Marshal.SizeOf(typeof(IntPtr)) * array.Length;
			IntPtr intPtr = Marshal.AllocHGlobal(cb);
			Marshal.Copy(array, 0, intPtr, array.Length);
			SteamParamStringArray_t pRequiredTags2 = default(SteamParamStringArray_t);
			pRequiredTags2.Strings = intPtr;
			pRequiredTags2.NumStrings = pRequiredTags.Length;
			call = platform.ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(steamId.Value, unStartIndex, ref pRequiredTags2, ref pExcludedTags);
		}
		finally
		{
			IntPtr[] array2 = array;
			foreach (IntPtr hglobal in array2)
			{
				Marshal.FreeHGlobal(hglobal);
			}
		}
		if (CallbackFunction == null)
		{
			return null;
		}
		return RemoteStorageEnumerateUserPublishedFilesResult_t.CallResult(steamworks, call, CallbackFunction);
	}

	public CallbackHandle EnumerateUserSubscribedFiles(uint unStartIndex, Action<RemoteStorageEnumerateUserSubscribedFilesResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamRemoteStorage_EnumerateUserSubscribedFiles(unStartIndex);
		if (CallbackFunction == null)
		{
			return null;
		}
		return RemoteStorageEnumerateUserSubscribedFilesResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public bool FileDelete(string pchFile)
	{
		return platform.ISteamRemoteStorage_FileDelete(pchFile);
	}

	public bool FileExists(string pchFile)
	{
		return platform.ISteamRemoteStorage_FileExists(pchFile);
	}

	public bool FileForget(string pchFile)
	{
		return platform.ISteamRemoteStorage_FileForget(pchFile);
	}

	public bool FilePersisted(string pchFile)
	{
		return platform.ISteamRemoteStorage_FilePersisted(pchFile);
	}

	public int FileRead(string pchFile, IntPtr pvData, int cubDataToRead)
	{
		return platform.ISteamRemoteStorage_FileRead(pchFile, pvData, cubDataToRead);
	}

	public CallbackHandle FileReadAsync(string pchFile, uint nOffset, uint cubToRead, Action<RemoteStorageFileReadAsyncComplete_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamRemoteStorage_FileReadAsync(pchFile, nOffset, cubToRead);
		if (CallbackFunction == null)
		{
			return null;
		}
		return RemoteStorageFileReadAsyncComplete_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public bool FileReadAsyncComplete(SteamAPICall_t hReadCall, IntPtr pvBuffer, uint cubToRead)
	{
		return platform.ISteamRemoteStorage_FileReadAsyncComplete(hReadCall.Value, pvBuffer, cubToRead);
	}

	public CallbackHandle FileShare(string pchFile, Action<RemoteStorageFileShareResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamRemoteStorage_FileShare(pchFile);
		if (CallbackFunction == null)
		{
			return null;
		}
		return RemoteStorageFileShareResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public bool FileWrite(string pchFile, IntPtr pvData, int cubData)
	{
		return platform.ISteamRemoteStorage_FileWrite(pchFile, pvData, cubData);
	}

	public CallbackHandle FileWriteAsync(string pchFile, IntPtr pvData, uint cubData, Action<RemoteStorageFileWriteAsyncComplete_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamRemoteStorage_FileWriteAsync(pchFile, pvData, cubData);
		if (CallbackFunction == null)
		{
			return null;
		}
		return RemoteStorageFileWriteAsyncComplete_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public bool FileWriteStreamCancel(UGCFileWriteStreamHandle_t writeHandle)
	{
		return platform.ISteamRemoteStorage_FileWriteStreamCancel(writeHandle.Value);
	}

	public bool FileWriteStreamClose(UGCFileWriteStreamHandle_t writeHandle)
	{
		return platform.ISteamRemoteStorage_FileWriteStreamClose(writeHandle.Value);
	}

	public UGCFileWriteStreamHandle_t FileWriteStreamOpen(string pchFile)
	{
		return platform.ISteamRemoteStorage_FileWriteStreamOpen(pchFile);
	}

	public bool FileWriteStreamWriteChunk(UGCFileWriteStreamHandle_t writeHandle, IntPtr pvData, int cubData)
	{
		return platform.ISteamRemoteStorage_FileWriteStreamWriteChunk(writeHandle.Value, pvData, cubData);
	}

	public int GetCachedUGCCount()
	{
		return platform.ISteamRemoteStorage_GetCachedUGCCount();
	}

	public UGCHandle_t GetCachedUGCHandle(int iCachedContent)
	{
		return platform.ISteamRemoteStorage_GetCachedUGCHandle(iCachedContent);
	}

	public int GetFileCount()
	{
		return platform.ISteamRemoteStorage_GetFileCount();
	}

	public string GetFileNameAndSize(int iFile, out int pnFileSizeInBytes)
	{
		IntPtr ptr = platform.ISteamRemoteStorage_GetFileNameAndSize(iFile, out pnFileSizeInBytes);
		return Marshal.PtrToStringAnsi(ptr);
	}

	public int GetFileSize(string pchFile)
	{
		return platform.ISteamRemoteStorage_GetFileSize(pchFile);
	}

	public long GetFileTimestamp(string pchFile)
	{
		return platform.ISteamRemoteStorage_GetFileTimestamp(pchFile);
	}

	public CallbackHandle GetPublishedFileDetails(PublishedFileId_t unPublishedFileId, uint unMaxSecondsOld, Action<RemoteStorageGetPublishedFileDetailsResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamRemoteStorage_GetPublishedFileDetails(unPublishedFileId.Value, unMaxSecondsOld);
		if (CallbackFunction == null)
		{
			return null;
		}
		return RemoteStorageGetPublishedFileDetailsResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public CallbackHandle GetPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId, Action<RemoteStorageGetPublishedItemVoteDetailsResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamRemoteStorage_GetPublishedItemVoteDetails(unPublishedFileId.Value);
		if (CallbackFunction == null)
		{
			return null;
		}
		return RemoteStorageGetPublishedItemVoteDetailsResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public bool GetQuota(out ulong pnTotalBytes, out ulong puAvailableBytes)
	{
		return platform.ISteamRemoteStorage_GetQuota(out pnTotalBytes, out puAvailableBytes);
	}

	public RemoteStoragePlatform GetSyncPlatforms(string pchFile)
	{
		return platform.ISteamRemoteStorage_GetSyncPlatforms(pchFile);
	}

	public bool GetUGCDetails(UGCHandle_t hContent, ref AppId_t pnAppID, out string ppchName, out CSteamID pSteamIDOwner)
	{
		bool flag = false;
		ppchName = string.Empty;
		StringBuilder stringBuilder = Helpers.TakeStringBuilder();
		int pnFileSizeInBytes = 4096;
		flag = platform.ISteamRemoteStorage_GetUGCDetails(hContent.Value, ref pnAppID.Value, stringBuilder, out pnFileSizeInBytes, out pSteamIDOwner.Value);
		if (!flag)
		{
			return flag;
		}
		ppchName = stringBuilder.ToString();
		return flag;
	}

	public bool GetUGCDownloadProgress(UGCHandle_t hContent, out int pnBytesDownloaded, out int pnBytesExpected)
	{
		return platform.ISteamRemoteStorage_GetUGCDownloadProgress(hContent.Value, out pnBytesDownloaded, out pnBytesExpected);
	}

	public CallbackHandle GetUserPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId, Action<RemoteStorageGetPublishedItemVoteDetailsResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamRemoteStorage_GetUserPublishedItemVoteDetails(unPublishedFileId.Value);
		if (CallbackFunction == null)
		{
			return null;
		}
		return RemoteStorageGetPublishedItemVoteDetailsResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public bool IsCloudEnabledForAccount()
	{
		return platform.ISteamRemoteStorage_IsCloudEnabledForAccount();
	}

	public bool IsCloudEnabledForApp()
	{
		return platform.ISteamRemoteStorage_IsCloudEnabledForApp();
	}

	public CallbackHandle PublishVideo(WorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, AppId_t nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, string[] pTags, Action<RemoteStoragePublishFileProgress_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t call = 0uL;
		IntPtr[] array = new IntPtr[pTags.Length];
		for (int i = 0; i < pTags.Length; i++)
		{
			array[i] = Marshal.StringToHGlobalAnsi(pTags[i]);
		}
		try
		{
			int cb = Marshal.SizeOf(typeof(IntPtr)) * array.Length;
			IntPtr intPtr = Marshal.AllocHGlobal(cb);
			Marshal.Copy(array, 0, intPtr, array.Length);
			SteamParamStringArray_t pTags2 = default(SteamParamStringArray_t);
			pTags2.Strings = intPtr;
			pTags2.NumStrings = pTags.Length;
			call = platform.ISteamRemoteStorage_PublishVideo(eVideoProvider, pchVideoAccount, pchVideoIdentifier, pchPreviewFile, nConsumerAppId.Value, pchTitle, pchDescription, eVisibility, ref pTags2);
		}
		finally
		{
			IntPtr[] array2 = array;
			foreach (IntPtr hglobal in array2)
			{
				Marshal.FreeHGlobal(hglobal);
			}
		}
		if (CallbackFunction == null)
		{
			return null;
		}
		return RemoteStoragePublishFileProgress_t.CallResult(steamworks, call, CallbackFunction);
	}

	public CallbackHandle PublishWorkshopFile(string pchFile, string pchPreviewFile, AppId_t nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, string[] pTags, WorkshopFileType eWorkshopFileType, Action<RemoteStoragePublishFileProgress_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t call = 0uL;
		IntPtr[] array = new IntPtr[pTags.Length];
		for (int i = 0; i < pTags.Length; i++)
		{
			array[i] = Marshal.StringToHGlobalAnsi(pTags[i]);
		}
		try
		{
			int cb = Marshal.SizeOf(typeof(IntPtr)) * array.Length;
			IntPtr intPtr = Marshal.AllocHGlobal(cb);
			Marshal.Copy(array, 0, intPtr, array.Length);
			SteamParamStringArray_t pTags2 = default(SteamParamStringArray_t);
			pTags2.Strings = intPtr;
			pTags2.NumStrings = pTags.Length;
			call = platform.ISteamRemoteStorage_PublishWorkshopFile(pchFile, pchPreviewFile, nConsumerAppId.Value, pchTitle, pchDescription, eVisibility, ref pTags2, eWorkshopFileType);
		}
		finally
		{
			IntPtr[] array2 = array;
			foreach (IntPtr hglobal in array2)
			{
				Marshal.FreeHGlobal(hglobal);
			}
		}
		if (CallbackFunction == null)
		{
			return null;
		}
		return RemoteStoragePublishFileProgress_t.CallResult(steamworks, call, CallbackFunction);
	}

	public void SetCloudEnabledForApp(bool bEnabled)
	{
		platform.ISteamRemoteStorage_SetCloudEnabledForApp(bEnabled);
	}

	public bool SetSyncPlatforms(string pchFile, RemoteStoragePlatform eRemoteStoragePlatform)
	{
		return platform.ISteamRemoteStorage_SetSyncPlatforms(pchFile, eRemoteStoragePlatform);
	}

	public CallbackHandle SetUserPublishedFileAction(PublishedFileId_t unPublishedFileId, WorkshopFileAction eAction, Action<RemoteStorageSetUserPublishedFileActionResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamRemoteStorage_SetUserPublishedFileAction(unPublishedFileId.Value, eAction);
		if (CallbackFunction == null)
		{
			return null;
		}
		return RemoteStorageSetUserPublishedFileActionResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public CallbackHandle SubscribePublishedFile(PublishedFileId_t unPublishedFileId, Action<RemoteStorageSubscribePublishedFileResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamRemoteStorage_SubscribePublishedFile(unPublishedFileId.Value);
		if (CallbackFunction == null)
		{
			return null;
		}
		return RemoteStorageSubscribePublishedFileResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public CallbackHandle UGCDownload(UGCHandle_t hContent, uint unPriority, Action<RemoteStorageDownloadUGCResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamRemoteStorage_UGCDownload(hContent.Value, unPriority);
		if (CallbackFunction == null)
		{
			return null;
		}
		return RemoteStorageDownloadUGCResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public CallbackHandle UGCDownloadToLocation(UGCHandle_t hContent, string pchLocation, uint unPriority, Action<RemoteStorageDownloadUGCResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamRemoteStorage_UGCDownloadToLocation(hContent.Value, pchLocation, unPriority);
		if (CallbackFunction == null)
		{
			return null;
		}
		return RemoteStorageDownloadUGCResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public int UGCRead(UGCHandle_t hContent, IntPtr pvData, int cubDataToRead, uint cOffset, UGCReadAction eAction)
	{
		return platform.ISteamRemoteStorage_UGCRead(hContent.Value, pvData, cubDataToRead, cOffset, eAction);
	}

	public CallbackHandle UnsubscribePublishedFile(PublishedFileId_t unPublishedFileId, Action<RemoteStorageUnsubscribePublishedFileResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamRemoteStorage_UnsubscribePublishedFile(unPublishedFileId.Value);
		if (CallbackFunction == null)
		{
			return null;
		}
		return RemoteStorageUnsubscribePublishedFileResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public bool UpdatePublishedFileDescription(PublishedFileUpdateHandle_t updateHandle, string pchDescription)
	{
		return platform.ISteamRemoteStorage_UpdatePublishedFileDescription(updateHandle.Value, pchDescription);
	}

	public bool UpdatePublishedFileFile(PublishedFileUpdateHandle_t updateHandle, string pchFile)
	{
		return platform.ISteamRemoteStorage_UpdatePublishedFileFile(updateHandle.Value, pchFile);
	}

	public bool UpdatePublishedFilePreviewFile(PublishedFileUpdateHandle_t updateHandle, string pchPreviewFile)
	{
		return platform.ISteamRemoteStorage_UpdatePublishedFilePreviewFile(updateHandle.Value, pchPreviewFile);
	}

	public bool UpdatePublishedFileSetChangeDescription(PublishedFileUpdateHandle_t updateHandle, string pchChangeDescription)
	{
		return platform.ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(updateHandle.Value, pchChangeDescription);
	}

	public bool UpdatePublishedFileTags(PublishedFileUpdateHandle_t updateHandle, string[] pTags)
	{
		IntPtr[] array = new IntPtr[pTags.Length];
		for (int i = 0; i < pTags.Length; i++)
		{
			array[i] = Marshal.StringToHGlobalAnsi(pTags[i]);
		}
		try
		{
			int cb = Marshal.SizeOf(typeof(IntPtr)) * array.Length;
			IntPtr intPtr = Marshal.AllocHGlobal(cb);
			Marshal.Copy(array, 0, intPtr, array.Length);
			SteamParamStringArray_t pTags2 = default(SteamParamStringArray_t);
			pTags2.Strings = intPtr;
			pTags2.NumStrings = pTags.Length;
			return platform.ISteamRemoteStorage_UpdatePublishedFileTags(updateHandle.Value, ref pTags2);
		}
		finally
		{
			IntPtr[] array2 = array;
			foreach (IntPtr hglobal in array2)
			{
				Marshal.FreeHGlobal(hglobal);
			}
		}
	}

	public bool UpdatePublishedFileTitle(PublishedFileUpdateHandle_t updateHandle, string pchTitle)
	{
		return platform.ISteamRemoteStorage_UpdatePublishedFileTitle(updateHandle.Value, pchTitle);
	}

	public bool UpdatePublishedFileVisibility(PublishedFileUpdateHandle_t updateHandle, RemoteStoragePublishedFileVisibility eVisibility)
	{
		return platform.ISteamRemoteStorage_UpdatePublishedFileVisibility(updateHandle.Value, eVisibility);
	}

	public CallbackHandle UpdateUserPublishedItemVote(PublishedFileId_t unPublishedFileId, bool bVoteUp, Action<RemoteStorageUpdateUserPublishedItemVoteResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamRemoteStorage_UpdateUserPublishedItemVote(unPublishedFileId.Value, bVoteUp);
		if (CallbackFunction == null)
		{
			return null;
		}
		return RemoteStorageUpdateUserPublishedItemVoteResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}
}
