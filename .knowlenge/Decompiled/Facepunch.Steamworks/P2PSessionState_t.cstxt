using System;
using System.Runtime.InteropServices;
using SteamNative;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct P2PSessionState_t
{
	[StructLayout(LayoutKind.Sequential, Pack = 4)]
	internal struct PackSmall
	{
		public byte ConnectionActive;

		public byte Connecting;

		public byte P2PSessionError;

		public byte UsingRelay;

		public int BytesQueuedForSend;

		public int PacketsQueuedForSend;

		public uint RemoteIP;

		public ushort RemotePort;

		public static implicit operator P2PSessionState_t(PackSmall d)
		{
			P2PSessionState_t result = default(P2PSessionState_t);
			result.ConnectionActive = d.ConnectionActive;
			result.Connecting = d.Connecting;
			result.P2PSessionError = d.P2PSessionError;
			result.UsingRelay = d.UsingRelay;
			result.BytesQueuedForSend = d.BytesQueuedForSend;
			result.PacketsQueuedForSend = d.PacketsQueuedForSend;
			result.RemoteIP = d.RemoteIP;
			result.RemotePort = d.RemotePort;
			return result;
		}
	}

	public byte ConnectionActive;

	public byte Connecting;

	public byte P2PSessionError;

	public byte UsingRelay;

	public int BytesQueuedForSend;

	public int PacketsQueuedForSend;

	public uint RemoteIP;

	public ushort RemotePort;

	public static P2PSessionState_t FromPointer(IntPtr p)
	{
		if (Platform.PackSmall)
		{
			return (PackSmall)Marshal.PtrToStructure(p, typeof(PackSmall));
		}
		return (P2PSessionState_t)Marshal.PtrToStructure(p, typeof(P2PSessionState_t));
	}
}
