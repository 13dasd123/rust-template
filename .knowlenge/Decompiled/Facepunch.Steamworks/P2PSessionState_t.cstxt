using System;
using System.Runtime.InteropServices;
using SteamNative;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct P2PSessionState_t
{
	[StructLayout(LayoutKind.Sequential, Pack = 4)]
	internal struct PackSmall
	{
		internal byte ConnectionActive;

		internal byte Connecting;

		internal byte P2PSessionError;

		internal byte UsingRelay;

		internal int BytesQueuedForSend;

		internal int PacketsQueuedForSend;

		internal uint RemoteIP;

		internal ushort RemotePort;

		public static implicit operator P2PSessionState_t(PackSmall d)
		{
			P2PSessionState_t result = default(P2PSessionState_t);
			result.ConnectionActive = d.ConnectionActive;
			result.Connecting = d.Connecting;
			result.P2PSessionError = d.P2PSessionError;
			result.UsingRelay = d.UsingRelay;
			result.BytesQueuedForSend = d.BytesQueuedForSend;
			result.PacketsQueuedForSend = d.PacketsQueuedForSend;
			result.RemoteIP = d.RemoteIP;
			result.RemotePort = d.RemotePort;
			return result;
		}
	}

	internal byte ConnectionActive;

	internal byte Connecting;

	internal byte P2PSessionError;

	internal byte UsingRelay;

	internal int BytesQueuedForSend;

	internal int PacketsQueuedForSend;

	internal uint RemoteIP;

	internal ushort RemotePort;

	internal static P2PSessionState_t FromPointer(IntPtr p)
	{
		if (Platform.PackSmall)
		{
			return (PackSmall)Marshal.PtrToStructure(p, typeof(PackSmall));
		}
		return (P2PSessionState_t)Marshal.PtrToStructure(p, typeof(P2PSessionState_t));
	}

	internal static int StructSize()
	{
		if (Platform.PackSmall)
		{
			return Marshal.SizeOf(typeof(PackSmall));
		}
		return Marshal.SizeOf(typeof(P2PSessionState_t));
	}
}
