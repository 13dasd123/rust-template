using System;
using System.Runtime.InteropServices;
using System.Text;
using Facepunch.Steamworks;
using SteamNative;

internal class SteamApps : IDisposable
{
	internal Platform.Interface platform;

	internal BaseSteamworks steamworks;

	public bool IsValid => platform != null && platform.IsValid;

	internal SteamApps(BaseSteamworks steamworks, IntPtr pointer)
	{
		this.steamworks = steamworks;
		if (Platform.IsWindows64)
		{
			platform = new Platform.Win64(pointer);
		}
		else if (Platform.IsWindows32)
		{
			platform = new Platform.Win32(pointer);
		}
		else if (Platform.IsLinux32)
		{
			platform = new Platform.Linux32(pointer);
		}
		else if (Platform.IsLinux64)
		{
			platform = new Platform.Linux64(pointer);
		}
		else if (Platform.IsOsx)
		{
			platform = new Platform.Mac(pointer);
		}
	}

	public virtual void Dispose()
	{
		if (platform != null)
		{
			platform.Dispose();
			platform = null;
		}
	}

	public bool BGetDLCDataByIndex(int iDLC, ref AppId_t pAppID, ref bool pbAvailable, out string pchName)
	{
		bool flag = false;
		pchName = string.Empty;
		StringBuilder stringBuilder = Helpers.TakeStringBuilder();
		int cchNameBufferSize = 4096;
		flag = platform.ISteamApps_BGetDLCDataByIndex(iDLC, ref pAppID.Value, ref pbAvailable, stringBuilder, cchNameBufferSize);
		if (!flag)
		{
			return flag;
		}
		pchName = stringBuilder.ToString();
		return flag;
	}

	public bool BIsAppInstalled(AppId_t appID)
	{
		return platform.ISteamApps_BIsAppInstalled(appID.Value);
	}

	public bool BIsCybercafe()
	{
		return platform.ISteamApps_BIsCybercafe();
	}

	public bool BIsDlcInstalled(AppId_t appID)
	{
		return platform.ISteamApps_BIsDlcInstalled(appID.Value);
	}

	public bool BIsLowViolence()
	{
		return platform.ISteamApps_BIsLowViolence();
	}

	public bool BIsSubscribed()
	{
		return platform.ISteamApps_BIsSubscribed();
	}

	public bool BIsSubscribedApp(AppId_t appID)
	{
		return platform.ISteamApps_BIsSubscribedApp(appID.Value);
	}

	public bool BIsSubscribedFromFreeWeekend()
	{
		return platform.ISteamApps_BIsSubscribedFromFreeWeekend();
	}

	public bool BIsVACBanned()
	{
		return platform.ISteamApps_BIsVACBanned();
	}

	public int GetAppBuildId()
	{
		return platform.ISteamApps_GetAppBuildId();
	}

	public string GetAppInstallDir(AppId_t appID)
	{
		uint num = 0u;
		StringBuilder stringBuilder = Helpers.TakeStringBuilder();
		uint cchFolderBufferSize = 4096u;
		if (platform.ISteamApps_GetAppInstallDir(appID.Value, stringBuilder, cchFolderBufferSize) == 0)
		{
			return null;
		}
		return stringBuilder.ToString();
	}

	public ulong GetAppOwner()
	{
		return platform.ISteamApps_GetAppOwner();
	}

	public string GetAvailableGameLanguages()
	{
		IntPtr ptr = platform.ISteamApps_GetAvailableGameLanguages();
		return Marshal.PtrToStringAnsi(ptr);
	}

	public string GetCurrentBetaName()
	{
		bool flag = false;
		StringBuilder stringBuilder = Helpers.TakeStringBuilder();
		int cchNameBufferSize = 4096;
		if (!platform.ISteamApps_GetCurrentBetaName(stringBuilder, cchNameBufferSize))
		{
			return null;
		}
		return stringBuilder.ToString();
	}

	public string GetCurrentGameLanguage()
	{
		IntPtr ptr = platform.ISteamApps_GetCurrentGameLanguage();
		return Marshal.PtrToStringAnsi(ptr);
	}

	public int GetDLCCount()
	{
		return platform.ISteamApps_GetDLCCount();
	}

	public bool GetDlcDownloadProgress(AppId_t nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal)
	{
		return platform.ISteamApps_GetDlcDownloadProgress(nAppID.Value, out punBytesDownloaded, out punBytesTotal);
	}

	public uint GetEarliestPurchaseUnixTime(AppId_t nAppID)
	{
		return platform.ISteamApps_GetEarliestPurchaseUnixTime(nAppID.Value);
	}

	public CallbackHandle GetFileDetails(string pszFileName, Action<FileDetailsResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamApps_GetFileDetails(pszFileName);
		if (CallbackFunction == null)
		{
			return null;
		}
		return FileDetailsResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public uint GetInstalledDepots(AppId_t appID, IntPtr pvecDepots, uint cMaxDepots)
	{
		return platform.ISteamApps_GetInstalledDepots(appID.Value, pvecDepots, cMaxDepots);
	}

	public string GetLaunchQueryParam(string pchKey)
	{
		IntPtr ptr = platform.ISteamApps_GetLaunchQueryParam(pchKey);
		return Marshal.PtrToStringAnsi(ptr);
	}

	public void InstallDLC(AppId_t nAppID)
	{
		platform.ISteamApps_InstallDLC(nAppID.Value);
	}

	public bool MarkContentCorrupt(bool bMissingFilesOnly)
	{
		return platform.ISteamApps_MarkContentCorrupt(bMissingFilesOnly);
	}

	public void RequestAllProofOfPurchaseKeys()
	{
		platform.ISteamApps_RequestAllProofOfPurchaseKeys();
	}

	public void RequestAppProofOfPurchaseKey(AppId_t nAppID)
	{
		platform.ISteamApps_RequestAppProofOfPurchaseKey(nAppID.Value);
	}

	public void UninstallDLC(AppId_t nAppID)
	{
		platform.ISteamApps_UninstallDLC(nAppID.Value);
	}
}
