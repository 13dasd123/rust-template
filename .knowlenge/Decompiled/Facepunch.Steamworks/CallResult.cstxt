using System;
using Facepunch.Steamworks;
using SteamNative;

internal class CallResult<T> : CallResult
{
	internal delegate T ConvertFromPointer(IntPtr p);

	private static byte[] resultBuffer = new byte[16384];

	private Action<T, bool> CallbackFunction;

	private ConvertFromPointer ConvertFromPointerFunction;

	internal int ResultSize = -1;

	internal int CallbackId;

	internal CallResult(BaseSteamworks steamworks, SteamAPICall_t call, Action<T, bool> callbackFunction, ConvertFromPointer fromPointer, int resultSize, int callbackId)
		: base(steamworks, call)
	{
		ResultSize = resultSize;
		CallbackId = callbackId;
		CallbackFunction = callbackFunction;
		ConvertFromPointerFunction = fromPointer;
		Steamworks.RegisterCallResult(this);
	}

	public override string ToString()
	{
		return $"CallResult( {typeof(T).Name}, {CallbackId}, {ResultSize}b )";
	}

	internal unsafe override void RunCallback()
	{
		bool pbFailed = false;
		fixed (byte* ptr = resultBuffer)
		{
			if (!Steamworks.native.utils.GetAPICallResult(Call, (IntPtr)ptr, resultBuffer.Length, CallbackId, ref pbFailed) || pbFailed)
			{
				CallbackFunction(default(T), arg2: true);
				return;
			}
			T arg = ConvertFromPointerFunction((IntPtr)ptr);
			CallbackFunction(arg, arg2: false);
		}
	}
}
