using System;
using System.Runtime.InteropServices;
using Facepunch.Steamworks;
using SteamNative;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct RemoteStorageGetPublishedFileDetailsResult_t
{
	[StructLayout(LayoutKind.Sequential, Pack = 4)]
	internal struct PackSmall
	{
		internal Result Result;

		internal ulong PublishedFileId;

		internal uint CreatorAppID;

		internal uint ConsumerAppID;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 129)]
		internal string Title;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 8000)]
		internal string Description;

		internal ulong File;

		internal ulong PreviewFile;

		internal ulong SteamIDOwner;

		internal uint TimeCreated;

		internal uint TimeUpdated;

		internal RemoteStoragePublishedFileVisibility Visibility;

		[MarshalAs(UnmanagedType.I1)]
		internal bool Banned;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 1025)]
		internal string Tags;

		[MarshalAs(UnmanagedType.I1)]
		internal bool TagsTruncated;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 260)]
		internal string PchFileName;

		internal int FileSize;

		internal int PreviewFileSize;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]
		internal string URL;

		internal WorkshopFileType FileType;

		[MarshalAs(UnmanagedType.I1)]
		internal bool AcceptedForUse;

		public static implicit operator RemoteStorageGetPublishedFileDetailsResult_t(PackSmall d)
		{
			RemoteStorageGetPublishedFileDetailsResult_t result = default(RemoteStorageGetPublishedFileDetailsResult_t);
			result.Result = d.Result;
			result.PublishedFileId = d.PublishedFileId;
			result.CreatorAppID = d.CreatorAppID;
			result.ConsumerAppID = d.ConsumerAppID;
			result.Title = d.Title;
			result.Description = d.Description;
			result.File = d.File;
			result.PreviewFile = d.PreviewFile;
			result.SteamIDOwner = d.SteamIDOwner;
			result.TimeCreated = d.TimeCreated;
			result.TimeUpdated = d.TimeUpdated;
			result.Visibility = d.Visibility;
			result.Banned = d.Banned;
			result.Tags = d.Tags;
			result.TagsTruncated = d.TagsTruncated;
			result.PchFileName = d.PchFileName;
			result.FileSize = d.FileSize;
			result.PreviewFileSize = d.PreviewFileSize;
			result.URL = d.URL;
			result.FileType = d.FileType;
			result.AcceptedForUse = d.AcceptedForUse;
			return result;
		}
	}

	internal const int CallbackId = 1318;

	internal Result Result;

	internal ulong PublishedFileId;

	internal uint CreatorAppID;

	internal uint ConsumerAppID;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 129)]
	internal string Title;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 8000)]
	internal string Description;

	internal ulong File;

	internal ulong PreviewFile;

	internal ulong SteamIDOwner;

	internal uint TimeCreated;

	internal uint TimeUpdated;

	internal RemoteStoragePublishedFileVisibility Visibility;

	[MarshalAs(UnmanagedType.I1)]
	internal bool Banned;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 1025)]
	internal string Tags;

	[MarshalAs(UnmanagedType.I1)]
	internal bool TagsTruncated;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 260)]
	internal string PchFileName;

	internal int FileSize;

	internal int PreviewFileSize;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]
	internal string URL;

	internal WorkshopFileType FileType;

	[MarshalAs(UnmanagedType.I1)]
	internal bool AcceptedForUse;

	internal static RemoteStorageGetPublishedFileDetailsResult_t FromPointer(IntPtr p)
	{
		if (Platform.PackSmall)
		{
			return (PackSmall)Marshal.PtrToStructure(p, typeof(PackSmall));
		}
		return (RemoteStorageGetPublishedFileDetailsResult_t)Marshal.PtrToStructure(p, typeof(RemoteStorageGetPublishedFileDetailsResult_t));
	}

	internal static int StructSize()
	{
		if (Platform.PackSmall)
		{
			return Marshal.SizeOf(typeof(PackSmall));
		}
		return Marshal.SizeOf(typeof(RemoteStorageGetPublishedFileDetailsResult_t));
	}

	internal static CallResult<RemoteStorageGetPublishedFileDetailsResult_t> CallResult(BaseSteamworks steamworks, SteamAPICall_t call, Action<RemoteStorageGetPublishedFileDetailsResult_t, bool> CallbackFunction)
	{
		return new CallResult<RemoteStorageGetPublishedFileDetailsResult_t>(steamworks, call, CallbackFunction, FromPointer, StructSize(), 1318);
	}

	internal static void Register(BaseSteamworks steamworks)
	{
		CallbackHandle callbackHandle = new CallbackHandle(steamworks);
		if (Config.UseThisCall)
		{
			if (Platform.IsWindows)
			{
				callbackHandle.vTablePtr = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(Callback.VTableWinThis)));
				Callback.VTableWinThis vTableWinThis = new Callback.VTableWinThis
				{
					ResultA = OnResultThis,
					ResultB = OnResultWithInfoThis,
					GetSize = OnGetSizeThis
				};
				callbackHandle.FuncA = GCHandle.Alloc(vTableWinThis.ResultA);
				callbackHandle.FuncB = GCHandle.Alloc(vTableWinThis.ResultB);
				callbackHandle.FuncC = GCHandle.Alloc(vTableWinThis.GetSize);
				Marshal.StructureToPtr((object)vTableWinThis, callbackHandle.vTablePtr, fDeleteOld: false);
			}
			else
			{
				callbackHandle.vTablePtr = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(Callback.VTableThis)));
				Callback.VTableThis vTableThis = new Callback.VTableThis
				{
					ResultA = OnResultThis,
					ResultB = OnResultWithInfoThis,
					GetSize = OnGetSizeThis
				};
				callbackHandle.FuncA = GCHandle.Alloc(vTableThis.ResultA);
				callbackHandle.FuncB = GCHandle.Alloc(vTableThis.ResultB);
				callbackHandle.FuncC = GCHandle.Alloc(vTableThis.GetSize);
				Marshal.StructureToPtr((object)vTableThis, callbackHandle.vTablePtr, fDeleteOld: false);
			}
		}
		else if (Platform.IsWindows)
		{
			callbackHandle.vTablePtr = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(Callback.VTableWin)));
			Callback.VTableWin vTableWin = new Callback.VTableWin
			{
				ResultA = OnResult,
				ResultB = OnResultWithInfo,
				GetSize = OnGetSize
			};
			callbackHandle.FuncA = GCHandle.Alloc(vTableWin.ResultA);
			callbackHandle.FuncB = GCHandle.Alloc(vTableWin.ResultB);
			callbackHandle.FuncC = GCHandle.Alloc(vTableWin.GetSize);
			Marshal.StructureToPtr((object)vTableWin, callbackHandle.vTablePtr, fDeleteOld: false);
		}
		else
		{
			callbackHandle.vTablePtr = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(Callback.VTable)));
			Callback.VTable vTable = new Callback.VTable
			{
				ResultA = OnResult,
				ResultB = OnResultWithInfo,
				GetSize = OnGetSize
			};
			callbackHandle.FuncA = GCHandle.Alloc(vTable.ResultA);
			callbackHandle.FuncB = GCHandle.Alloc(vTable.ResultB);
			callbackHandle.FuncC = GCHandle.Alloc(vTable.GetSize);
			Marshal.StructureToPtr((object)vTable, callbackHandle.vTablePtr, fDeleteOld: false);
		}
		Callback callback = new Callback();
		callback.vTablePtr = callbackHandle.vTablePtr;
		callback.CallbackFlags = (byte)(steamworks.IsGameServer ? 2 : 0);
		callback.CallbackId = 1318;
		callbackHandle.PinnedCallback = GCHandle.Alloc(callback, GCHandleType.Pinned);
		steamworks.native.api.SteamAPI_RegisterCallback(callbackHandle.PinnedCallback.AddrOfPinnedObject(), 1318);
		steamworks.RegisterCallbackHandle(callbackHandle);
	}

	[MonoPInvokeCallback]
	internal static void OnResultThis(IntPtr self, IntPtr param)
	{
		OnResult(param);
	}

	[MonoPInvokeCallback]
	internal static void OnResultWithInfoThis(IntPtr self, IntPtr param, bool failure, SteamAPICall_t call)
	{
		OnResultWithInfo(param, failure, call);
	}

	[MonoPInvokeCallback]
	internal static int OnGetSizeThis(IntPtr self)
	{
		return OnGetSize();
	}

	[MonoPInvokeCallback]
	internal static int OnGetSize()
	{
		return StructSize();
	}

	[MonoPInvokeCallback]
	internal static void OnResult(IntPtr param)
	{
		OnResultWithInfo(param, failure: false, 0uL);
	}

	[MonoPInvokeCallback]
	internal static void OnResultWithInfo(IntPtr param, bool failure, SteamAPICall_t call)
	{
		if (!failure)
		{
			RemoteStorageGetPublishedFileDetailsResult_t data = FromPointer(param);
			if (Client.Instance != null)
			{
				Client.Instance.OnCallback(data);
			}
			if (Server.Instance != null)
			{
				Server.Instance.OnCallback(data);
			}
		}
	}
}
