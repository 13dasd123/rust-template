using System;
using System.Runtime.InteropServices;
using Facepunch.Steamworks;
using SteamNative;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct RemoteStorageGetPublishedFileDetailsResult_t
{
	[StructLayout(LayoutKind.Sequential, Pack = 4)]
	internal struct PackSmall
	{
		public Result Result;

		public ulong PublishedFileId;

		public uint CreatorAppID;

		public uint ConsumerAppID;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 129)]
		public string Title;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 8000)]
		public string Description;

		public ulong File;

		public ulong PreviewFile;

		public ulong SteamIDOwner;

		public uint TimeCreated;

		public uint TimeUpdated;

		public RemoteStoragePublishedFileVisibility Visibility;

		[MarshalAs(UnmanagedType.I1)]
		public bool Banned;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 1025)]
		public string Tags;

		[MarshalAs(UnmanagedType.I1)]
		public bool TagsTruncated;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 260)]
		public string PchFileName;

		public int FileSize;

		public int PreviewFileSize;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]
		public string URL;

		public WorkshopFileType FileType;

		[MarshalAs(UnmanagedType.I1)]
		public bool AcceptedForUse;

		public static implicit operator RemoteStorageGetPublishedFileDetailsResult_t(PackSmall d)
		{
			RemoteStorageGetPublishedFileDetailsResult_t result = default(RemoteStorageGetPublishedFileDetailsResult_t);
			result.Result = d.Result;
			result.PublishedFileId = d.PublishedFileId;
			result.CreatorAppID = d.CreatorAppID;
			result.ConsumerAppID = d.ConsumerAppID;
			result.Title = d.Title;
			result.Description = d.Description;
			result.File = d.File;
			result.PreviewFile = d.PreviewFile;
			result.SteamIDOwner = d.SteamIDOwner;
			result.TimeCreated = d.TimeCreated;
			result.TimeUpdated = d.TimeUpdated;
			result.Visibility = d.Visibility;
			result.Banned = d.Banned;
			result.Tags = d.Tags;
			result.TagsTruncated = d.TagsTruncated;
			result.PchFileName = d.PchFileName;
			result.FileSize = d.FileSize;
			result.PreviewFileSize = d.PreviewFileSize;
			result.URL = d.URL;
			result.FileType = d.FileType;
			result.AcceptedForUse = d.AcceptedForUse;
			return result;
		}
	}

	public const int CallbackId = 1318;

	public Result Result;

	public ulong PublishedFileId;

	public uint CreatorAppID;

	public uint ConsumerAppID;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 129)]
	public string Title;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 8000)]
	public string Description;

	public ulong File;

	public ulong PreviewFile;

	public ulong SteamIDOwner;

	public uint TimeCreated;

	public uint TimeUpdated;

	public RemoteStoragePublishedFileVisibility Visibility;

	[MarshalAs(UnmanagedType.I1)]
	public bool Banned;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 1025)]
	public string Tags;

	[MarshalAs(UnmanagedType.I1)]
	public bool TagsTruncated;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 260)]
	public string PchFileName;

	public int FileSize;

	public int PreviewFileSize;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]
	public string URL;

	public WorkshopFileType FileType;

	[MarshalAs(UnmanagedType.I1)]
	public bool AcceptedForUse;

	public static RemoteStorageGetPublishedFileDetailsResult_t FromPointer(IntPtr p)
	{
		if (Platform.PackSmall)
		{
			return (PackSmall)Marshal.PtrToStructure(p, typeof(PackSmall));
		}
		return (RemoteStorageGetPublishedFileDetailsResult_t)Marshal.PtrToStructure(p, typeof(RemoteStorageGetPublishedFileDetailsResult_t));
	}

	public static CallbackHandle CallResult(BaseSteamworks steamworks, SteamAPICall_t call, Action<RemoteStorageGetPublishedFileDetailsResult_t, bool> CallbackFunction)
	{
		CallbackHandle handle = new CallbackHandle();
		handle.steamworks = steamworks;
		handle.CallResultHandle = call;
		handle.CallResult = true;
		if (Config.UseThisCall)
		{
			Callback.ThisCall.Result result = delegate(IntPtr _, IntPtr p)
			{
				handle.Dispose();
				CallbackFunction(FromPointer(p), arg2: false);
			};
			Callback.ThisCall.ResultWithInfo resultWithInfo = delegate(IntPtr _, IntPtr p, bool bIOFailure, SteamAPICall_t hSteamAPICall)
			{
				if ((ulong)hSteamAPICall == (ulong)call)
				{
					handle.CallResultHandle = 0uL;
					handle.Dispose();
					CallbackFunction(FromPointer(p), bIOFailure);
				}
			};
			Callback.ThisCall.GetSize getSize = (IntPtr _) => Marshal.SizeOf(typeof(RemoteStorageGetPublishedFileDetailsResult_t));
			if (Platform.PackSmall)
			{
				getSize = (IntPtr _) => Marshal.SizeOf(typeof(PackSmall));
			}
			handle.FuncA = GCHandle.Alloc(result);
			handle.FuncB = GCHandle.Alloc(resultWithInfo);
			handle.FuncC = GCHandle.Alloc(getSize);
			handle.vTablePtr = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(Callback.VTable)));
			Callback.VTable vTable = new Callback.VTable
			{
				ResultA = Marshal.GetFunctionPointerForDelegate(result),
				ResultB = Marshal.GetFunctionPointerForDelegate(resultWithInfo),
				GetSize = Marshal.GetFunctionPointerForDelegate(getSize)
			};
			if (Platform.IsWindows)
			{
				vTable.ResultA = Marshal.GetFunctionPointerForDelegate(resultWithInfo);
				vTable.ResultB = Marshal.GetFunctionPointerForDelegate(result);
			}
			Marshal.StructureToPtr(vTable, handle.vTablePtr, fDeleteOld: false);
		}
		else
		{
			Callback.StdCall.Result result2 = delegate(IntPtr p)
			{
				handle.Dispose();
				CallbackFunction(FromPointer(p), arg2: false);
			};
			Callback.StdCall.ResultWithInfo resultWithInfo2 = delegate(IntPtr p, bool bIOFailure, SteamAPICall_t hSteamAPICall)
			{
				if ((ulong)hSteamAPICall == (ulong)call)
				{
					handle.CallResultHandle = 0uL;
					handle.Dispose();
					CallbackFunction(FromPointer(p), bIOFailure);
				}
			};
			Callback.StdCall.GetSize getSize2 = () => Marshal.SizeOf(typeof(RemoteStorageGetPublishedFileDetailsResult_t));
			if (Platform.PackSmall)
			{
				getSize2 = () => Marshal.SizeOf(typeof(PackSmall));
			}
			handle.FuncA = GCHandle.Alloc(result2);
			handle.FuncB = GCHandle.Alloc(resultWithInfo2);
			handle.FuncC = GCHandle.Alloc(getSize2);
			handle.vTablePtr = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(Callback.VTable)));
			Callback.VTable vTable2 = new Callback.VTable
			{
				ResultA = Marshal.GetFunctionPointerForDelegate(result2),
				ResultB = Marshal.GetFunctionPointerForDelegate(resultWithInfo2),
				GetSize = Marshal.GetFunctionPointerForDelegate(getSize2)
			};
			if (Platform.IsWindows)
			{
				vTable2.ResultA = Marshal.GetFunctionPointerForDelegate(resultWithInfo2);
				vTable2.ResultB = Marshal.GetFunctionPointerForDelegate(result2);
			}
			Marshal.StructureToPtr(vTable2, handle.vTablePtr, fDeleteOld: false);
		}
		Callback callback = new Callback();
		callback.vTablePtr = handle.vTablePtr;
		callback.CallbackFlags = (byte)(steamworks.IsGameServer ? 2 : 0);
		callback.CallbackId = 1318;
		handle.PinnedCallback = GCHandle.Alloc(callback, GCHandleType.Pinned);
		steamworks.native.api.SteamAPI_RegisterCallResult(handle.PinnedCallback.AddrOfPinnedObject(), call);
		return handle;
	}

	public static void RegisterCallback(BaseSteamworks steamworks, Action<RemoteStorageGetPublishedFileDetailsResult_t, bool> CallbackFunction)
	{
		CallbackHandle callbackHandle = new CallbackHandle();
		callbackHandle.steamworks = steamworks;
		if (Config.UseThisCall)
		{
			Callback.ThisCall.Result result = delegate(IntPtr _, IntPtr p)
			{
				CallbackFunction(FromPointer(p), arg2: false);
			};
			Callback.ThisCall.ResultWithInfo resultWithInfo = delegate(IntPtr _, IntPtr p, bool bIOFailure, SteamAPICall_t hSteamAPICall)
			{
				CallbackFunction(FromPointer(p), bIOFailure);
			};
			Callback.ThisCall.GetSize getSize = (IntPtr _) => Marshal.SizeOf(typeof(RemoteStorageGetPublishedFileDetailsResult_t));
			if (Platform.PackSmall)
			{
				getSize = (IntPtr _) => Marshal.SizeOf(typeof(PackSmall));
			}
			callbackHandle.FuncA = GCHandle.Alloc(result);
			callbackHandle.FuncB = GCHandle.Alloc(resultWithInfo);
			callbackHandle.FuncC = GCHandle.Alloc(getSize);
			callbackHandle.vTablePtr = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(Callback.VTable)));
			Callback.VTable vTable = new Callback.VTable
			{
				ResultA = Marshal.GetFunctionPointerForDelegate(result),
				ResultB = Marshal.GetFunctionPointerForDelegate(resultWithInfo),
				GetSize = Marshal.GetFunctionPointerForDelegate(getSize)
			};
			if (Platform.IsWindows)
			{
				vTable.ResultA = Marshal.GetFunctionPointerForDelegate(resultWithInfo);
				vTable.ResultB = Marshal.GetFunctionPointerForDelegate(result);
			}
			Marshal.StructureToPtr(vTable, callbackHandle.vTablePtr, fDeleteOld: false);
		}
		else
		{
			Callback.StdCall.Result result2 = delegate(IntPtr p)
			{
				CallbackFunction(FromPointer(p), arg2: false);
			};
			Callback.StdCall.ResultWithInfo resultWithInfo2 = delegate(IntPtr p, bool bIOFailure, SteamAPICall_t hSteamAPICall)
			{
				CallbackFunction(FromPointer(p), bIOFailure);
			};
			Callback.StdCall.GetSize getSize2 = () => Marshal.SizeOf(typeof(RemoteStorageGetPublishedFileDetailsResult_t));
			if (Platform.PackSmall)
			{
				getSize2 = () => Marshal.SizeOf(typeof(PackSmall));
			}
			callbackHandle.FuncA = GCHandle.Alloc(result2);
			callbackHandle.FuncB = GCHandle.Alloc(resultWithInfo2);
			callbackHandle.FuncC = GCHandle.Alloc(getSize2);
			callbackHandle.vTablePtr = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(Callback.VTable)));
			Callback.VTable vTable2 = new Callback.VTable
			{
				ResultA = Marshal.GetFunctionPointerForDelegate(result2),
				ResultB = Marshal.GetFunctionPointerForDelegate(resultWithInfo2),
				GetSize = Marshal.GetFunctionPointerForDelegate(getSize2)
			};
			if (Platform.IsWindows)
			{
				vTable2.ResultA = Marshal.GetFunctionPointerForDelegate(resultWithInfo2);
				vTable2.ResultB = Marshal.GetFunctionPointerForDelegate(result2);
			}
			Marshal.StructureToPtr(vTable2, callbackHandle.vTablePtr, fDeleteOld: false);
		}
		Callback callback = new Callback();
		callback.vTablePtr = callbackHandle.vTablePtr;
		callback.CallbackFlags = (byte)(steamworks.IsGameServer ? 2 : 0);
		callback.CallbackId = 1318;
		callbackHandle.PinnedCallback = GCHandle.Alloc(callback, GCHandleType.Pinned);
		steamworks.native.api.SteamAPI_RegisterCallback(callbackHandle.PinnedCallback.AddrOfPinnedObject(), 1318);
		steamworks.RegisterCallbackHandle(callbackHandle);
	}
}
