using System;
using System.Runtime.InteropServices;
using SteamNative;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ControllerDigitalActionData_t
{
	[StructLayout(LayoutKind.Sequential, Pack = 4)]
	internal struct PackSmall
	{
		[MarshalAs(UnmanagedType.I1)]
		internal bool BState;

		[MarshalAs(UnmanagedType.I1)]
		internal bool BActive;

		public static implicit operator ControllerDigitalActionData_t(PackSmall d)
		{
			ControllerDigitalActionData_t result = default(ControllerDigitalActionData_t);
			result.BState = d.BState;
			result.BActive = d.BActive;
			return result;
		}
	}

	[MarshalAs(UnmanagedType.I1)]
	internal bool BState;

	[MarshalAs(UnmanagedType.I1)]
	internal bool BActive;

	internal static ControllerDigitalActionData_t FromPointer(IntPtr p)
	{
		if (Platform.PackSmall)
		{
			return (PackSmall)Marshal.PtrToStructure(p, typeof(PackSmall));
		}
		return (ControllerDigitalActionData_t)Marshal.PtrToStructure(p, typeof(ControllerDigitalActionData_t));
	}

	internal static int StructSize()
	{
		if (Platform.PackSmall)
		{
			return Marshal.SizeOf(typeof(PackSmall));
		}
		return Marshal.SizeOf(typeof(ControllerDigitalActionData_t));
	}
}
