using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using SteamNative;

public class Filter : List<KeyValuePair<string, string>>
{
	internal IntPtr NativeArray;

	private IntPtr m_pArrayEntries;

	private int AppId;

	public void Add(string k, string v)
	{
		Add(new KeyValuePair<string, string>(k, v));
	}

	internal void Start()
	{
		MatchMakingKeyValuePair_t[] array = this.Select(delegate(KeyValuePair<string, string> x)
		{
			if (x.Key == "appid")
			{
				AppId = int.Parse(x.Value);
			}
			MatchMakingKeyValuePair_t result = default(MatchMakingKeyValuePair_t);
			result.Key = x.Key;
			result.Value = x.Value;
			return result;
		}).ToArray();
		int num = Marshal.SizeOf(typeof(MatchMakingKeyValuePair_t));
		NativeArray = Marshal.AllocHGlobal(Marshal.SizeOf(typeof(IntPtr)) * array.Length);
		m_pArrayEntries = Marshal.AllocHGlobal(num * array.Length);
		for (int i = 0; i < array.Length; i++)
		{
			Marshal.StructureToPtr((object)array[i], new IntPtr(m_pArrayEntries.ToInt64() + i * num), fDeleteOld: false);
		}
		Marshal.WriteIntPtr(NativeArray, m_pArrayEntries);
	}

	internal void Free()
	{
		if (m_pArrayEntries != IntPtr.Zero)
		{
			Marshal.FreeHGlobal(m_pArrayEntries);
		}
		if (NativeArray != IntPtr.Zero)
		{
			Marshal.FreeHGlobal(NativeArray);
		}
	}

	internal bool Test(gameserveritem_t info)
	{
		if (AppId != 0 && AppId != info.AppID)
		{
			return false;
		}
		return true;
	}
}
