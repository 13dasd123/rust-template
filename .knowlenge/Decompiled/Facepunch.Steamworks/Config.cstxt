using System;
using Facepunch.Steamworks;
using SteamNative;

public static class Config
{
	public static bool UseThisCall { get; set; } = Platform.Os == Facepunch.Steamworks.OperatingSystem.Windows;

	public static void ForUnity(string platform)
	{
		if (platform == "WindowsEditor" || platform == "WindowsPlayer")
		{
			ForcePlatform(Facepunch.Steamworks.OperatingSystem.Windows, (IntPtr.Size == 4) ? Architecture.x86 : Architecture.x64);
		}
		switch (platform)
		{
		case "OSXEditor":
		case "OSXPlayer":
		case "OSXDashboardPlayer":
			ForcePlatform(Facepunch.Steamworks.OperatingSystem.Osx, (IntPtr.Size == 4) ? Architecture.x86 : Architecture.x64);
			break;
		}
		if (platform == "LinuxPlayer" || platform == "LinuxEditor")
		{
			ForcePlatform(Facepunch.Steamworks.OperatingSystem.Linux, (IntPtr.Size == 4) ? Architecture.x86 : Architecture.x64);
		}
		UseThisCall = true;
		Console.WriteLine("Facepunch.Steamworks Unity: " + platform);
		Console.WriteLine("Facepunch.Steamworks Os: " + Platform.Os);
		Console.WriteLine("Facepunch.Steamworks Arch: " + Platform.Arch);
	}

	public static void ForcePlatform(Facepunch.Steamworks.OperatingSystem os, Architecture arch)
	{
		Platform.Os = os;
		Platform.Arch = arch;
	}
}
