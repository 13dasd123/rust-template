using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Facepunch.Steamworks;
using SteamNative;

public class Friends
{
	public delegate void ChatMessageDelegate(SteamFriend friend, string type, string message);

	public delegate void JoinRequestedDelegate(SteamFriend friend, string connect);

	public enum AvatarSize
	{
		Small,
		Medium,
		Large
	}

	private class PersonaCallback
	{
		public ulong SteamId;

		public AvatarSize Size;

		public Action<Image> Callback;

		public DateTime Time;
	}

	internal Client client;

	private byte[] buffer = new byte[131072];

	private bool _listenForFriendsMessages;

	private List<SteamFriend> _allFriends;

	private List<PersonaCallback> PersonaCallbacks = new List<PersonaCallback>();

	public bool ListenForFriendsMessages
	{
		get
		{
			return _listenForFriendsMessages;
		}
		set
		{
			_listenForFriendsMessages = value;
			client.native.friends.SetListenForFriendsMessages(value);
		}
	}

	public IEnumerable<SteamFriend> All
	{
		get
		{
			if (_allFriends == null)
			{
				_allFriends = new List<SteamFriend>();
				Refresh();
			}
			return _allFriends;
		}
	}

	public IEnumerable<SteamFriend> AllFriends
	{
		get
		{
			foreach (SteamFriend item in All)
			{
				if (item.IsFriend)
				{
					yield return item;
				}
			}
		}
	}

	public IEnumerable<SteamFriend> AllBlocked
	{
		get
		{
			foreach (SteamFriend item in All)
			{
				if (item.IsBlocked)
				{
					yield return item;
				}
			}
		}
	}

	public event ChatMessageDelegate OnChatMessage;

	public event JoinRequestedDelegate OnInvitedToGame;

	internal Friends(Client c)
	{
		client = c;
		client.RegisterCallback<AvatarImageLoaded_t>(OnAvatarImageLoaded);
		client.RegisterCallback<PersonaStateChange_t>(OnPersonaStateChange);
		client.RegisterCallback<GameRichPresenceJoinRequested_t>(OnGameJoinRequested);
		client.RegisterCallback<GameConnectedFriendChatMsg_t>(OnFriendChatMessage);
	}

	private unsafe void OnFriendChatMessage(GameConnectedFriendChatMsg_t data)
	{
		if (this.OnChatMessage == null)
		{
			return;
		}
		SteamFriend friend = Get(data.SteamIDUser);
		ChatEntryType peChatEntryType = ChatEntryType.ChatMsg;
		fixed (byte* ptr = buffer)
		{
			int friendMessage = client.native.friends.GetFriendMessage(data.SteamIDUser, data.MessageID, (IntPtr)ptr, buffer.Length, out peChatEntryType);
			if (friendMessage == 0 && peChatEntryType == ChatEntryType.Invalid)
			{
				return;
			}
			string type = peChatEntryType.ToString();
			string @string = Encoding.UTF8.GetString(buffer, 0, friendMessage);
			this.OnChatMessage(friend, type, @string);
		}
	}

	private void OnGameJoinRequested(GameRichPresenceJoinRequested_t data)
	{
		if (this.OnInvitedToGame != null)
		{
			this.OnInvitedToGame(Get(data.SteamIDFriend), data.Connect);
		}
	}

	public bool UpdateInformation(ulong steamid)
	{
		return !client.native.friends.RequestUserInformation(steamid, bRequireNameOnly: false);
	}

	public string GetName(ulong steamid)
	{
		client.native.friends.RequestUserInformation(steamid, bRequireNameOnly: true);
		return client.native.friends.GetFriendPersonaName(steamid);
	}

	public void Refresh()
	{
		if (_allFriends == null)
		{
			_allFriends = new List<SteamFriend>();
		}
		_allFriends.Clear();
		int iFriendFlags = 65535;
		int friendCount = client.native.friends.GetFriendCount(iFriendFlags);
		for (int i = 0; i < friendCount; i++)
		{
			ulong friendByIndex = client.native.friends.GetFriendByIndex(i, iFriendFlags);
			_allFriends.Add(Get(friendByIndex));
		}
	}

	public Image GetCachedAvatar(AvatarSize size, ulong steamid)
	{
		int num = 0;
		switch (size)
		{
		case AvatarSize.Small:
			num = client.native.friends.GetSmallFriendAvatar(steamid);
			break;
		case AvatarSize.Medium:
			num = client.native.friends.GetMediumFriendAvatar(steamid);
			break;
		case AvatarSize.Large:
			num = client.native.friends.GetLargeFriendAvatar(steamid);
			break;
		}
		switch (num)
		{
		case 1:
			return null;
		case 2:
			return null;
		case 3:
			return null;
		default:
		{
			Image image = new Image
			{
				Id = num
			};
			if (!image.TryLoad(client.native.utils))
			{
				return null;
			}
			return image;
		}
		}
	}

	public void GetAvatar(AvatarSize size, ulong steamid, Action<Image> callback)
	{
		Image cachedAvatar = GetCachedAvatar(size, steamid);
		if (cachedAvatar != null)
		{
			callback(cachedAvatar);
			return;
		}
		if (!client.native.friends.RequestUserInformation(steamid, bRequireNameOnly: false))
		{
			callback(null);
			return;
		}
		PersonaCallbacks.Add(new PersonaCallback
		{
			SteamId = steamid,
			Size = size,
			Callback = callback,
			Time = DateTime.Now
		});
	}

	public SteamFriend Get(ulong steamid)
	{
		SteamFriend steamFriend = All.Where((SteamFriend x) => x.Id == steamid).FirstOrDefault();
		if (steamFriend != null)
		{
			return steamFriend;
		}
		SteamFriend steamFriend2 = new SteamFriend();
		steamFriend2.Id = steamid;
		steamFriend2.Client = client;
		steamFriend2.Refresh();
		return steamFriend2;
	}

	internal void Cycle()
	{
		if (PersonaCallbacks.Count == 0)
		{
			return;
		}
		DateTime dateTime = DateTime.Now.AddSeconds(-10.0);
		for (int num = PersonaCallbacks.Count - 1; num >= 0; num--)
		{
			PersonaCallback personaCallback = PersonaCallbacks[num];
			if (personaCallback.Time < dateTime)
			{
				if (personaCallback.Callback != null)
				{
					personaCallback.Callback(null);
				}
				PersonaCallbacks.Remove(personaCallback);
			}
		}
	}

	private void OnPersonaStateChange(PersonaStateChange_t data)
	{
		if ((data.ChangeFlags & 0x40) == 64)
		{
			LoadAvatarForSteamId(data.SteamID);
		}
		foreach (SteamFriend item in All)
		{
			if (item.Id == data.SteamID)
			{
				item.Refresh();
			}
		}
	}

	private void LoadAvatarForSteamId(ulong Steamid)
	{
		for (int num = PersonaCallbacks.Count - 1; num >= 0; num--)
		{
			PersonaCallback personaCallback = PersonaCallbacks[num];
			if (personaCallback.SteamId == Steamid)
			{
				Image cachedAvatar = GetCachedAvatar(personaCallback.Size, personaCallback.SteamId);
				if (cachedAvatar != null)
				{
					PersonaCallbacks.Remove(personaCallback);
					if (personaCallback.Callback != null)
					{
						personaCallback.Callback(cachedAvatar);
					}
				}
			}
		}
	}

	private void OnAvatarImageLoaded(AvatarImageLoaded_t data)
	{
		LoadAvatarForSteamId(data.SteamID);
	}
}
