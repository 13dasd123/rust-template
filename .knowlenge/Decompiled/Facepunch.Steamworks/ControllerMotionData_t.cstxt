using System;
using System.Runtime.InteropServices;
using SteamNative;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ControllerMotionData_t
{
	[StructLayout(LayoutKind.Sequential, Pack = 4)]
	internal struct PackSmall
	{
		public float RotQuatX;

		public float RotQuatY;

		public float RotQuatZ;

		public float RotQuatW;

		public float PosAccelX;

		public float PosAccelY;

		public float PosAccelZ;

		public float RotVelX;

		public float RotVelY;

		public float RotVelZ;

		public static implicit operator ControllerMotionData_t(PackSmall d)
		{
			ControllerMotionData_t result = default(ControllerMotionData_t);
			result.RotQuatX = d.RotQuatX;
			result.RotQuatY = d.RotQuatY;
			result.RotQuatZ = d.RotQuatZ;
			result.RotQuatW = d.RotQuatW;
			result.PosAccelX = d.PosAccelX;
			result.PosAccelY = d.PosAccelY;
			result.PosAccelZ = d.PosAccelZ;
			result.RotVelX = d.RotVelX;
			result.RotVelY = d.RotVelY;
			result.RotVelZ = d.RotVelZ;
			return result;
		}
	}

	public float RotQuatX;

	public float RotQuatY;

	public float RotQuatZ;

	public float RotQuatW;

	public float PosAccelX;

	public float PosAccelY;

	public float PosAccelZ;

	public float RotVelX;

	public float RotVelY;

	public float RotVelZ;

	public static ControllerMotionData_t FromPointer(IntPtr p)
	{
		if (Platform.PackSmall)
		{
			return (PackSmall)Marshal.PtrToStructure(p, typeof(PackSmall));
		}
		return (ControllerMotionData_t)Marshal.PtrToStructure(p, typeof(ControllerMotionData_t));
	}
}
