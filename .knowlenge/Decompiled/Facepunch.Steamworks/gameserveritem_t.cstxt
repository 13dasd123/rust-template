using System;
using System.Runtime.InteropServices;
using SteamNative;

[StructLayout(LayoutKind.Sequential, Pack = 4)]
internal struct gameserveritem_t
{
	[StructLayout(LayoutKind.Sequential, Pack = 4)]
	internal struct PackSmall
	{
		internal servernetadr_t NetAdr;

		internal int Ping;

		[MarshalAs(UnmanagedType.I1)]
		internal bool HadSuccessfulResponse;

		[MarshalAs(UnmanagedType.I1)]
		internal bool DoNotRefresh;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 32)]
		internal string GameDir;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 32)]
		internal string Map;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
		internal string GameDescription;

		internal uint AppID;

		internal int Players;

		internal int MaxPlayers;

		internal int BotPlayers;

		[MarshalAs(UnmanagedType.I1)]
		internal bool Password;

		[MarshalAs(UnmanagedType.I1)]
		internal bool Secure;

		internal uint TimeLastPlayed;

		internal int ServerVersion;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
		internal string ServerName;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
		internal string GameTags;

		internal ulong SteamID;

		public static implicit operator gameserveritem_t(PackSmall d)
		{
			gameserveritem_t result = default(gameserveritem_t);
			result.NetAdr = d.NetAdr;
			result.Ping = d.Ping;
			result.HadSuccessfulResponse = d.HadSuccessfulResponse;
			result.DoNotRefresh = d.DoNotRefresh;
			result.GameDir = d.GameDir;
			result.Map = d.Map;
			result.GameDescription = d.GameDescription;
			result.AppID = d.AppID;
			result.Players = d.Players;
			result.MaxPlayers = d.MaxPlayers;
			result.BotPlayers = d.BotPlayers;
			result.Password = d.Password;
			result.Secure = d.Secure;
			result.TimeLastPlayed = d.TimeLastPlayed;
			result.ServerVersion = d.ServerVersion;
			result.ServerName = d.ServerName;
			result.GameTags = d.GameTags;
			result.SteamID = d.SteamID;
			return result;
		}
	}

	internal servernetadr_t NetAdr;

	internal int Ping;

	[MarshalAs(UnmanagedType.I1)]
	internal bool HadSuccessfulResponse;

	[MarshalAs(UnmanagedType.I1)]
	internal bool DoNotRefresh;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 32)]
	internal string GameDir;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 32)]
	internal string Map;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
	internal string GameDescription;

	internal uint AppID;

	internal int Players;

	internal int MaxPlayers;

	internal int BotPlayers;

	[MarshalAs(UnmanagedType.I1)]
	internal bool Password;

	[MarshalAs(UnmanagedType.I1)]
	internal bool Secure;

	internal uint TimeLastPlayed;

	internal int ServerVersion;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
	internal string ServerName;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
	internal string GameTags;

	internal ulong SteamID;

	internal static gameserveritem_t FromPointer(IntPtr p)
	{
		if (Platform.PackSmall)
		{
			return (PackSmall)Marshal.PtrToStructure(p, typeof(PackSmall));
		}
		return (gameserveritem_t)Marshal.PtrToStructure(p, typeof(gameserveritem_t));
	}

	internal static int StructSize()
	{
		if (Platform.PackSmall)
		{
			return Marshal.SizeOf(typeof(PackSmall));
		}
		return Marshal.SizeOf(typeof(gameserveritem_t));
	}
}
