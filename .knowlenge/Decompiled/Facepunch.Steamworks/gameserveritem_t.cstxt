using System;
using System.Runtime.InteropServices;
using SteamNative;

[StructLayout(LayoutKind.Sequential, Pack = 4)]
internal struct gameserveritem_t
{
	[StructLayout(LayoutKind.Sequential, Pack = 4)]
	internal struct PackSmall
	{
		public servernetadr_t NetAdr;

		public int Ping;

		[MarshalAs(UnmanagedType.I1)]
		public bool HadSuccessfulResponse;

		[MarshalAs(UnmanagedType.I1)]
		public bool DoNotRefresh;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 32)]
		public string GameDir;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 32)]
		public string Map;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
		public string GameDescription;

		public uint AppID;

		public int Players;

		public int MaxPlayers;

		public int BotPlayers;

		[MarshalAs(UnmanagedType.I1)]
		public bool Password;

		[MarshalAs(UnmanagedType.I1)]
		public bool Secure;

		public uint TimeLastPlayed;

		public int ServerVersion;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
		public string ServerName;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
		public string GameTags;

		public ulong SteamID;

		public static implicit operator gameserveritem_t(PackSmall d)
		{
			gameserveritem_t result = default(gameserveritem_t);
			result.NetAdr = d.NetAdr;
			result.Ping = d.Ping;
			result.HadSuccessfulResponse = d.HadSuccessfulResponse;
			result.DoNotRefresh = d.DoNotRefresh;
			result.GameDir = d.GameDir;
			result.Map = d.Map;
			result.GameDescription = d.GameDescription;
			result.AppID = d.AppID;
			result.Players = d.Players;
			result.MaxPlayers = d.MaxPlayers;
			result.BotPlayers = d.BotPlayers;
			result.Password = d.Password;
			result.Secure = d.Secure;
			result.TimeLastPlayed = d.TimeLastPlayed;
			result.ServerVersion = d.ServerVersion;
			result.ServerName = d.ServerName;
			result.GameTags = d.GameTags;
			result.SteamID = d.SteamID;
			return result;
		}
	}

	public servernetadr_t NetAdr;

	public int Ping;

	[MarshalAs(UnmanagedType.I1)]
	public bool HadSuccessfulResponse;

	[MarshalAs(UnmanagedType.I1)]
	public bool DoNotRefresh;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 32)]
	public string GameDir;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 32)]
	public string Map;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
	public string GameDescription;

	public uint AppID;

	public int Players;

	public int MaxPlayers;

	public int BotPlayers;

	[MarshalAs(UnmanagedType.I1)]
	public bool Password;

	[MarshalAs(UnmanagedType.I1)]
	public bool Secure;

	public uint TimeLastPlayed;

	public int ServerVersion;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 64)]
	public string ServerName;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 128)]
	public string GameTags;

	public ulong SteamID;

	public static gameserveritem_t FromPointer(IntPtr p)
	{
		if (Platform.PackSmall)
		{
			return (PackSmall)Marshal.PtrToStructure(p, typeof(PackSmall));
		}
		return (gameserveritem_t)Marshal.PtrToStructure(p, typeof(gameserveritem_t));
	}
}
