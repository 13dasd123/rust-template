using System;
using System.Runtime.InteropServices;
using SteamNative;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct ControllerAnalogActionData_t
{
	[StructLayout(LayoutKind.Sequential, Pack = 4)]
	internal struct PackSmall
	{
		public ControllerSourceMode EMode;

		public float X;

		public float Y;

		[MarshalAs(UnmanagedType.I1)]
		public bool BActive;

		public static implicit operator ControllerAnalogActionData_t(PackSmall d)
		{
			ControllerAnalogActionData_t result = default(ControllerAnalogActionData_t);
			result.EMode = d.EMode;
			result.X = d.X;
			result.Y = d.Y;
			result.BActive = d.BActive;
			return result;
		}
	}

	public ControllerSourceMode EMode;

	public float X;

	public float Y;

	[MarshalAs(UnmanagedType.I1)]
	public bool BActive;

	public static ControllerAnalogActionData_t FromPointer(IntPtr p)
	{
		if (Platform.PackSmall)
		{
			return (PackSmall)Marshal.PtrToStructure(p, typeof(PackSmall));
		}
		return (ControllerAnalogActionData_t)Marshal.PtrToStructure(p, typeof(ControllerAnalogActionData_t));
	}
}
