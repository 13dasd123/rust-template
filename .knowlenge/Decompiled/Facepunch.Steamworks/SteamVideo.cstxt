using System;
using System.Text;
using Facepunch.Steamworks;
using SteamNative;

internal class SteamVideo : IDisposable
{
	internal Platform.Interface platform;

	internal BaseSteamworks steamworks;

	public bool IsValid
	{
		get
		{
			if (platform != null)
			{
				return platform.IsValid;
			}
			return false;
		}
	}

	internal SteamVideo(BaseSteamworks steamworks, IntPtr pointer)
	{
		this.steamworks = steamworks;
		if (Platform.IsWindows64)
		{
			platform = new Platform.Win64(pointer);
		}
		else if (Platform.IsWindows32)
		{
			platform = new Platform.Win32(pointer);
		}
		else if (Platform.IsLinux32)
		{
			platform = new Platform.Linux32(pointer);
		}
		else if (Platform.IsLinux64)
		{
			platform = new Platform.Linux64(pointer);
		}
		else if (Platform.IsOsx)
		{
			platform = new Platform.Mac(pointer);
		}
	}

	public virtual void Dispose()
	{
		if (platform != null)
		{
			platform.Dispose();
			platform = null;
		}
	}

	public void GetOPFSettings(AppId_t unVideoAppID)
	{
		platform.ISteamVideo_GetOPFSettings(unVideoAppID.Value);
	}

	public string GetOPFStringForApp(AppId_t unVideoAppID)
	{
		StringBuilder stringBuilder = Helpers.TakeStringBuilder();
		int pnBufferSize = 4096;
		if (!platform.ISteamVideo_GetOPFStringForApp(unVideoAppID.Value, stringBuilder, out pnBufferSize))
		{
			return null;
		}
		return stringBuilder.ToString();
	}

	public void GetVideoURL(AppId_t unVideoAppID)
	{
		platform.ISteamVideo_GetVideoURL(unVideoAppID.Value);
	}

	public bool IsBroadcasting(IntPtr pnNumViewers)
	{
		return platform.ISteamVideo_IsBroadcasting(pnNumViewers);
	}
}
