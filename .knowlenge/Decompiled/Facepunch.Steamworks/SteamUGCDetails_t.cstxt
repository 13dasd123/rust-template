using System;
using System.Runtime.InteropServices;
using SteamNative;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SteamUGCDetails_t
{
	[StructLayout(LayoutKind.Sequential, Pack = 4)]
	internal struct PackSmall
	{
		internal ulong PublishedFileId;

		internal Result Result;

		internal WorkshopFileType FileType;

		internal uint CreatorAppID;

		internal uint ConsumerAppID;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 129)]
		internal string Title;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 8000)]
		internal string Description;

		internal ulong SteamIDOwner;

		internal uint TimeCreated;

		internal uint TimeUpdated;

		internal uint TimeAddedToUserList;

		internal RemoteStoragePublishedFileVisibility Visibility;

		[MarshalAs(UnmanagedType.I1)]
		internal bool Banned;

		[MarshalAs(UnmanagedType.I1)]
		internal bool AcceptedForUse;

		[MarshalAs(UnmanagedType.I1)]
		internal bool TagsTruncated;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 1025)]
		internal string Tags;

		internal ulong File;

		internal ulong PreviewFile;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 260)]
		internal string PchFileName;

		internal int FileSize;

		internal int PreviewFileSize;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]
		internal string URL;

		internal uint VotesUp;

		internal uint VotesDown;

		internal float Score;

		internal uint NumChildren;

		public static implicit operator SteamUGCDetails_t(PackSmall d)
		{
			SteamUGCDetails_t result = default(SteamUGCDetails_t);
			result.PublishedFileId = d.PublishedFileId;
			result.Result = d.Result;
			result.FileType = d.FileType;
			result.CreatorAppID = d.CreatorAppID;
			result.ConsumerAppID = d.ConsumerAppID;
			result.Title = d.Title;
			result.Description = d.Description;
			result.SteamIDOwner = d.SteamIDOwner;
			result.TimeCreated = d.TimeCreated;
			result.TimeUpdated = d.TimeUpdated;
			result.TimeAddedToUserList = d.TimeAddedToUserList;
			result.Visibility = d.Visibility;
			result.Banned = d.Banned;
			result.AcceptedForUse = d.AcceptedForUse;
			result.TagsTruncated = d.TagsTruncated;
			result.Tags = d.Tags;
			result.File = d.File;
			result.PreviewFile = d.PreviewFile;
			result.PchFileName = d.PchFileName;
			result.FileSize = d.FileSize;
			result.PreviewFileSize = d.PreviewFileSize;
			result.URL = d.URL;
			result.VotesUp = d.VotesUp;
			result.VotesDown = d.VotesDown;
			result.Score = d.Score;
			result.NumChildren = d.NumChildren;
			return result;
		}
	}

	internal ulong PublishedFileId;

	internal Result Result;

	internal WorkshopFileType FileType;

	internal uint CreatorAppID;

	internal uint ConsumerAppID;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 129)]
	internal string Title;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 8000)]
	internal string Description;

	internal ulong SteamIDOwner;

	internal uint TimeCreated;

	internal uint TimeUpdated;

	internal uint TimeAddedToUserList;

	internal RemoteStoragePublishedFileVisibility Visibility;

	[MarshalAs(UnmanagedType.I1)]
	internal bool Banned;

	[MarshalAs(UnmanagedType.I1)]
	internal bool AcceptedForUse;

	[MarshalAs(UnmanagedType.I1)]
	internal bool TagsTruncated;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 1025)]
	internal string Tags;

	internal ulong File;

	internal ulong PreviewFile;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 260)]
	internal string PchFileName;

	internal int FileSize;

	internal int PreviewFileSize;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]
	internal string URL;

	internal uint VotesUp;

	internal uint VotesDown;

	internal float Score;

	internal uint NumChildren;

	internal static SteamUGCDetails_t FromPointer(IntPtr p)
	{
		if (Platform.PackSmall)
		{
			return (PackSmall)Marshal.PtrToStructure(p, typeof(PackSmall));
		}
		return (SteamUGCDetails_t)Marshal.PtrToStructure(p, typeof(SteamUGCDetails_t));
	}

	internal static int StructSize()
	{
		if (Platform.PackSmall)
		{
			return Marshal.SizeOf(typeof(PackSmall));
		}
		return Marshal.SizeOf(typeof(SteamUGCDetails_t));
	}
}
