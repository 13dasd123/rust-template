using System;
using System.Runtime.InteropServices;
using SteamNative;

[StructLayout(LayoutKind.Sequential, Pack = 8)]
internal struct SteamUGCDetails_t
{
	[StructLayout(LayoutKind.Sequential, Pack = 4)]
	internal struct PackSmall
	{
		public ulong PublishedFileId;

		public Result Result;

		public WorkshopFileType FileType;

		public uint CreatorAppID;

		public uint ConsumerAppID;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 129)]
		public string Title;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 8000)]
		public string Description;

		public ulong SteamIDOwner;

		public uint TimeCreated;

		public uint TimeUpdated;

		public uint TimeAddedToUserList;

		public RemoteStoragePublishedFileVisibility Visibility;

		[MarshalAs(UnmanagedType.I1)]
		public bool Banned;

		[MarshalAs(UnmanagedType.I1)]
		public bool AcceptedForUse;

		[MarshalAs(UnmanagedType.I1)]
		public bool TagsTruncated;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 1025)]
		public string Tags;

		public ulong File;

		public ulong PreviewFile;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 260)]
		public string PchFileName;

		public int FileSize;

		public int PreviewFileSize;

		[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]
		public string URL;

		public uint VotesUp;

		public uint VotesDown;

		public float Score;

		public uint NumChildren;

		public static implicit operator SteamUGCDetails_t(PackSmall d)
		{
			SteamUGCDetails_t result = default(SteamUGCDetails_t);
			result.PublishedFileId = d.PublishedFileId;
			result.Result = d.Result;
			result.FileType = d.FileType;
			result.CreatorAppID = d.CreatorAppID;
			result.ConsumerAppID = d.ConsumerAppID;
			result.Title = d.Title;
			result.Description = d.Description;
			result.SteamIDOwner = d.SteamIDOwner;
			result.TimeCreated = d.TimeCreated;
			result.TimeUpdated = d.TimeUpdated;
			result.TimeAddedToUserList = d.TimeAddedToUserList;
			result.Visibility = d.Visibility;
			result.Banned = d.Banned;
			result.AcceptedForUse = d.AcceptedForUse;
			result.TagsTruncated = d.TagsTruncated;
			result.Tags = d.Tags;
			result.File = d.File;
			result.PreviewFile = d.PreviewFile;
			result.PchFileName = d.PchFileName;
			result.FileSize = d.FileSize;
			result.PreviewFileSize = d.PreviewFileSize;
			result.URL = d.URL;
			result.VotesUp = d.VotesUp;
			result.VotesDown = d.VotesDown;
			result.Score = d.Score;
			result.NumChildren = d.NumChildren;
			return result;
		}
	}

	public ulong PublishedFileId;

	public Result Result;

	public WorkshopFileType FileType;

	public uint CreatorAppID;

	public uint ConsumerAppID;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 129)]
	public string Title;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 8000)]
	public string Description;

	public ulong SteamIDOwner;

	public uint TimeCreated;

	public uint TimeUpdated;

	public uint TimeAddedToUserList;

	public RemoteStoragePublishedFileVisibility Visibility;

	[MarshalAs(UnmanagedType.I1)]
	public bool Banned;

	[MarshalAs(UnmanagedType.I1)]
	public bool AcceptedForUse;

	[MarshalAs(UnmanagedType.I1)]
	public bool TagsTruncated;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 1025)]
	public string Tags;

	public ulong File;

	public ulong PreviewFile;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 260)]
	public string PchFileName;

	public int FileSize;

	public int PreviewFileSize;

	[MarshalAs(UnmanagedType.ByValTStr, SizeConst = 256)]
	public string URL;

	public uint VotesUp;

	public uint VotesDown;

	public float Score;

	public uint NumChildren;

	public static SteamUGCDetails_t FromPointer(IntPtr p)
	{
		if (Platform.PackSmall)
		{
			return (PackSmall)Marshal.PtrToStructure(p, typeof(PackSmall));
		}
		return (SteamUGCDetails_t)Marshal.PtrToStructure(p, typeof(SteamUGCDetails_t));
	}
}
