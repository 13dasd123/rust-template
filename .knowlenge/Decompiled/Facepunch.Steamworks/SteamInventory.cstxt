using System;
using System.Linq;
using System.Text;
using Facepunch.Steamworks;
using SteamNative;

internal class SteamInventory : IDisposable
{
	internal Platform.Interface platform;

	internal BaseSteamworks steamworks;

	public bool IsValid
	{
		get
		{
			if (platform != null)
			{
				return platform.IsValid;
			}
			return false;
		}
	}

	internal SteamInventory(BaseSteamworks steamworks, IntPtr pointer)
	{
		this.steamworks = steamworks;
		if (Platform.IsWindows64)
		{
			platform = new Platform.Win64(pointer);
		}
		else if (Platform.IsWindows32)
		{
			platform = new Platform.Win32(pointer);
		}
		else if (Platform.IsLinux32)
		{
			platform = new Platform.Linux32(pointer);
		}
		else if (Platform.IsLinux64)
		{
			platform = new Platform.Linux64(pointer);
		}
		else if (Platform.IsOsx)
		{
			platform = new Platform.Mac(pointer);
		}
	}

	public virtual void Dispose()
	{
		if (platform != null)
		{
			platform.Dispose();
			platform = null;
		}
	}

	public bool AddPromoItem(ref SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef)
	{
		return platform.ISteamInventory_AddPromoItem(ref pResultHandle.Value, itemDef.Value);
	}

	public bool AddPromoItems(ref SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint unArrayLength)
	{
		return platform.ISteamInventory_AddPromoItems(ref pResultHandle.Value, pArrayItemDefs.Select((SteamItemDef_t x) => x.Value).ToArray(), unArrayLength);
	}

	public bool CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected)
	{
		return platform.ISteamInventory_CheckResultSteamID(resultHandle.Value, steamIDExpected.Value);
	}

	public bool ConsumeItem(ref SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity)
	{
		return platform.ISteamInventory_ConsumeItem(ref pResultHandle.Value, itemConsume.Value, unQuantity);
	}

	public bool DeserializeResult(ref SteamInventoryResult_t pOutResultHandle, IntPtr pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE)
	{
		return platform.ISteamInventory_DeserializeResult(ref pOutResultHandle.Value, pBuffer, unBufferSize, bRESERVED_MUST_BE_FALSE);
	}

	public void DestroyResult(SteamInventoryResult_t resultHandle)
	{
		platform.ISteamInventory_DestroyResult(resultHandle.Value);
	}

	public bool ExchangeItems(ref SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, SteamItemInstanceID_t[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength)
	{
		return platform.ISteamInventory_ExchangeItems(ref pResultHandle.Value, pArrayGenerate.Select((SteamItemDef_t x) => x.Value).ToArray(), punArrayGenerateQuantity, unArrayGenerateLength, pArrayDestroy.Select((SteamItemInstanceID_t x) => x.Value).ToArray(), punArrayDestroyQuantity, unArrayDestroyLength);
	}

	public bool GenerateItems(ref SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
	{
		return platform.ISteamInventory_GenerateItems(ref pResultHandle.Value, pArrayItemDefs.Select((SteamItemDef_t x) => x.Value).ToArray(), punArrayQuantity, unArrayLength);
	}

	public bool GetAllItems(ref SteamInventoryResult_t pResultHandle)
	{
		return platform.ISteamInventory_GetAllItems(ref pResultHandle.Value);
	}

	public unsafe SteamItemDef_t[] GetEligiblePromoItemDefinitionIDs(CSteamID steamID)
	{
		uint punItemDefIDsArraySize = 0u;
		if (!platform.ISteamInventory_GetEligiblePromoItemDefinitionIDs(steamID.Value, IntPtr.Zero, out punItemDefIDsArraySize) || punItemDefIDsArraySize == 0)
		{
			return null;
		}
		SteamItemDef_t[] array = new SteamItemDef_t[punItemDefIDsArraySize];
		fixed (SteamItemDef_t* ptr = array)
		{
			void* ptr2 = ptr;
			if (!platform.ISteamInventory_GetEligiblePromoItemDefinitionIDs(steamID.Value, (IntPtr)ptr2, out punItemDefIDsArraySize))
			{
				return null;
			}
			return array;
		}
	}

	public unsafe SteamItemDef_t[] GetItemDefinitionIDs()
	{
		uint punItemDefIDsArraySize = 0u;
		if (!platform.ISteamInventory_GetItemDefinitionIDs(IntPtr.Zero, out punItemDefIDsArraySize) || punItemDefIDsArraySize == 0)
		{
			return null;
		}
		SteamItemDef_t[] array = new SteamItemDef_t[punItemDefIDsArraySize];
		fixed (SteamItemDef_t* ptr = array)
		{
			void* ptr2 = ptr;
			if (!platform.ISteamInventory_GetItemDefinitionIDs((IntPtr)ptr2, out punItemDefIDsArraySize))
			{
				return null;
			}
			return array;
		}
	}

	public bool GetItemDefinitionProperty(SteamItemDef_t iDefinition, string pchPropertyName, out string pchValueBuffer)
	{
		bool flag = false;
		pchValueBuffer = string.Empty;
		StringBuilder stringBuilder = Helpers.TakeStringBuilder();
		uint punValueBufferSizeOut = 4096u;
		flag = platform.ISteamInventory_GetItemDefinitionProperty(iDefinition.Value, pchPropertyName, stringBuilder, out punValueBufferSizeOut);
		if (!flag)
		{
			return flag;
		}
		pchValueBuffer = stringBuilder.ToString();
		return flag;
	}

	public bool GetItemPrice(SteamItemDef_t iDefinition, out ulong pPrice)
	{
		return platform.ISteamInventory_GetItemPrice(iDefinition.Value, out pPrice);
	}

	public bool GetItemsByID(ref SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs)
	{
		return platform.ISteamInventory_GetItemsByID(ref pResultHandle.Value, pInstanceIDs.Select((SteamItemInstanceID_t x) => x.Value).ToArray(), unCountInstanceIDs);
	}

	public bool GetItemsWithPrices(IntPtr pArrayItemDefs, IntPtr pPrices, uint unArrayLength)
	{
		return platform.ISteamInventory_GetItemsWithPrices(pArrayItemDefs, pPrices, unArrayLength);
	}

	public uint GetNumItemsWithPrices()
	{
		return platform.ISteamInventory_GetNumItemsWithPrices();
	}

	public bool GetResultItemProperty(SteamInventoryResult_t resultHandle, uint unItemIndex, string pchPropertyName, out string pchValueBuffer)
	{
		bool flag = false;
		pchValueBuffer = string.Empty;
		StringBuilder stringBuilder = Helpers.TakeStringBuilder();
		uint punValueBufferSizeOut = 4096u;
		flag = platform.ISteamInventory_GetResultItemProperty(resultHandle.Value, unItemIndex, pchPropertyName, stringBuilder, out punValueBufferSizeOut);
		if (!flag)
		{
			return flag;
		}
		pchValueBuffer = stringBuilder.ToString();
		return flag;
	}

	public unsafe SteamItemDetails_t[] GetResultItems(SteamInventoryResult_t resultHandle)
	{
		uint punOutItemsArraySize = 0u;
		if (!platform.ISteamInventory_GetResultItems(resultHandle.Value, IntPtr.Zero, out punOutItemsArraySize) || punOutItemsArraySize == 0)
		{
			return null;
		}
		SteamItemDetails_t[] array = new SteamItemDetails_t[punOutItemsArraySize];
		fixed (SteamItemDetails_t* ptr = array)
		{
			void* ptr2 = ptr;
			if (!platform.ISteamInventory_GetResultItems(resultHandle.Value, (IntPtr)ptr2, out punOutItemsArraySize))
			{
				return null;
			}
			return array;
		}
	}

	public Result GetResultStatus(SteamInventoryResult_t resultHandle)
	{
		return platform.ISteamInventory_GetResultStatus(resultHandle.Value);
	}

	public uint GetResultTimestamp(SteamInventoryResult_t resultHandle)
	{
		return platform.ISteamInventory_GetResultTimestamp(resultHandle.Value);
	}

	public bool GrantPromoItems(ref SteamInventoryResult_t pResultHandle)
	{
		return platform.ISteamInventory_GrantPromoItems(ref pResultHandle.Value);
	}

	public bool LoadItemDefinitions()
	{
		return platform.ISteamInventory_LoadItemDefinitions();
	}

	public bool RemoveProperty(SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, string pchPropertyName)
	{
		return platform.ISteamInventory_RemoveProperty(handle.Value, nItemID.Value, pchPropertyName);
	}

	public CallbackHandle RequestEligiblePromoItemDefinitionsIDs(CSteamID steamID, Action<SteamInventoryEligiblePromoItemDefIDs_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(steamID.Value);
		if (CallbackFunction == null)
		{
			return null;
		}
		if ((ulong)steamAPICall_t == 0L)
		{
			return null;
		}
		return SteamInventoryEligiblePromoItemDefIDs_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public CallbackHandle RequestPrices(Action<SteamInventoryRequestPricesResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamInventory_RequestPrices();
		if (CallbackFunction == null)
		{
			return null;
		}
		if ((ulong)steamAPICall_t == 0L)
		{
			return null;
		}
		return SteamInventoryRequestPricesResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public void SendItemDropHeartbeat()
	{
		platform.ISteamInventory_SendItemDropHeartbeat();
	}

	public bool SerializeResult(SteamInventoryResult_t resultHandle, IntPtr pOutBuffer, out uint punOutBufferSize)
	{
		return platform.ISteamInventory_SerializeResult(resultHandle.Value, pOutBuffer, out punOutBufferSize);
	}

	public bool SetProperty(SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, string pchPropertyName, string pchPropertyValue)
	{
		return platform.ISteamInventory_SetProperty(handle.Value, nItemID.Value, pchPropertyName, pchPropertyValue);
	}

	public bool SetProperty0(SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, string pchPropertyName, bool bValue)
	{
		return platform.ISteamInventory_SetProperty0(handle.Value, nItemID.Value, pchPropertyName, bValue);
	}

	public bool SetProperty1(SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, string pchPropertyName, long nValue)
	{
		return platform.ISteamInventory_SetProperty0(handle.Value, nItemID.Value, pchPropertyName, nValue);
	}

	public bool SetProperty2(SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, string pchPropertyName, float flValue)
	{
		return platform.ISteamInventory_SetProperty0(handle.Value, nItemID.Value, pchPropertyName, flValue);
	}

	public CallbackHandle StartPurchase(SteamItemDef_t[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength, Action<SteamInventoryStartPurchaseResult_t, bool> CallbackFunction = null)
	{
		SteamAPICall_t steamAPICall_t = 0uL;
		steamAPICall_t = platform.ISteamInventory_StartPurchase(pArrayItemDefs.Select((SteamItemDef_t x) => x.Value).ToArray(), punArrayQuantity, unArrayLength);
		if (CallbackFunction == null)
		{
			return null;
		}
		if ((ulong)steamAPICall_t == 0L)
		{
			return null;
		}
		return SteamInventoryStartPurchaseResult_t.CallResult(steamworks, steamAPICall_t, CallbackFunction);
	}

	public SteamInventoryUpdateHandle_t StartUpdateProperties()
	{
		return platform.ISteamInventory_StartUpdateProperties();
	}

	public bool SubmitUpdateProperties(SteamInventoryUpdateHandle_t handle, ref SteamInventoryResult_t pResultHandle)
	{
		return platform.ISteamInventory_SubmitUpdateProperties(handle.Value, ref pResultHandle.Value);
	}

	public bool TradeItems(ref SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, SteamItemInstanceID_t[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, SteamItemInstanceID_t[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength)
	{
		return platform.ISteamInventory_TradeItems(ref pResultHandle.Value, steamIDTradePartner.Value, pArrayGive.Select((SteamItemInstanceID_t x) => x.Value).ToArray(), pArrayGiveQuantity, nArrayGiveLength, pArrayGet.Select((SteamItemInstanceID_t x) => x.Value).ToArray(), pArrayGetQuantity, nArrayGetLength);
	}

	public bool TransferItemQuantity(ref SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest)
	{
		return platform.ISteamInventory_TransferItemQuantity(ref pResultHandle.Value, itemIdSource.Value, unQuantity, itemIdDest.Value);
	}

	public bool TriggerItemDrop(ref SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition)
	{
		return platform.ISteamInventory_TriggerItemDrop(ref pResultHandle.Value, dropListDefinition.Value);
	}
}
