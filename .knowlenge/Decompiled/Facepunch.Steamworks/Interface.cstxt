using System;
using System.Runtime.InteropServices;
using System.Text;

internal interface Interface : IDisposable
{
	bool IsValid { get; }

	uint ISteamAppList_GetNumInstalledApps();

	uint ISteamAppList_GetInstalledApps(IntPtr pvecAppID, uint unMaxAppIDs);

	int ISteamAppList_GetAppName(uint nAppID, StringBuilder pchName, int cchNameMax);

	int ISteamAppList_GetAppInstallDir(uint nAppID, StringBuilder pchDirectory, int cchNameMax);

	int ISteamAppList_GetAppBuildId(uint nAppID);

	bool ISteamApps_BIsSubscribed();

	bool ISteamApps_BIsLowViolence();

	bool ISteamApps_BIsCybercafe();

	bool ISteamApps_BIsVACBanned();

	IntPtr ISteamApps_GetCurrentGameLanguage();

	IntPtr ISteamApps_GetAvailableGameLanguages();

	bool ISteamApps_BIsSubscribedApp(uint appID);

	bool ISteamApps_BIsDlcInstalled(uint appID);

	uint ISteamApps_GetEarliestPurchaseUnixTime(uint nAppID);

	bool ISteamApps_BIsSubscribedFromFreeWeekend();

	int ISteamApps_GetDLCCount();

	bool ISteamApps_BGetDLCDataByIndex(int iDLC, ref uint pAppID, [MarshalAs(UnmanagedType.U1)] ref bool pbAvailable, StringBuilder pchName, int cchNameBufferSize);

	void ISteamApps_InstallDLC(uint nAppID);

	void ISteamApps_UninstallDLC(uint nAppID);

	void ISteamApps_RequestAppProofOfPurchaseKey(uint nAppID);

	bool ISteamApps_GetCurrentBetaName(StringBuilder pchName, int cchNameBufferSize);

	bool ISteamApps_MarkContentCorrupt([MarshalAs(UnmanagedType.U1)] bool bMissingFilesOnly);

	uint ISteamApps_GetInstalledDepots(uint appID, IntPtr pvecDepots, uint cMaxDepots);

	uint ISteamApps_GetAppInstallDir(uint appID, StringBuilder pchFolder, uint cchFolderBufferSize);

	bool ISteamApps_BIsAppInstalled(uint appID);

	CSteamID ISteamApps_GetAppOwner();

	IntPtr ISteamApps_GetLaunchQueryParam(string pchKey);

	bool ISteamApps_GetDlcDownloadProgress(uint nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal);

	int ISteamApps_GetAppBuildId();

	void ISteamApps_RequestAllProofOfPurchaseKeys();

	SteamAPICall_t ISteamApps_GetFileDetails(string pszFileName);

	HSteamPipe ISteamClient_CreateSteamPipe();

	bool ISteamClient_BReleaseSteamPipe(int hSteamPipe);

	HSteamUser ISteamClient_ConnectToGlobalUser(int hSteamPipe);

	HSteamUser ISteamClient_CreateLocalUser(out int phSteamPipe, AccountType eAccountType);

	void ISteamClient_ReleaseUser(int hSteamPipe, int hUser);

	IntPtr ISteamClient_GetISteamUser(int hSteamUser, int hSteamPipe, string pchVersion);

	IntPtr ISteamClient_GetISteamGameServer(int hSteamUser, int hSteamPipe, string pchVersion);

	void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort);

	IntPtr ISteamClient_GetISteamFriends(int hSteamUser, int hSteamPipe, string pchVersion);

	IntPtr ISteamClient_GetISteamUtils(int hSteamPipe, string pchVersion);

	IntPtr ISteamClient_GetISteamMatchmaking(int hSteamUser, int hSteamPipe, string pchVersion);

	IntPtr ISteamClient_GetISteamMatchmakingServers(int hSteamUser, int hSteamPipe, string pchVersion);

	IntPtr ISteamClient_GetISteamGenericInterface(int hSteamUser, int hSteamPipe, string pchVersion);

	IntPtr ISteamClient_GetISteamUserStats(int hSteamUser, int hSteamPipe, string pchVersion);

	IntPtr ISteamClient_GetISteamGameServerStats(int hSteamuser, int hSteamPipe, string pchVersion);

	IntPtr ISteamClient_GetISteamApps(int hSteamUser, int hSteamPipe, string pchVersion);

	IntPtr ISteamClient_GetISteamNetworking(int hSteamUser, int hSteamPipe, string pchVersion);

	IntPtr ISteamClient_GetISteamRemoteStorage(int hSteamuser, int hSteamPipe, string pchVersion);

	IntPtr ISteamClient_GetISteamScreenshots(int hSteamuser, int hSteamPipe, string pchVersion);

	uint ISteamClient_GetIPCCallCount();

	void ISteamClient_SetWarningMessageHook(IntPtr pFunction);

	bool ISteamClient_BShutdownIfAllPipesClosed();

	IntPtr ISteamClient_GetISteamHTTP(int hSteamuser, int hSteamPipe, string pchVersion);

	IntPtr ISteamClient_GetISteamController(int hSteamUser, int hSteamPipe, string pchVersion);

	IntPtr ISteamClient_GetISteamUGC(int hSteamUser, int hSteamPipe, string pchVersion);

	IntPtr ISteamClient_GetISteamAppList(int hSteamUser, int hSteamPipe, string pchVersion);

	IntPtr ISteamClient_GetISteamMusic(int hSteamuser, int hSteamPipe, string pchVersion);

	IntPtr ISteamClient_GetISteamMusicRemote(int hSteamuser, int hSteamPipe, string pchVersion);

	IntPtr ISteamClient_GetISteamHTMLSurface(int hSteamuser, int hSteamPipe, string pchVersion);

	IntPtr ISteamClient_GetISteamInventory(int hSteamuser, int hSteamPipe, string pchVersion);

	IntPtr ISteamClient_GetISteamVideo(int hSteamuser, int hSteamPipe, string pchVersion);

	IntPtr ISteamClient_GetISteamParentalSettings(int hSteamuser, int hSteamPipe, string pchVersion);

	bool ISteamController_Init();

	bool ISteamController_Shutdown();

	void ISteamController_RunFrame();

	int ISteamController_GetConnectedControllers(IntPtr handlesOut);

	bool ISteamController_ShowBindingPanel(ulong controllerHandle);

	ControllerActionSetHandle_t ISteamController_GetActionSetHandle(string pszActionSetName);

	void ISteamController_ActivateActionSet(ulong controllerHandle, ulong actionSetHandle);

	ControllerActionSetHandle_t ISteamController_GetCurrentActionSet(ulong controllerHandle);

	void ISteamController_ActivateActionSetLayer(ulong controllerHandle, ulong actionSetLayerHandle);

	void ISteamController_DeactivateActionSetLayer(ulong controllerHandle, ulong actionSetLayerHandle);

	void ISteamController_DeactivateAllActionSetLayers(ulong controllerHandle);

	int ISteamController_GetActiveActionSetLayers(ulong controllerHandle, IntPtr handlesOut);

	ControllerDigitalActionHandle_t ISteamController_GetDigitalActionHandle(string pszActionName);

	ControllerDigitalActionData_t ISteamController_GetDigitalActionData(ulong controllerHandle, ulong digitalActionHandle);

	int ISteamController_GetDigitalActionOrigins(ulong controllerHandle, ulong actionSetHandle, ulong digitalActionHandle, out ControllerActionOrigin originsOut);

	ControllerAnalogActionHandle_t ISteamController_GetAnalogActionHandle(string pszActionName);

	ControllerAnalogActionData_t ISteamController_GetAnalogActionData(ulong controllerHandle, ulong analogActionHandle);

	int ISteamController_GetAnalogActionOrigins(ulong controllerHandle, ulong actionSetHandle, ulong analogActionHandle, out ControllerActionOrigin originsOut);

	void ISteamController_StopAnalogActionMomentum(ulong controllerHandle, ulong eAction);

	void ISteamController_TriggerHapticPulse(ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec);

	void ISteamController_TriggerRepeatedHapticPulse(ulong controllerHandle, SteamControllerPad eTargetPad, ushort usDurationMicroSec, ushort usOffMicroSec, ushort unRepeat, uint nFlags);

	void ISteamController_TriggerVibration(ulong controllerHandle, ushort usLeftSpeed, ushort usRightSpeed);

	void ISteamController_SetLEDColor(ulong controllerHandle, byte nColorR, byte nColorG, byte nColorB, uint nFlags);

	int ISteamController_GetGamepadIndexForController(ulong ulControllerHandle);

	ControllerHandle_t ISteamController_GetControllerForGamepadIndex(int nIndex);

	ControllerMotionData_t ISteamController_GetMotionData(ulong controllerHandle);

	bool ISteamController_ShowDigitalActionOrigins(ulong controllerHandle, ulong digitalActionHandle, float flScale, float flXPosition, float flYPosition);

	bool ISteamController_ShowAnalogActionOrigins(ulong controllerHandle, ulong analogActionHandle, float flScale, float flXPosition, float flYPosition);

	IntPtr ISteamController_GetStringForActionOrigin(ControllerActionOrigin eOrigin);

	IntPtr ISteamController_GetGlyphForActionOrigin(ControllerActionOrigin eOrigin);

	SteamInputType ISteamController_GetInputTypeForHandle(ulong controllerHandle);

	IntPtr ISteamFriends_GetPersonaName();

	SteamAPICall_t ISteamFriends_SetPersonaName(string pchPersonaName);

	PersonaState ISteamFriends_GetPersonaState();

	int ISteamFriends_GetFriendCount(int iFriendFlags);

	CSteamID ISteamFriends_GetFriendByIndex(int iFriend, int iFriendFlags);

	FriendRelationship ISteamFriends_GetFriendRelationship(ulong steamIDFriend);

	PersonaState ISteamFriends_GetFriendPersonaState(ulong steamIDFriend);

	IntPtr ISteamFriends_GetFriendPersonaName(ulong steamIDFriend);

	bool ISteamFriends_GetFriendGamePlayed(ulong steamIDFriend, ref FriendGameInfo_t pFriendGameInfo);

	IntPtr ISteamFriends_GetFriendPersonaNameHistory(ulong steamIDFriend, int iPersonaName);

	int ISteamFriends_GetFriendSteamLevel(ulong steamIDFriend);

	IntPtr ISteamFriends_GetPlayerNickname(ulong steamIDPlayer);

	int ISteamFriends_GetFriendsGroupCount();

	FriendsGroupID_t ISteamFriends_GetFriendsGroupIDByIndex(int iFG);

	IntPtr ISteamFriends_GetFriendsGroupName(short friendsGroupID);

	int ISteamFriends_GetFriendsGroupMembersCount(short friendsGroupID);

	void ISteamFriends_GetFriendsGroupMembersList(short friendsGroupID, IntPtr pOutSteamIDMembers, int nMembersCount);

	bool ISteamFriends_HasFriend(ulong steamIDFriend, int iFriendFlags);

	int ISteamFriends_GetClanCount();

	CSteamID ISteamFriends_GetClanByIndex(int iClan);

	IntPtr ISteamFriends_GetClanName(ulong steamIDClan);

	IntPtr ISteamFriends_GetClanTag(ulong steamIDClan);

	bool ISteamFriends_GetClanActivityCounts(ulong steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting);

	SteamAPICall_t ISteamFriends_DownloadClanActivityCounts(IntPtr psteamIDClans, int cClansToRequest);

	int ISteamFriends_GetFriendCountFromSource(ulong steamIDSource);

	CSteamID ISteamFriends_GetFriendFromSourceByIndex(ulong steamIDSource, int iFriend);

	bool ISteamFriends_IsUserInSource(ulong steamIDUser, ulong steamIDSource);

	void ISteamFriends_SetInGameVoiceSpeaking(ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bSpeaking);

	void ISteamFriends_ActivateGameOverlay(string pchDialog);

	void ISteamFriends_ActivateGameOverlayToUser(string pchDialog, ulong steamID);

	void ISteamFriends_ActivateGameOverlayToWebPage(string pchURL);

	void ISteamFriends_ActivateGameOverlayToStore(uint nAppID, OverlayToStoreFlag eFlag);

	void ISteamFriends_SetPlayedWith(ulong steamIDUserPlayedWith);

	void ISteamFriends_ActivateGameOverlayInviteDialog(ulong steamIDLobby);

	int ISteamFriends_GetSmallFriendAvatar(ulong steamIDFriend);

	int ISteamFriends_GetMediumFriendAvatar(ulong steamIDFriend);

	int ISteamFriends_GetLargeFriendAvatar(ulong steamIDFriend);

	bool ISteamFriends_RequestUserInformation(ulong steamIDUser, [MarshalAs(UnmanagedType.U1)] bool bRequireNameOnly);

	SteamAPICall_t ISteamFriends_RequestClanOfficerList(ulong steamIDClan);

	CSteamID ISteamFriends_GetClanOwner(ulong steamIDClan);

	int ISteamFriends_GetClanOfficerCount(ulong steamIDClan);

	CSteamID ISteamFriends_GetClanOfficerByIndex(ulong steamIDClan, int iOfficer);

	uint ISteamFriends_GetUserRestrictions();

	bool ISteamFriends_SetRichPresence(string pchKey, string pchValue);

	void ISteamFriends_ClearRichPresence();

	IntPtr ISteamFriends_GetFriendRichPresence(ulong steamIDFriend, string pchKey);

	int ISteamFriends_GetFriendRichPresenceKeyCount(ulong steamIDFriend);

	IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(ulong steamIDFriend, int iKey);

	void ISteamFriends_RequestFriendRichPresence(ulong steamIDFriend);

	bool ISteamFriends_InviteUserToGame(ulong steamIDFriend, string pchConnectString);

	int ISteamFriends_GetCoplayFriendCount();

	CSteamID ISteamFriends_GetCoplayFriend(int iCoplayFriend);

	int ISteamFriends_GetFriendCoplayTime(ulong steamIDFriend);

	AppId_t ISteamFriends_GetFriendCoplayGame(ulong steamIDFriend);

	SteamAPICall_t ISteamFriends_JoinClanChatRoom(ulong steamIDClan);

	bool ISteamFriends_LeaveClanChatRoom(ulong steamIDClan);

	int ISteamFriends_GetClanChatMemberCount(ulong steamIDClan);

	CSteamID ISteamFriends_GetChatMemberByIndex(ulong steamIDClan, int iUser);

	bool ISteamFriends_SendClanChatMessage(ulong steamIDClanChat, string pchText);

	int ISteamFriends_GetClanChatMessage(ulong steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out ChatEntryType peChatEntryType, out ulong psteamidChatter);

	bool ISteamFriends_IsClanChatAdmin(ulong steamIDClanChat, ulong steamIDUser);

	bool ISteamFriends_IsClanChatWindowOpenInSteam(ulong steamIDClanChat);

	bool ISteamFriends_OpenClanChatWindowInSteam(ulong steamIDClanChat);

	bool ISteamFriends_CloseClanChatWindowInSteam(ulong steamIDClanChat);

	bool ISteamFriends_SetListenForFriendsMessages([MarshalAs(UnmanagedType.U1)] bool bInterceptEnabled);

	bool ISteamFriends_ReplyToFriendMessage(ulong steamIDFriend, string pchMsgToSend);

	int ISteamFriends_GetFriendMessage(ulong steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType);

	SteamAPICall_t ISteamFriends_GetFollowerCount(ulong steamID);

	SteamAPICall_t ISteamFriends_IsFollowing(ulong steamID);

	SteamAPICall_t ISteamFriends_EnumerateFollowingList(uint unStartIndex);

	bool ISteamFriends_IsClanPublic(ulong steamIDClan);

	bool ISteamFriends_IsClanOfficialGameGroup(ulong steamIDClan);

	bool ISteamGameServer_InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, uint nGameAppId, string pchVersionString);

	void ISteamGameServer_SetProduct(string pszProduct);

	void ISteamGameServer_SetGameDescription(string pszGameDescription);

	void ISteamGameServer_SetModDir(string pszModDir);

	void ISteamGameServer_SetDedicatedServer([MarshalAs(UnmanagedType.U1)] bool bDedicated);

	void ISteamGameServer_LogOn(string pszToken);

	void ISteamGameServer_LogOnAnonymous();

	void ISteamGameServer_LogOff();

	bool ISteamGameServer_BLoggedOn();

	bool ISteamGameServer_BSecure();

	CSteamID ISteamGameServer_GetSteamID();

	bool ISteamGameServer_WasRestartRequested();

	void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax);

	void ISteamGameServer_SetBotPlayerCount(int cBotplayers);

	void ISteamGameServer_SetServerName(string pszServerName);

	void ISteamGameServer_SetMapName(string pszMapName);

	void ISteamGameServer_SetPasswordProtected([MarshalAs(UnmanagedType.U1)] bool bPasswordProtected);

	void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort);

	void ISteamGameServer_SetSpectatorServerName(string pszSpectatorServerName);

	void ISteamGameServer_ClearAllKeyValues();

	void ISteamGameServer_SetKeyValue(string pKey, string pValue);

	void ISteamGameServer_SetGameTags(string pchGameTags);

	void ISteamGameServer_SetGameData(string pchGameData);

	void ISteamGameServer_SetRegion(string pszRegion);

	bool ISteamGameServer_SendUserConnectAndAuthenticate(uint unIPClient, IntPtr pvAuthBlob, uint cubAuthBlobSize, out ulong pSteamIDUser);

	CSteamID ISteamGameServer_CreateUnauthenticatedUserConnection();

	void ISteamGameServer_SendUserDisconnect(ulong steamIDUser);

	bool ISteamGameServer_BUpdateUserData(ulong steamIDUser, string pchPlayerName, uint uScore);

	HAuthTicket ISteamGameServer_GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

	BeginAuthSessionResult ISteamGameServer_BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, ulong steamID);

	void ISteamGameServer_EndAuthSession(ulong steamID);

	void ISteamGameServer_CancelAuthTicket(uint hAuthTicket);

	UserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(ulong steamID, uint appID);

	bool ISteamGameServer_RequestUserGroupStatus(ulong steamIDUser, ulong steamIDGroup);

	void ISteamGameServer_GetGameplayStats();

	SteamAPICall_t ISteamGameServer_GetServerReputation();

	uint ISteamGameServer_GetPublicIP();

	bool ISteamGameServer_HandleIncomingPacket(IntPtr pData, int cbData, uint srcIP, ushort srcPort);

	int ISteamGameServer_GetNextOutgoingPacket(IntPtr pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort);

	void ISteamGameServer_EnableHeartbeats([MarshalAs(UnmanagedType.U1)] bool bActive);

	void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval);

	void ISteamGameServer_ForceHeartbeat();

	SteamAPICall_t ISteamGameServer_AssociateWithClan(ulong steamIDClan);

	SteamAPICall_t ISteamGameServer_ComputeNewPlayerCompatibility(ulong steamIDNewPlayer);

	SteamAPICall_t ISteamGameServerStats_RequestUserStats(ulong steamIDUser);

	bool ISteamGameServerStats_GetUserStat(ulong steamIDUser, string pchName, out int pData);

	bool ISteamGameServerStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData);

	bool ISteamGameServerStats_GetUserAchievement(ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

	bool ISteamGameServerStats_SetUserStat(ulong steamIDUser, string pchName, int nData);

	bool ISteamGameServerStats_SetUserStat0(ulong steamIDUser, string pchName, float fData);

	bool ISteamGameServerStats_UpdateUserAvgRateStat(ulong steamIDUser, string pchName, float flCountThisSession, double dSessionLength);

	bool ISteamGameServerStats_SetUserAchievement(ulong steamIDUser, string pchName);

	bool ISteamGameServerStats_ClearUserAchievement(ulong steamIDUser, string pchName);

	SteamAPICall_t ISteamGameServerStats_StoreUserStats(ulong steamIDUser);

	void ISteamHTMLSurface_DestructISteamHTMLSurface();

	bool ISteamHTMLSurface_Init();

	bool ISteamHTMLSurface_Shutdown();

	SteamAPICall_t ISteamHTMLSurface_CreateBrowser(string pchUserAgent, string pchUserCSS);

	void ISteamHTMLSurface_RemoveBrowser(uint unBrowserHandle);

	void ISteamHTMLSurface_LoadURL(uint unBrowserHandle, string pchURL, string pchPostData);

	void ISteamHTMLSurface_SetSize(uint unBrowserHandle, uint unWidth, uint unHeight);

	void ISteamHTMLSurface_StopLoad(uint unBrowserHandle);

	void ISteamHTMLSurface_Reload(uint unBrowserHandle);

	void ISteamHTMLSurface_GoBack(uint unBrowserHandle);

	void ISteamHTMLSurface_GoForward(uint unBrowserHandle);

	void ISteamHTMLSurface_AddHeader(uint unBrowserHandle, string pchKey, string pchValue);

	void ISteamHTMLSurface_ExecuteJavascript(uint unBrowserHandle, string pchScript);

	void ISteamHTMLSurface_MouseUp(uint unBrowserHandle, HTMLMouseButton eMouseButton);

	void ISteamHTMLSurface_MouseDown(uint unBrowserHandle, HTMLMouseButton eMouseButton);

	void ISteamHTMLSurface_MouseDoubleClick(uint unBrowserHandle, HTMLMouseButton eMouseButton);

	void ISteamHTMLSurface_MouseMove(uint unBrowserHandle, int x, int y);

	void ISteamHTMLSurface_MouseWheel(uint unBrowserHandle, int nDelta);

	void ISteamHTMLSurface_KeyDown(uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers);

	void ISteamHTMLSurface_KeyUp(uint unBrowserHandle, uint nNativeKeyCode, HTMLKeyModifiers eHTMLKeyModifiers);

	void ISteamHTMLSurface_KeyChar(uint unBrowserHandle, uint cUnicodeChar, HTMLKeyModifiers eHTMLKeyModifiers);

	void ISteamHTMLSurface_SetHorizontalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll);

	void ISteamHTMLSurface_SetVerticalScroll(uint unBrowserHandle, uint nAbsolutePixelScroll);

	void ISteamHTMLSurface_SetKeyFocus(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bHasKeyFocus);

	void ISteamHTMLSurface_ViewSource(uint unBrowserHandle);

	void ISteamHTMLSurface_CopyToClipboard(uint unBrowserHandle);

	void ISteamHTMLSurface_PasteFromClipboard(uint unBrowserHandle);

	void ISteamHTMLSurface_Find(uint unBrowserHandle, string pchSearchStr, [MarshalAs(UnmanagedType.U1)] bool bCurrentlyInFind, [MarshalAs(UnmanagedType.U1)] bool bReverse);

	void ISteamHTMLSurface_StopFind(uint unBrowserHandle);

	void ISteamHTMLSurface_GetLinkAtPosition(uint unBrowserHandle, int x, int y);

	void ISteamHTMLSurface_SetCookie(string pchHostname, string pchKey, string pchValue, string pchPath, uint nExpires, [MarshalAs(UnmanagedType.U1)] bool bSecure, [MarshalAs(UnmanagedType.U1)] bool bHTTPOnly);

	void ISteamHTMLSurface_SetPageScaleFactor(uint unBrowserHandle, float flZoom, int nPointX, int nPointY);

	void ISteamHTMLSurface_SetBackgroundMode(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bBackgroundMode);

	void ISteamHTMLSurface_SetDPIScalingFactor(uint unBrowserHandle, float flDPIScaling);

	void ISteamHTMLSurface_AllowStartRequest(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bAllowed);

	void ISteamHTMLSurface_JSDialogResponse(uint unBrowserHandle, [MarshalAs(UnmanagedType.U1)] bool bResult);

	HTTPRequestHandle ISteamHTTP_CreateHTTPRequest(HTTPMethod eHTTPRequestMethod, string pchAbsoluteURL);

	bool ISteamHTTP_SetHTTPRequestContextValue(uint hRequest, ulong ulContextValue);

	bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(uint hRequest, uint unTimeoutSeconds);

	bool ISteamHTTP_SetHTTPRequestHeaderValue(uint hRequest, string pchHeaderName, string pchHeaderValue);

	bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(uint hRequest, string pchParamName, string pchParamValue);

	bool ISteamHTTP_SendHTTPRequest(uint hRequest, ref ulong pCallHandle);

	bool ISteamHTTP_SendHTTPRequestAndStreamResponse(uint hRequest, ref ulong pCallHandle);

	bool ISteamHTTP_DeferHTTPRequest(uint hRequest);

	bool ISteamHTTP_PrioritizeHTTPRequest(uint hRequest);

	bool ISteamHTTP_GetHTTPResponseHeaderSize(uint hRequest, string pchHeaderName, out uint unResponseHeaderSize);

	bool ISteamHTTP_GetHTTPResponseHeaderValue(uint hRequest, string pchHeaderName, out byte pHeaderValueBuffer, uint unBufferSize);

	bool ISteamHTTP_GetHTTPResponseBodySize(uint hRequest, out uint unBodySize);

	bool ISteamHTTP_GetHTTPResponseBodyData(uint hRequest, out byte pBodyDataBuffer, uint unBufferSize);

	bool ISteamHTTP_GetHTTPStreamingResponseBodyData(uint hRequest, uint cOffset, out byte pBodyDataBuffer, uint unBufferSize);

	bool ISteamHTTP_ReleaseHTTPRequest(uint hRequest);

	bool ISteamHTTP_GetHTTPDownloadProgressPct(uint hRequest, out float pflPercentOut);

	bool ISteamHTTP_SetHTTPRequestRawPostBody(uint hRequest, string pchContentType, out byte pubBody, uint unBodyLen);

	HTTPCookieContainerHandle ISteamHTTP_CreateCookieContainer([MarshalAs(UnmanagedType.U1)] bool bAllowResponsesToModify);

	bool ISteamHTTP_ReleaseCookieContainer(uint hCookieContainer);

	bool ISteamHTTP_SetCookie(uint hCookieContainer, string pchHost, string pchUrl, string pchCookie);

	bool ISteamHTTP_SetHTTPRequestCookieContainer(uint hRequest, uint hCookieContainer);

	bool ISteamHTTP_SetHTTPRequestUserAgentInfo(uint hRequest, string pchUserAgentInfo);

	bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(uint hRequest, [MarshalAs(UnmanagedType.U1)] bool bRequireVerifiedCertificate);

	bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(uint hRequest, uint unMilliseconds);

	bool ISteamHTTP_GetHTTPRequestWasTimedOut(uint hRequest, [MarshalAs(UnmanagedType.U1)] ref bool pbWasTimedOut);

	Result ISteamInventory_GetResultStatus(int resultHandle);

	bool ISteamInventory_GetResultItems(int resultHandle, IntPtr pOutItemsArray, out uint punOutItemsArraySize);

	bool ISteamInventory_GetResultItemProperty(int resultHandle, uint unItemIndex, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut);

	uint ISteamInventory_GetResultTimestamp(int resultHandle);

	bool ISteamInventory_CheckResultSteamID(int resultHandle, ulong steamIDExpected);

	void ISteamInventory_DestroyResult(int resultHandle);

	bool ISteamInventory_GetAllItems(ref int pResultHandle);

	bool ISteamInventory_GetItemsByID(ref int pResultHandle, ulong[] pInstanceIDs, uint unCountInstanceIDs);

	bool ISteamInventory_SerializeResult(int resultHandle, IntPtr pOutBuffer, out uint punOutBufferSize);

	bool ISteamInventory_DeserializeResult(ref int pOutResultHandle, IntPtr pBuffer, uint unBufferSize, [MarshalAs(UnmanagedType.U1)] bool bRESERVED_MUST_BE_FALSE);

	bool ISteamInventory_GenerateItems(ref int pResultHandle, int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength);

	bool ISteamInventory_GrantPromoItems(ref int pResultHandle);

	bool ISteamInventory_AddPromoItem(ref int pResultHandle, int itemDef);

	bool ISteamInventory_AddPromoItems(ref int pResultHandle, int[] pArrayItemDefs, uint unArrayLength);

	bool ISteamInventory_ConsumeItem(ref int pResultHandle, ulong itemConsume, uint unQuantity);

	bool ISteamInventory_ExchangeItems(ref int pResultHandle, int[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, ulong[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength);

	bool ISteamInventory_TransferItemQuantity(ref int pResultHandle, ulong itemIdSource, uint unQuantity, ulong itemIdDest);

	void ISteamInventory_SendItemDropHeartbeat();

	bool ISteamInventory_TriggerItemDrop(ref int pResultHandle, int dropListDefinition);

	bool ISteamInventory_TradeItems(ref int pResultHandle, ulong steamIDTradePartner, ulong[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, ulong[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength);

	bool ISteamInventory_LoadItemDefinitions();

	bool ISteamInventory_GetItemDefinitionIDs(IntPtr pItemDefIDs, out uint punItemDefIDsArraySize);

	bool ISteamInventory_GetItemDefinitionProperty(int iDefinition, string pchPropertyName, StringBuilder pchValueBuffer, out uint punValueBufferSizeOut);

	SteamAPICall_t ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(ulong steamID);

	bool ISteamInventory_GetEligiblePromoItemDefinitionIDs(ulong steamID, IntPtr pItemDefIDs, out uint punItemDefIDsArraySize);

	SteamAPICall_t ISteamInventory_StartPurchase(int[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength);

	SteamAPICall_t ISteamInventory_RequestPrices();

	uint ISteamInventory_GetNumItemsWithPrices();

	bool ISteamInventory_GetItemsWithPrices(IntPtr pArrayItemDefs, IntPtr pPrices, uint unArrayLength);

	bool ISteamInventory_GetItemPrice(int iDefinition, out ulong pPrice);

	SteamInventoryUpdateHandle_t ISteamInventory_StartUpdateProperties();

	bool ISteamInventory_RemoveProperty(ulong handle, ulong nItemID, string pchPropertyName);

	bool ISteamInventory_SetProperty(ulong handle, ulong nItemID, string pchPropertyName, string pchPropertyValue);

	bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, [MarshalAs(UnmanagedType.U1)] bool bValue);

	bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, long nValue);

	bool ISteamInventory_SetProperty0(ulong handle, ulong nItemID, string pchPropertyName, float flValue);

	bool ISteamInventory_SubmitUpdateProperties(ulong handle, ref int pResultHandle);

	int ISteamMatchmaking_GetFavoriteGameCount();

	bool ISteamMatchmaking_GetFavoriteGame(int iGame, ref uint pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer);

	int ISteamMatchmaking_AddFavoriteGame(uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer);

	bool ISteamMatchmaking_RemoveFavoriteGame(uint nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags);

	SteamAPICall_t ISteamMatchmaking_RequestLobbyList();

	void ISteamMatchmaking_AddRequestLobbyListStringFilter(string pchKeyToMatch, string pchValueToMatch, LobbyComparison eComparisonType);

	void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(string pchKeyToMatch, int nValueToMatch, LobbyComparison eComparisonType);

	void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(string pchKeyToMatch, int nValueToBeCloseTo);

	void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable);

	void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(LobbyDistanceFilter eLobbyDistanceFilter);

	void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults);

	void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(ulong steamIDLobby);

	CSteamID ISteamMatchmaking_GetLobbyByIndex(int iLobby);

	SteamAPICall_t ISteamMatchmaking_CreateLobby(LobbyType eLobbyType, int cMaxMembers);

	SteamAPICall_t ISteamMatchmaking_JoinLobby(ulong steamIDLobby);

	void ISteamMatchmaking_LeaveLobby(ulong steamIDLobby);

	bool ISteamMatchmaking_InviteUserToLobby(ulong steamIDLobby, ulong steamIDInvitee);

	int ISteamMatchmaking_GetNumLobbyMembers(ulong steamIDLobby);

	CSteamID ISteamMatchmaking_GetLobbyMemberByIndex(ulong steamIDLobby, int iMember);

	IntPtr ISteamMatchmaking_GetLobbyData(ulong steamIDLobby, string pchKey);

	bool ISteamMatchmaking_SetLobbyData(ulong steamIDLobby, string pchKey, string pchValue);

	int ISteamMatchmaking_GetLobbyDataCount(ulong steamIDLobby);

	bool ISteamMatchmaking_GetLobbyDataByIndex(ulong steamIDLobby, int iLobbyData, StringBuilder pchKey, int cchKeyBufferSize, StringBuilder pchValue, int cchValueBufferSize);

	bool ISteamMatchmaking_DeleteLobbyData(ulong steamIDLobby, string pchKey);

	IntPtr ISteamMatchmaking_GetLobbyMemberData(ulong steamIDLobby, ulong steamIDUser, string pchKey);

	void ISteamMatchmaking_SetLobbyMemberData(ulong steamIDLobby, string pchKey, string pchValue);

	bool ISteamMatchmaking_SendLobbyChatMsg(ulong steamIDLobby, IntPtr pvMsgBody, int cubMsgBody);

	int ISteamMatchmaking_GetLobbyChatEntry(ulong steamIDLobby, int iChatID, out ulong pSteamIDUser, IntPtr pvData, int cubData, out ChatEntryType peChatEntryType);

	bool ISteamMatchmaking_RequestLobbyData(ulong steamIDLobby);

	void ISteamMatchmaking_SetLobbyGameServer(ulong steamIDLobby, uint unGameServerIP, ushort unGameServerPort, ulong steamIDGameServer);

	bool ISteamMatchmaking_GetLobbyGameServer(ulong steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out ulong psteamIDGameServer);

	bool ISteamMatchmaking_SetLobbyMemberLimit(ulong steamIDLobby, int cMaxMembers);

	int ISteamMatchmaking_GetLobbyMemberLimit(ulong steamIDLobby);

	bool ISteamMatchmaking_SetLobbyType(ulong steamIDLobby, LobbyType eLobbyType);

	bool ISteamMatchmaking_SetLobbyJoinable(ulong steamIDLobby, [MarshalAs(UnmanagedType.U1)] bool bLobbyJoinable);

	CSteamID ISteamMatchmaking_GetLobbyOwner(ulong steamIDLobby);

	bool ISteamMatchmaking_SetLobbyOwner(ulong steamIDLobby, ulong steamIDNewOwner);

	bool ISteamMatchmaking_SetLinkedLobby(ulong steamIDLobby, ulong steamIDLobbyDependent);

	HServerListRequest ISteamMatchmakingServers_RequestInternetServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

	HServerListRequest ISteamMatchmakingServers_RequestLANServerList(uint iApp, IntPtr pRequestServersResponse);

	HServerListRequest ISteamMatchmakingServers_RequestFriendsServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

	HServerListRequest ISteamMatchmakingServers_RequestFavoritesServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

	HServerListRequest ISteamMatchmakingServers_RequestHistoryServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

	HServerListRequest ISteamMatchmakingServers_RequestSpectatorServerList(uint iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

	void ISteamMatchmakingServers_ReleaseRequest(IntPtr hServerListRequest);

	IntPtr ISteamMatchmakingServers_GetServerDetails(IntPtr hRequest, int iServer);

	void ISteamMatchmakingServers_CancelQuery(IntPtr hRequest);

	void ISteamMatchmakingServers_RefreshQuery(IntPtr hRequest);

	bool ISteamMatchmakingServers_IsRefreshing(IntPtr hRequest);

	int ISteamMatchmakingServers_GetServerCount(IntPtr hRequest);

	void ISteamMatchmakingServers_RefreshServer(IntPtr hRequest, int iServer);

	HServerQuery ISteamMatchmakingServers_PingServer(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

	HServerQuery ISteamMatchmakingServers_PlayerDetails(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

	HServerQuery ISteamMatchmakingServers_ServerRules(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

	void ISteamMatchmakingServers_CancelServerQuery(int hServerQuery);

	bool ISteamMusic_BIsEnabled();

	bool ISteamMusic_BIsPlaying();

	AudioPlayback_Status ISteamMusic_GetPlaybackStatus();

	void ISteamMusic_Play();

	void ISteamMusic_Pause();

	void ISteamMusic_PlayPrevious();

	void ISteamMusic_PlayNext();

	void ISteamMusic_SetVolume(float flVolume);

	float ISteamMusic_GetVolume();

	bool ISteamMusicRemote_RegisterSteamMusicRemote(string pchName);

	bool ISteamMusicRemote_DeregisterSteamMusicRemote();

	bool ISteamMusicRemote_BIsCurrentMusicRemote();

	bool ISteamMusicRemote_BActivationSuccess([MarshalAs(UnmanagedType.U1)] bool bValue);

	bool ISteamMusicRemote_SetDisplayName(string pchDisplayName);

	bool ISteamMusicRemote_SetPNGIcon_64x64(IntPtr pvBuffer, uint cbBufferLength);

	bool ISteamMusicRemote_EnablePlayPrevious([MarshalAs(UnmanagedType.U1)] bool bValue);

	bool ISteamMusicRemote_EnablePlayNext([MarshalAs(UnmanagedType.U1)] bool bValue);

	bool ISteamMusicRemote_EnableShuffled([MarshalAs(UnmanagedType.U1)] bool bValue);

	bool ISteamMusicRemote_EnableLooped([MarshalAs(UnmanagedType.U1)] bool bValue);

	bool ISteamMusicRemote_EnableQueue([MarshalAs(UnmanagedType.U1)] bool bValue);

	bool ISteamMusicRemote_EnablePlaylists([MarshalAs(UnmanagedType.U1)] bool bValue);

	bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus);

	bool ISteamMusicRemote_UpdateShuffled([MarshalAs(UnmanagedType.U1)] bool bValue);

	bool ISteamMusicRemote_UpdateLooped([MarshalAs(UnmanagedType.U1)] bool bValue);

	bool ISteamMusicRemote_UpdateVolume(float flValue);

	bool ISteamMusicRemote_CurrentEntryWillChange();

	bool ISteamMusicRemote_CurrentEntryIsAvailable([MarshalAs(UnmanagedType.U1)] bool bAvailable);

	bool ISteamMusicRemote_UpdateCurrentEntryText(string pchText);

	bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue);

	bool ISteamMusicRemote_UpdateCurrentEntryCoverArt(IntPtr pvBuffer, uint cbBufferLength);

	bool ISteamMusicRemote_CurrentEntryDidChange();

	bool ISteamMusicRemote_QueueWillChange();

	bool ISteamMusicRemote_ResetQueueEntries();

	bool ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, string pchEntryText);

	bool ISteamMusicRemote_SetCurrentQueueEntry(int nID);

	bool ISteamMusicRemote_QueueDidChange();

	bool ISteamMusicRemote_PlaylistWillChange();

	bool ISteamMusicRemote_ResetPlaylistEntries();

	bool ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, string pchEntryText);

	bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID);

	bool ISteamMusicRemote_PlaylistDidChange();

	bool ISteamNetworking_SendP2PPacket(ulong steamIDRemote, IntPtr pubData, uint cubData, P2PSend eP2PSendType, int nChannel);

	bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel);

	bool ISteamNetworking_ReadP2PPacket(IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out ulong psteamIDRemote, int nChannel);

	bool ISteamNetworking_AcceptP2PSessionWithUser(ulong steamIDRemote);

	bool ISteamNetworking_CloseP2PSessionWithUser(ulong steamIDRemote);

	bool ISteamNetworking_CloseP2PChannelWithUser(ulong steamIDRemote, int nChannel);

	bool ISteamNetworking_GetP2PSessionState(ulong steamIDRemote, ref P2PSessionState_t pConnectionState);

	bool ISteamNetworking_AllowP2PPacketRelay([MarshalAs(UnmanagedType.U1)] bool bAllow);

	SNetListenSocket_t ISteamNetworking_CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

	SNetSocket_t ISteamNetworking_CreateP2PConnectionSocket(ulong steamIDTarget, int nVirtualPort, int nTimeoutSec, [MarshalAs(UnmanagedType.U1)] bool bAllowUseOfPacketRelay);

	SNetSocket_t ISteamNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec);

	bool ISteamNetworking_DestroySocket(uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

	bool ISteamNetworking_DestroyListenSocket(uint hSocket, [MarshalAs(UnmanagedType.U1)] bool bNotifyRemoteEnd);

	bool ISteamNetworking_SendDataOnSocket(uint hSocket, IntPtr pubData, uint cubData, [MarshalAs(UnmanagedType.U1)] bool bReliable);

	bool ISteamNetworking_IsDataAvailableOnSocket(uint hSocket, out uint pcubMsgSize);

	bool ISteamNetworking_RetrieveDataFromSocket(uint hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize);

	bool ISteamNetworking_IsDataAvailable(uint hListenSocket, out uint pcubMsgSize, ref uint phSocket);

	bool ISteamNetworking_RetrieveData(uint hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, ref uint phSocket);

	bool ISteamNetworking_GetSocketInfo(uint hSocket, out ulong pSteamIDRemote, IntPtr peSocketStatus, out uint punIPRemote, out ushort punPortRemote);

	bool ISteamNetworking_GetListenSocketInfo(uint hListenSocket, out uint pnIP, out ushort pnPort);

	SNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(uint hSocket);

	int ISteamNetworking_GetMaxPacketSize(uint hSocket);

	bool ISteamParentalSettings_BIsParentalLockEnabled();

	bool ISteamParentalSettings_BIsParentalLockLocked();

	bool ISteamParentalSettings_BIsAppBlocked(uint nAppID);

	bool ISteamParentalSettings_BIsAppInBlockList(uint nAppID);

	bool ISteamParentalSettings_BIsFeatureBlocked(ParentalFeature eFeature);

	bool ISteamParentalSettings_BIsFeatureInBlockList(ParentalFeature eFeature);

	bool ISteamRemoteStorage_FileWrite(string pchFile, IntPtr pvData, int cubData);

	int ISteamRemoteStorage_FileRead(string pchFile, IntPtr pvData, int cubDataToRead);

	SteamAPICall_t ISteamRemoteStorage_FileWriteAsync(string pchFile, IntPtr pvData, uint cubData);

	SteamAPICall_t ISteamRemoteStorage_FileReadAsync(string pchFile, uint nOffset, uint cubToRead);

	bool ISteamRemoteStorage_FileReadAsyncComplete(ulong hReadCall, IntPtr pvBuffer, uint cubToRead);

	bool ISteamRemoteStorage_FileForget(string pchFile);

	bool ISteamRemoteStorage_FileDelete(string pchFile);

	SteamAPICall_t ISteamRemoteStorage_FileShare(string pchFile);

	bool ISteamRemoteStorage_SetSyncPlatforms(string pchFile, RemoteStoragePlatform eRemoteStoragePlatform);

	UGCFileWriteStreamHandle_t ISteamRemoteStorage_FileWriteStreamOpen(string pchFile);

	bool ISteamRemoteStorage_FileWriteStreamWriteChunk(ulong writeHandle, IntPtr pvData, int cubData);

	bool ISteamRemoteStorage_FileWriteStreamClose(ulong writeHandle);

	bool ISteamRemoteStorage_FileWriteStreamCancel(ulong writeHandle);

	bool ISteamRemoteStorage_FileExists(string pchFile);

	bool ISteamRemoteStorage_FilePersisted(string pchFile);

	int ISteamRemoteStorage_GetFileSize(string pchFile);

	long ISteamRemoteStorage_GetFileTimestamp(string pchFile);

	RemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(string pchFile);

	int ISteamRemoteStorage_GetFileCount();

	IntPtr ISteamRemoteStorage_GetFileNameAndSize(int iFile, out int pnFileSizeInBytes);

	bool ISteamRemoteStorage_GetQuota(out ulong pnTotalBytes, out ulong puAvailableBytes);

	bool ISteamRemoteStorage_IsCloudEnabledForAccount();

	bool ISteamRemoteStorage_IsCloudEnabledForApp();

	void ISteamRemoteStorage_SetCloudEnabledForApp([MarshalAs(UnmanagedType.U1)] bool bEnabled);

	SteamAPICall_t ISteamRemoteStorage_UGCDownload(ulong hContent, uint unPriority);

	bool ISteamRemoteStorage_GetUGCDownloadProgress(ulong hContent, out int pnBytesDownloaded, out int pnBytesExpected);

	bool ISteamRemoteStorage_GetUGCDetails(ulong hContent, ref uint pnAppID, StringBuilder ppchName, out int pnFileSizeInBytes, out ulong pSteamIDOwner);

	int ISteamRemoteStorage_UGCRead(ulong hContent, IntPtr pvData, int cubDataToRead, uint cOffset, UGCReadAction eAction);

	int ISteamRemoteStorage_GetCachedUGCCount();

	UGCHandle_t ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent);

	SteamAPICall_t ISteamRemoteStorage_PublishWorkshopFile(string pchFile, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags, WorkshopFileType eWorkshopFileType);

	PublishedFileUpdateHandle_t ISteamRemoteStorage_CreatePublishedFileUpdateRequest(ulong unPublishedFileId);

	bool ISteamRemoteStorage_UpdatePublishedFileFile(ulong updateHandle, string pchFile);

	bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(ulong updateHandle, string pchPreviewFile);

	bool ISteamRemoteStorage_UpdatePublishedFileTitle(ulong updateHandle, string pchTitle);

	bool ISteamRemoteStorage_UpdatePublishedFileDescription(ulong updateHandle, string pchDescription);

	bool ISteamRemoteStorage_UpdatePublishedFileVisibility(ulong updateHandle, RemoteStoragePublishedFileVisibility eVisibility);

	bool ISteamRemoteStorage_UpdatePublishedFileTags(ulong updateHandle, ref SteamParamStringArray_t pTags);

	SteamAPICall_t ISteamRemoteStorage_CommitPublishedFileUpdate(ulong updateHandle);

	SteamAPICall_t ISteamRemoteStorage_GetPublishedFileDetails(ulong unPublishedFileId, uint unMaxSecondsOld);

	SteamAPICall_t ISteamRemoteStorage_DeletePublishedFile(ulong unPublishedFileId);

	SteamAPICall_t ISteamRemoteStorage_EnumerateUserPublishedFiles(uint unStartIndex);

	SteamAPICall_t ISteamRemoteStorage_SubscribePublishedFile(ulong unPublishedFileId);

	SteamAPICall_t ISteamRemoteStorage_EnumerateUserSubscribedFiles(uint unStartIndex);

	SteamAPICall_t ISteamRemoteStorage_UnsubscribePublishedFile(ulong unPublishedFileId);

	bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(ulong updateHandle, string pchChangeDescription);

	SteamAPICall_t ISteamRemoteStorage_GetPublishedItemVoteDetails(ulong unPublishedFileId);

	SteamAPICall_t ISteamRemoteStorage_UpdateUserPublishedItemVote(ulong unPublishedFileId, [MarshalAs(UnmanagedType.U1)] bool bVoteUp);

	SteamAPICall_t ISteamRemoteStorage_GetUserPublishedItemVoteDetails(ulong unPublishedFileId);

	SteamAPICall_t ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(ulong steamId, uint unStartIndex, ref SteamParamStringArray_t pRequiredTags, ref SteamParamStringArray_t pExcludedTags);

	SteamAPICall_t ISteamRemoteStorage_PublishVideo(WorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, uint nConsumerAppId, string pchTitle, string pchDescription, RemoteStoragePublishedFileVisibility eVisibility, ref SteamParamStringArray_t pTags);

	SteamAPICall_t ISteamRemoteStorage_SetUserPublishedFileAction(ulong unPublishedFileId, WorkshopFileAction eAction);

	SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(WorkshopFileAction eAction, uint unStartIndex);

	SteamAPICall_t ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(WorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, ref SteamParamStringArray_t pTags, ref SteamParamStringArray_t pUserTags);

	SteamAPICall_t ISteamRemoteStorage_UGCDownloadToLocation(ulong hContent, string pchLocation, uint unPriority);

	ScreenshotHandle ISteamScreenshots_WriteScreenshot(IntPtr pubRGB, uint cubRGB, int nWidth, int nHeight);

	ScreenshotHandle ISteamScreenshots_AddScreenshotToLibrary(string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight);

	void ISteamScreenshots_TriggerScreenshot();

	void ISteamScreenshots_HookScreenshots([MarshalAs(UnmanagedType.U1)] bool bHook);

	bool ISteamScreenshots_SetLocation(uint hScreenshot, string pchLocation);

	bool ISteamScreenshots_TagUser(uint hScreenshot, ulong steamID);

	bool ISteamScreenshots_TagPublishedFile(uint hScreenshot, ulong unPublishedFileID);

	bool ISteamScreenshots_IsScreenshotsHooked();

	ScreenshotHandle ISteamScreenshots_AddVRScreenshotToLibrary(VRScreenshotType eType, string pchFilename, string pchVRFilename);

	UGCQueryHandle_t ISteamUGC_CreateQueryUserUGCRequest(uint unAccountID, UserUGCList eListType, UGCMatchingUGCType eMatchingUGCType, UserUGCListSortOrder eSortOrder, uint nCreatorAppID, uint nConsumerAppID, uint unPage);

	UGCQueryHandle_t ISteamUGC_CreateQueryAllUGCRequest(UGCQuery eQueryType, UGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, uint nCreatorAppID, uint nConsumerAppID, uint unPage);

	UGCQueryHandle_t ISteamUGC_CreateQueryUGCDetailsRequest(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

	SteamAPICall_t ISteamUGC_SendQueryUGCRequest(ulong handle);

	bool ISteamUGC_GetQueryUGCResult(ulong handle, uint index, ref SteamUGCDetails_t pDetails);

	bool ISteamUGC_GetQueryUGCPreviewURL(ulong handle, uint index, StringBuilder pchURL, uint cchURLSize);

	bool ISteamUGC_GetQueryUGCMetadata(ulong handle, uint index, StringBuilder pchMetadata, uint cchMetadatasize);

	bool ISteamUGC_GetQueryUGCChildren(ulong handle, uint index, IntPtr pvecPublishedFileID, uint cMaxEntries);

	bool ISteamUGC_GetQueryUGCStatistic(ulong handle, uint index, ItemStatistic eStatType, out ulong pStatValue);

	uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(ulong handle, uint index);

	bool ISteamUGC_GetQueryUGCAdditionalPreview(ulong handle, uint index, uint previewIndex, StringBuilder pchURLOrVideoID, uint cchURLSize, StringBuilder pchOriginalFileName, uint cchOriginalFileNameSize, out ItemPreviewType pPreviewType);

	uint ISteamUGC_GetQueryUGCNumKeyValueTags(ulong handle, uint index);

	bool ISteamUGC_GetQueryUGCKeyValueTag(ulong handle, uint index, uint keyValueTagIndex, StringBuilder pchKey, uint cchKeySize, StringBuilder pchValue, uint cchValueSize);

	bool ISteamUGC_ReleaseQueryUGCRequest(ulong handle);

	bool ISteamUGC_AddRequiredTag(ulong handle, string pTagName);

	bool ISteamUGC_AddExcludedTag(ulong handle, string pTagName);

	bool ISteamUGC_SetReturnOnlyIDs(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnOnlyIDs);

	bool ISteamUGC_SetReturnKeyValueTags(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnKeyValueTags);

	bool ISteamUGC_SetReturnLongDescription(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnLongDescription);

	bool ISteamUGC_SetReturnMetadata(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnMetadata);

	bool ISteamUGC_SetReturnChildren(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnChildren);

	bool ISteamUGC_SetReturnAdditionalPreviews(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnAdditionalPreviews);

	bool ISteamUGC_SetReturnTotalOnly(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bReturnTotalOnly);

	bool ISteamUGC_SetReturnPlaytimeStats(ulong handle, uint unDays);

	bool ISteamUGC_SetLanguage(ulong handle, string pchLanguage);

	bool ISteamUGC_SetAllowCachedResponse(ulong handle, uint unMaxAgeSeconds);

	bool ISteamUGC_SetCloudFileNameFilter(ulong handle, string pMatchCloudFileName);

	bool ISteamUGC_SetMatchAnyTag(ulong handle, [MarshalAs(UnmanagedType.U1)] bool bMatchAnyTag);

	bool ISteamUGC_SetSearchText(ulong handle, string pSearchText);

	bool ISteamUGC_SetRankedByTrendDays(ulong handle, uint unDays);

	bool ISteamUGC_AddRequiredKeyValueTag(ulong handle, string pKey, string pValue);

	SteamAPICall_t ISteamUGC_RequestUGCDetails(ulong nPublishedFileID, uint unMaxAgeSeconds);

	SteamAPICall_t ISteamUGC_CreateItem(uint nConsumerAppId, WorkshopFileType eFileType);

	UGCUpdateHandle_t ISteamUGC_StartItemUpdate(uint nConsumerAppId, ulong nPublishedFileID);

	bool ISteamUGC_SetItemTitle(ulong handle, string pchTitle);

	bool ISteamUGC_SetItemDescription(ulong handle, string pchDescription);

	bool ISteamUGC_SetItemUpdateLanguage(ulong handle, string pchLanguage);

	bool ISteamUGC_SetItemMetadata(ulong handle, string pchMetaData);

	bool ISteamUGC_SetItemVisibility(ulong handle, RemoteStoragePublishedFileVisibility eVisibility);

	bool ISteamUGC_SetItemTags(ulong updateHandle, ref SteamParamStringArray_t pTags);

	bool ISteamUGC_SetItemContent(ulong handle, string pszContentFolder);

	bool ISteamUGC_SetItemPreview(ulong handle, string pszPreviewFile);

	bool ISteamUGC_RemoveItemKeyValueTags(ulong handle, string pchKey);

	bool ISteamUGC_AddItemKeyValueTag(ulong handle, string pchKey, string pchValue);

	bool ISteamUGC_AddItemPreviewFile(ulong handle, string pszPreviewFile, ItemPreviewType type);

	bool ISteamUGC_AddItemPreviewVideo(ulong handle, string pszVideoID);

	bool ISteamUGC_UpdateItemPreviewFile(ulong handle, uint index, string pszPreviewFile);

	bool ISteamUGC_UpdateItemPreviewVideo(ulong handle, uint index, string pszVideoID);

	bool ISteamUGC_RemoveItemPreview(ulong handle, uint index);

	SteamAPICall_t ISteamUGC_SubmitItemUpdate(ulong handle, string pchChangeNote);

	ItemUpdateStatus ISteamUGC_GetItemUpdateProgress(ulong handle, out ulong punBytesProcessed, out ulong punBytesTotal);

	SteamAPICall_t ISteamUGC_SetUserItemVote(ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bVoteUp);

	SteamAPICall_t ISteamUGC_GetUserItemVote(ulong nPublishedFileID);

	SteamAPICall_t ISteamUGC_AddItemToFavorites(uint nAppId, ulong nPublishedFileID);

	SteamAPICall_t ISteamUGC_RemoveItemFromFavorites(uint nAppId, ulong nPublishedFileID);

	SteamAPICall_t ISteamUGC_SubscribeItem(ulong nPublishedFileID);

	SteamAPICall_t ISteamUGC_UnsubscribeItem(ulong nPublishedFileID);

	uint ISteamUGC_GetNumSubscribedItems();

	uint ISteamUGC_GetSubscribedItems(IntPtr pvecPublishedFileID, uint cMaxEntries);

	uint ISteamUGC_GetItemState(ulong nPublishedFileID);

	bool ISteamUGC_GetItemInstallInfo(ulong nPublishedFileID, out ulong punSizeOnDisk, StringBuilder pchFolder, uint cchFolderSize, out uint punTimeStamp);

	bool ISteamUGC_GetItemDownloadInfo(ulong nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal);

	bool ISteamUGC_DownloadItem(ulong nPublishedFileID, [MarshalAs(UnmanagedType.U1)] bool bHighPriority);

	bool ISteamUGC_BInitWorkshopForGameServer(uint unWorkshopDepotID, string pszFolder);

	void ISteamUGC_SuspendDownloads([MarshalAs(UnmanagedType.U1)] bool bSuspend);

	SteamAPICall_t ISteamUGC_StartPlaytimeTracking(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

	SteamAPICall_t ISteamUGC_StopPlaytimeTracking(IntPtr pvecPublishedFileID, uint unNumPublishedFileIDs);

	SteamAPICall_t ISteamUGC_StopPlaytimeTrackingForAllItems();

	SteamAPICall_t ISteamUGC_AddDependency(ulong nParentPublishedFileID, ulong nChildPublishedFileID);

	SteamAPICall_t ISteamUGC_RemoveDependency(ulong nParentPublishedFileID, ulong nChildPublishedFileID);

	SteamAPICall_t ISteamUGC_AddAppDependency(ulong nPublishedFileID, uint nAppID);

	SteamAPICall_t ISteamUGC_RemoveAppDependency(ulong nPublishedFileID, uint nAppID);

	SteamAPICall_t ISteamUGC_GetAppDependencies(ulong nPublishedFileID);

	SteamAPICall_t ISteamUGC_DeleteItem(ulong nPublishedFileID);

	HSteamUser ISteamUser_GetHSteamUser();

	bool ISteamUser_BLoggedOn();

	CSteamID ISteamUser_GetSteamID();

	int ISteamUser_InitiateGameConnection(IntPtr pAuthBlob, int cbMaxAuthBlob, ulong steamIDGameServer, uint unIPServer, ushort usPortServer, [MarshalAs(UnmanagedType.U1)] bool bSecure);

	void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer);

	void ISteamUser_TrackAppUsageEvent(ulong gameID, int eAppUsageEvent, string pchExtraInfo);

	bool ISteamUser_GetUserDataFolder(StringBuilder pchBuffer, int cubBuffer);

	void ISteamUser_StartVoiceRecording();

	void ISteamUser_StopVoiceRecording();

	VoiceResult ISteamUser_GetAvailableVoice(out uint pcbCompressed, out uint pcbUncompressed_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

	VoiceResult ISteamUser_GetVoice([MarshalAs(UnmanagedType.U1)] bool bWantCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, [MarshalAs(UnmanagedType.U1)] bool bWantUncompressed_Deprecated, IntPtr pUncompressedDestBuffer_Deprecated, uint cbUncompressedDestBufferSize_Deprecated, out uint nUncompressBytesWritten_Deprecated, uint nUncompressedVoiceDesiredSampleRate_Deprecated);

	VoiceResult ISteamUser_DecompressVoice(IntPtr pCompressed, uint cbCompressed, IntPtr pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate);

	uint ISteamUser_GetVoiceOptimalSampleRate();

	HAuthTicket ISteamUser_GetAuthSessionTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

	BeginAuthSessionResult ISteamUser_BeginAuthSession(IntPtr pAuthTicket, int cbAuthTicket, ulong steamID);

	void ISteamUser_EndAuthSession(ulong steamID);

	void ISteamUser_CancelAuthTicket(uint hAuthTicket);

	UserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(ulong steamID, uint appID);

	bool ISteamUser_BIsBehindNAT();

	void ISteamUser_AdvertiseGame(ulong steamIDGameServer, uint unIPServer, ushort usPortServer);

	SteamAPICall_t ISteamUser_RequestEncryptedAppTicket(IntPtr pDataToInclude, int cbDataToInclude);

	bool ISteamUser_GetEncryptedAppTicket(IntPtr pTicket, int cbMaxTicket, out uint pcbTicket);

	int ISteamUser_GetGameBadgeLevel(int nSeries, [MarshalAs(UnmanagedType.U1)] bool bFoil);

	int ISteamUser_GetPlayerSteamLevel();

	SteamAPICall_t ISteamUser_RequestStoreAuthURL(string pchRedirectURL);

	bool ISteamUser_BIsPhoneVerified();

	bool ISteamUser_BIsTwoFactorEnabled();

	bool ISteamUser_BIsPhoneIdentifying();

	bool ISteamUser_BIsPhoneRequiringVerification();

	bool ISteamUserStats_RequestCurrentStats();

	bool ISteamUserStats_GetStat(string pchName, out int pData);

	bool ISteamUserStats_GetStat0(string pchName, out float pData);

	bool ISteamUserStats_SetStat(string pchName, int nData);

	bool ISteamUserStats_SetStat0(string pchName, float fData);

	bool ISteamUserStats_UpdateAvgRateStat(string pchName, float flCountThisSession, double dSessionLength);

	bool ISteamUserStats_GetAchievement(string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

	bool ISteamUserStats_SetAchievement(string pchName);

	bool ISteamUserStats_ClearAchievement(string pchName);

	bool ISteamUserStats_GetAchievementAndUnlockTime(string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved, out uint punUnlockTime);

	bool ISteamUserStats_StoreStats();

	int ISteamUserStats_GetAchievementIcon(string pchName);

	IntPtr ISteamUserStats_GetAchievementDisplayAttribute(string pchName, string pchKey);

	bool ISteamUserStats_IndicateAchievementProgress(string pchName, uint nCurProgress, uint nMaxProgress);

	uint ISteamUserStats_GetNumAchievements();

	IntPtr ISteamUserStats_GetAchievementName(uint iAchievement);

	SteamAPICall_t ISteamUserStats_RequestUserStats(ulong steamIDUser);

	bool ISteamUserStats_GetUserStat(ulong steamIDUser, string pchName, out int pData);

	bool ISteamUserStats_GetUserStat0(ulong steamIDUser, string pchName, out float pData);

	bool ISteamUserStats_GetUserAchievement(ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

	bool ISteamUserStats_GetUserAchievementAndUnlockTime(ulong steamIDUser, string pchName, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved, out uint punUnlockTime);

	bool ISteamUserStats_ResetAllStats([MarshalAs(UnmanagedType.U1)] bool bAchievementsToo);

	SteamAPICall_t ISteamUserStats_FindOrCreateLeaderboard(string pchLeaderboardName, LeaderboardSortMethod eLeaderboardSortMethod, LeaderboardDisplayType eLeaderboardDisplayType);

	SteamAPICall_t ISteamUserStats_FindLeaderboard(string pchLeaderboardName);

	IntPtr ISteamUserStats_GetLeaderboardName(ulong hSteamLeaderboard);

	int ISteamUserStats_GetLeaderboardEntryCount(ulong hSteamLeaderboard);

	LeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(ulong hSteamLeaderboard);

	LeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(ulong hSteamLeaderboard);

	SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntries(ulong hSteamLeaderboard, LeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd);

	SteamAPICall_t ISteamUserStats_DownloadLeaderboardEntriesForUsers(ulong hSteamLeaderboard, IntPtr prgUsers, int cUsers);

	bool ISteamUserStats_GetDownloadedLeaderboardEntry(ulong hSteamLeaderboardEntries, int index, ref LeaderboardEntry_t pLeaderboardEntry, IntPtr pDetails, int cDetailsMax);

	SteamAPICall_t ISteamUserStats_UploadLeaderboardScore(ulong hSteamLeaderboard, LeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount);

	SteamAPICall_t ISteamUserStats_AttachLeaderboardUGC(ulong hSteamLeaderboard, ulong hUGC);

	SteamAPICall_t ISteamUserStats_GetNumberOfCurrentPlayers();

	SteamAPICall_t ISteamUserStats_RequestGlobalAchievementPercentages();

	int ISteamUserStats_GetMostAchievedAchievementInfo(StringBuilder pchName, uint unNameBufLen, out float pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

	int ISteamUserStats_GetNextMostAchievedAchievementInfo(int iIteratorPrevious, StringBuilder pchName, uint unNameBufLen, out float pflPercent, [MarshalAs(UnmanagedType.U1)] ref bool pbAchieved);

	bool ISteamUserStats_GetAchievementAchievedPercent(string pchName, out float pflPercent);

	SteamAPICall_t ISteamUserStats_RequestGlobalStats(int nHistoryDays);

	bool ISteamUserStats_GetGlobalStat(string pchStatName, out long pData);

	bool ISteamUserStats_GetGlobalStat0(string pchStatName, out double pData);

	int ISteamUserStats_GetGlobalStatHistory(string pchStatName, out long pData, uint cubData);

	int ISteamUserStats_GetGlobalStatHistory0(string pchStatName, out double pData, uint cubData);

	uint ISteamUtils_GetSecondsSinceAppActive();

	uint ISteamUtils_GetSecondsSinceComputerActive();

	Universe ISteamUtils_GetConnectedUniverse();

	uint ISteamUtils_GetServerRealTime();

	IntPtr ISteamUtils_GetIPCountry();

	bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight);

	bool ISteamUtils_GetImageRGBA(int iImage, IntPtr pubDest, int nDestBufferSize);

	bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort);

	byte ISteamUtils_GetCurrentBatteryPower();

	uint ISteamUtils_GetAppID();

	void ISteamUtils_SetOverlayNotificationPosition(NotificationPosition eNotificationPosition);

	bool ISteamUtils_IsAPICallCompleted(ulong hSteamAPICall, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

	SteamAPICallFailure ISteamUtils_GetAPICallFailureReason(ulong hSteamAPICall);

	bool ISteamUtils_GetAPICallResult(ulong hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, [MarshalAs(UnmanagedType.U1)] ref bool pbFailed);

	uint ISteamUtils_GetIPCCallCount();

	void ISteamUtils_SetWarningMessageHook(IntPtr pFunction);

	bool ISteamUtils_IsOverlayEnabled();

	bool ISteamUtils_BOverlayNeedsPresent();

	SteamAPICall_t ISteamUtils_CheckFileSignature(string szFileName);

	bool ISteamUtils_ShowGamepadTextInput(GamepadTextInputMode eInputMode, GamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText);

	uint ISteamUtils_GetEnteredGamepadTextLength();

	bool ISteamUtils_GetEnteredGamepadTextInput(StringBuilder pchText, uint cchText);

	IntPtr ISteamUtils_GetSteamUILanguage();

	bool ISteamUtils_IsSteamRunningInVR();

	void ISteamUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset);

	bool ISteamUtils_IsSteamInBigPictureMode();

	void ISteamUtils_StartVRDashboard();

	bool ISteamUtils_IsVRHeadsetStreamingEnabled();

	void ISteamUtils_SetVRHeadsetStreamingEnabled([MarshalAs(UnmanagedType.U1)] bool bEnabled);

	void ISteamVideo_GetVideoURL(uint unVideoAppID);

	bool ISteamVideo_IsBroadcasting(IntPtr pnNumViewers);

	void ISteamVideo_GetOPFSettings(uint unVideoAppID);

	bool ISteamVideo_GetOPFStringForApp(uint unVideoAppID, StringBuilder pchBuffer, out int pnBufferSize);

	bool SteamApi_SteamAPI_Init();

	void SteamApi_SteamAPI_RunCallbacks();

	void SteamApi_SteamGameServer_RunCallbacks();

	void SteamApi_SteamAPI_RegisterCallback(IntPtr pCallback, int callback);

	void SteamApi_SteamAPI_UnregisterCallback(IntPtr pCallback);

	void SteamApi_SteamAPI_RegisterCallResult(IntPtr pCallback, ulong callback);

	void SteamApi_SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong callback);

	bool SteamApi_SteamInternal_GameServer_Init(uint unIP, ushort usPort, ushort usGamePort, ushort usQueryPort, int eServerMode, string pchVersionString);

	void SteamApi_SteamAPI_Shutdown();

	void SteamApi_SteamGameServer_Shutdown();

	HSteamUser SteamApi_SteamAPI_GetHSteamUser();

	HSteamPipe SteamApi_SteamAPI_GetHSteamPipe();

	HSteamUser SteamApi_SteamGameServer_GetHSteamUser();

	HSteamPipe SteamApi_SteamGameServer_GetHSteamPipe();

	IntPtr SteamApi_SteamInternal_CreateInterface(string version);

	bool SteamApi_SteamAPI_RestartAppIfNecessary(uint unOwnAppID);
}
