using System;
using System.Collections.Generic;
using System.Diagnostics;
using SteamNative;

internal class SubRequest
{
	internal IntPtr Request;

	internal int Pointer;

	internal List<int> WatchList = new List<int>();

	internal Stopwatch Timer = Stopwatch.StartNew();

	internal bool Update(SteamMatchmakingServers servers, Action<gameserveritem_t> OnServer, Action OnUpdate)
	{
		if (Request == IntPtr.Zero)
		{
			return true;
		}
		if (Timer.Elapsed.TotalSeconds < 0.5)
		{
			return false;
		}
		Timer.Reset();
		Timer.Start();
		bool changes = false;
		int serverCount = servers.GetServerCount(Request);
		if (serverCount != Pointer)
		{
			for (int i = Pointer; i < serverCount; i++)
			{
				WatchList.Add(i);
			}
		}
		Pointer = serverCount;
		WatchList.RemoveAll(delegate(int x)
		{
			gameserveritem_t serverDetails = servers.GetServerDetails(Request, x);
			if (serverDetails.HadSuccessfulResponse)
			{
				OnServer(serverDetails);
				changes = true;
				return true;
			}
			return false;
		});
		if (!servers.IsRefreshing(Request))
		{
			WatchList.RemoveAll(delegate(int x)
			{
				gameserveritem_t serverDetails2 = servers.GetServerDetails(Request, x);
				OnServer(serverDetails2);
				return true;
			});
			servers.CancelQuery(Request);
			Request = IntPtr.Zero;
			changes = true;
		}
		if (changes)
		{
			OnUpdate?.Invoke();
		}
		return Request == IntPtr.Zero;
	}
}
