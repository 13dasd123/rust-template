using System;
using Facepunch.Steamworks;
using SteamNative;

internal class NativeInterface : IDisposable
{
	internal SteamApi api;

	internal SteamClient client;

	internal SteamUser user;

	internal SteamApps apps;

	internal SteamAppList applist;

	internal SteamFriends friends;

	internal SteamMatchmakingServers servers;

	internal SteamMatchmaking matchmaking;

	internal SteamInventory inventory;

	internal SteamNetworking networking;

	internal SteamUserStats userstats;

	internal SteamUtils utils;

	internal SteamScreenshots screenshots;

	internal SteamHTTP http;

	internal SteamUGC ugc;

	internal SteamGameServer gameServer;

	internal SteamGameServerStats gameServerStats;

	internal SteamRemoteStorage remoteStorage;

	private bool isServer;

	private HSteamUser hUser;

	private HSteamPipe hPipe;

	internal bool InitClient(BaseSteamworks steamworks)
	{
		isServer = false;
		api = new SteamApi();
		if (!api.SteamAPI_Init())
		{
			return false;
		}
		hUser = api.SteamAPI_GetHSteamUser();
		hPipe = api.SteamAPI_GetHSteamPipe();
		if ((int)hPipe == 0)
		{
			return false;
		}
		FillInterfaces(steamworks, hUser, hPipe);
		if (!user.IsValid)
		{
			return false;
		}
		if (!user.BLoggedOn())
		{
			return false;
		}
		return true;
	}

	internal bool InitServer(BaseSteamworks steamworks, uint IpAddress, ushort usPort, ushort GamePort, ushort QueryPort, int eServerMode, string pchVersionString)
	{
		isServer = true;
		api = new SteamApi();
		if (!api.SteamInternal_GameServer_Init(IpAddress, usPort, GamePort, QueryPort, eServerMode, pchVersionString))
		{
			return false;
		}
		hUser = api.SteamGameServer_GetHSteamUser();
		hPipe = api.SteamGameServer_GetHSteamPipe();
		if ((int)hPipe == 0)
		{
			return false;
		}
		FillInterfaces(steamworks, hPipe, hUser);
		if (!gameServer.IsValid)
		{
			gameServer = null;
			throw new Exception("Steam Server: Couldn't load SteamGameServer012");
		}
		return true;
	}

	public void FillInterfaces(BaseSteamworks steamworks, int hpipe, int huser)
	{
		IntPtr intPtr = api.SteamInternal_CreateInterface("SteamClient017");
		if (intPtr == IntPtr.Zero)
		{
			throw new Exception("Steam Server: Couldn't load SteamClient017");
		}
		client = new SteamClient(steamworks, intPtr);
		user = client.GetISteamUser(huser, hpipe, "SteamUser019");
		utils = client.GetISteamUtils(hpipe, "SteamUtils009");
		networking = client.GetISteamNetworking(huser, hpipe, "SteamNetworking005");
		gameServerStats = client.GetISteamGameServerStats(huser, hpipe, "SteamGameServerStats001");
		http = client.GetISteamHTTP(huser, hpipe, "STEAMHTTP_INTERFACE_VERSION002");
		inventory = client.GetISteamInventory(huser, hpipe, "STEAMINVENTORY_INTERFACE_V002");
		ugc = client.GetISteamUGC(huser, hpipe, "STEAMUGC_INTERFACE_VERSION010");
		apps = client.GetISteamApps(huser, hpipe, "STEAMAPPS_INTERFACE_VERSION008");
		gameServer = client.GetISteamGameServer(huser, hpipe, "SteamGameServer012");
		friends = client.GetISteamFriends(huser, hpipe, "SteamFriends015");
		servers = client.GetISteamMatchmakingServers(huser, hpipe, "SteamMatchMakingServers002");
		userstats = client.GetISteamUserStats(huser, hpipe, "STEAMUSERSTATS_INTERFACE_VERSION011");
		screenshots = client.GetISteamScreenshots(huser, hpipe, "STEAMSCREENSHOTS_INTERFACE_VERSION003");
		remoteStorage = client.GetISteamRemoteStorage(huser, hpipe, "STEAMREMOTESTORAGE_INTERFACE_VERSION014");
		matchmaking = client.GetISteamMatchmaking(huser, hpipe, "SteamMatchMaking009");
		applist = client.GetISteamAppList(huser, hpipe, "STEAMAPPLIST_INTERFACE_VERSION001");
	}

	public void Dispose()
	{
		if (client != null)
		{
			if ((int)hPipe != 0)
			{
				if ((int)hUser != 0)
				{
					client.ReleaseUser(hPipe, hUser);
					hUser = 0;
				}
				client.BReleaseSteamPipe(hPipe);
				hPipe = 0;
			}
			if (!client.BShutdownIfAllPipesClosed())
			{
				Console.WriteLine("BShutdownIfAllPipesClosed returned false");
			}
			client.Dispose();
			client = null;
		}
		if (user != null)
		{
			user.Dispose();
			user = null;
		}
		if (utils != null)
		{
			utils.Dispose();
			utils = null;
		}
		if (networking != null)
		{
			networking.Dispose();
			networking = null;
		}
		if (gameServerStats != null)
		{
			gameServerStats.Dispose();
			gameServerStats = null;
		}
		if (http != null)
		{
			http.Dispose();
			http = null;
		}
		if (inventory != null)
		{
			inventory.Dispose();
			inventory = null;
		}
		if (ugc != null)
		{
			ugc.Dispose();
			ugc = null;
		}
		if (apps != null)
		{
			apps.Dispose();
			apps = null;
		}
		if (gameServer != null)
		{
			gameServer.Dispose();
			gameServer = null;
		}
		if (friends != null)
		{
			friends.Dispose();
			friends = null;
		}
		if (servers != null)
		{
			servers.Dispose();
			servers = null;
		}
		if (userstats != null)
		{
			userstats.Dispose();
			userstats = null;
		}
		if (screenshots != null)
		{
			screenshots.Dispose();
			screenshots = null;
		}
		if (remoteStorage != null)
		{
			remoteStorage.Dispose();
			remoteStorage = null;
		}
		if (applist != null)
		{
			applist.Dispose();
			applist = null;
		}
		if (api != null)
		{
			if (isServer)
			{
				api.SteamGameServer_Shutdown();
			}
			else
			{
				api.SteamAPI_Shutdown();
			}
			api.Dispose();
			api = null;
		}
	}
}
