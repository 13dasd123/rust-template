using System;
using Facepunch.Steamworks;
using SteamNative;

internal class SteamMatchmakingServers : IDisposable
{
	internal Platform.Interface platform;

	internal BaseSteamworks steamworks;

	public bool IsValid => platform != null && platform.IsValid;

	internal SteamMatchmakingServers(BaseSteamworks steamworks, IntPtr pointer)
	{
		this.steamworks = steamworks;
		if (Platform.IsWindows64)
		{
			platform = new Platform.Win64(pointer);
		}
		else if (Platform.IsWindows32)
		{
			platform = new Platform.Win32(pointer);
		}
		else if (Platform.IsLinux32)
		{
			platform = new Platform.Linux32(pointer);
		}
		else if (Platform.IsLinux64)
		{
			platform = new Platform.Linux64(pointer);
		}
		else if (Platform.IsOsx)
		{
			platform = new Platform.Mac(pointer);
		}
	}

	public virtual void Dispose()
	{
		if (platform != null)
		{
			platform.Dispose();
			platform = null;
		}
	}

	public void CancelQuery(HServerListRequest hRequest)
	{
		platform.ISteamMatchmakingServers_CancelQuery(hRequest.Value);
	}

	public void CancelServerQuery(HServerQuery hServerQuery)
	{
		platform.ISteamMatchmakingServers_CancelServerQuery(hServerQuery.Value);
	}

	public int GetServerCount(HServerListRequest hRequest)
	{
		return platform.ISteamMatchmakingServers_GetServerCount(hRequest.Value);
	}

	public gameserveritem_t GetServerDetails(HServerListRequest hRequest, int iServer)
	{
		IntPtr intPtr = platform.ISteamMatchmakingServers_GetServerDetails(hRequest.Value, iServer);
		if (intPtr == IntPtr.Zero)
		{
			return default(gameserveritem_t);
		}
		return gameserveritem_t.FromPointer(intPtr);
	}

	public bool IsRefreshing(HServerListRequest hRequest)
	{
		return platform.ISteamMatchmakingServers_IsRefreshing(hRequest.Value);
	}

	public HServerQuery PingServer(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
	{
		return platform.ISteamMatchmakingServers_PingServer(unIP, usPort, pRequestServersResponse);
	}

	public HServerQuery PlayerDetails(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
	{
		return platform.ISteamMatchmakingServers_PlayerDetails(unIP, usPort, pRequestServersResponse);
	}

	public void RefreshQuery(HServerListRequest hRequest)
	{
		platform.ISteamMatchmakingServers_RefreshQuery(hRequest.Value);
	}

	public void RefreshServer(HServerListRequest hRequest, int iServer)
	{
		platform.ISteamMatchmakingServers_RefreshServer(hRequest.Value, iServer);
	}

	public void ReleaseRequest(HServerListRequest hServerListRequest)
	{
		platform.ISteamMatchmakingServers_ReleaseRequest(hServerListRequest.Value);
	}

	public HServerListRequest RequestFavoritesServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
	{
		return platform.ISteamMatchmakingServers_RequestFavoritesServerList(iApp.Value, ppchFilters, nFilters, pRequestServersResponse);
	}

	public HServerListRequest RequestFriendsServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
	{
		return platform.ISteamMatchmakingServers_RequestFriendsServerList(iApp.Value, ppchFilters, nFilters, pRequestServersResponse);
	}

	public HServerListRequest RequestHistoryServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
	{
		return platform.ISteamMatchmakingServers_RequestHistoryServerList(iApp.Value, ppchFilters, nFilters, pRequestServersResponse);
	}

	public HServerListRequest RequestInternetServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
	{
		return platform.ISteamMatchmakingServers_RequestInternetServerList(iApp.Value, ppchFilters, nFilters, pRequestServersResponse);
	}

	public HServerListRequest RequestLANServerList(AppId_t iApp, IntPtr pRequestServersResponse)
	{
		return platform.ISteamMatchmakingServers_RequestLANServerList(iApp.Value, pRequestServersResponse);
	}

	public HServerListRequest RequestSpectatorServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse)
	{
		return platform.ISteamMatchmakingServers_RequestSpectatorServerList(iApp.Value, ppchFilters, nFilters, pRequestServersResponse);
	}

	public HServerQuery ServerRules(uint unIP, ushort usPort, IntPtr pRequestServersResponse)
	{
		return platform.ISteamMatchmakingServers_ServerRules(unIP, usPort, pRequestServersResponse);
	}
}
