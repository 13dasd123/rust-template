using System;
using System.Collections.Generic;
using System.Linq;
using Facepunch;

public static class Input
{
	private class Button
	{
		public string Name;

		public Func<bool> TestFunction;

		public bool CurrentValue;

		public bool LastValue;

		public string[] Binds;

		public virtual void Update()
		{
			LastValue = CurrentValue;
			CurrentValue = TestFunction();
			if (CurrentValue && !LastValue)
			{
				RunBinds(Pressed: true);
			}
			if (!CurrentValue && LastValue)
			{
				RunBinds(Pressed: false);
			}
		}

		private void RunBinds(bool Pressed)
		{
			if (Binds == null || Input.RunBind == null)
			{
				return;
			}
			for (int i = 0; i < Binds.Length; i++)
			{
				if (Binds[i][0] == '+')
				{
					Input.RunBind(Binds[i].Substring(1), Pressed);
				}
				else if (Pressed)
				{
					Input.RunBind(Binds[i], Pressed);
				}
			}
		}
	}

	private static List<Button> buttons = new List<Button>();

	private static List<Action> frameThinks = new List<Action>();

	public static event Action<string, bool> RunBind;

	public static void Frame()
	{
		for (int i = 0; i < frameThinks.Count; i++)
		{
			frameThinks[i]();
		}
	}

	public static void Update()
	{
		for (int i = 0; i < buttons.Count; i++)
		{
			buttons[i].Update();
		}
	}

	public static void AddButton(string name, Func<bool> TestFunction, Action FrameThink = null)
	{
		if (!buttons.Any((Button x) => x.Name == name.ToLower()))
		{
			Button button = new Button();
			button.Name = name.ToLower();
			button.TestFunction = TestFunction;
			buttons.Add(button);
			if (FrameThink != null)
			{
				frameThinks.Add(FrameThink);
			}
		}
	}

	public static void SetBind(string name, string bind)
	{
		foreach (Button item in buttons.Where((Button x) => x.Name.Equals(name, StringComparison.InvariantCultureIgnoreCase)))
		{
			if (bind == null)
			{
				item.Binds = null;
				continue;
			}
			item.Binds = bind.Split(new char[1] { ';' }, StringSplitOptions.RemoveEmptyEntries);
		}
	}

	public static string GetBind(string name)
	{
		using (IEnumerator<Button> enumerator = buttons.Where((Button x) => x.Name.Equals(name, StringComparison.InvariantCultureIgnoreCase)).GetEnumerator())
		{
			if (enumerator.MoveNext())
			{
				Button current = enumerator.Current;
				if (current.Binds == null)
				{
					return "(nothing)";
				}
				return string.Join(";", current.Binds);
			}
		}
		return "(button not found)";
	}

	public static void ClearBinds()
	{
		foreach (Button button in buttons)
		{
			button.Binds = null;
		}
	}

	public static Dictionary<string, string[]> GetAllBinds()
	{
		return buttons.Where((Button x) => x.Binds != null && x.Binds.Length > 0).ToDictionary((Button x) => x.Name, (Button x) => x.Binds);
	}

	public static string[] GetAllButtons()
	{
		return buttons.Select((Button x) => x.Name).ToArray();
	}

	public static string[] GetPressedButtons()
	{
		return (from x in buttons
			where x.CurrentValue
			select x.Name).ToArray();
	}

	public static string[] GetButtonsWithBind(string bind)
	{
		return (from x in buttons
			where x.Binds != null && x.Binds.Contains(bind)
			select x.Name).ToArray();
	}

	public static string GetButtonWithBind(string bind)
	{
		string[] buttonsWithBind = GetButtonsWithBind(bind);
		if (buttonsWithBind.Length == 0)
		{
			return "UNSET";
		}
		return buttonsWithBind[0];
	}
}
