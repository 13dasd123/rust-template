using System;
using System.Collections.Generic;
using System.Linq;
using Facepunch;
using UnityEngine;

public static class Input
{
	public class Button
	{
		public string Name;

		public Func<bool> TestFunction;

		public bool CurrentValue;

		public bool LastValue;

		public string[] Binds;

		public bool Transient;

		public bool Cycle;

		public int CycleIndex;

		public KeyCode Code;

		public virtual void Update()
		{
			LastValue = CurrentValue;
			CurrentValue = TestFunction();
			if (CurrentValue && !LastValue)
			{
				RunBinds(pressed: true);
			}
			if (!CurrentValue && LastValue)
			{
				RunBinds(pressed: false);
			}
		}

		private void RunBinds(bool pressed)
		{
			if (Binds == null || Input.RunBind == null)
			{
				return;
			}
			if (Cycle)
			{
				int num = (pressed ? CycleIndex : CycleIndex++);
				if (CycleIndex >= Binds.Length)
				{
					CycleIndex = 0;
				}
				if (num < Binds.Length)
				{
					RunBindImpl(Binds[num], pressed);
				}
			}
			else
			{
				for (int i = 0; i < Binds.Length; i++)
				{
					RunBindImpl(Binds[i], pressed);
				}
			}
		}

		private static void RunBindImpl(string bind, bool pressed)
		{
			if (bind[0] == '+')
			{
				Input.RunBind(WithoutFirstChar.Get(bind), pressed);
			}
			else if (pressed)
			{
				Input.RunBind(bind, pressed);
			}
		}
	}

	private static readonly Memoized<string, string> WithoutFirstChar = new Memoized<string, string>((string s) => s.Substring(1));

	private static List<Button> buttons = new List<Button>();

	private static List<Action> frameThinks = new List<Action>();

	public static event Action<string, bool> RunBind;

	public static void Frame()
	{
		for (int i = 0; i < frameThinks.Count; i++)
		{
			frameThinks[i]();
		}
	}

	public static void Update()
	{
		for (int i = 0; i < buttons.Count; i++)
		{
			Button button = buttons[i];
			if (button.Transient && (button.Binds == null || button.Binds.Length == 0))
			{
				buttons.RemoveAt(i);
				i--;
			}
			else
			{
				button.Update();
			}
		}
	}

	public static void AddButton(string name, KeyCode key, Func<bool> TestFunction, Action FrameThink = null, bool transient = false)
	{
		if (!HasButton(name))
		{
			Button button = new Button();
			button.Name = name.ToLower();
			button.TestFunction = TestFunction;
			button.Transient = transient;
			button.Code = key;
			buttons.Add(button);
			if (FrameThink != null)
			{
				frameThinks.Add(FrameThink);
			}
		}
	}

	public static bool HasButton(string name)
	{
		return GetButton(name) != null;
	}

	public static void SetBind(string name, string bind, bool cycled = false)
	{
		Button button = GetButton(name);
		if (button != null)
		{
			if (bind == null)
			{
				bind = "no_input";
			}
			button.Binds = bind.Split(new char[1] { ';' }, StringSplitOptions.RemoveEmptyEntries);
			for (int i = 0; i < button.Binds.Length; i++)
			{
				button.Binds[i] = button.Binds[i].Trim();
			}
			button.Cycle = cycled;
			button.CycleIndex = 0;
		}
	}

	public static string GetBind(string name)
	{
		Button button = GetButton(name);
		if (button == null)
		{
			return "(button not found)";
		}
		if (button.Binds == null)
		{
			return "(nothing)";
		}
		return string.Join(";", button.Binds);
	}

	public static Button GetButton(string name)
	{
		return buttons.FirstOrDefault((Button x) => x.Name.Equals(name, StringComparison.InvariantCultureIgnoreCase));
	}

	public static void ClearBinds()
	{
		foreach (Button button in buttons)
		{
			button.Binds = null;
		}
	}

	public static Dictionary<string, Button> GetAllBinds()
	{
		return buttons.Where((Button x) => x.Binds != null && x.Binds.Length != 0).ToDictionary((Button x) => x.Name);
	}

	public static string[] GetAllButtons()
	{
		return buttons.Select((Button x) => x.Name).ToArray();
	}

	public static string[] GetPressedButtons()
	{
		return (from x in buttons
			where x.CurrentValue
			select x.Name).ToArray();
	}

	public static string[] GetButtonsWithBind(string bind)
	{
		return (from x in buttons
			where x.Binds != null && x.Binds.Contains(bind)
			select x.Name).ToArray();
	}

	public static bool IsBindInUse(string bind)
	{
		return buttons.Exists((Button x) => x.Binds != null && x.Binds.Contains(bind));
	}

	public static string GetButtonWithBind(string bind)
	{
		string[] buttonsWithBind = GetButtonsWithBind(bind);
		if (buttonsWithBind.Length == 0)
		{
			return "UNSET";
		}
		return buttonsWithBind[0];
	}

	public static Button GetButtonObjectWithBind(string bind)
	{
		return buttons.FirstOrDefault((Button x) => x.Binds != null && x.Binds.Contains(bind));
	}

	public static void GetButtonsWithBind(string bind, List<Button> results)
	{
		foreach (Button button in buttons)
		{
			if (button.Binds != null && button.Binds.Contains(bind))
			{
				results.Add(button);
			}
		}
	}
}
